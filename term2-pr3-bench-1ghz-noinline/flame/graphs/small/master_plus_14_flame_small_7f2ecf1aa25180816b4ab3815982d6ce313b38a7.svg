<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="886.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="869" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="869" > </text>
<g id="frames">
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="35.3" y="405" width="0.2" height="15.0" fill="rgb(223,194,22)" rx="2" ry="2" />
<text  x="38.32" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="335.4" y="533" width="0.6" height="15.0" fill="rgb(208,196,12)" rx="2" ry="2" />
<text  x="338.35" y="543.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (4 samples, 0.08%)</title><rect x="887.0" y="549" width="0.9" height="15.0" fill="rgb(241,29,51)" rx="2" ry="2" />
<text  x="890.03" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (1 samples, 0.02%)</title><rect x="105.0" y="661" width="0.2" height="15.0" fill="rgb(244,117,17)" rx="2" ry="2" />
<text  x="107.96" y="671.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (53 samples, 1.02%)</title><rect x="762.0" y="581" width="12.0" height="15.0" fill="rgb(238,139,28)" rx="2" ry="2" />
<text  x="765.00" y="591.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3 samples, 0.06%)</title><rect x="527.1" y="389" width="0.7" height="15.0" fill="rgb(251,26,49)" rx="2" ry="2" />
<text  x="530.08" y="399.5" ></text>
</g>
<g >
<title>_ZN8sstables20serialization_header13describe_typeIZNS_5writeIS0_NS_11file_writerEEEvNS_21sstable_version_typesERT0_RKT_EUlDpOT_E_EEDaS4_S7_ (1 samples, 0.02%)</title><rect x="12.9" y="597" width="0.3" height="15.0" fill="rgb(252,184,21)" rx="2" ry="2" />
<text  x="15.94" y="607.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1116.1" y="613" width="0.2" height="15.0" fill="rgb(250,5,29)" rx="2" ry="2" />
<text  x="1119.07" y="623.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%)</title><rect x="674.0" y="485" width="0.3" height="15.0" fill="rgb(252,75,37)" rx="2" ry="2" />
<text  x="677.05" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (6 samples, 0.11%)</title><rect x="764.3" y="501" width="1.3" height="15.0" fill="rgb(240,20,18)" rx="2" ry="2" />
<text  x="767.26" y="511.5" ></text>
</g>
<g >
<title>[unknown] (17 samples, 0.33%)</title><rect x="13.8" y="773" width="3.9" height="15.0" fill="rgb(217,148,24)" rx="2" ry="2" />
<text  x="16.84" y="783.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%)</title><rect x="551.5" y="373" width="0.2" height="15.0" fill="rgb(219,223,16)" rx="2" ry="2" />
<text  x="554.50" y="383.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="849.7" y="453" width="0.3" height="15.0" fill="rgb(249,180,17)" rx="2" ry="2" />
<text  x="852.72" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="711.6" y="645" width="0.2" height="15.0" fill="rgb(216,191,8)" rx="2" ry="2" />
<text  x="714.58" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1036.5" y="437" width="0.2" height="15.0" fill="rgb(205,105,12)" rx="2" ry="2" />
<text  x="1039.48" y="447.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="73.8" y="469" width="0.2" height="15.0" fill="rgb(251,84,38)" rx="2" ry="2" />
<text  x="76.76" y="479.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (3 samples, 0.06%)</title><rect x="716.1" y="661" width="0.7" height="15.0" fill="rgb(236,201,4)" rx="2" ry="2" />
<text  x="719.10" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="840.5" y="533" width="0.2" height="15.0" fill="rgb(208,187,12)" rx="2" ry="2" />
<text  x="843.45" y="543.5" ></text>
</g>
<g >
<title>partition_entry::apply_to_incomplete (1 samples, 0.02%)</title><rect x="740.3" y="437" width="0.2" height="15.0" fill="rgb(244,160,38)" rx="2" ry="2" />
<text  x="743.29" y="447.5" ></text>
</g>
<g >
<title>row::row (2 samples, 0.04%)</title><rect x="305.1" y="373" width="0.4" height="15.0" fill="rgb(245,109,31)" rx="2" ry="2" />
<text  x="308.06" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (14 samples, 0.27%)</title><rect x="268.4" y="341" width="3.2" height="15.0" fill="rgb(209,70,49)" rx="2" ry="2" />
<text  x="271.43" y="351.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (3 samples, 0.06%)</title><rect x="43.5" y="517" width="0.6" height="15.0" fill="rgb(235,139,23)" rx="2" ry="2" />
<text  x="46.46" y="527.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="887.3" y="517" width="0.2" height="15.0" fill="rgb(247,97,28)" rx="2" ry="2" />
<text  x="890.26" y="527.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%)</title><rect x="606.7" y="469" width="0.2" height="15.0" fill="rgb(223,106,43)" rx="2" ry="2" />
<text  x="609.67" y="479.5" ></text>
</g>
<g >
<title>reader_permit::consume (3 samples, 0.06%)</title><rect x="440.9" y="405" width="0.7" height="15.0" fill="rgb(219,191,16)" rx="2" ry="2" />
<text  x="443.94" y="415.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (1 samples, 0.02%)</title><rect x="613.2" y="485" width="0.3" height="15.0" fill="rgb(209,97,4)" rx="2" ry="2" />
<text  x="616.23" y="495.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1022.0" y="309" width="0.2" height="15.0" fill="rgb(211,169,27)" rx="2" ry="2" />
<text  x="1025.01" y="319.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (2 samples, 0.04%)</title><rect x="52.7" y="373" width="0.5" height="15.0" fill="rgb(248,192,5)" rx="2" ry="2" />
<text  x="55.73" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="584.7" y="565" width="0.3" height="15.0" fill="rgb(213,58,40)" rx="2" ry="2" />
<text  x="587.74" y="575.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (3 samples, 0.06%)</title><rect x="108.1" y="581" width="0.7" height="15.0" fill="rgb(207,156,51)" rx="2" ry="2" />
<text  x="111.13" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (6 samples, 0.11%)</title><rect x="594.0" y="485" width="1.4" height="15.0" fill="rgb(218,72,17)" rx="2" ry="2" />
<text  x="597.01" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="703.9" y="629" width="0.4" height="15.0" fill="rgb(216,131,11)" rx="2" ry="2" />
<text  x="706.89" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::configure (1 samples, 0.02%)</title><rect x="1168.7" y="709" width="0.3" height="15.0" fill="rgb(242,169,46)" rx="2" ry="2" />
<text  x="1171.75" y="719.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (9 samples, 0.17%)</title><rect x="203.3" y="373" width="2.0" height="15.0" fill="rgb(223,137,32)" rx="2" ry="2" />
<text  x="206.31" y="383.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::BaseRecognizer (2 samples, 0.04%)</title><rect x="24.0" y="549" width="0.5" height="15.0" fill="rgb(239,81,45)" rx="2" ry="2" />
<text  x="27.02" y="559.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="29.9" y="437" width="0.4" height="15.0" fill="rgb(231,212,24)" rx="2" ry="2" />
<text  x="32.90" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt;::allocate (1 samples, 0.02%)</title><rect x="296.9" y="373" width="0.2" height="15.0" fill="rgb(249,149,15)" rx="2" ry="2" />
<text  x="299.92" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="184.5" y="421" width="0.3" height="15.0" fill="rgb(238,69,28)" rx="2" ry="2" />
<text  x="187.55" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (1 samples, 0.02%)</title><rect x="952.1" y="597" width="0.3" height="15.0" fill="rgb(244,85,52)" rx="2" ry="2" />
<text  x="955.15" y="607.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="607.6" y="469" width="0.4" height="15.0" fill="rgb(214,29,38)" rx="2" ry="2" />
<text  x="610.57" y="479.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (19 samples, 0.36%)</title><rect x="440.5" y="421" width="4.3" height="15.0" fill="rgb(233,32,0)" rx="2" ry="2" />
<text  x="443.49" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="673.6" y="613" width="0.2" height="15.0" fill="rgb(246,137,10)" rx="2" ry="2" />
<text  x="676.59" y="623.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (114 samples, 2.18%)</title><rect x="40.1" y="549" width="25.7" height="15.0" fill="rgb(250,85,40)" rx="2" ry="2" />
<text  x="43.07" y="559.5" >c..</text>
</g>
<g >
<title>db::schema_tables::add_table_params_to_mutations (1 samples, 0.02%)</title><rect x="107.7" y="501" width="0.2" height="15.0" fill="rgb(231,169,1)" rx="2" ry="2" />
<text  x="110.67" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_stopIndex (1 samples, 0.02%)</title><rect x="29.7" y="437" width="0.2" height="15.0" fill="rgb(218,108,49)" rx="2" ry="2" />
<text  x="32.67" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="880.2" y="645" width="0.5" height="15.0" fill="rgb(236,62,6)" rx="2" ry="2" />
<text  x="883.25" y="655.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="665.7" y="661" width="0.2" height="15.0" fill="rgb(249,194,40)" rx="2" ry="2" />
<text  x="668.68" y="671.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="740.3" y="517" width="0.2" height="15.0" fill="rgb(241,163,42)" rx="2" ry="2" />
<text  x="743.29" y="527.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (3 samples, 0.06%)</title><rect x="1062.3" y="485" width="0.6" height="15.0" fill="rgb(214,64,26)" rx="2" ry="2" />
<text  x="1065.26" y="495.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (4 samples, 0.08%)</title><rect x="106.3" y="677" width="0.9" height="15.0" fill="rgb(239,68,27)" rx="2" ry="2" />
<text  x="109.32" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (1 samples, 0.02%)</title><rect x="883.6" y="677" width="0.3" height="15.0" fill="rgb(231,221,38)" rx="2" ry="2" />
<text  x="886.64" y="687.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (4 samples, 0.08%)</title><rect x="106.3" y="645" width="0.9" height="15.0" fill="rgb(218,174,32)" rx="2" ry="2" />
<text  x="109.32" y="655.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (43 samples, 0.82%)</title><rect x="586.8" y="597" width="9.7" height="15.0" fill="rgb(254,43,50)" rx="2" ry="2" />
<text  x="589.77" y="607.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="328.8" y="453" width="2.0" height="15.0" fill="rgb(207,77,53)" rx="2" ry="2" />
<text  x="331.80" y="463.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="18.6" y="693" width="0.2" height="15.0" fill="rgb(218,52,15)" rx="2" ry="2" />
<text  x="21.59" y="703.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (6 samples, 0.11%)</title><rect x="690.3" y="661" width="1.4" height="15.0" fill="rgb(223,32,45)" rx="2" ry="2" />
<text  x="693.33" y="671.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="625.0" y="565" width="1.1" height="15.0" fill="rgb(245,90,24)" rx="2" ry="2" />
<text  x="627.98" y="575.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (13 samples, 0.25%)</title><rect x="770.6" y="469" width="2.9" height="15.0" fill="rgb(219,173,8)" rx="2" ry="2" />
<text  x="773.59" y="479.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (1 samples, 0.02%)</title><rect x="477.3" y="533" width="0.3" height="15.0" fill="rgb(232,223,28)" rx="2" ry="2" />
<text  x="480.34" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="55.7" y="405" width="0.2" height="15.0" fill="rgb(233,26,28)" rx="2" ry="2" />
<text  x="58.67" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="1013.0" y="389" width="0.9" height="15.0" fill="rgb(210,88,17)" rx="2" ry="2" />
<text  x="1015.97" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="825.3" y="373" width="0.2" height="15.0" fill="rgb(240,229,53)" rx="2" ry="2" />
<text  x="828.31" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (5 samples, 0.10%)</title><rect x="271.8" y="357" width="1.2" height="15.0" fill="rgb(226,24,43)" rx="2" ry="2" />
<text  x="274.82" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (1 samples, 0.02%)</title><rect x="979.5" y="533" width="0.2" height="15.0" fill="rgb(250,158,14)" rx="2" ry="2" />
<text  x="982.50" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%)</title><rect x="812.0" y="437" width="0.2" height="15.0" fill="rgb(206,221,17)" rx="2" ry="2" />
<text  x="814.97" y="447.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (4 samples, 0.08%)</title><rect x="106.3" y="597" width="0.9" height="15.0" fill="rgb(242,21,20)" rx="2" ry="2" />
<text  x="109.32" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (519 samples, 9.94%)</title><rect x="344.6" y="501" width="117.4" height="15.0" fill="rgb(239,21,1)" rx="2" ry="2" />
<text  x="347.62" y="511.5" >seastar::inter..</text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (2 samples, 0.04%)</title><rect x="1119.9" y="389" width="0.5" height="15.0" fill="rgb(246,35,48)" rx="2" ry="2" />
<text  x="1122.91" y="399.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="684.0" y="629" width="0.2" height="15.0" fill="rgb(243,81,53)" rx="2" ry="2" />
<text  x="687.00" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="669.3" y="645" width="0.2" height="15.0" fill="rgb(205,50,51)" rx="2" ry="2" />
<text  x="672.30" y="655.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::attributes::raw&gt; (1 samples, 0.02%)</title><rect x="65.2" y="533" width="0.2" height="15.0" fill="rgb(226,53,54)" rx="2" ry="2" />
<text  x="68.17" y="543.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="1016.1" y="373" width="0.3" height="15.0" fill="rgb(221,206,8)" rx="2" ry="2" />
<text  x="1019.13" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::modification_statement (1 samples, 0.02%)</title><rect x="78.3" y="549" width="0.2" height="15.0" fill="rgb(241,116,31)" rx="2" ry="2" />
<text  x="81.28" y="559.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (58 samples, 1.11%)</title><rect x="812.4" y="421" width="13.1" height="15.0" fill="rgb(213,58,43)" rx="2" ry="2" />
<text  x="815.42" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (1 samples, 0.02%)</title><rect x="595.6" y="565" width="0.2" height="15.0" fill="rgb(250,85,7)" rx="2" ry="2" />
<text  x="598.59" y="575.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%)</title><rect x="133.9" y="629" width="0.2" height="15.0" fill="rgb(233,34,25)" rx="2" ry="2" />
<text  x="136.90" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%)</title><rect x="904.0" y="597" width="0.2" height="15.0" fill="rgb(215,116,34)" rx="2" ry="2" />
<text  x="906.99" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%)</title><rect x="905.8" y="581" width="0.4" height="15.0" fill="rgb(250,68,43)" rx="2" ry="2" />
<text  x="908.80" y="591.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (1 samples, 0.02%)</title><rect x="106.8" y="261" width="0.2" height="15.0" fill="rgb(240,112,31)" rx="2" ry="2" />
<text  x="109.77" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="206.9" y="341" width="0.9" height="15.0" fill="rgb(207,69,32)" rx="2" ry="2" />
<text  x="209.93" y="351.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="946.5" y="549" width="0.2" height="15.0" fill="rgb(226,102,28)" rx="2" ry="2" />
<text  x="949.49" y="559.5" ></text>
</g>
<g >
<title>mutation::set_cell (1 samples, 0.02%)</title><rect x="19.9" y="581" width="0.3" height="15.0" fill="rgb(219,111,3)" rx="2" ry="2" />
<text  x="22.95" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_initialize_map (1 samples, 0.02%)</title><rect x="24.0" y="453" width="0.2" height="15.0" fill="rgb(211,180,14)" rx="2" ry="2" />
<text  x="27.02" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Uninitialized&lt;cql3::expr::constant, false&gt;::_Uninitialized&lt;cql3::expr::constant&gt; (1 samples, 0.02%)</title><rect x="74.2" y="517" width="0.2" height="15.0" fill="rgb(228,133,28)" rx="2" ry="2" />
<text  x="77.21" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="887.7" y="453" width="0.2" height="15.0" fill="rgb(245,48,3)" rx="2" ry="2" />
<text  x="890.71" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_range&lt;std::__detail::_Node_iterator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, false, true&gt;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="107.4" y="581" width="0.3" height="15.0" fill="rgb(237,46,30)" rx="2" ry="2" />
<text  x="110.45" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="264.4" y="325" width="0.4" height="15.0" fill="rgb(232,76,3)" rx="2" ry="2" />
<text  x="267.36" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (13 samples, 0.25%)</title><rect x="888.8" y="517" width="3.0" height="15.0" fill="rgb(219,120,13)" rx="2" ry="2" />
<text  x="891.84" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="268.2" y="325" width="0.2" height="15.0" fill="rgb(253,82,1)" rx="2" ry="2" />
<text  x="271.20" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (3 samples, 0.06%)</title><rect x="301.9" y="421" width="0.7" height="15.0" fill="rgb(253,51,5)" rx="2" ry="2" />
<text  x="304.89" y="431.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (7 samples, 0.13%)</title><rect x="817.6" y="389" width="1.6" height="15.0" fill="rgb(239,136,39)" rx="2" ry="2" />
<text  x="820.62" y="399.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (1 samples, 0.02%)</title><rect x="884.8" y="597" width="0.2" height="15.0" fill="rgb(226,61,38)" rx="2" ry="2" />
<text  x="887.77" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="674.0" y="597" width="0.5" height="15.0" fill="rgb(251,12,41)" rx="2" ry="2" />
<text  x="677.05" y="607.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (3 samples, 0.06%)</title><rect x="1098.4" y="533" width="0.7" height="15.0" fill="rgb(248,160,3)" rx="2" ry="2" />
<text  x="1101.43" y="543.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="888.2" y="517" width="0.2" height="15.0" fill="rgb(241,41,30)" rx="2" ry="2" />
<text  x="891.16" y="527.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="52.5" y="421" width="0.7" height="15.0" fill="rgb(252,155,2)" rx="2" ry="2" />
<text  x="55.51" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%)</title><rect x="947.9" y="581" width="0.4" height="15.0" fill="rgb(209,77,52)" rx="2" ry="2" />
<text  x="950.85" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="551.7" y="357" width="0.7" height="15.0" fill="rgb(216,172,3)" rx="2" ry="2" />
<text  x="554.73" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1130.3" y="293" width="0.2" height="15.0" fill="rgb(253,50,12)" rx="2" ry="2" />
<text  x="1133.31" y="303.5" ></text>
</g>
<g >
<title>compound_type&lt; (12 samples, 0.23%)</title><rect x="933.8" y="549" width="2.7" height="15.0" fill="rgb(249,36,30)" rx="2" ry="2" />
<text  x="936.83" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="62.0" y="357" width="0.2" height="15.0" fill="rgb(215,171,54)" rx="2" ry="2" />
<text  x="65.00" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (2 samples, 0.04%)</title><rect x="879.8" y="613" width="0.4" height="15.0" fill="rgb(218,194,18)" rx="2" ry="2" />
<text  x="882.79" y="623.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (50 samples, 0.96%)</title><rect x="860.6" y="613" width="11.3" height="15.0" fill="rgb(210,16,20)" rx="2" ry="2" />
<text  x="863.58" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="62.9" y="405" width="0.2" height="15.0" fill="rgb(217,203,42)" rx="2" ry="2" />
<text  x="65.91" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="567.1" y="517" width="0.2" height="15.0" fill="rgb(227,62,31)" rx="2" ry="2" />
<text  x="570.10" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="45.0" y="341" width="0.3" height="15.0" fill="rgb(223,185,14)" rx="2" ry="2" />
<text  x="48.05" y="351.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="563.7" y="501" width="2.5" height="15.0" fill="rgb(217,65,29)" rx="2" ry="2" />
<text  x="566.71" y="511.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="707.5" y="645" width="0.2" height="15.0" fill="rgb(214,194,19)" rx="2" ry="2" />
<text  x="710.51" y="655.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.0" y="773" width="0.3" height="15.0" fill="rgb(237,165,26)" rx="2" ry="2" />
<text  x="86.03" y="783.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (2 samples, 0.04%)</title><rect x="737.4" y="629" width="0.4" height="15.0" fill="rgb(229,130,35)" rx="2" ry="2" />
<text  x="740.35" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type&gt; (1 samples, 0.02%)</title><rect x="980.2" y="533" width="0.2" height="15.0" fill="rgb(224,197,1)" rx="2" ry="2" />
<text  x="983.18" y="543.5" ></text>
</g>
<g >
<title>frozen_mutation::partition (1 samples, 0.02%)</title><rect x="1119.0" y="421" width="0.2" height="15.0" fill="rgb(212,216,39)" rx="2" ry="2" />
<text  x="1122.01" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="24.9" y="517" width="0.2" height="15.0" fill="rgb(246,185,54)" rx="2" ry="2" />
<text  x="27.92" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (9 samples, 0.17%)</title><rect x="982.7" y="485" width="2.0" height="15.0" fill="rgb(244,61,52)" rx="2" ry="2" />
<text  x="985.67" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="1134.2" y="677" width="0.4" height="15.0" fill="rgb(234,142,54)" rx="2" ry="2" />
<text  x="1137.15" y="687.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="10.9" y="757" width="0.2" height="15.0" fill="rgb(213,70,11)" rx="2" ry="2" />
<text  x="13.90" y="767.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (1 samples, 0.02%)</title><rect x="106.8" y="437" width="0.2" height="15.0" fill="rgb(239,24,34)" rx="2" ry="2" />
<text  x="109.77" y="447.5" ></text>
</g>
<g >
<title>schema::static_columns (1 samples, 0.02%)</title><rect x="106.3" y="565" width="0.2" height="15.0" fill="rgb(239,113,45)" rx="2" ry="2" />
<text  x="109.32" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="50.9" y="469" width="0.2" height="15.0" fill="rgb(228,191,26)" rx="2" ry="2" />
<text  x="53.92" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="714.3" y="661" width="0.4" height="15.0" fill="rgb(219,133,19)" rx="2" ry="2" />
<text  x="717.29" y="671.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="63.4" y="245" width="0.2" height="15.0" fill="rgb(213,52,28)" rx="2" ry="2" />
<text  x="66.36" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="58.6" y="293" width="0.2" height="15.0" fill="rgb(239,22,51)" rx="2" ry="2" />
<text  x="61.61" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (1 samples, 0.02%)</title><rect x="883.2" y="629" width="0.2" height="15.0" fill="rgb(222,146,18)" rx="2" ry="2" />
<text  x="886.19" y="639.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="795.5" y="517" width="0.2" height="15.0" fill="rgb(247,62,4)" rx="2" ry="2" />
<text  x="798.46" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="76.7" y="501" width="0.2" height="15.0" fill="rgb(208,16,2)" rx="2" ry="2" />
<text  x="79.70" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (5 samples, 0.10%)</title><rect x="768.6" y="469" width="1.1" height="15.0" fill="rgb(219,137,50)" rx="2" ry="2" />
<text  x="771.56" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="471.9" y="581" width="0.5" height="15.0" fill="rgb(206,156,48)" rx="2" ry="2" />
<text  x="474.92" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="19.3" y="677" width="0.2" height="15.0" fill="rgb(222,176,28)" rx="2" ry="2" />
<text  x="22.27" y="687.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%)</title><rect x="698.0" y="645" width="0.7" height="15.0" fill="rgb(252,221,8)" rx="2" ry="2" />
<text  x="701.01" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="64.7" y="357" width="0.2" height="15.0" fill="rgb(238,177,39)" rx="2" ry="2" />
<text  x="67.72" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (11 samples, 0.21%)</title><rect x="1156.5" y="661" width="2.5" height="15.0" fill="rgb(210,168,6)" rx="2" ry="2" />
<text  x="1159.54" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (32 samples, 0.61%)</title><rect x="606.0" y="485" width="7.2" height="15.0" fill="rgb(220,161,13)" rx="2" ry="2" />
<text  x="608.99" y="495.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;long, std::allocator&lt;long&gt; &gt;::push_back_impl&lt;long const&amp;&gt; (1 samples, 0.02%)</title><rect x="708.9" y="613" width="0.2" height="15.0" fill="rgb(222,123,17)" rx="2" ry="2" />
<text  x="711.87" y="623.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::reset&lt;cql3_parser::CqlParser&gt; (1 samples, 0.02%)</title><rect x="23.8" y="533" width="0.2" height="15.0" fill="rgb(212,177,11)" rx="2" ry="2" />
<text  x="26.79" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%)</title><rect x="76.9" y="533" width="0.3" height="15.0" fill="rgb(252,43,21)" rx="2" ry="2" />
<text  x="79.92" y="543.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7f2ecf1aa25180816b4ab3815982d6ce313b38a7] (1 samples, 0.02%)</title><rect x="838.0" y="437" width="0.2" height="15.0" fill="rgb(242,155,7)" rx="2" ry="2" />
<text  x="840.97" y="447.5" ></text>
</g>
<g >
<title>operator delete (9 samples, 0.17%)</title><rect x="454.1" y="421" width="2.0" height="15.0" fill="rgb(225,52,40)" rx="2" ry="2" />
<text  x="457.05" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (3 samples, 0.06%)</title><rect x="884.8" y="629" width="0.6" height="15.0" fill="rgb(205,171,14)" rx="2" ry="2" />
<text  x="887.77" y="639.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (4 samples, 0.08%)</title><rect x="822.6" y="325" width="0.9" height="15.0" fill="rgb(206,200,32)" rx="2" ry="2" />
<text  x="825.59" y="335.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="831.2" y="453" width="0.2" height="15.0" fill="rgb(235,108,50)" rx="2" ry="2" />
<text  x="834.18" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="41.2" y="389" width="0.2" height="15.0" fill="rgb(216,8,36)" rx="2" ry="2" />
<text  x="44.20" y="399.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (15 samples, 0.29%)</title><rect x="730.8" y="629" width="3.4" height="15.0" fill="rgb(242,24,52)" rx="2" ry="2" />
<text  x="733.80" y="639.5" ></text>
</g>
<g >
<title>tolower (1 samples, 0.02%)</title><rect x="42.6" y="485" width="0.2" height="15.0" fill="rgb(213,4,32)" rx="2" ry="2" />
<text  x="45.56" y="495.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%)</title><rect x="762.5" y="565" width="0.2" height="15.0" fill="rgb(240,109,29)" rx="2" ry="2" />
<text  x="765.45" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="688.5" y="661" width="0.5" height="15.0" fill="rgb(251,53,25)" rx="2" ry="2" />
<text  x="691.52" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1163.8" y="597" width="0.2" height="15.0" fill="rgb(254,157,2)" rx="2" ry="2" />
<text  x="1166.77" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1059.5" y="469" width="0.3" height="15.0" fill="rgb(233,152,52)" rx="2" ry="2" />
<text  x="1062.54" y="479.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="1147.7" y="565" width="0.9" height="15.0" fill="rgb(239,14,19)" rx="2" ry="2" />
<text  x="1150.72" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="55.2" y="405" width="0.2" height="15.0" fill="rgb(220,8,21)" rx="2" ry="2" />
<text  x="58.22" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (198 samples, 3.79%)</title><rect x="221.4" y="357" width="44.8" height="15.0" fill="rgb(227,73,37)" rx="2" ry="2" />
<text  x="224.40" y="367.5" >muta..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="740.3" y="453" width="0.2" height="15.0" fill="rgb(208,100,25)" rx="2" ry="2" />
<text  x="743.29" y="463.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (1 samples, 0.02%)</title><rect x="887.7" y="501" width="0.2" height="15.0" fill="rgb(205,8,21)" rx="2" ry="2" />
<text  x="890.71" y="511.5" ></text>
</g>
<g >
<title>crc32_nbo::process_fragmented&lt;ser::buffer_view&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1123.5" y="437" width="0.3" height="15.0" fill="rgb(239,173,45)" rx="2" ry="2" />
<text  x="1126.53" y="447.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (44 samples, 0.84%)</title><rect x="122.8" y="629" width="10.0" height="15.0" fill="rgb(250,157,34)" rx="2" ry="2" />
<text  x="125.82" y="639.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="611.9" y="453" width="0.4" height="15.0" fill="rgb(235,159,30)" rx="2" ry="2" />
<text  x="614.87" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="697.1" y="629" width="0.2" height="15.0" fill="rgb(223,124,31)" rx="2" ry="2" />
<text  x="700.11" y="639.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::insert_cdc_generation (1 samples, 0.02%)</title><rect x="19.9" y="613" width="0.3" height="15.0" fill="rgb(238,10,26)" rx="2" ry="2" />
<text  x="22.95" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (2 samples, 0.04%)</title><rect x="1138.7" y="645" width="0.4" height="15.0" fill="rgb(219,148,41)" rx="2" ry="2" />
<text  x="1141.68" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (4 samples, 0.08%)</title><rect x="456.3" y="405" width="0.9" height="15.0" fill="rgb(249,135,41)" rx="2" ry="2" />
<text  x="459.32" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="73.3" y="469" width="0.2" height="15.0" fill="rgb(209,211,4)" rx="2" ry="2" />
<text  x="76.31" y="479.5" ></text>
</g>
<g >
<title>cql3::terminal::to_expression (1 samples, 0.02%)</title><rect x="73.3" y="517" width="0.2" height="15.0" fill="rgb(245,21,52)" rx="2" ry="2" />
<text  x="76.31" y="527.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="46.2" y="341" width="0.4" height="15.0" fill="rgb(207,28,51)" rx="2" ry="2" />
<text  x="49.18" y="351.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::to_receivers (1 samples, 0.02%)</title><rect x="74.7" y="549" width="0.2" height="15.0" fill="rgb(244,9,2)" rx="2" ry="2" />
<text  x="77.66" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (4 samples, 0.08%)</title><rect x="906.2" y="581" width="1.0" height="15.0" fill="rgb(226,63,47)" rx="2" ry="2" />
<text  x="909.25" y="591.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::drop_table_statement*, std::default_delete&lt;cql3::statements::drop_table_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="66.5" y="501" width="0.3" height="15.0" fill="rgb(230,227,27)" rx="2" ry="2" />
<text  x="69.52" y="511.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (7 samples, 0.13%)</title><rect x="127.6" y="581" width="1.6" height="15.0" fill="rgb(230,93,1)" rx="2" ry="2" />
<text  x="130.57" y="591.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::response (3 samples, 0.06%)</title><rect x="739.2" y="645" width="0.6" height="15.0" fill="rgb(212,126,24)" rx="2" ry="2" />
<text  x="742.16" y="655.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="106.8" y="341" width="0.2" height="15.0" fill="rgb(241,123,52)" rx="2" ry="2" />
<text  x="109.77" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (5 samples, 0.10%)</title><rect x="42.1" y="533" width="1.1" height="15.0" fill="rgb(222,58,12)" rx="2" ry="2" />
<text  x="45.11" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="40.7" y="421" width="0.3" height="15.0" fill="rgb(239,118,35)" rx="2" ry="2" />
<text  x="43.75" y="431.5" ></text>
</g>
<g >
<title>seastar::thread_pool::work (1 samples, 0.02%)</title><rect x="1189.8" y="757" width="0.2" height="15.0" fill="rgb(240,44,29)" rx="2" ry="2" />
<text  x="1192.77" y="767.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="743.2" y="677" width="0.3" height="15.0" fill="rgb(223,34,47)" rx="2" ry="2" />
<text  x="746.23" y="687.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::range_or_slice_eq_null (2 samples, 0.04%)</title><rect x="886.6" y="565" width="0.4" height="15.0" fill="rgb(209,171,52)" rx="2" ry="2" />
<text  x="889.58" y="575.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="538.6" y="469" width="0.5" height="15.0" fill="rgb(224,117,53)" rx="2" ry="2" />
<text  x="541.61" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (3 samples, 0.06%)</title><rect x="1015.5" y="373" width="0.6" height="15.0" fill="rgb(233,202,11)" rx="2" ry="2" />
<text  x="1018.45" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="44.8" y="485" width="0.5" height="15.0" fill="rgb(246,90,25)" rx="2" ry="2" />
<text  x="47.82" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="48.2" y="437" width="0.5" height="15.0" fill="rgb(214,216,38)" rx="2" ry="2" />
<text  x="51.21" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="265.0" y="325" width="0.3" height="15.0" fill="rgb(215,36,25)" rx="2" ry="2" />
<text  x="268.04" y="335.5" ></text>
</g>
<g >
<title>db::commitlog::segment::allocate (5 samples, 0.10%)</title><rect x="1123.1" y="453" width="1.1" height="15.0" fill="rgb(236,158,19)" rx="2" ry="2" />
<text  x="1126.08" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (3 samples, 0.06%)</title><rect x="742.6" y="677" width="0.6" height="15.0" fill="rgb(251,197,35)" rx="2" ry="2" />
<text  x="745.55" y="687.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (1 samples, 0.02%)</title><rect x="106.8" y="405" width="0.2" height="15.0" fill="rgb(211,49,5)" rx="2" ry="2" />
<text  x="109.77" y="415.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (6 samples, 0.11%)</title><rect x="324.3" y="485" width="1.3" height="15.0" fill="rgb(218,27,28)" rx="2" ry="2" />
<text  x="327.27" y="495.5" ></text>
</g>
<g >
<title>schema::get_column_definition (3 samples, 0.06%)</title><rect x="77.4" y="597" width="0.7" height="15.0" fill="rgb(241,24,20)" rx="2" ry="2" />
<text  x="80.38" y="607.5" ></text>
</g>
<g >
<title>cql3::relation::to_restriction (7 samples, 0.13%)</title><rect x="73.3" y="565" width="1.6" height="15.0" fill="rgb(239,129,21)" rx="2" ry="2" />
<text  x="76.31" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (3 samples, 0.06%)</title><rect x="313.9" y="501" width="0.7" height="15.0" fill="rgb(224,18,33)" rx="2" ry="2" />
<text  x="316.87" y="511.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="138.0" y="421" width="0.2" height="15.0" fill="rgb(237,108,10)" rx="2" ry="2" />
<text  x="140.97" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (35 samples, 0.67%)</title><rect x="70.6" y="613" width="7.9" height="15.0" fill="rgb(217,35,48)" rx="2" ry="2" />
<text  x="73.59" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="45.7" y="373" width="0.5" height="15.0" fill="rgb(212,186,53)" rx="2" ry="2" />
<text  x="48.72" y="383.5" ></text>
</g>
<g >
<title>database::find_keyspace (1 samples, 0.02%)</title><rect x="1131.4" y="373" width="0.3" height="15.0" fill="rgb(218,79,43)" rx="2" ry="2" />
<text  x="1134.44" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (2 samples, 0.04%)</title><rect x="1041.2" y="469" width="0.5" height="15.0" fill="rgb(234,33,11)" rx="2" ry="2" />
<text  x="1044.23" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="397.8" y="325" width="0.6" height="15.0" fill="rgb(250,227,27)" rx="2" ry="2" />
<text  x="400.76" y="335.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="852.0" y="597" width="0.4" height="15.0" fill="rgb(242,33,22)" rx="2" ry="2" />
<text  x="854.99" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="958.0" y="581" width="0.3" height="15.0" fill="rgb(239,217,7)" rx="2" ry="2" />
<text  x="961.02" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="577.3" y="421" width="0.2" height="15.0" fill="rgb(248,103,18)" rx="2" ry="2" />
<text  x="580.28" y="431.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="18.4" y="725" width="0.2" height="15.0" fill="rgb(227,67,37)" rx="2" ry="2" />
<text  x="21.37" y="735.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;cql3::result_generator::query_result_visitor&lt;cql3::untyped_result_set::visitor&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="671.6" y="581" width="0.2" height="15.0" fill="rgb(232,186,2)" rx="2" ry="2" />
<text  x="674.56" y="591.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (1 samples, 0.02%)</title><rect x="872.1" y="629" width="0.2" height="15.0" fill="rgb(244,54,2)" rx="2" ry="2" />
<text  x="875.11" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::query_options&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="694.8" y="661" width="0.3" height="15.0" fill="rgb(254,53,5)" rx="2" ry="2" />
<text  x="697.85" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="897.7" y="645" width="0.2" height="15.0" fill="rgb(209,212,49)" rx="2" ry="2" />
<text  x="900.66" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="577.5" y="421" width="1.1" height="15.0" fill="rgb(240,117,6)" rx="2" ry="2" />
<text  x="580.50" y="431.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getCharIndex (1 samples, 0.02%)</title><rect x="108.1" y="373" width="0.3" height="15.0" fill="rgb(253,75,36)" rx="2" ry="2" />
<text  x="111.13" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (6 samples, 0.11%)</title><rect x="197.7" y="437" width="1.3" height="15.0" fill="rgb(242,225,35)" rx="2" ry="2" />
<text  x="200.66" y="447.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (14 samples, 0.27%)</title><rect x="754.3" y="517" width="3.2" height="15.0" fill="rgb(208,177,26)" rx="2" ry="2" />
<text  x="757.31" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%)</title><rect x="956.4" y="565" width="1.4" height="15.0" fill="rgb(231,40,41)" rx="2" ry="2" />
<text  x="959.44" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (3 samples, 0.06%)</title><rect x="700.0" y="661" width="0.7" height="15.0" fill="rgb(217,14,0)" rx="2" ry="2" />
<text  x="703.05" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (1 samples, 0.02%)</title><rect x="312.5" y="469" width="0.2" height="15.0" fill="rgb(208,128,24)" rx="2" ry="2" />
<text  x="315.52" y="479.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="585.0" y="581" width="0.2" height="15.0" fill="rgb(238,82,27)" rx="2" ry="2" />
<text  x="587.96" y="591.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="1133.0" y="421" width="0.2" height="15.0" fill="rgb(239,79,31)" rx="2" ry="2" />
<text  x="1136.02" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="643.3" y="613" width="0.2" height="15.0" fill="rgb(225,28,43)" rx="2" ry="2" />
<text  x="646.30" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%)</title><rect x="547.0" y="421" width="0.2" height="15.0" fill="rgb(253,91,21)" rx="2" ry="2" />
<text  x="549.98" y="431.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (13 samples, 0.25%)</title><rect x="576.1" y="485" width="3.0" height="15.0" fill="rgb(245,175,29)" rx="2" ry="2" />
<text  x="579.15" y="495.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="108.8" y="453" width="0.2" height="15.0" fill="rgb(223,70,47)" rx="2" ry="2" />
<text  x="111.80" y="463.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="630.0" y="581" width="0.6" height="15.0" fill="rgb(214,169,10)" rx="2" ry="2" />
<text  x="632.96" y="591.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (1 samples, 0.02%)</title><rect x="36.2" y="405" width="0.3" height="15.0" fill="rgb(213,6,31)" rx="2" ry="2" />
<text  x="39.23" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="10.9" y="581" width="0.2" height="15.0" fill="rgb(218,113,1)" rx="2" ry="2" />
<text  x="13.90" y="591.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous, auth::get_permissions (1 samples, 0.02%)</title><rect x="831.9" y="485" width="0.2" height="15.0" fill="rgb(219,54,4)" rx="2" ry="2" />
<text  x="834.86" y="495.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (12 samples, 0.23%)</title><rect x="83.9" y="789" width="2.7" height="15.0" fill="rgb(243,112,18)" rx="2" ry="2" />
<text  x="86.93" y="799.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (10 samples, 0.19%)</title><rect x="1166.3" y="693" width="2.2" height="15.0" fill="rgb(240,65,1)" rx="2" ry="2" />
<text  x="1169.26" y="703.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (1 samples, 0.02%)</title><rect x="741.0" y="677" width="0.2" height="15.0" fill="rgb(244,36,41)" rx="2" ry="2" />
<text  x="743.97" y="687.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="10.9" y="565" width="0.2" height="15.0" fill="rgb(214,0,5)" rx="2" ry="2" />
<text  x="13.90" y="575.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (7 samples, 0.13%)</title><rect x="512.8" y="469" width="1.6" height="15.0" fill="rgb(246,34,40)" rx="2" ry="2" />
<text  x="515.84" y="479.5" ></text>
</g>
<g >
<title>service::storage_service::mutate_token_metadata (1 samples, 0.02%)</title><rect x="20.4" y="629" width="0.2" height="15.0" fill="rgb(216,40,53)" rx="2" ry="2" />
<text  x="23.40" y="639.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="107.7" y="613" width="0.2" height="15.0" fill="rgb(230,219,26)" rx="2" ry="2" />
<text  x="110.67" y="623.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%)</title><rect x="780.5" y="581" width="0.3" height="15.0" fill="rgb(226,126,31)" rx="2" ry="2" />
<text  x="783.54" y="591.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (6 samples, 0.11%)</title><rect x="200.8" y="421" width="1.4" height="15.0" fill="rgb(231,9,30)" rx="2" ry="2" />
<text  x="203.83" y="431.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (3 samples, 0.06%)</title><rect x="63.4" y="485" width="0.6" height="15.0" fill="rgb(220,73,34)" rx="2" ry="2" />
<text  x="66.36" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (1 samples, 0.02%)</title><rect x="884.8" y="613" width="0.2" height="15.0" fill="rgb(243,67,7)" rx="2" ry="2" />
<text  x="887.77" y="623.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (2 samples, 0.04%)</title><rect x="277.2" y="357" width="0.5" height="15.0" fill="rgb(246,181,49)" rx="2" ry="2" />
<text  x="280.25" y="367.5" ></text>
</g>
<g >
<title>service::mutation_holder::reply (1 samples, 0.02%)</title><rect x="739.6" y="629" width="0.2" height="15.0" fill="rgb(254,109,35)" rx="2" ry="2" />
<text  x="742.61" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (3 samples, 0.06%)</title><rect x="1048.5" y="453" width="0.6" height="15.0" fill="rgb(221,142,10)" rx="2" ry="2" />
<text  x="1051.46" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (239 samples, 4.58%)</title><rect x="219.1" y="373" width="54.1" height="15.0" fill="rgb(212,104,33)" rx="2" ry="2" />
<text  x="222.14" y="383.5" >parti..</text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="883.2" y="549" width="0.2" height="15.0" fill="rgb(249,143,22)" rx="2" ry="2" />
<text  x="886.19" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="58.6" y="373" width="0.2" height="15.0" fill="rgb(208,202,43)" rx="2" ry="2" />
<text  x="61.61" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="839.5" y="549" width="0.3" height="15.0" fill="rgb(220,146,21)" rx="2" ry="2" />
<text  x="842.55" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="59.7" y="469" width="0.3" height="15.0" fill="rgb(250,50,28)" rx="2" ry="2" />
<text  x="62.74" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="888.2" y="453" width="0.2" height="15.0" fill="rgb(239,95,5)" rx="2" ry="2" />
<text  x="891.16" y="463.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="37.6" y="405" width="0.2" height="15.0" fill="rgb(208,122,42)" rx="2" ry="2" />
<text  x="40.58" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (7 samples, 0.13%)</title><rect x="823.7" y="309" width="1.6" height="15.0" fill="rgb(206,187,30)" rx="2" ry="2" />
<text  x="826.72" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="27.6" y="437" width="0.5" height="15.0" fill="rgb(233,208,32)" rx="2" ry="2" />
<text  x="30.64" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (126 samples, 2.41%)</title><rect x="597.9" y="597" width="28.4" height="15.0" fill="rgb(213,8,42)" rx="2" ry="2" />
<text  x="600.85" y="607.5" >st..</text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="305.7" y="405" width="0.3" height="15.0" fill="rgb(217,193,5)" rx="2" ry="2" />
<text  x="308.73" y="415.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (1 samples, 0.02%)</title><rect x="1069.5" y="453" width="0.2" height="15.0" fill="rgb(214,92,0)" rx="2" ry="2" />
<text  x="1072.49" y="463.5" ></text>
</g>
<g >
<title>cql3::selection::simple_selection::simple_selection (1 samples, 0.02%)</title><rect x="83.5" y="421" width="0.2" height="15.0" fill="rgb(213,59,27)" rx="2" ry="2" />
<text  x="86.48" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="779.2" y="581" width="0.2" height="15.0" fill="rgb(211,105,41)" rx="2" ry="2" />
<text  x="782.18" y="591.5" ></text>
</g>
<g >
<title>perf_simple_que (5,217 samples, 99.96%)</title><rect x="10.0" y="821" width="1179.5" height="15.0" fill="rgb(254,21,50)" rx="2" ry="2" />
<text  x="13.00" y="831.5" >perf_simple_que</text>
</g>
<g >
<title>cql3::untyped_result_set::untyped_result_set (1 samples, 0.02%)</title><rect x="671.6" y="629" width="0.2" height="15.0" fill="rgb(206,125,43)" rx="2" ry="2" />
<text  x="674.56" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (12 samples, 0.23%)</title><rect x="459.3" y="485" width="2.7" height="15.0" fill="rgb(220,141,52)" rx="2" ry="2" />
<text  x="462.25" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (21 samples, 0.40%)</title><rect x="1069.7" y="453" width="4.8" height="15.0" fill="rgb(207,182,18)" rx="2" ry="2" />
<text  x="1072.72" y="463.5" ></text>
</g>
<g >
<title>frozen_mutation::unfreeze (1 samples, 0.02%)</title><rect x="105.9" y="645" width="0.2" height="15.0" fill="rgb(210,58,49)" rx="2" ry="2" />
<text  x="108.87" y="655.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (4 samples, 0.08%)</title><rect x="315.7" y="517" width="0.9" height="15.0" fill="rgb(238,220,14)" rx="2" ry="2" />
<text  x="318.68" y="527.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="46.4" y="293" width="0.2" height="15.0" fill="rgb(209,171,20)" rx="2" ry="2" />
<text  x="49.40" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::operator=&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="67.4" y="549" width="0.3" height="15.0" fill="rgb(231,130,36)" rx="2" ry="2" />
<text  x="70.43" y="559.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="70.4" y="581" width="0.2" height="15.0" fill="rgb(224,8,49)" rx="2" ry="2" />
<text  x="73.37" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (7 samples, 0.13%)</title><rect x="1009.8" y="405" width="1.6" height="15.0" fill="rgb(207,158,3)" rx="2" ry="2" />
<text  x="1012.80" y="415.5" ></text>
</g>
<g >
<title>compound_type&lt; (2 samples, 0.04%)</title><rect x="588.8" y="517" width="0.5" height="15.0" fill="rgb(207,143,41)" rx="2" ry="2" />
<text  x="591.81" y="527.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="83.7" y="693" width="0.2" height="15.0" fill="rgb(232,118,18)" rx="2" ry="2" />
<text  x="86.71" y="703.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="890.2" y="421" width="0.2" height="15.0" fill="rgb(248,118,10)" rx="2" ry="2" />
<text  x="893.20" y="431.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (47 samples, 0.90%)</title><rect x="522.6" y="469" width="10.6" height="15.0" fill="rgb(246,84,17)" rx="2" ry="2" />
<text  x="525.56" y="479.5" ></text>
</g>
<g >
<title>cql3::update_parameters::make_cell (4 samples, 0.08%)</title><rect x="889.1" y="469" width="0.9" height="15.0" fill="rgb(254,118,50)" rx="2" ry="2" />
<text  x="892.06" y="479.5" ></text>
</g>
<g >
<title>query::querier&lt; (1,960 samples, 37.56%)</title><rect x="154.7" y="613" width="443.2" height="15.0" fill="rgb(209,39,42)" rx="2" ry="2" />
<text  x="157.70" y="623.5" >query::querier&lt;</text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (19 samples, 0.36%)</title><rect x="1070.2" y="437" width="4.3" height="15.0" fill="rgb(211,149,52)" rx="2" ry="2" />
<text  x="1073.17" y="447.5" ></text>
</g>
<g >
<title>partition_entry::read (5 samples, 0.10%)</title><rect x="561.7" y="485" width="1.1" height="15.0" fill="rgb(224,166,26)" rx="2" ry="2" />
<text  x="564.68" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;mutation_fragment*&gt;::take_value (3 samples, 0.06%)</title><rect x="470.6" y="581" width="0.6" height="15.0" fill="rgb(222,77,22)" rx="2" ry="2" />
<text  x="473.56" y="591.5" ></text>
</g>
<g >
<title>sstring_hash::operator (3 samples, 0.06%)</title><rect x="862.8" y="549" width="0.7" height="15.0" fill="rgb(235,130,27)" rx="2" ry="2" />
<text  x="865.84" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1098.9" y="517" width="0.2" height="15.0" fill="rgb(223,8,6)" rx="2" ry="2" />
<text  x="1101.88" y="527.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (47 samples, 0.90%)</title><rect x="920.0" y="565" width="10.7" height="15.0" fill="rgb(236,21,54)" rx="2" ry="2" />
<text  x="923.04" y="575.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="55.7" y="309" width="0.2" height="15.0" fill="rgb(227,183,54)" rx="2" ry="2" />
<text  x="58.67" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1117.0" y="613" width="0.2" height="15.0" fill="rgb(224,215,38)" rx="2" ry="2" />
<text  x="1119.97" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="56.1" y="421" width="0.2" height="15.0" fill="rgb(215,158,44)" rx="2" ry="2" />
<text  x="59.12" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1036.5" y="421" width="0.2" height="15.0" fill="rgb(251,141,50)" rx="2" ry="2" />
<text  x="1039.48" y="431.5" ></text>
</g>
<g >
<title>ser::mutation_partition_view::range_tombstones (1 samples, 0.02%)</title><rect x="1121.7" y="405" width="0.2" height="15.0" fill="rgb(246,220,35)" rx="2" ry="2" />
<text  x="1124.72" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="477.1" y="533" width="0.2" height="15.0" fill="rgb(213,20,21)" rx="2" ry="2" />
<text  x="480.12" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (2 samples, 0.04%)</title><rect x="369.5" y="325" width="0.4" height="15.0" fill="rgb(214,145,44)" rx="2" ry="2" />
<text  x="372.49" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (10 samples, 0.19%)</title><rect x="815.4" y="389" width="2.2" height="15.0" fill="rgb(220,27,48)" rx="2" ry="2" />
<text  x="818.36" y="399.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="831.4" y="453" width="0.2" height="15.0" fill="rgb(234,165,48)" rx="2" ry="2" />
<text  x="834.41" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="300.1" y="405" width="0.2" height="15.0" fill="rgb(246,52,2)" rx="2" ry="2" />
<text  x="303.08" y="415.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="972.7" y="533" width="1.2" height="15.0" fill="rgb(234,187,0)" rx="2" ry="2" />
<text  x="975.72" y="543.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="294.4" y="341" width="0.3" height="15.0" fill="rgb(211,2,31)" rx="2" ry="2" />
<text  x="297.43" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (1 samples, 0.02%)</title><rect x="19.3" y="693" width="0.2" height="15.0" fill="rgb(215,71,37)" rx="2" ry="2" />
<text  x="22.27" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="716.6" y="629" width="0.2" height="15.0" fill="rgb(205,42,42)" rx="2" ry="2" />
<text  x="719.55" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="890.9" y="421" width="0.2" height="15.0" fill="rgb(241,29,43)" rx="2" ry="2" />
<text  x="893.87" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="63.4" y="421" width="0.2" height="15.0" fill="rgb(223,223,29)" rx="2" ry="2" />
<text  x="66.36" y="431.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (28 samples, 0.54%)</title><rect x="626.3" y="613" width="6.4" height="15.0" fill="rgb(212,167,53)" rx="2" ry="2" />
<text  x="629.34" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="75.6" y="325" width="0.2" height="15.0" fill="rgb(225,176,2)" rx="2" ry="2" />
<text  x="78.57" y="335.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (6 samples, 0.11%)</title><rect x="859.2" y="613" width="1.4" height="15.0" fill="rgb(224,144,46)" rx="2" ry="2" />
<text  x="862.22" y="623.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (1 samples, 0.02%)</title><rect x="1041.7" y="485" width="0.2" height="15.0" fill="rgb(225,189,35)" rx="2" ry="2" />
<text  x="1044.68" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (7 samples, 0.13%)</title><rect x="266.8" y="341" width="1.6" height="15.0" fill="rgb(234,204,44)" rx="2" ry="2" />
<text  x="269.85" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="699.4" y="661" width="0.4" height="15.0" fill="rgb(254,124,34)" rx="2" ry="2" />
<text  x="702.37" y="671.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (1 samples, 0.02%)</title><rect x="1119.5" y="405" width="0.2" height="15.0" fill="rgb(207,208,26)" rx="2" ry="2" />
<text  x="1122.46" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="105.4" y="661" width="0.2" height="15.0" fill="rgb(230,191,39)" rx="2" ry="2" />
<text  x="108.41" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1160.4" y="645" width="0.2" height="15.0" fill="rgb(216,160,29)" rx="2" ry="2" />
<text  x="1163.38" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (1 samples, 0.02%)</title><rect x="789.1" y="581" width="0.3" height="15.0" fill="rgb(211,152,17)" rx="2" ry="2" />
<text  x="792.13" y="591.5" ></text>
</g>
<g >
<title>freeze (13 samples, 0.25%)</title><rect x="1128.0" y="373" width="3.0" height="15.0" fill="rgb(215,229,3)" rx="2" ry="2" />
<text  x="1131.05" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_S_do_relocate (1 samples, 0.02%)</title><rect x="582.0" y="501" width="0.3" height="15.0" fill="rgb(247,215,4)" rx="2" ry="2" />
<text  x="585.03" y="511.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (267 samples, 5.12%)</title><rect x="506.7" y="517" width="60.4" height="15.0" fill="rgb(247,218,24)" rx="2" ry="2" />
<text  x="509.74" y="527.5" >memtab..</text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="888.2" y="485" width="0.2" height="15.0" fill="rgb(216,108,53)" rx="2" ry="2" />
<text  x="891.16" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (4 samples, 0.08%)</title><rect x="26.7" y="373" width="0.9" height="15.0" fill="rgb(223,46,18)" rx="2" ry="2" />
<text  x="29.73" y="383.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (17 samples, 0.33%)</title><rect x="872.8" y="613" width="3.8" height="15.0" fill="rgb(209,68,44)" rx="2" ry="2" />
<text  x="875.79" y="623.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::done (1 samples, 0.02%)</title><rect x="723.8" y="645" width="0.2" height="15.0" fill="rgb(232,104,45)" rx="2" ry="2" />
<text  x="726.79" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (1 samples, 0.02%)</title><rect x="84.4" y="533" width="0.2" height="15.0" fill="rgb(231,87,45)" rx="2" ry="2" />
<text  x="87.39" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1164.7" y="597" width="0.2" height="15.0" fill="rgb(248,125,47)" rx="2" ry="2" />
<text  x="1167.68" y="607.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="935.9" y="517" width="0.6" height="15.0" fill="rgb(233,11,28)" rx="2" ry="2" />
<text  x="938.87" y="527.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="891.8" y="421" width="0.2" height="15.0" fill="rgb(225,177,21)" rx="2" ry="2" />
<text  x="894.78" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="20.2" y="405" width="0.2" height="15.0" fill="rgb(250,54,12)" rx="2" ry="2" />
<text  x="23.17" y="415.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="106.8" y="357" width="0.2" height="15.0" fill="rgb(229,84,15)" rx="2" ry="2" />
<text  x="109.77" y="367.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="83.5" y="709" width="0.2" height="15.0" fill="rgb(213,49,31)" rx="2" ry="2" />
<text  x="86.48" y="719.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.11%)</title><rect x="816.3" y="357" width="1.3" height="15.0" fill="rgb(230,11,13)" rx="2" ry="2" />
<text  x="819.26" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasReachedFillbufferTarget (1 samples, 0.02%)</title><rect x="26.3" y="485" width="0.2" height="15.0" fill="rgb(245,204,1)" rx="2" ry="2" />
<text  x="29.28" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (2 samples, 0.04%)</title><rect x="1135.3" y="677" width="0.4" height="15.0" fill="rgb(248,199,34)" rx="2" ry="2" />
<text  x="1138.28" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="888.2" y="469" width="0.2" height="15.0" fill="rgb(213,95,6)" rx="2" ry="2" />
<text  x="891.16" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="40.7" y="533" width="0.3" height="15.0" fill="rgb(238,227,19)" rx="2" ry="2" />
<text  x="43.75" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="883.2" y="613" width="0.2" height="15.0" fill="rgb(248,203,44)" rx="2" ry="2" />
<text  x="886.19" y="623.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (1 samples, 0.02%)</title><rect x="138.0" y="469" width="0.2" height="15.0" fill="rgb(223,212,51)" rx="2" ry="2" />
<text  x="140.97" y="479.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="646.2" y="613" width="0.3" height="15.0" fill="rgb(221,146,39)" rx="2" ry="2" />
<text  x="649.24" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%)</title><rect x="106.8" y="53" width="0.2" height="15.0" fill="rgb(243,175,21)" rx="2" ry="2" />
<text  x="109.77" y="63.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (43 samples, 0.82%)</title><rect x="29.0" y="453" width="9.7" height="15.0" fill="rgb(207,108,39)" rx="2" ry="2" />
<text  x="31.99" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (49 samples, 0.94%)</title><rect x="287.9" y="405" width="11.1" height="15.0" fill="rgb(228,178,21)" rx="2" ry="2" />
<text  x="290.87" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="885.2" y="517" width="0.2" height="15.0" fill="rgb(220,200,24)" rx="2" ry="2" />
<text  x="888.22" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="679.7" y="581" width="0.2" height="15.0" fill="rgb(238,53,6)" rx="2" ry="2" />
<text  x="682.70" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::stats (7 samples, 0.13%)</title><rect x="574.6" y="469" width="1.5" height="15.0" fill="rgb(248,58,16)" rx="2" ry="2" />
<text  x="577.56" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="115.6" y="645" width="0.4" height="15.0" fill="rgb(247,221,12)" rx="2" ry="2" />
<text  x="118.59" y="655.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (4 samples, 0.08%)</title><rect x="223.7" y="309" width="0.9" height="15.0" fill="rgb(228,216,47)" rx="2" ry="2" />
<text  x="226.66" y="319.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="1132.8" y="453" width="0.4" height="15.0" fill="rgb(226,112,43)" rx="2" ry="2" />
<text  x="1135.80" y="463.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (2 samples, 0.04%)</title><rect x="716.1" y="645" width="0.5" height="15.0" fill="rgb(209,201,34)" rx="2" ry="2" />
<text  x="719.10" y="655.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (5 samples, 0.10%)</title><rect x="153.6" y="613" width="1.1" height="15.0" fill="rgb(239,17,35)" rx="2" ry="2" />
<text  x="156.57" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (527 samples, 10.10%)</title><rect x="343.9" y="549" width="119.2" height="15.0" fill="rgb(246,97,52)" rx="2" ry="2" />
<text  x="346.95" y="559.5" >flat_mutation_..</text>
</g>
<g >
<title>__GI___pthread_cleanup_upto (1 samples, 0.02%)</title><rect x="86.9" y="805" width="0.2" height="15.0" fill="rgb(213,8,28)" rx="2" ry="2" />
<text  x="89.87" y="815.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt; (1 samples, 0.02%)</title><rect x="1114.3" y="597" width="0.2" height="15.0" fill="rgb(229,36,30)" rx="2" ry="2" />
<text  x="1117.26" y="607.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (18 samples, 0.34%)</title><rect x="73.1" y="581" width="4.1" height="15.0" fill="rgb(251,122,37)" rx="2" ry="2" />
<text  x="76.08" y="591.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (2 samples, 0.04%)</title><rect x="990.1" y="453" width="0.5" height="15.0" fill="rgb(222,0,27)" rx="2" ry="2" />
<text  x="993.13" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (1 samples, 0.02%)</title><rect x="888.6" y="549" width="0.2" height="15.0" fill="rgb(231,187,49)" rx="2" ry="2" />
<text  x="891.61" y="559.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (284 samples, 5.44%)</title><rect x="18.4" y="773" width="64.2" height="15.0" fill="rgb(251,118,33)" rx="2" ry="2" />
<text  x="21.37" y="783.5" >seastar..</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (3 samples, 0.06%)</title><rect x="946.7" y="549" width="0.7" height="15.0" fill="rgb(223,84,10)" rx="2" ry="2" />
<text  x="949.72" y="559.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::raw::modification_statement*, std::default_delete&lt;cql3::statements::raw::modification_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="67.2" y="501" width="0.2" height="15.0" fill="rgb(253,79,15)" rx="2" ry="2" />
<text  x="70.20" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="122.8" y="613" width="0.2" height="15.0" fill="rgb(227,30,6)" rx="2" ry="2" />
<text  x="125.82" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (10 samples, 0.19%)</title><rect x="1037.4" y="453" width="2.2" height="15.0" fill="rgb(240,118,53)" rx="2" ry="2" />
<text  x="1040.38" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="82.4" y="629" width="0.2" height="15.0" fill="rgb(241,198,5)" rx="2" ry="2" />
<text  x="85.35" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%)</title><rect x="890.9" y="437" width="0.2" height="15.0" fill="rgb(240,107,32)" rx="2" ry="2" />
<text  x="893.87" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="539.7" y="485" width="0.3" height="15.0" fill="rgb(208,124,4)" rx="2" ry="2" />
<text  x="542.75" y="495.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="531.4" y="357" width="0.2" height="15.0" fill="rgb(205,51,16)" rx="2" ry="2" />
<text  x="534.38" y="367.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="197.4" y="421" width="0.3" height="15.0" fill="rgb(211,30,40)" rx="2" ry="2" />
<text  x="200.43" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%)</title><rect x="49.1" y="453" width="0.5" height="15.0" fill="rgb(249,4,35)" rx="2" ry="2" />
<text  x="52.11" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="321.1" y="501" width="0.5" height="15.0" fill="rgb(245,23,9)" rx="2" ry="2" />
<text  x="324.11" y="511.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (1 samples, 0.02%)</title><rect x="438.9" y="405" width="0.2" height="15.0" fill="rgb(205,113,0)" rx="2" ry="2" />
<text  x="441.91" y="415.5" ></text>
</g>
<g >
<title>auth::get_permissions (112 samples, 2.15%)</title><rect x="806.3" y="485" width="25.3" height="15.0" fill="rgb(248,164,6)" rx="2" ry="2" />
<text  x="809.31" y="495.5" >a..</text>
</g>
<g >
<title>local_schema_registry (1 samples, 0.02%)</title><rect x="963.5" y="549" width="0.2" height="15.0" fill="rgb(226,59,54)" rx="2" ry="2" />
<text  x="966.45" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (4 samples, 0.08%)</title><rect x="483.4" y="517" width="1.0" height="15.0" fill="rgb(225,26,48)" rx="2" ry="2" />
<text  x="486.45" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (2 samples, 0.04%)</title><rect x="108.1" y="421" width="0.5" height="15.0" fill="rgb(235,208,25)" rx="2" ry="2" />
<text  x="111.13" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="937.0" y="565" width="0.2" height="15.0" fill="rgb(250,186,24)" rx="2" ry="2" />
<text  x="940.00" y="575.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="83.5" y="613" width="0.2" height="15.0" fill="rgb(242,113,54)" rx="2" ry="2" />
<text  x="86.48" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (7 samples, 0.13%)</title><rect x="26.5" y="469" width="1.6" height="15.0" fill="rgb(208,54,2)" rx="2" ry="2" />
<text  x="29.51" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="48.2" y="405" width="0.5" height="15.0" fill="rgb(250,17,53)" rx="2" ry="2" />
<text  x="51.21" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="63.6" y="373" width="0.4" height="15.0" fill="rgb(240,204,51)" rx="2" ry="2" />
<text  x="66.58" y="383.5" ></text>
</g>
<g >
<title>validation::validate_column_family (38 samples, 0.73%)</title><rect x="841.6" y="565" width="8.6" height="15.0" fill="rgb(225,161,31)" rx="2" ry="2" />
<text  x="844.58" y="575.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.7" y="757" width="0.2" height="15.0" fill="rgb(228,166,40)" rx="2" ry="2" />
<text  x="86.71" y="767.5" ></text>
</g>
<g >
<title>non-virtual thunk to cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::~single_column_primary_key_restrictions (2 samples, 0.04%)</title><rect x="672.9" y="613" width="0.5" height="15.0" fill="rgb(219,180,22)" rx="2" ry="2" />
<text  x="675.92" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (7 samples, 0.13%)</title><rect x="580.7" y="517" width="1.6" height="15.0" fill="rgb(214,155,43)" rx="2" ry="2" />
<text  x="583.67" y="527.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="330.8" y="453" width="0.5" height="15.0" fill="rgb(248,42,22)" rx="2" ry="2" />
<text  x="333.83" y="463.5" ></text>
</g>
<g >
<title>clustering_key_prefix::clustering_key_prefix (1 samples, 0.02%)</title><rect x="107.2" y="597" width="0.2" height="15.0" fill="rgb(214,92,0)" rx="2" ry="2" />
<text  x="110.22" y="607.5" ></text>
</g>
<g >
<title>schema::get_partitioner (1 samples, 0.02%)</title><rect x="1122.4" y="421" width="0.2" height="15.0" fill="rgb(220,108,7)" rx="2" ry="2" />
<text  x="1125.40" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (2 samples, 0.04%)</title><rect x="75.3" y="437" width="0.5" height="15.0" fill="rgb(252,169,50)" rx="2" ry="2" />
<text  x="78.34" y="447.5" ></text>
</g>
<g >
<title>make_combined_reader (1 samples, 0.02%)</title><rect x="138.0" y="517" width="0.2" height="15.0" fill="rgb(208,3,1)" rx="2" ry="2" />
<text  x="140.97" y="527.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="83.5" y="549" width="0.2" height="15.0" fill="rgb(254,139,27)" rx="2" ry="2" />
<text  x="86.48" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (7 samples, 0.13%)</title><rect x="878.7" y="629" width="1.5" height="15.0" fill="rgb(207,125,12)" rx="2" ry="2" />
<text  x="881.66" y="639.5" ></text>
</g>
<g >
<title>tracing::add_table_name (3 samples, 0.06%)</title><rect x="1115.2" y="597" width="0.6" height="15.0" fill="rgb(253,58,7)" rx="2" ry="2" />
<text  x="1118.16" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="984.5" y="453" width="0.2" height="15.0" fill="rgb(222,47,41)" rx="2" ry="2" />
<text  x="987.48" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (10 samples, 0.19%)</title><rect x="529.3" y="373" width="2.3" height="15.0" fill="rgb(228,116,35)" rx="2" ry="2" />
<text  x="532.34" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (4 samples, 0.08%)</title><rect x="628.4" y="597" width="0.9" height="15.0" fill="rgb(207,182,17)" rx="2" ry="2" />
<text  x="631.38" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="46.6" y="373" width="0.3" height="15.0" fill="rgb(221,158,46)" rx="2" ry="2" />
<text  x="49.63" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::execute_direct (1 samples, 0.02%)</title><rect x="87.6" y="693" width="0.2" height="15.0" fill="rgb(225,71,33)" rx="2" ry="2" />
<text  x="90.55" y="703.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="56.8" y="437" width="0.5" height="15.0" fill="rgb(251,51,45)" rx="2" ry="2" />
<text  x="59.80" y="447.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_endpoint (1 samples, 0.02%)</title><rect x="109.5" y="645" width="0.2" height="15.0" fill="rgb(210,163,16)" rx="2" ry="2" />
<text  x="112.48" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="46.9" y="325" width="0.2" height="15.0" fill="rgb(240,150,54)" rx="2" ry="2" />
<text  x="49.85" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (9 samples, 0.17%)</title><rect x="98.9" y="645" width="2.0" height="15.0" fill="rgb(252,65,10)" rx="2" ry="2" />
<text  x="101.86" y="655.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (2 samples, 0.04%)</title><rect x="753.9" y="485" width="0.4" height="15.0" fill="rgb(243,215,18)" rx="2" ry="2" />
<text  x="756.86" y="495.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="86.6" y="741" width="0.3" height="15.0" fill="rgb(238,36,42)" rx="2" ry="2" />
<text  x="89.65" y="751.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="43.0" y="517" width="0.2" height="15.0" fill="rgb(243,36,49)" rx="2" ry="2" />
<text  x="46.01" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (7 samples, 0.13%)</title><rect x="647.4" y="613" width="1.5" height="15.0" fill="rgb(240,184,49)" rx="2" ry="2" />
<text  x="650.37" y="623.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="281.3" y="373" width="0.2" height="15.0" fill="rgb(239,150,17)" rx="2" ry="2" />
<text  x="284.32" y="383.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (6 samples, 0.11%)</title><rect x="880.9" y="629" width="1.4" height="15.0" fill="rgb(244,199,19)" rx="2" ry="2" />
<text  x="883.93" y="639.5" ></text>
</g>
<g >
<title>compound_type&lt; (7 samples, 0.13%)</title><rect x="935.0" y="533" width="1.5" height="15.0" fill="rgb(237,77,47)" rx="2" ry="2" />
<text  x="937.96" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (35 samples, 0.67%)</title><rect x="445.5" y="405" width="7.9" height="15.0" fill="rgb(239,127,1)" rx="2" ry="2" />
<text  x="448.46" y="415.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (22 samples, 0.42%)</title><rect x="752.5" y="581" width="5.0" height="15.0" fill="rgb(225,43,18)" rx="2" ry="2" />
<text  x="755.50" y="591.5" ></text>
</g>
<g >
<title>database::has_keyspace (16 samples, 0.31%)</title><rect x="846.6" y="533" width="3.6" height="15.0" fill="rgb(225,10,15)" rx="2" ry="2" />
<text  x="849.56" y="543.5" ></text>
</g>
<g >
<title>std::optional&lt;cql3::expr::expression&gt;::optional (1 samples, 0.02%)</title><rect x="65.2" y="501" width="0.2" height="15.0" fill="rgb(231,150,36)" rx="2" ry="2" />
<text  x="68.17" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="739.4" y="565" width="0.2" height="15.0" fill="rgb(214,127,27)" rx="2" ry="2" />
<text  x="742.39" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="345.1" y="453" width="1.1" height="15.0" fill="rgb(244,170,21)" rx="2" ry="2" />
<text  x="348.08" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (21 samples, 0.40%)</title><rect x="1127.8" y="453" width="4.8" height="15.0" fill="rgb(254,13,32)" rx="2" ry="2" />
<text  x="1130.82" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="533.4" y="501" width="0.2" height="15.0" fill="rgb(248,39,20)" rx="2" ry="2" />
<text  x="536.41" y="511.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="82.1" y="517" width="0.3" height="15.0" fill="rgb(210,54,2)" rx="2" ry="2" />
<text  x="85.12" y="527.5" ></text>
</g>
<g >
<title>db::cql_type_parser::parse (2 samples, 0.04%)</title><rect x="108.1" y="549" width="0.5" height="15.0" fill="rgb(209,146,5)" rx="2" ry="2" />
<text  x="111.13" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (2 samples, 0.04%)</title><rect x="589.9" y="549" width="0.5" height="15.0" fill="rgb(254,27,11)" rx="2" ry="2" />
<text  x="592.94" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (6 samples, 0.11%)</title><rect x="256.2" y="325" width="1.4" height="15.0" fill="rgb(243,177,31)" rx="2" ry="2" />
<text  x="259.22" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1021.1" y="325" width="0.2" height="15.0" fill="rgb(207,155,35)" rx="2" ry="2" />
<text  x="1024.11" y="335.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (2 samples, 0.04%)</title><rect x="939.5" y="581" width="0.4" height="15.0" fill="rgb(252,18,48)" rx="2" ry="2" />
<text  x="942.48" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="968.2" y="549" width="0.5" height="15.0" fill="rgb(245,146,16)" rx="2" ry="2" />
<text  x="971.20" y="559.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="83.5" y="677" width="0.2" height="15.0" fill="rgb(218,6,38)" rx="2" ry="2" />
<text  x="86.48" y="687.5" ></text>
</g>
<g >
<title>database::find_schema (21 samples, 0.40%)</title><rect x="841.8" y="549" width="4.8" height="15.0" fill="rgb(220,139,28)" rx="2" ry="2" />
<text  x="844.81" y="559.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%)</title><rect x="44.1" y="517" width="0.3" height="15.0" fill="rgb(236,6,47)" rx="2" ry="2" />
<text  x="47.14" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="62.9" y="357" width="0.2" height="15.0" fill="rgb(208,56,8)" rx="2" ry="2" />
<text  x="65.91" y="367.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (23 samples, 0.44%)</title><rect x="1016.6" y="357" width="5.2" height="15.0" fill="rgb(238,173,32)" rx="2" ry="2" />
<text  x="1019.58" y="367.5" ></text>
</g>
<g >
<title>set_field&lt;long&gt; (1 samples, 0.02%)</title><rect x="1119.9" y="373" width="0.2" height="15.0" fill="rgb(228,226,1)" rx="2" ry="2" />
<text  x="1122.91" y="383.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="297.6" y="357" width="0.9" height="15.0" fill="rgb(237,10,44)" rx="2" ry="2" />
<text  x="300.60" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="49.1" y="437" width="0.5" height="15.0" fill="rgb(224,81,41)" rx="2" ry="2" />
<text  x="52.11" y="447.5" ></text>
</g>
<g >
<title>_start (4 samples, 0.08%)</title><rect x="1170.6" y="805" width="0.9" height="15.0" fill="rgb(206,223,47)" rx="2" ry="2" />
<text  x="1173.56" y="815.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="591.3" y="533" width="0.7" height="15.0" fill="rgb(232,143,22)" rx="2" ry="2" />
<text  x="594.30" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="312.3" y="469" width="0.2" height="15.0" fill="rgb(252,28,36)" rx="2" ry="2" />
<text  x="315.29" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (373 samples, 7.15%)</title><rect x="355.9" y="421" width="84.4" height="15.0" fill="rgb(217,53,18)" rx="2" ry="2" />
<text  x="358.93" y="431.5" >flat_muta..</text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (753 samples, 14.43%)</title><rect x="166.2" y="549" width="170.3" height="15.0" fill="rgb(217,95,17)" rx="2" ry="2" />
<text  x="169.23" y="559.5" >seastar::repeat&lt;mergin..</text>
</g>
<g >
<title>dht::shard_of (3 samples, 0.06%)</title><rect x="1000.8" y="453" width="0.6" height="15.0" fill="rgb(225,135,45)" rx="2" ry="2" />
<text  x="1003.76" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="596.5" y="597" width="0.2" height="15.0" fill="rgb(218,125,35)" rx="2" ry="2" />
<text  x="599.50" y="607.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getCharIndex (1 samples, 0.02%)</title><rect x="31.0" y="421" width="0.3" height="15.0" fill="rgb(230,214,34)" rx="2" ry="2" />
<text  x="34.03" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::make_conjunction (2 samples, 0.04%)</title><rect x="75.3" y="485" width="0.5" height="15.0" fill="rgb(247,15,40)" rx="2" ry="2" />
<text  x="78.34" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="45.5" y="421" width="0.2" height="15.0" fill="rgb(253,51,6)" rx="2" ry="2" />
<text  x="48.50" y="431.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="53.6" y="341" width="0.3" height="15.0" fill="rgb(241,85,50)" rx="2" ry="2" />
<text  x="56.64" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="50.7" y="405" width="0.2" height="15.0" fill="rgb(234,67,1)" rx="2" ry="2" />
<text  x="53.70" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (6 samples, 0.11%)</title><rect x="75.1" y="565" width="1.4" height="15.0" fill="rgb(245,161,13)" rx="2" ry="2" />
<text  x="78.12" y="575.5" ></text>
</g>
<g >
<title>std::forward&lt;std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="53.2" y="437" width="0.2" height="15.0" fill="rgb(219,92,14)" rx="2" ry="2" />
<text  x="56.18" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="732.6" y="581" width="0.2" height="15.0" fill="rgb(218,71,3)" rx="2" ry="2" />
<text  x="735.61" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="42.1" y="453" width="0.2" height="15.0" fill="rgb(247,168,39)" rx="2" ry="2" />
<text  x="45.11" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_destroy_data&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="24.7" y="533" width="0.2" height="15.0" fill="rgb(205,186,14)" rx="2" ry="2" />
<text  x="27.70" y="543.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (3 samples, 0.06%)</title><rect x="99.5" y="613" width="0.7" height="15.0" fill="rgb(241,74,13)" rx="2" ry="2" />
<text  x="102.53" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="791.4" y="533" width="0.7" height="15.0" fill="rgb(252,74,22)" rx="2" ry="2" />
<text  x="794.39" y="543.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (1 samples, 0.02%)</title><rect x="414.9" y="389" width="0.3" height="15.0" fill="rgb(252,131,5)" rx="2" ry="2" />
<text  x="417.94" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="940.8" y="565" width="0.5" height="15.0" fill="rgb(234,205,26)" rx="2" ry="2" />
<text  x="943.84" y="575.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::work_item, 128ul&gt;::emplace_back&lt;service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt; (1 samples, 0.02%)</title><rect x="886.4" y="517" width="0.2" height="15.0" fill="rgb(234,26,40)" rx="2" ry="2" />
<text  x="889.35" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (2 samples, 0.04%)</title><rect x="281.5" y="373" width="0.5" height="15.0" fill="rgb(216,199,44)" rx="2" ry="2" />
<text  x="284.54" y="383.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (3 samples, 0.06%)</title><rect x="485.7" y="501" width="0.7" height="15.0" fill="rgb(229,38,10)" rx="2" ry="2" />
<text  x="488.71" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (6 samples, 0.11%)</title><rect x="1155.2" y="645" width="1.3" height="15.0" fill="rgb(234,207,4)" rx="2" ry="2" />
<text  x="1158.18" y="655.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%)</title><rect x="146.8" y="613" width="1.6" height="15.0" fill="rgb(208,114,19)" rx="2" ry="2" />
<text  x="149.79" y="623.5" ></text>
</g>
<g >
<title>cql3::result_generator::query_result_visitor&lt;cql3::untyped_result_set::visitor&gt;::accept_new_row (1 samples, 0.02%)</title><rect x="671.6" y="549" width="0.2" height="15.0" fill="rgb(215,213,12)" rx="2" ry="2" />
<text  x="674.56" y="559.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer (1 samples, 0.02%)</title><rect x="106.8" y="213" width="0.2" height="15.0" fill="rgb(207,53,39)" rx="2" ry="2" />
<text  x="109.77" y="223.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (20 samples, 0.38%)</title><rect x="276.8" y="373" width="4.5" height="15.0" fill="rgb(206,28,9)" rx="2" ry="2" />
<text  x="279.79" y="383.5" ></text>
</g>
<g >
<title>dht::tri_compare (11 samples, 0.21%)</title><rect x="1067.0" y="405" width="2.5" height="15.0" fill="rgb(248,192,42)" rx="2" ry="2" />
<text  x="1070.00" y="415.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_tokenStartCharPositionInLine (1 samples, 0.02%)</title><rect x="28.5" y="453" width="0.3" height="15.0" fill="rgb(248,94,15)" rx="2" ry="2" />
<text  x="31.54" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (60 samples, 1.15%)</title><rect x="287.4" y="421" width="13.6" height="15.0" fill="rgb(253,133,50)" rx="2" ry="2" />
<text  x="290.42" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="127.8" y="565" width="0.2" height="15.0" fill="rgb(235,51,23)" rx="2" ry="2" />
<text  x="130.80" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (1 samples, 0.02%)</title><rect x="105.2" y="661" width="0.2" height="15.0" fill="rgb(213,107,40)" rx="2" ry="2" />
<text  x="108.19" y="671.5" ></text>
</g>
<g >
<title>db::schema_tables::prepare_builder_from_table_row (1 samples, 0.02%)</title><rect x="108.6" y="565" width="0.2" height="15.0" fill="rgb(239,109,47)" rx="2" ry="2" />
<text  x="111.58" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="64.7" y="389" width="0.2" height="15.0" fill="rgb(208,172,6)" rx="2" ry="2" />
<text  x="67.72" y="399.5" ></text>
</g>
<g >
<title>set_value&lt;fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="889.5" y="405" width="0.2" height="15.0" fill="rgb(206,42,0)" rx="2" ry="2" />
<text  x="892.52" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="48.0" y="389" width="0.2" height="15.0" fill="rgb(206,105,21)" rx="2" ry="2" />
<text  x="50.98" y="399.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="20.2" y="549" width="0.2" height="15.0" fill="rgb(226,34,40)" rx="2" ry="2" />
<text  x="23.17" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="804.1" y="501" width="0.2" height="15.0" fill="rgb(219,25,4)" rx="2" ry="2" />
<text  x="807.05" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="673.1" y="437" width="0.3" height="15.0" fill="rgb(208,50,47)" rx="2" ry="2" />
<text  x="676.14" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (1 samples, 0.02%)</title><rect x="887.7" y="517" width="0.2" height="15.0" fill="rgb(252,161,18)" rx="2" ry="2" />
<text  x="890.71" y="527.5" ></text>
</g>
<g >
<title>schema_registry_entry::is_synced (1 samples, 0.02%)</title><rect x="1125.1" y="517" width="0.2" height="15.0" fill="rgb(253,111,31)" rx="2" ry="2" />
<text  x="1128.11" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_M_range_initialize&lt;cql3::expr::expression const*&gt; (1 samples, 0.02%)</title><rect x="75.6" y="421" width="0.2" height="15.0" fill="rgb(245,164,49)" rx="2" ry="2" />
<text  x="78.57" y="431.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%)</title><rect x="115.4" y="645" width="0.2" height="15.0" fill="rgb(232,165,9)" rx="2" ry="2" />
<text  x="118.36" y="655.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="350.0" y="421" width="0.3" height="15.0" fill="rgb(230,126,34)" rx="2" ry="2" />
<text  x="353.05" y="431.5" ></text>
</g>
<g >
<title>table::as_mutation_source (7 samples, 0.13%)</title><rect x="656.6" y="613" width="1.6" height="15.0" fill="rgb(232,143,25)" rx="2" ry="2" />
<text  x="659.64" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="27.9" y="421" width="0.2" height="15.0" fill="rgb(217,169,45)" rx="2" ry="2" />
<text  x="30.86" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::single_column_restrictions&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="673.4" y="613" width="0.2" height="15.0" fill="rgb(218,96,0)" rx="2" ry="2" />
<text  x="676.37" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="84.2" y="485" width="0.2" height="15.0" fill="rgb(227,162,53)" rx="2" ry="2" />
<text  x="87.16" y="495.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (3 samples, 0.06%)</title><rect x="337.2" y="581" width="0.6" height="15.0" fill="rgb(217,75,52)" rx="2" ry="2" />
<text  x="340.16" y="591.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (5 samples, 0.10%)</title><rect x="80.5" y="565" width="1.2" height="15.0" fill="rgb(239,106,33)" rx="2" ry="2" />
<text  x="83.54" y="575.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::modification_statement, std::default_delete&lt;cql3::statements::raw::modification_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="67.2" y="533" width="0.2" height="15.0" fill="rgb(237,127,39)" rx="2" ry="2" />
<text  x="70.20" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="42.1" y="517" width="0.2" height="15.0" fill="rgb(232,167,34)" rx="2" ry="2" />
<text  x="45.11" y="527.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (11 samples, 0.21%)</title><rect x="771.0" y="453" width="2.5" height="15.0" fill="rgb(210,178,13)" rx="2" ry="2" />
<text  x="774.04" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="158.1" y="597" width="0.2" height="15.0" fill="rgb(251,41,23)" rx="2" ry="2" />
<text  x="161.09" y="607.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="920.5" y="533" width="0.9" height="15.0" fill="rgb(206,109,15)" rx="2" ry="2" />
<text  x="923.49" y="543.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="720.4" y="613" width="0.2" height="15.0" fill="rgb(246,227,36)" rx="2" ry="2" />
<text  x="723.40" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="716.1" y="613" width="0.5" height="15.0" fill="rgb(214,192,44)" rx="2" ry="2" />
<text  x="719.10" y="623.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="345.1" y="469" width="1.1" height="15.0" fill="rgb(237,22,35)" rx="2" ry="2" />
<text  x="348.08" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (1 samples, 0.02%)</title><rect x="132.1" y="597" width="0.2" height="15.0" fill="rgb(222,124,53)" rx="2" ry="2" />
<text  x="135.09" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;flush_reader::fill_buffer (1 samples, 0.02%)</title><rect x="883.0" y="677" width="0.2" height="15.0" fill="rgb(217,54,25)" rx="2" ry="2" />
<text  x="885.96" y="687.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare_internal (1 samples, 0.02%)</title><rect x="83.5" y="517" width="0.2" height="15.0" fill="rgb(245,117,0)" rx="2" ry="2" />
<text  x="86.48" y="527.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="681.3" y="645" width="0.4" height="15.0" fill="rgb(240,174,53)" rx="2" ry="2" />
<text  x="684.28" y="655.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1169.0" y="805" width="0.2" height="15.0" fill="rgb(232,76,11)" rx="2" ry="2" />
<text  x="1171.97" y="815.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (5 samples, 0.10%)</title><rect x="290.6" y="373" width="1.1" height="15.0" fill="rgb(216,36,37)" rx="2" ry="2" />
<text  x="293.59" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="696.4" y="661" width="0.5" height="15.0" fill="rgb(239,124,24)" rx="2" ry="2" />
<text  x="699.43" y="671.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1 samples, 0.02%)</title><rect x="1133.9" y="661" width="0.3" height="15.0" fill="rgb(253,38,20)" rx="2" ry="2" />
<text  x="1136.93" y="671.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (10 samples, 0.19%)</title><rect x="1162.6" y="613" width="2.3" height="15.0" fill="rgb(236,85,3)" rx="2" ry="2" />
<text  x="1165.64" y="623.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (3 samples, 0.06%)</title><rect x="282.9" y="405" width="0.7" height="15.0" fill="rgb(241,221,15)" rx="2" ry="2" />
<text  x="285.90" y="415.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="677.0" y="645" width="0.2" height="15.0" fill="rgb(243,143,25)" rx="2" ry="2" />
<text  x="679.99" y="655.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.17%)</title><rect x="815.6" y="373" width="2.0" height="15.0" fill="rgb(234,115,25)" rx="2" ry="2" />
<text  x="818.58" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.10%)</title><rect x="977.7" y="485" width="1.1" height="15.0" fill="rgb(207,225,39)" rx="2" ry="2" />
<text  x="980.69" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.10%)</title><rect x="686.3" y="661" width="1.1" height="15.0" fill="rgb(217,43,48)" rx="2" ry="2" />
<text  x="689.26" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="359.8" y="357" width="0.2" height="15.0" fill="rgb(224,162,39)" rx="2" ry="2" />
<text  x="362.77" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="868.7" y="549" width="0.7" height="15.0" fill="rgb(254,57,4)" rx="2" ry="2" />
<text  x="871.72" y="559.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="972.0" y="533" width="0.3" height="15.0" fill="rgb(225,197,40)" rx="2" ry="2" />
<text  x="975.04" y="543.5" ></text>
</g>
<g >
<title>schema_mutations::schema_mutations (2 samples, 0.04%)</title><rect x="108.8" y="549" width="0.5" height="15.0" fill="rgb(230,225,38)" rx="2" ry="2" />
<text  x="111.80" y="559.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (23 samples, 0.44%)</title><rect x="663.9" y="677" width="5.2" height="15.0" fill="rgb(237,199,21)" rx="2" ry="2" />
<text  x="666.87" y="687.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (14 samples, 0.27%)</title><rect x="32.4" y="437" width="3.1" height="15.0" fill="rgb(207,174,7)" rx="2" ry="2" />
<text  x="35.38" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (47 samples, 0.90%)</title><rect x="323.4" y="501" width="10.6" height="15.0" fill="rgb(221,3,22)" rx="2" ry="2" />
<text  x="326.37" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="54.3" y="421" width="0.5" height="15.0" fill="rgb(228,118,17)" rx="2" ry="2" />
<text  x="57.32" y="431.5" ></text>
</g>
<g >
<title>seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;::check (1 samples, 0.02%)</title><rect x="851.3" y="597" width="0.2" height="15.0" fill="rgb(205,125,34)" rx="2" ry="2" />
<text  x="854.31" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="65.6" y="533" width="0.2" height="15.0" fill="rgb(232,14,16)" rx="2" ry="2" />
<text  x="68.62" y="543.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="944.7" y="549" width="1.1" height="15.0" fill="rgb(231,158,53)" rx="2" ry="2" />
<text  x="947.68" y="559.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="862.4" y="533" width="0.2" height="15.0" fill="rgb(234,98,17)" rx="2" ry="2" />
<text  x="865.39" y="543.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (5 samples, 0.10%)</title><rect x="108.1" y="629" width="1.2" height="15.0" fill="rgb(207,18,53)" rx="2" ry="2" />
<text  x="111.13" y="639.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (12 samples, 0.23%)</title><rect x="573.4" y="485" width="2.7" height="15.0" fill="rgb(235,132,54)" rx="2" ry="2" />
<text  x="576.43" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%)</title><rect x="687.4" y="661" width="0.2" height="15.0" fill="rgb(234,118,43)" rx="2" ry="2" />
<text  x="690.39" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (7 samples, 0.13%)</title><rect x="710.0" y="645" width="1.6" height="15.0" fill="rgb(213,101,8)" rx="2" ry="2" />
<text  x="713.00" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="659.6" y="645" width="0.2" height="15.0" fill="rgb(213,108,15)" rx="2" ry="2" />
<text  x="662.58" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (28 samples, 0.54%)</title><rect x="547.7" y="421" width="6.3" height="15.0" fill="rgb(211,81,53)" rx="2" ry="2" />
<text  x="550.66" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="879.8" y="597" width="0.2" height="15.0" fill="rgb(239,57,45)" rx="2" ry="2" />
<text  x="882.79" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="766.5" y="533" width="0.2" height="15.0" fill="rgb(223,141,44)" rx="2" ry="2" />
<text  x="769.52" y="543.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (7 samples, 0.13%)</title><rect x="84.8" y="661" width="1.6" height="15.0" fill="rgb(238,4,18)" rx="2" ry="2" />
<text  x="87.84" y="671.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (4 samples, 0.08%)</title><rect x="80.8" y="501" width="0.9" height="15.0" fill="rgb(220,184,51)" rx="2" ry="2" />
<text  x="83.77" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (681 samples, 13.05%)</title><rect x="168.0" y="533" width="154.0" height="15.0" fill="rgb(249,216,45)" rx="2" ry="2" />
<text  x="171.04" y="543.5" >mutation_fragment_m..</text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="673.1" y="453" width="0.3" height="15.0" fill="rgb(242,31,30)" rx="2" ry="2" />
<text  x="676.14" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (219 samples, 4.20%)</title><rect x="992.4" y="501" width="49.5" height="15.0" fill="rgb(236,104,4)" rx="2" ry="2" />
<text  x="995.39" y="511.5" >serv..</text>
</g>
<g >
<title>std::_Destroy&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="23.3" y="517" width="0.3" height="15.0" fill="rgb(223,208,17)" rx="2" ry="2" />
<text  x="26.34" y="527.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="1148.9" y="613" width="1.1" height="15.0" fill="rgb(232,198,19)" rx="2" ry="2" />
<text  x="1151.85" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="623.2" y="517" width="0.2" height="15.0" fill="rgb(236,13,54)" rx="2" ry="2" />
<text  x="626.17" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (1 samples, 0.02%)</title><rect x="106.8" y="245" width="0.2" height="15.0" fill="rgb(245,168,12)" rx="2" ry="2" />
<text  x="109.77" y="255.5" ></text>
</g>
<g >
<title>std::operator== (1 samples, 0.02%)</title><rect x="39.6" y="501" width="0.2" height="15.0" fill="rgb(207,92,30)" rx="2" ry="2" />
<text  x="42.62" y="511.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (11 samples, 0.21%)</title><rect x="873.2" y="581" width="2.5" height="15.0" fill="rgb(206,110,19)" rx="2" ry="2" />
<text  x="876.24" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (2 samples, 0.04%)</title><rect x="280.9" y="357" width="0.4" height="15.0" fill="rgb(207,116,12)" rx="2" ry="2" />
<text  x="283.86" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;frozen_mutation&gt;::dispose (1 samples, 0.02%)</title><rect x="739.8" y="613" width="0.3" height="15.0" fill="rgb(249,207,51)" rx="2" ry="2" />
<text  x="742.84" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (4 samples, 0.08%)</title><rect x="654.4" y="613" width="0.9" height="15.0" fill="rgb(205,81,16)" rx="2" ry="2" />
<text  x="657.38" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="511.3" y="485" width="0.2" height="15.0" fill="rgb(236,217,43)" rx="2" ry="2" />
<text  x="514.26" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (3 samples, 0.06%)</title><rect x="436.0" y="325" width="0.6" height="15.0" fill="rgb(236,122,14)" rx="2" ry="2" />
<text  x="438.97" y="335.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (206 samples, 3.95%)</title><rect x="23.3" y="645" width="46.6" height="15.0" fill="rgb(206,206,13)" rx="2" ry="2" />
<text  x="26.34" y="655.5" >cql3..</text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (8 samples, 0.15%)</title><rect x="460.2" y="453" width="1.8" height="15.0" fill="rgb(233,219,12)" rx="2" ry="2" />
<text  x="463.16" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (34 samples, 0.65%)</title><rect x="907.4" y="533" width="7.7" height="15.0" fill="rgb(253,204,22)" rx="2" ry="2" />
<text  x="910.38" y="543.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (6 samples, 0.11%)</title><rect x="757.5" y="581" width="1.3" height="15.0" fill="rgb(231,38,18)" rx="2" ry="2" />
<text  x="760.48" y="591.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%)</title><rect x="291.7" y="373" width="0.2" height="15.0" fill="rgb(207,161,43)" rx="2" ry="2" />
<text  x="294.72" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (10 samples, 0.19%)</title><rect x="993.1" y="453" width="2.2" height="15.0" fill="rgb(229,58,18)" rx="2" ry="2" />
<text  x="996.07" y="463.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%)</title><rect x="725.8" y="629" width="0.2" height="15.0" fill="rgb(254,194,2)" rx="2" ry="2" />
<text  x="728.82" y="639.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (1 samples, 0.02%)</title><rect x="803.8" y="469" width="0.3" height="15.0" fill="rgb(249,38,2)" rx="2" ry="2" />
<text  x="806.83" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (1 samples, 0.02%)</title><rect x="1126.0" y="421" width="0.2" height="15.0" fill="rgb(254,171,32)" rx="2" ry="2" />
<text  x="1129.01" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (5 samples, 0.10%)</title><rect x="1144.1" y="613" width="1.1" height="15.0" fill="rgb(212,123,46)" rx="2" ry="2" />
<text  x="1147.10" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="504.0" y="453" width="0.2" height="15.0" fill="rgb(245,9,11)" rx="2" ry="2" />
<text  x="507.02" y="463.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (5 samples, 0.10%)</title><rect x="15.2" y="757" width="1.1" height="15.0" fill="rgb(239,2,4)" rx="2" ry="2" />
<text  x="18.20" y="767.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (59 samples, 1.13%)</title><rect x="543.6" y="453" width="13.3" height="15.0" fill="rgb(216,59,25)" rx="2" ry="2" />
<text  x="546.59" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="50.5" y="469" width="0.4" height="15.0" fill="rgb(254,182,12)" rx="2" ry="2" />
<text  x="53.47" y="479.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (40 samples, 0.77%)</title><rect x="587.0" y="581" width="9.0" height="15.0" fill="rgb(229,111,9)" rx="2" ry="2" />
<text  x="590.00" y="591.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="83.7" y="661" width="0.2" height="15.0" fill="rgb(234,33,25)" rx="2" ry="2" />
<text  x="86.71" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, utils::UUID, std::allocator&lt;utils::UUID&gt;, std::__detail::_Identity, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1124.0" y="421" width="0.2" height="15.0" fill="rgb(223,139,37)" rx="2" ry="2" />
<text  x="1126.98" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_view_update_backlog (1 samples, 0.02%)</title><rect x="1135.7" y="677" width="0.3" height="15.0" fill="rgb(219,83,48)" rx="2" ry="2" />
<text  x="1138.74" y="687.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="1052.3" y="517" width="0.2" height="15.0" fill="rgb(234,110,37)" rx="2" ry="2" />
<text  x="1055.31" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (157 samples, 3.01%)</title><rect x="1042.4" y="533" width="35.5" height="15.0" fill="rgb(250,221,4)" rx="2" ry="2" />
<text  x="1045.36" y="543.5" >ser..</text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (3 samples, 0.06%)</title><rect x="1104.3" y="597" width="0.7" height="15.0" fill="rgb(245,128,52)" rx="2" ry="2" />
<text  x="1107.31" y="607.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (70 samples, 1.34%)</title><rect x="177.1" y="453" width="15.8" height="15.0" fill="rgb(223,39,14)" rx="2" ry="2" />
<text  x="180.09" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (2 samples, 0.04%)</title><rect x="885.0" y="549" width="0.4" height="15.0" fill="rgb(248,201,32)" rx="2" ry="2" />
<text  x="888.00" y="559.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="770.4" y="485" width="0.2" height="15.0" fill="rgb(237,180,54)" rx="2" ry="2" />
<text  x="773.36" y="495.5" ></text>
</g>
<g >
<title>table::query (2,302 samples, 44.11%)</title><rect x="138.2" y="629" width="520.5" height="15.0" fill="rgb(244,86,31)" rx="2" ry="2" />
<text  x="141.20" y="639.5" >table::query</text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (1 samples, 0.02%)</title><rect x="1040.1" y="453" width="0.2" height="15.0" fill="rgb(236,89,1)" rx="2" ry="2" />
<text  x="1043.10" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="716.6" y="645" width="0.2" height="15.0" fill="rgb(236,194,52)" rx="2" ry="2" />
<text  x="719.55" y="655.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%)</title><rect x="855.2" y="549" width="2.2" height="15.0" fill="rgb(227,216,46)" rx="2" ry="2" />
<text  x="858.15" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="30.8" y="405" width="0.2" height="15.0" fill="rgb(220,111,51)" rx="2" ry="2" />
<text  x="33.80" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="19.7" y="629" width="0.2" height="15.0" fill="rgb(216,33,49)" rx="2" ry="2" />
<text  x="22.72" y="639.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (8 samples, 0.15%)</title><rect x="819.9" y="309" width="1.8" height="15.0" fill="rgb(217,48,50)" rx="2" ry="2" />
<text  x="822.88" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="887.7" y="533" width="0.2" height="15.0" fill="rgb(223,106,2)" rx="2" ry="2" />
<text  x="890.71" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="870.5" y="533" width="0.3" height="15.0" fill="rgb(248,109,5)" rx="2" ry="2" />
<text  x="873.53" y="543.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (1 samples, 0.02%)</title><rect x="173.9" y="469" width="0.2" height="15.0" fill="rgb(250,7,1)" rx="2" ry="2" />
<text  x="176.92" y="479.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (1 samples, 0.02%)</title><rect x="64.7" y="485" width="0.2" height="15.0" fill="rgb(231,129,5)" rx="2" ry="2" />
<text  x="67.72" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (13 samples, 0.25%)</title><rect x="51.1" y="485" width="3.0" height="15.0" fill="rgb(210,85,24)" rx="2" ry="2" />
<text  x="54.15" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="883.2" y="677" width="0.2" height="15.0" fill="rgb(235,153,32)" rx="2" ry="2" />
<text  x="886.19" y="687.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (3 samples, 0.06%)</title><rect x="1049.6" y="437" width="0.7" height="15.0" fill="rgb(241,129,0)" rx="2" ry="2" />
<text  x="1052.59" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (2 samples, 0.04%)</title><rect x="137.1" y="629" width="0.4" height="15.0" fill="rgb(212,156,51)" rx="2" ry="2" />
<text  x="140.07" y="639.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="570.7" y="485" width="0.2" height="15.0" fill="rgb(219,41,2)" rx="2" ry="2" />
<text  x="573.72" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (2 samples, 0.04%)</title><rect x="50.5" y="453" width="0.4" height="15.0" fill="rgb(225,24,5)" rx="2" ry="2" />
<text  x="53.47" y="463.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (1 samples, 0.02%)</title><rect x="626.1" y="581" width="0.2" height="15.0" fill="rgb(234,152,9)" rx="2" ry="2" />
<text  x="629.11" y="591.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="659.6" y="661" width="0.2" height="15.0" fill="rgb(233,46,5)" rx="2" ry="2" />
<text  x="662.58" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="817.4" y="341" width="0.2" height="15.0" fill="rgb(227,36,36)" rx="2" ry="2" />
<text  x="820.39" y="351.5" ></text>
</g>
<g >
<title>free (18 samples, 0.34%)</title><rect x="447.5" y="357" width="4.1" height="15.0" fill="rgb(215,67,46)" rx="2" ry="2" />
<text  x="450.50" y="367.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (6 samples, 0.11%)</title><rect x="601.5" y="517" width="1.3" height="15.0" fill="rgb(205,2,12)" rx="2" ry="2" />
<text  x="604.47" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_erase_at_end (1 samples, 0.02%)</title><rect x="24.7" y="549" width="0.2" height="15.0" fill="rgb(235,59,19)" rx="2" ry="2" />
<text  x="27.70" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (49 samples, 0.94%)</title><rect x="907.2" y="581" width="11.0" height="15.0" fill="rgb(252,128,48)" rx="2" ry="2" />
<text  x="910.15" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="870.1" y="565" width="1.6" height="15.0" fill="rgb(215,179,19)" rx="2" ry="2" />
<text  x="873.07" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (9 samples, 0.17%)</title><rect x="296.9" y="389" width="2.1" height="15.0" fill="rgb(213,33,36)" rx="2" ry="2" />
<text  x="299.92" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="992.2" y="501" width="0.2" height="15.0" fill="rgb(218,215,22)" rx="2" ry="2" />
<text  x="995.17" y="511.5" ></text>
</g>
<g >
<title>auth::resource::parent (8 samples, 0.15%)</title><rect x="802.2" y="501" width="1.9" height="15.0" fill="rgb(238,151,42)" rx="2" ry="2" />
<text  x="805.24" y="511.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="58.6" y="277" width="0.2" height="15.0" fill="rgb(251,63,18)" rx="2" ry="2" />
<text  x="61.61" y="287.5" ></text>
</g>
<g >
<title>operator delete (9 samples, 0.17%)</title><rect x="650.5" y="597" width="2.1" height="15.0" fill="rgb(211,129,26)" rx="2" ry="2" />
<text  x="653.53" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="62.0" y="437" width="0.2" height="15.0" fill="rgb(233,110,47)" rx="2" ry="2" />
<text  x="65.00" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (3 samples, 0.06%)</title><rect x="694.2" y="613" width="0.6" height="15.0" fill="rgb(208,111,43)" rx="2" ry="2" />
<text  x="697.17" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="58.6" y="405" width="0.2" height="15.0" fill="rgb(209,72,25)" rx="2" ry="2" />
<text  x="61.61" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (8 samples, 0.15%)</title><rect x="100.9" y="645" width="1.8" height="15.0" fill="rgb(226,203,51)" rx="2" ry="2" />
<text  x="103.89" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (3 samples, 0.06%)</title><rect x="594.7" y="469" width="0.7" height="15.0" fill="rgb(225,187,24)" rx="2" ry="2" />
<text  x="597.69" y="479.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="81.2" y="469" width="0.5" height="15.0" fill="rgb(230,175,32)" rx="2" ry="2" />
<text  x="84.22" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="61.8" y="501" width="0.4" height="15.0" fill="rgb(234,92,2)" rx="2" ry="2" />
<text  x="64.78" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%)</title><rect x="370.4" y="389" width="0.2" height="15.0" fill="rgb(206,152,15)" rx="2" ry="2" />
<text  x="373.40" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (2 samples, 0.04%)</title><rect x="108.1" y="389" width="0.5" height="15.0" fill="rgb(212,219,5)" rx="2" ry="2" />
<text  x="111.13" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%)</title><rect x="209.2" y="373" width="2.3" height="15.0" fill="rgb(225,198,5)" rx="2" ry="2" />
<text  x="212.19" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="1097.5" y="501" width="0.9" height="15.0" fill="rgb(253,138,30)" rx="2" ry="2" />
<text  x="1100.53" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (2 samples, 0.04%)</title><rect x="736.9" y="597" width="0.5" height="15.0" fill="rgb(217,31,13)" rx="2" ry="2" />
<text  x="739.90" y="607.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (3 samples, 0.06%)</title><rect x="611.6" y="469" width="0.7" height="15.0" fill="rgb(209,49,49)" rx="2" ry="2" />
<text  x="614.64" y="479.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (4 samples, 0.08%)</title><rect x="187.5" y="405" width="0.9" height="15.0" fill="rgb(207,35,17)" rx="2" ry="2" />
<text  x="190.49" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1052.1" y="501" width="0.2" height="15.0" fill="rgb(214,181,19)" rx="2" ry="2" />
<text  x="1055.08" y="511.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="740.5" y="597" width="0.2" height="15.0" fill="rgb(228,168,34)" rx="2" ry="2" />
<text  x="743.52" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (24 samples, 0.46%)</title><rect x="276.6" y="389" width="5.4" height="15.0" fill="rgb(210,77,2)" rx="2" ry="2" />
<text  x="279.57" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="1046.7" y="469" width="0.6" height="15.0" fill="rgb(250,113,46)" rx="2" ry="2" />
<text  x="1049.65" y="479.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (1 samples, 0.02%)</title><rect x="132.3" y="597" width="0.2" height="15.0" fill="rgb(214,120,2)" rx="2" ry="2" />
<text  x="135.32" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="913.5" y="485" width="0.4" height="15.0" fill="rgb(212,70,1)" rx="2" ry="2" />
<text  x="916.48" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="641.0" y="597" width="0.3" height="15.0" fill="rgb(228,110,29)" rx="2" ry="2" />
<text  x="644.04" y="607.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (1 samples, 0.02%)</title><rect x="1130.8" y="325" width="0.2" height="15.0" fill="rgb(254,127,53)" rx="2" ry="2" />
<text  x="1133.76" y="335.5" ></text>
</g>
<g >
<title>mutation_querier::consume (179 samples, 3.43%)</title><rect x="372.0" y="373" width="40.5" height="15.0" fill="rgb(253,54,32)" rx="2" ry="2" />
<text  x="374.98" y="383.5" >mut..</text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (2 samples, 0.04%)</title><rect x="891.3" y="485" width="0.5" height="15.0" fill="rgb(229,192,9)" rx="2" ry="2" />
<text  x="894.33" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="113.6" y="645" width="0.2" height="15.0" fill="rgb(210,194,15)" rx="2" ry="2" />
<text  x="116.55" y="655.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (2 samples, 0.04%)</title><rect x="1040.3" y="469" width="0.5" height="15.0" fill="rgb(215,128,45)" rx="2" ry="2" />
<text  x="1043.32" y="479.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="12.9" y="773" width="0.3" height="15.0" fill="rgb(246,131,4)" rx="2" ry="2" />
<text  x="15.94" y="783.5" ></text>
</g>
<g >
<title>table::make_reader (466 samples, 8.93%)</title><rect x="478.0" y="533" width="105.4" height="15.0" fill="rgb(223,182,47)" rx="2" ry="2" />
<text  x="481.02" y="543.5" >table::make_..</text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (1 samples, 0.02%)</title><rect x="344.4" y="501" width="0.2" height="15.0" fill="rgb(234,176,22)" rx="2" ry="2" />
<text  x="347.40" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="505.6" y="485" width="1.1" height="15.0" fill="rgb(222,193,50)" rx="2" ry="2" />
<text  x="508.60" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (11 samples, 0.21%)</title><rect x="993.1" y="469" width="2.5" height="15.0" fill="rgb(237,181,6)" rx="2" ry="2" />
<text  x="996.07" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (4 samples, 0.08%)</title><rect x="679.0" y="613" width="0.9" height="15.0" fill="rgb(223,220,5)" rx="2" ry="2" />
<text  x="682.02" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%)</title><rect x="458.8" y="453" width="0.2" height="15.0" fill="rgb(232,161,45)" rx="2" ry="2" />
<text  x="461.80" y="463.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="791.2" y="549" width="0.9" height="15.0" fill="rgb(236,226,31)" rx="2" ry="2" />
<text  x="794.16" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="652.3" y="581" width="0.3" height="15.0" fill="rgb(206,138,23)" rx="2" ry="2" />
<text  x="655.34" y="591.5" ></text>
</g>
<g >
<title>posix_memalign (4 samples, 0.08%)</title><rect x="252.4" y="261" width="0.9" height="15.0" fill="rgb(242,157,17)" rx="2" ry="2" />
<text  x="255.38" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="691.7" y="661" width="0.2" height="15.0" fill="rgb(251,82,23)" rx="2" ry="2" />
<text  x="694.68" y="671.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="700.3" y="645" width="0.4" height="15.0" fill="rgb(220,213,38)" rx="2" ry="2" />
<text  x="703.27" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (8 samples, 0.15%)</title><rect x="1151.6" y="629" width="1.8" height="15.0" fill="rgb(250,184,5)" rx="2" ry="2" />
<text  x="1154.56" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="176.9" y="437" width="0.2" height="15.0" fill="rgb(227,190,22)" rx="2" ry="2" />
<text  x="179.86" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (23 samples, 0.44%)</title><rect x="266.6" y="357" width="5.2" height="15.0" fill="rgb(211,171,46)" rx="2" ry="2" />
<text  x="269.62" y="367.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1102.5" y="597" width="0.2" height="15.0" fill="rgb(211,112,16)" rx="2" ry="2" />
<text  x="1105.50" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_permissions_statement, std::default_delete&lt;cql3::statements::list_permissions_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::list_permissions_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="66.8" y="549" width="0.2" height="15.0" fill="rgb(238,94,12)" rx="2" ry="2" />
<text  x="69.75" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (12 samples, 0.23%)</title><rect x="83.9" y="677" width="2.7" height="15.0" fill="rgb(245,32,39)" rx="2" ry="2" />
<text  x="86.93" y="687.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="46.6" y="309" width="0.3" height="15.0" fill="rgb(242,2,45)" rx="2" ry="2" />
<text  x="49.63" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%)</title><rect x="645.3" y="597" width="0.3" height="15.0" fill="rgb(216,116,15)" rx="2" ry="2" />
<text  x="648.33" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="339.0" y="565" width="0.2" height="15.0" fill="rgb(249,169,30)" rx="2" ry="2" />
<text  x="341.97" y="575.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (1 samples, 0.02%)</title><rect x="829.6" y="453" width="0.2" height="15.0" fill="rgb(218,68,16)" rx="2" ry="2" />
<text  x="832.60" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="19.7" y="565" width="0.2" height="15.0" fill="rgb(248,36,1)" rx="2" ry="2" />
<text  x="22.72" y="575.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (4 samples, 0.08%)</title><rect x="826.2" y="405" width="0.9" height="15.0" fill="rgb(254,45,44)" rx="2" ry="2" />
<text  x="829.21" y="415.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="549.2" y="373" width="0.5" height="15.0" fill="rgb(211,109,21)" rx="2" ry="2" />
<text  x="552.24" y="383.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (2 samples, 0.04%)</title><rect x="732.8" y="597" width="0.5" height="15.0" fill="rgb(248,157,33)" rx="2" ry="2" />
<text  x="735.83" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.10%)</title><rect x="965.5" y="517" width="1.1" height="15.0" fill="rgb(216,151,5)" rx="2" ry="2" />
<text  x="968.49" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (17 samples, 0.33%)</title><rect x="209.0" y="405" width="3.8" height="15.0" fill="rgb(250,220,11)" rx="2" ry="2" />
<text  x="211.97" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="979.7" y="533" width="0.3" height="15.0" fill="rgb(205,138,34)" rx="2" ry="2" />
<text  x="982.73" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (2 samples, 0.04%)</title><rect x="1036.9" y="453" width="0.5" height="15.0" fill="rgb(245,38,16)" rx="2" ry="2" />
<text  x="1039.93" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (47 samples, 0.90%)</title><rect x="202.6" y="421" width="10.7" height="15.0" fill="rgb(246,123,9)" rx="2" ry="2" />
<text  x="205.63" y="431.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="827.3" y="421" width="0.3" height="15.0" fill="rgb(229,92,48)" rx="2" ry="2" />
<text  x="830.34" y="431.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (38 samples, 0.73%)</title><rect x="616.4" y="565" width="8.6" height="15.0" fill="rgb(210,123,32)" rx="2" ry="2" />
<text  x="619.39" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="502.7" y="437" width="0.4" height="15.0" fill="rgb(224,205,22)" rx="2" ry="2" />
<text  x="505.67" y="447.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1021.1" y="341" width="0.2" height="15.0" fill="rgb(225,123,4)" rx="2" ry="2" />
<text  x="1024.11" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="24.2" y="501" width="0.3" height="15.0" fill="rgb(211,46,23)" rx="2" ry="2" />
<text  x="27.24" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (128 samples, 2.45%)</title><rect x="1136.0" y="677" width="28.9" height="15.0" fill="rgb(235,212,38)" rx="2" ry="2" />
<text  x="1138.96" y="687.5" >se..</text>
</g>
<g >
<title>start_thread (2 samples, 0.04%)</title><rect x="1189.5" y="805" width="0.5" height="15.0" fill="rgb(213,42,29)" rx="2" ry="2" />
<text  x="1192.55" y="815.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="41.2" y="421" width="0.2" height="15.0" fill="rgb(217,169,29)" rx="2" ry="2" />
<text  x="44.20" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1039.6" y="453" width="0.3" height="15.0" fill="rgb(232,69,29)" rx="2" ry="2" />
<text  x="1042.65" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_drop_node (1 samples, 0.02%)</title><rect x="673.1" y="549" width="0.3" height="15.0" fill="rgb(223,51,26)" rx="2" ry="2" />
<text  x="676.14" y="559.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="82.4" y="597" width="0.2" height="15.0" fill="rgb(237,222,8)" rx="2" ry="2" />
<text  x="85.35" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (50 samples, 0.96%)</title><rect x="602.8" y="517" width="11.3" height="15.0" fill="rgb(223,208,24)" rx="2" ry="2" />
<text  x="605.83" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (13 samples, 0.25%)</title><rect x="888.8" y="533" width="3.0" height="15.0" fill="rgb(239,115,17)" rx="2" ry="2" />
<text  x="891.84" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="224.6" y="309" width="0.2" height="15.0" fill="rgb(240,182,1)" rx="2" ry="2" />
<text  x="227.57" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="40.7" y="469" width="0.3" height="15.0" fill="rgb(250,126,37)" rx="2" ry="2" />
<text  x="43.75" y="479.5" ></text>
</g>
<g >
<title>partition_entry::apply (2 samples, 0.04%)</title><rect x="1121.9" y="421" width="0.5" height="15.0" fill="rgb(210,137,45)" rx="2" ry="2" />
<text  x="1124.94" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (21 samples, 0.40%)</title><rect x="947.4" y="597" width="4.7" height="15.0" fill="rgb(236,99,40)" rx="2" ry="2" />
<text  x="950.40" y="607.5" ></text>
</g>
<g >
<title>boost::variant&lt;boost::variant&lt;ser::live_cell_view, ser::expiring_cell_view, ser::dead_cell_view, ser::counter_cell_view, ser::unknown_variant_type&gt;, ser::collection_cell_view, ser::unknown_variant_type&gt;::destroy_content (1 samples, 0.02%)</title><rect x="1120.4" y="405" width="0.2" height="15.0" fill="rgb(229,38,0)" rx="2" ry="2" />
<text  x="1123.36" y="415.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (5 samples, 0.10%)</title><rect x="561.7" y="469" width="1.1" height="15.0" fill="rgb(240,165,2)" rx="2" ry="2" />
<text  x="564.68" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1110.2" y="597" width="0.2" height="15.0" fill="rgb(239,195,5)" rx="2" ry="2" />
<text  x="1113.19" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (386 samples, 7.40%)</title><rect x="199.2" y="437" width="87.3" height="15.0" fill="rgb(228,13,2)" rx="2" ry="2" />
<text  x="202.24" y="447.5" >partition_..</text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.10%)</title><rect x="26.5" y="405" width="1.1" height="15.0" fill="rgb(244,88,54)" rx="2" ry="2" />
<text  x="29.51" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (2 samples, 0.04%)</title><rect x="876.2" y="581" width="0.4" height="15.0" fill="rgb(245,167,51)" rx="2" ry="2" />
<text  x="879.18" y="591.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_digest_requests (1 samples, 0.02%)</title><rect x="1041.9" y="501" width="0.2" height="15.0" fill="rgb(245,65,31)" rx="2" ry="2" />
<text  x="1044.91" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (6 samples, 0.11%)</title><rect x="324.3" y="469" width="1.3" height="15.0" fill="rgb(223,221,23)" rx="2" ry="2" />
<text  x="327.27" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="84.2" y="597" width="0.6" height="15.0" fill="rgb(216,140,32)" rx="2" ry="2" />
<text  x="87.16" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1162.4" y="629" width="0.2" height="15.0" fill="rgb(232,37,47)" rx="2" ry="2" />
<text  x="1165.42" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (15 samples, 0.29%)</title><rect x="592.0" y="533" width="3.4" height="15.0" fill="rgb(240,28,29)" rx="2" ry="2" />
<text  x="594.97" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1039.4" y="405" width="0.2" height="15.0" fill="rgb(251,126,8)" rx="2" ry="2" />
<text  x="1042.42" y="415.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (49 samples, 0.94%)</title><rect x="814.5" y="405" width="11.0" height="15.0" fill="rgb(254,210,8)" rx="2" ry="2" />
<text  x="817.45" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (16 samples, 0.31%)</title><rect x="842.7" y="501" width="3.6" height="15.0" fill="rgb(229,165,52)" rx="2" ry="2" />
<text  x="845.72" y="511.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="557.8" y="453" width="0.3" height="15.0" fill="rgb(239,25,33)" rx="2" ry="2" />
<text  x="560.83" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="107.4" y="565" width="0.3" height="15.0" fill="rgb(248,19,29)" rx="2" ry="2" />
<text  x="110.45" y="575.5" ></text>
</g>
<g >
<title>std::destroy_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="53.9" y="341" width="0.2" height="15.0" fill="rgb(217,142,3)" rx="2" ry="2" />
<text  x="56.86" y="351.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1129.0" y="277" width="0.2" height="15.0" fill="rgb(245,130,11)" rx="2" ry="2" />
<text  x="1131.95" y="287.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="109.5" y="661" width="0.2" height="15.0" fill="rgb(236,154,8)" rx="2" ry="2" />
<text  x="112.48" y="671.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (3 samples, 0.06%)</title><rect x="270.7" y="325" width="0.7" height="15.0" fill="rgb(230,179,21)" rx="2" ry="2" />
<text  x="273.69" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="727.4" y="645" width="0.2" height="15.0" fill="rgb(206,203,42)" rx="2" ry="2" />
<text  x="730.41" y="655.5" ></text>
</g>
<g >
<title>cql3::cf_name::cf_name (1 samples, 0.02%)</title><rect x="41.9" y="533" width="0.2" height="15.0" fill="rgb(241,0,1)" rx="2" ry="2" />
<text  x="44.88" y="543.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="19.5" y="677" width="0.2" height="15.0" fill="rgb(245,180,40)" rx="2" ry="2" />
<text  x="22.50" y="687.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="149.0" y="613" width="0.3" height="15.0" fill="rgb(247,84,42)" rx="2" ry="2" />
<text  x="152.05" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (6 samples, 0.11%)</title><rect x="99.5" y="629" width="1.4" height="15.0" fill="rgb(205,102,54)" rx="2" ry="2" />
<text  x="102.53" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="1145.2" y="629" width="0.3" height="15.0" fill="rgb(237,62,24)" rx="2" ry="2" />
<text  x="1148.23" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (6 samples, 0.11%)</title><rect x="652.6" y="581" width="1.3" height="15.0" fill="rgb(247,132,32)" rx="2" ry="2" />
<text  x="655.57" y="591.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="128.0" y="565" width="0.2" height="15.0" fill="rgb(205,54,42)" rx="2" ry="2" />
<text  x="131.02" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="48.0" y="309" width="0.2" height="15.0" fill="rgb(238,207,39)" rx="2" ry="2" />
<text  x="50.98" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="826.0" y="405" width="0.2" height="15.0" fill="rgb(250,113,42)" rx="2" ry="2" />
<text  x="828.98" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="887.3" y="469" width="0.2" height="15.0" fill="rgb(218,140,46)" rx="2" ry="2" />
<text  x="890.26" y="479.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (5 samples, 0.10%)</title><rect x="368.8" y="357" width="1.1" height="15.0" fill="rgb(224,47,18)" rx="2" ry="2" />
<text  x="371.82" y="367.5" ></text>
</g>
<g >
<title>syscall-0 (2 samples, 0.04%)</title><rect x="1189.5" y="821" width="0.5" height="15.0" fill="rgb(246,192,51)" rx="2" ry="2" />
<text  x="1192.55" y="831.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="886.4" y="533" width="0.2" height="15.0" fill="rgb(217,191,14)" rx="2" ry="2" />
<text  x="889.35" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (3 samples, 0.06%)</title><rect x="1126.7" y="389" width="0.7" height="15.0" fill="rgb(226,16,33)" rx="2" ry="2" />
<text  x="1129.69" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="648.9" y="613" width="0.3" height="15.0" fill="rgb(246,75,14)" rx="2" ry="2" />
<text  x="651.95" y="623.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (317 samples, 6.07%)</title><rect x="779.4" y="597" width="71.7" height="15.0" fill="rgb(247,43,32)" rx="2" ry="2" />
<text  x="782.41" y="607.5" >cql3::st..</text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (2 samples, 0.04%)</title><rect x="716.8" y="661" width="0.4" height="15.0" fill="rgb(211,137,10)" rx="2" ry="2" />
<text  x="719.78" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (4 samples, 0.08%)</title><rect x="189.1" y="421" width="0.9" height="15.0" fill="rgb(221,138,2)" rx="2" ry="2" />
<text  x="192.07" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="55.7" y="341" width="0.2" height="15.0" fill="rgb(214,72,38)" rx="2" ry="2" />
<text  x="58.67" y="351.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (1 samples, 0.02%)</title><rect x="576.1" y="453" width="0.3" height="15.0" fill="rgb(244,63,38)" rx="2" ry="2" />
<text  x="579.15" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (16 samples, 0.31%)</title><rect x="1095.5" y="549" width="3.6" height="15.0" fill="rgb(234,64,50)" rx="2" ry="2" />
<text  x="1098.49" y="559.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="48.0" y="357" width="0.2" height="15.0" fill="rgb(254,216,43)" rx="2" ry="2" />
<text  x="50.98" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1039.2" y="373" width="0.2" height="15.0" fill="rgb(248,33,15)" rx="2" ry="2" />
<text  x="1042.19" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="64.9" y="453" width="0.3" height="15.0" fill="rgb(245,63,11)" rx="2" ry="2" />
<text  x="67.94" y="463.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="83.7" y="709" width="0.2" height="15.0" fill="rgb(216,42,5)" rx="2" ry="2" />
<text  x="86.71" y="719.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (4 samples, 0.08%)</title><rect x="136.2" y="629" width="0.9" height="15.0" fill="rgb(250,124,42)" rx="2" ry="2" />
<text  x="139.16" y="639.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (4 samples, 0.08%)</title><rect x="19.7" y="741" width="0.9" height="15.0" fill="rgb(236,151,15)" rx="2" ry="2" />
<text  x="22.72" y="751.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="947.2" y="501" width="0.2" height="15.0" fill="rgb(254,68,35)" rx="2" ry="2" />
<text  x="950.17" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="346.4" y="485" width="0.3" height="15.0" fill="rgb(224,35,32)" rx="2" ry="2" />
<text  x="349.43" y="495.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (266 samples, 5.10%)</title><rect x="22.2" y="677" width="60.2" height="15.0" fill="rgb(240,217,44)" rx="2" ry="2" />
<text  x="25.21" y="687.5" >cql3::..</text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (1 samples, 0.02%)</title><rect x="57.0" y="405" width="0.3" height="15.0" fill="rgb(249,132,13)" rx="2" ry="2" />
<text  x="60.03" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (16 samples, 0.31%)</title><rect x="453.6" y="437" width="3.6" height="15.0" fill="rgb(248,42,27)" rx="2" ry="2" />
<text  x="456.60" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier_raw, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%)</title><rect x="47.3" y="485" width="0.2" height="15.0" fill="rgb(240,188,41)" rx="2" ry="2" />
<text  x="50.31" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (10 samples, 0.19%)</title><rect x="203.3" y="389" width="2.3" height="15.0" fill="rgb(212,1,51)" rx="2" ry="2" />
<text  x="206.31" y="399.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (3 samples, 0.06%)</title><rect x="862.8" y="533" width="0.7" height="15.0" fill="rgb(237,51,10)" rx="2" ry="2" />
<text  x="865.84" y="543.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (1 samples, 0.02%)</title><rect x="107.7" y="405" width="0.2" height="15.0" fill="rgb(227,85,8)" rx="2" ry="2" />
<text  x="110.67" y="415.5" ></text>
</g>
<g >
<title>__sigsetjmp (1 samples, 0.02%)</title><rect x="663.4" y="661" width="0.2" height="15.0" fill="rgb(213,215,40)" rx="2" ry="2" />
<text  x="666.42" y="671.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (2 samples, 0.04%)</title><rect x="555.6" y="405" width="0.4" height="15.0" fill="rgb(216,229,7)" rx="2" ry="2" />
<text  x="558.57" y="415.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (2 samples, 0.04%)</title><rect x="108.1" y="517" width="0.5" height="15.0" fill="rgb(234,199,21)" rx="2" ry="2" />
<text  x="111.13" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::take_value (1 samples, 0.02%)</title><rect x="765.6" y="549" width="0.2" height="15.0" fill="rgb(235,145,34)" rx="2" ry="2" />
<text  x="768.62" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="53.6" y="277" width="0.3" height="15.0" fill="rgb(251,0,0)" rx="2" ry="2" />
<text  x="56.64" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (23 samples, 0.44%)</title><rect x="783.7" y="549" width="5.2" height="15.0" fill="rgb(214,147,30)" rx="2" ry="2" />
<text  x="786.70" y="559.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (3 samples, 0.06%)</title><rect x="121.5" y="597" width="0.6" height="15.0" fill="rgb(222,156,15)" rx="2" ry="2" />
<text  x="124.47" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="41.2" y="437" width="0.2" height="15.0" fill="rgb(215,173,40)" rx="2" ry="2" />
<text  x="44.20" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="803.8" y="453" width="0.3" height="15.0" fill="rgb(227,3,43)" rx="2" ry="2" />
<text  x="806.83" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::selection::simple_selection, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::vector&lt;column_definition const*, std::allocator&lt;column_definition const*&gt; &gt;, std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;, bool&gt; (1 samples, 0.02%)</title><rect x="83.5" y="453" width="0.2" height="15.0" fill="rgb(243,126,51)" rx="2" ry="2" />
<text  x="86.48" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="65.4" y="501" width="0.2" height="15.0" fill="rgb(249,11,6)" rx="2" ry="2" />
<text  x="68.39" y="511.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (4 samples, 0.08%)</title><rect x="692.8" y="645" width="0.9" height="15.0" fill="rgb(251,139,15)" rx="2" ry="2" />
<text  x="695.81" y="655.5" ></text>
</g>
<g >
<title>std::move&lt;std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="60.2" y="485" width="0.2" height="15.0" fill="rgb(211,62,38)" rx="2" ry="2" />
<text  x="63.19" y="495.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="83.5" y="725" width="0.2" height="15.0" fill="rgb(212,128,50)" rx="2" ry="2" />
<text  x="86.48" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (4 samples, 0.08%)</title><rect x="252.4" y="245" width="0.9" height="15.0" fill="rgb(211,36,10)" rx="2" ry="2" />
<text  x="255.38" y="255.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (5 samples, 0.10%)</title><rect x="379.9" y="341" width="1.1" height="15.0" fill="rgb(207,223,33)" rx="2" ry="2" />
<text  x="382.89" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="48.0" y="453" width="0.2" height="15.0" fill="rgb(221,3,36)" rx="2" ry="2" />
<text  x="50.98" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="49.1" y="373" width="0.5" height="15.0" fill="rgb(211,59,37)" rx="2" ry="2" />
<text  x="52.11" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="1125.8" y="469" width="1.6" height="15.0" fill="rgb(247,214,52)" rx="2" ry="2" />
<text  x="1128.79" y="479.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (13 samples, 0.25%)</title><rect x="463.6" y="549" width="2.9" height="15.0" fill="rgb(228,194,37)" rx="2" ry="2" />
<text  x="466.55" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="134.8" y="629" width="0.5" height="15.0" fill="rgb(235,69,15)" rx="2" ry="2" />
<text  x="137.81" y="639.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%)</title><rect x="19.7" y="421" width="0.2" height="15.0" fill="rgb(240,108,0)" rx="2" ry="2" />
<text  x="22.72" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (2 samples, 0.04%)</title><rect x="1121.0" y="357" width="0.5" height="15.0" fill="rgb(223,42,14)" rx="2" ry="2" />
<text  x="1124.04" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::run (4,784 samples, 91.67%)</title><rect x="87.1" y="725" width="1081.6" height="15.0" fill="rgb(254,142,39)" rx="2" ry="2" />
<text  x="90.10" y="735.5" >seastar::reactor::run</text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (2 samples, 0.04%)</title><rect x="618.0" y="549" width="0.4" height="15.0" fill="rgb(207,119,42)" rx="2" ry="2" />
<text  x="620.97" y="559.5" ></text>
</g>
<g >
<title>query::result_set_row::get&lt;int&gt; (1 samples, 0.02%)</title><rect x="108.6" y="549" width="0.2" height="15.0" fill="rgb(250,24,45)" rx="2" ry="2" />
<text  x="111.58" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="57.3" y="405" width="0.2" height="15.0" fill="rgb(251,216,53)" rx="2" ry="2" />
<text  x="60.25" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (1 samples, 0.02%)</title><rect x="731.5" y="613" width="0.2" height="15.0" fill="rgb(231,92,27)" rx="2" ry="2" />
<text  x="734.48" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="583.2" y="517" width="0.2" height="15.0" fill="rgb(220,172,5)" rx="2" ry="2" />
<text  x="586.16" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="897.0" y="613" width="0.2" height="15.0" fill="rgb(223,16,52)" rx="2" ry="2" />
<text  x="899.98" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::end (1 samples, 0.02%)</title><rect x="39.2" y="453" width="0.2" height="15.0" fill="rgb(252,56,33)" rx="2" ry="2" />
<text  x="42.17" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1084.0" y="549" width="0.2" height="15.0" fill="rgb(228,48,28)" rx="2" ry="2" />
<text  x="1086.96" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="322.0" y="533" width="0.2" height="15.0" fill="rgb(254,123,42)" rx="2" ry="2" />
<text  x="325.01" y="543.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%)</title><rect x="107.7" y="485" width="0.2" height="15.0" fill="rgb(227,31,47)" rx="2" ry="2" />
<text  x="110.67" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (21 samples, 0.40%)</title><rect x="752.7" y="549" width="4.8" height="15.0" fill="rgb(209,136,49)" rx="2" ry="2" />
<text  x="755.73" y="559.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (2 samples, 0.04%)</title><rect x="875.7" y="581" width="0.5" height="15.0" fill="rgb(219,158,36)" rx="2" ry="2" />
<text  x="878.73" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="716.1" y="533" width="0.5" height="15.0" fill="rgb(221,157,32)" rx="2" ry="2" />
<text  x="719.10" y="543.5" ></text>
</g>
<g >
<title>logalloc::region_group::update_maximal_rg (1 samples, 0.02%)</title><rect x="83.9" y="581" width="0.3" height="15.0" fill="rgb(211,94,17)" rx="2" ry="2" />
<text  x="86.93" y="591.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="919.8" y="565" width="0.2" height="15.0" fill="rgb(236,96,48)" rx="2" ry="2" />
<text  x="922.81" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (5 samples, 0.10%)</title><rect x="1129.0" y="293" width="1.1" height="15.0" fill="rgb(247,190,10)" rx="2" ry="2" />
<text  x="1131.95" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_const&lt;std::unordered_map&lt;dht::token, gms::inet_address, std::hash&lt;dht::token&gt;, std::equal_to&lt;dht::token&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt; &gt; &gt;, std::__detail::_Node_const_iterator&lt;std::pair&lt;dht::token const, gms::inet_address&gt;, false, true&gt;, boost::use_default, boost::use_default&gt; &gt; (1 samples, 0.02%)</title><rect x="20.4" y="533" width="0.2" height="15.0" fill="rgb(243,4,19)" rx="2" ry="2" />
<text  x="23.40" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1061.1" y="501" width="0.3" height="15.0" fill="rgb(205,168,6)" rx="2" ry="2" />
<text  x="1064.12" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="55.7" y="325" width="0.2" height="15.0" fill="rgb(227,12,47)" rx="2" ry="2" />
<text  x="58.67" y="335.5" ></text>
</g>
<g >
<title>database::apply_in_memory (19 samples, 0.36%)</title><rect x="1118.8" y="469" width="4.3" height="15.0" fill="rgb(220,5,29)" rx="2" ry="2" />
<text  x="1121.78" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1039.2" y="357" width="0.2" height="15.0" fill="rgb(249,153,6)" rx="2" ry="2" />
<text  x="1042.19" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="48.2" y="309" width="0.5" height="15.0" fill="rgb(242,80,5)" rx="2" ry="2" />
<text  x="51.21" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="315.5" y="501" width="0.2" height="15.0" fill="rgb(253,13,14)" rx="2" ry="2" />
<text  x="318.46" y="511.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="119.0" y="629" width="0.9" height="15.0" fill="rgb(249,67,9)" rx="2" ry="2" />
<text  x="121.98" y="639.5" ></text>
</g>
<g >
<title>std::locale::~locale (1 samples, 0.02%)</title><rect x="13.6" y="773" width="0.2" height="15.0" fill="rgb(206,169,7)" rx="2" ry="2" />
<text  x="16.62" y="783.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="695.1" y="629" width="0.2" height="15.0" fill="rgb(245,113,2)" rx="2" ry="2" />
<text  x="698.07" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="57.5" y="421" width="0.2" height="15.0" fill="rgb(224,17,11)" rx="2" ry="2" />
<text  x="60.48" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (5 samples, 0.10%)</title><rect x="186.4" y="405" width="1.1" height="15.0" fill="rgb(225,156,21)" rx="2" ry="2" />
<text  x="189.36" y="415.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::seek (1 samples, 0.02%)</title><rect x="108.4" y="325" width="0.2" height="15.0" fill="rgb(248,79,6)" rx="2" ry="2" />
<text  x="111.35" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="978.8" y="517" width="0.3" height="15.0" fill="rgb(209,202,16)" rx="2" ry="2" />
<text  x="981.83" y="527.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%)</title><rect x="774.2" y="581" width="0.9" height="15.0" fill="rgb(249,186,0)" rx="2" ry="2" />
<text  x="777.21" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="55.9" y="421" width="0.2" height="15.0" fill="rgb(209,119,16)" rx="2" ry="2" />
<text  x="58.90" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (4 samples, 0.08%)</title><rect x="554.7" y="405" width="0.9" height="15.0" fill="rgb(210,96,53)" rx="2" ry="2" />
<text  x="557.67" y="415.5" ></text>
</g>
<g >
<title>all (5,219 samples, 100%)</title><rect x="10.0" y="837" width="1180.0" height="15.0" fill="rgb(219,40,23)" rx="2" ry="2" />
<text  x="13.00" y="847.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1052.5" y="517" width="0.3" height="15.0" fill="rgb(206,77,35)" rx="2" ry="2" />
<text  x="1055.53" y="527.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="936.1" y="501" width="0.4" height="15.0" fill="rgb(209,37,16)" rx="2" ry="2" />
<text  x="939.09" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (15 samples, 0.29%)</title><rect x="61.8" y="517" width="3.4" height="15.0" fill="rgb(249,97,21)" rx="2" ry="2" />
<text  x="64.78" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="158.3" y="597" width="0.2" height="15.0" fill="rgb(207,194,0)" rx="2" ry="2" />
<text  x="161.32" y="607.5" ></text>
</g>
<g >
<title>table::mutation_query (1 samples, 0.02%)</title><rect x="138.0" y="629" width="0.2" height="15.0" fill="rgb(212,198,52)" rx="2" ry="2" />
<text  x="140.97" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="684.0" y="613" width="0.2" height="15.0" fill="rgb(238,168,2)" rx="2" ry="2" />
<text  x="687.00" y="623.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (1 samples, 0.02%)</title><rect x="918.0" y="565" width="0.2" height="15.0" fill="rgb(220,177,33)" rx="2" ry="2" />
<text  x="921.01" y="575.5" ></text>
</g>
<g >
<title>table::query (3 samples, 0.06%)</title><rect x="1165.4" y="677" width="0.6" height="15.0" fill="rgb(238,167,13)" rx="2" ry="2" />
<text  x="1168.36" y="687.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::list_permissions_statement*, std::default_delete&lt;cql3::statements::list_permissions_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="66.8" y="501" width="0.2" height="15.0" fill="rgb(240,55,25)" rx="2" ry="2" />
<text  x="69.75" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="197.4" y="437" width="0.3" height="15.0" fill="rgb(215,84,39)" rx="2" ry="2" />
<text  x="200.43" y="447.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1126.9" y="309" width="0.2" height="15.0" fill="rgb(212,40,20)" rx="2" ry="2" />
<text  x="1129.92" y="319.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::from_singular&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%)</title><rect x="20.2" y="357" width="0.2" height="15.0" fill="rgb(212,152,45)" rx="2" ry="2" />
<text  x="23.17" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="49.1" y="325" width="0.5" height="15.0" fill="rgb(238,200,0)" rx="2" ry="2" />
<text  x="52.11" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="1106.6" y="549" width="0.9" height="15.0" fill="rgb(232,204,2)" rx="2" ry="2" />
<text  x="1109.57" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (1 samples, 0.02%)</title><rect x="610.1" y="453" width="0.2" height="15.0" fill="rgb(210,76,13)" rx="2" ry="2" />
<text  x="613.06" y="463.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="63.6" y="325" width="0.4" height="15.0" fill="rgb(239,24,53)" rx="2" ry="2" />
<text  x="66.58" y="335.5" ></text>
</g>
<g >
<title>TLS init function for cql3::statements::select_statement::_default_parameters (1 samples, 0.02%)</title><rect x="776.9" y="565" width="0.2" height="15.0" fill="rgb(220,50,25)" rx="2" ry="2" />
<text  x="779.92" y="575.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (3 samples, 0.06%)</title><rect x="924.3" y="549" width="0.7" height="15.0" fill="rgb(219,161,2)" rx="2" ry="2" />
<text  x="927.34" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="48.0" y="405" width="0.2" height="15.0" fill="rgb(251,114,25)" rx="2" ry="2" />
<text  x="50.98" y="415.5" ></text>
</g>
<g >
<title>tracing::add_table_name (2 samples, 0.04%)</title><rect x="1117.2" y="613" width="0.4" height="15.0" fill="rgb(226,221,5)" rx="2" ry="2" />
<text  x="1120.20" y="623.5" ></text>
</g>
<g >
<title>cdc::generation_service::make_new_generation (1 samples, 0.02%)</title><rect x="19.9" y="629" width="0.3" height="15.0" fill="rgb(235,179,5)" rx="2" ry="2" />
<text  x="22.95" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%)</title><rect x="956.2" y="549" width="0.2" height="15.0" fill="rgb(247,184,39)" rx="2" ry="2" />
<text  x="959.22" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1121.5" y="373" width="0.2" height="15.0" fill="rgb(228,96,17)" rx="2" ry="2" />
<text  x="1124.49" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (11 samples, 0.21%)</title><rect x="1047.8" y="485" width="2.5" height="15.0" fill="rgb(246,184,30)" rx="2" ry="2" />
<text  x="1050.79" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="43.9" y="469" width="0.2" height="15.0" fill="rgb(249,187,35)" rx="2" ry="2" />
<text  x="46.91" y="479.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1145.0" y="581" width="0.2" height="15.0" fill="rgb(246,110,33)" rx="2" ry="2" />
<text  x="1148.01" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="875.5" y="533" width="0.2" height="15.0" fill="rgb(213,116,8)" rx="2" ry="2" />
<text  x="878.50" y="543.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="740.5" y="469" width="0.2" height="15.0" fill="rgb(214,125,26)" rx="2" ry="2" />
<text  x="743.52" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::io_queue_submission_pollfn::poll (1 samples, 0.02%)</title><rect x="1166.5" y="677" width="0.2" height="15.0" fill="rgb(246,110,41)" rx="2" ry="2" />
<text  x="1169.49" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="367.0" y="357" width="0.2" height="15.0" fill="rgb(207,3,14)" rx="2" ry="2" />
<text  x="370.01" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="768.3" y="469" width="0.3" height="15.0" fill="rgb(214,114,44)" rx="2" ry="2" />
<text  x="771.33" y="479.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_token (1 samples, 0.02%)</title><rect x="31.5" y="437" width="0.2" height="15.0" fill="rgb(220,221,20)" rx="2" ry="2" />
<text  x="34.48" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (12 samples, 0.23%)</title><rect x="83.9" y="693" width="2.7" height="15.0" fill="rgb(236,198,6)" rx="2" ry="2" />
<text  x="86.93" y="703.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (12 samples, 0.23%)</title><rect x="501.1" y="453" width="2.7" height="15.0" fill="rgb(211,214,32)" rx="2" ry="2" />
<text  x="504.08" y="463.5" ></text>
</g>
<g >
<title>schema::cdc_options (1 samples, 0.02%)</title><rect x="886.1" y="533" width="0.3" height="15.0" fill="rgb(236,18,45)" rx="2" ry="2" />
<text  x="889.13" y="543.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="850.0" y="469" width="0.2" height="15.0" fill="rgb(252,153,34)" rx="2" ry="2" />
<text  x="852.95" y="479.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="18.4" y="709" width="0.2" height="15.0" fill="rgb(213,64,48)" rx="2" ry="2" />
<text  x="21.37" y="719.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="82.4" y="645" width="0.2" height="15.0" fill="rgb(253,105,20)" rx="2" ry="2" />
<text  x="85.35" y="655.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (5 samples, 0.10%)</title><rect x="413.8" y="389" width="1.1" height="15.0" fill="rgb(210,76,35)" rx="2" ry="2" />
<text  x="416.81" y="399.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="107.0" y="469" width="0.2" height="15.0" fill="rgb(237,163,12)" rx="2" ry="2" />
<text  x="110.00" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::single_column_relation, true&gt;::make&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (1 samples, 0.02%)</title><rect x="64.9" y="485" width="0.3" height="15.0" fill="rgb(222,144,22)" rx="2" ry="2" />
<text  x="67.94" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="48.9" y="469" width="0.2" height="15.0" fill="rgb(214,120,37)" rx="2" ry="2" />
<text  x="51.89" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (129 samples, 2.47%)</title><rect x="225.7" y="309" width="29.2" height="15.0" fill="rgb(227,119,27)" rx="2" ry="2" />
<text  x="228.70" y="319.5" >co..</text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="885.7" y="661" width="0.2" height="15.0" fill="rgb(227,170,52)" rx="2" ry="2" />
<text  x="888.67" y="671.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::to_term (2 samples, 0.04%)</title><rect x="73.5" y="533" width="0.5" height="15.0" fill="rgb(207,223,2)" rx="2" ry="2" />
<text  x="76.53" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="54.3" y="453" width="0.5" height="15.0" fill="rgb(205,131,39)" rx="2" ry="2" />
<text  x="57.32" y="463.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (2 samples, 0.04%)</title><rect x="239.0" y="261" width="0.5" height="15.0" fill="rgb(214,1,29)" rx="2" ry="2" />
<text  x="242.04" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="45.5" y="405" width="0.2" height="15.0" fill="rgb(247,137,10)" rx="2" ry="2" />
<text  x="48.50" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;::_Vector_impl_data::_Vector_impl_data (1 samples, 0.02%)</title><rect x="65.6" y="501" width="0.2" height="15.0" fill="rgb(227,0,3)" rx="2" ry="2" />
<text  x="68.62" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (4 samples, 0.08%)</title><rect x="1147.7" y="581" width="0.9" height="15.0" fill="rgb(220,59,53)" rx="2" ry="2" />
<text  x="1150.72" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="106.1" y="613" width="0.2" height="15.0" fill="rgb(225,137,26)" rx="2" ry="2" />
<text  x="109.09" y="623.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, service::client_state::has_column_family_access (2 samples, 0.04%)</title><rect x="838.4" y="565" width="0.5" height="15.0" fill="rgb(234,131,0)" rx="2" ry="2" />
<text  x="841.42" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="101.3" y="629" width="0.3" height="15.0" fill="rgb(230,130,37)" rx="2" ry="2" />
<text  x="104.34" y="639.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%)</title><rect x="985.6" y="501" width="1.4" height="15.0" fill="rgb(219,89,12)" rx="2" ry="2" />
<text  x="988.61" y="511.5" ></text>
</g>
<g >
<title>__strlen_avx2 (6 samples, 0.11%)</title><rect x="1008.4" y="421" width="1.4" height="15.0" fill="rgb(221,123,26)" rx="2" ry="2" />
<text  x="1011.44" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;boost::intrusive::detail::null_disposer, boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="607.3" y="453" width="0.3" height="15.0" fill="rgb(223,94,45)" rx="2" ry="2" />
<text  x="610.35" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="849.3" y="485" width="0.2" height="15.0" fill="rgb(247,110,0)" rx="2" ry="2" />
<text  x="852.27" y="495.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="553.8" y="357" width="0.2" height="15.0" fill="rgb(222,175,39)" rx="2" ry="2" />
<text  x="556.76" y="367.5" ></text>
</g>
<g >
<title>appending_hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="106.1" y="565" width="0.2" height="15.0" fill="rgb(254,157,14)" rx="2" ry="2" />
<text  x="109.09" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%)</title><rect x="55.4" y="421" width="0.3" height="15.0" fill="rgb(228,156,7)" rx="2" ry="2" />
<text  x="58.45" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%)</title><rect x="1141.4" y="661" width="0.2" height="15.0" fill="rgb(209,178,37)" rx="2" ry="2" />
<text  x="1144.39" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (91 samples, 1.74%)</title><rect x="416.3" y="373" width="20.6" height="15.0" fill="rgb(205,155,28)" rx="2" ry="2" />
<text  x="419.30" y="383.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%)</title><rect x="18.4" y="661" width="0.2" height="15.0" fill="rgb(228,83,8)" rx="2" ry="2" />
<text  x="21.37" y="671.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (6 samples, 0.11%)</title><rect x="909.0" y="485" width="1.3" height="15.0" fill="rgb(217,49,30)" rx="2" ry="2" />
<text  x="911.96" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (1 samples, 0.02%)</title><rect x="541.6" y="469" width="0.2" height="15.0" fill="rgb(241,29,4)" rx="2" ry="2" />
<text  x="544.55" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="861.5" y="565" width="2.0" height="15.0" fill="rgb(254,7,53)" rx="2" ry="2" />
<text  x="864.48" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="347.6" y="469" width="0.2" height="15.0" fill="rgb(224,104,46)" rx="2" ry="2" />
<text  x="350.56" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.08%)</title><rect x="669.5" y="661" width="0.9" height="15.0" fill="rgb(242,172,51)" rx="2" ry="2" />
<text  x="672.52" y="671.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;cql3::metadata::column_info&gt;::make&lt;std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="83.5" y="341" width="0.2" height="15.0" fill="rgb(219,164,11)" rx="2" ry="2" />
<text  x="86.48" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="54.3" y="357" width="0.5" height="15.0" fill="rgb(216,6,22)" rx="2" ry="2" />
<text  x="57.32" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (6 samples, 0.11%)</title><rect x="174.1" y="469" width="1.4" height="15.0" fill="rgb(253,57,21)" rx="2" ry="2" />
<text  x="177.15" y="479.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (2 samples, 0.04%)</title><rect x="381.3" y="357" width="0.4" height="15.0" fill="rgb(211,53,9)" rx="2" ry="2" />
<text  x="384.25" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="150.9" y="549" width="0.6" height="15.0" fill="rgb(220,142,23)" rx="2" ry="2" />
<text  x="153.86" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (6 samples, 0.11%)</title><rect x="1085.1" y="549" width="1.3" height="15.0" fill="rgb(207,175,49)" rx="2" ry="2" />
<text  x="1088.09" y="559.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="786.0" y="469" width="0.2" height="15.0" fill="rgb(206,174,32)" rx="2" ry="2" />
<text  x="788.96" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (14 samples, 0.27%)</title><rect x="592.2" y="501" width="3.2" height="15.0" fill="rgb(228,49,17)" rx="2" ry="2" />
<text  x="595.20" y="511.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="40.7" y="389" width="0.3" height="15.0" fill="rgb(237,137,25)" rx="2" ry="2" />
<text  x="43.75" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.13%)</title><rect x="922.5" y="517" width="1.6" height="15.0" fill="rgb(229,69,33)" rx="2" ry="2" />
<text  x="925.53" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (1 samples, 0.02%)</title><rect x="891.1" y="453" width="0.2" height="15.0" fill="rgb(248,81,35)" rx="2" ry="2" />
<text  x="894.10" y="463.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="667.0" y="645" width="0.5" height="15.0" fill="rgb(237,82,52)" rx="2" ry="2" />
<text  x="670.04" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="46.9" y="373" width="0.2" height="15.0" fill="rgb(210,1,30)" rx="2" ry="2" />
<text  x="49.85" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="803.4" y="485" width="0.7" height="15.0" fill="rgb(212,30,26)" rx="2" ry="2" />
<text  x="806.37" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="50.5" y="437" width="0.4" height="15.0" fill="rgb(221,174,4)" rx="2" ry="2" />
<text  x="53.47" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (26 samples, 0.50%)</title><rect x="767.7" y="533" width="5.8" height="15.0" fill="rgb(231,189,22)" rx="2" ry="2" />
<text  x="770.65" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="53.9" y="309" width="0.2" height="15.0" fill="rgb(231,160,37)" rx="2" ry="2" />
<text  x="56.86" y="319.5" ></text>
</g>
<g >
<title>dht::tri_compare (3 samples, 0.06%)</title><rect x="1073.8" y="421" width="0.7" height="15.0" fill="rgb(206,127,53)" rx="2" ry="2" />
<text  x="1076.79" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (7 samples, 0.13%)</title><rect x="216.2" y="405" width="1.6" height="15.0" fill="rgb(248,51,52)" rx="2" ry="2" />
<text  x="219.20" y="415.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Lexer (1 samples, 0.02%)</title><rect x="23.6" y="597" width="0.2" height="15.0" fill="rgb(210,39,17)" rx="2" ry="2" />
<text  x="26.57" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (5 samples, 0.10%)</title><rect x="1093.5" y="549" width="1.1" height="15.0" fill="rgb(236,216,43)" rx="2" ry="2" />
<text  x="1096.46" y="559.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (1 samples, 0.02%)</title><rect x="891.8" y="517" width="0.2" height="15.0" fill="rgb(237,199,7)" rx="2" ry="2" />
<text  x="894.78" y="527.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (1 samples, 0.02%)</title><rect x="381.5" y="341" width="0.2" height="15.0" fill="rgb(207,49,23)" rx="2" ry="2" />
<text  x="384.48" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (8 samples, 0.15%)</title><rect x="297.1" y="373" width="1.9" height="15.0" fill="rgb(240,82,3)" rx="2" ry="2" />
<text  x="300.14" y="383.5" ></text>
</g>
<g >
<title>row::compact_and_expire (96 samples, 1.84%)</title><rect x="415.2" y="389" width="21.7" height="15.0" fill="rgb(212,83,46)" rx="2" ry="2" />
<text  x="418.17" y="399.5" >r..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1114.0" y="597" width="0.3" height="15.0" fill="rgb(226,228,8)" rx="2" ry="2" />
<text  x="1117.03" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (8 samples, 0.15%)</title><rect x="1045.5" y="501" width="1.8" height="15.0" fill="rgb(232,63,13)" rx="2" ry="2" />
<text  x="1048.52" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (3 samples, 0.06%)</title><rect x="801.6" y="485" width="0.6" height="15.0" fill="rgb(218,216,50)" rx="2" ry="2" />
<text  x="804.57" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (4 samples, 0.08%)</title><rect x="414.0" y="373" width="0.9" height="15.0" fill="rgb(207,214,7)" rx="2" ry="2" />
<text  x="417.04" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="950.1" y="533" width="0.2" height="15.0" fill="rgb(246,108,22)" rx="2" ry="2" />
<text  x="953.11" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="1148.9" y="597" width="1.1" height="15.0" fill="rgb(243,221,39)" rx="2" ry="2" />
<text  x="1151.85" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (13 samples, 0.25%)</title><rect x="179.8" y="437" width="2.9" height="15.0" fill="rgb(248,46,33)" rx="2" ry="2" />
<text  x="182.80" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (19 samples, 0.36%)</title><rect x="149.3" y="613" width="4.3" height="15.0" fill="rgb(233,141,51)" rx="2" ry="2" />
<text  x="152.28" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (615 samples, 11.78%)</title><rect x="743.9" y="677" width="139.1" height="15.0" fill="rgb(241,71,14)" rx="2" ry="2" />
<text  x="746.91" y="687.5" >seastar::internal..</text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (2 samples, 0.04%)</title><rect x="359.5" y="373" width="0.5" height="15.0" fill="rgb(207,44,4)" rx="2" ry="2" />
<text  x="362.55" y="383.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (10 samples, 0.19%)</title><rect x="889.1" y="485" width="2.2" height="15.0" fill="rgb(222,163,5)" rx="2" ry="2" />
<text  x="892.06" y="495.5" ></text>
</g>
<g >
<title>ser::writer_of_deletable_row&lt;bytes_ostream&gt;::write_key (2 samples, 0.04%)</title><rect x="1130.1" y="309" width="0.4" height="15.0" fill="rgb(219,84,30)" rx="2" ry="2" />
<text  x="1133.08" y="319.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (3 samples, 0.06%)</title><rect x="59.5" y="485" width="0.7" height="15.0" fill="rgb(209,53,11)" rx="2" ry="2" />
<text  x="62.52" y="495.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (2 samples, 0.04%)</title><rect x="509.4" y="501" width="0.5" height="15.0" fill="rgb(252,34,47)" rx="2" ry="2" />
<text  x="512.45" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1020.9" y="341" width="0.2" height="15.0" fill="rgb(224,223,5)" rx="2" ry="2" />
<text  x="1023.88" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="50.5" y="421" width="0.2" height="15.0" fill="rgb(235,93,48)" rx="2" ry="2" />
<text  x="53.47" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="476.4" y="549" width="0.3" height="15.0" fill="rgb(238,198,9)" rx="2" ry="2" />
<text  x="479.44" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="63.4" y="325" width="0.2" height="15.0" fill="rgb(211,229,41)" rx="2" ry="2" />
<text  x="66.36" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (12 samples, 0.23%)</title><rect x="83.9" y="725" width="2.7" height="15.0" fill="rgb(227,123,21)" rx="2" ry="2" />
<text  x="86.93" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (7 samples, 0.13%)</title><rect x="1159.0" y="661" width="1.6" height="15.0" fill="rgb(234,32,3)" rx="2" ry="2" />
<text  x="1162.02" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1022.9" y="357" width="0.2" height="15.0" fill="rgb(238,139,34)" rx="2" ry="2" />
<text  x="1025.91" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="696.0" y="645" width="0.4" height="15.0" fill="rgb(236,141,41)" rx="2" ry="2" />
<text  x="698.98" y="655.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="64.7" y="453" width="0.2" height="15.0" fill="rgb(230,103,0)" rx="2" ry="2" />
<text  x="67.72" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (4 samples, 0.08%)</title><rect x="172.8" y="485" width="0.9" height="15.0" fill="rgb(209,176,19)" rx="2" ry="2" />
<text  x="175.79" y="495.5" ></text>
</g>
<g >
<title>db::schema_tables::add_table_params_to_mutations (1 samples, 0.02%)</title><rect x="107.9" y="597" width="0.2" height="15.0" fill="rgb(247,37,46)" rx="2" ry="2" />
<text  x="110.90" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="62.7" y="469" width="0.2" height="15.0" fill="rgb(236,26,31)" rx="2" ry="2" />
<text  x="65.68" y="479.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.65%)</title><rect x="1125.6" y="645" width="7.6" height="15.0" fill="rgb(220,225,30)" rx="2" ry="2" />
<text  x="1128.56" y="655.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (20 samples, 0.38%)</title><rect x="753.0" y="533" width="4.5" height="15.0" fill="rgb(246,7,28)" rx="2" ry="2" />
<text  x="755.95" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (5 samples, 0.10%)</title><rect x="190.2" y="437" width="1.1" height="15.0" fill="rgb(230,95,27)" rx="2" ry="2" />
<text  x="193.20" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="466.3" y="533" width="0.2" height="15.0" fill="rgb(222,227,0)" rx="2" ry="2" />
<text  x="469.26" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="312.1" y="469" width="0.2" height="15.0" fill="rgb(239,37,49)" rx="2" ry="2" />
<text  x="315.07" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="100.9" y="613" width="0.4" height="15.0" fill="rgb(251,141,3)" rx="2" ry="2" />
<text  x="103.89" y="623.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (33 samples, 0.63%)</title><rect x="751.4" y="613" width="7.4" height="15.0" fill="rgb(246,7,32)" rx="2" ry="2" />
<text  x="754.37" y="623.5" ></text>
</g>
<g >
<title>evictable_reader::do_fill_buffer (1 samples, 0.02%)</title><rect x="106.8" y="373" width="0.2" height="15.0" fill="rgb(245,209,22)" rx="2" ry="2" />
<text  x="109.77" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (33 samples, 0.63%)</title><rect x="124.6" y="597" width="7.5" height="15.0" fill="rgb(216,106,48)" rx="2" ry="2" />
<text  x="127.63" y="607.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (6 samples, 0.11%)</title><rect x="588.1" y="565" width="1.4" height="15.0" fill="rgb(230,62,27)" rx="2" ry="2" />
<text  x="591.13" y="575.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="998.0" y="469" width="0.5" height="15.0" fill="rgb(250,4,10)" rx="2" ry="2" />
<text  x="1001.04" y="479.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (8 samples, 0.15%)</title><rect x="931.3" y="533" width="1.9" height="15.0" fill="rgb(224,151,37)" rx="2" ry="2" />
<text  x="934.35" y="543.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (1 samples, 0.02%)</title><rect x="174.8" y="453" width="0.3" height="15.0" fill="rgb(228,35,27)" rx="2" ry="2" />
<text  x="177.82" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="1039.0" y="405" width="0.4" height="15.0" fill="rgb(209,92,54)" rx="2" ry="2" />
<text  x="1041.97" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (16 samples, 0.31%)</title><rect x="700.7" y="661" width="3.6" height="15.0" fill="rgb(237,156,26)" rx="2" ry="2" />
<text  x="703.73" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="828.7" y="389" width="0.2" height="15.0" fill="rgb(245,63,44)" rx="2" ry="2" />
<text  x="831.70" y="399.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="107.7" y="581" width="0.2" height="15.0" fill="rgb(230,102,6)" rx="2" ry="2" />
<text  x="110.67" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::~statement_restrictions (7 samples, 0.13%)</title><rect x="672.9" y="629" width="1.6" height="15.0" fill="rgb(242,57,27)" rx="2" ry="2" />
<text  x="675.92" y="639.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="824.9" y="261" width="0.2" height="15.0" fill="rgb(233,126,24)" rx="2" ry="2" />
<text  x="827.85" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="656.0" y="613" width="0.2" height="15.0" fill="rgb(227,130,33)" rx="2" ry="2" />
<text  x="658.96" y="623.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (5 samples, 0.10%)</title><rect x="84.8" y="629" width="1.2" height="15.0" fill="rgb(213,59,27)" rx="2" ry="2" />
<text  x="87.84" y="639.5" ></text>
</g>
<g >
<title>db::schema_tables::read_tables_for_keyspaces (1 samples, 0.02%)</title><rect x="107.4" y="677" width="0.3" height="15.0" fill="rgb(231,129,40)" rx="2" ry="2" />
<text  x="110.45" y="687.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;reader_permit::impl, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%)</title><rect x="1028.3" y="357" width="0.3" height="15.0" fill="rgb(220,9,37)" rx="2" ry="2" />
<text  x="1031.34" y="367.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (6 samples, 0.11%)</title><rect x="1153.8" y="645" width="1.4" height="15.0" fill="rgb(254,171,41)" rx="2" ry="2" />
<text  x="1156.82" y="655.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="1047.6" y="485" width="0.2" height="15.0" fill="rgb(231,95,29)" rx="2" ry="2" />
<text  x="1050.56" y="495.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (1 samples, 0.02%)</title><rect x="1110.6" y="597" width="0.3" height="15.0" fill="rgb(241,193,32)" rx="2" ry="2" />
<text  x="1113.64" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="887.9" y="549" width="0.3" height="15.0" fill="rgb(234,193,38)" rx="2" ry="2" />
<text  x="890.93" y="559.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (3 samples, 0.06%)</title><rect x="17.7" y="789" width="0.7" height="15.0" fill="rgb(213,8,17)" rx="2" ry="2" />
<text  x="20.69" y="799.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (4 samples, 0.08%)</title><rect x="738.0" y="661" width="0.9" height="15.0" fill="rgb(224,181,15)" rx="2" ry="2" />
<text  x="741.03" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (1 samples, 0.02%)</title><rect x="945.8" y="581" width="0.2" height="15.0" fill="rgb(250,57,10)" rx="2" ry="2" />
<text  x="948.82" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="993.1" y="421" width="1.6" height="15.0" fill="rgb(235,42,5)" rx="2" ry="2" />
<text  x="996.07" y="431.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (1 samples, 0.02%)</title><rect x="769.7" y="469" width="0.2" height="15.0" fill="rgb(226,105,27)" rx="2" ry="2" />
<text  x="772.69" y="479.5" ></text>
</g>
<g >
<title>sstables::write (1 samples, 0.02%)</title><rect x="12.9" y="613" width="0.3" height="15.0" fill="rgb(226,104,7)" rx="2" ry="2" />
<text  x="15.94" y="623.5" ></text>
</g>
<g >
<title>partition_slice_builder::build (1 samples, 0.02%)</title><rect x="106.3" y="581" width="0.2" height="15.0" fill="rgb(213,85,5)" rx="2" ry="2" />
<text  x="109.32" y="591.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (2 samples, 0.04%)</title><rect x="549.2" y="389" width="0.5" height="15.0" fill="rgb(242,143,7)" rx="2" ry="2" />
<text  x="552.24" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="840.7" y="533" width="0.7" height="15.0" fill="rgb(240,105,26)" rx="2" ry="2" />
<text  x="843.68" y="543.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%)</title><rect x="438.7" y="405" width="0.2" height="15.0" fill="rgb(236,128,45)" rx="2" ry="2" />
<text  x="441.68" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="649.2" y="613" width="0.2" height="15.0" fill="rgb(243,185,23)" rx="2" ry="2" />
<text  x="652.18" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="459.7" y="469" width="0.2" height="15.0" fill="rgb(248,211,26)" rx="2" ry="2" />
<text  x="462.71" y="479.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="27.6" y="405" width="0.3" height="15.0" fill="rgb(215,173,53)" rx="2" ry="2" />
<text  x="30.64" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (3 samples, 0.06%)</title><rect x="580.0" y="517" width="0.7" height="15.0" fill="rgb(207,132,3)" rx="2" ry="2" />
<text  x="582.99" y="527.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="574.1" y="469" width="0.2" height="15.0" fill="rgb(223,29,20)" rx="2" ry="2" />
<text  x="577.11" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="828.9" y="437" width="0.2" height="15.0" fill="rgb(243,12,42)" rx="2" ry="2" />
<text  x="831.92" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="882.7" y="661" width="0.3" height="15.0" fill="rgb(220,105,5)" rx="2" ry="2" />
<text  x="885.73" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="62.9" y="341" width="0.2" height="15.0" fill="rgb(244,111,41)" rx="2" ry="2" />
<text  x="65.91" y="351.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (766 samples, 14.68%)</title><rect x="163.5" y="565" width="173.2" height="15.0" fill="rgb(234,48,34)" rx="2" ry="2" />
<text  x="166.52" y="575.5" >merging_reader&lt;mutatio..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="49.1" y="357" width="0.5" height="15.0" fill="rgb(239,10,32)" rx="2" ry="2" />
<text  x="52.11" y="367.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (11 samples, 0.21%)</title><rect x="1111.1" y="581" width="2.5" height="15.0" fill="rgb(239,182,47)" rx="2" ry="2" />
<text  x="1114.09" y="591.5" ></text>
</g>
<g >
<title>_dl_runtime_resolve_xsavec (1 samples, 0.02%)</title><rect x="12.7" y="773" width="0.2" height="15.0" fill="rgb(237,60,24)" rx="2" ry="2" />
<text  x="15.71" y="783.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (6 samples, 0.11%)</title><rect x="616.6" y="549" width="1.4" height="15.0" fill="rgb(233,229,54)" rx="2" ry="2" />
<text  x="619.62" y="559.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (12 samples, 0.23%)</title><rect x="430.3" y="325" width="2.7" height="15.0" fill="rgb(206,95,22)" rx="2" ry="2" />
<text  x="433.31" y="335.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (1 samples, 0.02%)</title><rect x="87.8" y="693" width="0.2" height="15.0" fill="rgb(230,121,44)" rx="2" ry="2" />
<text  x="90.78" y="703.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="883.0" y="597" width="0.2" height="15.0" fill="rgb(209,68,26)" rx="2" ry="2" />
<text  x="885.96" y="607.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (15 samples, 0.29%)</title><rect x="821.9" y="341" width="3.4" height="15.0" fill="rgb(226,193,20)" rx="2" ry="2" />
<text  x="824.91" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (2 samples, 0.04%)</title><rect x="38.9" y="469" width="0.5" height="15.0" fill="rgb(238,195,33)" rx="2" ry="2" />
<text  x="41.94" y="479.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%)</title><rect x="852.9" y="597" width="0.9" height="15.0" fill="rgb(245,193,52)" rx="2" ry="2" />
<text  x="855.89" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="41.4" y="469" width="0.3" height="15.0" fill="rgb(251,121,0)" rx="2" ry="2" />
<text  x="44.43" y="479.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (25 samples, 0.48%)</title><rect x="589.7" y="565" width="5.7" height="15.0" fill="rgb(254,195,16)" rx="2" ry="2" />
<text  x="592.71" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%)</title><rect x="804.3" y="501" width="0.2" height="15.0" fill="rgb(247,94,49)" rx="2" ry="2" />
<text  x="807.28" y="511.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::mark (1 samples, 0.02%)</title><rect x="37.8" y="405" width="0.2" height="15.0" fill="rgb(242,139,25)" rx="2" ry="2" />
<text  x="40.81" y="415.5" ></text>
</g>
<g >
<title>ser::tombstone_view::operator tombstone (1 samples, 0.02%)</title><rect x="109.0" y="469" width="0.3" height="15.0" fill="rgb(227,143,39)" rx="2" ry="2" />
<text  x="112.03" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::conjunction::~conjunction (1 samples, 0.02%)</title><rect x="55.0" y="469" width="0.2" height="15.0" fill="rgb(206,182,39)" rx="2" ry="2" />
<text  x="57.99" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (497 samples, 9.52%)</title><rect x="346.9" y="485" width="112.4" height="15.0" fill="rgb(221,189,50)" rx="2" ry="2" />
<text  x="349.88" y="495.5" >std::__invoke..</text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (3 samples, 0.06%)</title><rect x="63.4" y="469" width="0.6" height="15.0" fill="rgb(216,206,40)" rx="2" ry="2" />
<text  x="66.36" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="471.2" y="581" width="0.3" height="15.0" fill="rgb(253,100,51)" rx="2" ry="2" />
<text  x="474.24" y="591.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (1 samples, 0.02%)</title><rect x="200.6" y="421" width="0.2" height="15.0" fill="rgb(215,38,43)" rx="2" ry="2" />
<text  x="203.60" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (2 samples, 0.04%)</title><rect x="495.4" y="453" width="0.5" height="15.0" fill="rgb(242,10,40)" rx="2" ry="2" />
<text  x="498.43" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="783.0" y="501" width="0.7" height="15.0" fill="rgb(226,27,34)" rx="2" ry="2" />
<text  x="786.03" y="511.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="41.4" y="341" width="0.3" height="15.0" fill="rgb(236,120,38)" rx="2" ry="2" />
<text  x="44.43" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cql3::expr::expression&gt;::allocate (1 samples, 0.02%)</title><rect x="75.3" y="421" width="0.3" height="15.0" fill="rgb(248,111,43)" rx="2" ry="2" />
<text  x="78.34" y="431.5" ></text>
</g>
<g >
<title>schema::column_at (5 samples, 0.10%)</title><rect x="254.9" y="309" width="1.1" height="15.0" fill="rgb(226,160,42)" rx="2" ry="2" />
<text  x="257.86" y="319.5" ></text>
</g>
<g >
<title>service::storage_service::join_token_ring (3 samples, 0.06%)</title><rect x="19.9" y="645" width="0.7" height="15.0" fill="rgb(240,126,39)" rx="2" ry="2" />
<text  x="22.95" y="655.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="672.2" y="661" width="0.3" height="15.0" fill="rgb(210,96,31)" rx="2" ry="2" />
<text  x="675.24" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="778.3" y="549" width="0.2" height="15.0" fill="rgb(235,143,11)" rx="2" ry="2" />
<text  x="781.28" y="559.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (3 samples, 0.06%)</title><rect x="208.3" y="389" width="0.7" height="15.0" fill="rgb(233,154,51)" rx="2" ry="2" />
<text  x="211.29" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.10%)</title><rect x="222.5" y="325" width="1.2" height="15.0" fill="rgb(242,43,15)" rx="2" ry="2" />
<text  x="225.53" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.13%)</title><rect x="45.5" y="501" width="1.6" height="15.0" fill="rgb(214,160,30)" rx="2" ry="2" />
<text  x="48.50" y="511.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (2 samples, 0.04%)</title><rect x="1189.5" y="773" width="0.5" height="15.0" fill="rgb(209,32,31)" rx="2" ry="2" />
<text  x="1192.55" y="783.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (23 samples, 0.44%)</title><rect x="1105.0" y="597" width="5.2" height="15.0" fill="rgb(226,7,0)" rx="2" ry="2" />
<text  x="1107.99" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="766.7" y="533" width="0.3" height="15.0" fill="rgb(232,109,18)" rx="2" ry="2" />
<text  x="769.75" y="543.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="99.3" y="629" width="0.2" height="15.0" fill="rgb(208,166,13)" rx="2" ry="2" />
<text  x="102.31" y="639.5" ></text>
</g>
<g >
<title>service::storage_proxy::remove_response_handler_entry (1 samples, 0.02%)</title><rect x="740.1" y="661" width="0.2" height="15.0" fill="rgb(214,115,15)" rx="2" ry="2" />
<text  x="743.07" y="671.5" ></text>
</g>
<g >
<title>std::operator- (2 samples, 0.04%)</title><rect x="45.7" y="341" width="0.5" height="15.0" fill="rgb(238,73,26)" rx="2" ry="2" />
<text  x="48.72" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::has_eq_null (1 samples, 0.02%)</title><rect x="886.8" y="533" width="0.2" height="15.0" fill="rgb(252,95,3)" rx="2" ry="2" />
<text  x="889.80" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="154.2" y="597" width="0.5" height="15.0" fill="rgb(253,183,14)" rx="2" ry="2" />
<text  x="157.25" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="86.4" y="661" width="0.2" height="15.0" fill="rgb(211,137,50)" rx="2" ry="2" />
<text  x="89.42" y="671.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="41.2" y="357" width="0.2" height="15.0" fill="rgb(247,192,42)" rx="2" ry="2" />
<text  x="44.20" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="714.1" y="629" width="0.2" height="15.0" fill="rgb(243,6,13)" rx="2" ry="2" />
<text  x="717.07" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="62.0" y="373" width="0.2" height="15.0" fill="rgb(208,35,20)" rx="2" ry="2" />
<text  x="65.00" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;rows_entry, alloc_strategy_deleter&lt;rows_entry&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="19.9" y="533" width="0.3" height="15.0" fill="rgb(235,14,12)" rx="2" ry="2" />
<text  x="22.95" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="812.2" y="437" width="0.2" height="15.0" fill="rgb(253,198,20)" rx="2" ry="2" />
<text  x="815.19" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="41.2" y="341" width="0.2" height="15.0" fill="rgb(209,130,34)" rx="2" ry="2" />
<text  x="44.20" y="351.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (3 samples, 0.06%)</title><rect x="571.6" y="437" width="0.7" height="15.0" fill="rgb(245,210,14)" rx="2" ry="2" />
<text  x="574.62" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="63.6" y="421" width="0.4" height="15.0" fill="rgb(219,182,1)" rx="2" ry="2" />
<text  x="66.58" y="431.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="568.5" y="501" width="0.2" height="15.0" fill="rgb(239,158,9)" rx="2" ry="2" />
<text  x="571.46" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="98.4" y="629" width="0.2" height="15.0" fill="rgb(228,118,47)" rx="2" ry="2" />
<text  x="101.40" y="639.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="537.0" y="501" width="0.3" height="15.0" fill="rgb(239,181,8)" rx="2" ry="2" />
<text  x="540.03" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="871.7" y="581" width="0.2" height="15.0" fill="rgb(220,97,20)" rx="2" ry="2" />
<text  x="874.66" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="54.3" y="389" width="0.5" height="15.0" fill="rgb(233,38,22)" rx="2" ry="2" />
<text  x="57.32" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (3 samples, 0.06%)</title><rect x="193.4" y="453" width="0.6" height="15.0" fill="rgb(229,187,8)" rx="2" ry="2" />
<text  x="196.36" y="463.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="23.6" y="533" width="0.2" height="15.0" fill="rgb(227,208,14)" rx="2" ry="2" />
<text  x="26.57" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (9 samples, 0.17%)</title><rect x="1003.9" y="421" width="2.1" height="15.0" fill="rgb(243,102,46)" rx="2" ry="2" />
<text  x="1006.92" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%)</title><rect x="631.8" y="565" width="0.4" height="15.0" fill="rgb(245,224,30)" rx="2" ry="2" />
<text  x="634.77" y="575.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (5 samples, 0.10%)</title><rect x="345.1" y="485" width="1.1" height="15.0" fill="rgb(206,88,33)" rx="2" ry="2" />
<text  x="348.08" y="495.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (1 samples, 0.02%)</title><rect x="1032.9" y="437" width="0.2" height="15.0" fill="rgb(253,125,28)" rx="2" ry="2" />
<text  x="1035.86" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="62.0" y="421" width="0.2" height="15.0" fill="rgb(205,220,33)" rx="2" ry="2" />
<text  x="65.00" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%)</title><rect x="994.9" y="421" width="0.4" height="15.0" fill="rgb(227,139,47)" rx="2" ry="2" />
<text  x="997.88" y="431.5" ></text>
</g>
<g >
<title>__tls_init (3 samples, 0.06%)</title><rect x="536.4" y="469" width="0.6" height="15.0" fill="rgb(244,201,16)" rx="2" ry="2" />
<text  x="539.35" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="813.8" y="405" width="0.2" height="15.0" fill="rgb(250,84,30)" rx="2" ry="2" />
<text  x="816.77" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (2 samples, 0.04%)</title><rect x="903.1" y="597" width="0.4" height="15.0" fill="rgb(247,113,34)" rx="2" ry="2" />
<text  x="906.08" y="607.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (1 samples, 0.02%)</title><rect x="636.5" y="581" width="0.2" height="15.0" fill="rgb(252,213,8)" rx="2" ry="2" />
<text  x="639.51" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.02%)</title><rect x="76.0" y="453" width="0.2" height="15.0" fill="rgb(215,154,50)" rx="2" ry="2" />
<text  x="79.02" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (6 samples, 0.11%)</title><rect x="1166.9" y="677" width="1.4" height="15.0" fill="rgb(228,91,12)" rx="2" ry="2" />
<text  x="1169.94" y="687.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (13 samples, 0.25%)</title><rect x="302.8" y="405" width="2.9" height="15.0" fill="rgb(248,195,35)" rx="2" ry="2" />
<text  x="305.80" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%)</title><rect x="774.2" y="565" width="0.9" height="15.0" fill="rgb(230,218,28)" rx="2" ry="2" />
<text  x="777.21" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (2 samples, 0.04%)</title><rect x="1121.0" y="373" width="0.5" height="15.0" fill="rgb(211,79,27)" rx="2" ry="2" />
<text  x="1124.04" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="63.6" y="357" width="0.4" height="15.0" fill="rgb(229,5,54)" rx="2" ry="2" />
<text  x="66.58" y="367.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_all_endpoints (1 samples, 0.02%)</title><rect x="20.4" y="565" width="0.2" height="15.0" fill="rgb(217,29,24)" rx="2" ry="2" />
<text  x="23.40" y="575.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="270.9" y="293" width="0.5" height="15.0" fill="rgb(210,227,6)" rx="2" ry="2" />
<text  x="273.92" y="303.5" ></text>
</g>
<g >
<title>ser::after_column__id&lt;bytes_ostream&gt;::after_column__id (1 samples, 0.02%)</title><rect x="1129.9" y="261" width="0.2" height="15.0" fill="rgb(247,3,7)" rx="2" ry="2" />
<text  x="1132.86" y="271.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (63 samples, 1.21%)</title><rect x="761.3" y="597" width="14.3" height="15.0" fill="rgb(236,179,8)" rx="2" ry="2" />
<text  x="764.32" y="607.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (1 samples, 0.02%)</title><rect x="77.8" y="533" width="0.3" height="15.0" fill="rgb(207,221,32)" rx="2" ry="2" />
<text  x="80.83" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="45.0" y="405" width="0.3" height="15.0" fill="rgb(206,190,39)" rx="2" ry="2" />
<text  x="48.05" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="83.5" y="389" width="0.2" height="15.0" fill="rgb(235,199,40)" rx="2" ry="2" />
<text  x="86.48" y="399.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (1 samples, 0.02%)</title><rect x="972.5" y="533" width="0.2" height="15.0" fill="rgb(208,202,12)" rx="2" ry="2" />
<text  x="975.49" y="543.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="740.3" y="549" width="0.2" height="15.0" fill="rgb(214,156,17)" rx="2" ry="2" />
<text  x="743.29" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::restriction::restriction (1 samples, 0.02%)</title><rect x="74.0" y="517" width="0.2" height="15.0" fill="rgb(235,77,6)" rx="2" ry="2" />
<text  x="76.99" y="527.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%)</title><rect x="82.1" y="613" width="0.3" height="15.0" fill="rgb(213,132,37)" rx="2" ry="2" />
<text  x="85.12" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="61.8" y="373" width="0.2" height="15.0" fill="rgb(213,227,42)" rx="2" ry="2" />
<text  x="64.78" y="383.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="62.0" y="341" width="0.2" height="15.0" fill="rgb(233,29,41)" rx="2" ry="2" />
<text  x="65.00" y="351.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (29 samples, 0.56%)</title><rect x="526.0" y="405" width="6.5" height="15.0" fill="rgb(252,100,37)" rx="2" ry="2" />
<text  x="528.95" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="503.8" y="453" width="0.2" height="15.0" fill="rgb(244,123,46)" rx="2" ry="2" />
<text  x="506.80" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="586.5" y="581" width="0.3" height="15.0" fill="rgb(233,4,32)" rx="2" ry="2" />
<text  x="589.55" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="102.7" y="645" width="0.5" height="15.0" fill="rgb(223,193,15)" rx="2" ry="2" />
<text  x="105.70" y="655.5" ></text>
</g>
<g >
<title>query::querier_base::close (126 samples, 2.41%)</title><rect x="597.9" y="613" width="28.4" height="15.0" fill="rgb(208,213,52)" rx="2" ry="2" />
<text  x="600.85" y="623.5" >qu..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (65 samples, 1.25%)</title><rect x="286.7" y="437" width="14.7" height="15.0" fill="rgb(209,198,0)" rx="2" ry="2" />
<text  x="289.74" y="447.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="1087.8" y="565" width="0.5" height="15.0" fill="rgb(209,137,5)" rx="2" ry="2" />
<text  x="1090.80" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="913.9" y="485" width="0.3" height="15.0" fill="rgb(233,154,50)" rx="2" ry="2" />
<text  x="916.94" y="495.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="45.5" y="469" width="0.2" height="15.0" fill="rgb(252,79,28)" rx="2" ry="2" />
<text  x="48.50" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (22 samples, 0.42%)</title><rect x="590.4" y="549" width="5.0" height="15.0" fill="rgb(229,202,26)" rx="2" ry="2" />
<text  x="593.39" y="559.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="740.5" y="645" width="0.2" height="15.0" fill="rgb(225,169,39)" rx="2" ry="2" />
<text  x="743.52" y="655.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="705.5" y="661" width="1.1" height="15.0" fill="rgb(217,117,16)" rx="2" ry="2" />
<text  x="708.47" y="671.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::~BaseRecognizer (1 samples, 0.02%)</title><rect x="24.5" y="565" width="0.2" height="15.0" fill="rgb(211,179,2)" rx="2" ry="2" />
<text  x="27.47" y="575.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="870.5" y="501" width="0.3" height="15.0" fill="rgb(232,9,9)" rx="2" ry="2" />
<text  x="873.53" y="511.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (81 samples, 1.55%)</title><rect x="230.4" y="293" width="18.4" height="15.0" fill="rgb(235,150,10)" rx="2" ry="2" />
<text  x="233.44" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="528.2" y="357" width="0.5" height="15.0" fill="rgb(234,228,13)" rx="2" ry="2" />
<text  x="531.21" y="367.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (2 samples, 0.04%)</title><rect x="296.2" y="389" width="0.5" height="15.0" fill="rgb(232,157,25)" rx="2" ry="2" />
<text  x="299.24" y="399.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (205 samples, 3.93%)</title><rect x="23.3" y="613" width="46.4" height="15.0" fill="rgb(214,46,14)" rx="2" ry="2" />
<text  x="26.34" y="623.5" >cql3..</text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="290.1" y="373" width="0.5" height="15.0" fill="rgb(238,186,4)" rx="2" ry="2" />
<text  x="293.13" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="46.9" y="309" width="0.2" height="15.0" fill="rgb(236,210,51)" rx="2" ry="2" />
<text  x="49.85" y="319.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (13 samples, 0.25%)</title><rect x="888.8" y="501" width="3.0" height="15.0" fill="rgb(246,160,17)" rx="2" ry="2" />
<text  x="891.84" y="511.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (7 samples, 0.13%)</title><rect x="570.9" y="485" width="1.6" height="15.0" fill="rgb(235,163,13)" rx="2" ry="2" />
<text  x="573.95" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (3 samples, 0.06%)</title><rect x="621.1" y="517" width="0.7" height="15.0" fill="rgb(207,220,23)" rx="2" ry="2" />
<text  x="624.14" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_erase_at_end (1 samples, 0.02%)</title><rect x="23.3" y="565" width="0.3" height="15.0" fill="rgb(231,17,21)" rx="2" ry="2" />
<text  x="26.34" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1020.4" y="293" width="0.3" height="15.0" fill="rgb(235,23,39)" rx="2" ry="2" />
<text  x="1023.43" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="173.5" y="469" width="0.2" height="15.0" fill="rgb(217,163,11)" rx="2" ry="2" />
<text  x="176.47" y="479.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (1 samples, 0.02%)</title><rect x="132.5" y="597" width="0.3" height="15.0" fill="rgb(230,220,21)" rx="2" ry="2" />
<text  x="135.54" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="62.7" y="485" width="0.2" height="15.0" fill="rgb(215,116,21)" rx="2" ry="2" />
<text  x="65.68" y="495.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (1 samples, 0.02%)</title><rect x="1061.4" y="517" width="0.2" height="15.0" fill="rgb(217,194,21)" rx="2" ry="2" />
<text  x="1064.35" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="490.9" y="437" width="0.2" height="15.0" fill="rgb(226,117,1)" rx="2" ry="2" />
<text  x="493.91" y="447.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="620.2" y="533" width="0.7" height="15.0" fill="rgb(238,4,26)" rx="2" ry="2" />
<text  x="623.24" y="543.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::key (1 samples, 0.02%)</title><rect x="1121.5" y="405" width="0.2" height="15.0" fill="rgb(206,195,45)" rx="2" ry="2" />
<text  x="1124.49" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="41.4" y="357" width="0.3" height="15.0" fill="rgb(242,37,10)" rx="2" ry="2" />
<text  x="44.43" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="40.7" y="405" width="0.3" height="15.0" fill="rgb(208,17,54)" rx="2" ry="2" />
<text  x="43.75" y="415.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%)</title><rect x="1028.8" y="421" width="0.2" height="15.0" fill="rgb(231,226,48)" rx="2" ry="2" />
<text  x="1031.79" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::semaphore_units&lt;db::commitlog::segment_manager::request_controller_timeout_exception_factory, seastar::lowres_clock&gt; &gt;::awaiter (1 samples, 0.02%)</title><rect x="1124.4" y="469" width="0.3" height="15.0" fill="rgb(206,211,23)" rx="2" ry="2" />
<text  x="1127.43" y="479.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (2 samples, 0.04%)</title><rect x="11.1" y="757" width="0.5" height="15.0" fill="rgb(230,26,46)" rx="2" ry="2" />
<text  x="14.13" y="767.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (2 samples, 0.04%)</title><rect x="1094.8" y="565" width="0.5" height="15.0" fill="rgb(244,197,15)" rx="2" ry="2" />
<text  x="1097.81" y="575.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="561.7" y="453" width="1.1" height="15.0" fill="rgb(210,54,53)" rx="2" ry="2" />
<text  x="564.68" y="463.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="862.4" y="517" width="0.2" height="15.0" fill="rgb(227,165,40)" rx="2" ry="2" />
<text  x="865.39" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="61.8" y="453" width="0.2" height="15.0" fill="rgb(222,21,6)" rx="2" ry="2" />
<text  x="64.78" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restriction, false&gt;::make&lt;column_definition const&amp;&gt; (3 samples, 0.06%)</title><rect x="74.0" y="533" width="0.7" height="15.0" fill="rgb(210,55,50)" rx="2" ry="2" />
<text  x="76.99" y="543.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::complete (1 samples, 0.02%)</title><rect x="1166.7" y="661" width="0.2" height="15.0" fill="rgb(220,204,1)" rx="2" ry="2" />
<text  x="1169.71" y="671.5" ></text>
</g>
<g >
<title>db::schema_tables::feed_hash_for_schema_digest (1 samples, 0.02%)</title><rect x="106.1" y="661" width="0.2" height="15.0" fill="rgb(213,40,42)" rx="2" ry="2" />
<text  x="109.09" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (2 samples, 0.04%)</title><rect x="1024.5" y="405" width="0.4" height="15.0" fill="rgb(220,59,1)" rx="2" ry="2" />
<text  x="1027.50" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="613.0" y="469" width="0.2" height="15.0" fill="rgb(246,43,43)" rx="2" ry="2" />
<text  x="616.00" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (8 samples, 0.15%)</title><rect x="1084.6" y="565" width="1.8" height="15.0" fill="rgb(223,122,1)" rx="2" ry="2" />
<text  x="1087.64" y="575.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (2 samples, 0.04%)</title><rect x="979.1" y="533" width="0.4" height="15.0" fill="rgb(253,155,41)" rx="2" ry="2" />
<text  x="982.05" y="543.5" ></text>
</g>
<g >
<title>seastar::smp::configure (1 samples, 0.02%)</title><rect x="1168.7" y="725" width="0.3" height="15.0" fill="rgb(248,181,16)" rx="2" ry="2" />
<text  x="1171.75" y="735.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::make_temporary (2 samples, 0.04%)</title><rect x="891.3" y="469" width="0.5" height="15.0" fill="rgb(244,68,37)" rx="2" ry="2" />
<text  x="894.33" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (9 samples, 0.17%)</title><rect x="678.1" y="629" width="2.1" height="15.0" fill="rgb(213,21,51)" rx="2" ry="2" />
<text  x="681.12" y="639.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="923.9" y="501" width="0.2" height="15.0" fill="rgb(224,53,29)" rx="2" ry="2" />
<text  x="926.88" y="511.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (4 samples, 0.08%)</title><rect x="603.7" y="501" width="0.9" height="15.0" fill="rgb(228,71,45)" rx="2" ry="2" />
<text  x="606.73" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="828.7" y="373" width="0.2" height="15.0" fill="rgb(240,204,31)" rx="2" ry="2" />
<text  x="831.70" y="383.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (1 samples, 0.02%)</title><rect x="355.7" y="389" width="0.2" height="15.0" fill="rgb(216,24,13)" rx="2" ry="2" />
<text  x="358.70" y="399.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (3 samples, 0.06%)</title><rect x="756.8" y="469" width="0.7" height="15.0" fill="rgb(251,12,38)" rx="2" ry="2" />
<text  x="759.80" y="479.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="21.5" y="661" width="0.5" height="15.0" fill="rgb(224,64,34)" rx="2" ry="2" />
<text  x="24.53" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="889.3" y="405" width="0.2" height="15.0" fill="rgb(218,29,50)" rx="2" ry="2" />
<text  x="892.29" y="415.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="52.3" y="389" width="0.2" height="15.0" fill="rgb(227,24,35)" rx="2" ry="2" />
<text  x="55.28" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="334.9" y="533" width="0.2" height="15.0" fill="rgb(227,59,2)" rx="2" ry="2" />
<text  x="337.90" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="310.9" y="437" width="0.3" height="15.0" fill="rgb(206,184,41)" rx="2" ry="2" />
<text  x="313.94" y="447.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="1049.4" y="437" width="0.2" height="15.0" fill="rgb(252,142,19)" rx="2" ry="2" />
<text  x="1052.37" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="456.1" y="421" width="0.2" height="15.0" fill="rgb(222,20,14)" rx="2" ry="2" />
<text  x="459.09" y="431.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (4 samples, 0.08%)</title><rect x="437.8" y="389" width="0.9" height="15.0" fill="rgb(244,69,54)" rx="2" ry="2" />
<text  x="440.78" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (2 samples, 0.04%)</title><rect x="112.0" y="661" width="0.4" height="15.0" fill="rgb(217,189,13)" rx="2" ry="2" />
<text  x="114.97" y="671.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (11 samples, 0.21%)</title><rect x="1128.0" y="341" width="2.5" height="15.0" fill="rgb(242,23,32)" rx="2" ry="2" />
<text  x="1131.05" y="351.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (2 samples, 0.04%)</title><rect x="1132.8" y="469" width="0.4" height="15.0" fill="rgb(228,70,13)" rx="2" ry="2" />
<text  x="1135.80" y="479.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (4 samples, 0.08%)</title><rect x="354.8" y="389" width="0.9" height="15.0" fill="rgb(211,206,1)" rx="2" ry="2" />
<text  x="357.80" y="399.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple (1 samples, 0.02%)</title><rect x="53.6" y="261" width="0.3" height="15.0" fill="rgb(213,152,37)" rx="2" ry="2" />
<text  x="56.64" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="644.9" y="613" width="0.2" height="15.0" fill="rgb(226,85,39)" rx="2" ry="2" />
<text  x="647.88" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="40.7" y="437" width="0.3" height="15.0" fill="rgb(249,161,8)" rx="2" ry="2" />
<text  x="43.75" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="616.8" y="517" width="0.3" height="15.0" fill="rgb(218,200,51)" rx="2" ry="2" />
<text  x="619.84" y="527.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="55.9" y="437" width="0.2" height="15.0" fill="rgb(222,218,35)" rx="2" ry="2" />
<text  x="58.90" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="310.7" y="437" width="0.2" height="15.0" fill="rgb(227,200,33)" rx="2" ry="2" />
<text  x="313.71" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1074.5" y="453" width="0.4" height="15.0" fill="rgb(210,17,24)" rx="2" ry="2" />
<text  x="1077.46" y="463.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="477.6" y="533" width="0.2" height="15.0" fill="rgb(210,95,43)" rx="2" ry="2" />
<text  x="480.57" y="543.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (2 samples, 0.04%)</title><rect x="951.7" y="581" width="0.4" height="15.0" fill="rgb(230,155,54)" rx="2" ry="2" />
<text  x="954.69" y="591.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (1 samples, 0.02%)</title><rect x="107.9" y="613" width="0.2" height="15.0" fill="rgb(235,184,22)" rx="2" ry="2" />
<text  x="110.90" y="623.5" ></text>
</g>
<g >
<title>dht::tri_compare (2 samples, 0.04%)</title><rect x="532.5" y="453" width="0.5" height="15.0" fill="rgb(246,34,49)" rx="2" ry="2" />
<text  x="535.51" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="852.7" y="597" width="0.2" height="15.0" fill="rgb(248,224,26)" rx="2" ry="2" />
<text  x="855.66" y="607.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="45.5" y="453" width="0.2" height="15.0" fill="rgb(238,160,39)" rx="2" ry="2" />
<text  x="48.50" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (13 samples, 0.25%)</title><rect x="231.6" y="277" width="2.9" height="15.0" fill="rgb(235,61,15)" rx="2" ry="2" />
<text  x="234.58" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (2 samples, 0.04%)</title><rect x="951.2" y="581" width="0.5" height="15.0" fill="rgb(243,92,10)" rx="2" ry="2" />
<text  x="954.24" y="591.5" ></text>
</g>
<g >
<title>table::make_reader (1 samples, 0.02%)</title><rect x="138.0" y="533" width="0.2" height="15.0" fill="rgb(226,149,32)" rx="2" ry="2" />
<text  x="140.97" y="543.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (7 samples, 0.13%)</title><rect x="80.3" y="597" width="1.6" height="15.0" fill="rgb(227,179,50)" rx="2" ry="2" />
<text  x="83.32" y="607.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="41.4" y="373" width="0.3" height="15.0" fill="rgb(221,147,13)" rx="2" ry="2" />
<text  x="44.43" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::attach_service_level_statement, std::default_delete&lt;cql3::statements::attach_service_level_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::attach_service_level_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="68.1" y="565" width="0.2" height="15.0" fill="rgb(205,166,26)" rx="2" ry="2" />
<text  x="71.11" y="575.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%)</title><rect x="827.8" y="421" width="1.1" height="15.0" fill="rgb(249,174,17)" rx="2" ry="2" />
<text  x="830.79" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%)</title><rect x="890.9" y="453" width="0.2" height="15.0" fill="rgb(242,92,37)" rx="2" ry="2" />
<text  x="893.87" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (45 samples, 0.86%)</title><rect x="727.6" y="645" width="10.2" height="15.0" fill="rgb(250,26,17)" rx="2" ry="2" />
<text  x="730.63" y="655.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%)</title><rect x="82.1" y="597" width="0.3" height="15.0" fill="rgb(222,226,40)" rx="2" ry="2" />
<text  x="85.12" y="607.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (7 samples, 0.13%)</title><rect x="656.6" y="597" width="1.6" height="15.0" fill="rgb(249,99,16)" rx="2" ry="2" />
<text  x="659.64" y="607.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (2 samples, 0.04%)</title><rect x="680.4" y="613" width="0.4" height="15.0" fill="rgb(213,58,13)" rx="2" ry="2" />
<text  x="683.38" y="623.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (37 samples, 0.71%)</title><rect x="70.6" y="629" width="8.4" height="15.0" fill="rgb(239,224,36)" rx="2" ry="2" />
<text  x="73.59" y="639.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="336.3" y="533" width="0.2" height="15.0" fill="rgb(244,138,27)" rx="2" ry="2" />
<text  x="339.26" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="48.2" y="389" width="0.5" height="15.0" fill="rgb(222,72,30)" rx="2" ry="2" />
<text  x="51.21" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="648.5" y="565" width="0.4" height="15.0" fill="rgb(207,58,49)" rx="2" ry="2" />
<text  x="651.50" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::future (1 samples, 0.02%)</title><rect x="982.4" y="517" width="0.3" height="15.0" fill="rgb(223,40,35)" rx="2" ry="2" />
<text  x="985.44" y="527.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="81.2" y="453" width="0.2" height="15.0" fill="rgb(206,43,0)" rx="2" ry="2" />
<text  x="84.22" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (2 samples, 0.04%)</title><rect x="1040.8" y="469" width="0.4" height="15.0" fill="rgb(243,102,23)" rx="2" ry="2" />
<text  x="1043.78" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="346.2" y="485" width="0.2" height="15.0" fill="rgb(232,50,2)" rx="2" ry="2" />
<text  x="349.21" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (9 samples, 0.17%)</title><rect x="1037.6" y="437" width="2.0" height="15.0" fill="rgb(233,5,49)" rx="2" ry="2" />
<text  x="1040.61" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (2 samples, 0.04%)</title><rect x="885.0" y="565" width="0.4" height="15.0" fill="rgb(216,125,9)" rx="2" ry="2" />
<text  x="888.00" y="575.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (2 samples, 0.04%)</title><rect x="211.7" y="373" width="0.4" height="15.0" fill="rgb(214,214,35)" rx="2" ry="2" />
<text  x="214.68" y="383.5" ></text>
</g>
<g >
<title>logalloc::segment::record_alloc (1 samples, 0.02%)</title><rect x="18.8" y="661" width="0.2" height="15.0" fill="rgb(231,202,32)" rx="2" ry="2" />
<text  x="21.82" y="671.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (4 samples, 0.08%)</title><rect x="870.8" y="517" width="0.9" height="15.0" fill="rgb(230,227,30)" rx="2" ry="2" />
<text  x="873.75" y="527.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (3 samples, 0.06%)</title><rect x="38.7" y="485" width="0.7" height="15.0" fill="rgb(227,146,46)" rx="2" ry="2" />
<text  x="41.71" y="495.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, clustering_key_prefix const&amp;&gt; (1 samples, 0.02%)</title><rect x="890.2" y="437" width="0.2" height="15.0" fill="rgb(250,92,54)" rx="2" ry="2" />
<text  x="893.20" y="447.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (13 samples, 0.25%)</title><rect x="987.6" y="469" width="3.0" height="15.0" fill="rgb(210,168,39)" rx="2" ry="2" />
<text  x="990.64" y="479.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%)</title><rect x="956.4" y="581" width="1.4" height="15.0" fill="rgb(243,168,25)" rx="2" ry="2" />
<text  x="959.44" y="591.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%)</title><rect x="209.2" y="389" width="2.3" height="15.0" fill="rgb(227,36,47)" rx="2" ry="2" />
<text  x="212.19" y="399.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (17 samples, 0.33%)</title><rect x="13.8" y="789" width="3.9" height="15.0" fill="rgb(205,29,11)" rx="2" ry="2" />
<text  x="16.84" y="799.5" ></text>
</g>
<g >
<title>database::apply (1 samples, 0.02%)</title><rect x="1126.9" y="341" width="0.2" height="15.0" fill="rgb(209,228,52)" rx="2" ry="2" />
<text  x="1129.92" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (11 samples, 0.21%)</title><rect x="347.8" y="469" width="2.5" height="15.0" fill="rgb(215,124,20)" rx="2" ry="2" />
<text  x="350.79" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="70.4" y="565" width="0.2" height="15.0" fill="rgb(242,202,21)" rx="2" ry="2" />
<text  x="73.37" y="575.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (1 samples, 0.02%)</title><rect x="1124.7" y="501" width="0.2" height="15.0" fill="rgb(237,205,3)" rx="2" ry="2" />
<text  x="1127.66" y="511.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="72.6" y="549" width="0.3" height="15.0" fill="rgb(241,202,4)" rx="2" ry="2" />
<text  x="75.63" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::get_deleter (1 samples, 0.02%)</title><rect x="60.9" y="469" width="0.2" height="15.0" fill="rgb(208,47,10)" rx="2" ry="2" />
<text  x="63.87" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="982.7" y="453" width="1.1" height="15.0" fill="rgb(244,123,34)" rx="2" ry="2" />
<text  x="985.67" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="42.1" y="469" width="0.2" height="15.0" fill="rgb(207,224,54)" rx="2" ry="2" />
<text  x="45.11" y="479.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="300.3" y="405" width="0.2" height="15.0" fill="rgb(245,27,7)" rx="2" ry="2" />
<text  x="303.31" y="415.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (18 samples, 0.34%)</title><rect x="292.2" y="389" width="4.0" height="15.0" fill="rgb(253,181,29)" rx="2" ry="2" />
<text  x="295.17" y="399.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (4,785 samples, 91.68%)</title><rect x="87.1" y="741" width="1081.9" height="15.0" fill="rgb(250,111,37)" rx="2" ry="2" />
<text  x="90.10" y="751.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (13 samples, 0.25%)</title><rect x="260.7" y="293" width="3.0" height="15.0" fill="rgb(239,82,41)" rx="2" ry="2" />
<text  x="263.74" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="43.9" y="453" width="0.2" height="15.0" fill="rgb(210,27,2)" rx="2" ry="2" />
<text  x="46.91" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="720.8" y="629" width="0.3" height="15.0" fill="rgb(235,18,3)" rx="2" ry="2" />
<text  x="723.85" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="48.2" y="341" width="0.5" height="15.0" fill="rgb(249,224,23)" rx="2" ry="2" />
<text  x="51.21" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="96.4" y="661" width="0.2" height="15.0" fill="rgb(253,179,0)" rx="2" ry="2" />
<text  x="99.37" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="842.3" y="469" width="0.2" height="15.0" fill="rgb(232,57,3)" rx="2" ry="2" />
<text  x="845.26" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="466.9" y="533" width="0.7" height="15.0" fill="rgb(218,27,10)" rx="2" ry="2" />
<text  x="469.94" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (4 samples, 0.08%)</title><rect x="299.0" y="405" width="0.9" height="15.0" fill="rgb(229,16,51)" rx="2" ry="2" />
<text  x="301.95" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="789.4" y="581" width="0.2" height="15.0" fill="rgb(247,76,54)" rx="2" ry="2" />
<text  x="792.36" y="591.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="740.3" y="565" width="0.2" height="15.0" fill="rgb(224,74,21)" rx="2" ry="2" />
<text  x="743.29" y="575.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%)</title><rect x="890.2" y="453" width="0.2" height="15.0" fill="rgb(224,130,29)" rx="2" ry="2" />
<text  x="893.20" y="463.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::raw::delete_statement*, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="67.0" y="517" width="0.2" height="15.0" fill="rgb(222,17,46)" rx="2" ry="2" />
<text  x="69.98" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::selection::simple_selection&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::vector&lt;column_definition const*, std::allocator&lt;column_definition const*&gt; &gt;, std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;, bool&gt; (1 samples, 0.02%)</title><rect x="83.5" y="437" width="0.2" height="15.0" fill="rgb(253,59,43)" rx="2" ry="2" />
<text  x="86.48" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="877.5" y="613" width="0.5" height="15.0" fill="rgb(252,220,44)" rx="2" ry="2" />
<text  x="880.53" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="459.0" y="453" width="0.3" height="15.0" fill="rgb(216,87,37)" rx="2" ry="2" />
<text  x="462.03" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (3 samples, 0.06%)</title><rect x="594.7" y="453" width="0.7" height="15.0" fill="rgb(205,3,11)" rx="2" ry="2" />
<text  x="597.69" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%)</title><rect x="677.4" y="645" width="0.3" height="15.0" fill="rgb(215,73,11)" rx="2" ry="2" />
<text  x="680.44" y="655.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%)</title><rect x="765.8" y="533" width="0.7" height="15.0" fill="rgb(207,113,45)" rx="2" ry="2" />
<text  x="768.84" y="543.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="108.6" y="501" width="0.2" height="15.0" fill="rgb(211,133,27)" rx="2" ry="2" />
<text  x="111.58" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%)</title><rect x="722.4" y="629" width="0.5" height="15.0" fill="rgb(212,178,30)" rx="2" ry="2" />
<text  x="725.43" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="916.4" y="485" width="0.5" height="15.0" fill="rgb(217,219,31)" rx="2" ry="2" />
<text  x="919.42" y="495.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (1 samples, 0.02%)</title><rect x="108.4" y="341" width="0.2" height="15.0" fill="rgb(213,112,29)" rx="2" ry="2" />
<text  x="111.35" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (38 samples, 0.73%)</title><rect x="1052.8" y="517" width="8.6" height="15.0" fill="rgb(232,4,20)" rx="2" ry="2" />
<text  x="1055.76" y="527.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="270.9" y="309" width="0.5" height="15.0" fill="rgb(221,53,9)" rx="2" ry="2" />
<text  x="273.92" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="825.3" y="389" width="0.2" height="15.0" fill="rgb(225,140,39)" rx="2" ry="2" />
<text  x="828.31" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="703.4" y="629" width="0.5" height="15.0" fill="rgb(223,114,26)" rx="2" ry="2" />
<text  x="706.44" y="639.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="19.7" y="581" width="0.2" height="15.0" fill="rgb(249,146,6)" rx="2" ry="2" />
<text  x="22.72" y="591.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (2 samples, 0.04%)</title><rect x="1040.3" y="453" width="0.5" height="15.0" fill="rgb(251,16,51)" rx="2" ry="2" />
<text  x="1043.32" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql3::untyped_result_set&gt; &gt;, cql3::query_processor::execute_paged_internal (1 samples, 0.02%)</title><rect x="671.6" y="677" width="0.2" height="15.0" fill="rgb(233,30,54)" rx="2" ry="2" />
<text  x="674.56" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (4 samples, 0.08%)</title><rect x="641.3" y="613" width="0.9" height="15.0" fill="rgb(243,200,24)" rx="2" ry="2" />
<text  x="644.26" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (6 samples, 0.11%)</title><rect x="874.4" y="549" width="1.3" height="15.0" fill="rgb(229,18,40)" rx="2" ry="2" />
<text  x="877.37" y="559.5" ></text>
</g>
<g >
<title>ser::serializer&lt;utils::UUID&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1119.0" y="389" width="0.2" height="15.0" fill="rgb(251,34,8)" rx="2" ry="2" />
<text  x="1122.01" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="55.2" y="421" width="0.2" height="15.0" fill="rgb(220,181,35)" rx="2" ry="2" />
<text  x="58.22" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="643.1" y="613" width="0.2" height="15.0" fill="rgb(233,132,43)" rx="2" ry="2" />
<text  x="646.07" y="623.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="19.7" y="709" width="0.2" height="15.0" fill="rgb(240,167,44)" rx="2" ry="2" />
<text  x="22.72" y="719.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (14 samples, 0.27%)</title><rect x="185.9" y="421" width="3.2" height="15.0" fill="rgb(208,168,26)" rx="2" ry="2" />
<text  x="188.90" y="431.5" ></text>
</g>
<g >
<title>ser::schema_view::mutations (2 samples, 0.04%)</title><rect x="108.8" y="581" width="0.5" height="15.0" fill="rgb(214,8,13)" rx="2" ry="2" />
<text  x="111.80" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (3 samples, 0.06%)</title><rect x="95.5" y="645" width="0.6" height="15.0" fill="rgb(224,7,4)" rx="2" ry="2" />
<text  x="98.46" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (7 samples, 0.13%)</title><rect x="1150.0" y="629" width="1.6" height="15.0" fill="rgb(229,82,32)" rx="2" ry="2" />
<text  x="1152.98" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="54.3" y="341" width="0.5" height="15.0" fill="rgb(210,216,52)" rx="2" ry="2" />
<text  x="57.32" y="351.5" ></text>
</g>
<g >
<title>sstring_hash::operator (4 samples, 0.08%)</title><rect x="870.8" y="533" width="0.9" height="15.0" fill="rgb(222,151,51)" rx="2" ry="2" />
<text  x="873.75" y="543.5" ></text>
</g>
<g >
<title>timerfd_settime (1 samples, 0.02%)</title><rect x="1168.1" y="613" width="0.2" height="15.0" fill="rgb(231,118,27)" rx="2" ry="2" />
<text  x="1171.07" y="623.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (5 samples, 0.10%)</title><rect x="746.8" y="613" width="1.2" height="15.0" fill="rgb(232,19,26)" rx="2" ry="2" />
<text  x="749.85" y="623.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="816.9" y="309" width="0.5" height="15.0" fill="rgb(250,212,14)" rx="2" ry="2" />
<text  x="819.94" y="319.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="106.8" y="325" width="0.2" height="15.0" fill="rgb(209,23,26)" rx="2" ry="2" />
<text  x="109.77" y="335.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="693.9" y="613" width="0.3" height="15.0" fill="rgb(245,83,24)" rx="2" ry="2" />
<text  x="696.94" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (7 samples, 0.13%)</title><rect x="659.8" y="661" width="1.6" height="15.0" fill="rgb(229,209,30)" rx="2" ry="2" />
<text  x="662.80" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (6 samples, 0.11%)</title><rect x="70.8" y="581" width="1.4" height="15.0" fill="rgb(210,94,37)" rx="2" ry="2" />
<text  x="73.82" y="591.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="1138.4" y="661" width="0.7" height="15.0" fill="rgb(227,24,7)" rx="2" ry="2" />
<text  x="1141.45" y="671.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (2 samples, 0.04%)</title><rect x="22.9" y="661" width="0.4" height="15.0" fill="rgb(224,1,33)" rx="2" ry="2" />
<text  x="25.89" y="671.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (3 samples, 0.06%)</title><rect x="955.8" y="581" width="0.6" height="15.0" fill="rgb(223,46,27)" rx="2" ry="2" />
<text  x="958.76" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (1 samples, 0.02%)</title><rect x="1115.8" y="597" width="0.3" height="15.0" fill="rgb(245,188,22)" rx="2" ry="2" />
<text  x="1118.84" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="19.7" y="613" width="0.2" height="15.0" fill="rgb(205,123,6)" rx="2" ry="2" />
<text  x="22.72" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (3 samples, 0.06%)</title><rect x="794.8" y="517" width="0.7" height="15.0" fill="rgb(233,227,5)" rx="2" ry="2" />
<text  x="797.78" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%)</title><rect x="12.9" y="709" width="0.3" height="15.0" fill="rgb(206,97,50)" rx="2" ry="2" />
<text  x="15.94" y="719.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="581.6" y="501" width="0.4" height="15.0" fill="rgb(218,53,47)" rx="2" ry="2" />
<text  x="584.57" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (15 samples, 0.29%)</title><rect x="302.6" y="421" width="3.4" height="15.0" fill="rgb(245,114,27)" rx="2" ry="2" />
<text  x="305.57" y="431.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="1160.8" y="629" width="0.5" height="15.0" fill="rgb(251,122,44)" rx="2" ry="2" />
<text  x="1163.83" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="870.1" y="549" width="1.6" height="15.0" fill="rgb(233,190,22)" rx="2" ry="2" />
<text  x="873.07" y="559.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (1 samples, 0.02%)</title><rect x="41.0" y="517" width="0.2" height="15.0" fill="rgb(218,38,28)" rx="2" ry="2" />
<text  x="43.98" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="60.4" y="485" width="0.2" height="15.0" fill="rgb(252,145,24)" rx="2" ry="2" />
<text  x="63.42" y="495.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (33 samples, 0.63%)</title><rect x="525.0" y="437" width="7.5" height="15.0" fill="rgb(233,135,11)" rx="2" ry="2" />
<text  x="528.05" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (1 samples, 0.02%)</title><rect x="72.9" y="581" width="0.2" height="15.0" fill="rgb(212,106,21)" rx="2" ry="2" />
<text  x="75.85" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="879.6" y="597" width="0.2" height="15.0" fill="rgb(216,212,35)" rx="2" ry="2" />
<text  x="882.57" y="607.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (3 samples, 0.06%)</title><rect x="106.5" y="501" width="0.7" height="15.0" fill="rgb(242,50,2)" rx="2" ry="2" />
<text  x="109.54" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="64.0" y="453" width="0.3" height="15.0" fill="rgb(226,196,31)" rx="2" ry="2" />
<text  x="67.04" y="463.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,785 samples, 91.68%)</title><rect x="87.1" y="773" width="1081.9" height="15.0" fill="rgb(251,136,47)" rx="2" ry="2" />
<text  x="90.10" y="783.5" >seastar::app_template::run</text>
</g>
<g >
<title>mutation_reader_merger::close (77 samples, 1.48%)</title><rect x="598.5" y="549" width="17.4" height="15.0" fill="rgb(243,95,42)" rx="2" ry="2" />
<text  x="601.53" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (2 samples, 0.04%)</title><rect x="559.0" y="469" width="0.4" height="15.0" fill="rgb(227,38,28)" rx="2" ry="2" />
<text  x="561.96" y="479.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="807.0" y="453" width="1.1" height="15.0" fill="rgb(215,35,22)" rx="2" ry="2" />
<text  x="809.99" y="463.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="740.5" y="437" width="0.2" height="15.0" fill="rgb(212,142,29)" rx="2" ry="2" />
<text  x="743.52" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%)</title><rect x="1105.2" y="565" width="2.3" height="15.0" fill="rgb(248,194,44)" rx="2" ry="2" />
<text  x="1108.21" y="575.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="739.8" y="581" width="0.3" height="15.0" fill="rgb(206,58,17)" rx="2" ry="2" />
<text  x="742.84" y="591.5" ></text>
</g>
<g >
<title>multishard_combining_reader::close (1 samples, 0.02%)</title><rect x="106.5" y="453" width="0.3" height="15.0" fill="rgb(254,198,0)" rx="2" ry="2" />
<text  x="109.54" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="81.7" y="565" width="0.2" height="15.0" fill="rgb(234,49,25)" rx="2" ry="2" />
<text  x="84.67" y="575.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="46.9" y="341" width="0.2" height="15.0" fill="rgb(207,81,15)" rx="2" ry="2" />
<text  x="49.85" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (1 samples, 0.02%)</title><rect x="76.9" y="549" width="0.3" height="15.0" fill="rgb(242,64,1)" rx="2" ry="2" />
<text  x="79.92" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="63.4" y="277" width="0.2" height="15.0" fill="rgb(218,150,1)" rx="2" ry="2" />
<text  x="66.36" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (3 samples, 0.06%)</title><rect x="833.7" y="469" width="0.6" height="15.0" fill="rgb(223,189,49)" rx="2" ry="2" />
<text  x="836.67" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%)</title><rect x="45.7" y="325" width="0.5" height="15.0" fill="rgb(252,128,1)" rx="2" ry="2" />
<text  x="48.72" y="335.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="269.6" y="293" width="0.2" height="15.0" fill="rgb(241,174,51)" rx="2" ry="2" />
<text  x="272.56" y="303.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (80 samples, 1.53%)</title><rect x="598.3" y="565" width="18.1" height="15.0" fill="rgb(236,50,39)" rx="2" ry="2" />
<text  x="601.30" y="575.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="19.7" y="693" width="0.2" height="15.0" fill="rgb(221,176,48)" rx="2" ry="2" />
<text  x="22.72" y="703.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (472 samples, 9.04%)</title><rect x="476.7" y="549" width="106.7" height="15.0" fill="rgb(228,80,49)" rx="2" ry="2" />
<text  x="479.66" y="559.5" >std::_Functio..</text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (7 samples, 0.13%)</title><rect x="661.8" y="661" width="1.6" height="15.0" fill="rgb(208,130,47)" rx="2" ry="2" />
<text  x="664.84" y="671.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%)</title><rect x="764.3" y="485" width="0.2" height="15.0" fill="rgb(222,39,10)" rx="2" ry="2" />
<text  x="767.26" y="495.5" ></text>
</g>
<g >
<title>compound_type&lt; (15 samples, 0.29%)</title><rect x="528.7" y="389" width="3.4" height="15.0" fill="rgb(218,174,31)" rx="2" ry="2" />
<text  x="531.67" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (2 samples, 0.04%)</title><rect x="765.2" y="469" width="0.4" height="15.0" fill="rgb(211,37,37)" rx="2" ry="2" />
<text  x="768.16" y="479.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="57.3" y="389" width="0.2" height="15.0" fill="rgb(221,69,47)" rx="2" ry="2" />
<text  x="60.25" y="399.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="609.6" y="453" width="0.5" height="15.0" fill="rgb(241,198,52)" rx="2" ry="2" />
<text  x="612.61" y="463.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;, std::_Bind_front&lt;bool  (2 samples, 0.04%)</title><rect x="886.6" y="549" width="0.4" height="15.0" fill="rgb(211,83,27)" rx="2" ry="2" />
<text  x="889.58" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_Deque_iterator (1 samples, 0.02%)</title><rect x="24.9" y="421" width="0.2" height="15.0" fill="rgb(226,200,46)" rx="2" ry="2" />
<text  x="27.92" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="585.2" y="581" width="0.2" height="15.0" fill="rgb(247,56,40)" rx="2" ry="2" />
<text  x="588.19" y="591.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (1 samples, 0.02%)</title><rect x="1124.9" y="501" width="0.2" height="15.0" fill="rgb(239,97,2)" rx="2" ry="2" />
<text  x="1127.88" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (3 samples, 0.06%)</title><rect x="496.3" y="437" width="0.7" height="15.0" fill="rgb(247,48,38)" rx="2" ry="2" />
<text  x="499.33" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (62 samples, 1.19%)</title><rect x="1088.3" y="597" width="14.0" height="15.0" fill="rgb(219,182,24)" rx="2" ry="2" />
<text  x="1091.26" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (2 samples, 0.04%)</title><rect x="542.0" y="469" width="0.5" height="15.0" fill="rgb(222,115,39)" rx="2" ry="2" />
<text  x="545.01" y="479.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (1 samples, 0.02%)</title><rect x="84.6" y="533" width="0.2" height="15.0" fill="rgb(218,13,17)" rx="2" ry="2" />
<text  x="87.61" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="891.6" y="437" width="0.2" height="15.0" fill="rgb(230,9,50)" rx="2" ry="2" />
<text  x="894.55" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt; &gt;  (2 samples, 0.04%)</title><rect x="75.3" y="453" width="0.5" height="15.0" fill="rgb(224,175,24)" rx="2" ry="2" />
<text  x="78.34" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="128.5" y="549" width="0.2" height="15.0" fill="rgb(239,176,16)" rx="2" ry="2" />
<text  x="131.47" y="559.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (7 samples, 0.13%)</title><rect x="125.3" y="581" width="1.6" height="15.0" fill="rgb(222,56,36)" rx="2" ry="2" />
<text  x="128.31" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="967.5" y="549" width="0.2" height="15.0" fill="rgb(206,132,6)" rx="2" ry="2" />
<text  x="970.52" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (2 samples, 0.04%)</title><rect x="202.2" y="421" width="0.4" height="15.0" fill="rgb(221,39,13)" rx="2" ry="2" />
<text  x="205.18" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="39.8" y="533" width="0.3" height="15.0" fill="rgb(216,155,22)" rx="2" ry="2" />
<text  x="42.84" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (5 samples, 0.10%)</title><rect x="1048.5" y="469" width="1.1" height="15.0" fill="rgb(205,58,45)" rx="2" ry="2" />
<text  x="1051.46" y="479.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (1 samples, 0.02%)</title><rect x="107.4" y="645" width="0.3" height="15.0" fill="rgb(244,6,46)" rx="2" ry="2" />
<text  x="110.45" y="655.5" ></text>
</g>
<g >
<title>syscall (1 samples, 0.02%)</title><rect x="1168.3" y="677" width="0.2" height="15.0" fill="rgb(246,158,23)" rx="2" ry="2" />
<text  x="1171.29" y="687.5" ></text>
</g>
<g >
<title>sstables::file_writer::write (1 samples, 0.02%)</title><rect x="84.8" y="581" width="0.3" height="15.0" fill="rgb(247,149,48)" rx="2" ry="2" />
<text  x="87.84" y="591.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="65.6" y="517" width="0.2" height="15.0" fill="rgb(254,190,37)" rx="2" ry="2" />
<text  x="68.62" y="527.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7f2ecf1aa25180816b4ab3815982d6ce313b38a7] (1 samples, 0.02%)</title><rect x="902.0" y="597" width="0.2" height="15.0" fill="rgb(219,81,7)" rx="2" ry="2" />
<text  x="904.95" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.10%)</title><rect x="559.4" y="485" width="1.1" height="15.0" fill="rgb(225,17,45)" rx="2" ry="2" />
<text  x="562.42" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="56.3" y="405" width="0.3" height="15.0" fill="rgb(207,137,17)" rx="2" ry="2" />
<text  x="59.35" y="415.5" ></text>
</g>
<g >
<title>executor&lt;test_read (606 samples, 11.61%)</title><rect x="745.3" y="661" width="137.0" height="15.0" fill="rgb(213,118,32)" rx="2" ry="2" />
<text  x="748.27" y="671.5" >executor&lt;test_read</text>
</g>
<g >
<title>database::find_column_family (8 samples, 0.15%)</title><rect x="781.9" y="549" width="1.8" height="15.0" fill="rgb(238,162,13)" rx="2" ry="2" />
<text  x="784.89" y="559.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="770.1" y="485" width="0.3" height="15.0" fill="rgb(254,72,18)" rx="2" ry="2" />
<text  x="773.14" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_UPDATE (1 samples, 0.02%)</title><rect x="35.8" y="437" width="0.2" height="15.0" fill="rgb(244,203,33)" rx="2" ry="2" />
<text  x="38.78" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::create_clustering_ranges (1 samples, 0.02%)</title><rect x="888.6" y="565" width="0.2" height="15.0" fill="rgb(227,27,3)" rx="2" ry="2" />
<text  x="891.61" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="55.4" y="437" width="0.5" height="15.0" fill="rgb(211,110,16)" rx="2" ry="2" />
<text  x="58.45" y="447.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.84%)</title><rect x="1179.6" y="805" width="9.9" height="15.0" fill="rgb(205,175,11)" rx="2" ry="2" />
<text  x="1182.60" y="815.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (9 samples, 0.17%)</title><rect x="988.1" y="453" width="2.0" height="15.0" fill="rgb(210,54,18)" rx="2" ry="2" />
<text  x="991.10" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="63.6" y="309" width="0.4" height="15.0" fill="rgb(252,201,18)" rx="2" ry="2" />
<text  x="66.58" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (63 samples, 1.21%)</title><rect x="1061.8" y="501" width="14.2" height="15.0" fill="rgb(246,169,0)" rx="2" ry="2" />
<text  x="1064.80" y="511.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%)</title><rect x="816.5" y="325" width="0.9" height="15.0" fill="rgb(218,71,7)" rx="2" ry="2" />
<text  x="819.49" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="647.1" y="613" width="0.3" height="15.0" fill="rgb(226,6,48)" rx="2" ry="2" />
<text  x="650.14" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="100.2" y="613" width="0.7" height="15.0" fill="rgb(231,226,13)" rx="2" ry="2" />
<text  x="103.21" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="697.1" y="645" width="0.2" height="15.0" fill="rgb(252,163,3)" rx="2" ry="2" />
<text  x="700.11" y="655.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (6 samples, 0.11%)</title><rect x="1169.2" y="805" width="1.4" height="15.0" fill="rgb(205,176,32)" rx="2" ry="2" />
<text  x="1172.20" y="815.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::maybe_refresh_state (1 samples, 0.02%)</title><rect x="883.0" y="485" width="0.2" height="15.0" fill="rgb(250,37,16)" rx="2" ry="2" />
<text  x="885.96" y="495.5" ></text>
</g>
<g >
<title>service::storage_service::maybe_start_sys_dist_ks (1 samples, 0.02%)</title><rect x="20.2" y="629" width="0.2" height="15.0" fill="rgb(244,87,54)" rx="2" ry="2" />
<text  x="23.17" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="831.2" y="469" width="0.4" height="15.0" fill="rgb(207,152,7)" rx="2" ry="2" />
<text  x="834.18" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::io_queue_submission_pollfn::poll (1 samples, 0.02%)</title><rect x="88.9" y="693" width="0.2" height="15.0" fill="rgb(224,170,14)" rx="2" ry="2" />
<text  x="91.91" y="703.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="58.6" y="341" width="0.2" height="15.0" fill="rgb(217,149,5)" rx="2" ry="2" />
<text  x="61.61" y="351.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (1 samples, 0.02%)</title><rect x="1131.7" y="341" width="0.2" height="15.0" fill="rgb(208,47,40)" rx="2" ry="2" />
<text  x="1134.67" y="351.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::submit&lt;seastar::syscall_result_extra&lt;stat&gt; &gt; (1 samples, 0.02%)</title><rect x="704.3" y="629" width="0.3" height="15.0" fill="rgb(227,206,44)" rx="2" ry="2" />
<text  x="707.34" y="639.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (16 samples, 0.31%)</title><rect x="927.0" y="533" width="3.7" height="15.0" fill="rgb(250,31,11)" rx="2" ry="2" />
<text  x="930.05" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%)</title><rect x="663.0" y="629" width="0.4" height="15.0" fill="rgb(213,86,17)" rx="2" ry="2" />
<text  x="665.97" y="639.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (1 samples, 0.02%)</title><rect x="763.1" y="549" width="0.3" height="15.0" fill="rgb(221,14,30)" rx="2" ry="2" />
<text  x="766.13" y="559.5" ></text>
</g>
<g >
<title>db::block_for (1 samples, 0.02%)</title><rect x="1050.7" y="517" width="0.3" height="15.0" fill="rgb(235,217,6)" rx="2" ry="2" />
<text  x="1053.72" y="527.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (6 samples, 0.11%)</title><rect x="20.6" y="677" width="1.4" height="15.0" fill="rgb(231,97,11)" rx="2" ry="2" />
<text  x="23.63" y="687.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (3 samples, 0.06%)</title><rect x="19.9" y="661" width="0.7" height="15.0" fill="rgb(211,206,7)" rx="2" ry="2" />
<text  x="22.95" y="671.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (19 samples, 0.36%)</title><rect x="1118.8" y="453" width="4.3" height="15.0" fill="rgb(215,142,32)" rx="2" ry="2" />
<text  x="1121.78" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (2 samples, 0.04%)</title><rect x="164.2" y="549" width="0.5" height="15.0" fill="rgb(245,22,22)" rx="2" ry="2" />
<text  x="167.20" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::delete_statement, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="67.0" y="533" width="0.2" height="15.0" fill="rgb(239,221,9)" rx="2" ry="2" />
<text  x="69.98" y="543.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (2 samples, 0.04%)</title><rect x="1121.0" y="405" width="0.5" height="15.0" fill="rgb(229,13,24)" rx="2" ry="2" />
<text  x="1124.04" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="64.0" y="469" width="0.3" height="15.0" fill="rgb(233,118,41)" rx="2" ry="2" />
<text  x="67.04" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="321.6" y="517" width="0.2" height="15.0" fill="rgb(253,41,53)" rx="2" ry="2" />
<text  x="324.56" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="12.3" y="741" width="0.2" height="15.0" fill="rgb(226,176,38)" rx="2" ry="2" />
<text  x="15.26" y="751.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.7" y="773" width="0.2" height="15.0" fill="rgb(236,165,43)" rx="2" ry="2" />
<text  x="86.71" y="783.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::expr::expression const*, cql3::expr::expression*&gt; (1 samples, 0.02%)</title><rect x="75.6" y="405" width="0.2" height="15.0" fill="rgb(229,2,25)" rx="2" ry="2" />
<text  x="78.57" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (1 samples, 0.02%)</title><rect x="1165.8" y="597" width="0.2" height="15.0" fill="rgb(236,183,33)" rx="2" ry="2" />
<text  x="1168.81" y="607.5" ></text>
</g>
<g >
<title>db::get_cdc_generation_mutations (1 samples, 0.02%)</title><rect x="19.9" y="597" width="0.3" height="15.0" fill="rgb(252,40,29)" rx="2" ry="2" />
<text  x="22.95" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::operation::set_value&gt;, void&gt; (1 samples, 0.02%)</title><rect x="60.0" y="469" width="0.2" height="15.0" fill="rgb(235,47,50)" rx="2" ry="2" />
<text  x="62.97" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (3 samples, 0.06%)</title><rect x="56.1" y="453" width="0.7" height="15.0" fill="rgb(235,27,53)" rx="2" ry="2" />
<text  x="59.12" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="980.6" y="533" width="0.3" height="15.0" fill="rgb(205,98,22)" rx="2" ry="2" />
<text  x="983.63" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="746.8" y="581" width="1.0" height="15.0" fill="rgb(207,219,12)" rx="2" ry="2" />
<text  x="749.85" y="591.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="527.8" y="389" width="0.9" height="15.0" fill="rgb(234,84,54)" rx="2" ry="2" />
<text  x="530.76" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="655.3" y="613" width="0.2" height="15.0" fill="rgb(245,138,24)" rx="2" ry="2" />
<text  x="658.28" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="937.2" y="565" width="0.5" height="15.0" fill="rgb(242,66,43)" rx="2" ry="2" />
<text  x="940.22" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (16 samples, 0.31%)</title><rect x="865.8" y="597" width="3.6" height="15.0" fill="rgb(206,172,31)" rx="2" ry="2" />
<text  x="868.78" y="607.5" ></text>
</g>
<g >
<title>main (4,785 samples, 91.68%)</title><rect x="87.1" y="789" width="1081.9" height="15.0" fill="rgb(221,5,47)" rx="2" ry="2" />
<text  x="90.10" y="799.5" >main</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (7 samples, 0.13%)</title><rect x="1147.0" y="629" width="1.6" height="15.0" fill="rgb(239,70,7)" rx="2" ry="2" />
<text  x="1150.04" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="623.2" y="533" width="0.2" height="15.0" fill="rgb(215,7,3)" rx="2" ry="2" />
<text  x="626.17" y="543.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (3 samples, 0.06%)</title><rect x="862.8" y="517" width="0.7" height="15.0" fill="rgb(252,190,5)" rx="2" ry="2" />
<text  x="865.84" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%)</title><rect x="987.6" y="453" width="0.5" height="15.0" fill="rgb(239,222,54)" rx="2" ry="2" />
<text  x="990.64" y="463.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (1 samples, 0.02%)</title><rect x="1119.5" y="421" width="0.2" height="15.0" fill="rgb(235,60,25)" rx="2" ry="2" />
<text  x="1122.46" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1059.3" y="469" width="0.2" height="15.0" fill="rgb(236,42,25)" rx="2" ry="2" />
<text  x="1062.32" y="479.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, clustering_key_prefix const&amp;&gt; (1 samples, 0.02%)</title><rect x="890.0" y="453" width="0.2" height="15.0" fill="rgb(222,10,17)" rx="2" ry="2" />
<text  x="892.97" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="52.5" y="437" width="0.7" height="15.0" fill="rgb(218,102,4)" rx="2" ry="2" />
<text  x="55.51" y="447.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (2 samples, 0.04%)</title><rect x="715.4" y="661" width="0.5" height="15.0" fill="rgb(236,143,40)" rx="2" ry="2" />
<text  x="718.42" y="671.5" ></text>
</g>
<g >
<title>cql3::result_generator::visit&lt;cql3::untyped_result_set::visitor&gt; (1 samples, 0.02%)</title><rect x="671.6" y="613" width="0.2" height="15.0" fill="rgb(230,70,28)" rx="2" ry="2" />
<text  x="674.56" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::stats (8 samples, 0.15%)</title><rect x="535.2" y="485" width="1.8" height="15.0" fill="rgb(234,130,41)" rx="2" ry="2" />
<text  x="538.22" y="495.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="1049.1" y="453" width="0.5" height="15.0" fill="rgb(247,36,46)" rx="2" ry="2" />
<text  x="1052.14" y="463.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="303.7" y="389" width="0.2" height="15.0" fill="rgb(222,137,13)" rx="2" ry="2" />
<text  x="306.70" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="778.5" y="581" width="0.2" height="15.0" fill="rgb(217,154,45)" rx="2" ry="2" />
<text  x="781.50" y="591.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="107.2" y="549" width="0.2" height="15.0" fill="rgb(217,162,4)" rx="2" ry="2" />
<text  x="110.22" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::untyped_constant_test_assignment (1 samples, 0.02%)</title><rect x="72.0" y="565" width="0.2" height="15.0" fill="rgb(245,106,19)" rx="2" ry="2" />
<text  x="74.95" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (15 samples, 0.29%)</title><rect x="854.2" y="613" width="3.4" height="15.0" fill="rgb(209,127,52)" rx="2" ry="2" />
<text  x="857.25" y="623.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (1 samples, 0.02%)</title><rect x="106.8" y="277" width="0.2" height="15.0" fill="rgb(207,120,27)" rx="2" ry="2" />
<text  x="109.77" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%)</title><rect x="956.0" y="565" width="0.2" height="15.0" fill="rgb(246,34,53)" rx="2" ry="2" />
<text  x="958.99" y="575.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="714.7" y="661" width="0.5" height="15.0" fill="rgb(253,21,50)" rx="2" ry="2" />
<text  x="717.74" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="23.3" y="581" width="0.3" height="15.0" fill="rgb(252,97,26)" rx="2" ry="2" />
<text  x="26.34" y="591.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (8 samples, 0.15%)</title><rect x="630.9" y="581" width="1.8" height="15.0" fill="rgb(214,149,29)" rx="2" ry="2" />
<text  x="633.86" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1091.9" y="533" width="0.2" height="15.0" fill="rgb(231,85,40)" rx="2" ry="2" />
<text  x="1094.87" y="543.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="264.1" y="341" width="0.7" height="15.0" fill="rgb(207,115,36)" rx="2" ry="2" />
<text  x="267.13" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="24.0" y="421" width="0.2" height="15.0" fill="rgb(228,114,11)" rx="2" ry="2" />
<text  x="27.02" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (9 samples, 0.17%)</title><rect x="1099.6" y="581" width="2.0" height="15.0" fill="rgb(238,65,22)" rx="2" ry="2" />
<text  x="1102.56" y="591.5" ></text>
</g>
<g >
<title>seastar::make_file_impl (1 samples, 0.02%)</title><rect x="704.3" y="661" width="0.3" height="15.0" fill="rgb(249,190,10)" rx="2" ry="2" />
<text  x="707.34" y="671.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="740.5" y="485" width="0.2" height="15.0" fill="rgb(244,123,24)" rx="2" ry="2" />
<text  x="743.52" y="495.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (48 samples, 0.92%)</title><rect x="359.5" y="389" width="10.9" height="15.0" fill="rgb(227,25,0)" rx="2" ry="2" />
<text  x="362.55" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="55.7" y="357" width="0.2" height="15.0" fill="rgb(240,15,30)" rx="2" ry="2" />
<text  x="58.67" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="24.9" y="533" width="0.2" height="15.0" fill="rgb(223,169,44)" rx="2" ry="2" />
<text  x="27.92" y="543.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="58.6" y="229" width="0.2" height="15.0" fill="rgb(228,121,0)" rx="2" ry="2" />
<text  x="61.61" y="239.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_4findERKNS2_10expressionENS2_6oper_tEEUlRKNS2_15binary_operatorEE_EEPS9_S6_T_EUlSA_E_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_8constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_11conjunctionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_12column_valueEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_5tokenEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13function_callEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4castEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_15field_selectionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4nullEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13bind_variableEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_16untyped_constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_17tuple_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_22collection_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSJ_S8_SN_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_SF_S1R_S1V_S1Z_EEEENSt13invoke_resultISD_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSD_DpOS29_ (1 samples, 0.02%)</title><rect x="905.6" y="581" width="0.2" height="15.0" fill="rgb(238,64,4)" rx="2" ry="2" />
<text  x="908.57" y="591.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (30 samples, 0.57%)</title><rect x="490.2" y="469" width="6.8" height="15.0" fill="rgb(209,42,27)" rx="2" ry="2" />
<text  x="493.23" y="479.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="462.4" y="533" width="0.5" height="15.0" fill="rgb(240,29,29)" rx="2" ry="2" />
<text  x="465.42" y="543.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (1 samples, 0.02%)</title><rect x="299.9" y="405" width="0.2" height="15.0" fill="rgb(241,71,5)" rx="2" ry="2" />
<text  x="302.86" y="415.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="119.9" y="629" width="0.2" height="15.0" fill="rgb(239,96,9)" rx="2" ry="2" />
<text  x="122.88" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="81.7" y="517" width="0.2" height="15.0" fill="rgb(209,76,11)" rx="2" ry="2" />
<text  x="84.67" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (1 samples, 0.02%)</title><rect x="108.4" y="357" width="0.2" height="15.0" fill="rgb(224,175,31)" rx="2" ry="2" />
<text  x="111.35" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="712.3" y="629" width="0.2" height="15.0" fill="rgb(208,118,39)" rx="2" ry="2" />
<text  x="715.26" y="639.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="111.5" y="661" width="0.2" height="15.0" fill="rgb(244,14,13)" rx="2" ry="2" />
<text  x="114.52" y="671.5" ></text>
</g>
<g >
<title>db::system_keyspace::make (1 samples, 0.02%)</title><rect x="19.7" y="501" width="0.2" height="15.0" fill="rgb(222,4,12)" rx="2" ry="2" />
<text  x="22.72" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="712.3" y="613" width="0.2" height="15.0" fill="rgb(222,131,1)" rx="2" ry="2" />
<text  x="715.26" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="589.5" y="565" width="0.2" height="15.0" fill="rgb(206,215,54)" rx="2" ry="2" />
<text  x="592.49" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (2 samples, 0.04%)</title><rect x="336.7" y="565" width="0.5" height="15.0" fill="rgb(211,115,18)" rx="2" ry="2" />
<text  x="339.71" y="575.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (9 samples, 0.17%)</title><rect x="1143.7" y="645" width="2.0" height="15.0" fill="rgb(235,41,11)" rx="2" ry="2" />
<text  x="1146.65" y="655.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (8 samples, 0.15%)</title><rect x="1128.7" y="325" width="1.8" height="15.0" fill="rgb(246,109,14)" rx="2" ry="2" />
<text  x="1131.73" y="335.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (7 samples, 0.13%)</title><rect x="731.7" y="613" width="1.6" height="15.0" fill="rgb(254,75,18)" rx="2" ry="2" />
<text  x="734.70" y="623.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="777.8" y="581" width="0.7" height="15.0" fill="rgb(246,92,54)" rx="2" ry="2" />
<text  x="780.83" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="1133.0" y="373" width="0.2" height="15.0" fill="rgb(205,29,19)" rx="2" ry="2" />
<text  x="1136.02" y="383.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (1 samples, 0.02%)</title><rect x="917.1" y="533" width="0.2" height="15.0" fill="rgb(244,19,29)" rx="2" ry="2" />
<text  x="920.10" y="543.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="12.3" y="757" width="0.2" height="15.0" fill="rgb(225,220,38)" rx="2" ry="2" />
<text  x="15.26" y="767.5" ></text>
</g>
<g >
<title>cql3::selection::selection::selection (1 samples, 0.02%)</title><rect x="83.5" y="405" width="0.2" height="15.0" fill="rgb(249,188,16)" rx="2" ry="2" />
<text  x="86.48" y="415.5" ></text>
</g>
<g >
<title>sstring_hash::operator (3 samples, 0.06%)</title><rect x="1049.6" y="469" width="0.7" height="15.0" fill="rgb(237,188,3)" rx="2" ry="2" />
<text  x="1052.59" y="479.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1,100 samples, 21.08%)</title><rect x="885.4" y="677" width="248.8" height="15.0" fill="rgb(222,125,51)" rx="2" ry="2" />
<text  x="888.45" y="687.5" >seastar::lambda_task&lt;seastar::exe..</text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (4 samples, 0.08%)</title><rect x="106.3" y="613" width="0.9" height="15.0" fill="rgb(212,65,13)" rx="2" ry="2" />
<text  x="109.32" y="623.5" ></text>
</g>
<g >
<title>database::find_schema (36 samples, 0.69%)</title><rect x="780.8" y="581" width="8.1" height="15.0" fill="rgb(236,133,4)" rx="2" ry="2" />
<text  x="783.76" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="81.9" y="533" width="0.2" height="15.0" fill="rgb(246,181,0)" rx="2" ry="2" />
<text  x="84.90" y="543.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (2 samples, 0.04%)</title><rect x="383.1" y="357" width="0.4" height="15.0" fill="rgb(246,29,33)" rx="2" ry="2" />
<text  x="386.06" y="367.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="46.6" y="341" width="0.3" height="15.0" fill="rgb(240,84,26)" rx="2" ry="2" />
<text  x="49.63" y="351.5" ></text>
</g>
<g >
<title>CryptoPP::IteratedHashBase&lt;unsigned int, CryptoPP::HashTransformation&gt;::HashMultipleBlocks (1 samples, 0.02%)</title><rect x="10.5" y="757" width="0.2" height="15.0" fill="rgb(239,148,32)" rx="2" ry="2" />
<text  x="13.45" y="767.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="336.0" y="533" width="0.3" height="15.0" fill="rgb(238,93,19)" rx="2" ry="2" />
<text  x="339.03" y="543.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedState (2 samples, 0.04%)</title><rect x="24.0" y="517" width="0.5" height="15.0" fill="rgb(231,210,12)" rx="2" ry="2" />
<text  x="27.02" y="527.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (2 samples, 0.04%)</title><rect x="865.3" y="597" width="0.5" height="15.0" fill="rgb(239,85,20)" rx="2" ry="2" />
<text  x="868.32" y="607.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%)</title><rect x="471.5" y="597" width="0.2" height="15.0" fill="rgb(243,68,39)" rx="2" ry="2" />
<text  x="474.46" y="607.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="80.3" y="549" width="0.2" height="15.0" fill="rgb(205,74,24)" rx="2" ry="2" />
<text  x="83.32" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::end (1 samples, 0.02%)</title><rect x="24.5" y="517" width="0.2" height="15.0" fill="rgb(207,176,18)" rx="2" ry="2" />
<text  x="27.47" y="527.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%)</title><rect x="212.8" y="405" width="0.2" height="15.0" fill="rgb(227,54,0)" rx="2" ry="2" />
<text  x="215.81" y="415.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (4 samples, 0.08%)</title><rect x="1075.1" y="485" width="0.9" height="15.0" fill="rgb(253,187,49)" rx="2" ry="2" />
<text  x="1078.14" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::modification_statement, std::default_delete&lt;cql3::statements::raw::modification_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::modification_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="67.2" y="549" width="0.2" height="15.0" fill="rgb(241,190,19)" rx="2" ry="2" />
<text  x="70.20" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%)</title><rect x="1117.9" y="629" width="0.4" height="15.0" fill="rgb(250,215,15)" rx="2" ry="2" />
<text  x="1120.88" y="639.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_token_present (2 samples, 0.04%)</title><rect x="31.9" y="437" width="0.5" height="15.0" fill="rgb(213,71,52)" rx="2" ry="2" />
<text  x="34.93" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (2 samples, 0.04%)</title><rect x="674.0" y="549" width="0.5" height="15.0" fill="rgb(238,214,15)" rx="2" ry="2" />
<text  x="677.05" y="559.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="551.7" y="373" width="0.7" height="15.0" fill="rgb(226,178,45)" rx="2" ry="2" />
<text  x="554.73" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="1113.6" y="581" width="0.2" height="15.0" fill="rgb(226,118,14)" rx="2" ry="2" />
<text  x="1116.58" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (2 samples, 0.04%)</title><rect x="751.4" y="597" width="0.4" height="15.0" fill="rgb(208,194,24)" rx="2" ry="2" />
<text  x="754.37" y="607.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="271.4" y="325" width="0.2" height="15.0" fill="rgb(226,88,10)" rx="2" ry="2" />
<text  x="274.37" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="55.7" y="293" width="0.2" height="15.0" fill="rgb(244,212,53)" rx="2" ry="2" />
<text  x="58.67" y="303.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (62 samples, 1.19%)</title><rect x="25.8" y="549" width="14.0" height="15.0" fill="rgb(242,222,47)" rx="2" ry="2" />
<text  x="28.83" y="559.5" ></text>
</g>
<g >
<title>sstables::mc::writer::drain_tombstones (1 samples, 0.02%)</title><rect x="84.8" y="613" width="0.3" height="15.0" fill="rgb(206,147,30)" rx="2" ry="2" />
<text  x="87.84" y="623.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (2 samples, 0.04%)</title><rect x="994.9" y="437" width="0.4" height="15.0" fill="rgb(218,143,32)" rx="2" ry="2" />
<text  x="997.88" y="447.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (5 samples, 0.10%)</title><rect x="108.1" y="613" width="1.2" height="15.0" fill="rgb(214,77,10)" rx="2" ry="2" />
<text  x="111.13" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="808.1" y="453" width="0.2" height="15.0" fill="rgb(227,60,7)" rx="2" ry="2" />
<text  x="811.12" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (1 samples, 0.02%)</title><rect x="629.1" y="581" width="0.2" height="15.0" fill="rgb(217,113,39)" rx="2" ry="2" />
<text  x="632.05" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (73 samples, 1.40%)</title><rect x="542.5" y="469" width="16.5" height="15.0" fill="rgb(207,150,5)" rx="2" ry="2" />
<text  x="545.46" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="56.3" y="421" width="0.3" height="15.0" fill="rgb(233,172,31)" rx="2" ry="2" />
<text  x="59.35" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="264.8" y="341" width="0.2" height="15.0" fill="rgb(243,10,37)" rx="2" ry="2" />
<text  x="267.81" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (15 samples, 0.29%)</title><rect x="61.8" y="533" width="3.4" height="15.0" fill="rgb(233,118,37)" rx="2" ry="2" />
<text  x="64.78" y="543.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%)</title><rect x="1020.2" y="309" width="0.5" height="15.0" fill="rgb(217,107,25)" rx="2" ry="2" />
<text  x="1023.20" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="313.2" y="469" width="0.2" height="15.0" fill="rgb(234,152,6)" rx="2" ry="2" />
<text  x="316.20" y="479.5" ></text>
</g>
<g >
<title>database::find_schema (3 samples, 0.06%)</title><rect x="79.4" y="613" width="0.7" height="15.0" fill="rgb(208,177,25)" rx="2" ry="2" />
<text  x="82.41" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (13 samples, 0.25%)</title><rect x="245.6" y="213" width="2.9" height="15.0" fill="rgb(231,101,15)" rx="2" ry="2" />
<text  x="248.59" y="223.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="62.9" y="469" width="0.2" height="15.0" fill="rgb(231,220,4)" rx="2" ry="2" />
<text  x="65.91" y="479.5" ></text>
</g>
<g >
<title>query::result_set::result_set (1 samples, 0.02%)</title><rect x="107.4" y="661" width="0.3" height="15.0" fill="rgb(253,67,9)" rx="2" ry="2" />
<text  x="110.45" y="671.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (4 samples, 0.08%)</title><rect x="151.5" y="581" width="0.9" height="15.0" fill="rgb(247,25,22)" rx="2" ry="2" />
<text  x="154.54" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::validate (1 samples, 0.02%)</title><rect x="851.1" y="597" width="0.2" height="15.0" fill="rgb(230,192,19)" rx="2" ry="2" />
<text  x="854.08" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.61%)</title><rect x="1118.3" y="549" width="7.3" height="15.0" fill="rgb(246,225,47)" rx="2" ry="2" />
<text  x="1121.33" y="559.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="624.8" y="549" width="0.2" height="15.0" fill="rgb(219,54,52)" rx="2" ry="2" />
<text  x="627.76" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="369.9" y="373" width="0.5" height="15.0" fill="rgb(232,25,15)" rx="2" ry="2" />
<text  x="372.95" y="383.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="459.3" y="469" width="0.4" height="15.0" fill="rgb(222,162,42)" rx="2" ry="2" />
<text  x="462.25" y="479.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (1 samples, 0.02%)</title><rect x="360.0" y="373" width="0.2" height="15.0" fill="rgb(248,108,23)" rx="2" ry="2" />
<text  x="363.00" y="383.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%)</title><rect x="10.9" y="661" width="0.2" height="15.0" fill="rgb(245,91,6)" rx="2" ry="2" />
<text  x="13.90" y="671.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="54.8" y="469" width="0.2" height="15.0" fill="rgb(206,104,11)" rx="2" ry="2" />
<text  x="57.77" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="672.7" y="661" width="0.2" height="15.0" fill="rgb(235,61,53)" rx="2" ry="2" />
<text  x="675.69" y="671.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (1 samples, 0.02%)</title><rect x="100.0" y="597" width="0.2" height="15.0" fill="rgb(239,42,40)" rx="2" ry="2" />
<text  x="102.99" y="607.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::statements::raw::update_statement, cql3::cf_name, std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;, bool&amp;&gt; (1 samples, 0.02%)</title><rect x="65.4" y="533" width="0.2" height="15.0" fill="rgb(235,95,20)" rx="2" ry="2" />
<text  x="68.39" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="79.9" y="565" width="0.2" height="15.0" fill="rgb(243,212,0)" rx="2" ry="2" />
<text  x="82.86" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;&amp;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt;::_Deque_iterator (1 samples, 0.02%)</title><rect x="24.5" y="501" width="0.2" height="15.0" fill="rgb(249,156,15)" rx="2" ry="2" />
<text  x="27.47" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="55.4" y="453" width="0.5" height="15.0" fill="rgb(219,228,52)" rx="2" ry="2" />
<text  x="58.45" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="493.8" y="437" width="0.3" height="15.0" fill="rgb(246,217,27)" rx="2" ry="2" />
<text  x="496.85" y="447.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (11 samples, 0.21%)</title><rect x="205.6" y="389" width="2.5" height="15.0" fill="rgb(209,77,20)" rx="2" ry="2" />
<text  x="208.57" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.10%)</title><rect x="647.8" y="581" width="1.1" height="15.0" fill="rgb(251,158,45)" rx="2" ry="2" />
<text  x="650.82" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="713.6" y="613" width="0.5" height="15.0" fill="rgb(227,53,42)" rx="2" ry="2" />
<text  x="716.61" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (14 samples, 0.27%)</title><rect x="665.9" y="661" width="3.2" height="15.0" fill="rgb(248,177,10)" rx="2" ry="2" />
<text  x="668.91" y="671.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (1 samples, 0.02%)</title><rect x="770.6" y="453" width="0.2" height="15.0" fill="rgb(212,195,43)" rx="2" ry="2" />
<text  x="773.59" y="463.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (482 samples, 9.24%)</title><rect x="474.4" y="581" width="109.0" height="15.0" fill="rgb(229,22,39)" rx="2" ry="2" />
<text  x="477.40" y="591.5" >mutation_sour..</text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="20.4" y="517" width="0.2" height="15.0" fill="rgb(217,142,40)" rx="2" ry="2" />
<text  x="23.40" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%)</title><rect x="335.1" y="533" width="0.3" height="15.0" fill="rgb(231,108,39)" rx="2" ry="2" />
<text  x="338.13" y="543.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (500 samples, 9.58%)</title><rect x="472.4" y="597" width="113.0" height="15.0" fill="rgb(223,54,0)" rx="2" ry="2" />
<text  x="475.37" y="607.5" >query::querie..</text>
</g>
<g >
<title>service::client_state::has_access (7 samples, 0.13%)</title><rect x="80.3" y="613" width="1.6" height="15.0" fill="rgb(239,170,49)" rx="2" ry="2" />
<text  x="83.32" y="623.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="916.4" y="501" width="0.5" height="15.0" fill="rgb(247,172,49)" rx="2" ry="2" />
<text  x="919.42" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_impl&lt;std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%)</title><rect x="60.6" y="469" width="0.3" height="15.0" fill="rgb(254,76,45)" rx="2" ry="2" />
<text  x="63.65" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1074.9" y="469" width="0.2" height="15.0" fill="rgb(209,90,41)" rx="2" ry="2" />
<text  x="1077.92" y="479.5" ></text>
</g>
<g >
<title>service::migration_manager::announce_new_column_family (1 samples, 0.02%)</title><rect x="107.7" y="629" width="0.2" height="15.0" fill="rgb(253,89,29)" rx="2" ry="2" />
<text  x="110.67" y="639.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="583.4" y="581" width="0.9" height="15.0" fill="rgb(225,178,1)" rx="2" ry="2" />
<text  x="586.38" y="591.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (1 samples, 0.02%)</title><rect x="1021.8" y="357" width="0.2" height="15.0" fill="rgb(239,84,0)" rx="2" ry="2" />
<text  x="1024.78" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (2 samples, 0.04%)</title><rect x="645.1" y="613" width="0.5" height="15.0" fill="rgb(228,17,40)" rx="2" ry="2" />
<text  x="648.11" y="623.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (45 samples, 0.86%)</title><rect x="568.9" y="501" width="10.2" height="15.0" fill="rgb(254,99,37)" rx="2" ry="2" />
<text  x="571.91" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="62.0" y="405" width="0.2" height="15.0" fill="rgb(221,142,1)" rx="2" ry="2" />
<text  x="65.00" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="500.9" y="437" width="0.2" height="15.0" fill="rgb(218,218,10)" rx="2" ry="2" />
<text  x="503.86" y="447.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (21 samples, 0.40%)</title><rect x="244.0" y="245" width="4.8" height="15.0" fill="rgb(253,59,35)" rx="2" ry="2" />
<text  x="247.01" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="829.1" y="453" width="0.3" height="15.0" fill="rgb(240,5,10)" rx="2" ry="2" />
<text  x="832.15" y="463.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (6 samples, 0.11%)</title><rect x="121.0" y="613" width="1.4" height="15.0" fill="rgb(224,214,53)" rx="2" ry="2" />
<text  x="124.01" y="623.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (15 samples, 0.29%)</title><rect x="1091.4" y="565" width="3.4" height="15.0" fill="rgb(237,145,32)" rx="2" ry="2" />
<text  x="1094.42" y="575.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator= (1 samples, 0.02%)</title><rect x="58.8" y="421" width="0.3" height="15.0" fill="rgb(250,149,0)" rx="2" ry="2" />
<text  x="61.84" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (37 samples, 0.71%)</title><rect x="124.4" y="613" width="8.4" height="15.0" fill="rgb(223,196,40)" rx="2" ry="2" />
<text  x="127.41" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::fstat (1 samples, 0.02%)</title><rect x="704.3" y="645" width="0.3" height="15.0" fill="rgb(240,2,4)" rx="2" ry="2" />
<text  x="707.34" y="655.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="82.1" y="549" width="0.3" height="15.0" fill="rgb(231,196,23)" rx="2" ry="2" />
<text  x="85.12" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;range_tombstone*&gt;::allocate (2 samples, 0.04%)</title><rect x="590.8" y="533" width="0.5" height="15.0" fill="rgb(228,176,19)" rx="2" ry="2" />
<text  x="593.84" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (1 samples, 0.02%)</title><rect x="547.4" y="437" width="0.3" height="15.0" fill="rgb(229,62,10)" rx="2" ry="2" />
<text  x="550.43" y="447.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (1 samples, 0.02%)</title><rect x="84.2" y="501" width="0.2" height="15.0" fill="rgb(208,214,14)" rx="2" ry="2" />
<text  x="87.16" y="511.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_partition (1 samples, 0.02%)</title><rect x="86.2" y="645" width="0.2" height="15.0" fill="rgb(226,188,37)" rx="2" ry="2" />
<text  x="89.19" y="655.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (26 samples, 0.50%)</title><rect x="1016.4" y="373" width="5.8" height="15.0" fill="rgb(218,172,30)" rx="2" ry="2" />
<text  x="1019.36" y="383.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="84.2" y="581" width="0.6" height="15.0" fill="rgb(241,187,35)" rx="2" ry="2" />
<text  x="87.16" y="591.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%)</title><rect x="334.0" y="501" width="0.2" height="15.0" fill="rgb(224,224,22)" rx="2" ry="2" />
<text  x="337.00" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (5 samples, 0.10%)</title><rect x="152.4" y="597" width="1.2" height="15.0" fill="rgb(216,155,33)" rx="2" ry="2" />
<text  x="155.44" y="607.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (4 samples, 0.08%)</title><rect x="365.2" y="357" width="0.9" height="15.0" fill="rgb(235,223,19)" rx="2" ry="2" />
<text  x="368.20" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (11 samples, 0.21%)</title><rect x="1078.5" y="533" width="2.5" height="15.0" fill="rgb(254,136,34)" rx="2" ry="2" />
<text  x="1081.53" y="543.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (66 samples, 1.26%)</title><rect x="1013.9" y="421" width="14.9" height="15.0" fill="rgb(228,130,40)" rx="2" ry="2" />
<text  x="1016.87" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="658.2" y="613" width="0.5" height="15.0" fill="rgb(227,51,12)" rx="2" ry="2" />
<text  x="661.22" y="623.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (4 samples, 0.08%)</title><rect x="293.8" y="357" width="0.9" height="15.0" fill="rgb(240,206,42)" rx="2" ry="2" />
<text  x="296.75" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1129.2" y="277" width="0.2" height="15.0" fill="rgb(216,55,35)" rx="2" ry="2" />
<text  x="1132.18" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (4 samples, 0.08%)</title><rect x="414.0" y="357" width="0.9" height="15.0" fill="rgb(238,13,2)" rx="2" ry="2" />
<text  x="417.04" y="367.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::create_aggregate_statement*, std::default_delete&lt;cql3::statements::create_aggregate_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="66.3" y="517" width="0.2" height="15.0" fill="rgb(232,158,23)" rx="2" ry="2" />
<text  x="69.30" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="24.9" y="437" width="0.2" height="15.0" fill="rgb(247,52,41)" rx="2" ry="2" />
<text  x="27.92" y="447.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="914.8" y="485" width="0.3" height="15.0" fill="rgb(209,166,30)" rx="2" ry="2" />
<text  x="917.84" y="495.5" ></text>
</g>
<g >
<title>db::block_for (1 samples, 0.02%)</title><rect x="1051.9" y="501" width="0.2" height="15.0" fill="rgb(219,147,19)" rx="2" ry="2" />
<text  x="1054.85" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier_raw&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="80.1" y="629" width="0.2" height="15.0" fill="rgb(230,204,41)" rx="2" ry="2" />
<text  x="83.09" y="639.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="878.0" y="629" width="0.2" height="15.0" fill="rgb(229,43,18)" rx="2" ry="2" />
<text  x="880.99" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (1 samples, 0.02%)</title><rect x="108.4" y="373" width="0.2" height="15.0" fill="rgb(211,52,50)" rx="2" ry="2" />
<text  x="111.35" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (1 samples, 0.02%)</title><rect x="675.6" y="661" width="0.3" height="15.0" fill="rgb(218,146,5)" rx="2" ry="2" />
<text  x="678.63" y="671.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="1011.4" y="421" width="2.5" height="15.0" fill="rgb(217,20,13)" rx="2" ry="2" />
<text  x="1014.38" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="63.4" y="261" width="0.2" height="15.0" fill="rgb(218,82,2)" rx="2" ry="2" />
<text  x="66.36" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="987.9" y="437" width="0.2" height="15.0" fill="rgb(249,151,30)" rx="2" ry="2" />
<text  x="990.87" y="447.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="49.1" y="341" width="0.5" height="15.0" fill="rgb(220,71,47)" rx="2" ry="2" />
<text  x="52.11" y="351.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (19 samples, 0.36%)</title><rect x="500.0" y="469" width="4.2" height="15.0" fill="rgb(219,222,17)" rx="2" ry="2" />
<text  x="502.95" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="44.8" y="469" width="0.5" height="15.0" fill="rgb(221,164,38)" rx="2" ry="2" />
<text  x="47.82" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (4 samples, 0.08%)</title><rect x="369.0" y="341" width="0.9" height="15.0" fill="rgb(228,223,10)" rx="2" ry="2" />
<text  x="372.04" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="55.7" y="421" width="0.2" height="15.0" fill="rgb(244,219,32)" rx="2" ry="2" />
<text  x="58.67" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (5 samples, 0.10%)</title><rect x="680.2" y="629" width="1.1" height="15.0" fill="rgb(242,28,5)" rx="2" ry="2" />
<text  x="683.15" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="498.1" y="453" width="0.3" height="15.0" fill="rgb(222,31,44)" rx="2" ry="2" />
<text  x="501.14" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (1 samples, 0.02%)</title><rect x="763.8" y="517" width="0.2" height="15.0" fill="rgb(207,163,18)" rx="2" ry="2" />
<text  x="766.81" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (1 samples, 0.02%)</title><rect x="917.1" y="517" width="0.2" height="15.0" fill="rgb(227,22,37)" rx="2" ry="2" />
<text  x="920.10" y="527.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (10 samples, 0.19%)</title><rect x="1162.6" y="629" width="2.3" height="15.0" fill="rgb(242,55,2)" rx="2" ry="2" />
<text  x="1165.64" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (2 samples, 0.04%)</title><rect x="56.3" y="437" width="0.5" height="15.0" fill="rgb(237,12,33)" rx="2" ry="2" />
<text  x="59.35" y="447.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (58 samples, 1.11%)</title><rect x="812.4" y="437" width="13.1" height="15.0" fill="rgb(247,178,14)" rx="2" ry="2" />
<text  x="815.42" y="447.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (124 samples, 2.38%)</title><rect x="1006.2" y="453" width="28.0" height="15.0" fill="rgb(220,203,10)" rx="2" ry="2" />
<text  x="1009.18" y="463.5" >s..</text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="844.5" y="453" width="0.5" height="15.0" fill="rgb(237,159,47)" rx="2" ry="2" />
<text  x="847.52" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::initialize (1 samples, 0.02%)</title><rect x="1168.7" y="693" width="0.3" height="15.0" fill="rgb(245,164,52)" rx="2" ry="2" />
<text  x="1171.75" y="703.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_M_initialize_map (1 samples, 0.02%)</title><rect x="23.6" y="549" width="0.2" height="15.0" fill="rgb(215,22,53)" rx="2" ry="2" />
<text  x="26.57" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (6 samples, 0.11%)</title><rect x="915.7" y="533" width="1.4" height="15.0" fill="rgb(209,123,54)" rx="2" ry="2" />
<text  x="918.74" y="543.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (1 samples, 0.02%)</title><rect x="1094.6" y="549" width="0.2" height="15.0" fill="rgb(252,51,12)" rx="2" ry="2" />
<text  x="1097.59" y="559.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (4 samples, 0.08%)</title><rect x="1167.4" y="629" width="0.9" height="15.0" fill="rgb(245,133,33)" rx="2" ry="2" />
<text  x="1170.39" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="716.3" y="437" width="0.3" height="15.0" fill="rgb(208,16,7)" rx="2" ry="2" />
<text  x="719.33" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1060.9" y="501" width="0.2" height="15.0" fill="rgb(247,154,47)" rx="2" ry="2" />
<text  x="1063.90" y="511.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="743.7" y="677" width="0.2" height="15.0" fill="rgb(241,177,51)" rx="2" ry="2" />
<text  x="746.68" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="674.0" y="565" width="0.5" height="15.0" fill="rgb(236,105,45)" rx="2" ry="2" />
<text  x="677.05" y="575.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (3 samples, 0.06%)</title><rect x="552.4" y="357" width="0.7" height="15.0" fill="rgb(245,175,39)" rx="2" ry="2" />
<text  x="555.41" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="667.5" y="645" width="0.2" height="15.0" fill="rgb(252,183,26)" rx="2" ry="2" />
<text  x="670.49" y="655.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (4 samples, 0.08%)</title><rect x="1092.1" y="533" width="0.9" height="15.0" fill="rgb(248,71,22)" rx="2" ry="2" />
<text  x="1095.10" y="543.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (2 samples, 0.04%)</title><rect x="773.5" y="533" width="0.5" height="15.0" fill="rgb(237,221,52)" rx="2" ry="2" />
<text  x="776.53" y="543.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (15 samples, 0.29%)</title><rect x="770.1" y="501" width="3.4" height="15.0" fill="rgb(212,115,46)" rx="2" ry="2" />
<text  x="773.14" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (22 samples, 0.42%)</title><rect x="649.4" y="613" width="5.0" height="15.0" fill="rgb(233,7,5)" rx="2" ry="2" />
<text  x="652.40" y="623.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (31 samples, 0.59%)</title><rect x="767.0" y="549" width="7.0" height="15.0" fill="rgb(251,111,15)" rx="2" ry="2" />
<text  x="769.97" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.65%)</title><rect x="1125.6" y="629" width="7.6" height="15.0" fill="rgb(221,49,2)" rx="2" ry="2" />
<text  x="1128.56" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%)</title><rect x="593.8" y="485" width="0.2" height="15.0" fill="rgb(247,127,31)" rx="2" ry="2" />
<text  x="596.78" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="24.9" y="565" width="0.2" height="15.0" fill="rgb(222,44,31)" rx="2" ry="2" />
<text  x="27.92" y="575.5" ></text>
</g>
<g >
<title>partition_entry::read (1 samples, 0.02%)</title><rect x="18.6" y="725" width="0.2" height="15.0" fill="rgb(245,140,6)" rx="2" ry="2" />
<text  x="21.59" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="538.6" y="453" width="0.5" height="15.0" fill="rgb(253,206,30)" rx="2" ry="2" />
<text  x="541.61" y="463.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (6 samples, 0.11%)</title><rect x="1102.7" y="597" width="1.4" height="15.0" fill="rgb(250,226,15)" rx="2" ry="2" />
<text  x="1105.73" y="607.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%)</title><rect x="212.4" y="389" width="0.2" height="15.0" fill="rgb(229,207,5)" rx="2" ry="2" />
<text  x="215.36" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (5 samples, 0.10%)</title><rect x="937.7" y="581" width="1.1" height="15.0" fill="rgb(250,229,46)" rx="2" ry="2" />
<text  x="940.68" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="61.8" y="469" width="0.4" height="15.0" fill="rgb(208,27,18)" rx="2" ry="2" />
<text  x="64.78" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (27 samples, 0.52%)</title><rect x="618.4" y="549" width="6.1" height="15.0" fill="rgb(230,75,13)" rx="2" ry="2" />
<text  x="621.43" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6 samples, 0.11%)</title><rect x="1010.0" y="389" width="1.4" height="15.0" fill="rgb(238,201,36)" rx="2" ry="2" />
<text  x="1013.03" y="399.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="902.6" y="597" width="0.5" height="15.0" fill="rgb(209,209,47)" rx="2" ry="2" />
<text  x="905.63" y="607.5" ></text>
</g>
<g >
<title>query::result::result (4 samples, 0.08%)</title><rect x="633.6" y="597" width="0.9" height="15.0" fill="rgb(222,10,11)" rx="2" ry="2" />
<text  x="636.58" y="607.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple&lt;cql3::operation::raw_update*&amp;, std::default_delete&lt;cql3::operation::set_value&gt;, true&gt; (1 samples, 0.02%)</title><rect x="60.6" y="437" width="0.3" height="15.0" fill="rgb(227,1,3)" rx="2" ry="2" />
<text  x="63.65" y="447.5" ></text>
</g>
<g >
<title>std::locale::locale (1 samples, 0.02%)</title><rect x="21.3" y="629" width="0.2" height="15.0" fill="rgb(206,108,49)" rx="2" ry="2" />
<text  x="24.30" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="778.1" y="565" width="0.4" height="15.0" fill="rgb(222,147,30)" rx="2" ry="2" />
<text  x="781.05" y="575.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%)</title><rect x="1021.3" y="341" width="0.3" height="15.0" fill="rgb(217,46,10)" rx="2" ry="2" />
<text  x="1024.33" y="351.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%)</title><rect x="1107.5" y="581" width="0.2" height="15.0" fill="rgb(206,21,7)" rx="2" ry="2" />
<text  x="1110.47" y="591.5" ></text>
</g>
<g >
<title>TLS init function for cql3::statements::select_statement::_default_parameters (1 samples, 0.02%)</title><rect x="776.5" y="581" width="0.2" height="15.0" fill="rgb(244,104,37)" rx="2" ry="2" />
<text  x="779.47" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="210.8" y="357" width="0.7" height="15.0" fill="rgb(206,23,25)" rx="2" ry="2" />
<text  x="213.77" y="367.5" ></text>
</g>
<g >
<title>db::query_context::execute_cql&lt;&gt; (1 samples, 0.02%)</title><rect x="83.5" y="565" width="0.2" height="15.0" fill="rgb(205,104,11)" rx="2" ry="2" />
<text  x="86.48" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="1059.8" y="485" width="0.6" height="15.0" fill="rgb(249,115,2)" rx="2" ry="2" />
<text  x="1062.77" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (8 samples, 0.15%)</title><rect x="1045.5" y="485" width="1.8" height="15.0" fill="rgb(226,169,25)" rx="2" ry="2" />
<text  x="1048.52" y="495.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="464.9" y="517" width="1.1" height="15.0" fill="rgb(249,173,21)" rx="2" ry="2" />
<text  x="467.91" y="527.5" ></text>
</g>
<g >
<title>service::storage_service::init_server (1 samples, 0.02%)</title><rect x="83.5" y="661" width="0.2" height="15.0" fill="rgb(218,105,5)" rx="2" ry="2" />
<text  x="86.48" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="334.2" y="501" width="0.5" height="15.0" fill="rgb(206,22,36)" rx="2" ry="2" />
<text  x="337.22" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="626.3" y="597" width="0.5" height="15.0" fill="rgb(236,134,49)" rx="2" ry="2" />
<text  x="629.34" y="607.5" ></text>
</g>
<g >
<title>db::schema_tables::make_create_table_mutations (1 samples, 0.02%)</title><rect x="107.7" y="549" width="0.2" height="15.0" fill="rgb(242,196,3)" rx="2" ry="2" />
<text  x="110.67" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (12 samples, 0.23%)</title><rect x="1047.6" y="501" width="2.7" height="15.0" fill="rgb(221,224,29)" rx="2" ry="2" />
<text  x="1050.56" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (10 samples, 0.19%)</title><rect x="677.9" y="645" width="2.3" height="15.0" fill="rgb(240,26,46)" rx="2" ry="2" />
<text  x="680.89" y="655.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (2 samples, 0.04%)</title><rect x="13.2" y="773" width="0.4" height="15.0" fill="rgb(224,63,3)" rx="2" ry="2" />
<text  x="16.17" y="783.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="883.0" y="613" width="0.2" height="15.0" fill="rgb(226,110,22)" rx="2" ry="2" />
<text  x="885.96" y="623.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (9 samples, 0.17%)</title><rect x="1018.6" y="341" width="2.1" height="15.0" fill="rgb(235,159,5)" rx="2" ry="2" />
<text  x="1021.62" y="351.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_stream (1 samples, 0.02%)</title><rect x="12.9" y="661" width="0.3" height="15.0" fill="rgb(241,79,48)" rx="2" ry="2" />
<text  x="15.94" y="671.5" ></text>
</g>
<g >
<title>commitlog_entry_writer::compute_size (1 samples, 0.02%)</title><rect x="1123.8" y="421" width="0.2" height="15.0" fill="rgb(238,228,52)" rx="2" ry="2" />
<text  x="1126.75" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation_base_with_promise&lt;seastar::internal::promise_base_with_type&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;, void&gt;::waiting_task (1 samples, 0.02%)</title><rect x="83.5" y="789" width="0.2" height="15.0" fill="rgb(234,198,36)" rx="2" ry="2" />
<text  x="86.48" y="799.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="60.0" y="421" width="0.2" height="15.0" fill="rgb(237,207,9)" rx="2" ry="2" />
<text  x="62.97" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1078.3" y="533" width="0.2" height="15.0" fill="rgb(223,210,48)" rx="2" ry="2" />
<text  x="1081.31" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1135.1" y="677" width="0.2" height="15.0" fill="rgb(240,92,3)" rx="2" ry="2" />
<text  x="1138.06" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="841.4" y="565" width="0.2" height="15.0" fill="rgb(250,164,10)" rx="2" ry="2" />
<text  x="844.36" y="575.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::posix_file_impl::truncate (1 samples, 0.02%)</title><rect x="717.2" y="677" width="0.3" height="15.0" fill="rgb(212,71,7)" rx="2" ry="2" />
<text  x="720.23" y="687.5" ></text>
</g>
<g >
<title>row::append_cell (2 samples, 0.04%)</title><rect x="1121.0" y="389" width="0.5" height="15.0" fill="rgb(227,5,7)" rx="2" ry="2" />
<text  x="1124.04" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mT__206 (1 samples, 0.02%)</title><rect x="36.5" y="437" width="0.2" height="15.0" fill="rgb(243,141,10)" rx="2" ry="2" />
<text  x="39.45" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%)</title><rect x="751.1" y="613" width="0.3" height="15.0" fill="rgb(218,43,54)" rx="2" ry="2" />
<text  x="754.15" y="623.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (3 samples, 0.06%)</title><rect x="106.5" y="485" width="0.7" height="15.0" fill="rgb(207,203,48)" rx="2" ry="2" />
<text  x="109.54" y="495.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="562.8" y="501" width="0.9" height="15.0" fill="rgb(206,107,1)" rx="2" ry="2" />
<text  x="565.81" y="511.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (2 samples, 0.04%)</title><rect x="534.8" y="485" width="0.4" height="15.0" fill="rgb(210,46,51)" rx="2" ry="2" />
<text  x="537.77" y="495.5" ></text>
</g>
<g >
<title>service::client_state::has_access (180 samples, 3.45%)</title><rect x="797.7" y="549" width="40.7" height="15.0" fill="rgb(239,172,1)" rx="2" ry="2" />
<text  x="800.72" y="559.5" >ser..</text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (8 samples, 0.15%)</title><rect x="497.2" y="485" width="1.8" height="15.0" fill="rgb(205,52,5)" rx="2" ry="2" />
<text  x="500.24" y="495.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (3 samples, 0.06%)</title><rect x="106.5" y="533" width="0.7" height="15.0" fill="rgb(213,44,1)" rx="2" ry="2" />
<text  x="109.54" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="938.6" y="549" width="0.2" height="15.0" fill="rgb(238,221,2)" rx="2" ry="2" />
<text  x="941.58" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::~_Rb_tree (2 samples, 0.04%)</title><rect x="672.9" y="581" width="0.5" height="15.0" fill="rgb(226,110,0)" rx="2" ry="2" />
<text  x="675.92" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (1 samples, 0.02%)</title><rect x="980.0" y="533" width="0.2" height="15.0" fill="rgb(229,39,16)" rx="2" ry="2" />
<text  x="982.96" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="55.9" y="453" width="0.2" height="15.0" fill="rgb(210,69,13)" rx="2" ry="2" />
<text  x="58.90" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="747.8" y="597" width="0.2" height="15.0" fill="rgb(215,125,45)" rx="2" ry="2" />
<text  x="750.75" y="607.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (482 samples, 9.24%)</title><rect x="350.3" y="469" width="109.0" height="15.0" fill="rgb(219,176,37)" rx="2" ry="2" />
<text  x="353.28" y="479.5" >seastar::repe..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%)</title><rect x="625.4" y="549" width="0.7" height="15.0" fill="rgb(251,108,31)" rx="2" ry="2" />
<text  x="628.44" y="559.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="334.7" y="501" width="0.2" height="15.0" fill="rgb(239,33,35)" rx="2" ry="2" />
<text  x="337.68" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="269.6" y="325" width="0.2" height="15.0" fill="rgb(253,200,49)" rx="2" ry="2" />
<text  x="272.56" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%)</title><rect x="752.3" y="581" width="0.2" height="15.0" fill="rgb(239,139,17)" rx="2" ry="2" />
<text  x="755.28" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="52.3" y="421" width="0.2" height="15.0" fill="rgb(206,136,40)" rx="2" ry="2" />
<text  x="55.28" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (35 samples, 0.67%)</title><rect x="445.5" y="421" width="7.9" height="15.0" fill="rgb(251,25,7)" rx="2" ry="2" />
<text  x="448.46" y="431.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (6 samples, 0.11%)</title><rect x="48.2" y="485" width="1.4" height="15.0" fill="rgb(251,41,50)" rx="2" ry="2" />
<text  x="51.21" y="495.5" ></text>
</g>
<g >
<title>query::result::builder::builder (10 samples, 0.19%)</title><rect x="635.6" y="597" width="2.3" height="15.0" fill="rgb(211,108,45)" rx="2" ry="2" />
<text  x="638.61" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (23 samples, 0.44%)</title><rect x="54.1" y="485" width="5.2" height="15.0" fill="rgb(229,99,7)" rx="2" ry="2" />
<text  x="57.09" y="495.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (1 samples, 0.02%)</title><rect x="1021.6" y="341" width="0.2" height="15.0" fill="rgb(228,7,35)" rx="2" ry="2" />
<text  x="1024.56" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.25%)</title><rect x="963.7" y="533" width="2.9" height="15.0" fill="rgb(229,35,46)" rx="2" ry="2" />
<text  x="966.68" y="543.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="58.6" y="421" width="0.2" height="15.0" fill="rgb(220,77,9)" rx="2" ry="2" />
<text  x="61.61" y="431.5" ></text>
</g>
<g >
<title>database::add_column_family (6 samples, 0.11%)</title><rect x="107.9" y="661" width="1.4" height="15.0" fill="rgb(208,8,36)" rx="2" ry="2" />
<text  x="110.90" y="671.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt;, true, true&gt;::operator= (2 samples, 0.04%)</title><rect x="67.7" y="533" width="0.4" height="15.0" fill="rgb(243,55,9)" rx="2" ry="2" />
<text  x="70.65" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="1133.0" y="405" width="0.2" height="15.0" fill="rgb(215,178,20)" rx="2" ry="2" />
<text  x="1136.02" y="415.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="532.1" y="389" width="0.4" height="15.0" fill="rgb(206,77,23)" rx="2" ry="2" />
<text  x="535.06" y="399.5" ></text>
</g>
<g >
<title>schema::column_at (6 samples, 0.11%)</title><rect x="381.7" y="357" width="1.4" height="15.0" fill="rgb(229,119,19)" rx="2" ry="2" />
<text  x="384.70" y="367.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (1 samples, 0.02%)</title><rect x="1165.6" y="581" width="0.2" height="15.0" fill="rgb(243,99,13)" rx="2" ry="2" />
<text  x="1168.58" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (6 samples, 0.11%)</title><rect x="1140.0" y="645" width="1.4" height="15.0" fill="rgb(242,200,2)" rx="2" ry="2" />
<text  x="1143.03" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (6 samples, 0.11%)</title><rect x="1086.9" y="581" width="1.4" height="15.0" fill="rgb(237,11,34)" rx="2" ry="2" />
<text  x="1089.90" y="591.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="681.7" y="645" width="0.7" height="15.0" fill="rgb(213,17,15)" rx="2" ry="2" />
<text  x="684.73" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (19 samples, 0.36%)</title><rect x="1160.6" y="661" width="4.3" height="15.0" fill="rgb(216,101,23)" rx="2" ry="2" />
<text  x="1163.61" y="671.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1165.4" y="661" width="0.2" height="15.0" fill="rgb(220,144,10)" rx="2" ry="2" />
<text  x="1168.36" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1146.8" y="629" width="0.2" height="15.0" fill="rgb(223,200,0)" rx="2" ry="2" />
<text  x="1149.82" y="639.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="770.1" y="469" width="0.3" height="15.0" fill="rgb(216,210,48)" rx="2" ry="2" />
<text  x="773.14" y="479.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (268 samples, 5.14%)</title><rect x="789.6" y="581" width="60.6" height="15.0" fill="rgb(241,24,30)" rx="2" ry="2" />
<text  x="792.58" y="591.5" >servic..</text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="1127.8" y="389" width="0.2" height="15.0" fill="rgb(252,210,12)" rx="2" ry="2" />
<text  x="1130.82" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="781.9" y="517" width="0.2" height="15.0" fill="rgb(221,55,50)" rx="2" ry="2" />
<text  x="784.89" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::got_response (4 samples, 0.08%)</title><rect x="739.2" y="661" width="0.9" height="15.0" fill="rgb(209,42,42)" rx="2" ry="2" />
<text  x="742.16" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::conjunction::~conjunction (1 samples, 0.02%)</title><rect x="56.1" y="437" width="0.2" height="15.0" fill="rgb(231,94,51)" rx="2" ry="2" />
<text  x="59.12" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="591.3" y="517" width="0.7" height="15.0" fill="rgb(234,92,44)" rx="2" ry="2" />
<text  x="594.30" y="527.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (3 samples, 0.06%)</title><rect x="836.4" y="485" width="0.7" height="15.0" fill="rgb(235,26,5)" rx="2" ry="2" />
<text  x="839.38" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="494.8" y="453" width="0.2" height="15.0" fill="rgb(213,55,6)" rx="2" ry="2" />
<text  x="497.75" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="706.8" y="661" width="0.5" height="15.0" fill="rgb(219,63,39)" rx="2" ry="2" />
<text  x="709.83" y="671.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (9 samples, 0.17%)</title><rect x="771.5" y="437" width="2.0" height="15.0" fill="rgb(215,221,2)" rx="2" ry="2" />
<text  x="774.49" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;db::system_distributed_keyspace&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="20.2" y="517" width="0.2" height="15.0" fill="rgb(226,161,24)" rx="2" ry="2" />
<text  x="23.17" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="289.9" y="389" width="0.2" height="15.0" fill="rgb(207,29,18)" rx="2" ry="2" />
<text  x="292.91" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="972.7" y="517" width="1.2" height="15.0" fill="rgb(232,30,2)" rx="2" ry="2" />
<text  x="975.72" y="527.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="839.3" y="549" width="0.2" height="15.0" fill="rgb(221,43,26)" rx="2" ry="2" />
<text  x="842.32" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="1149.1" y="581" width="0.9" height="15.0" fill="rgb(251,37,41)" rx="2" ry="2" />
<text  x="1152.08" y="591.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="706.6" y="661" width="0.2" height="15.0" fill="rgb(241,82,36)" rx="2" ry="2" />
<text  x="709.60" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="254.6" y="277" width="0.3" height="15.0" fill="rgb(233,136,49)" rx="2" ry="2" />
<text  x="257.64" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="12.9" y="677" width="0.3" height="15.0" fill="rgb(246,179,42)" rx="2" ry="2" />
<text  x="15.94" y="687.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (1 samples, 0.02%)</title><rect x="1022.0" y="341" width="0.2" height="15.0" fill="rgb(245,144,47)" rx="2" ry="2" />
<text  x="1025.01" y="351.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (9 samples, 0.17%)</title><rect x="819.9" y="325" width="2.0" height="15.0" fill="rgb(232,137,9)" rx="2" ry="2" />
<text  x="822.88" y="335.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (7 samples, 0.13%)</title><rect x="509.9" y="501" width="1.6" height="15.0" fill="rgb(226,185,17)" rx="2" ry="2" />
<text  x="512.90" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mD (1 samples, 0.02%)</title><rect x="35.8" y="421" width="0.2" height="15.0" fill="rgb(245,142,5)" rx="2" ry="2" />
<text  x="38.78" y="431.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%)</title><rect x="891.8" y="501" width="0.2" height="15.0" fill="rgb(214,30,5)" rx="2" ry="2" />
<text  x="894.78" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (2 samples, 0.04%)</title><rect x="495.0" y="453" width="0.4" height="15.0" fill="rgb(247,39,43)" rx="2" ry="2" />
<text  x="497.98" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="697.8" y="645" width="0.2" height="15.0" fill="rgb(228,81,37)" rx="2" ry="2" />
<text  x="700.79" y="655.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="441.8" y="389" width="0.3" height="15.0" fill="rgb(205,208,37)" rx="2" ry="2" />
<text  x="444.85" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="63.4" y="373" width="0.2" height="15.0" fill="rgb(241,183,44)" rx="2" ry="2" />
<text  x="66.36" y="383.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::mark (1 samples, 0.02%)</title><rect x="38.3" y="421" width="0.2" height="15.0" fill="rgb(253,141,43)" rx="2" ry="2" />
<text  x="41.26" y="431.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="567.3" y="517" width="0.3" height="15.0" fill="rgb(238,199,36)" rx="2" ry="2" />
<text  x="570.33" y="527.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="839.1" y="565" width="0.2" height="15.0" fill="rgb(235,166,16)" rx="2" ry="2" />
<text  x="842.10" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (38 samples, 0.73%)</title><rect x="445.0" y="437" width="8.6" height="15.0" fill="rgb(230,37,37)" rx="2" ry="2" />
<text  x="448.01" y="447.5" ></text>
</g>
<g >
<title>table::update_cache (1 samples, 0.02%)</title><rect x="740.3" y="629" width="0.2" height="15.0" fill="rgb(218,218,32)" rx="2" ry="2" />
<text  x="743.29" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::do_merge_with (4 samples, 0.08%)</title><rect x="75.3" y="501" width="0.9" height="15.0" fill="rgb(221,63,30)" rx="2" ry="2" />
<text  x="78.34" y="511.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (5 samples, 0.10%)</title><rect x="70.8" y="565" width="1.2" height="15.0" fill="rgb(253,222,9)" rx="2" ry="2" />
<text  x="73.82" y="575.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="786.2" y="501" width="0.4" height="15.0" fill="rgb(209,212,19)" rx="2" ry="2" />
<text  x="789.19" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (22 samples, 0.42%)</title><rect x="1127.6" y="485" width="5.0" height="15.0" fill="rgb(251,13,36)" rx="2" ry="2" />
<text  x="1130.60" y="495.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%)</title><rect x="890.4" y="469" width="0.2" height="15.0" fill="rgb(226,119,26)" rx="2" ry="2" />
<text  x="893.42" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (3 samples, 0.06%)</title><rect x="942.2" y="581" width="0.7" height="15.0" fill="rgb(207,133,19)" rx="2" ry="2" />
<text  x="945.20" y="591.5" ></text>
</g>
<g >
<title>row::row (143 samples, 2.74%)</title><rect x="223.7" y="325" width="32.3" height="15.0" fill="rgb(221,64,26)" rx="2" ry="2" />
<text  x="226.66" y="335.5" >ro..</text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (1 samples, 0.02%)</title><rect x="1125.3" y="517" width="0.3" height="15.0" fill="rgb(242,1,49)" rx="2" ry="2" />
<text  x="1128.34" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="64.7" y="277" width="0.2" height="15.0" fill="rgb(226,220,5)" rx="2" ry="2" />
<text  x="67.72" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%)</title><rect x="837.1" y="453" width="0.6" height="15.0" fill="rgb(241,137,33)" rx="2" ry="2" />
<text  x="840.06" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cql3::raw_value&gt;::allocate (1 samples, 0.02%)</title><rect x="879.1" y="613" width="0.2" height="15.0" fill="rgb(246,224,49)" rx="2" ry="2" />
<text  x="882.12" y="623.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%)</title><rect x="76.7" y="453" width="0.2" height="15.0" fill="rgb(251,186,21)" rx="2" ry="2" />
<text  x="79.70" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="80.5" y="533" width="0.3" height="15.0" fill="rgb(237,8,1)" rx="2" ry="2" />
<text  x="83.54" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="475.8" y="565" width="0.2" height="15.0" fill="rgb(254,150,26)" rx="2" ry="2" />
<text  x="478.76" y="575.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="339.2" y="565" width="0.4" height="15.0" fill="rgb(214,12,33)" rx="2" ry="2" />
<text  x="342.20" y="575.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (48 samples, 0.92%)</title><rect x="907.2" y="565" width="10.8" height="15.0" fill="rgb(221,113,20)" rx="2" ry="2" />
<text  x="910.15" y="575.5" ></text>
</g>
<g >
<title>cql3::attributes::raw::raw (1 samples, 0.02%)</title><rect x="65.2" y="517" width="0.2" height="15.0" fill="rgb(206,12,43)" rx="2" ry="2" />
<text  x="68.17" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="213.0" y="405" width="0.3" height="15.0" fill="rgb(230,26,2)" rx="2" ry="2" />
<text  x="216.04" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (21 samples, 0.40%)</title><rect x="1127.8" y="437" width="4.8" height="15.0" fill="rgb(240,195,37)" rx="2" ry="2" />
<text  x="1130.82" y="447.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="824.9" y="277" width="0.2" height="15.0" fill="rgb(226,4,34)" rx="2" ry="2" />
<text  x="827.85" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.08%)</title><rect x="45.7" y="405" width="0.9" height="15.0" fill="rgb(222,92,25)" rx="2" ry="2" />
<text  x="48.72" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (5 samples, 0.10%)</title><rect x="702.3" y="613" width="1.1" height="15.0" fill="rgb(252,20,15)" rx="2" ry="2" />
<text  x="705.31" y="623.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (6 samples, 0.11%)</title><rect x="638.8" y="597" width="1.3" height="15.0" fill="rgb(206,147,27)" rx="2" ry="2" />
<text  x="641.78" y="607.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="740.5" y="581" width="0.2" height="15.0" fill="rgb(241,193,23)" rx="2" ry="2" />
<text  x="743.52" y="591.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.06%)</title><rect x="11.6" y="773" width="0.7" height="15.0" fill="rgb(216,9,8)" rx="2" ry="2" />
<text  x="14.58" y="783.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="379.0" y="357" width="0.4" height="15.0" fill="rgb(237,224,43)" rx="2" ry="2" />
<text  x="381.99" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="673.1" y="517" width="0.3" height="15.0" fill="rgb(242,21,48)" rx="2" ry="2" />
<text  x="676.14" y="527.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="265.9" y="341" width="0.3" height="15.0" fill="rgb(206,158,49)" rx="2" ry="2" />
<text  x="268.94" y="351.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (1 samples, 0.02%)</title><rect x="850.6" y="581" width="0.3" height="15.0" fill="rgb(206,153,16)" rx="2" ry="2" />
<text  x="853.63" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="883.4" y="677" width="0.2" height="15.0" fill="rgb(239,223,3)" rx="2" ry="2" />
<text  x="886.41" y="687.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (3 samples, 0.06%)</title><rect x="801.6" y="501" width="0.6" height="15.0" fill="rgb(240,171,48)" rx="2" ry="2" />
<text  x="804.57" y="511.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_row (1 samples, 0.02%)</title><rect x="107.4" y="597" width="0.3" height="15.0" fill="rgb(225,195,14)" rx="2" ry="2" />
<text  x="110.45" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (586 samples, 11.23%)</title><rect x="337.8" y="581" width="132.5" height="15.0" fill="rgb(220,161,24)" rx="2" ry="2" />
<text  x="340.84" y="591.5" >seastar::future&lt;..</text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (6 samples, 0.11%)</title><rect x="738.9" y="677" width="1.4" height="15.0" fill="rgb(246,204,22)" rx="2" ry="2" />
<text  x="741.94" y="687.5" ></text>
</g>
<g >
<title>seastar::futurize_apply&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="20.2" y="453" width="0.2" height="15.0" fill="rgb(249,185,35)" rx="2" ry="2" />
<text  x="23.17" y="463.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (6 samples, 0.11%)</title><rect x="107.9" y="677" width="1.4" height="15.0" fill="rgb(218,68,12)" rx="2" ry="2" />
<text  x="110.90" y="687.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (2 samples, 0.04%)</title><rect x="164.7" y="549" width="0.4" height="15.0" fill="rgb(217,225,34)" rx="2" ry="2" />
<text  x="167.65" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (6 samples, 0.11%)</title><rect x="946.0" y="581" width="1.4" height="15.0" fill="rgb(245,196,47)" rx="2" ry="2" />
<text  x="949.04" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (3 samples, 0.06%)</title><rect x="84.2" y="549" width="0.6" height="15.0" fill="rgb(247,79,3)" rx="2" ry="2" />
<text  x="87.16" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (1 samples, 0.02%)</title><rect x="58.2" y="437" width="0.2" height="15.0" fill="rgb(230,115,38)" rx="2" ry="2" />
<text  x="61.16" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="129.8" y="565" width="0.3" height="15.0" fill="rgb(245,123,15)" rx="2" ry="2" />
<text  x="132.83" y="575.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="303.5" y="389" width="0.2" height="15.0" fill="rgb(251,88,41)" rx="2" ry="2" />
<text  x="306.47" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="467.8" y="549" width="0.3" height="15.0" fill="rgb(225,164,42)" rx="2" ry="2" />
<text  x="470.85" y="559.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.65%)</title><rect x="1125.6" y="613" width="7.6" height="15.0" fill="rgb(246,34,12)" rx="2" ry="2" />
<text  x="1128.56" y="623.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::column_identifier_raw, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (2 samples, 0.04%)</title><rect x="47.1" y="501" width="0.4" height="15.0" fill="rgb(240,67,46)" rx="2" ry="2" />
<text  x="50.08" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="673.8" y="613" width="0.7" height="15.0" fill="rgb(243,129,39)" rx="2" ry="2" />
<text  x="676.82" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="1036.3" y="453" width="0.4" height="15.0" fill="rgb(228,149,53)" rx="2" ry="2" />
<text  x="1039.25" y="463.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (7 samples, 0.13%)</title><rect x="379.4" y="357" width="1.6" height="15.0" fill="rgb(239,128,18)" rx="2" ry="2" />
<text  x="382.44" y="367.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="695.8" y="661" width="0.6" height="15.0" fill="rgb(215,107,37)" rx="2" ry="2" />
<text  x="698.75" y="671.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="57.3" y="421" width="0.2" height="15.0" fill="rgb(219,109,52)" rx="2" ry="2" />
<text  x="60.25" y="431.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (1 samples, 0.02%)</title><rect x="1165.1" y="677" width="0.3" height="15.0" fill="rgb(253,137,31)" rx="2" ry="2" />
<text  x="1168.13" y="687.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="842.5" y="501" width="0.2" height="15.0" fill="rgb(219,47,30)" rx="2" ry="2" />
<text  x="845.49" y="511.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (5 samples, 0.10%)</title><rect x="354.8" y="405" width="1.1" height="15.0" fill="rgb(245,102,50)" rx="2" ry="2" />
<text  x="357.80" y="415.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (1 samples, 0.02%)</title><rect x="120.3" y="629" width="0.3" height="15.0" fill="rgb(217,126,31)" rx="2" ry="2" />
<text  x="123.34" y="639.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%)</title><rect x="19.9" y="565" width="0.3" height="15.0" fill="rgb(216,175,47)" rx="2" ry="2" />
<text  x="22.95" y="575.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::raw::modification_statement*, std::default_delete&lt;cql3::statements::raw::modification_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="67.2" y="485" width="0.2" height="15.0" fill="rgb(220,116,47)" rx="2" ry="2" />
<text  x="70.20" y="495.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="62.9" y="309" width="0.2" height="15.0" fill="rgb(212,179,21)" rx="2" ry="2" />
<text  x="65.91" y="319.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="716.1" y="469" width="0.2" height="15.0" fill="rgb(249,201,19)" rx="2" ry="2" />
<text  x="719.10" y="479.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (1 samples, 0.02%)</title><rect x="1165.8" y="613" width="0.2" height="15.0" fill="rgb(237,172,30)" rx="2" ry="2" />
<text  x="1168.81" y="623.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="41.2" y="309" width="0.2" height="15.0" fill="rgb(234,127,0)" rx="2" ry="2" />
<text  x="44.20" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="45.0" y="453" width="0.3" height="15.0" fill="rgb(220,128,12)" rx="2" ry="2" />
<text  x="48.05" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="887.7" y="437" width="0.2" height="15.0" fill="rgb(205,140,24)" rx="2" ry="2" />
<text  x="890.71" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (1 samples, 0.02%)</title><rect x="829.4" y="453" width="0.2" height="15.0" fill="rgb(244,192,38)" rx="2" ry="2" />
<text  x="832.38" y="463.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="574.3" y="469" width="0.3" height="15.0" fill="rgb(211,180,12)" rx="2" ry="2" />
<text  x="577.34" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1100.9" y="565" width="0.2" height="15.0" fill="rgb(232,117,19)" rx="2" ry="2" />
<text  x="1103.92" y="575.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::modification_statement, std::default_delete&lt;cql3::statements::raw::modification_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="67.2" y="517" width="0.2" height="15.0" fill="rgb(209,216,52)" rx="2" ry="2" />
<text  x="70.20" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (61 samples, 1.17%)</title><rect x="47.8" y="517" width="13.8" height="15.0" fill="rgb(237,29,45)" rx="2" ry="2" />
<text  x="50.76" y="527.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="94.6" y="661" width="0.6" height="15.0" fill="rgb(214,29,45)" rx="2" ry="2" />
<text  x="97.56" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="739.8" y="597" width="0.3" height="15.0" fill="rgb(240,147,24)" rx="2" ry="2" />
<text  x="742.84" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="1086.4" y="581" width="0.5" height="15.0" fill="rgb(252,25,45)" rx="2" ry="2" />
<text  x="1089.45" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="80.3" y="533" width="0.2" height="15.0" fill="rgb(226,46,48)" rx="2" ry="2" />
<text  x="83.32" y="543.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (32 samples, 0.61%)</title><rect x="1118.3" y="661" width="7.3" height="15.0" fill="rgb(207,71,37)" rx="2" ry="2" />
<text  x="1121.33" y="671.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%)</title><rect x="522.1" y="469" width="0.2" height="15.0" fill="rgb(208,4,22)" rx="2" ry="2" />
<text  x="525.11" y="479.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%)</title><rect x="770.8" y="453" width="0.2" height="15.0" fill="rgb(220,74,42)" rx="2" ry="2" />
<text  x="773.82" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (2 samples, 0.04%)</title><rect x="105.9" y="677" width="0.4" height="15.0" fill="rgb(211,205,17)" rx="2" ry="2" />
<text  x="108.87" y="687.5" ></text>
</g>
<g >
<title>utils::crc32::process (1 samples, 0.02%)</title><rect x="1123.5" y="421" width="0.3" height="15.0" fill="rgb(239,30,27)" rx="2" ry="2" />
<text  x="1126.53" y="431.5" ></text>
</g>
<g >
<title>database::find_column_family (7 samples, 0.13%)</title><rect x="1009.8" y="421" width="1.6" height="15.0" fill="rgb(212,145,21)" rx="2" ry="2" />
<text  x="1012.80" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="57.7" y="437" width="0.5" height="15.0" fill="rgb(250,51,10)" rx="2" ry="2" />
<text  x="60.71" y="447.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::drop_table_statement*, std::default_delete&lt;cql3::statements::drop_table_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="66.5" y="485" width="0.3" height="15.0" fill="rgb(236,203,42)" rx="2" ry="2" />
<text  x="69.52" y="495.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="505.6" y="501" width="1.1" height="15.0" fill="rgb(213,208,38)" rx="2" ry="2" />
<text  x="508.60" y="511.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (6 samples, 0.11%)</title><rect x="561.5" y="501" width="1.3" height="15.0" fill="rgb(254,78,6)" rx="2" ry="2" />
<text  x="564.45" y="511.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (2 samples, 0.04%)</title><rect x="113.8" y="645" width="0.4" height="15.0" fill="rgb(214,8,25)" rx="2" ry="2" />
<text  x="116.78" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (2 samples, 0.04%)</title><rect x="73.5" y="517" width="0.5" height="15.0" fill="rgb(208,191,6)" rx="2" ry="2" />
<text  x="76.53" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="306.4" y="437" width="0.2" height="15.0" fill="rgb(244,150,21)" rx="2" ry="2" />
<text  x="309.41" y="447.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (1 samples, 0.02%)</title><rect x="385.3" y="357" width="0.2" height="15.0" fill="rgb(217,68,46)" rx="2" ry="2" />
<text  x="388.32" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (2 samples, 0.04%)</title><rect x="572.5" y="485" width="0.5" height="15.0" fill="rgb(220,5,45)" rx="2" ry="2" />
<text  x="575.53" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (3 samples, 0.06%)</title><rect x="716.1" y="677" width="0.7" height="15.0" fill="rgb(231,113,41)" rx="2" ry="2" />
<text  x="719.10" y="687.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (151 samples, 2.89%)</title><rect x="800.4" y="517" width="34.2" height="15.0" fill="rgb(240,217,44)" rx="2" ry="2" />
<text  x="803.43" y="527.5" >se..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="320.4" y="485" width="0.3" height="15.0" fill="rgb(222,74,20)" rx="2" ry="2" />
<text  x="323.43" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="20.2" y="565" width="0.2" height="15.0" fill="rgb(234,60,30)" rx="2" ry="2" />
<text  x="23.17" y="575.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (4 samples, 0.08%)</title><rect x="384.4" y="357" width="0.9" height="15.0" fill="rgb(251,191,9)" rx="2" ry="2" />
<text  x="387.42" y="367.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (3 samples, 0.06%)</title><rect x="884.8" y="661" width="0.6" height="15.0" fill="rgb(220,224,5)" rx="2" ry="2" />
<text  x="887.77" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%)</title><rect x="27.4" y="357" width="0.2" height="15.0" fill="rgb(212,209,7)" rx="2" ry="2" />
<text  x="30.41" y="367.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::components (1 samples, 0.02%)</title><rect x="1130.5" y="277" width="0.3" height="15.0" fill="rgb(211,140,26)" rx="2" ry="2" />
<text  x="1133.54" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (3 samples, 0.06%)</title><rect x="95.5" y="661" width="0.6" height="15.0" fill="rgb(238,196,8)" rx="2" ry="2" />
<text  x="98.46" y="671.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.11%)</title><rect x="939.9" y="581" width="1.4" height="15.0" fill="rgb(253,106,46)" rx="2" ry="2" />
<text  x="942.94" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%)</title><rect x="48.7" y="469" width="0.2" height="15.0" fill="rgb(224,144,4)" rx="2" ry="2" />
<text  x="51.66" y="479.5" ></text>
</g>
<g >
<title>schema::column_at (5 samples, 0.10%)</title><rect x="262.6" y="277" width="1.1" height="15.0" fill="rgb(220,218,6)" rx="2" ry="2" />
<text  x="265.55" y="287.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (2 samples, 0.04%)</title><rect x="43.7" y="501" width="0.4" height="15.0" fill="rgb(249,226,7)" rx="2" ry="2" />
<text  x="46.69" y="511.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (9 samples, 0.17%)</title><rect x="80.3" y="645" width="2.1" height="15.0" fill="rgb(225,179,54)" rx="2" ry="2" />
<text  x="83.32" y="655.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="62.9" y="421" width="0.2" height="15.0" fill="rgb(237,6,33)" rx="2" ry="2" />
<text  x="65.91" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::raw::select_statement::prepare (1 samples, 0.02%)</title><rect x="83.5" y="485" width="0.2" height="15.0" fill="rgb(247,124,31)" rx="2" ry="2" />
<text  x="86.48" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (10 samples, 0.19%)</title><rect x="843.2" y="485" width="2.2" height="15.0" fill="rgb(237,28,53)" rx="2" ry="2" />
<text  x="846.17" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.61%)</title><rect x="1118.3" y="597" width="7.3" height="15.0" fill="rgb(240,42,53)" rx="2" ry="2" />
<text  x="1121.33" y="607.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%)</title><rect x="885.0" y="597" width="0.4" height="15.0" fill="rgb(223,109,17)" rx="2" ry="2" />
<text  x="888.00" y="607.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (1 samples, 0.02%)</title><rect x="754.1" y="469" width="0.2" height="15.0" fill="rgb(251,188,4)" rx="2" ry="2" />
<text  x="757.09" y="479.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (16 samples, 0.31%)</title><rect x="327.7" y="469" width="3.6" height="15.0" fill="rgb(246,106,34)" rx="2" ry="2" />
<text  x="330.67" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (16 samples, 0.31%)</title><rect x="1095.5" y="565" width="3.6" height="15.0" fill="rgb(230,189,39)" rx="2" ry="2" />
<text  x="1098.49" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="328.8" y="437" width="2.0" height="15.0" fill="rgb(212,99,40)" rx="2" ry="2" />
<text  x="331.80" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (1 samples, 0.02%)</title><rect x="829.8" y="453" width="0.3" height="15.0" fill="rgb(240,88,18)" rx="2" ry="2" />
<text  x="832.83" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="699.1" y="661" width="0.3" height="15.0" fill="rgb(242,62,22)" rx="2" ry="2" />
<text  x="702.14" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (3 samples, 0.06%)</title><rect x="794.8" y="533" width="0.7" height="15.0" fill="rgb(251,50,46)" rx="2" ry="2" />
<text  x="797.78" y="543.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (2 samples, 0.04%)</title><rect x="732.4" y="597" width="0.4" height="15.0" fill="rgb(243,12,33)" rx="2" ry="2" />
<text  x="735.38" y="607.5" ></text>
</g>
<g >
<title>cql3::statements::raw::select_statement::prepare (1 samples, 0.02%)</title><rect x="83.5" y="501" width="0.2" height="15.0" fill="rgb(254,4,42)" rx="2" ry="2" />
<text  x="86.48" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (5 samples, 0.10%)</title><rect x="614.8" y="517" width="1.1" height="15.0" fill="rgb(215,36,39)" rx="2" ry="2" />
<text  x="617.81" y="527.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="755.0" y="469" width="0.2" height="15.0" fill="rgb(236,180,37)" rx="2" ry="2" />
<text  x="757.99" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="838.2" y="437" width="0.2" height="15.0" fill="rgb(233,164,54)" rx="2" ry="2" />
<text  x="841.19" y="447.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="673.6" y="597" width="0.2" height="15.0" fill="rgb(223,5,42)" rx="2" ry="2" />
<text  x="676.59" y="607.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (53 samples, 1.02%)</title><rect x="1062.9" y="469" width="12.0" height="15.0" fill="rgb(208,169,0)" rx="2" ry="2" />
<text  x="1065.93" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (1 samples, 0.02%)</title><rect x="1145.5" y="629" width="0.2" height="15.0" fill="rgb(223,190,12)" rx="2" ry="2" />
<text  x="1148.46" y="639.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::add_operation (2 samples, 0.04%)</title><rect x="72.4" y="597" width="0.5" height="15.0" fill="rgb(232,133,3)" rx="2" ry="2" />
<text  x="75.40" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%)</title><rect x="680.8" y="613" width="0.5" height="15.0" fill="rgb(241,52,0)" rx="2" ry="2" />
<text  x="683.83" y="623.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.23%)</title><rect x="1095.7" y="533" width="2.7" height="15.0" fill="rgb(210,115,18)" rx="2" ry="2" />
<text  x="1098.72" y="543.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%)</title><rect x="82.4" y="661" width="0.2" height="15.0" fill="rgb(253,185,36)" rx="2" ry="2" />
<text  x="85.35" y="671.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="843.8" y="453" width="0.5" height="15.0" fill="rgb(228,15,50)" rx="2" ry="2" />
<text  x="846.85" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (4 samples, 0.08%)</title><rect x="456.3" y="421" width="0.9" height="15.0" fill="rgb(246,196,54)" rx="2" ry="2" />
<text  x="459.32" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::forward_to (1 samples, 0.02%)</title><rect x="740.7" y="677" width="0.3" height="15.0" fill="rgb(243,225,23)" rx="2" ry="2" />
<text  x="743.75" y="687.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (9 samples, 0.17%)</title><rect x="982.7" y="501" width="2.0" height="15.0" fill="rgb(206,127,21)" rx="2" ry="2" />
<text  x="985.67" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="42.1" y="485" width="0.2" height="15.0" fill="rgb(211,51,24)" rx="2" ry="2" />
<text  x="45.11" y="495.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="12.9" y="757" width="0.3" height="15.0" fill="rgb(238,115,22)" rx="2" ry="2" />
<text  x="15.94" y="767.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (2 samples, 0.04%)</title><rect x="576.6" y="421" width="0.5" height="15.0" fill="rgb(236,91,51)" rx="2" ry="2" />
<text  x="579.60" y="431.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (2 samples, 0.04%)</title><rect x="1134.6" y="677" width="0.5" height="15.0" fill="rgb(208,178,12)" rx="2" ry="2" />
<text  x="1137.61" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="795.2" y="501" width="0.3" height="15.0" fill="rgb(211,97,28)" rx="2" ry="2" />
<text  x="798.23" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="721.1" y="629" width="1.3" height="15.0" fill="rgb(207,215,9)" rx="2" ry="2" />
<text  x="724.07" y="639.5" ></text>
</g>
<g >
<title>query_result_builder::consume (191 samples, 3.66%)</title><rect x="370.6" y="389" width="43.2" height="15.0" fill="rgb(206,50,52)" rx="2" ry="2" />
<text  x="373.62" y="399.5" >quer..</text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="199.0" y="437" width="0.2" height="15.0" fill="rgb(253,181,42)" rx="2" ry="2" />
<text  x="202.02" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="687.4" y="645" width="0.2" height="15.0" fill="rgb(239,107,52)" rx="2" ry="2" />
<text  x="690.39" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="62.0" y="453" width="0.2" height="15.0" fill="rgb(209,162,6)" rx="2" ry="2" />
<text  x="65.00" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%)</title><rect x="716.8" y="629" width="0.4" height="15.0" fill="rgb(248,47,21)" rx="2" ry="2" />
<text  x="719.78" y="639.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="60.9" y="421" width="0.2" height="15.0" fill="rgb(219,183,1)" rx="2" ry="2" />
<text  x="63.87" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="40.7" y="453" width="0.3" height="15.0" fill="rgb(207,86,45)" rx="2" ry="2" />
<text  x="43.75" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator= (1 samples, 0.02%)</title><rect x="42.8" y="517" width="0.2" height="15.0" fill="rgb(248,83,21)" rx="2" ry="2" />
<text  x="45.78" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="1125.8" y="485" width="1.6" height="15.0" fill="rgb(235,63,46)" rx="2" ry="2" />
<text  x="1128.79" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (2 samples, 0.04%)</title><rect x="45.7" y="357" width="0.5" height="15.0" fill="rgb(209,118,17)" rx="2" ry="2" />
<text  x="48.72" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="325.4" y="453" width="0.2" height="15.0" fill="rgb(250,147,23)" rx="2" ry="2" />
<text  x="328.41" y="463.5" ></text>
</g>
<g >
<title>LZ4_compress_fast_extState (1 samples, 0.02%)</title><rect x="10.0" y="805" width="0.2" height="15.0" fill="rgb(248,182,35)" rx="2" ry="2" />
<text  x="13.00" y="815.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (3 samples, 0.06%)</title><rect x="896.5" y="645" width="0.7" height="15.0" fill="rgb(213,4,13)" rx="2" ry="2" />
<text  x="899.53" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (3 samples, 0.06%)</title><rect x="915.1" y="533" width="0.6" height="15.0" fill="rgb(244,9,47)" rx="2" ry="2" />
<text  x="918.07" y="543.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (1 samples, 0.02%)</title><rect x="645.6" y="613" width="0.2" height="15.0" fill="rgb(221,209,54)" rx="2" ry="2" />
<text  x="648.56" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1131.9" y="325" width="0.2" height="15.0" fill="rgb(225,33,17)" rx="2" ry="2" />
<text  x="1134.89" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="1163.5" y="597" width="0.3" height="15.0" fill="rgb(228,164,50)" rx="2" ry="2" />
<text  x="1166.55" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="61.8" y="405" width="0.2" height="15.0" fill="rgb(238,226,36)" rx="2" ry="2" />
<text  x="64.78" y="415.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%)</title><rect x="1039.9" y="453" width="0.2" height="15.0" fill="rgb(237,40,13)" rx="2" ry="2" />
<text  x="1042.87" y="463.5" ></text>
</g>
<g >
<title>std::forward&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt; &gt; (1 samples, 0.02%)</title><rect x="51.6" y="469" width="0.2" height="15.0" fill="rgb(253,158,53)" rx="2" ry="2" />
<text  x="54.60" y="479.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%)</title><rect x="483.2" y="517" width="0.2" height="15.0" fill="rgb(250,46,45)" rx="2" ry="2" />
<text  x="486.22" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (2 samples, 0.04%)</title><rect x="1077.9" y="533" width="0.4" height="15.0" fill="rgb(229,38,29)" rx="2" ry="2" />
<text  x="1080.86" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="182.3" y="421" width="0.4" height="15.0" fill="rgb(209,159,31)" rx="2" ry="2" />
<text  x="185.29" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (2 samples, 0.04%)</title><rect x="49.6" y="485" width="0.4" height="15.0" fill="rgb(224,8,8)" rx="2" ry="2" />
<text  x="52.57" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (1 samples, 0.02%)</title><rect x="27.2" y="357" width="0.2" height="15.0" fill="rgb(244,165,3)" rx="2" ry="2" />
<text  x="30.18" y="367.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="41.2" y="485" width="0.2" height="15.0" fill="rgb(251,35,14)" rx="2" ry="2" />
<text  x="44.20" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (32 samples, 0.61%)</title><rect x="907.8" y="501" width="7.3" height="15.0" fill="rgb(240,72,21)" rx="2" ry="2" />
<text  x="910.83" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::query_options&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="695.1" y="661" width="0.2" height="15.0" fill="rgb(219,185,21)" rx="2" ry="2" />
<text  x="698.07" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="674.0" y="469" width="0.3" height="15.0" fill="rgb(231,228,34)" rx="2" ry="2" />
<text  x="677.05" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (3 samples, 0.06%)</title><rect x="1049.6" y="453" width="0.7" height="15.0" fill="rgb(232,156,0)" rx="2" ry="2" />
<text  x="1052.59" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (32 samples, 0.61%)</title><rect x="445.7" y="389" width="7.2" height="15.0" fill="rgb(225,74,34)" rx="2" ry="2" />
<text  x="448.69" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="52.3" y="405" width="0.2" height="15.0" fill="rgb(223,122,40)" rx="2" ry="2" />
<text  x="55.28" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1133.0" y="437" width="0.2" height="15.0" fill="rgb(249,43,35)" rx="2" ry="2" />
<text  x="1136.02" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="883.0" y="629" width="0.2" height="15.0" fill="rgb(226,80,19)" rx="2" ry="2" />
<text  x="885.96" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%)</title><rect x="951.0" y="533" width="0.2" height="15.0" fill="rgb(240,13,21)" rx="2" ry="2" />
<text  x="954.02" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (9 samples, 0.17%)</title><rect x="620.9" y="533" width="2.0" height="15.0" fill="rgb(229,185,7)" rx="2" ry="2" />
<text  x="623.91" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.10%)</title><rect x="26.5" y="437" width="1.1" height="15.0" fill="rgb(229,128,37)" rx="2" ry="2" />
<text  x="29.51" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (1 samples, 0.02%)</title><rect x="640.1" y="613" width="0.3" height="15.0" fill="rgb(207,215,27)" rx="2" ry="2" />
<text  x="643.13" y="623.5" ></text>
</g>
<g >
<title>__libc_start_main (4,785 samples, 91.68%)</title><rect x="87.1" y="805" width="1081.9" height="15.0" fill="rgb(205,197,22)" rx="2" ry="2" />
<text  x="90.10" y="815.5" >__libc_start_main</text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="71.7" y="549" width="0.3" height="15.0" fill="rgb(240,129,38)" rx="2" ry="2" />
<text  x="74.72" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="95.2" y="661" width="0.3" height="15.0" fill="rgb(248,98,44)" rx="2" ry="2" />
<text  x="98.24" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="942.6" y="565" width="0.3" height="15.0" fill="rgb(216,229,51)" rx="2" ry="2" />
<text  x="945.65" y="575.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (43 samples, 0.82%)</title><rect x="423.3" y="341" width="9.7" height="15.0" fill="rgb(250,131,54)" rx="2" ry="2" />
<text  x="426.31" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (2 samples, 0.04%)</title><rect x="44.4" y="501" width="0.4" height="15.0" fill="rgb(219,78,24)" rx="2" ry="2" />
<text  x="47.37" y="511.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (50 samples, 0.96%)</title><rect x="726.5" y="661" width="11.3" height="15.0" fill="rgb(211,71,3)" rx="2" ry="2" />
<text  x="729.50" y="671.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (86 samples, 1.65%)</title><rect x="918.2" y="581" width="19.5" height="15.0" fill="rgb(254,40,51)" rx="2" ry="2" />
<text  x="921.23" y="591.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="997.8" y="469" width="0.2" height="15.0" fill="rgb(246,177,37)" rx="2" ry="2" />
<text  x="1000.82" y="479.5" ></text>
</g>
<g >
<title>serialize (1 samples, 0.02%)</title><rect x="74.0" y="485" width="0.2" height="15.0" fill="rgb(210,16,11)" rx="2" ry="2" />
<text  x="76.99" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="108.1" y="453" width="0.5" height="15.0" fill="rgb(210,111,52)" rx="2" ry="2" />
<text  x="111.13" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="55.7" y="389" width="0.2" height="15.0" fill="rgb(244,75,13)" rx="2" ry="2" />
<text  x="58.67" y="399.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="132.8" y="629" width="0.2" height="15.0" fill="rgb(223,70,40)" rx="2" ry="2" />
<text  x="135.77" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (5 samples, 0.10%)</title><rect x="165.1" y="549" width="1.1" height="15.0" fill="rgb(223,223,49)" rx="2" ry="2" />
<text  x="168.10" y="559.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (2 samples, 0.04%)</title><rect x="814.0" y="405" width="0.5" height="15.0" fill="rgb(208,133,0)" rx="2" ry="2" />
<text  x="817.00" y="415.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (2 samples, 0.04%)</title><rect x="521.7" y="453" width="0.4" height="15.0" fill="rgb(247,172,6)" rx="2" ry="2" />
<text  x="524.66" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="1037.8" y="405" width="0.9" height="15.0" fill="rgb(235,142,50)" rx="2" ry="2" />
<text  x="1040.84" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="444.6" y="389" width="0.2" height="15.0" fill="rgb(241,170,41)" rx="2" ry="2" />
<text  x="447.56" y="399.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="48.0" y="293" width="0.2" height="15.0" fill="rgb(244,209,37)" rx="2" ry="2" />
<text  x="50.98" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="560.5" y="501" width="0.3" height="15.0" fill="rgb(230,192,31)" rx="2" ry="2" />
<text  x="563.55" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::stats (2 samples, 0.04%)</title><rect x="198.6" y="421" width="0.4" height="15.0" fill="rgb(248,8,32)" rx="2" ry="2" />
<text  x="201.56" y="431.5" ></text>
</g>
<g >
<title>bytes_ostream::view (1 samples, 0.02%)</title><rect x="634.3" y="565" width="0.2" height="15.0" fill="rgb(243,152,25)" rx="2" ry="2" />
<text  x="637.25" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="1084.4" y="549" width="0.2" height="15.0" fill="rgb(246,206,54)" rx="2" ry="2" />
<text  x="1087.41" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (2 samples, 0.04%)</title><rect x="457.4" y="453" width="0.5" height="15.0" fill="rgb(223,193,33)" rx="2" ry="2" />
<text  x="460.45" y="463.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="62.9" y="453" width="0.2" height="15.0" fill="rgb(207,173,36)" rx="2" ry="2" />
<text  x="65.91" y="463.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (16 samples, 0.31%)</title><rect x="846.6" y="549" width="3.6" height="15.0" fill="rgb(230,219,32)" rx="2" ry="2" />
<text  x="849.56" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="1109.7" y="565" width="0.5" height="15.0" fill="rgb(230,218,47)" rx="2" ry="2" />
<text  x="1112.74" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="775.1" y="581" width="0.2" height="15.0" fill="rgb(213,173,19)" rx="2" ry="2" />
<text  x="778.11" y="591.5" ></text>
</g>
<g >
<title>compound_type&lt; (10 samples, 0.19%)</title><rect x="922.1" y="533" width="2.2" height="15.0" fill="rgb(240,209,8)" rx="2" ry="2" />
<text  x="925.08" y="543.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (7 samples, 0.13%)</title><rect x="1125.8" y="453" width="1.6" height="15.0" fill="rgb(225,117,48)" rx="2" ry="2" />
<text  x="1128.79" y="463.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (1 samples, 0.02%)</title><rect x="138.0" y="581" width="0.2" height="15.0" fill="rgb(219,8,44)" rx="2" ry="2" />
<text  x="140.97" y="591.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%)</title><rect x="76.7" y="405" width="0.2" height="15.0" fill="rgb(232,24,30)" rx="2" ry="2" />
<text  x="79.70" y="415.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%)</title><rect x="513.7" y="453" width="0.3" height="15.0" fill="rgb(216,149,26)" rx="2" ry="2" />
<text  x="516.74" y="463.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (7 samples, 0.13%)</title><rect x="341.5" y="549" width="1.5" height="15.0" fill="rgb(251,3,13)" rx="2" ry="2" />
<text  x="344.46" y="559.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_tokenStartCharIndex (1 samples, 0.02%)</title><rect x="31.7" y="437" width="0.2" height="15.0" fill="rgb(238,140,54)" rx="2" ry="2" />
<text  x="34.71" y="447.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (2 samples, 0.04%)</title><rect x="1029.0" y="421" width="0.5" height="15.0" fill="rgb(221,30,45)" rx="2" ry="2" />
<text  x="1032.02" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (6 samples, 0.11%)</title><rect x="721.1" y="613" width="1.3" height="15.0" fill="rgb(206,216,25)" rx="2" ry="2" />
<text  x="724.07" y="623.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (21 samples, 0.40%)</title><rect x="974.1" y="517" width="4.7" height="15.0" fill="rgb(253,146,51)" rx="2" ry="2" />
<text  x="977.08" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::get_value (1 samples, 0.02%)</title><rect x="743.5" y="677" width="0.2" height="15.0" fill="rgb(212,202,28)" rx="2" ry="2" />
<text  x="746.46" y="687.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (1 samples, 0.02%)</title><rect x="605.8" y="485" width="0.2" height="15.0" fill="rgb(236,75,31)" rx="2" ry="2" />
<text  x="608.77" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (4 samples, 0.08%)</title><rect x="1147.7" y="597" width="0.9" height="15.0" fill="rgb(247,157,3)" rx="2" ry="2" />
<text  x="1150.72" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (8 samples, 0.15%)</title><rect x="52.3" y="453" width="1.8" height="15.0" fill="rgb(209,76,11)" rx="2" ry="2" />
<text  x="55.28" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="54.3" y="373" width="0.5" height="15.0" fill="rgb(218,12,38)" rx="2" ry="2" />
<text  x="57.32" y="383.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (365 samples, 6.99%)</title><rect x="356.2" y="405" width="82.5" height="15.0" fill="rgb(243,224,46)" rx="2" ry="2" />
<text  x="359.15" y="415.5" >compact_m..</text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="40.7" y="501" width="0.3" height="15.0" fill="rgb(232,94,36)" rx="2" ry="2" />
<text  x="43.75" y="511.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (4 samples, 0.08%)</title><rect x="1033.3" y="437" width="0.9" height="15.0" fill="rgb(248,56,42)" rx="2" ry="2" />
<text  x="1036.31" y="447.5" ></text>
</g>
<g >
<title>std::forward&lt;cql3::operation::raw_update*&amp;&gt; (1 samples, 0.02%)</title><rect x="60.6" y="421" width="0.3" height="15.0" fill="rgb(207,167,16)" rx="2" ry="2" />
<text  x="63.65" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (11 samples, 0.21%)</title><rect x="442.1" y="389" width="2.5" height="15.0" fill="rgb(229,170,18)" rx="2" ry="2" />
<text  x="445.07" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (7 samples, 0.13%)</title><rect x="878.7" y="645" width="1.5" height="15.0" fill="rgb(231,158,48)" rx="2" ry="2" />
<text  x="881.66" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (5 samples, 0.10%)</title><rect x="500.0" y="453" width="1.1" height="15.0" fill="rgb(237,56,27)" rx="2" ry="2" />
<text  x="502.95" y="463.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="576.4" y="453" width="0.2" height="15.0" fill="rgb(238,170,42)" rx="2" ry="2" />
<text  x="579.37" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (2 samples, 0.04%)</title><rect x="799.5" y="533" width="0.5" height="15.0" fill="rgb(252,163,47)" rx="2" ry="2" />
<text  x="802.53" y="543.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.04%)</title><rect x="10.5" y="773" width="0.4" height="15.0" fill="rgb(224,34,48)" rx="2" ry="2" />
<text  x="13.45" y="783.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="631.1" y="565" width="0.7" height="15.0" fill="rgb(219,26,49)" rx="2" ry="2" />
<text  x="634.09" y="575.5" ></text>
</g>
<g >
<title>sstables::metadata_collector::update_min_max_components (1 samples, 0.02%)</title><rect x="85.7" y="581" width="0.3" height="15.0" fill="rgb(236,62,29)" rx="2" ry="2" />
<text  x="88.74" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (2 samples, 0.04%)</title><rect x="1076.0" y="501" width="0.5" height="15.0" fill="rgb(252,148,52)" rx="2" ry="2" />
<text  x="1079.05" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (3 samples, 0.06%)</title><rect x="646.5" y="613" width="0.6" height="15.0" fill="rgb(207,227,6)" rx="2" ry="2" />
<text  x="649.46" y="623.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (2 samples, 0.04%)</title><rect x="751.4" y="581" width="0.4" height="15.0" fill="rgb(250,173,53)" rx="2" ry="2" />
<text  x="754.37" y="591.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (3 samples, 0.06%)</title><rect x="85.1" y="581" width="0.6" height="15.0" fill="rgb(231,141,16)" rx="2" ry="2" />
<text  x="88.06" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="673.1" y="421" width="0.3" height="15.0" fill="rgb(230,128,7)" rx="2" ry="2" />
<text  x="676.14" y="431.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%)</title><rect x="850.9" y="581" width="0.2" height="15.0" fill="rgb(245,207,13)" rx="2" ry="2" />
<text  x="853.85" y="591.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="324.0" y="485" width="0.3" height="15.0" fill="rgb(230,200,5)" rx="2" ry="2" />
<text  x="327.05" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="622.9" y="533" width="0.3" height="15.0" fill="rgb(230,151,21)" rx="2" ry="2" />
<text  x="625.95" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="385.5" y="357" width="0.3" height="15.0" fill="rgb(211,42,52)" rx="2" ry="2" />
<text  x="388.55" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (13 samples, 0.25%)</title><rect x="854.7" y="565" width="2.9" height="15.0" fill="rgb(221,67,6)" rx="2" ry="2" />
<text  x="857.70" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%)</title><rect x="224.8" y="309" width="0.2" height="15.0" fill="rgb(219,75,3)" rx="2" ry="2" />
<text  x="227.79" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="352.3" y="421" width="0.2" height="15.0" fill="rgb(213,30,7)" rx="2" ry="2" />
<text  x="355.31" y="431.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (2 samples, 0.04%)</title><rect x="128.2" y="565" width="0.5" height="15.0" fill="rgb(244,134,33)" rx="2" ry="2" />
<text  x="131.25" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.08%)</title><rect x="45.7" y="437" width="0.9" height="15.0" fill="rgb(235,145,49)" rx="2" ry="2" />
<text  x="48.72" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (5 samples, 0.10%)</title><rect x="776.7" y="581" width="1.1" height="15.0" fill="rgb(213,99,48)" rx="2" ry="2" />
<text  x="779.69" y="591.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (1 samples, 0.02%)</title><rect x="22.9" y="645" width="0.2" height="15.0" fill="rgb(233,106,2)" rx="2" ry="2" />
<text  x="25.89" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (5 samples, 0.10%)</title><rect x="273.2" y="373" width="1.1" height="15.0" fill="rgb(238,74,21)" rx="2" ry="2" />
<text  x="276.18" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (9 samples, 0.17%)</title><rect x="459.9" y="469" width="2.1" height="15.0" fill="rgb(214,114,9)" rx="2" ry="2" />
<text  x="462.93" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (25 samples, 0.48%)</title><rect x="258.3" y="309" width="5.6" height="15.0" fill="rgb(206,105,32)" rx="2" ry="2" />
<text  x="261.25" y="319.5" ></text>
</g>
<g >
<title>db::schema_tables::v3::functions (1 samples, 0.02%)</title><rect x="19.7" y="437" width="0.2" height="15.0" fill="rgb(227,128,23)" rx="2" ry="2" />
<text  x="22.72" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (1 samples, 0.02%)</title><rect x="72.2" y="597" width="0.2" height="15.0" fill="rgb(236,7,44)" rx="2" ry="2" />
<text  x="75.18" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="49.1" y="405" width="0.5" height="15.0" fill="rgb(250,36,7)" rx="2" ry="2" />
<text  x="52.11" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="653.7" y="533" width="0.2" height="15.0" fill="rgb(218,36,53)" rx="2" ry="2" />
<text  x="656.70" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="980.4" y="533" width="0.2" height="15.0" fill="rgb(210,42,14)" rx="2" ry="2" />
<text  x="983.41" y="543.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (2 samples, 0.04%)</title><rect x="766.5" y="549" width="0.5" height="15.0" fill="rgb(230,188,1)" rx="2" ry="2" />
<text  x="769.52" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (27 samples, 0.52%)</title><rect x="202.9" y="405" width="6.1" height="15.0" fill="rgb(218,27,29)" rx="2" ry="2" />
<text  x="205.86" y="415.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (3 samples, 0.06%)</title><rect x="1019.5" y="325" width="0.7" height="15.0" fill="rgb(247,123,44)" rx="2" ry="2" />
<text  x="1022.52" y="335.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (84 samples, 1.61%)</title><rect x="175.5" y="469" width="19.0" height="15.0" fill="rgb(211,40,51)" rx="2" ry="2" />
<text  x="178.50" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="62.9" y="325" width="0.2" height="15.0" fill="rgb(235,13,11)" rx="2" ry="2" />
<text  x="65.91" y="335.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="83.5" y="645" width="0.2" height="15.0" fill="rgb(212,50,53)" rx="2" ry="2" />
<text  x="86.48" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (5 samples, 0.10%)</title><rect x="1161.3" y="629" width="1.1" height="15.0" fill="rgb(253,51,29)" rx="2" ry="2" />
<text  x="1164.29" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="687.6" y="661" width="0.5" height="15.0" fill="rgb(206,227,13)" rx="2" ry="2" />
<text  x="690.61" y="671.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="723.3" y="613" width="0.3" height="15.0" fill="rgb(234,168,21)" rx="2" ry="2" />
<text  x="726.34" y="623.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="912.6" y="453" width="0.9" height="15.0" fill="rgb(254,32,27)" rx="2" ry="2" />
<text  x="915.58" y="463.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (1 samples, 0.02%)</title><rect x="777.4" y="533" width="0.2" height="15.0" fill="rgb(208,0,34)" rx="2" ry="2" />
<text  x="780.37" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (56 samples, 1.07%)</title><rect x="322.2" y="533" width="12.7" height="15.0" fill="rgb(233,67,38)" rx="2" ry="2" />
<text  x="325.24" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (1 samples, 0.02%)</title><rect x="493.2" y="437" width="0.2" height="15.0" fill="rgb(227,96,22)" rx="2" ry="2" />
<text  x="496.17" y="447.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (4 samples, 0.08%)</title><rect x="684.7" y="613" width="0.9" height="15.0" fill="rgb(221,197,25)" rx="2" ry="2" />
<text  x="687.67" y="623.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="716.1" y="597" width="0.5" height="15.0" fill="rgb(235,161,1)" rx="2" ry="2" />
<text  x="719.10" y="607.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (2 samples, 0.04%)</title><rect x="202.2" y="405" width="0.4" height="15.0" fill="rgb(221,209,17)" rx="2" ry="2" />
<text  x="205.18" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="716.1" y="565" width="0.5" height="15.0" fill="rgb(218,221,51)" rx="2" ry="2" />
<text  x="719.10" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="62.2" y="501" width="0.3" height="15.0" fill="rgb(231,184,46)" rx="2" ry="2" />
<text  x="65.23" y="511.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.13%)</title><rect x="45.5" y="485" width="1.6" height="15.0" fill="rgb(252,141,48)" rx="2" ry="2" />
<text  x="48.50" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="830.5" y="469" width="0.2" height="15.0" fill="rgb(226,224,26)" rx="2" ry="2" />
<text  x="833.51" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="296.7" y="389" width="0.2" height="15.0" fill="rgb(209,100,26)" rx="2" ry="2" />
<text  x="299.69" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="79.0" y="629" width="0.4" height="15.0" fill="rgb(254,205,26)" rx="2" ry="2" />
<text  x="81.96" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="862.6" y="549" width="0.2" height="15.0" fill="rgb(251,206,12)" rx="2" ry="2" />
<text  x="865.61" y="559.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (32 samples, 0.61%)</title><rect x="1118.3" y="581" width="7.3" height="15.0" fill="rgb(215,118,23)" rx="2" ry="2" />
<text  x="1121.33" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::~deque (1 samples, 0.02%)</title><rect x="24.5" y="533" width="0.2" height="15.0" fill="rgb(209,156,23)" rx="2" ry="2" />
<text  x="27.47" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="311.8" y="453" width="0.3" height="15.0" fill="rgb(208,27,35)" rx="2" ry="2" />
<text  x="314.84" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (2 samples, 0.04%)</title><rect x="414.5" y="341" width="0.4" height="15.0" fill="rgb(218,215,13)" rx="2" ry="2" />
<text  x="417.49" y="351.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::get_all_endpoints (1 samples, 0.02%)</title><rect x="20.4" y="549" width="0.2" height="15.0" fill="rgb(223,26,45)" rx="2" ry="2" />
<text  x="23.40" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;column_definition const*, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; (1 samples, 0.02%)</title><rect x="76.0" y="469" width="0.2" height="15.0" fill="rgb(254,129,0)" rx="2" ry="2" />
<text  x="79.02" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="41.4" y="405" width="0.3" height="15.0" fill="rgb(219,58,0)" rx="2" ry="2" />
<text  x="44.43" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="834.3" y="469" width="0.3" height="15.0" fill="rgb(243,69,51)" rx="2" ry="2" />
<text  x="837.35" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (37 samples, 0.71%)</title><rect x="605.5" y="501" width="8.4" height="15.0" fill="rgb(224,53,42)" rx="2" ry="2" />
<text  x="608.54" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (1 samples, 0.02%)</title><rect x="106.8" y="229" width="0.2" height="15.0" fill="rgb(220,191,9)" rx="2" ry="2" />
<text  x="109.77" y="239.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::update_statement (1 samples, 0.02%)</title><rect x="78.3" y="565" width="0.2" height="15.0" fill="rgb(240,194,40)" rx="2" ry="2" />
<text  x="81.28" y="575.5" ></text>
</g>
<g >
<title>utils::filter::bloom_filter::add (1 samples, 0.02%)</title><rect x="86.0" y="613" width="0.2" height="15.0" fill="rgb(221,5,43)" rx="2" ry="2" />
<text  x="88.97" y="623.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (2 samples, 0.04%)</title><rect x="1015.0" y="373" width="0.5" height="15.0" fill="rgb(244,98,8)" rx="2" ry="2" />
<text  x="1018.00" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="942.0" y="581" width="0.2" height="15.0" fill="rgb(221,5,34)" rx="2" ry="2" />
<text  x="944.97" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1023.8" y="389" width="0.2" height="15.0" fill="rgb(205,222,6)" rx="2" ry="2" />
<text  x="1026.82" y="399.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="637.6" y="565" width="0.3" height="15.0" fill="rgb(252,112,46)" rx="2" ry="2" />
<text  x="640.65" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_aggregate_statement, std::default_delete&lt;cql3::statements::create_aggregate_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="68.6" y="565" width="0.2" height="15.0" fill="rgb(227,229,17)" rx="2" ry="2" />
<text  x="71.56" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_destroy_data&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="23.3" y="549" width="0.3" height="15.0" fill="rgb(221,165,31)" rx="2" ry="2" />
<text  x="26.34" y="559.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (86 samples, 1.65%)</title><rect x="540.0" y="485" width="19.4" height="15.0" fill="rgb(210,27,49)" rx="2" ry="2" />
<text  x="542.97" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (1 samples, 0.02%)</title><rect x="737.1" y="581" width="0.3" height="15.0" fill="rgb(210,112,47)" rx="2" ry="2" />
<text  x="740.13" y="591.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;, &amp;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;::_link&gt;::expire (2 samples, 0.04%)</title><rect x="1167.6" y="613" width="0.5" height="15.0" fill="rgb(213,65,52)" rx="2" ry="2" />
<text  x="1170.62" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="311.2" y="453" width="0.4" height="15.0" fill="rgb(213,109,53)" rx="2" ry="2" />
<text  x="314.16" y="463.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (1 samples, 0.02%)</title><rect x="260.5" y="293" width="0.2" height="15.0" fill="rgb(230,186,22)" rx="2" ry="2" />
<text  x="263.52" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="533.6" y="501" width="0.3" height="15.0" fill="rgb(206,51,31)" rx="2" ry="2" />
<text  x="536.64" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="107.7" y="565" width="0.2" height="15.0" fill="rgb(211,172,50)" rx="2" ry="2" />
<text  x="110.67" y="575.5" ></text>
</g>
<g >
<title>__start_context (3 samples, 0.06%)</title><rect x="19.9" y="693" width="0.7" height="15.0" fill="rgb(209,91,45)" rx="2" ry="2" />
<text  x="22.95" y="703.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::shared_ptr_count_for&lt;std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="83.5" y="373" width="0.2" height="15.0" fill="rgb(243,11,10)" rx="2" ry="2" />
<text  x="86.48" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (36 samples, 0.69%)</title><rect x="1145.7" y="645" width="8.1" height="15.0" fill="rgb(233,201,39)" rx="2" ry="2" />
<text  x="1148.68" y="655.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::release (1 samples, 0.02%)</title><rect x="67.9" y="501" width="0.2" height="15.0" fill="rgb(214,180,39)" rx="2" ry="2" />
<text  x="70.88" y="511.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="534.3" y="485" width="0.5" height="15.0" fill="rgb(231,46,28)" rx="2" ry="2" />
<text  x="537.32" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (3 samples, 0.06%)</title><rect x="949.7" y="549" width="0.6" height="15.0" fill="rgb(253,197,23)" rx="2" ry="2" />
<text  x="952.66" y="559.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (2 samples, 0.04%)</title><rect x="634.0" y="581" width="0.5" height="15.0" fill="rgb(243,162,20)" rx="2" ry="2" />
<text  x="637.03" y="591.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (39 samples, 0.75%)</title><rect x="1014.3" y="389" width="8.8" height="15.0" fill="rgb(223,105,46)" rx="2" ry="2" />
<text  x="1017.32" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="639.5" y="581" width="0.2" height="15.0" fill="rgb(226,207,44)" rx="2" ry="2" />
<text  x="642.45" y="591.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (2 samples, 0.04%)</title><rect x="489.6" y="469" width="0.4" height="15.0" fill="rgb(217,50,9)" rx="2" ry="2" />
<text  x="492.55" y="479.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="212.4" y="373" width="0.2" height="15.0" fill="rgb(213,112,3)" rx="2" ry="2" />
<text  x="215.36" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="622.5" y="501" width="0.4" height="15.0" fill="rgb(226,154,17)" rx="2" ry="2" />
<text  x="625.50" y="511.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="263.7" y="293" width="0.2" height="15.0" fill="rgb(235,52,24)" rx="2" ry="2" />
<text  x="266.68" y="303.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="18.4" y="677" width="0.2" height="15.0" fill="rgb(217,130,4)" rx="2" ry="2" />
<text  x="21.37" y="687.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (7 samples, 0.13%)</title><rect x="180.7" y="421" width="1.6" height="15.0" fill="rgb(205,204,10)" rx="2" ry="2" />
<text  x="183.70" y="431.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (2 samples, 0.04%)</title><rect x="73.5" y="501" width="0.5" height="15.0" fill="rgb(223,226,41)" rx="2" ry="2" />
<text  x="76.53" y="511.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (493 samples, 9.45%)</title><rect x="195.2" y="469" width="111.4" height="15.0" fill="rgb(209,116,26)" rx="2" ry="2" />
<text  x="198.17" y="479.5" >seastar::do_u..</text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="453.2" y="389" width="0.2" height="15.0" fill="rgb(229,90,30)" rx="2" ry="2" />
<text  x="456.15" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (5 samples, 0.10%)</title><rect x="492.0" y="437" width="1.2" height="15.0" fill="rgb(217,103,39)" rx="2" ry="2" />
<text  x="495.04" y="447.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (1 samples, 0.02%)</title><rect x="1076.3" y="469" width="0.2" height="15.0" fill="rgb(207,197,37)" rx="2" ry="2" />
<text  x="1079.27" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="63.4" y="357" width="0.2" height="15.0" fill="rgb(231,189,33)" rx="2" ry="2" />
<text  x="66.36" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_table_statement, std::default_delete&lt;cql3::statements::drop_table_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="69.0" y="565" width="0.2" height="15.0" fill="rgb(228,80,5)" rx="2" ry="2" />
<text  x="72.01" y="575.5" ></text>
</g>
<g >
<title>posix_memalign (16 samples, 0.31%)</title><rect x="244.9" y="229" width="3.6" height="15.0" fill="rgb(232,99,32)" rx="2" ry="2" />
<text  x="247.91" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="107.7" y="645" width="0.2" height="15.0" fill="rgb(253,191,17)" rx="2" ry="2" />
<text  x="110.67" y="655.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (6 samples, 0.11%)</title><rect x="20.6" y="693" width="1.4" height="15.0" fill="rgb(245,202,4)" rx="2" ry="2" />
<text  x="23.63" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="714.1" y="597" width="0.2" height="15.0" fill="rgb(242,113,24)" rx="2" ry="2" />
<text  x="717.07" y="607.5" ></text>
</g>
<g >
<title>std::_Bvector_base&lt;std::allocator&lt;bool&gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="70.1" y="613" width="0.3" height="15.0" fill="rgb(251,224,29)" rx="2" ry="2" />
<text  x="73.14" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%)</title><rect x="863.5" y="581" width="1.4" height="15.0" fill="rgb(248,14,32)" rx="2" ry="2" />
<text  x="866.52" y="591.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="107.4" y="629" width="0.3" height="15.0" fill="rgb(231,28,30)" rx="2" ry="2" />
<text  x="110.45" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (1 samples, 0.02%)</title><rect x="1077.2" y="517" width="0.2" height="15.0" fill="rgb(217,80,41)" rx="2" ry="2" />
<text  x="1080.18" y="527.5" ></text>
</g>
<g >
<title>fmt::v7::detail::formatbuf&lt;char&gt;::~formatbuf (1 samples, 0.02%)</title><rect x="83.0" y="789" width="0.3" height="15.0" fill="rgb(210,165,35)" rx="2" ry="2" />
<text  x="86.03" y="799.5" ></text>
</g>
<g >
<title>db::schema_tables::create_columns_from_column_rows (2 samples, 0.04%)</title><rect x="108.1" y="565" width="0.5" height="15.0" fill="rgb(236,31,14)" rx="2" ry="2" />
<text  x="111.13" y="575.5" ></text>
</g>
<g >
<title>database::has_keyspace (7 samples, 0.13%)</title><rect x="870.1" y="581" width="1.6" height="15.0" fill="rgb(246,167,53)" rx="2" ry="2" />
<text  x="873.07" y="591.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (16 samples, 0.31%)</title><rect x="987.0" y="485" width="3.6" height="15.0" fill="rgb(242,105,0)" rx="2" ry="2" />
<text  x="989.96" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="914.4" y="485" width="0.4" height="15.0" fill="rgb(207,77,35)" rx="2" ry="2" />
<text  x="917.39" y="495.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (229 samples, 4.39%)</title><rect x="990.6" y="517" width="51.8" height="15.0" fill="rgb(251,16,27)" rx="2" ry="2" />
<text  x="993.58" y="527.5" >servi..</text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (5 samples, 0.10%)</title><rect x="411.3" y="341" width="1.2" height="15.0" fill="rgb(228,33,43)" rx="2" ry="2" />
<text  x="414.32" y="351.5" ></text>
</g>
<g >
<title>TLS init function for seastar::testing::local_random_engine (1 samples, 0.02%)</title><rect x="880.7" y="629" width="0.2" height="15.0" fill="rgb(247,120,51)" rx="2" ry="2" />
<text  x="883.70" y="639.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, table::try_flush_memtable_to_sstable (1 samples, 0.02%)</title><rect x="740.3" y="677" width="0.2" height="15.0" fill="rgb(217,222,44)" rx="2" ry="2" />
<text  x="743.29" y="687.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%)</title><rect x="679.9" y="613" width="0.3" height="15.0" fill="rgb(238,191,8)" rx="2" ry="2" />
<text  x="682.93" y="623.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (40 samples, 0.77%)</title><rect x="488.2" y="485" width="9.0" height="15.0" fill="rgb(239,112,43)" rx="2" ry="2" />
<text  x="491.20" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="48.2" y="373" width="0.5" height="15.0" fill="rgb(254,136,40)" rx="2" ry="2" />
<text  x="51.21" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="58.6" y="325" width="0.2" height="15.0" fill="rgb(243,49,47)" rx="2" ry="2" />
<text  x="61.61" y="335.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::attributes::raw*, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="65.4" y="453" width="0.2" height="15.0" fill="rgb(242,126,31)" rx="2" ry="2" />
<text  x="68.39" y="463.5" ></text>
</g>
<g >
<title>[unknown] (338 samples, 6.48%)</title><rect x="10.5" y="805" width="76.4" height="15.0" fill="rgb(220,24,0)" rx="2" ry="2" />
<text  x="13.45" y="815.5" >[unknown]</text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (1 samples, 0.02%)</title><rect x="80.3" y="565" width="0.2" height="15.0" fill="rgb(220,11,16)" rx="2" ry="2" />
<text  x="83.32" y="575.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="63.4" y="453" width="0.2" height="15.0" fill="rgb(239,56,16)" rx="2" ry="2" />
<text  x="66.36" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="129.2" y="581" width="0.2" height="15.0" fill="rgb(227,175,54)" rx="2" ry="2" />
<text  x="132.15" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::unique_ptr (1 samples, 0.02%)</title><rect x="65.4" y="517" width="0.2" height="15.0" fill="rgb(245,195,38)" rx="2" ry="2" />
<text  x="68.39" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="581.6" y="485" width="0.4" height="15.0" fill="rgb(250,168,10)" rx="2" ry="2" />
<text  x="584.57" y="495.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (13 samples, 0.25%)</title><rect x="1128.0" y="389" width="3.0" height="15.0" fill="rgb(219,125,31)" rx="2" ry="2" />
<text  x="1131.05" y="399.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="673.1" y="501" width="0.3" height="15.0" fill="rgb(247,197,45)" rx="2" ry="2" />
<text  x="676.14" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="78.7" y="613" width="0.3" height="15.0" fill="rgb(227,12,12)" rx="2" ry="2" />
<text  x="81.73" y="623.5" ></text>
</g>
<g >
<title>ser::serializer&lt;schema_mutations&gt;::read&lt;seastar::simple_memory_input_stream&gt; (2 samples, 0.04%)</title><rect x="108.8" y="565" width="0.5" height="15.0" fill="rgb(222,183,7)" rx="2" ry="2" />
<text  x="111.80" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (4 samples, 0.08%)</title><rect x="668.2" y="645" width="0.9" height="15.0" fill="rgb(211,181,51)" rx="2" ry="2" />
<text  x="671.17" y="655.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (2 samples, 0.04%)</title><rect x="218.7" y="373" width="0.4" height="15.0" fill="rgb(244,181,20)" rx="2" ry="2" />
<text  x="221.69" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="77.8" y="549" width="0.3" height="15.0" fill="rgb(223,84,19)" rx="2" ry="2" />
<text  x="80.83" y="559.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1120.1" y="357" width="0.3" height="15.0" fill="rgb(223,160,53)" rx="2" ry="2" />
<text  x="1123.14" y="367.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="889.3" y="389" width="0.2" height="15.0" fill="rgb(220,17,24)" rx="2" ry="2" />
<text  x="892.29" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (12 samples, 0.23%)</title><rect x="83.9" y="709" width="2.7" height="15.0" fill="rgb(240,150,9)" rx="2" ry="2" />
<text  x="86.93" y="719.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (1 samples, 0.02%)</title><rect x="103.4" y="677" width="0.2" height="15.0" fill="rgb(227,170,50)" rx="2" ry="2" />
<text  x="106.38" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (5 samples, 0.10%)</title><rect x="693.7" y="645" width="1.1" height="15.0" fill="rgb(222,124,13)" rx="2" ry="2" />
<text  x="696.72" y="655.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (19 samples, 0.36%)</title><rect x="307.8" y="469" width="4.3" height="15.0" fill="rgb(207,158,6)" rx="2" ry="2" />
<text  x="310.77" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="597.4" y="581" width="0.2" height="15.0" fill="rgb(251,145,17)" rx="2" ry="2" />
<text  x="600.40" y="591.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="114.7" y="645" width="0.4" height="15.0" fill="rgb(208,223,3)" rx="2" ry="2" />
<text  x="117.68" y="655.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (12 samples, 0.23%)</title><rect x="928.0" y="517" width="2.7" height="15.0" fill="rgb(247,100,46)" rx="2" ry="2" />
<text  x="930.95" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (1 samples, 0.02%)</title><rect x="883.0" y="581" width="0.2" height="15.0" fill="rgb(214,55,25)" rx="2" ry="2" />
<text  x="885.96" y="591.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (3 samples, 0.06%)</title><rect x="19.9" y="677" width="0.7" height="15.0" fill="rgb(254,40,30)" rx="2" ry="2" />
<text  x="22.95" y="687.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (496 samples, 9.50%)</title><rect x="194.5" y="485" width="112.1" height="15.0" fill="rgb(243,89,41)" rx="2" ry="2" />
<text  x="197.50" y="495.5" >partition_sna..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="81.7" y="533" width="0.2" height="15.0" fill="rgb(218,152,48)" rx="2" ry="2" />
<text  x="84.67" y="543.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (8 samples, 0.15%)</title><rect x="284.3" y="421" width="1.8" height="15.0" fill="rgb(209,135,47)" rx="2" ry="2" />
<text  x="287.26" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="892.0" y="565" width="0.2" height="15.0" fill="rgb(238,201,40)" rx="2" ry="2" />
<text  x="895.00" y="575.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="604.9" y="501" width="0.6" height="15.0" fill="rgb(222,37,45)" rx="2" ry="2" />
<text  x="607.86" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="1031.5" y="405" width="0.9" height="15.0" fill="rgb(238,147,32)" rx="2" ry="2" />
<text  x="1034.51" y="415.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.7" y="741" width="0.2" height="15.0" fill="rgb(231,8,39)" rx="2" ry="2" />
<text  x="86.71" y="751.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (3 samples, 0.06%)</title><rect x="670.9" y="661" width="0.7" height="15.0" fill="rgb(229,3,37)" rx="2" ry="2" />
<text  x="673.88" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="362.7" y="341" width="0.2" height="15.0" fill="rgb(205,39,52)" rx="2" ry="2" />
<text  x="365.71" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="498.6" y="469" width="0.4" height="15.0" fill="rgb(231,6,20)" rx="2" ry="2" />
<text  x="501.60" y="479.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (2 samples, 0.04%)</title><rect x="655.5" y="613" width="0.5" height="15.0" fill="rgb(245,127,10)" rx="2" ry="2" />
<text  x="658.51" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (2 samples, 0.04%)</title><rect x="1165.6" y="629" width="0.4" height="15.0" fill="rgb(240,49,33)" rx="2" ry="2" />
<text  x="1168.58" y="639.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="208.5" y="373" width="0.5" height="15.0" fill="rgb(254,139,29)" rx="2" ry="2" />
<text  x="211.51" y="383.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cell (2 samples, 0.04%)</title><rect x="85.3" y="517" width="0.4" height="15.0" fill="rgb(229,153,46)" rx="2" ry="2" />
<text  x="88.29" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (2 samples, 0.04%)</title><rect x="688.1" y="661" width="0.4" height="15.0" fill="rgb(235,192,8)" rx="2" ry="2" />
<text  x="691.06" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (8 samples, 0.15%)</title><rect x="781.9" y="533" width="1.8" height="15.0" fill="rgb(218,45,14)" rx="2" ry="2" />
<text  x="784.89" y="543.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (12 samples, 0.23%)</title><rect x="671.8" y="677" width="2.7" height="15.0" fill="rgb(233,114,12)" rx="2" ry="2" />
<text  x="674.79" y="687.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,400 samples, 45.99%)</title><rect x="116.0" y="645" width="542.7" height="15.0" fill="rgb(208,37,2)" rx="2" ry="2" />
<text  x="119.04" y="655.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="596.7" y="597" width="0.2" height="15.0" fill="rgb(212,203,9)" rx="2" ry="2" />
<text  x="599.72" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, gms::inet_address&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="109.5" y="629" width="0.2" height="15.0" fill="rgb(235,59,41)" rx="2" ry="2" />
<text  x="112.48" y="639.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (21 samples, 0.40%)</title><rect x="1127.8" y="421" width="4.8" height="15.0" fill="rgb(244,83,7)" rx="2" ry="2" />
<text  x="1130.82" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%)</title><rect x="742.3" y="677" width="0.3" height="15.0" fill="rgb(254,34,22)" rx="2" ry="2" />
<text  x="745.33" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="817.6" y="373" width="0.5" height="15.0" fill="rgb(251,39,41)" rx="2" ry="2" />
<text  x="820.62" y="383.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer_from_delegate (1 samples, 0.02%)</title><rect x="106.8" y="165" width="0.2" height="15.0" fill="rgb(245,194,2)" rx="2" ry="2" />
<text  x="109.77" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (3 samples, 0.06%)</title><rect x="711.8" y="645" width="0.7" height="15.0" fill="rgb(214,192,3)" rx="2" ry="2" />
<text  x="714.80" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (1 samples, 0.02%)</title><rect x="995.6" y="485" width="0.2" height="15.0" fill="rgb(236,203,51)" rx="2" ry="2" />
<text  x="998.56" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="64.9" y="469" width="0.3" height="15.0" fill="rgb(206,13,42)" rx="2" ry="2" />
<text  x="67.94" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="819.4" y="309" width="0.3" height="15.0" fill="rgb(242,105,26)" rx="2" ry="2" />
<text  x="822.43" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.65%)</title><rect x="1125.6" y="549" width="7.6" height="15.0" fill="rgb(253,59,33)" rx="2" ry="2" />
<text  x="1128.56" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (190 samples, 3.64%)</title><rect x="904.4" y="597" width="43.0" height="15.0" fill="rgb(250,11,5)" rx="2" ry="2" />
<text  x="907.44" y="607.5" >cql3..</text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="631.8" y="549" width="0.4" height="15.0" fill="rgb(252,141,40)" rx="2" ry="2" />
<text  x="634.77" y="559.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%)</title><rect x="905.1" y="581" width="0.2" height="15.0" fill="rgb(248,85,4)" rx="2" ry="2" />
<text  x="908.12" y="591.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="83.5" y="629" width="0.2" height="15.0" fill="rgb(240,85,20)" rx="2" ry="2" />
<text  x="86.48" y="639.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (7 samples, 0.13%)</title><rect x="833.0" y="485" width="1.6" height="15.0" fill="rgb(219,36,26)" rx="2" ry="2" />
<text  x="835.99" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="46.2" y="373" width="0.4" height="15.0" fill="rgb(253,116,44)" rx="2" ry="2" />
<text  x="49.18" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="61.1" y="469" width="0.2" height="15.0" fill="rgb(219,225,38)" rx="2" ry="2" />
<text  x="64.10" y="479.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;frozen_mutation const&gt;::dispose (1 samples, 0.02%)</title><rect x="739.8" y="629" width="0.3" height="15.0" fill="rgb(205,199,52)" rx="2" ry="2" />
<text  x="742.84" y="639.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="83.5" y="533" width="0.2" height="15.0" fill="rgb(223,105,7)" rx="2" ry="2" />
<text  x="86.48" y="543.5" ></text>
</g>
<g >
<title>query::querier&lt; (1 samples, 0.02%)</title><rect x="120.1" y="629" width="0.2" height="15.0" fill="rgb(213,227,42)" rx="2" ry="2" />
<text  x="123.11" y="639.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="40.7" y="357" width="0.3" height="15.0" fill="rgb(254,111,20)" rx="2" ry="2" />
<text  x="43.75" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="714.1" y="613" width="0.2" height="15.0" fill="rgb(208,224,25)" rx="2" ry="2" />
<text  x="717.07" y="623.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1119.5" y="357" width="0.2" height="15.0" fill="rgb(238,55,31)" rx="2" ry="2" />
<text  x="1122.46" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="857.4" y="533" width="0.2" height="15.0" fill="rgb(221,82,16)" rx="2" ry="2" />
<text  x="860.41" y="543.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%)</title><rect x="1105.2" y="581" width="2.3" height="15.0" fill="rgb(244,185,24)" rx="2" ry="2" />
<text  x="1108.21" y="591.5" ></text>
</g>
<g >
<title>tombstone::apply (3 samples, 0.06%)</title><rect x="437.1" y="373" width="0.7" height="15.0" fill="rgb(248,83,7)" rx="2" ry="2" />
<text  x="440.10" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="599.7" y="533" width="0.2" height="15.0" fill="rgb(216,39,51)" rx="2" ry="2" />
<text  x="602.66" y="543.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (54 samples, 1.03%)</title><rect x="1062.9" y="485" width="12.2" height="15.0" fill="rgb(207,47,17)" rx="2" ry="2" />
<text  x="1065.93" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (1 samples, 0.02%)</title><rect x="1148.6" y="629" width="0.3" height="15.0" fill="rgb(211,87,26)" rx="2" ry="2" />
<text  x="1151.62" y="639.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (1 samples, 0.02%)</title><rect x="488.0" y="485" width="0.2" height="15.0" fill="rgb(210,7,31)" rx="2" ry="2" />
<text  x="490.97" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (2 samples, 0.04%)</title><rect x="328.3" y="453" width="0.5" height="15.0" fill="rgb(208,199,21)" rx="2" ry="2" />
<text  x="331.34" y="463.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (10 samples, 0.19%)</title><rect x="464.0" y="533" width="2.3" height="15.0" fill="rgb(252,147,40)" rx="2" ry="2" />
<text  x="467.00" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="888.2" y="501" width="0.2" height="15.0" fill="rgb(221,162,22)" rx="2" ry="2" />
<text  x="891.16" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="107.7" y="453" width="0.2" height="15.0" fill="rgb(228,177,24)" rx="2" ry="2" />
<text  x="110.67" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (2 samples, 0.04%)</title><rect x="878.2" y="645" width="0.5" height="15.0" fill="rgb(227,167,40)" rx="2" ry="2" />
<text  x="881.21" y="655.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cfName (1 samples, 0.02%)</title><rect x="42.6" y="517" width="0.2" height="15.0" fill="rgb(214,214,45)" rx="2" ry="2" />
<text  x="45.56" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="24.9" y="469" width="0.2" height="15.0" fill="rgb(222,168,1)" rx="2" ry="2" />
<text  x="27.92" y="479.5" ></text>
</g>
<g >
<title>db::schema_tables::add_table_or_view_to_schema_mutation (1 samples, 0.02%)</title><rect x="107.7" y="533" width="0.2" height="15.0" fill="rgb(248,23,30)" rx="2" ry="2" />
<text  x="110.67" y="543.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="63.4" y="437" width="0.2" height="15.0" fill="rgb(237,200,8)" rx="2" ry="2" />
<text  x="66.36" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="566.9" y="501" width="0.2" height="15.0" fill="rgb(239,204,7)" rx="2" ry="2" />
<text  x="569.88" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="884.8" y="677" width="0.6" height="15.0" fill="rgb(212,160,50)" rx="2" ry="2" />
<text  x="887.77" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="54.8" y="437" width="0.2" height="15.0" fill="rgb(224,128,5)" rx="2" ry="2" />
<text  x="57.77" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (4 samples, 0.08%)</title><rect x="585.4" y="597" width="0.9" height="15.0" fill="rgb(212,105,13)" rx="2" ry="2" />
<text  x="588.42" y="607.5" ></text>
</g>
<g >
<title>query::result::builder::build (8 samples, 0.15%)</title><rect x="632.7" y="613" width="1.8" height="15.0" fill="rgb(230,106,23)" rx="2" ry="2" />
<text  x="635.67" y="623.5" ></text>
</g>
<g >
<title>multishard_combining_reader::handle_empty_reader_buffer (1 samples, 0.02%)</title><rect x="106.8" y="421" width="0.2" height="15.0" fill="rgb(236,183,1)" rx="2" ry="2" />
<text  x="109.77" y="431.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="50.9" y="453" width="0.2" height="15.0" fill="rgb(208,4,37)" rx="2" ry="2" />
<text  x="53.92" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="727.2" y="645" width="0.2" height="15.0" fill="rgb(227,74,33)" rx="2" ry="2" />
<text  x="730.18" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="41.4" y="453" width="0.3" height="15.0" fill="rgb(206,79,11)" rx="2" ry="2" />
<text  x="44.43" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (5 samples, 0.10%)</title><rect x="826.0" y="437" width="1.1" height="15.0" fill="rgb(214,133,36)" rx="2" ry="2" />
<text  x="828.98" y="447.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (1 samples, 0.02%)</title><rect x="289.7" y="389" width="0.2" height="15.0" fill="rgb(246,1,24)" rx="2" ry="2" />
<text  x="292.68" y="399.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;long, long, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1119.5" y="341" width="0.2" height="15.0" fill="rgb(210,19,28)" rx="2" ry="2" />
<text  x="1122.46" y="351.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (1 samples, 0.02%)</title><rect x="716.1" y="453" width="0.2" height="15.0" fill="rgb(234,196,19)" rx="2" ry="2" />
<text  x="719.10" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="54.3" y="469" width="0.5" height="15.0" fill="rgb(211,187,1)" rx="2" ry="2" />
<text  x="57.32" y="479.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%)</title><rect x="18.4" y="741" width="0.2" height="15.0" fill="rgb(236,226,0)" rx="2" ry="2" />
<text  x="21.37" y="751.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%)</title><rect x="134.4" y="629" width="0.2" height="15.0" fill="rgb(239,53,42)" rx="2" ry="2" />
<text  x="137.35" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::untyped_result_set&gt;::shared_ptr_count_for&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="671.6" y="645" width="0.2" height="15.0" fill="rgb(230,80,10)" rx="2" ry="2" />
<text  x="674.56" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="697.3" y="645" width="0.3" height="15.0" fill="rgb(213,226,12)" rx="2" ry="2" />
<text  x="700.33" y="655.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (47 samples, 0.90%)</title><rect x="28.1" y="469" width="10.6" height="15.0" fill="rgb(235,169,2)" rx="2" ry="2" />
<text  x="31.09" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="58.6" y="245" width="0.2" height="15.0" fill="rgb(232,70,15)" rx="2" ry="2" />
<text  x="61.61" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="48.2" y="357" width="0.5" height="15.0" fill="rgb(214,146,34)" rx="2" ry="2" />
<text  x="51.21" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="274.8" y="389" width="0.2" height="15.0" fill="rgb(221,95,34)" rx="2" ry="2" />
<text  x="277.76" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.65%)</title><rect x="1125.6" y="597" width="7.6" height="15.0" fill="rgb(222,10,11)" rx="2" ry="2" />
<text  x="1128.56" y="607.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (6 samples, 0.11%)</title><rect x="1091.6" y="549" width="1.4" height="15.0" fill="rgb(245,161,48)" rx="2" ry="2" />
<text  x="1094.65" y="559.5" ></text>
</g>
<g >
<title>sstables::mc::writer::drain_tombstones (1 samples, 0.02%)</title><rect x="86.2" y="629" width="0.2" height="15.0" fill="rgb(233,160,53)" rx="2" ry="2" />
<text  x="89.19" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="84.2" y="517" width="0.2" height="15.0" fill="rgb(231,194,0)" rx="2" ry="2" />
<text  x="87.16" y="527.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="197.2" y="421" width="0.2" height="15.0" fill="rgb(220,195,51)" rx="2" ry="2" />
<text  x="200.21" y="431.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (6 samples, 0.11%)</title><rect x="1001.4" y="453" width="1.4" height="15.0" fill="rgb(246,31,23)" rx="2" ry="2" />
<text  x="1004.44" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (2 samples, 0.04%)</title><rect x="1126.7" y="373" width="0.4" height="15.0" fill="rgb(249,210,47)" rx="2" ry="2" />
<text  x="1129.69" y="383.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="726.3" y="661" width="0.2" height="15.0" fill="rgb(239,30,28)" rx="2" ry="2" />
<text  x="729.28" y="671.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (24 samples, 0.46%)</title><rect x="1064.1" y="421" width="5.4" height="15.0" fill="rgb(230,208,9)" rx="2" ry="2" />
<text  x="1067.06" y="431.5" ></text>
</g>
<g >
<title>cql3::cf_name::set_column_family (1 samples, 0.02%)</title><rect x="42.6" y="501" width="0.2" height="15.0" fill="rgb(218,133,42)" rx="2" ry="2" />
<text  x="45.56" y="511.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;seastar::measuring_output_stream&gt; (1 samples, 0.02%)</title><rect x="1130.5" y="293" width="0.3" height="15.0" fill="rgb(244,20,12)" rx="2" ry="2" />
<text  x="1133.54" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload&lt;cql3::expr::expression, true, false, false&gt;::_Optional_payload (1 samples, 0.02%)</title><rect x="65.2" y="453" width="0.2" height="15.0" fill="rgb(241,212,12)" rx="2" ry="2" />
<text  x="68.17" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="76.7" y="421" width="0.2" height="15.0" fill="rgb(244,56,7)" rx="2" ry="2" />
<text  x="79.70" y="431.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (3 samples, 0.06%)</title><rect x="1034.9" y="453" width="0.7" height="15.0" fill="rgb(237,143,48)" rx="2" ry="2" />
<text  x="1037.90" y="463.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1130.5" y="341" width="0.3" height="15.0" fill="rgb(253,213,5)" rx="2" ry="2" />
<text  x="1133.54" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="106.8" y="469" width="0.2" height="15.0" fill="rgb(224,117,24)" rx="2" ry="2" />
<text  x="109.77" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%)</title><rect x="1116.3" y="613" width="0.7" height="15.0" fill="rgb(240,70,53)" rx="2" ry="2" />
<text  x="1119.29" y="623.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="20.2" y="533" width="0.2" height="15.0" fill="rgb(210,141,16)" rx="2" ry="2" />
<text  x="23.17" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="23.3" y="533" width="0.3" height="15.0" fill="rgb(211,212,28)" rx="2" ry="2" />
<text  x="26.34" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="53.6" y="357" width="0.3" height="15.0" fill="rgb(241,224,48)" rx="2" ry="2" />
<text  x="56.64" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="62.9" y="293" width="0.2" height="15.0" fill="rgb(234,85,31)" rx="2" ry="2" />
<text  x="65.91" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (11 samples, 0.21%)</title><rect x="1107.7" y="581" width="2.5" height="15.0" fill="rgb(253,81,1)" rx="2" ry="2" />
<text  x="1110.70" y="591.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="848.6" y="469" width="0.4" height="15.0" fill="rgb(205,135,46)" rx="2" ry="2" />
<text  x="851.59" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1077.4" y="517" width="0.5" height="15.0" fill="rgb(223,45,38)" rx="2" ry="2" />
<text  x="1080.40" y="527.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="12.3" y="773" width="0.2" height="15.0" fill="rgb(232,23,35)" rx="2" ry="2" />
<text  x="15.26" y="783.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute (1 samples, 0.02%)</title><rect x="22.9" y="629" width="0.2" height="15.0" fill="rgb(251,132,35)" rx="2" ry="2" />
<text  x="25.89" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (12 samples, 0.23%)</title><rect x="992.8" y="485" width="2.8" height="15.0" fill="rgb(240,213,52)" rx="2" ry="2" />
<text  x="995.84" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%)</title><rect x="27.4" y="325" width="0.2" height="15.0" fill="rgb(224,169,35)" rx="2" ry="2" />
<text  x="30.41" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::delete_statement, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="67.0" y="549" width="0.2" height="15.0" fill="rgb(239,51,5)" rx="2" ry="2" />
<text  x="69.98" y="559.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (2 samples, 0.04%)</title><rect x="955.3" y="565" width="0.5" height="15.0" fill="rgb(240,18,41)" rx="2" ry="2" />
<text  x="958.31" y="575.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::drop_table_statement, std::default_delete&lt;cql3::statements::drop_table_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="66.5" y="533" width="0.3" height="15.0" fill="rgb(228,156,16)" rx="2" ry="2" />
<text  x="69.52" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__variant_construct_single&lt;std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;&amp;, cql3::expr::binary_operator const&amp;&gt; (1 samples, 0.02%)</title><rect x="75.6" y="357" width="0.2" height="15.0" fill="rgb(215,137,25)" rx="2" ry="2" />
<text  x="78.57" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="61.8" y="325" width="0.2" height="15.0" fill="rgb(229,213,13)" rx="2" ry="2" />
<text  x="64.78" y="335.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (1 samples, 0.02%)</title><rect x="114.5" y="645" width="0.2" height="15.0" fill="rgb(246,200,40)" rx="2" ry="2" />
<text  x="117.46" y="655.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (2 samples, 0.04%)</title><rect x="674.0" y="581" width="0.5" height="15.0" fill="rgb(221,53,10)" rx="2" ry="2" />
<text  x="677.05" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (5 samples, 0.10%)</title><rect x="652.8" y="565" width="1.1" height="15.0" fill="rgb(217,103,49)" rx="2" ry="2" />
<text  x="655.79" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (4 samples, 0.08%)</title><rect x="950.3" y="549" width="0.9" height="15.0" fill="rgb(242,85,43)" rx="2" ry="2" />
<text  x="953.34" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="63.4" y="389" width="0.2" height="15.0" fill="rgb(239,146,21)" rx="2" ry="2" />
<text  x="66.36" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="1055.0" y="469" width="0.9" height="15.0" fill="rgb(247,173,11)" rx="2" ry="2" />
<text  x="1058.02" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1015.7" y="357" width="0.2" height="15.0" fill="rgb(248,77,19)" rx="2" ry="2" />
<text  x="1018.68" y="367.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%)</title><rect x="1132.6" y="485" width="0.2" height="15.0" fill="rgb(229,169,24)" rx="2" ry="2" />
<text  x="1135.57" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="24.0" y="437" width="0.2" height="15.0" fill="rgb(247,196,3)" rx="2" ry="2" />
<text  x="27.02" y="447.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1145.5" y="613" width="0.2" height="15.0" fill="rgb(225,159,53)" rx="2" ry="2" />
<text  x="1148.46" y="623.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="10.9" y="613" width="0.2" height="15.0" fill="rgb(219,215,54)" rx="2" ry="2" />
<text  x="13.90" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="48.0" y="325" width="0.2" height="15.0" fill="rgb(217,6,14)" rx="2" ry="2" />
<text  x="50.98" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (555 samples, 10.63%)</title><rect x="959.2" y="565" width="125.4" height="15.0" fill="rgb(209,167,43)" rx="2" ry="2" />
<text  x="962.16" y="575.5" >service::storag..</text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (1 samples, 0.02%)</title><rect x="1110.4" y="597" width="0.2" height="15.0" fill="rgb(253,215,46)" rx="2" ry="2" />
<text  x="1113.41" y="607.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="10.9" y="677" width="0.2" height="15.0" fill="rgb(254,80,42)" rx="2" ry="2" />
<text  x="13.90" y="687.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (12 samples, 0.23%)</title><rect x="534.3" y="501" width="2.7" height="15.0" fill="rgb(221,129,14)" rx="2" ry="2" />
<text  x="537.32" y="511.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (2 samples, 0.04%)</title><rect x="452.5" y="373" width="0.4" height="15.0" fill="rgb(238,72,41)" rx="2" ry="2" />
<text  x="455.47" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (1 samples, 0.02%)</title><rect x="76.9" y="565" width="0.3" height="15.0" fill="rgb(233,46,46)" rx="2" ry="2" />
<text  x="79.92" y="575.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="1037.8" y="421" width="0.9" height="15.0" fill="rgb(254,114,54)" rx="2" ry="2" />
<text  x="1040.84" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (2 samples, 0.04%)</title><rect x="279.7" y="293" width="0.5" height="15.0" fill="rgb(250,86,39)" rx="2" ry="2" />
<text  x="282.73" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%)</title><rect x="742.1" y="677" width="0.2" height="15.0" fill="rgb(245,209,23)" rx="2" ry="2" />
<text  x="745.10" y="687.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="81.0" y="469" width="0.2" height="15.0" fill="rgb(209,28,27)" rx="2" ry="2" />
<text  x="83.99" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="684.2" y="629" width="0.2" height="15.0" fill="rgb(216,31,46)" rx="2" ry="2" />
<text  x="687.22" y="639.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (34 samples, 0.65%)</title><rect x="1125.6" y="581" width="7.6" height="15.0" fill="rgb(206,195,11)" rx="2" ry="2" />
<text  x="1128.56" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="128.9" y="549" width="0.3" height="15.0" fill="rgb(225,85,16)" rx="2" ry="2" />
<text  x="131.93" y="559.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (6 samples, 0.11%)</title><rect x="292.4" y="357" width="1.4" height="15.0" fill="rgb(241,2,5)" rx="2" ry="2" />
<text  x="295.40" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (970 samples, 18.59%)</title><rect x="898.3" y="629" width="219.3" height="15.0" fill="rgb(239,195,8)" rx="2" ry="2" />
<text  x="901.33" y="639.5" >seastar::noncopyable_functio..</text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="670.7" y="661" width="0.2" height="15.0" fill="rgb(223,21,27)" rx="2" ry="2" />
<text  x="673.66" y="671.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (2 samples, 0.04%)</title><rect x="100.4" y="581" width="0.5" height="15.0" fill="rgb(216,188,41)" rx="2" ry="2" />
<text  x="103.44" y="591.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2 samples, 0.04%)</title><rect x="845.0" y="453" width="0.4" height="15.0" fill="rgb(213,22,27)" rx="2" ry="2" />
<text  x="847.98" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (26 samples, 0.50%)</title><rect x="306.9" y="485" width="5.8" height="15.0" fill="rgb(234,180,37)" rx="2" ry="2" />
<text  x="309.87" y="495.5" ></text>
</g>
<g >
<title>cql3::prepare_context::get_partition_key_bind_indexes (2 samples, 0.04%)</title><rect x="70.1" y="629" width="0.5" height="15.0" fill="rgb(210,26,8)" rx="2" ry="2" />
<text  x="73.14" y="639.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (1 samples, 0.02%)</title><rect x="364.3" y="341" width="0.2" height="15.0" fill="rgb(229,156,19)" rx="2" ry="2" />
<text  x="367.29" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_Deque_base (1 samples, 0.02%)</title><rect x="24.0" y="469" width="0.2" height="15.0" fill="rgb(240,204,21)" rx="2" ry="2" />
<text  x="27.02" y="479.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (3 samples, 0.06%)</title><rect x="1075.4" y="469" width="0.6" height="15.0" fill="rgb(240,71,30)" rx="2" ry="2" />
<text  x="1078.37" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (4 samples, 0.08%)</title><rect x="457.9" y="453" width="0.9" height="15.0" fill="rgb(246,171,4)" rx="2" ry="2" />
<text  x="460.90" y="463.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="492.5" y="421" width="0.7" height="15.0" fill="rgb(243,157,39)" rx="2" ry="2" />
<text  x="495.49" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%)</title><rect x="883.0" y="533" width="0.2" height="15.0" fill="rgb(218,94,26)" rx="2" ry="2" />
<text  x="885.96" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%)</title><rect x="211.2" y="341" width="0.3" height="15.0" fill="rgb(210,159,15)" rx="2" ry="2" />
<text  x="214.23" y="351.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%)</title><rect x="1028.6" y="357" width="0.2" height="15.0" fill="rgb(231,5,34)" rx="2" ry="2" />
<text  x="1031.57" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="274.5" y="389" width="0.3" height="15.0" fill="rgb(213,128,54)" rx="2" ry="2" />
<text  x="277.53" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="106.8" y="117" width="0.2" height="15.0" fill="rgb(209,23,48)" rx="2" ry="2" />
<text  x="109.77" y="127.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="58.6" y="389" width="0.2" height="15.0" fill="rgb(246,4,31)" rx="2" ry="2" />
<text  x="61.61" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (3 samples, 0.06%)</title><rect x="550.8" y="373" width="0.7" height="15.0" fill="rgb(208,176,45)" rx="2" ry="2" />
<text  x="553.82" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (2 samples, 0.04%)</title><rect x="1019.7" y="309" width="0.5" height="15.0" fill="rgb(207,207,42)" rx="2" ry="2" />
<text  x="1022.75" y="319.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (2 samples, 0.04%)</title><rect x="1119.9" y="405" width="0.5" height="15.0" fill="rgb(247,178,25)" rx="2" ry="2" />
<text  x="1122.91" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (2 samples, 0.04%)</title><rect x="586.3" y="597" width="0.5" height="15.0" fill="rgb(246,217,19)" rx="2" ry="2" />
<text  x="589.32" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::statements::update_statement, false&gt;::make&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (2 samples, 0.04%)</title><rect x="78.1" y="597" width="0.4" height="15.0" fill="rgb(241,22,43)" rx="2" ry="2" />
<text  x="81.06" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="41.4" y="485" width="0.3" height="15.0" fill="rgb(208,148,30)" rx="2" ry="2" />
<text  x="44.43" y="495.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (43 samples, 0.82%)</title><rect x="512.6" y="485" width="9.7" height="15.0" fill="rgb(244,19,9)" rx="2" ry="2" />
<text  x="515.61" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (6 samples, 0.11%)</title><rect x="784.8" y="501" width="1.4" height="15.0" fill="rgb(224,151,51)" rx="2" ry="2" />
<text  x="787.83" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1101.1" y="565" width="0.5" height="15.0" fill="rgb(239,222,32)" rx="2" ry="2" />
<text  x="1104.14" y="575.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="18.4" y="693" width="0.2" height="15.0" fill="rgb(207,185,45)" rx="2" ry="2" />
<text  x="21.37" y="703.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (3 samples, 0.06%)</title><rect x="1164.0" y="597" width="0.7" height="15.0" fill="rgb(218,227,15)" rx="2" ry="2" />
<text  x="1167.00" y="607.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="53.6" y="373" width="0.5" height="15.0" fill="rgb(220,12,12)" rx="2" ry="2" />
<text  x="56.64" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (7 samples, 0.13%)</title><rect x="303.9" y="389" width="1.6" height="15.0" fill="rgb(254,177,29)" rx="2" ry="2" />
<text  x="306.93" y="399.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%)</title><rect x="45.7" y="309" width="0.5" height="15.0" fill="rgb(209,138,50)" rx="2" ry="2" />
<text  x="48.72" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="840.7" y="517" width="0.2" height="15.0" fill="rgb(247,145,11)" rx="2" ry="2" />
<text  x="843.68" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="138.0" y="405" width="0.2" height="15.0" fill="rgb(234,116,41)" rx="2" ry="2" />
<text  x="140.97" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (3 samples, 0.06%)</title><rect x="662.7" y="645" width="0.7" height="15.0" fill="rgb(225,221,45)" rx="2" ry="2" />
<text  x="665.74" y="655.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (3 samples, 0.06%)</title><rect x="243.1" y="229" width="0.7" height="15.0" fill="rgb(231,136,15)" rx="2" ry="2" />
<text  x="246.11" y="239.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (19 samples, 0.36%)</title><rect x="549.7" y="405" width="4.3" height="15.0" fill="rgb(234,59,44)" rx="2" ry="2" />
<text  x="552.69" y="415.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="20.2" y="469" width="0.2" height="15.0" fill="rgb(254,130,29)" rx="2" ry="2" />
<text  x="23.17" y="479.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="196.8" y="437" width="0.2" height="15.0" fill="rgb(211,35,30)" rx="2" ry="2" />
<text  x="199.76" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (3 samples, 0.06%)</title><rect x="378.3" y="357" width="0.7" height="15.0" fill="rgb(236,104,44)" rx="2" ry="2" />
<text  x="381.31" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%)</title><rect x="41.0" y="533" width="0.2" height="15.0" fill="rgb(234,78,20)" rx="2" ry="2" />
<text  x="43.98" y="543.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (48 samples, 0.92%)</title><rect x="763.1" y="565" width="10.9" height="15.0" fill="rgb(209,203,48)" rx="2" ry="2" />
<text  x="766.13" y="575.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (13 samples, 0.25%)</title><rect x="770.6" y="485" width="2.9" height="15.0" fill="rgb(218,148,29)" rx="2" ry="2" />
<text  x="773.59" y="495.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (1 samples, 0.02%)</title><rect x="12.5" y="773" width="0.2" height="15.0" fill="rgb(212,208,30)" rx="2" ry="2" />
<text  x="15.49" y="783.5" ></text>
</g>
<g >
<title>mutation_partition::accept (1 samples, 0.02%)</title><rect x="106.1" y="629" width="0.2" height="15.0" fill="rgb(209,5,2)" rx="2" ry="2" />
<text  x="109.09" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="54.3" y="309" width="0.5" height="15.0" fill="rgb(206,132,8)" rx="2" ry="2" />
<text  x="57.32" y="319.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (203 samples, 3.89%)</title><rect x="995.8" y="485" width="45.9" height="15.0" fill="rgb(206,211,37)" rx="2" ry="2" />
<text  x="998.78" y="495.5" >serv..</text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="107.7" y="437" width="0.2" height="15.0" fill="rgb(210,84,6)" rx="2" ry="2" />
<text  x="110.67" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="628.8" y="581" width="0.3" height="15.0" fill="rgb(240,205,9)" rx="2" ry="2" />
<text  x="631.83" y="591.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%)</title><rect x="243.8" y="245" width="0.2" height="15.0" fill="rgb(209,45,41)" rx="2" ry="2" />
<text  x="246.78" y="255.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="107.2" y="613" width="0.2" height="15.0" fill="rgb(236,145,24)" rx="2" ry="2" />
<text  x="110.22" y="623.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (31 samples, 0.59%)</title><rect x="1125.6" y="517" width="7.0" height="15.0" fill="rgb(235,148,37)" rx="2" ry="2" />
<text  x="1128.56" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="831.6" y="485" width="0.3" height="15.0" fill="rgb(243,23,28)" rx="2" ry="2" />
<text  x="834.64" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (28 samples, 0.54%)</title><rect x="885.9" y="597" width="6.3" height="15.0" fill="rgb(240,118,38)" rx="2" ry="2" />
<text  x="888.90" y="607.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1,383 samples, 26.50%)</title><rect x="158.8" y="597" width="312.7" height="15.0" fill="rgb(212,145,22)" rx="2" ry="2" />
<text  x="161.77" y="607.5" >query::consume_page&lt;</text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="83.7" y="725" width="0.2" height="15.0" fill="rgb(214,193,24)" rx="2" ry="2" />
<text  x="86.71" y="735.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="102.2" y="629" width="0.5" height="15.0" fill="rgb(222,151,33)" rx="2" ry="2" />
<text  x="105.25" y="639.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (9 samples, 0.17%)</title><rect x="763.6" y="533" width="2.0" height="15.0" fill="rgb(221,153,37)" rx="2" ry="2" />
<text  x="766.58" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%)</title><rect x="691.9" y="661" width="0.7" height="15.0" fill="rgb(248,189,41)" rx="2" ry="2" />
<text  x="694.91" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="1165.4" y="645" width="0.2" height="15.0" fill="rgb(206,59,36)" rx="2" ry="2" />
<text  x="1168.36" y="655.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (1 samples, 0.02%)</title><rect x="716.3" y="469" width="0.3" height="15.0" fill="rgb(211,55,33)" rx="2" ry="2" />
<text  x="719.33" y="479.5" ></text>
</g>
<g >
<title>database::find_uuid (23 samples, 0.44%)</title><rect x="783.7" y="565" width="5.2" height="15.0" fill="rgb(239,218,21)" rx="2" ry="2" />
<text  x="786.70" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="736.7" y="597" width="0.2" height="15.0" fill="rgb(210,101,16)" rx="2" ry="2" />
<text  x="739.68" y="607.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (2,447 samples, 46.89%)</title><rect x="110.2" y="677" width="553.2" height="15.0" fill="rgb(211,177,44)" rx="2" ry="2" />
<text  x="113.16" y="687.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (6 samples, 0.11%)</title><rect x="123.0" y="613" width="1.4" height="15.0" fill="rgb(214,186,54)" rx="2" ry="2" />
<text  x="126.05" y="623.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (3 samples, 0.06%)</title><rect x="41.2" y="533" width="0.7" height="15.0" fill="rgb(254,147,23)" rx="2" ry="2" />
<text  x="44.20" y="543.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (1 samples, 0.02%)</title><rect x="1166.0" y="693" width="0.3" height="15.0" fill="rgb(245,101,22)" rx="2" ry="2" />
<text  x="1169.03" y="703.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (4 samples, 0.08%)</title><rect x="1001.9" y="437" width="0.9" height="15.0" fill="rgb(241,16,36)" rx="2" ry="2" />
<text  x="1004.89" y="447.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (3 samples, 0.06%)</title><rect x="657.5" y="581" width="0.7" height="15.0" fill="rgb(254,162,17)" rx="2" ry="2" />
<text  x="660.54" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (4 samples, 0.08%)</title><rect x="75.3" y="517" width="0.9" height="15.0" fill="rgb(219,1,33)" rx="2" ry="2" />
<text  x="78.34" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="62.9" y="373" width="0.2" height="15.0" fill="rgb(229,84,3)" rx="2" ry="2" />
<text  x="65.91" y="383.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.25%)</title><rect x="1029.5" y="437" width="2.9" height="15.0" fill="rgb(211,27,45)" rx="2" ry="2" />
<text  x="1032.47" y="447.5" ></text>
</g>
<g >
<title>dht::tri_compare (8 samples, 0.15%)</title><rect x="523.2" y="437" width="1.8" height="15.0" fill="rgb(205,10,27)" rx="2" ry="2" />
<text  x="526.24" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (1 samples, 0.02%)</title><rect x="138.0" y="485" width="0.2" height="15.0" fill="rgb(228,19,12)" rx="2" ry="2" />
<text  x="140.97" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (2 samples, 0.04%)</title><rect x="840.9" y="517" width="0.5" height="15.0" fill="rgb(226,140,51)" rx="2" ry="2" />
<text  x="843.91" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="61.1" y="485" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="64.10" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="81.9" y="549" width="0.2" height="15.0" fill="rgb(207,193,38)" rx="2" ry="2" />
<text  x="84.90" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="62.5" y="485" width="0.2" height="15.0" fill="rgb(231,38,29)" rx="2" ry="2" />
<text  x="65.45" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (2 samples, 0.04%)</title><rect x="674.0" y="517" width="0.5" height="15.0" fill="rgb(206,113,25)" rx="2" ry="2" />
<text  x="677.05" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="57.9" y="405" width="0.3" height="15.0" fill="rgb(210,148,37)" rx="2" ry="2" />
<text  x="60.93" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (2 samples, 0.04%)</title><rect x="1093.0" y="549" width="0.5" height="15.0" fill="rgb(213,142,7)" rx="2" ry="2" />
<text  x="1096.00" y="559.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (11 samples, 0.21%)</title><rect x="869.4" y="597" width="2.5" height="15.0" fill="rgb(229,17,47)" rx="2" ry="2" />
<text  x="872.39" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="786.6" y="517" width="0.3" height="15.0" fill="rgb(242,29,35)" rx="2" ry="2" />
<text  x="789.64" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1165.6" y="517" width="0.2" height="15.0" fill="rgb(231,128,54)" rx="2" ry="2" />
<text  x="1168.58" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (4 samples, 0.08%)</title><rect x="582.3" y="517" width="0.9" height="15.0" fill="rgb(217,224,39)" rx="2" ry="2" />
<text  x="585.25" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1020.7" y="341" width="0.2" height="15.0" fill="rgb(253,194,0)" rx="2" ry="2" />
<text  x="1023.65" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (2 samples, 0.04%)</title><rect x="499.0" y="485" width="0.5" height="15.0" fill="rgb(221,2,7)" rx="2" ry="2" />
<text  x="502.05" y="495.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (3 samples, 0.06%)</title><rect x="873.5" y="565" width="0.6" height="15.0" fill="rgb(240,145,9)" rx="2" ry="2" />
<text  x="876.46" y="575.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (12 samples, 0.23%)</title><rect x="83.9" y="757" width="2.7" height="15.0" fill="rgb(206,64,1)" rx="2" ry="2" />
<text  x="86.93" y="767.5" ></text>
</g>
<g >
<title>db::is_serial_consistency (1 samples, 0.02%)</title><rect x="963.2" y="549" width="0.3" height="15.0" fill="rgb(227,195,7)" rx="2" ry="2" />
<text  x="966.22" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (2 samples, 0.04%)</title><rect x="414.5" y="325" width="0.4" height="15.0" fill="rgb(231,59,17)" rx="2" ry="2" />
<text  x="417.49" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::BaseRecognizer (1 samples, 0.02%)</title><rect x="23.6" y="581" width="0.2" height="15.0" fill="rgb(215,8,11)" rx="2" ry="2" />
<text  x="26.57" y="591.5" ></text>
</g>
<g >
<title>schema::column_at (2 samples, 0.04%)</title><rect x="412.7" y="373" width="0.4" height="15.0" fill="rgb(205,59,52)" rx="2" ry="2" />
<text  x="415.68" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1080.6" y="517" width="0.2" height="15.0" fill="rgb(207,161,16)" rx="2" ry="2" />
<text  x="1083.57" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (1 samples, 0.02%)</title><rect x="1032.4" y="437" width="0.2" height="15.0" fill="rgb(235,162,11)" rx="2" ry="2" />
<text  x="1035.41" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (4,763 samples, 91.26%)</title><rect x="89.1" y="693" width="1076.9" height="15.0" fill="rgb(252,86,31)" rx="2" ry="2" />
<text  x="92.13" y="703.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="321.8" y="517" width="0.2" height="15.0" fill="rgb(248,38,18)" rx="2" ry="2" />
<text  x="324.79" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="130.1" y="565" width="0.2" height="15.0" fill="rgb(209,137,28)" rx="2" ry="2" />
<text  x="133.06" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%)</title><rect x="563.7" y="485" width="2.5" height="15.0" fill="rgb(248,94,25)" rx="2" ry="2" />
<text  x="566.71" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="811.5" y="421" width="0.2" height="15.0" fill="rgb(235,99,2)" rx="2" ry="2" />
<text  x="814.51" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="148.4" y="597" width="0.6" height="15.0" fill="rgb(240,99,30)" rx="2" ry="2" />
<text  x="151.37" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="19.5" y="725" width="0.2" height="15.0" fill="rgb(246,60,54)" rx="2" ry="2" />
<text  x="22.50" y="735.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="661.6" y="629" width="0.2" height="15.0" fill="rgb(217,120,31)" rx="2" ry="2" />
<text  x="664.61" y="639.5" ></text>
</g>
<g >
<title>data_value::data_value (1 samples, 0.02%)</title><rect x="20.2" y="341" width="0.2" height="15.0" fill="rgb(218,225,29)" rx="2" ry="2" />
<text  x="23.17" y="351.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (3 samples, 0.06%)</title><rect x="265.3" y="341" width="0.6" height="15.0" fill="rgb(223,136,37)" rx="2" ry="2" />
<text  x="268.26" y="351.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::start (1 samples, 0.02%)</title><rect x="20.2" y="437" width="0.2" height="15.0" fill="rgb(244,167,52)" rx="2" ry="2" />
<text  x="23.17" y="447.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="53.4" y="389" width="0.7" height="15.0" fill="rgb(233,34,39)" rx="2" ry="2" />
<text  x="56.41" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (3 samples, 0.06%)</title><rect x="802.5" y="485" width="0.6" height="15.0" fill="rgb(253,224,9)" rx="2" ry="2" />
<text  x="805.47" y="495.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (44 samples, 0.84%)</title><rect x="907.4" y="549" width="9.9" height="15.0" fill="rgb(247,166,25)" rx="2" ry="2" />
<text  x="910.38" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%)</title><rect x="885.0" y="613" width="0.4" height="15.0" fill="rgb(228,140,18)" rx="2" ry="2" />
<text  x="888.00" y="623.5" ></text>
</g>
<g >
<title>CryptoPP::Weak1::MD5::~MD5 (2 samples, 0.04%)</title><rect x="10.5" y="789" width="0.4" height="15.0" fill="rgb(222,197,53)" rx="2" ry="2" />
<text  x="13.45" y="799.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::work_item, 128ul&gt;::back_chunk_new (1 samples, 0.02%)</title><rect x="1126.9" y="293" width="0.2" height="15.0" fill="rgb(212,204,37)" rx="2" ry="2" />
<text  x="1129.92" y="303.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="27.9" y="389" width="0.2" height="15.0" fill="rgb(249,33,5)" rx="2" ry="2" />
<text  x="30.86" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="716.1" y="629" width="0.5" height="15.0" fill="rgb(231,158,24)" rx="2" ry="2" />
<text  x="719.10" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::operation&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="78.5" y="613" width="0.2" height="15.0" fill="rgb(224,111,0)" rx="2" ry="2" />
<text  x="81.51" y="623.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (13 samples, 0.25%)</title><rect x="948.3" y="581" width="2.9" height="15.0" fill="rgb(227,184,39)" rx="2" ry="2" />
<text  x="951.30" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="983.3" y="437" width="0.5" height="15.0" fill="rgb(246,66,4)" rx="2" ry="2" />
<text  x="986.35" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (4 samples, 0.08%)</title><rect x="451.6" y="373" width="0.9" height="15.0" fill="rgb(231,0,26)" rx="2" ry="2" />
<text  x="454.57" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="857.9" y="613" width="0.2" height="15.0" fill="rgb(226,170,38)" rx="2" ry="2" />
<text  x="860.86" y="623.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (27 samples, 0.52%)</title><rect x="819.2" y="357" width="6.1" height="15.0" fill="rgb(230,158,6)" rx="2" ry="2" />
<text  x="822.20" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (14 samples, 0.27%)</title><rect x="888.8" y="549" width="3.2" height="15.0" fill="rgb(218,23,48)" rx="2" ry="2" />
<text  x="891.84" y="559.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%)</title><rect x="305.5" y="389" width="0.2" height="15.0" fill="rgb(248,120,33)" rx="2" ry="2" />
<text  x="308.51" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="924.1" y="501" width="0.2" height="15.0" fill="rgb(206,86,47)" rx="2" ry="2" />
<text  x="927.11" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="365.0" y="341" width="0.2" height="15.0" fill="rgb(210,221,6)" rx="2" ry="2" />
<text  x="367.97" y="351.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (1 samples, 0.02%)</title><rect x="838.9" y="565" width="0.2" height="15.0" fill="rgb(230,196,33)" rx="2" ry="2" />
<text  x="841.87" y="575.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="525.7" y="405" width="0.3" height="15.0" fill="rgb(208,98,38)" rx="2" ry="2" />
<text  x="528.73" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="619.3" y="533" width="0.3" height="15.0" fill="rgb(244,134,33)" rx="2" ry="2" />
<text  x="622.33" y="543.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%)</title><rect x="765.8" y="549" width="0.7" height="15.0" fill="rgb(233,163,38)" rx="2" ry="2" />
<text  x="768.84" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="187.0" y="389" width="0.5" height="15.0" fill="rgb(225,189,33)" rx="2" ry="2" />
<text  x="190.03" y="399.5" ></text>
</g>
<g >
<title>make_random_seq (1 samples, 0.02%)</title><rect x="882.3" y="661" width="0.2" height="15.0" fill="rgb(245,125,52)" rx="2" ry="2" />
<text  x="885.28" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%)</title><rect x="984.9" y="517" width="0.3" height="15.0" fill="rgb(213,92,39)" rx="2" ry="2" />
<text  x="987.93" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (3 samples, 0.06%)</title><rect x="1133.2" y="661" width="0.7" height="15.0" fill="rgb(237,178,24)" rx="2" ry="2" />
<text  x="1136.25" y="671.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (7 samples, 0.13%)</title><rect x="1125.8" y="437" width="1.6" height="15.0" fill="rgb(211,92,17)" rx="2" ry="2" />
<text  x="1128.79" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (2 samples, 0.04%)</title><rect x="896.8" y="629" width="0.4" height="15.0" fill="rgb(244,176,34)" rx="2" ry="2" />
<text  x="899.75" y="639.5" ></text>
</g>
<g >
<title>make_combined_reader (1 samples, 0.02%)</title><rect x="138.0" y="501" width="0.2" height="15.0" fill="rgb(225,18,36)" rx="2" ry="2" />
<text  x="140.97" y="511.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.5" y="773" width="0.2" height="15.0" fill="rgb(245,49,30)" rx="2" ry="2" />
<text  x="86.48" y="783.5" ></text>
</g>
<g >
<title>__tls_init (3 samples, 0.06%)</title><rect x="197.9" y="421" width="0.7" height="15.0" fill="rgb(252,53,13)" rx="2" ry="2" />
<text  x="200.89" y="431.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (7 samples, 0.13%)</title><rect x="638.5" y="613" width="1.6" height="15.0" fill="rgb(243,38,50)" rx="2" ry="2" />
<text  x="641.55" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (7 samples, 0.13%)</title><rect x="1082.4" y="549" width="1.6" height="15.0" fill="rgb(244,189,20)" rx="2" ry="2" />
<text  x="1085.38" y="559.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (7 samples, 0.13%)</title><rect x="80.3" y="581" width="1.6" height="15.0" fill="rgb(245,67,0)" rx="2" ry="2" />
<text  x="83.32" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%)</title><rect x="751.4" y="565" width="0.4" height="15.0" fill="rgb(247,170,34)" rx="2" ry="2" />
<text  x="754.37" y="575.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="108.1" y="469" width="0.5" height="15.0" fill="rgb(212,225,37)" rx="2" ry="2" />
<text  x="111.13" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="682.9" y="613" width="0.4" height="15.0" fill="rgb(233,163,1)" rx="2" ry="2" />
<text  x="685.86" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="313.6" y="501" width="0.3" height="15.0" fill="rgb(242,55,45)" rx="2" ry="2" />
<text  x="316.65" y="511.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (1 samples, 0.02%)</title><rect x="107.7" y="517" width="0.2" height="15.0" fill="rgb(213,225,29)" rx="2" ry="2" />
<text  x="110.67" y="527.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (274 samples, 5.25%)</title><rect x="20.6" y="741" width="62.0" height="15.0" fill="rgb(236,204,32)" rx="2" ry="2" />
<text  x="23.63" y="751.5" >std::_..</text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (2 samples, 0.04%)</title><rect x="533.9" y="501" width="0.4" height="15.0" fill="rgb(243,210,24)" rx="2" ry="2" />
<text  x="536.87" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (45 samples, 0.86%)</title><rect x="69.9" y="645" width="10.2" height="15.0" fill="rgb(210,183,51)" rx="2" ry="2" />
<text  x="72.92" y="655.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="906.9" y="565" width="0.3" height="15.0" fill="rgb(210,39,25)" rx="2" ry="2" />
<text  x="909.93" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="541.8" y="453" width="0.2" height="15.0" fill="rgb(223,60,52)" rx="2" ry="2" />
<text  x="544.78" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (4 samples, 0.08%)</title><rect x="558.1" y="453" width="0.9" height="15.0" fill="rgb(240,186,7)" rx="2" ry="2" />
<text  x="561.06" y="463.5" ></text>
</g>
<g >
<title>partition_entry::apply_to_incomplete (1 samples, 0.02%)</title><rect x="18.6" y="741" width="0.2" height="15.0" fill="rgb(242,118,44)" rx="2" ry="2" />
<text  x="21.59" y="751.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (601 samples, 11.52%)</title><rect x="952.4" y="597" width="135.9" height="15.0" fill="rgb(225,103,23)" rx="2" ry="2" />
<text  x="955.37" y="607.5" >cql3::statements:..</text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="876.6" y="613" width="0.9" height="15.0" fill="rgb(211,171,43)" rx="2" ry="2" />
<text  x="879.63" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (1 samples, 0.02%)</title><rect x="774.0" y="581" width="0.2" height="15.0" fill="rgb(242,223,38)" rx="2" ry="2" />
<text  x="776.98" y="591.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%)</title><rect x="77.6" y="549" width="0.2" height="15.0" fill="rgb(218,14,27)" rx="2" ry="2" />
<text  x="80.60" y="559.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="630.6" y="581" width="0.3" height="15.0" fill="rgb(223,50,2)" rx="2" ry="2" />
<text  x="633.64" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (14 samples, 0.27%)</title><rect x="847.0" y="517" width="3.2" height="15.0" fill="rgb(231,111,26)" rx="2" ry="2" />
<text  x="850.01" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="38.5" y="437" width="0.2" height="15.0" fill="rgb(209,76,24)" rx="2" ry="2" />
<text  x="41.49" y="447.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="19.7" y="533" width="0.2" height="15.0" fill="rgb(233,101,3)" rx="2" ry="2" />
<text  x="22.72" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%)</title><rect x="1053.4" y="485" width="2.5" height="15.0" fill="rgb(212,22,46)" rx="2" ry="2" />
<text  x="1056.44" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (13 samples, 0.25%)</title><rect x="250.3" y="293" width="3.0" height="15.0" fill="rgb(216,51,13)" rx="2" ry="2" />
<text  x="253.34" y="303.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="10.9" y="725" width="0.2" height="15.0" fill="rgb(248,136,38)" rx="2" ry="2" />
<text  x="13.90" y="735.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="820.3" y="293" width="0.3" height="15.0" fill="rgb(223,116,33)" rx="2" ry="2" />
<text  x="823.33" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (650 samples, 12.45%)</title><rect x="168.7" y="517" width="147.0" height="15.0" fill="rgb(242,163,15)" rx="2" ry="2" />
<text  x="171.72" y="527.5" >mutation_fragment_..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="64.7" y="325" width="0.2" height="15.0" fill="rgb(206,69,52)" rx="2" ry="2" />
<text  x="67.72" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="725.4" y="645" width="0.4" height="15.0" fill="rgb(216,107,29)" rx="2" ry="2" />
<text  x="728.37" y="655.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (972 samples, 18.62%)</title><rect x="897.9" y="645" width="219.7" height="15.0" fill="rgb(216,120,1)" rx="2" ry="2" />
<text  x="900.88" y="655.5" >seastar::noncopyable_function..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%)</title><rect x="1165.6" y="533" width="0.2" height="15.0" fill="rgb(251,5,52)" rx="2" ry="2" />
<text  x="1168.58" y="543.5" ></text>
</g>
<g >
<title>row::external_memory_usage (28 samples, 0.54%)</title><rect x="257.6" y="325" width="6.3" height="15.0" fill="rgb(209,126,28)" rx="2" ry="2" />
<text  x="260.58" y="335.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="108.6" y="485" width="0.2" height="15.0" fill="rgb(222,188,3)" rx="2" ry="2" />
<text  x="111.58" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (4,783 samples, 91.65%)</title><rect x="87.1" y="709" width="1081.4" height="15.0" fill="rgb(251,87,34)" rx="2" ry="2" />
<text  x="90.10" y="719.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>mutation_partition::apply_weak (2 samples, 0.04%)</title><rect x="108.8" y="501" width="0.5" height="15.0" fill="rgb(254,77,53)" rx="2" ry="2" />
<text  x="111.80" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="957.3" y="549" width="0.5" height="15.0" fill="rgb(228,146,40)" rx="2" ry="2" />
<text  x="960.35" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (3 samples, 0.06%)</title><rect x="106.5" y="581" width="0.7" height="15.0" fill="rgb(210,187,38)" rx="2" ry="2" />
<text  x="109.54" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1022.9" y="373" width="0.2" height="15.0" fill="rgb(221,124,31)" rx="2" ry="2" />
<text  x="1025.91" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="674.0" y="501" width="0.3" height="15.0" fill="rgb(213,35,42)" rx="2" ry="2" />
<text  x="677.05" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="106.5" y="469" width="0.3" height="15.0" fill="rgb(222,175,43)" rx="2" ry="2" />
<text  x="109.54" y="479.5" ></text>
</g>
<g >
<title>compound_type&lt; (6 samples, 0.11%)</title><rect x="920.0" y="549" width="1.4" height="15.0" fill="rgb(244,53,2)" rx="2" ry="2" />
<text  x="923.04" y="559.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::~RecognizerSharedState (1 samples, 0.02%)</title><rect x="24.5" y="549" width="0.2" height="15.0" fill="rgb(222,160,21)" rx="2" ry="2" />
<text  x="27.47" y="559.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (4 samples, 0.08%)</title><rect x="85.1" y="597" width="0.9" height="15.0" fill="rgb(247,201,46)" rx="2" ry="2" />
<text  x="88.06" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (41 samples, 0.79%)</title><rect x="547.7" y="437" width="9.2" height="15.0" fill="rgb(243,182,8)" rx="2" ry="2" />
<text  x="550.66" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_aggregate_statement, std::default_delete&lt;cql3::statements::create_aggregate_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.3" y="549" width="0.2" height="15.0" fill="rgb(216,73,20)" rx="2" ry="2" />
<text  x="69.30" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="994.0" y="405" width="0.7" height="15.0" fill="rgb(237,60,12)" rx="2" ry="2" />
<text  x="996.97" y="415.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (3 samples, 0.06%)</title><rect x="837.1" y="469" width="0.6" height="15.0" fill="rgb(236,147,51)" rx="2" ry="2" />
<text  x="840.06" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (5 samples, 0.10%)</title><rect x="546.1" y="437" width="1.1" height="15.0" fill="rgb(205,107,4)" rx="2" ry="2" />
<text  x="549.08" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_table_statement, std::default_delete&lt;cql3::statements::drop_table_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="66.5" y="517" width="0.3" height="15.0" fill="rgb(243,147,5)" rx="2" ry="2" />
<text  x="69.52" y="527.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="100.9" y="629" width="0.4" height="15.0" fill="rgb(231,184,9)" rx="2" ry="2" />
<text  x="103.89" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="46.2" y="325" width="0.4" height="15.0" fill="rgb(217,43,35)" rx="2" ry="2" />
<text  x="49.18" y="335.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::StackType (1 samples, 0.02%)</title><rect x="24.0" y="501" width="0.2" height="15.0" fill="rgb(243,117,47)" rx="2" ry="2" />
<text  x="27.02" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (3 samples, 0.06%)</title><rect x="808.6" y="469" width="0.7" height="15.0" fill="rgb(211,47,44)" rx="2" ry="2" />
<text  x="811.57" y="479.5" ></text>
</g>
<g >
<title>service::storage_service::join_cluster (3 samples, 0.06%)</title><rect x="19.9" y="725" width="0.7" height="15.0" fill="rgb(221,123,3)" rx="2" ry="2" />
<text  x="22.95" y="735.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (4 samples, 0.08%)</title><rect x="553.1" y="373" width="0.9" height="15.0" fill="rgb(236,94,22)" rx="2" ry="2" />
<text  x="556.08" y="383.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (30 samples, 0.57%)</title><rect x="525.7" y="421" width="6.8" height="15.0" fill="rgb(221,96,18)" rx="2" ry="2" />
<text  x="528.73" y="431.5" ></text>
</g>
<g >
<title>dht::shard_of (1 samples, 0.02%)</title><rect x="1126.7" y="357" width="0.2" height="15.0" fill="rgb(207,213,31)" rx="2" ry="2" />
<text  x="1129.69" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1114.5" y="597" width="0.2" height="15.0" fill="rgb(242,57,24)" rx="2" ry="2" />
<text  x="1117.48" y="607.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (28 samples, 0.54%)</title><rect x="885.9" y="661" width="6.3" height="15.0" fill="rgb(210,6,14)" rx="2" ry="2" />
<text  x="888.90" y="671.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::RecognizerSharedState (1 samples, 0.02%)</title><rect x="23.6" y="565" width="0.2" height="15.0" fill="rgb(216,138,48)" rx="2" ry="2" />
<text  x="26.57" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="75.6" y="373" width="0.2" height="15.0" fill="rgb(216,218,50)" rx="2" ry="2" />
<text  x="78.57" y="383.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="64.0" y="485" width="0.3" height="15.0" fill="rgb(227,111,53)" rx="2" ry="2" />
<text  x="67.04" y="495.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (1 samples, 0.02%)</title><rect x="888.6" y="533" width="0.2" height="15.0" fill="rgb(245,32,45)" rx="2" ry="2" />
<text  x="891.61" y="543.5" ></text>
</g>
<g >
<title>abstract_type::from_string (4 samples, 0.08%)</title><rect x="70.8" y="549" width="0.9" height="15.0" fill="rgb(230,59,24)" rx="2" ry="2" />
<text  x="73.82" y="559.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (2 samples, 0.04%)</title><rect x="850.2" y="581" width="0.4" height="15.0" fill="rgb(238,115,45)" rx="2" ry="2" />
<text  x="853.18" y="591.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (1 samples, 0.02%)</title><rect x="1168.5" y="709" width="0.2" height="15.0" fill="rgb(213,5,10)" rx="2" ry="2" />
<text  x="1171.52" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="596.0" y="565" width="0.5" height="15.0" fill="rgb(217,136,8)" rx="2" ry="2" />
<text  x="599.04" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (2 samples, 0.04%)</title><rect x="415.8" y="373" width="0.5" height="15.0" fill="rgb(253,95,54)" rx="2" ry="2" />
<text  x="418.84" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="672.5" y="661" width="0.2" height="15.0" fill="rgb(253,206,17)" rx="2" ry="2" />
<text  x="675.46" y="671.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (5 samples, 0.10%)</title><rect x="840.2" y="549" width="1.2" height="15.0" fill="rgb(240,114,9)" rx="2" ry="2" />
<text  x="843.23" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::get_deleter (1 samples, 0.02%)</title><rect x="67.4" y="533" width="0.3" height="15.0" fill="rgb(253,25,45)" rx="2" ry="2" />
<text  x="70.43" y="543.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="10.9" y="741" width="0.2" height="15.0" fill="rgb(212,138,21)" rx="2" ry="2" />
<text  x="13.90" y="751.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (475 samples, 9.10%)</title><rect x="476.0" y="565" width="107.4" height="15.0" fill="rgb(207,73,6)" rx="2" ry="2" />
<text  x="478.99" y="575.5" >std::function..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (17 samples, 0.33%)</title><rect x="842.5" y="517" width="3.8" height="15.0" fill="rgb(253,28,53)" rx="2" ry="2" />
<text  x="845.49" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (1 samples, 0.02%)</title><rect x="173.7" y="485" width="0.2" height="15.0" fill="rgb(231,134,52)" rx="2" ry="2" />
<text  x="176.69" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (5 samples, 0.10%)</title><rect x="647.8" y="597" width="1.1" height="15.0" fill="rgb(207,118,20)" rx="2" ry="2" />
<text  x="650.82" y="607.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (14 samples, 0.27%)</title><rect x="292.2" y="373" width="3.1" height="15.0" fill="rgb(210,95,48)" rx="2" ry="2" />
<text  x="295.17" y="383.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="604.4" y="485" width="0.2" height="15.0" fill="rgb(232,229,8)" rx="2" ry="2" />
<text  x="607.41" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (2 samples, 0.04%)</title><rect x="783.7" y="533" width="0.5" height="15.0" fill="rgb(231,149,25)" rx="2" ry="2" />
<text  x="786.70" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::(anonymous namespace)::explode_conjunction (2 samples, 0.04%)</title><rect x="75.3" y="469" width="0.5" height="15.0" fill="rgb(214,142,23)" rx="2" ry="2" />
<text  x="78.34" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="83.7" y="677" width="0.2" height="15.0" fill="rgb(209,155,1)" rx="2" ry="2" />
<text  x="86.71" y="687.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (1 samples, 0.02%)</title><rect x="954.9" y="581" width="0.2" height="15.0" fill="rgb(237,4,12)" rx="2" ry="2" />
<text  x="957.86" y="591.5" ></text>
</g>
<g >
<title>ser::qr_row_view::cells (1 samples, 0.02%)</title><rect x="671.6" y="517" width="0.2" height="15.0" fill="rgb(243,84,50)" rx="2" ry="2" />
<text  x="674.56" y="527.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1075.8" y="437" width="0.2" height="15.0" fill="rgb(240,30,30)" rx="2" ry="2" />
<text  x="1078.82" y="447.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (5 samples, 0.10%)</title><rect x="764.5" y="485" width="1.1" height="15.0" fill="rgb(211,85,33)" rx="2" ry="2" />
<text  x="767.49" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="57.0" y="389" width="0.3" height="15.0" fill="rgb(207,5,35)" rx="2" ry="2" />
<text  x="60.03" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (3 samples, 0.06%)</title><rect x="861.9" y="549" width="0.7" height="15.0" fill="rgb(206,3,23)" rx="2" ry="2" />
<text  x="864.93" y="559.5" ></text>
</g>
<g >
<title>table::try_flush_memtable_to_sstable (1 samples, 0.02%)</title><rect x="740.3" y="645" width="0.2" height="15.0" fill="rgb(240,177,15)" rx="2" ry="2" />
<text  x="743.29" y="655.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (5 samples, 0.10%)</title><rect x="108.1" y="597" width="1.2" height="15.0" fill="rgb(220,192,34)" rx="2" ry="2" />
<text  x="111.13" y="607.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="54.3" y="325" width="0.5" height="15.0" fill="rgb(245,177,8)" rx="2" ry="2" />
<text  x="57.32" y="335.5" ></text>
</g>
<g >
<title>boost::variant&lt;ser::live_cell_view, ser::expiring_cell_view, ser::dead_cell_view, ser::counter_cell_view, ser::unknown_variant_type&gt;::variant (2 samples, 0.04%)</title><rect x="1120.6" y="405" width="0.4" height="15.0" fill="rgb(248,160,37)" rx="2" ry="2" />
<text  x="1123.59" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::operator= (1 samples, 0.02%)</title><rect x="61.6" y="517" width="0.2" height="15.0" fill="rgb(231,206,49)" rx="2" ry="2" />
<text  x="64.55" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (1 samples, 0.02%)</title><rect x="490.0" y="469" width="0.2" height="15.0" fill="rgb(231,113,30)" rx="2" ry="2" />
<text  x="493.00" y="479.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::append&lt;char&gt; (1 samples, 0.02%)</title><rect x="82.8" y="789" width="0.2" height="15.0" fill="rgb(241,28,30)" rx="2" ry="2" />
<text  x="85.80" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1009.8" y="389" width="0.2" height="15.0" fill="rgb(224,191,9)" rx="2" ry="2" />
<text  x="1012.80" y="399.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (1 samples, 0.02%)</title><rect x="280.6" y="357" width="0.3" height="15.0" fill="rgb(209,0,17)" rx="2" ry="2" />
<text  x="283.64" y="367.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="811.1" y="421" width="0.4" height="15.0" fill="rgb(235,110,13)" rx="2" ry="2" />
<text  x="814.06" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="673.1" y="389" width="0.3" height="15.0" fill="rgb(220,34,12)" rx="2" ry="2" />
<text  x="676.14" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::~modification_statement (7 samples, 0.13%)</title><rect x="672.9" y="645" width="1.6" height="15.0" fill="rgb(219,15,21)" rx="2" ry="2" />
<text  x="675.92" y="655.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%)</title><rect x="555.3" y="389" width="0.3" height="15.0" fill="rgb(224,32,15)" rx="2" ry="2" />
<text  x="558.35" y="399.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="493.4" y="453" width="0.7" height="15.0" fill="rgb(245,109,17)" rx="2" ry="2" />
<text  x="496.40" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (4 samples, 0.08%)</title><rect x="106.3" y="661" width="0.9" height="15.0" fill="rgb(252,84,29)" rx="2" ry="2" />
<text  x="109.32" y="671.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::~pair (1 samples, 0.02%)</title><rect x="53.9" y="325" width="0.2" height="15.0" fill="rgb(206,24,51)" rx="2" ry="2" />
<text  x="56.86" y="335.5" ></text>
</g>
<g >
<title>locator::everywhere_replication_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="20.4" y="581" width="0.2" height="15.0" fill="rgb(231,206,35)" rx="2" ry="2" />
<text  x="23.40" y="591.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="740.5" y="629" width="0.2" height="15.0" fill="rgb(254,229,39)" rx="2" ry="2" />
<text  x="743.52" y="639.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (5 samples, 0.10%)</title><rect x="588.4" y="549" width="1.1" height="15.0" fill="rgb(241,143,7)" rx="2" ry="2" />
<text  x="591.36" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (2 samples, 0.04%)</title><rect x="88.2" y="693" width="0.5" height="15.0" fill="rgb(248,158,39)" rx="2" ry="2" />
<text  x="91.23" y="703.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="16.3" y="757" width="0.3" height="15.0" fill="rgb(210,162,49)" rx="2" ry="2" />
<text  x="19.33" y="767.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (2 samples, 0.04%)</title><rect x="514.0" y="453" width="0.4" height="15.0" fill="rgb(251,0,24)" rx="2" ry="2" />
<text  x="516.97" y="463.5" ></text>
</g>
<g >
<title>[[vdso]] (23 samples, 0.44%)</title><rect x="1172.1" y="789" width="5.2" height="15.0" fill="rgb(252,210,4)" rx="2" ry="2" />
<text  x="1175.14" y="799.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="273.0" y="357" width="0.2" height="15.0" fill="rgb(220,45,31)" rx="2" ry="2" />
<text  x="275.95" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (2 samples, 0.04%)</title><rect x="887.0" y="533" width="0.5" height="15.0" fill="rgb(235,140,36)" rx="2" ry="2" />
<text  x="890.03" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="19.5" y="709" width="0.2" height="15.0" fill="rgb(249,32,50)" rx="2" ry="2" />
<text  x="22.50" y="719.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (2 samples, 0.04%)</title><rect x="444.1" y="373" width="0.5" height="15.0" fill="rgb(217,212,52)" rx="2" ry="2" />
<text  x="447.11" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (1 samples, 0.02%)</title><rect x="539.5" y="485" width="0.2" height="15.0" fill="rgb(229,128,5)" rx="2" ry="2" />
<text  x="542.52" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%)</title><rect x="108.1" y="501" width="0.5" height="15.0" fill="rgb(220,162,35)" rx="2" ry="2" />
<text  x="111.13" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.06%)</title><rect x="77.4" y="581" width="0.7" height="15.0" fill="rgb(228,118,50)" rx="2" ry="2" />
<text  x="80.38" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="63.4" y="341" width="0.2" height="15.0" fill="rgb(245,1,46)" rx="2" ry="2" />
<text  x="66.36" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="30.8" y="389" width="0.2" height="15.0" fill="rgb(247,223,34)" rx="2" ry="2" />
<text  x="33.80" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="504.9" y="485" width="0.3" height="15.0" fill="rgb(247,80,43)" rx="2" ry="2" />
<text  x="507.93" y="495.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1,000 samples, 19.16%)</title><rect x="892.2" y="661" width="226.1" height="15.0" fill="rgb(223,18,17)" rx="2" ry="2" />
<text  x="895.23" y="671.5" >seastar::concrete_execution_s..</text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="671.6" y="501" width="0.2" height="15.0" fill="rgb(219,88,4)" rx="2" ry="2" />
<text  x="674.56" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::~CqlParser (2 samples, 0.04%)</title><rect x="24.5" y="597" width="0.4" height="15.0" fill="rgb(239,9,21)" rx="2" ry="2" />
<text  x="27.47" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="58.6" y="309" width="0.2" height="15.0" fill="rgb(223,219,35)" rx="2" ry="2" />
<text  x="61.61" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="440.3" y="421" width="0.2" height="15.0" fill="rgb(213,49,40)" rx="2" ry="2" />
<text  x="443.26" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="871.9" y="613" width="0.2" height="15.0" fill="rgb(209,28,30)" rx="2" ry="2" />
<text  x="874.88" y="623.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (34 samples, 0.65%)</title><rect x="1125.6" y="661" width="7.6" height="15.0" fill="rgb(246,115,22)" rx="2" ry="2" />
<text  x="1128.56" y="671.5" ></text>
</g>
<g >
<title>mutation_partition::apply (2 samples, 0.04%)</title><rect x="108.8" y="517" width="0.5" height="15.0" fill="rgb(226,18,38)" rx="2" ry="2" />
<text  x="111.80" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="188.4" y="405" width="0.7" height="15.0" fill="rgb(231,147,30)" rx="2" ry="2" />
<text  x="191.39" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (90 samples, 1.72%)</title><rect x="674.5" y="677" width="20.3" height="15.0" fill="rgb(248,103,43)" rx="2" ry="2" />
<text  x="677.50" y="687.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (14 samples, 0.27%)</title><rect x="910.3" y="485" width="3.2" height="15.0" fill="rgb(234,161,4)" rx="2" ry="2" />
<text  x="913.32" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%)</title><rect x="626.8" y="581" width="0.4" height="15.0" fill="rgb(219,4,21)" rx="2" ry="2" />
<text  x="629.79" y="591.5" ></text>
</g>
<g >
<title>from_hex (4 samples, 0.08%)</title><rect x="70.8" y="517" width="0.9" height="15.0" fill="rgb(238,24,27)" rx="2" ry="2" />
<text  x="73.82" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%)</title><rect x="883.0" y="517" width="0.2" height="15.0" fill="rgb(213,170,19)" rx="2" ry="2" />
<text  x="885.96" y="527.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="433.0" y="341" width="0.3" height="15.0" fill="rgb(205,146,6)" rx="2" ry="2" />
<text  x="436.03" y="351.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="436.6" y="357" width="0.3" height="15.0" fill="rgb(236,196,18)" rx="2" ry="2" />
<text  x="439.64" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (189 samples, 3.62%)</title><rect x="25.4" y="565" width="42.7" height="15.0" fill="rgb(243,162,16)" rx="2" ry="2" />
<text  x="28.37" y="575.5" >cql3..</text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (6 samples, 0.11%)</title><rect x="84.8" y="645" width="1.4" height="15.0" fill="rgb(254,94,12)" rx="2" ry="2" />
<text  x="87.84" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.04%)</title><rect x="76.5" y="533" width="0.4" height="15.0" fill="rgb(247,8,4)" rx="2" ry="2" />
<text  x="79.47" y="543.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (2 samples, 0.04%)</title><rect x="364.5" y="341" width="0.5" height="15.0" fill="rgb(223,193,32)" rx="2" ry="2" />
<text  x="367.52" y="351.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%)</title><rect x="1040.1" y="437" width="0.2" height="15.0" fill="rgb(234,183,41)" rx="2" ry="2" />
<text  x="1043.10" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="807.9" y="421" width="0.2" height="15.0" fill="rgb(244,225,22)" rx="2" ry="2" />
<text  x="810.90" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="48.2" y="421" width="0.5" height="15.0" fill="rgb(247,172,33)" rx="2" ry="2" />
<text  x="51.21" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="404.5" y="325" width="1.2" height="15.0" fill="rgb(244,163,12)" rx="2" ry="2" />
<text  x="407.54" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="12.9" y="693" width="0.3" height="15.0" fill="rgb(220,172,39)" rx="2" ry="2" />
<text  x="15.94" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1092.8" y="517" width="0.2" height="15.0" fill="rgb(246,172,0)" rx="2" ry="2" />
<text  x="1095.78" y="527.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (4 samples, 0.08%)</title><rect x="576.6" y="437" width="0.9" height="15.0" fill="rgb(218,10,14)" rx="2" ry="2" />
<text  x="579.60" y="447.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="283.4" y="389" width="0.2" height="15.0" fill="rgb(243,161,34)" rx="2" ry="2" />
<text  x="286.35" y="399.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (4 samples, 0.08%)</title><rect x="85.1" y="613" width="0.9" height="15.0" fill="rgb(225,141,35)" rx="2" ry="2" />
<text  x="88.06" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="1091.6" y="533" width="0.3" height="15.0" fill="rgb(234,127,19)" rx="2" ry="2" />
<text  x="1094.65" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="19.0" y="693" width="0.3" height="15.0" fill="rgb(224,204,9)" rx="2" ry="2" />
<text  x="22.04" y="703.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (7 samples, 0.13%)</title><rect x="1112.0" y="565" width="1.6" height="15.0" fill="rgb(215,115,29)" rx="2" ry="2" />
<text  x="1115.00" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="41.7" y="453" width="0.2" height="15.0" fill="rgb(252,42,51)" rx="2" ry="2" />
<text  x="44.65" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%)</title><rect x="265.0" y="341" width="0.3" height="15.0" fill="rgb(241,83,9)" rx="2" ry="2" />
<text  x="268.04" y="351.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_state (1 samples, 0.02%)</title><rect x="43.2" y="517" width="0.3" height="15.0" fill="rgb(219,96,35)" rx="2" ry="2" />
<text  x="46.24" y="527.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (1 samples, 0.02%)</title><rect x="1143.4" y="645" width="0.3" height="15.0" fill="rgb(248,16,28)" rx="2" ry="2" />
<text  x="1146.42" y="655.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6 samples, 0.11%)</title><rect x="393.0" y="341" width="1.4" height="15.0" fill="rgb(234,203,21)" rx="2" ry="2" />
<text  x="396.01" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="45.0" y="437" width="0.3" height="15.0" fill="rgb(253,67,52)" rx="2" ry="2" />
<text  x="48.05" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (1 samples, 0.02%)</title><rect x="74.0" y="501" width="0.2" height="15.0" fill="rgb(235,100,8)" rx="2" ry="2" />
<text  x="76.99" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="491.1" y="437" width="0.5" height="15.0" fill="rgb(210,67,12)" rx="2" ry="2" />
<text  x="494.13" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1083.7" y="533" width="0.3" height="15.0" fill="rgb(240,153,12)" rx="2" ry="2" />
<text  x="1086.73" y="543.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="20.2" y="485" width="0.2" height="15.0" fill="rgb(248,102,42)" rx="2" ry="2" />
<text  x="23.17" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (5 samples, 0.10%)</title><rect x="58.2" y="453" width="1.1" height="15.0" fill="rgb(244,77,2)" rx="2" ry="2" />
<text  x="61.16" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="346.7" y="485" width="0.2" height="15.0" fill="rgb(208,86,22)" rx="2" ry="2" />
<text  x="349.66" y="495.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (25 samples, 0.48%)</title><rect x="1063.8" y="437" width="5.7" height="15.0" fill="rgb(249,130,7)" rx="2" ry="2" />
<text  x="1066.84" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="613.9" y="501" width="0.2" height="15.0" fill="rgb(251,199,50)" rx="2" ry="2" />
<text  x="616.90" y="511.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="57.9" y="421" width="0.3" height="15.0" fill="rgb(242,85,22)" rx="2" ry="2" />
<text  x="60.93" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="497.9" y="469" width="0.5" height="15.0" fill="rgb(219,225,52)" rx="2" ry="2" />
<text  x="500.92" y="479.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (9 samples, 0.17%)</title><rect x="786.9" y="517" width="2.0" height="15.0" fill="rgb(210,136,0)" rx="2" ry="2" />
<text  x="789.87" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (15 samples, 0.29%)</title><rect x="854.2" y="597" width="3.4" height="15.0" fill="rgb(231,196,47)" rx="2" ry="2" />
<text  x="857.25" y="607.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (51 samples, 0.98%)</title><rect x="704.6" y="677" width="11.5" height="15.0" fill="rgb(243,142,25)" rx="2" ry="2" />
<text  x="707.57" y="687.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="12.9" y="741" width="0.3" height="15.0" fill="rgb(234,31,17)" rx="2" ry="2" />
<text  x="15.94" y="751.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="858.3" y="613" width="0.2" height="15.0" fill="rgb(228,32,15)" rx="2" ry="2" />
<text  x="861.32" y="623.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (2 samples, 0.04%)</title><rect x="948.5" y="565" width="0.5" height="15.0" fill="rgb(240,118,54)" rx="2" ry="2" />
<text  x="951.53" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (2 samples, 0.04%)</title><rect x="108.1" y="405" width="0.5" height="15.0" fill="rgb(215,197,51)" rx="2" ry="2" />
<text  x="111.13" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (2 samples, 0.04%)</title><rect x="758.4" y="565" width="0.4" height="15.0" fill="rgb(248,199,20)" rx="2" ry="2" />
<text  x="761.38" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::to_expression (1 samples, 0.02%)</title><rect x="73.3" y="533" width="0.2" height="15.0" fill="rgb(213,213,8)" rx="2" ry="2" />
<text  x="76.31" y="543.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (118 samples, 2.26%)</title><rect x="385.8" y="357" width="26.7" height="15.0" fill="rgb(226,128,44)" rx="2" ry="2" />
<text  x="388.77" y="367.5" >w..</text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1015.9" y="341" width="0.2" height="15.0" fill="rgb(226,43,43)" rx="2" ry="2" />
<text  x="1018.91" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%)</title><rect x="458.6" y="437" width="0.2" height="15.0" fill="rgb(246,36,5)" rx="2" ry="2" />
<text  x="461.58" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::on_new_range (1 samples, 0.02%)</title><rect x="84.2" y="533" width="0.2" height="15.0" fill="rgb(207,93,27)" rx="2" ry="2" />
<text  x="87.16" y="543.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="888.4" y="517" width="0.2" height="15.0" fill="rgb(221,202,27)" rx="2" ry="2" />
<text  x="891.39" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="48.0" y="373" width="0.2" height="15.0" fill="rgb(225,217,35)" rx="2" ry="2" />
<text  x="50.98" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (12 samples, 0.23%)</title><rect x="835.7" y="517" width="2.7" height="15.0" fill="rgb(243,116,22)" rx="2" ry="2" />
<text  x="838.71" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (1 samples, 0.02%)</title><rect x="1095.3" y="565" width="0.2" height="15.0" fill="rgb(238,5,42)" rx="2" ry="2" />
<text  x="1098.27" y="575.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (10 samples, 0.19%)</title><rect x="1057.5" y="485" width="2.3" height="15.0" fill="rgb(222,203,10)" rx="2" ry="2" />
<text  x="1060.51" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (4 samples, 0.08%)</title><rect x="80.8" y="533" width="0.9" height="15.0" fill="rgb(221,101,39)" rx="2" ry="2" />
<text  x="83.77" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (13 samples, 0.25%)</title><rect x="734.4" y="613" width="3.0" height="15.0" fill="rgb(233,125,42)" rx="2" ry="2" />
<text  x="737.41" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="732.2" y="597" width="0.2" height="15.0" fill="rgb(206,221,2)" rx="2" ry="2" />
<text  x="735.15" y="607.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="54.8" y="453" width="0.2" height="15.0" fill="rgb(220,149,35)" rx="2" ry="2" />
<text  x="57.77" y="463.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="64.7" y="437" width="0.2" height="15.0" fill="rgb(225,166,1)" rx="2" ry="2" />
<text  x="67.72" y="447.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="62.5" y="469" width="0.2" height="15.0" fill="rgb(254,1,1)" rx="2" ry="2" />
<text  x="65.45" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="46.6" y="405" width="0.5" height="15.0" fill="rgb(221,128,8)" rx="2" ry="2" />
<text  x="49.63" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.02%)</title><rect x="1147.5" y="613" width="0.2" height="15.0" fill="rgb(234,84,8)" rx="2" ry="2" />
<text  x="1150.49" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (1 samples, 0.02%)</title><rect x="884.8" y="549" width="0.2" height="15.0" fill="rgb(238,65,23)" rx="2" ry="2" />
<text  x="887.77" y="559.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="577.1" y="421" width="0.2" height="15.0" fill="rgb(213,48,32)" rx="2" ry="2" />
<text  x="580.05" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (7 samples, 0.13%)</title><rect x="710.0" y="629" width="1.6" height="15.0" fill="rgb(242,104,36)" rx="2" ry="2" />
<text  x="713.00" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="1081.7" y="549" width="0.5" height="15.0" fill="rgb(228,21,12)" rx="2" ry="2" />
<text  x="1084.70" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%)</title><rect x="956.2" y="533" width="0.2" height="15.0" fill="rgb(236,33,16)" rx="2" ry="2" />
<text  x="959.22" y="543.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (3 samples, 0.06%)</title><rect x="642.2" y="597" width="0.6" height="15.0" fill="rgb(226,36,28)" rx="2" ry="2" />
<text  x="645.17" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%)</title><rect x="1025.2" y="373" width="2.5" height="15.0" fill="rgb(252,100,2)" rx="2" ry="2" />
<text  x="1028.18" y="383.5" ></text>
</g>
<g >
<title>validation::is_cql_key_invalid (2 samples, 0.04%)</title><rect x="888.2" y="533" width="0.4" height="15.0" fill="rgb(252,47,49)" rx="2" ry="2" />
<text  x="891.16" y="543.5" ></text>
</g>
<g >
<title>schema::get_partitioner (1 samples, 0.02%)</title><rect x="941.3" y="581" width="0.2" height="15.0" fill="rgb(243,51,43)" rx="2" ry="2" />
<text  x="944.29" y="591.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%)</title><rect x="739.2" y="613" width="0.2" height="15.0" fill="rgb(212,72,40)" rx="2" ry="2" />
<text  x="742.16" y="623.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.08%)</title><rect x="571.4" y="453" width="0.9" height="15.0" fill="rgb(252,31,51)" rx="2" ry="2" />
<text  x="574.40" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (21 samples, 0.40%)</title><rect x="446.8" y="373" width="4.8" height="15.0" fill="rgb(230,55,3)" rx="2" ry="2" />
<text  x="449.82" y="383.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="740.5" y="661" width="0.2" height="15.0" fill="rgb(252,101,38)" rx="2" ry="2" />
<text  x="743.52" y="671.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="108.8" y="421" width="0.2" height="15.0" fill="rgb(228,94,42)" rx="2" ry="2" />
<text  x="111.80" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (4 samples, 0.08%)</title><rect x="1167.4" y="661" width="0.9" height="15.0" fill="rgb(223,144,18)" rx="2" ry="2" />
<text  x="1170.39" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="45.0" y="421" width="0.3" height="15.0" fill="rgb(210,142,29)" rx="2" ry="2" />
<text  x="48.05" y="431.5" ></text>
</g>
<g >
<title>schema::get_column_definition (1 samples, 0.02%)</title><rect x="107.7" y="469" width="0.2" height="15.0" fill="rgb(222,200,23)" rx="2" ry="2" />
<text  x="110.67" y="479.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (6 samples, 0.11%)</title><rect x="792.1" y="533" width="1.3" height="15.0" fill="rgb(205,172,29)" rx="2" ry="2" />
<text  x="795.07" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="41.7" y="469" width="0.2" height="15.0" fill="rgb(236,227,30)" rx="2" ry="2" />
<text  x="44.65" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%)</title><rect x="845.7" y="469" width="0.6" height="15.0" fill="rgb(243,77,13)" rx="2" ry="2" />
<text  x="848.65" y="479.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (6 samples, 0.11%)</title><rect x="348.9" y="453" width="1.4" height="15.0" fill="rgb(245,158,10)" rx="2" ry="2" />
<text  x="351.92" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (9 samples, 0.17%)</title><rect x="792.1" y="549" width="2.0" height="15.0" fill="rgb(233,115,22)" rx="2" ry="2" />
<text  x="795.07" y="559.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="848.6" y="453" width="0.2" height="15.0" fill="rgb(214,229,8)" rx="2" ry="2" />
<text  x="851.59" y="463.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.06%)</title><rect x="10.9" y="773" width="0.7" height="15.0" fill="rgb(224,215,25)" rx="2" ry="2" />
<text  x="13.90" y="783.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="822.8" y="309" width="0.2" height="15.0" fill="rgb(226,209,28)" rx="2" ry="2" />
<text  x="825.82" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;db::rp_handle&gt;::future (1 samples, 0.02%)</title><rect x="1124.2" y="453" width="0.2" height="15.0" fill="rgb(225,30,40)" rx="2" ry="2" />
<text  x="1127.21" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="18.6" y="677" width="0.2" height="15.0" fill="rgb(217,156,34)" rx="2" ry="2" />
<text  x="21.59" y="687.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (271 samples, 5.19%)</title><rect x="981.1" y="533" width="61.3" height="15.0" fill="rgb(244,177,8)" rx="2" ry="2" />
<text  x="984.09" y="543.5" >servic..</text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="715.2" y="661" width="0.2" height="15.0" fill="rgb(251,168,39)" rx="2" ry="2" />
<text  x="718.20" y="671.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="716.1" y="501" width="0.5" height="15.0" fill="rgb(245,209,12)" rx="2" ry="2" />
<text  x="719.10" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (30 samples, 0.57%)</title><rect x="1125.8" y="501" width="6.8" height="15.0" fill="rgb(205,146,53)" rx="2" ry="2" />
<text  x="1128.79" y="511.5" ></text>
</g>
<g >
<title>database::query (99 samples, 1.90%)</title><rect x="1007.1" y="437" width="22.4" height="15.0" fill="rgb(221,106,26)" rx="2" ry="2" />
<text  x="1010.09" y="447.5" >d..</text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="839.8" y="549" width="0.2" height="15.0" fill="rgb(212,115,14)" rx="2" ry="2" />
<text  x="842.78" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="108.1" y="437" width="0.5" height="15.0" fill="rgb(232,30,51)" rx="2" ry="2" />
<text  x="111.13" y="447.5" ></text>
</g>
<g >
<title>query::result_row_view::iterator (1 samples, 0.02%)</title><rect x="671.6" y="533" width="0.2" height="15.0" fill="rgb(219,165,5)" rx="2" ry="2" />
<text  x="674.56" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (22 samples, 0.42%)</title><rect x="985.6" y="517" width="5.0" height="15.0" fill="rgb(232,180,40)" rx="2" ry="2" />
<text  x="988.61" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.10%)</title><rect x="26.5" y="421" width="1.1" height="15.0" fill="rgb(219,95,36)" rx="2" ry="2" />
<text  x="29.51" y="431.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="48.2" y="469" width="0.5" height="15.0" fill="rgb(211,185,50)" rx="2" ry="2" />
<text  x="51.21" y="479.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="605.8" y="469" width="0.2" height="15.0" fill="rgb(216,217,34)" rx="2" ry="2" />
<text  x="608.77" y="479.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (2 samples, 0.04%)</title><rect x="653.9" y="597" width="0.5" height="15.0" fill="rgb(222,20,46)" rx="2" ry="2" />
<text  x="656.92" y="607.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="463.8" y="533" width="0.2" height="15.0" fill="rgb(220,123,5)" rx="2" ry="2" />
<text  x="466.78" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_destroy&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="41.0" y="469" width="0.2" height="15.0" fill="rgb(253,24,37)" rx="2" ry="2" />
<text  x="43.98" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="83.5" y="325" width="0.2" height="15.0" fill="rgb(211,134,6)" rx="2" ry="2" />
<text  x="86.48" y="335.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (1 samples, 0.02%)</title><rect x="106.8" y="389" width="0.2" height="15.0" fill="rgb(232,56,32)" rx="2" ry="2" />
<text  x="109.77" y="399.5" ></text>
</g>
<g >
<title>boost::iterators::filter_iterator&lt;mutation_partition::non_dummy_rows (1 samples, 0.02%)</title><rect x="1128.0" y="325" width="0.3" height="15.0" fill="rgb(208,103,35)" rx="2" ry="2" />
<text  x="1131.05" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~CommonTokenStream (1 samples, 0.02%)</title><rect x="23.3" y="597" width="0.3" height="15.0" fill="rgb(229,46,45)" rx="2" ry="2" />
<text  x="26.34" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::try_reap_events (1 samples, 0.02%)</title><rect x="1167.2" y="629" width="0.2" height="15.0" fill="rgb(211,96,15)" rx="2" ry="2" />
<text  x="1170.16" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_super (1 samples, 0.02%)</title><rect x="28.8" y="453" width="0.2" height="15.0" fill="rgb(217,225,52)" rx="2" ry="2" />
<text  x="31.77" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="629.1" y="565" width="0.2" height="15.0" fill="rgb(245,57,29)" rx="2" ry="2" />
<text  x="632.05" y="575.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="720.4" y="629" width="0.2" height="15.0" fill="rgb(251,216,41)" rx="2" ry="2" />
<text  x="723.40" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="695.1" y="613" width="0.2" height="15.0" fill="rgb(242,35,6)" rx="2" ry="2" />
<text  x="698.07" y="623.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="740.5" y="453" width="0.2" height="15.0" fill="rgb(232,174,39)" rx="2" ry="2" />
<text  x="743.52" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="819.4" y="325" width="0.5" height="15.0" fill="rgb(226,14,39)" rx="2" ry="2" />
<text  x="822.43" y="335.5" ></text>
</g>
<g >
<title>set_value&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="1120.1" y="373" width="0.3" height="15.0" fill="rgb(240,45,34)" rx="2" ry="2" />
<text  x="1123.14" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="827.6" y="421" width="0.2" height="15.0" fill="rgb(227,69,37)" rx="2" ry="2" />
<text  x="830.57" y="431.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (3 samples, 0.06%)</title><rect x="889.3" y="437" width="0.7" height="15.0" fill="rgb(228,175,32)" rx="2" ry="2" />
<text  x="892.29" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="76.5" y="549" width="0.4" height="15.0" fill="rgb(252,228,36)" rx="2" ry="2" />
<text  x="79.47" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1130.8" y="309" width="0.2" height="15.0" fill="rgb(218,217,20)" rx="2" ry="2" />
<text  x="1133.76" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="41.4" y="437" width="0.3" height="15.0" fill="rgb(207,164,54)" rx="2" ry="2" />
<text  x="44.43" y="447.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (1 samples, 0.02%)</title><rect x="1121.9" y="405" width="0.3" height="15.0" fill="rgb(247,177,38)" rx="2" ry="2" />
<text  x="1124.94" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="41.2" y="453" width="0.2" height="15.0" fill="rgb(239,188,42)" rx="2" ry="2" />
<text  x="44.20" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (1 samples, 0.02%)</title><rect x="628.1" y="597" width="0.3" height="15.0" fill="rgb(236,205,47)" rx="2" ry="2" />
<text  x="631.15" y="607.5" ></text>
</g>
<g >
<title>cql3::util::validate_timestamp (1 samples, 0.02%)</title><rect x="22.9" y="613" width="0.2" height="15.0" fill="rgb(242,122,19)" rx="2" ry="2" />
<text  x="25.89" y="623.5" ></text>
</g>
<g >
<title>boost::range_detail::default_constructible_unary_fn_wrapper&lt;service::abstract_write_response_handler::max_backlog (1 samples, 0.02%)</title><rect x="739.4" y="581" width="0.2" height="15.0" fill="rgb(223,34,9)" rx="2" ry="2" />
<text  x="742.39" y="591.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (1 samples, 0.02%)</title><rect x="83.9" y="629" width="0.3" height="15.0" fill="rgb(254,192,49)" rx="2" ry="2" />
<text  x="86.93" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (5 samples, 0.10%)</title><rect x="818.1" y="373" width="1.1" height="15.0" fill="rgb(224,32,23)" rx="2" ry="2" />
<text  x="821.07" y="383.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (187 samples, 3.58%)</title><rect x="796.1" y="565" width="42.3" height="15.0" fill="rgb(249,141,53)" rx="2" ry="2" />
<text  x="799.14" y="575.5" >std..</text>
</g>
<g >
<title>std::construct_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="55.9" y="373" width="0.2" height="15.0" fill="rgb(211,95,26)" rx="2" ry="2" />
<text  x="58.90" y="383.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (35 samples, 0.67%)</title><rect x="256.0" y="341" width="7.9" height="15.0" fill="rgb(227,179,46)" rx="2" ry="2" />
<text  x="258.99" y="351.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="49.6" y="469" width="0.4" height="15.0" fill="rgb(246,122,46)" rx="2" ry="2" />
<text  x="52.57" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (1 samples, 0.02%)</title><rect x="100.2" y="581" width="0.2" height="15.0" fill="rgb(214,213,0)" rx="2" ry="2" />
<text  x="103.21" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="946.9" y="517" width="0.5" height="15.0" fill="rgb(234,58,33)" rx="2" ry="2" />
<text  x="949.95" y="527.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (2 samples, 0.04%)</title><rect x="936.5" y="565" width="0.5" height="15.0" fill="rgb(210,48,36)" rx="2" ry="2" />
<text  x="939.55" y="575.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="1022.0" y="357" width="0.2" height="15.0" fill="rgb(210,223,49)" rx="2" ry="2" />
<text  x="1025.01" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (1 samples, 0.02%)</title><rect x="138.0" y="453" width="0.2" height="15.0" fill="rgb(207,46,17)" rx="2" ry="2" />
<text  x="140.97" y="463.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (2 samples, 0.04%)</title><rect x="777.4" y="565" width="0.4" height="15.0" fill="rgb(225,90,48)" rx="2" ry="2" />
<text  x="780.37" y="575.5" ></text>
</g>
<g >
<title>cql3::prepare_context::set_bound_variables (1 samples, 0.02%)</title><rect x="39.8" y="549" width="0.3" height="15.0" fill="rgb(242,96,14)" rx="2" ry="2" />
<text  x="42.84" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="137.5" y="629" width="0.5" height="15.0" fill="rgb(228,152,53)" rx="2" ry="2" />
<text  x="140.52" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="855.4" y="533" width="2.0" height="15.0" fill="rgb(249,58,2)" rx="2" ry="2" />
<text  x="858.38" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="63.8" y="293" width="0.2" height="15.0" fill="rgb(235,140,1)" rx="2" ry="2" />
<text  x="66.81" y="303.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.5" y="741" width="0.2" height="15.0" fill="rgb(246,89,6)" rx="2" ry="2" />
<text  x="86.48" y="751.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::take (1 samples, 0.02%)</title><rect x="1139.4" y="645" width="0.2" height="15.0" fill="rgb(234,175,28)" rx="2" ry="2" />
<text  x="1142.35" y="655.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="105.9" y="565" width="0.2" height="15.0" fill="rgb(208,196,52)" rx="2" ry="2" />
<text  x="108.87" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (7 samples, 0.13%)</title><rect x="874.1" y="565" width="1.6" height="15.0" fill="rgb(205,128,35)" rx="2" ry="2" />
<text  x="877.14" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (1 samples, 0.02%)</title><rect x="533.2" y="501" width="0.2" height="15.0" fill="rgb(243,62,18)" rx="2" ry="2" />
<text  x="536.19" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (468 samples, 8.97%)</title><rect x="351.4" y="453" width="105.8" height="15.0" fill="rgb(211,202,46)" rx="2" ry="2" />
<text  x="354.41" y="463.5" >flat_mutatio..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (11 samples, 0.21%)</title><rect x="861.0" y="581" width="2.5" height="15.0" fill="rgb(210,196,22)" rx="2" ry="2" />
<text  x="864.03" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%)</title><rect x="76.5" y="565" width="0.4" height="15.0" fill="rgb(213,66,21)" rx="2" ry="2" />
<text  x="79.47" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="830.1" y="453" width="0.4" height="15.0" fill="rgb(213,8,49)" rx="2" ry="2" />
<text  x="833.05" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="730.1" y="629" width="0.2" height="15.0" fill="rgb(242,85,3)" rx="2" ry="2" />
<text  x="733.12" y="639.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (1 samples, 0.02%)</title><rect x="18.6" y="709" width="0.2" height="15.0" fill="rgb(215,198,7)" rx="2" ry="2" />
<text  x="21.59" y="719.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%)</title><rect x="821.7" y="309" width="0.2" height="15.0" fill="rgb(225,119,0)" rx="2" ry="2" />
<text  x="824.69" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mQUOTED_NAME (2 samples, 0.04%)</title><rect x="36.0" y="437" width="0.5" height="15.0" fill="rgb(231,144,44)" rx="2" ry="2" />
<text  x="39.00" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (3 samples, 0.06%)</title><rect x="106.5" y="565" width="0.7" height="15.0" fill="rgb(230,141,38)" rx="2" ry="2" />
<text  x="109.54" y="575.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (1 samples, 0.02%)</title><rect x="723.3" y="629" width="0.3" height="15.0" fill="rgb(233,154,13)" rx="2" ry="2" />
<text  x="726.34" y="639.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%)</title><rect x="289.9" y="373" width="0.2" height="15.0" fill="rgb(242,131,6)" rx="2" ry="2" />
<text  x="292.91" y="383.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.61%)</title><rect x="1118.3" y="645" width="7.3" height="15.0" fill="rgb(230,195,51)" rx="2" ry="2" />
<text  x="1121.33" y="655.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (2 samples, 0.04%)</title><rect x="300.5" y="405" width="0.5" height="15.0" fill="rgb(209,165,48)" rx="2" ry="2" />
<text  x="303.53" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="1103.4" y="581" width="0.7" height="15.0" fill="rgb(206,134,3)" rx="2" ry="2" />
<text  x="1106.40" y="591.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (11 samples, 0.21%)</title><rect x="353.4" y="421" width="2.5" height="15.0" fill="rgb(236,31,45)" rx="2" ry="2" />
<text  x="356.44" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (9 samples, 0.17%)</title><rect x="768.1" y="501" width="2.0" height="15.0" fill="rgb(222,0,32)" rx="2" ry="2" />
<text  x="771.10" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::use_statement, std::default_delete&lt;cql3::statements::raw::use_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="66.1" y="549" width="0.2" height="15.0" fill="rgb(219,194,20)" rx="2" ry="2" />
<text  x="69.07" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (21 samples, 0.40%)</title><rect x="1127.8" y="469" width="4.8" height="15.0" fill="rgb(253,184,10)" rx="2" ry="2" />
<text  x="1130.82" y="479.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (1 samples, 0.02%)</title><rect x="905.3" y="581" width="0.3" height="15.0" fill="rgb(241,20,39)" rx="2" ry="2" />
<text  x="908.34" y="591.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (122 samples, 2.34%)</title><rect x="804.5" y="501" width="27.6" height="15.0" fill="rgb(216,92,40)" rx="2" ry="2" />
<text  x="807.50" y="511.5" >s..</text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt;&gt; (1 samples, 0.02%)</title><rect x="50.7" y="389" width="0.2" height="15.0" fill="rgb(208,123,33)" rx="2" ry="2" />
<text  x="53.70" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (27 samples, 0.52%)</title><rect x="97.3" y="661" width="6.1" height="15.0" fill="rgb(214,156,11)" rx="2" ry="2" />
<text  x="100.27" y="671.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="568.2" y="501" width="0.3" height="15.0" fill="rgb(232,157,32)" rx="2" ry="2" />
<text  x="571.23" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="23.6" y="517" width="0.2" height="15.0" fill="rgb(228,93,10)" rx="2" ry="2" />
<text  x="26.57" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator::operator* (1 samples, 0.02%)</title><rect x="1131.4" y="357" width="0.3" height="15.0" fill="rgb(210,48,53)" rx="2" ry="2" />
<text  x="1134.44" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="55.2" y="453" width="0.2" height="15.0" fill="rgb(211,119,42)" rx="2" ry="2" />
<text  x="58.22" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (196 samples, 3.76%)</title><rect x="24.9" y="597" width="44.3" height="15.0" fill="rgb(210,164,23)" rx="2" ry="2" />
<text  x="27.92" y="607.5" >seas..</text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_create_node&lt;column_definition const*, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; (1 samples, 0.02%)</title><rect x="75.8" y="469" width="0.2" height="15.0" fill="rgb(221,35,49)" rx="2" ry="2" />
<text  x="78.79" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="716.1" y="517" width="0.5" height="15.0" fill="rgb(239,146,44)" rx="2" ry="2" />
<text  x="719.10" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%)</title><rect x="248.5" y="229" width="0.3" height="15.0" fill="rgb(207,81,6)" rx="2" ry="2" />
<text  x="251.53" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (5 samples, 0.10%)</title><rect x="1148.9" y="629" width="1.1" height="15.0" fill="rgb(213,47,23)" rx="2" ry="2" />
<text  x="1151.85" y="639.5" ></text>
</g>
<g >
<title>make_random_seq (2 samples, 0.04%)</title><rect x="748.4" y="645" width="0.5" height="15.0" fill="rgb(249,193,44)" rx="2" ry="2" />
<text  x="751.43" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (1 samples, 0.02%)</title><rect x="127.6" y="565" width="0.2" height="15.0" fill="rgb(207,43,0)" rx="2" ry="2" />
<text  x="130.57" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="63.6" y="341" width="0.4" height="15.0" fill="rgb(254,71,24)" rx="2" ry="2" />
<text  x="66.58" y="351.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (8 samples, 0.15%)</title><rect x="787.1" y="501" width="1.8" height="15.0" fill="rgb(238,16,2)" rx="2" ry="2" />
<text  x="790.10" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::add_restriction (2 samples, 0.04%)</title><rect x="75.8" y="485" width="0.4" height="15.0" fill="rgb(249,154,40)" rx="2" ry="2" />
<text  x="78.79" y="495.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="97.5" y="645" width="1.1" height="15.0" fill="rgb(228,95,40)" rx="2" ry="2" />
<text  x="100.50" y="655.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (12 samples, 0.23%)</title><rect x="129.4" y="581" width="2.7" height="15.0" fill="rgb(211,67,26)" rx="2" ry="2" />
<text  x="132.38" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="624.5" y="549" width="0.3" height="15.0" fill="rgb(236,118,39)" rx="2" ry="2" />
<text  x="627.53" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="108.6" y="517" width="0.2" height="15.0" fill="rgb(224,126,11)" rx="2" ry="2" />
<text  x="111.58" y="527.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (10 samples, 0.19%)</title><rect x="1177.3" y="789" width="2.3" height="15.0" fill="rgb(213,48,34)" rx="2" ry="2" />
<text  x="1180.34" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="579.1" y="501" width="0.2" height="15.0" fill="rgb(229,167,2)" rx="2" ry="2" />
<text  x="582.09" y="511.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (4 samples, 0.08%)</title><rect x="1038.7" y="421" width="0.9" height="15.0" fill="rgb(221,1,5)" rx="2" ry="2" />
<text  x="1041.74" y="431.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_state (1 samples, 0.02%)</title><rect x="29.2" y="437" width="0.2" height="15.0" fill="rgb(209,170,48)" rx="2" ry="2" />
<text  x="32.22" y="447.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="924.1" y="517" width="0.2" height="15.0" fill="rgb(229,190,23)" rx="2" ry="2" />
<text  x="927.11" y="527.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (56 samples, 1.07%)</title><rect x="726.3" y="677" width="12.6" height="15.0" fill="rgb(241,129,43)" rx="2" ry="2" />
<text  x="729.28" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="874.8" y="517" width="0.7" height="15.0" fill="rgb(208,105,26)" rx="2" ry="2" />
<text  x="877.82" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::partition_key_restrictions&gt;::operator= (1 samples, 0.02%)</title><rect x="77.2" y="581" width="0.2" height="15.0" fill="rgb(209,9,37)" rx="2" ry="2" />
<text  x="80.15" y="591.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="678.8" y="613" width="0.2" height="15.0" fill="rgb(236,91,0)" rx="2" ry="2" />
<text  x="681.79" y="623.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (1 samples, 0.02%)</title><rect x="120.8" y="613" width="0.2" height="15.0" fill="rgb(240,227,34)" rx="2" ry="2" />
<text  x="123.79" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="946.7" y="533" width="0.7" height="15.0" fill="rgb(212,76,3)" rx="2" ry="2" />
<text  x="949.72" y="543.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (43 samples, 0.82%)</title><rect x="522.8" y="453" width="9.7" height="15.0" fill="rgb(225,50,42)" rx="2" ry="2" />
<text  x="525.79" y="463.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (7 samples, 0.13%)</title><rect x="1123.1" y="485" width="1.6" height="15.0" fill="rgb(228,56,13)" rx="2" ry="2" />
<text  x="1126.08" y="495.5" ></text>
</g>
<g >
<title>schema::column_at (4 samples, 0.08%)</title><rect x="254.0" y="293" width="0.9" height="15.0" fill="rgb(216,0,26)" rx="2" ry="2" />
<text  x="256.96" y="303.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (5 samples, 0.10%)</title><rect x="844.3" y="469" width="1.1" height="15.0" fill="rgb(214,14,9)" rx="2" ry="2" />
<text  x="847.30" y="479.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (3 samples, 0.06%)</title><rect x="1076.5" y="517" width="0.7" height="15.0" fill="rgb(215,197,50)" rx="2" ry="2" />
<text  x="1079.50" y="527.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="1025.2" y="389" width="2.5" height="15.0" fill="rgb(216,147,12)" rx="2" ry="2" />
<text  x="1028.18" y="399.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (1 samples, 0.02%)</title><rect x="57.0" y="421" width="0.3" height="15.0" fill="rgb(245,187,8)" rx="2" ry="2" />
<text  x="60.03" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="115.1" y="645" width="0.3" height="15.0" fill="rgb(233,149,39)" rx="2" ry="2" />
<text  x="118.14" y="655.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (28 samples, 0.54%)</title><rect x="1118.3" y="501" width="6.4" height="15.0" fill="rgb(207,2,11)" rx="2" ry="2" />
<text  x="1121.33" y="511.5" ></text>
</g>
<g >
<title>make_combined_reader (83 samples, 1.59%)</title><rect x="486.4" y="501" width="18.8" height="15.0" fill="rgb(247,195,7)" rx="2" ry="2" />
<text  x="489.39" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::list_permissions_statement*, std::default_delete&lt;cql3::statements::list_permissions_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="66.8" y="485" width="0.2" height="15.0" fill="rgb(206,131,51)" rx="2" ry="2" />
<text  x="69.75" y="495.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (1 samples, 0.02%)</title><rect x="413.1" y="373" width="0.3" height="15.0" fill="rgb(228,112,53)" rx="2" ry="2" />
<text  x="416.13" y="383.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="740.3" y="469" width="0.2" height="15.0" fill="rgb(216,115,10)" rx="2" ry="2" />
<text  x="743.29" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (14 samples, 0.27%)</title><rect x="847.0" y="501" width="3.2" height="15.0" fill="rgb(214,47,38)" rx="2" ry="2" />
<text  x="850.01" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="63.6" y="389" width="0.4" height="15.0" fill="rgb(249,157,10)" rx="2" ry="2" />
<text  x="66.58" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_input (1 samples, 0.02%)</title><rect x="29.4" y="437" width="0.3" height="15.0" fill="rgb(241,51,19)" rx="2" ry="2" />
<text  x="32.44" y="447.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1081.5" y="533" width="0.2" height="15.0" fill="rgb(234,128,25)" rx="2" ry="2" />
<text  x="1084.47" y="543.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7f2ecf1aa25180816b4ab3815982d6ce313b38a7] (1 samples, 0.02%)</title><rect x="958.7" y="565" width="0.2" height="15.0" fill="rgb(229,10,7)" rx="2" ry="2" />
<text  x="961.70" y="575.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (3 samples, 0.06%)</title><rect x="211.5" y="389" width="0.6" height="15.0" fill="rgb(249,193,32)" rx="2" ry="2" />
<text  x="214.45" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (2 samples, 0.04%)</title><rect x="713.6" y="629" width="0.5" height="15.0" fill="rgb(227,225,19)" rx="2" ry="2" />
<text  x="716.61" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="135.9" y="629" width="0.3" height="15.0" fill="rgb(238,192,14)" rx="2" ry="2" />
<text  x="138.94" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (1 samples, 0.02%)</title><rect x="944.5" y="549" width="0.2" height="15.0" fill="rgb(243,154,49)" rx="2" ry="2" />
<text  x="947.46" y="559.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (7 samples, 0.13%)</title><rect x="887.0" y="565" width="1.6" height="15.0" fill="rgb(212,139,47)" rx="2" ry="2" />
<text  x="890.03" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="717.0" y="613" width="0.2" height="15.0" fill="rgb(231,159,24)" rx="2" ry="2" />
<text  x="720.01" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="1144.8" y="597" width="0.4" height="15.0" fill="rgb(230,189,32)" rx="2" ry="2" />
<text  x="1147.78" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="371.3" y="373" width="0.5" height="15.0" fill="rgb(224,46,40)" rx="2" ry="2" />
<text  x="374.30" y="383.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="150.9" y="565" width="0.6" height="15.0" fill="rgb(218,47,8)" rx="2" ry="2" />
<text  x="153.86" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="612.8" y="469" width="0.2" height="15.0" fill="rgb(244,113,17)" rx="2" ry="2" />
<text  x="615.77" y="479.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;seastar::file_impl&gt; &gt;, seastar::reactor::open_file_dma (1 samples, 0.02%)</title><rect x="704.3" y="677" width="0.3" height="15.0" fill="rgb(240,145,37)" rx="2" ry="2" />
<text  x="707.34" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="438.2" y="357" width="0.5" height="15.0" fill="rgb(219,57,26)" rx="2" ry="2" />
<text  x="441.23" y="367.5" ></text>
</g>
<g >
<title>ser::writer_of_column&lt;bytes_ostream&gt;::write_id (2 samples, 0.04%)</title><rect x="1129.6" y="277" width="0.5" height="15.0" fill="rgb(254,153,36)" rx="2" ry="2" />
<text  x="1132.63" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (2 samples, 0.04%)</title><rect x="133.4" y="629" width="0.5" height="15.0" fill="rgb(245,145,44)" rx="2" ry="2" />
<text  x="136.45" y="639.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%)</title><rect x="768.3" y="453" width="0.3" height="15.0" fill="rgb(238,157,22)" rx="2" ry="2" />
<text  x="771.33" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::untyped_result_set, false&gt;::make&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="671.6" y="661" width="0.2" height="15.0" fill="rgb(240,175,52)" rx="2" ry="2" />
<text  x="674.56" y="671.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1126.9" y="325" width="0.2" height="15.0" fill="rgb(214,133,48)" rx="2" ry="2" />
<text  x="1129.92" y="335.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%)</title><rect x="251.7" y="277" width="0.2" height="15.0" fill="rgb(208,29,31)" rx="2" ry="2" />
<text  x="254.70" y="287.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="25.1" y="565" width="0.3" height="15.0" fill="rgb(252,192,29)" rx="2" ry="2" />
<text  x="28.15" y="575.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (4 samples, 0.08%)</title><rect x="295.3" y="373" width="0.9" height="15.0" fill="rgb(251,202,46)" rx="2" ry="2" />
<text  x="298.33" y="383.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="546.8" y="421" width="0.2" height="15.0" fill="rgb(240,219,51)" rx="2" ry="2" />
<text  x="549.75" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="795.7" y="533" width="0.4" height="15.0" fill="rgb(253,226,22)" rx="2" ry="2" />
<text  x="798.69" y="543.5" ></text>
</g>
<g >
<title>db::system_keyspace::load_tokens (1 samples, 0.02%)</title><rect x="83.5" y="581" width="0.2" height="15.0" fill="rgb(232,23,5)" rx="2" ry="2" />
<text  x="86.48" y="591.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (2 samples, 0.04%)</title><rect x="769.2" y="453" width="0.5" height="15.0" fill="rgb(205,25,37)" rx="2" ry="2" />
<text  x="772.23" y="463.5" ></text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%)</title><rect x="20.4" y="613" width="0.2" height="15.0" fill="rgb(223,18,33)" rx="2" ry="2" />
<text  x="23.40" y="623.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="628.6" y="581" width="0.2" height="15.0" fill="rgb(241,18,10)" rx="2" ry="2" />
<text  x="631.60" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="706.4" y="645" width="0.2" height="15.0" fill="rgb(237,74,38)" rx="2" ry="2" />
<text  x="709.38" y="655.5" ></text>
</g>
<g >
<title>std::move&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="47.5" y="501" width="0.3" height="15.0" fill="rgb(231,66,8)" rx="2" ry="2" />
<text  x="50.53" y="511.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (3 samples, 0.06%)</title><rect x="619.6" y="533" width="0.6" height="15.0" fill="rgb(218,22,8)" rx="2" ry="2" />
<text  x="622.56" y="543.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="207.8" y="357" width="0.3" height="15.0" fill="rgb(232,203,15)" rx="2" ry="2" />
<text  x="210.83" y="367.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (1 samples, 0.02%)</title><rect x="18.8" y="693" width="0.2" height="15.0" fill="rgb(211,85,31)" rx="2" ry="2" />
<text  x="21.82" y="703.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (2 samples, 0.04%)</title><rect x="1050.3" y="517" width="0.4" height="15.0" fill="rgb(232,229,30)" rx="2" ry="2" />
<text  x="1053.27" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (1 samples, 0.02%)</title><rect x="138.0" y="437" width="0.2" height="15.0" fill="rgb(213,197,53)" rx="2" ry="2" />
<text  x="140.97" y="447.5" ></text>
</g>
<g >
<title>db::system_keyspace::all_tables (1 samples, 0.02%)</title><rect x="19.7" y="469" width="0.2" height="15.0" fill="rgb(248,140,52)" rx="2" ry="2" />
<text  x="22.72" y="479.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (1 samples, 0.02%)</title><rect x="497.0" y="469" width="0.2" height="15.0" fill="rgb(246,191,1)" rx="2" ry="2" />
<text  x="500.01" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (2 samples, 0.04%)</title><rect x="748.0" y="613" width="0.4" height="15.0" fill="rgb(237,87,47)" rx="2" ry="2" />
<text  x="750.98" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="985.2" y="517" width="0.4" height="15.0" fill="rgb(251,82,30)" rx="2" ry="2" />
<text  x="988.16" y="527.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="554.4" y="405" width="0.3" height="15.0" fill="rgb(234,114,31)" rx="2" ry="2" />
<text  x="557.44" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="106.8" y="85" width="0.2" height="15.0" fill="rgb(214,29,17)" rx="2" ry="2" />
<text  x="109.77" y="95.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (5 samples, 0.10%)</title><rect x="636.7" y="581" width="1.2" height="15.0" fill="rgb(215,119,37)" rx="2" ry="2" />
<text  x="639.74" y="591.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (4 samples, 0.08%)</title><rect x="636.7" y="565" width="0.9" height="15.0" fill="rgb(229,128,21)" rx="2" ry="2" />
<text  x="639.74" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="778.7" y="581" width="0.3" height="15.0" fill="rgb(206,59,19)" rx="2" ry="2" />
<text  x="781.73" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (5 samples, 0.10%)</title><rect x="859.4" y="597" width="1.2" height="15.0" fill="rgb(212,194,22)" rx="2" ry="2" />
<text  x="862.45" y="607.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="679.5" y="581" width="0.2" height="15.0" fill="rgb(246,161,49)" rx="2" ry="2" />
<text  x="682.47" y="591.5" ></text>
</g>
<g >
<title>db::is_serial_consistency (1 samples, 0.02%)</title><rect x="1102.3" y="597" width="0.2" height="15.0" fill="rgb(236,86,45)" rx="2" ry="2" />
<text  x="1105.27" y="607.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%)</title><rect x="677.7" y="645" width="0.2" height="15.0" fill="rgb(213,61,2)" rx="2" ry="2" />
<text  x="680.66" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="957.8" y="581" width="0.2" height="15.0" fill="rgb(209,142,41)" rx="2" ry="2" />
<text  x="960.80" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="632.2" y="565" width="0.5" height="15.0" fill="rgb(249,133,28)" rx="2" ry="2" />
<text  x="635.22" y="575.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%)</title><rect x="251.5" y="261" width="0.2" height="15.0" fill="rgb(206,160,6)" rx="2" ry="2" />
<text  x="254.47" y="271.5" ></text>
</g>
<g >
<title>schema_registry::get (23 samples, 0.44%)</title><rect x="973.9" y="533" width="5.2" height="15.0" fill="rgb(230,78,16)" rx="2" ry="2" />
<text  x="976.85" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state_base::future_state_base (1 samples, 0.02%)</title><rect x="811.7" y="437" width="0.3" height="15.0" fill="rgb(212,34,5)" rx="2" ry="2" />
<text  x="814.74" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="48.9" y="453" width="0.2" height="15.0" fill="rgb(214,154,51)" rx="2" ry="2" />
<text  x="51.89" y="463.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (20 samples, 0.38%)</title><rect x="1118.6" y="485" width="4.5" height="15.0" fill="rgb(224,166,49)" rx="2" ry="2" />
<text  x="1121.55" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%)</title><rect x="46.6" y="469" width="0.5" height="15.0" fill="rgb(245,43,42)" rx="2" ry="2" />
<text  x="49.63" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (3 samples, 0.06%)</title><rect x="314.8" y="501" width="0.7" height="15.0" fill="rgb(221,41,51)" rx="2" ry="2" />
<text  x="317.78" y="511.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (1 samples, 0.02%)</title><rect x="683.8" y="629" width="0.2" height="15.0" fill="rgb(235,154,21)" rx="2" ry="2" />
<text  x="686.77" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::destroy&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="41.0" y="485" width="0.2" height="15.0" fill="rgb(249,66,6)" rx="2" ry="2" />
<text  x="43.98" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="878.0" y="645" width="0.2" height="15.0" fill="rgb(250,220,27)" rx="2" ry="2" />
<text  x="880.99" y="655.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (2 samples, 0.04%)</title><rect x="383.5" y="357" width="0.5" height="15.0" fill="rgb(220,142,22)" rx="2" ry="2" />
<text  x="386.51" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="62.7" y="453" width="0.2" height="15.0" fill="rgb(250,52,21)" rx="2" ry="2" />
<text  x="65.68" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::move_slots&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="1121.0" y="325" width="0.5" height="15.0" fill="rgb(223,31,27)" rx="2" ry="2" />
<text  x="1124.04" y="335.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (4 samples, 0.08%)</title><rect x="176.2" y="453" width="0.9" height="15.0" fill="rgb(214,149,30)" rx="2" ry="2" />
<text  x="179.18" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%)</title><rect x="769.9" y="485" width="0.2" height="15.0" fill="rgb(241,111,10)" rx="2" ry="2" />
<text  x="772.91" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.25%)</title><rect x="1003.0" y="437" width="3.0" height="15.0" fill="rgb(211,129,29)" rx="2" ry="2" />
<text  x="1006.02" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="832.5" y="469" width="0.3" height="15.0" fill="rgb(225,29,23)" rx="2" ry="2" />
<text  x="835.54" y="479.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (3 samples, 0.06%)</title><rect x="19.9" y="709" width="0.7" height="15.0" fill="rgb(222,132,17)" rx="2" ry="2" />
<text  x="22.95" y="719.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,785 samples, 91.68%)</title><rect x="87.1" y="757" width="1081.9" height="15.0" fill="rgb(232,204,22)" rx="2" ry="2" />
<text  x="90.10" y="767.5" >seastar::app_template::run</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;cql3::expr::expression&gt;::_Storage&lt;cql3::expr::expression, false&gt;::_Storage (1 samples, 0.02%)</title><rect x="65.2" y="437" width="0.2" height="15.0" fill="rgb(220,70,40)" rx="2" ry="2" />
<text  x="68.17" y="447.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (1 samples, 0.02%)</title><rect x="1165.6" y="613" width="0.2" height="15.0" fill="rgb(228,146,2)" rx="2" ry="2" />
<text  x="1168.58" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (4 samples, 0.08%)</title><rect x="883.9" y="677" width="0.9" height="15.0" fill="rgb(223,223,43)" rx="2" ry="2" />
<text  x="886.86" y="687.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.11%)</title><rect x="929.3" y="501" width="1.4" height="15.0" fill="rgb(225,119,27)" rx="2" ry="2" />
<text  x="932.31" y="511.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (3 samples, 0.06%)</title><rect x="361.8" y="341" width="0.7" height="15.0" fill="rgb(210,209,52)" rx="2" ry="2" />
<text  x="364.81" y="351.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="1042.1" y="501" width="0.3" height="15.0" fill="rgb(227,143,23)" rx="2" ry="2" />
<text  x="1045.13" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (4 samples, 0.08%)</title><rect x="741.2" y="677" width="0.9" height="15.0" fill="rgb(209,122,24)" rx="2" ry="2" />
<text  x="744.20" y="687.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="1035.6" y="453" width="0.2" height="15.0" fill="rgb(247,50,17)" rx="2" ry="2" />
<text  x="1038.58" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="59.1" y="437" width="0.2" height="15.0" fill="rgb(247,27,39)" rx="2" ry="2" />
<text  x="62.06" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="995.3" y="453" width="0.3" height="15.0" fill="rgb(253,229,2)" rx="2" ry="2" />
<text  x="998.33" y="463.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (4 samples, 0.08%)</title><rect x="83.9" y="645" width="0.9" height="15.0" fill="rgb(215,157,34)" rx="2" ry="2" />
<text  x="86.93" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (5 samples, 0.10%)</title><rect x="468.3" y="549" width="1.1" height="15.0" fill="rgb(247,226,24)" rx="2" ry="2" />
<text  x="471.30" y="559.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (1 samples, 0.02%)</title><rect x="619.6" y="517" width="0.2" height="15.0" fill="rgb(238,76,47)" rx="2" ry="2" />
<text  x="622.56" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="62.5" y="501" width="0.2" height="15.0" fill="rgb(218,170,1)" rx="2" ry="2" />
<text  x="65.45" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="848.6" y="485" width="0.4" height="15.0" fill="rgb(229,29,4)" rx="2" ry="2" />
<text  x="851.59" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="724.0" y="661" width="0.2" height="15.0" fill="rgb(237,203,49)" rx="2" ry="2" />
<text  x="727.01" y="671.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="440.7" y="405" width="0.2" height="15.0" fill="rgb(236,150,35)" rx="2" ry="2" />
<text  x="443.71" y="415.5" ></text>
</g>
<g >
<title>database::query (10 samples, 0.19%)</title><rect x="103.6" y="677" width="2.3" height="15.0" fill="rgb(210,201,42)" rx="2" ry="2" />
<text  x="106.60" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="61.8" y="341" width="0.2" height="15.0" fill="rgb(253,99,30)" rx="2" ry="2" />
<text  x="64.78" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="753.9" y="469" width="0.2" height="15.0" fill="rgb(254,201,23)" rx="2" ry="2" />
<text  x="756.86" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (34 samples, 0.65%)</title><rect x="1125.6" y="533" width="7.6" height="15.0" fill="rgb(209,139,45)" rx="2" ry="2" />
<text  x="1128.56" y="543.5" ></text>
</g>
<g >
<title>cql3::metadata::metadata (1 samples, 0.02%)</title><rect x="83.5" y="357" width="0.2" height="15.0" fill="rgb(230,73,34)" rx="2" ry="2" />
<text  x="86.48" y="367.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="993.1" y="437" width="1.8" height="15.0" fill="rgb(248,26,35)" rx="2" ry="2" />
<text  x="996.07" y="447.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (5 samples, 0.10%)</title><rect x="33.5" y="421" width="1.1" height="15.0" fill="rgb(249,24,27)" rx="2" ry="2" />
<text  x="36.51" y="431.5" ></text>
</g>
<g >
<title>cql3::cf_name::set_column_family (1 samples, 0.02%)</title><rect x="42.3" y="517" width="0.3" height="15.0" fill="rgb(215,38,53)" rx="2" ry="2" />
<text  x="45.33" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (3 samples, 0.06%)</title><rect x="679.2" y="597" width="0.7" height="15.0" fill="rgb(215,75,48)" rx="2" ry="2" />
<text  x="682.25" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (3 samples, 0.06%)</title><rect x="642.2" y="613" width="0.6" height="15.0" fill="rgb(239,125,24)" rx="2" ry="2" />
<text  x="645.17" y="623.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.11%)</title><rect x="608.0" y="469" width="1.4" height="15.0" fill="rgb(242,195,15)" rx="2" ry="2" />
<text  x="611.03" y="479.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;db::system_distributed_keyspace&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="20.2" y="581" width="0.2" height="15.0" fill="rgb(225,195,15)" rx="2" ry="2" />
<text  x="23.17" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="661.4" y="661" width="0.2" height="15.0" fill="rgb(248,66,23)" rx="2" ry="2" />
<text  x="664.39" y="671.5" ></text>
</g>
<g >
<title>dht::tri_compare (1 samples, 0.02%)</title><rect x="1063.8" y="421" width="0.3" height="15.0" fill="rgb(235,28,45)" rx="2" ry="2" />
<text  x="1066.84" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (1 samples, 0.02%)</title><rect x="502.4" y="437" width="0.3" height="15.0" fill="rgb(218,89,1)" rx="2" ry="2" />
<text  x="505.44" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7 samples, 0.13%)</title><rect x="782.1" y="517" width="1.6" height="15.0" fill="rgb(215,85,36)" rx="2" ry="2" />
<text  x="785.12" y="527.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (1 samples, 0.02%)</title><rect x="120.6" y="629" width="0.2" height="15.0" fill="rgb(254,22,9)" rx="2" ry="2" />
<text  x="123.56" y="639.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (1 samples, 0.02%)</title><rect x="283.6" y="405" width="0.2" height="15.0" fill="rgb(232,72,48)" rx="2" ry="2" />
<text  x="286.58" y="415.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (5 samples, 0.10%)</title><rect x="252.1" y="277" width="1.2" height="15.0" fill="rgb(210,225,9)" rx="2" ry="2" />
<text  x="255.15" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="12.9" y="725" width="0.3" height="15.0" fill="rgb(208,72,50)" rx="2" ry="2" />
<text  x="15.94" y="735.5" ></text>
</g>
<g >
<title>query::querier_base::close (2 samples, 0.04%)</title><rect x="1165.6" y="661" width="0.4" height="15.0" fill="rgb(240,90,36)" rx="2" ry="2" />
<text  x="1168.58" y="671.5" ></text>
</g>
<g >
<title>table::try_flush_memtable_to_sstable (1 samples, 0.02%)</title><rect x="740.3" y="661" width="0.2" height="15.0" fill="rgb(222,187,19)" rx="2" ry="2" />
<text  x="743.29" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.04%)</title><rect x="672.9" y="565" width="0.5" height="15.0" fill="rgb(225,194,44)" rx="2" ry="2" />
<text  x="675.92" y="575.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (8 samples, 0.15%)</title><rect x="36.7" y="437" width="1.8" height="15.0" fill="rgb(239,73,2)" rx="2" ry="2" />
<text  x="39.68" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="792.3" y="517" width="0.2" height="15.0" fill="rgb(229,140,36)" rx="2" ry="2" />
<text  x="795.30" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (82 samples, 1.57%)</title><rect x="43.2" y="533" width="18.6" height="15.0" fill="rgb(220,59,31)" rx="2" ry="2" />
<text  x="46.24" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (1 samples, 0.02%)</title><rect x="883.0" y="469" width="0.2" height="15.0" fill="rgb(237,48,9)" rx="2" ry="2" />
<text  x="885.96" y="479.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="55.7" y="277" width="0.2" height="15.0" fill="rgb(231,83,50)" rx="2" ry="2" />
<text  x="58.67" y="287.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (3 samples, 0.06%)</title><rect x="837.7" y="469" width="0.7" height="15.0" fill="rgb(218,169,28)" rx="2" ry="2" />
<text  x="840.74" y="479.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer (1 samples, 0.02%)</title><rect x="106.8" y="181" width="0.2" height="15.0" fill="rgb(245,105,24)" rx="2" ry="2" />
<text  x="109.77" y="191.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::deleted_at (1 samples, 0.02%)</title><rect x="1122.6" y="421" width="0.2" height="15.0" fill="rgb(226,192,9)" rx="2" ry="2" />
<text  x="1125.62" y="431.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="740.3" y="597" width="0.2" height="15.0" fill="rgb(245,88,12)" rx="2" ry="2" />
<text  x="743.29" y="607.5" ></text>
</g>
<g >
<title>seastar::reactor::syscall_pollfn::poll (1 samples, 0.02%)</title><rect x="1166.7" y="677" width="0.2" height="15.0" fill="rgb(220,193,34)" rx="2" ry="2" />
<text  x="1169.71" y="687.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="53.0" y="325" width="0.2" height="15.0" fill="rgb(232,8,17)" rx="2" ry="2" />
<text  x="55.96" y="335.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (17 samples, 0.33%)</title><rect x="775.6" y="597" width="3.8" height="15.0" fill="rgb(237,181,11)" rx="2" ry="2" />
<text  x="778.56" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="827.8" y="405" width="0.4" height="15.0" fill="rgb(254,142,7)" rx="2" ry="2" />
<text  x="830.79" y="415.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (3 samples, 0.06%)</title><rect x="556.3" y="421" width="0.6" height="15.0" fill="rgb(210,2,5)" rx="2" ry="2" />
<text  x="559.25" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="897.2" y="645" width="0.5" height="15.0" fill="rgb(210,20,37)" rx="2" ry="2" />
<text  x="900.20" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="72.6" y="533" width="0.3" height="15.0" fill="rgb(227,199,9)" rx="2" ry="2" />
<text  x="75.63" y="543.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="466.9" y="549" width="0.7" height="15.0" fill="rgb(222,185,39)" rx="2" ry="2" />
<text  x="469.94" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="887.7" y="485" width="0.2" height="15.0" fill="rgb(252,50,14)" rx="2" ry="2" />
<text  x="890.71" y="495.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="46.9" y="293" width="0.2" height="15.0" fill="rgb(243,223,51)" rx="2" ry="2" />
<text  x="49.85" y="303.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (96 samples, 1.84%)</title><rect x="511.5" y="501" width="21.7" height="15.0" fill="rgb(238,142,37)" rx="2" ry="2" />
<text  x="514.48" y="511.5" >d..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation::data, std::default_delete&lt;mutation::data&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="1132.6" y="501" width="0.6" height="15.0" fill="rgb(218,226,45)" rx="2" ry="2" />
<text  x="1135.57" y="511.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (1 samples, 0.02%)</title><rect x="762.7" y="565" width="0.2" height="15.0" fill="rgb(253,79,53)" rx="2" ry="2" />
<text  x="765.68" y="575.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (1 samples, 0.02%)</title><rect x="74.9" y="565" width="0.2" height="15.0" fill="rgb(246,107,51)" rx="2" ry="2" />
<text  x="77.89" y="575.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (150 samples, 2.87%)</title><rect x="222.1" y="341" width="33.9" height="15.0" fill="rgb(211,98,14)" rx="2" ry="2" />
<text  x="225.08" y="351.5" >cl..</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (6 samples, 0.11%)</title><rect x="1082.4" y="533" width="1.3" height="15.0" fill="rgb(253,105,47)" rx="2" ry="2" />
<text  x="1085.38" y="543.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="848.8" y="453" width="0.2" height="15.0" fill="rgb(240,75,2)" rx="2" ry="2" />
<text  x="851.82" y="463.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="18.4" y="645" width="0.2" height="15.0" fill="rgb(236,150,0)" rx="2" ry="2" />
<text  x="21.37" y="655.5" ></text>
</g>
<g >
<title>row_tombstone::apply (4 samples, 0.08%)</title><rect x="436.9" y="389" width="0.9" height="15.0" fill="rgb(245,92,9)" rx="2" ry="2" />
<text  x="439.87" y="399.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (4 samples, 0.08%)</title><rect x="150.6" y="581" width="0.9" height="15.0" fill="rgb(232,42,34)" rx="2" ry="2" />
<text  x="153.63" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="46.2" y="357" width="0.4" height="15.0" fill="rgb(243,173,45)" rx="2" ry="2" />
<text  x="49.18" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1131.9" y="341" width="0.2" height="15.0" fill="rgb(247,185,22)" rx="2" ry="2" />
<text  x="1134.89" y="351.5" ></text>
</g>
<g >
<title>reader_permit::set_max_result_size (1 samples, 0.02%)</title><rect x="122.6" y="629" width="0.2" height="15.0" fill="rgb(242,8,17)" rx="2" ry="2" />
<text  x="125.60" y="639.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="712.0" y="629" width="0.3" height="15.0" fill="rgb(209,229,48)" rx="2" ry="2" />
<text  x="715.03" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="10.9" y="597" width="0.2" height="15.0" fill="rgb(244,152,15)" rx="2" ry="2" />
<text  x="13.90" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~Parser (2 samples, 0.04%)</title><rect x="24.5" y="581" width="0.4" height="15.0" fill="rgb(206,187,41)" rx="2" ry="2" />
<text  x="27.47" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="60.0" y="453" width="0.2" height="15.0" fill="rgb(205,214,45)" rx="2" ry="2" />
<text  x="62.97" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (1 samples, 0.02%)</title><rect x="604.6" y="501" width="0.3" height="15.0" fill="rgb(249,0,13)" rx="2" ry="2" />
<text  x="607.63" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="63.6" y="405" width="0.4" height="15.0" fill="rgb(238,159,44)" rx="2" ry="2" />
<text  x="66.58" y="415.5" ></text>
</g>
<g >
<title>database::find_schema (12 samples, 0.23%)</title><rect x="781.0" y="565" width="2.7" height="15.0" fill="rgb(223,76,7)" rx="2" ry="2" />
<text  x="783.99" y="575.5" ></text>
</g>
<g >
<title>query::result_set_row::get_ptr&lt;int&gt; (1 samples, 0.02%)</title><rect x="108.6" y="533" width="0.2" height="15.0" fill="rgb(251,73,54)" rx="2" ry="2" />
<text  x="111.58" y="543.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;, true&gt; (3 samples, 0.06%)</title><rect x="52.5" y="405" width="0.7" height="15.0" fill="rgb(233,164,4)" rx="2" ry="2" />
<text  x="55.51" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (8 samples, 0.15%)</title><rect x="823.5" y="325" width="1.8" height="15.0" fill="rgb(208,163,15)" rx="2" ry="2" />
<text  x="826.50" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (6 samples, 0.11%)</title><rect x="610.3" y="453" width="1.3" height="15.0" fill="rgb(223,11,42)" rx="2" ry="2" />
<text  x="613.29" y="463.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (13 samples, 0.25%)</title><rect x="791.2" y="565" width="2.9" height="15.0" fill="rgb(221,206,33)" rx="2" ry="2" />
<text  x="794.16" y="575.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="823.0" y="309" width="0.5" height="15.0" fill="rgb(223,5,36)" rx="2" ry="2" />
<text  x="826.04" y="319.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::_M_deleter (1 samples, 0.02%)</title><rect x="60.9" y="453" width="0.2" height="15.0" fill="rgb(228,151,36)" rx="2" ry="2" />
<text  x="63.87" y="463.5" ></text>
</g>
<g >
<title>schema_registry::learn (6 samples, 0.11%)</title><rect x="107.9" y="645" width="1.4" height="15.0" fill="rgb(235,185,18)" rx="2" ry="2" />
<text  x="110.90" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (5 samples, 0.10%)</title><rect x="495.9" y="453" width="1.1" height="15.0" fill="rgb(244,127,9)" rx="2" ry="2" />
<text  x="498.88" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="862.2" y="533" width="0.2" height="15.0" fill="rgb(241,96,8)" rx="2" ry="2" />
<text  x="865.16" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%)</title><rect x="1024.0" y="405" width="0.5" height="15.0" fill="rgb(212,131,1)" rx="2" ry="2" />
<text  x="1027.04" y="415.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (10 samples, 0.19%)</title><rect x="930.9" y="565" width="2.3" height="15.0" fill="rgb(222,36,36)" rx="2" ry="2" />
<text  x="933.89" y="575.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_failed (1 samples, 0.02%)</title><rect x="28.3" y="453" width="0.2" height="15.0" fill="rgb(240,212,51)" rx="2" ry="2" />
<text  x="31.31" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%)</title><rect x="105.9" y="661" width="0.2" height="15.0" fill="rgb(245,193,50)" rx="2" ry="2" />
<text  x="108.87" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="46.6" y="357" width="0.3" height="15.0" fill="rgb(232,168,32)" rx="2" ry="2" />
<text  x="49.63" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (1 samples, 0.02%)</title><rect x="27.4" y="341" width="0.2" height="15.0" fill="rgb(215,70,9)" rx="2" ry="2" />
<text  x="30.41" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (3 samples, 0.06%)</title><rect x="19.0" y="741" width="0.7" height="15.0" fill="rgb(224,151,11)" rx="2" ry="2" />
<text  x="22.04" y="751.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="60.0" y="437" width="0.2" height="15.0" fill="rgb(220,134,12)" rx="2" ry="2" />
<text  x="62.97" y="447.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (6 samples, 0.11%)</title><rect x="1143.9" y="629" width="1.3" height="15.0" fill="rgb(218,168,48)" rx="2" ry="2" />
<text  x="1146.88" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="25.1" y="533" width="0.3" height="15.0" fill="rgb(213,66,25)" rx="2" ry="2" />
<text  x="28.15" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="699.8" y="661" width="0.2" height="15.0" fill="rgb(220,114,50)" rx="2" ry="2" />
<text  x="702.82" y="671.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (3 samples, 0.06%)</title><rect x="1018.8" y="325" width="0.7" height="15.0" fill="rgb(213,8,47)" rx="2" ry="2" />
<text  x="1021.84" y="335.5" ></text>
</g>
<g >
<title>table::set_hit_rate (13 samples, 0.25%)</title><rect x="734.4" y="629" width="3.0" height="15.0" fill="rgb(224,202,6)" rx="2" ry="2" />
<text  x="737.41" y="639.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (4 samples, 0.08%)</title><rect x="64.0" y="501" width="0.9" height="15.0" fill="rgb(247,227,26)" rx="2" ry="2" />
<text  x="67.04" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="662.1" y="645" width="0.4" height="15.0" fill="rgb(220,224,26)" rx="2" ry="2" />
<text  x="665.06" y="655.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_with_triggers (2 samples, 0.04%)</title><rect x="886.1" y="565" width="0.5" height="15.0" fill="rgb(251,153,26)" rx="2" ry="2" />
<text  x="889.13" y="575.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="568.7" y="501" width="0.2" height="15.0" fill="rgb(207,14,28)" rx="2" ry="2" />
<text  x="571.69" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (2 samples, 0.04%)</title><rect x="58.4" y="437" width="0.4" height="15.0" fill="rgb(241,94,15)" rx="2" ry="2" />
<text  x="61.38" y="447.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%)</title><rect x="717.5" y="661" width="1.5" height="15.0" fill="rgb(218,168,5)" rx="2" ry="2" />
<text  x="720.46" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (4 samples, 0.08%)</title><rect x="45.7" y="389" width="0.9" height="15.0" fill="rgb(232,12,51)" rx="2" ry="2" />
<text  x="48.72" y="399.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%)</title><rect x="819.7" y="309" width="0.2" height="15.0" fill="rgb(214,56,24)" rx="2" ry="2" />
<text  x="822.65" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="793.4" y="533" width="0.7" height="15.0" fill="rgb(234,171,30)" rx="2" ry="2" />
<text  x="796.43" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="1121.0" y="341" width="0.5" height="15.0" fill="rgb(215,199,27)" rx="2" ry="2" />
<text  x="1124.04" y="351.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (14 samples, 0.27%)</title><rect x="441.6" y="405" width="3.2" height="15.0" fill="rgb(250,31,44)" rx="2" ry="2" />
<text  x="444.62" y="415.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (48 samples, 0.92%)</title><rect x="522.3" y="485" width="10.9" height="15.0" fill="rgb(211,215,4)" rx="2" ry="2" />
<text  x="525.34" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (9 samples, 0.17%)</title><rect x="839.3" y="565" width="2.1" height="15.0" fill="rgb(223,100,41)" rx="2" ry="2" />
<text  x="842.32" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (12 samples, 0.23%)</title><rect x="1095.7" y="517" width="2.7" height="15.0" fill="rgb(235,194,14)" rx="2" ry="2" />
<text  x="1098.72" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%)</title><rect x="106.8" y="293" width="0.2" height="15.0" fill="rgb(211,57,41)" rx="2" ry="2" />
<text  x="109.77" y="303.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%)</title><rect x="863.5" y="597" width="1.4" height="15.0" fill="rgb(240,203,53)" rx="2" ry="2" />
<text  x="866.52" y="607.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="88.0" y="693" width="0.2" height="15.0" fill="rgb(222,58,23)" rx="2" ry="2" />
<text  x="91.00" y="703.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (21 samples, 0.40%)</title><rect x="752.7" y="565" width="4.8" height="15.0" fill="rgb(230,85,52)" rx="2" ry="2" />
<text  x="755.73" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="333.8" y="453" width="0.2" height="15.0" fill="rgb(242,26,51)" rx="2" ry="2" />
<text  x="336.77" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, false&gt; &gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="76.7" y="517" width="0.2" height="15.0" fill="rgb(231,42,49)" rx="2" ry="2" />
<text  x="79.70" y="527.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (1 samples, 0.02%)</title><rect x="883.2" y="597" width="0.2" height="15.0" fill="rgb(231,152,26)" rx="2" ry="2" />
<text  x="886.19" y="607.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="158.5" y="597" width="0.3" height="15.0" fill="rgb(251,95,50)" rx="2" ry="2" />
<text  x="161.55" y="607.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (153 samples, 2.93%)</title><rect x="800.0" y="533" width="34.6" height="15.0" fill="rgb(213,161,47)" rx="2" ry="2" />
<text  x="802.98" y="543.5" >se..</text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (7 samples, 0.13%)</title><rect x="206.5" y="373" width="1.6" height="15.0" fill="rgb(220,90,43)" rx="2" ry="2" />
<text  x="209.48" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (776 samples, 14.87%)</title><rect x="161.7" y="581" width="175.5" height="15.0" fill="rgb(242,126,51)" rx="2" ry="2" />
<text  x="164.71" y="591.5" >flat_mutation_reader::..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (7 samples, 0.13%)</title><rect x="278.6" y="341" width="1.6" height="15.0" fill="rgb(218,170,40)" rx="2" ry="2" />
<text  x="281.60" y="351.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="891.8" y="405" width="0.2" height="15.0" fill="rgb(217,172,44)" rx="2" ry="2" />
<text  x="894.78" y="415.5" ></text>
</g>
<g >
<title>partition_entry::make_evictable (1 samples, 0.02%)</title><rect x="18.8" y="741" width="0.2" height="15.0" fill="rgb(215,212,8)" rx="2" ry="2" />
<text  x="21.82" y="751.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (3 samples, 0.06%)</title><rect x="84.2" y="613" width="0.6" height="15.0" fill="rgb(249,53,33)" rx="2" ry="2" />
<text  x="87.16" y="623.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (522 samples, 10.00%)</title><rect x="344.2" y="517" width="118.0" height="15.0" fill="rgb(215,67,54)" rx="2" ry="2" />
<text  x="347.17" y="527.5" >seastar::futur..</text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple (1 samples, 0.02%)</title><rect x="53.0" y="341" width="0.2" height="15.0" fill="rgb(241,82,26)" rx="2" ry="2" />
<text  x="55.96" y="351.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (2 samples, 0.04%)</title><rect x="890.0" y="469" width="0.4" height="15.0" fill="rgb(249,114,18)" rx="2" ry="2" />
<text  x="892.97" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (21 samples, 0.40%)</title><rect x="784.2" y="533" width="4.7" height="15.0" fill="rgb(242,176,36)" rx="2" ry="2" />
<text  x="787.16" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="49.8" y="453" width="0.2" height="15.0" fill="rgb(251,206,45)" rx="2" ry="2" />
<text  x="52.79" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (19 samples, 0.36%)</title><rect x="1160.6" y="645" width="4.3" height="15.0" fill="rgb(242,150,40)" rx="2" ry="2" />
<text  x="1163.61" y="655.5" ></text>
</g>
<g >
<title>memtable::apply (18 samples, 0.34%)</title><rect x="1118.8" y="437" width="4.0" height="15.0" fill="rgb(246,139,26)" rx="2" ry="2" />
<text  x="1121.78" y="447.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (18 samples, 0.34%)</title><rect x="394.4" y="341" width="4.0" height="15.0" fill="rgb(219,199,47)" rx="2" ry="2" />
<text  x="397.36" y="351.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="83.7" y="645" width="0.2" height="15.0" fill="rgb(228,71,50)" rx="2" ry="2" />
<text  x="86.71" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (1 samples, 0.02%)</title><rect x="286.5" y="437" width="0.2" height="15.0" fill="rgb(210,8,16)" rx="2" ry="2" />
<text  x="289.52" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="626.8" y="597" width="0.4" height="15.0" fill="rgb(241,19,33)" rx="2" ry="2" />
<text  x="629.79" y="607.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%)</title><rect x="761.1" y="597" width="0.2" height="15.0" fill="rgb(246,125,42)" rx="2" ry="2" />
<text  x="764.09" y="607.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="19.7" y="645" width="0.2" height="15.0" fill="rgb(229,84,15)" rx="2" ry="2" />
<text  x="22.72" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;scanning_reader::consumer&gt; (1 samples, 0.02%)</title><rect x="106.8" y="133" width="0.2" height="15.0" fill="rgb(209,118,53)" rx="2" ry="2" />
<text  x="109.77" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="561.7" y="437" width="1.1" height="15.0" fill="rgb(251,61,45)" rx="2" ry="2" />
<text  x="564.68" y="447.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%)</title><rect x="208.1" y="389" width="0.2" height="15.0" fill="rgb(236,95,8)" rx="2" ry="2" />
<text  x="211.06" y="399.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (3 samples, 0.06%)</title><rect x="294.7" y="357" width="0.6" height="15.0" fill="rgb(211,115,34)" rx="2" ry="2" />
<text  x="297.66" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%)</title><rect x="985.6" y="485" width="1.4" height="15.0" fill="rgb(224,114,0)" rx="2" ry="2" />
<text  x="988.61" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (1 samples, 0.02%)</title><rect x="548.6" y="405" width="0.2" height="15.0" fill="rgb(229,48,22)" rx="2" ry="2" />
<text  x="551.56" y="415.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::max_backlog (1 samples, 0.02%)</title><rect x="739.4" y="597" width="0.2" height="15.0" fill="rgb(212,105,40)" rx="2" ry="2" />
<text  x="742.39" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="795.5" y="533" width="0.2" height="15.0" fill="rgb(223,75,26)" rx="2" ry="2" />
<text  x="798.46" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="379.7" y="341" width="0.2" height="15.0" fill="rgb(236,209,50)" rx="2" ry="2" />
<text  x="382.67" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%)</title><rect x="701.2" y="613" width="0.7" height="15.0" fill="rgb(228,183,12)" rx="2" ry="2" />
<text  x="704.18" y="623.5" ></text>
</g>
<g >
<title>query_state::query_state (14 samples, 0.27%)</title><rect x="634.7" y="613" width="3.2" height="15.0" fill="rgb(224,70,48)" rx="2" ry="2" />
<text  x="637.71" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="274.3" y="373" width="0.2" height="15.0" fill="rgb(244,217,19)" rx="2" ry="2" />
<text  x="277.31" y="383.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="572.3" y="453" width="0.2" height="15.0" fill="rgb(248,91,48)" rx="2" ry="2" />
<text  x="575.30" y="463.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (2 samples, 0.04%)</title><rect x="1109.3" y="565" width="0.4" height="15.0" fill="rgb(220,105,30)" rx="2" ry="2" />
<text  x="1112.28" y="575.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (1 samples, 0.02%)</title><rect x="1076.3" y="485" width="0.2" height="15.0" fill="rgb(230,174,34)" rx="2" ry="2" />
<text  x="1079.27" y="495.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="63.4" y="309" width="0.2" height="15.0" fill="rgb(213,221,17)" rx="2" ry="2" />
<text  x="66.36" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.61%)</title><rect x="1118.3" y="565" width="7.3" height="15.0" fill="rgb(218,212,44)" rx="2" ry="2" />
<text  x="1121.33" y="575.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::single_column_relation, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (1 samples, 0.02%)</title><rect x="64.9" y="501" width="0.3" height="15.0" fill="rgb(224,21,26)" rx="2" ry="2" />
<text  x="67.94" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::ensure_entry_if_complete (1 samples, 0.02%)</title><rect x="19.3" y="725" width="0.2" height="15.0" fill="rgb(249,154,41)" rx="2" ry="2" />
<text  x="22.27" y="735.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="19.7" y="517" width="0.2" height="15.0" fill="rgb(223,159,18)" rx="2" ry="2" />
<text  x="22.72" y="527.5" ></text>
</g>
<g >
<title>database::find_column_family (2 samples, 0.04%)</title><rect x="842.0" y="517" width="0.5" height="15.0" fill="rgb(226,79,43)" rx="2" ry="2" />
<text  x="845.04" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.10%)</title><rect x="1140.3" y="629" width="1.1" height="15.0" fill="rgb(221,138,16)" rx="2" ry="2" />
<text  x="1143.26" y="639.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="548.8" y="405" width="0.2" height="15.0" fill="rgb(211,152,15)" rx="2" ry="2" />
<text  x="551.79" y="415.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (9 samples, 0.17%)</title><rect x="746.4" y="629" width="2.0" height="15.0" fill="rgb(234,65,46)" rx="2" ry="2" />
<text  x="749.40" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="107.4" y="549" width="0.3" height="15.0" fill="rgb(219,140,42)" rx="2" ry="2" />
<text  x="110.45" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (8 samples, 0.15%)</title><rect x="784.8" y="517" width="1.8" height="15.0" fill="rgb(220,59,17)" rx="2" ry="2" />
<text  x="787.83" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="703.7" y="613" width="0.2" height="15.0" fill="rgb(230,126,9)" rx="2" ry="2" />
<text  x="706.67" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="1114.9" y="581" width="0.3" height="15.0" fill="rgb(235,143,0)" rx="2" ry="2" />
<text  x="1117.94" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="467.6" y="549" width="0.2" height="15.0" fill="rgb(239,139,39)" rx="2" ry="2" />
<text  x="470.62" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="740.5" y="501" width="0.2" height="15.0" fill="rgb(251,160,11)" rx="2" ry="2" />
<text  x="743.52" y="511.5" ></text>
</g>
<g >
<title>seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt;::for_each_fragment&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt;::read (1 samples, 0.02%)</title><rect x="671.6" y="485" width="0.2" height="15.0" fill="rgb(254,183,38)" rx="2" ry="2" />
<text  x="674.56" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (2 samples, 0.04%)</title><rect x="57.3" y="453" width="0.4" height="15.0" fill="rgb(240,7,4)" rx="2" ry="2" />
<text  x="60.25" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::future (1 samples, 0.02%)</title><rect x="777.6" y="533" width="0.2" height="15.0" fill="rgb(210,159,12)" rx="2" ry="2" />
<text  x="780.60" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%)</title><rect x="1141.6" y="661" width="0.9" height="15.0" fill="rgb(207,100,54)" rx="2" ry="2" />
<text  x="1144.62" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (6 samples, 0.11%)</title><rect x="1128.7" y="309" width="1.4" height="15.0" fill="rgb(228,93,24)" rx="2" ry="2" />
<text  x="1131.73" y="319.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (71 samples, 1.36%)</title><rect x="599.9" y="533" width="16.0" height="15.0" fill="rgb(234,93,30)" rx="2" ry="2" />
<text  x="602.89" y="543.5" ></text>
</g>
<g >
<title>make_combined_reader (99 samples, 1.90%)</title><rect x="484.4" y="517" width="22.3" height="15.0" fill="rgb(236,222,2)" rx="2" ry="2" />
<text  x="487.35" y="527.5" >m..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_relocate (3 samples, 0.06%)</title><rect x="53.4" y="437" width="0.7" height="15.0" fill="rgb(251,178,14)" rx="2" ry="2" />
<text  x="56.41" y="447.5" ></text>
</g>
<g >
<title>ser::mutation_view::partition (1 samples, 0.02%)</title><rect x="1119.0" y="405" width="0.2" height="15.0" fill="rgb(212,68,46)" rx="2" ry="2" />
<text  x="1122.01" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (3 samples, 0.06%)</title><rect x="185.2" y="421" width="0.7" height="15.0" fill="rgb(228,58,33)" rx="2" ry="2" />
<text  x="188.23" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (1 samples, 0.02%)</title><rect x="595.4" y="565" width="0.2" height="15.0" fill="rgb(215,20,12)" rx="2" ry="2" />
<text  x="598.37" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="194.0" y="453" width="0.5" height="15.0" fill="rgb(206,149,10)" rx="2" ry="2" />
<text  x="197.04" y="463.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (6 samples, 0.11%)</title><rect x="405.7" y="325" width="1.3" height="15.0" fill="rgb(224,38,39)" rx="2" ry="2" />
<text  x="408.67" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%)</title><rect x="718.4" y="645" width="0.6" height="15.0" fill="rgb(210,7,5)" rx="2" ry="2" />
<text  x="721.36" y="655.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="461.7" y="437" width="0.3" height="15.0" fill="rgb(221,98,24)" rx="2" ry="2" />
<text  x="464.74" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="545.8" y="437" width="0.3" height="15.0" fill="rgb(232,213,20)" rx="2" ry="2" />
<text  x="548.85" y="447.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%)</title><rect x="987.4" y="469" width="0.2" height="15.0" fill="rgb(211,165,42)" rx="2" ry="2" />
<text  x="990.42" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="53.0" y="357" width="0.2" height="15.0" fill="rgb(221,118,13)" rx="2" ry="2" />
<text  x="55.96" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="879.6" y="581" width="0.2" height="15.0" fill="rgb(240,164,31)" rx="2" ry="2" />
<text  x="882.57" y="591.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (8 samples, 0.15%)</title><rect x="120.8" y="629" width="1.8" height="15.0" fill="rgb(232,202,39)" rx="2" ry="2" />
<text  x="123.79" y="639.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::mutate_locally (1 samples, 0.02%)</title><rect x="1126.9" y="357" width="0.2" height="15.0" fill="rgb(246,190,9)" rx="2" ry="2" />
<text  x="1129.92" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr (2 samples, 0.04%)</title><rect x="52.7" y="389" width="0.5" height="15.0" fill="rgb(212,143,10)" rx="2" ry="2" />
<text  x="55.73" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (4 samples, 0.08%)</title><rect x="269.8" y="325" width="0.9" height="15.0" fill="rgb(229,3,5)" rx="2" ry="2" />
<text  x="272.79" y="335.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%)</title><rect x="605.5" y="485" width="0.3" height="15.0" fill="rgb(246,23,20)" rx="2" ry="2" />
<text  x="608.54" y="495.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (13 samples, 0.25%)</title><rect x="933.6" y="565" width="2.9" height="15.0" fill="rgb(211,18,24)" rx="2" ry="2" />
<text  x="936.61" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%)</title><rect x="320.7" y="501" width="0.4" height="15.0" fill="rgb(249,136,19)" rx="2" ry="2" />
<text  x="323.66" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (488 samples, 9.35%)</title><rect x="196.3" y="453" width="110.3" height="15.0" fill="rgb(251,18,25)" rx="2" ry="2" />
<text  x="199.30" y="463.5" >logalloc::all..</text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%)</title><rect x="109.5" y="677" width="0.2" height="15.0" fill="rgb(244,189,17)" rx="2" ry="2" />
<text  x="112.48" y="687.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (5 samples, 0.10%)</title><rect x="949.2" y="565" width="1.1" height="15.0" fill="rgb(233,208,0)" rx="2" ry="2" />
<text  x="952.21" y="575.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (15 samples, 0.29%)</title><rect x="44.4" y="517" width="3.4" height="15.0" fill="rgb(212,107,29)" rx="2" ry="2" />
<text  x="47.37" y="527.5" ></text>
</g>
<g >
<title>db::schema_tables::all_tables (1 samples, 0.02%)</title><rect x="19.7" y="453" width="0.2" height="15.0" fill="rgb(232,169,25)" rx="2" ry="2" />
<text  x="22.72" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="69.2" y="597" width="0.3" height="15.0" fill="rgb(249,213,12)" rx="2" ry="2" />
<text  x="72.24" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="41.7" y="501" width="0.2" height="15.0" fill="rgb(212,6,49)" rx="2" ry="2" />
<text  x="44.65" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload&lt;cql3::expr::expression, false, false, false&gt;::_Optional_payload (1 samples, 0.02%)</title><rect x="65.2" y="469" width="0.2" height="15.0" fill="rgb(228,187,37)" rx="2" ry="2" />
<text  x="68.17" y="479.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="577.5" y="437" width="1.1" height="15.0" fill="rgb(221,135,53)" rx="2" ry="2" />
<text  x="580.50" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="815.1" y="389" width="0.3" height="15.0" fill="rgb(250,19,53)" rx="2" ry="2" />
<text  x="818.13" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="96.1" y="661" width="0.3" height="15.0" fill="rgb(249,28,12)" rx="2" ry="2" />
<text  x="99.14" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (1 samples, 0.02%)</title><rect x="882.5" y="661" width="0.2" height="15.0" fill="rgb(229,116,38)" rx="2" ry="2" />
<text  x="885.51" y="671.5" ></text>
</g>
<g >
<title>CryptoPP::IteratedHashBase&lt;unsigned int, CryptoPP::HashTransformation&gt;::Update (1 samples, 0.02%)</title><rect x="10.7" y="757" width="0.2" height="15.0" fill="rgb(216,43,25)" rx="2" ry="2" />
<text  x="13.68" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="462.9" y="533" width="0.2" height="15.0" fill="rgb(216,178,38)" rx="2" ry="2" />
<text  x="465.87" y="543.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (4 samples, 0.08%)</title><rect x="617.1" y="533" width="0.9" height="15.0" fill="rgb(235,134,29)" rx="2" ry="2" />
<text  x="620.07" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (2 samples, 0.04%)</title><rect x="275.0" y="389" width="0.4" height="15.0" fill="rgb(240,24,7)" rx="2" ry="2" />
<text  x="277.99" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::file&gt;::get0 (1 samples, 0.02%)</title><rect x="86.6" y="709" width="0.3" height="15.0" fill="rgb(213,74,0)" rx="2" ry="2" />
<text  x="89.65" y="719.5" ></text>
</g>
<g >
<title>__start_context (12 samples, 0.23%)</title><rect x="83.9" y="773" width="2.7" height="15.0" fill="rgb(241,28,14)" rx="2" ry="2" />
<text  x="86.93" y="783.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%)</title><rect x="263.9" y="341" width="0.2" height="15.0" fill="rgb(226,12,4)" rx="2" ry="2" />
<text  x="266.91" y="351.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="1132.8" y="437" width="0.2" height="15.0" fill="rgb(243,108,9)" rx="2" ry="2" />
<text  x="1135.80" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (40 samples, 0.77%)</title><rect x="695.3" y="677" width="9.0" height="15.0" fill="rgb(253,129,13)" rx="2" ry="2" />
<text  x="698.30" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1032.6" y="437" width="0.3" height="15.0" fill="rgb(232,215,22)" rx="2" ry="2" />
<text  x="1035.64" y="447.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (1 samples, 0.02%)</title><rect x="655.7" y="597" width="0.3" height="15.0" fill="rgb(247,180,18)" rx="2" ry="2" />
<text  x="658.73" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="19.5" y="693" width="0.2" height="15.0" fill="rgb(251,202,21)" rx="2" ry="2" />
<text  x="22.50" y="703.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (3 samples, 0.06%)</title><rect x="419.7" y="357" width="0.7" height="15.0" fill="rgb(252,40,48)" rx="2" ry="2" />
<text  x="422.69" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="24.7" y="565" width="0.2" height="15.0" fill="rgb(239,48,42)" rx="2" ry="2" />
<text  x="27.70" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="370.9" y="373" width="0.4" height="15.0" fill="rgb(223,146,5)" rx="2" ry="2" />
<text  x="373.85" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="619.8" y="517" width="0.4" height="15.0" fill="rgb(233,60,37)" rx="2" ry="2" />
<text  x="622.78" y="527.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="218.5" y="373" width="0.2" height="15.0" fill="rgb(245,27,23)" rx="2" ry="2" />
<text  x="221.46" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="135.3" y="629" width="0.2" height="15.0" fill="rgb(236,203,10)" rx="2" ry="2" />
<text  x="138.26" y="639.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (16 samples, 0.31%)</title><rect x="873.0" y="597" width="3.6" height="15.0" fill="rgb(252,35,1)" rx="2" ry="2" />
<text  x="876.01" y="607.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="81.7" y="549" width="0.2" height="15.0" fill="rgb(223,224,18)" rx="2" ry="2" />
<text  x="84.67" y="559.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="466.5" y="549" width="0.4" height="15.0" fill="rgb(215,134,13)" rx="2" ry="2" />
<text  x="469.49" y="559.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1165.8" y="565" width="0.2" height="15.0" fill="rgb(244,104,8)" rx="2" ry="2" />
<text  x="1168.81" y="575.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (10 samples, 0.19%)</title><rect x="696.9" y="661" width="2.2" height="15.0" fill="rgb(222,59,26)" rx="2" ry="2" />
<text  x="699.88" y="671.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (10 samples, 0.19%)</title><rect x="360.7" y="357" width="2.2" height="15.0" fill="rgb(243,9,44)" rx="2" ry="2" />
<text  x="363.68" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="469.7" y="565" width="0.2" height="15.0" fill="rgb(212,24,29)" rx="2" ry="2" />
<text  x="472.66" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (4 samples, 0.08%)</title><rect x="950.3" y="565" width="0.9" height="15.0" fill="rgb(222,181,50)" rx="2" ry="2" />
<text  x="953.34" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (1 samples, 0.02%)</title><rect x="966.6" y="549" width="0.2" height="15.0" fill="rgb(226,217,26)" rx="2" ry="2" />
<text  x="969.62" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (3 samples, 0.06%)</title><rect x="884.8" y="645" width="0.6" height="15.0" fill="rgb(251,160,9)" rx="2" ry="2" />
<text  x="887.77" y="655.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (1 samples, 0.02%)</title><rect x="105.9" y="629" width="0.2" height="15.0" fill="rgb(240,27,18)" rx="2" ry="2" />
<text  x="108.87" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::begin (1 samples, 0.02%)</title><rect x="51.8" y="469" width="0.3" height="15.0" fill="rgb(241,90,49)" rx="2" ry="2" />
<text  x="54.83" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::deque (1 samples, 0.02%)</title><rect x="24.0" y="485" width="0.2" height="15.0" fill="rgb(217,69,23)" rx="2" ry="2" />
<text  x="27.02" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_base::shared_ptr_count_base (1 samples, 0.02%)</title><rect x="47.3" y="469" width="0.2" height="15.0" fill="rgb(218,172,49)" rx="2" ry="2" />
<text  x="50.31" y="479.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::prepare_column_identifier (1 samples, 0.02%)</title><rect x="70.6" y="597" width="0.2" height="15.0" fill="rgb(239,220,21)" rx="2" ry="2" />
<text  x="73.59" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%)</title><rect x="883.0" y="501" width="0.2" height="15.0" fill="rgb(254,10,50)" rx="2" ry="2" />
<text  x="885.96" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (1 samples, 0.02%)</title><rect x="734.2" y="629" width="0.2" height="15.0" fill="rgb(221,5,6)" rx="2" ry="2" />
<text  x="737.19" y="639.5" ></text>
</g>
<g >
<title>row_tombstone::apply (1 samples, 0.02%)</title><rect x="439.1" y="405" width="0.3" height="15.0" fill="rgb(208,3,30)" rx="2" ry="2" />
<text  x="442.13" y="415.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="19.7" y="597" width="0.2" height="15.0" fill="rgb(221,28,10)" rx="2" ry="2" />
<text  x="22.72" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="462.2" y="517" width="0.2" height="15.0" fill="rgb(248,229,26)" rx="2" ry="2" />
<text  x="465.19" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="64.7" y="373" width="0.2" height="15.0" fill="rgb(231,226,21)" rx="2" ry="2" />
<text  x="67.72" y="383.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (2 samples, 0.04%)</title><rect x="823.7" y="293" width="0.5" height="15.0" fill="rgb(235,156,45)" rx="2" ry="2" />
<text  x="826.72" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="64.7" y="341" width="0.2" height="15.0" fill="rgb(229,89,0)" rx="2" ry="2" />
<text  x="67.72" y="351.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="289.5" y="389" width="0.2" height="15.0" fill="rgb(216,15,0)" rx="2" ry="2" />
<text  x="292.46" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="667.3" y="629" width="0.2" height="15.0" fill="rgb(231,80,2)" rx="2" ry="2" />
<text  x="670.26" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (5 samples, 0.10%)</title><rect x="610.5" y="437" width="1.1" height="15.0" fill="rgb(238,206,24)" rx="2" ry="2" />
<text  x="613.51" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="883.2" y="661" width="0.2" height="15.0" fill="rgb(253,66,22)" rx="2" ry="2" />
<text  x="886.19" y="671.5" ></text>
</g>
<g >
<title>reader_permit::mark_used (1 samples, 0.02%)</title><rect x="114.2" y="645" width="0.3" height="15.0" fill="rgb(241,150,33)" rx="2" ry="2" />
<text  x="117.23" y="655.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (1 samples, 0.02%)</title><rect x="716.1" y="437" width="0.2" height="15.0" fill="rgb(216,198,49)" rx="2" ry="2" />
<text  x="719.10" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="84.2" y="565" width="0.6" height="15.0" fill="rgb(222,202,3)" rx="2" ry="2" />
<text  x="87.16" y="575.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (7 samples, 0.13%)</title><rect x="400.9" y="341" width="1.6" height="15.0" fill="rgb(210,108,19)" rx="2" ry="2" />
<text  x="403.92" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (1 samples, 0.02%)</title><rect x="314.6" y="501" width="0.2" height="15.0" fill="rgb(218,183,26)" rx="2" ry="2" />
<text  x="317.55" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="81.9" y="565" width="0.2" height="15.0" fill="rgb(236,30,18)" rx="2" ry="2" />
<text  x="84.90" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="100.2" y="597" width="0.2" height="15.0" fill="rgb(235,131,6)" rx="2" ry="2" />
<text  x="103.21" y="607.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_error (1 samples, 0.02%)</title><rect x="28.1" y="453" width="0.2" height="15.0" fill="rgb(254,173,40)" rx="2" ry="2" />
<text  x="31.09" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (6 samples, 0.11%)</title><rect x="75.1" y="549" width="1.4" height="15.0" fill="rgb(224,124,38)" rx="2" ry="2" />
<text  x="78.12" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%)</title><rect x="1165.8" y="581" width="0.2" height="15.0" fill="rgb(240,83,8)" rx="2" ry="2" />
<text  x="1168.81" y="591.5" ></text>
</g>
<g >
<title>do_cql_test (274 samples, 5.25%)</title><rect x="20.6" y="725" width="62.0" height="15.0" fill="rgb(215,216,2)" rx="2" ry="2" />
<text  x="23.63" y="735.5" >do_cql..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_aggregate_statement, std::default_delete&lt;cql3::statements::create_aggregate_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="66.3" y="533" width="0.2" height="15.0" fill="rgb(253,46,27)" rx="2" ry="2" />
<text  x="69.30" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="826.2" y="421" width="0.9" height="15.0" fill="rgb(210,32,15)" rx="2" ry="2" />
<text  x="829.21" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (47 samples, 0.90%)</title><rect x="28.1" y="485" width="10.6" height="15.0" fill="rgb(239,19,29)" rx="2" ry="2" />
<text  x="31.09" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="670.4" y="661" width="0.3" height="15.0" fill="rgb(207,82,18)" rx="2" ry="2" />
<text  x="673.43" y="671.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (27 samples, 0.52%)</title><rect x="819.2" y="373" width="6.1" height="15.0" fill="rgb(205,135,43)" rx="2" ry="2" />
<text  x="822.20" y="383.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%)</title><rect x="19.9" y="549" width="0.3" height="15.0" fill="rgb(239,4,16)" rx="2" ry="2" />
<text  x="22.95" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="466.7" y="533" width="0.2" height="15.0" fill="rgb(226,118,20)" rx="2" ry="2" />
<text  x="469.72" y="543.5" ></text>
</g>
<g >
<title>database::do_apply (30 samples, 0.57%)</title><rect x="1118.3" y="517" width="6.8" height="15.0" fill="rgb(218,229,29)" rx="2" ry="2" />
<text  x="1121.33" y="527.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (2 samples, 0.04%)</title><rect x="698.7" y="645" width="0.4" height="15.0" fill="rgb(206,81,15)" rx="2" ry="2" />
<text  x="701.69" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1145.5" y="597" width="0.2" height="15.0" fill="rgb(220,70,42)" rx="2" ry="2" />
<text  x="1148.46" y="607.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (2 samples, 0.04%)</title><rect x="464.5" y="517" width="0.4" height="15.0" fill="rgb(221,104,11)" rx="2" ry="2" />
<text  x="467.45" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="665.5" y="661" width="0.2" height="15.0" fill="rgb(216,141,11)" rx="2" ry="2" />
<text  x="668.46" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (7 samples, 0.13%)</title><rect x="701.9" y="629" width="1.5" height="15.0" fill="rgb(212,1,48)" rx="2" ry="2" />
<text  x="704.86" y="639.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (1 samples, 0.02%)</title><rect x="107.2" y="645" width="0.2" height="15.0" fill="rgb(240,192,15)" rx="2" ry="2" />
<text  x="110.22" y="655.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (8 samples, 0.15%)</title><rect x="491.6" y="453" width="1.8" height="15.0" fill="rgb(217,41,29)" rx="2" ry="2" />
<text  x="494.59" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (21 samples, 0.40%)</title><rect x="719.3" y="661" width="4.7" height="15.0" fill="rgb(205,57,4)" rx="2" ry="2" />
<text  x="722.27" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (4 samples, 0.08%)</title><rect x="437.8" y="373" width="0.9" height="15.0" fill="rgb(244,84,3)" rx="2" ry="2" />
<text  x="440.78" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="347.3" y="469" width="0.3" height="15.0" fill="rgb(232,43,20)" rx="2" ry="2" />
<text  x="350.34" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="86.6" y="725" width="0.3" height="15.0" fill="rgb(232,8,51)" rx="2" ry="2" />
<text  x="89.65" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="52.1" y="453" width="0.2" height="15.0" fill="rgb(235,216,41)" rx="2" ry="2" />
<text  x="55.05" y="463.5" ></text>
</g>
<g >
<title>auth::resource::resource (6 samples, 0.11%)</title><rect x="794.3" y="549" width="1.4" height="15.0" fill="rgb(239,137,25)" rx="2" ry="2" />
<text  x="797.33" y="559.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (1 samples, 0.02%)</title><rect x="1023.4" y="389" width="0.2" height="15.0" fill="rgb(253,166,5)" rx="2" ry="2" />
<text  x="1026.37" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="885.2" y="533" width="0.2" height="15.0" fill="rgb(245,13,6)" rx="2" ry="2" />
<text  x="888.22" y="543.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (12 samples, 0.23%)</title><rect x="317.9" y="501" width="2.8" height="15.0" fill="rgb(242,159,46)" rx="2" ry="2" />
<text  x="320.94" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="48.0" y="501" width="0.2" height="15.0" fill="rgb(207,12,0)" rx="2" ry="2" />
<text  x="50.98" y="511.5" ></text>
</g>
<g >
<title>query::querier&lt; (1 samples, 0.02%)</title><rect x="138.0" y="613" width="0.2" height="15.0" fill="rgb(235,14,6)" rx="2" ry="2" />
<text  x="140.97" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (4 samples, 0.08%)</title><rect x="1137.5" y="661" width="0.9" height="15.0" fill="rgb(206,199,53)" rx="2" ry="2" />
<text  x="1140.55" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="667.7" y="645" width="0.5" height="15.0" fill="rgb(215,170,47)" rx="2" ry="2" />
<text  x="670.72" y="655.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchc (1 samples, 0.02%)</title><rect x="35.3" y="421" width="0.2" height="15.0" fill="rgb(251,227,36)" rx="2" ry="2" />
<text  x="38.32" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1084.2" y="549" width="0.2" height="15.0" fill="rgb(208,104,1)" rx="2" ry="2" />
<text  x="1087.19" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="811.1" y="405" width="0.4" height="15.0" fill="rgb(235,43,50)" rx="2" ry="2" />
<text  x="814.06" y="415.5" ></text>
</g>
<g >
<title>abstract_type::as_cql3_type (1 samples, 0.02%)</title><rect x="73.5" y="469" width="0.3" height="15.0" fill="rgb(236,30,11)" rx="2" ry="2" />
<text  x="76.53" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (10 samples, 0.19%)</title><rect x="683.3" y="645" width="2.3" height="15.0" fill="rgb(245,153,26)" rx="2" ry="2" />
<text  x="686.32" y="655.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::reset (1 samples, 0.02%)</title><rect x="23.8" y="549" width="0.2" height="15.0" fill="rgb(251,138,10)" rx="2" ry="2" />
<text  x="26.79" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (19 samples, 0.36%)</title><rect x="549.7" y="389" width="4.3" height="15.0" fill="rgb(238,211,47)" rx="2" ry="2" />
<text  x="552.69" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (2 samples, 0.04%)</title><rect x="656.2" y="613" width="0.4" height="15.0" fill="rgb(248,178,19)" rx="2" ry="2" />
<text  x="659.19" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="48.0" y="469" width="0.2" height="15.0" fill="rgb(237,221,54)" rx="2" ry="2" />
<text  x="50.98" y="479.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (1 samples, 0.02%)</title><rect x="134.6" y="629" width="0.2" height="15.0" fill="rgb(232,159,16)" rx="2" ry="2" />
<text  x="137.58" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="52.7" y="357" width="0.3" height="15.0" fill="rgb(253,154,31)" rx="2" ry="2" />
<text  x="55.73" y="367.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="914.2" y="485" width="0.2" height="15.0" fill="rgb(216,178,43)" rx="2" ry="2" />
<text  x="917.16" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::~update_statement (1 samples, 0.02%)</title><rect x="80.1" y="645" width="0.2" height="15.0" fill="rgb(206,85,9)" rx="2" ry="2" />
<text  x="83.09" y="655.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (2 samples, 0.04%)</title><rect x="384.0" y="357" width="0.4" height="15.0" fill="rgb(224,144,42)" rx="2" ry="2" />
<text  x="386.96" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1027.4" y="357" width="0.3" height="15.0" fill="rgb(219,207,36)" rx="2" ry="2" />
<text  x="1030.44" y="367.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (2 samples, 0.04%)</title><rect x="100.4" y="597" width="0.5" height="15.0" fill="rgb(249,34,19)" rx="2" ry="2" />
<text  x="103.44" y="607.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (1 samples, 0.02%)</title><rect x="437.5" y="357" width="0.3" height="15.0" fill="rgb(226,5,42)" rx="2" ry="2" />
<text  x="440.55" y="367.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (1 samples, 0.02%)</title><rect x="595.8" y="565" width="0.2" height="15.0" fill="rgb(249,226,50)" rx="2" ry="2" />
<text  x="598.82" y="575.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::find_bucket_index (1 samples, 0.02%)</title><rect x="707.7" y="645" width="0.3" height="15.0" fill="rgb(243,9,25)" rx="2" ry="2" />
<text  x="710.74" y="655.5" ></text>
</g>
<g >
<title>ser::serializer&lt;tombstone&gt;::read&lt;seastar::memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="109.0" y="453" width="0.3" height="15.0" fill="rgb(247,43,28)" rx="2" ry="2" />
<text  x="112.03" y="463.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%)</title><rect x="60.9" y="437" width="0.2" height="15.0" fill="rgb(249,187,39)" rx="2" ry="2" />
<text  x="63.87" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_aggregate_statement, std::default_delete&lt;cql3::statements::create_aggregate_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_aggregate_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="68.3" y="565" width="0.3" height="15.0" fill="rgb(235,84,46)" rx="2" ry="2" />
<text  x="71.33" y="575.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (20 samples, 0.38%)</title><rect x="72.9" y="597" width="4.5" height="15.0" fill="rgb(229,18,52)" rx="2" ry="2" />
<text  x="75.85" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (3 samples, 0.06%)</title><rect x="682.6" y="645" width="0.7" height="15.0" fill="rgb(238,175,21)" rx="2" ry="2" />
<text  x="685.64" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="24.9" y="453" width="0.2" height="15.0" fill="rgb(239,119,43)" rx="2" ry="2" />
<text  x="27.92" y="463.5" ></text>
</g>
<g >
<title>logalloc::region_group::update (1 samples, 0.02%)</title><rect x="83.9" y="597" width="0.3" height="15.0" fill="rgb(241,168,49)" rx="2" ry="2" />
<text  x="86.93" y="607.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="265.5" y="325" width="0.4" height="15.0" fill="rgb(221,212,37)" rx="2" ry="2" />
<text  x="268.49" y="335.5" ></text>
</g>
<g >
<title>fmt::v7::detail::value&lt;fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt;::format_custom_arg&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt; &gt; (1 samples, 0.02%)</title><rect x="21.3" y="661" width="0.2" height="15.0" fill="rgb(222,86,18)" rx="2" ry="2" />
<text  x="24.30" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::io_getevents (1 samples, 0.02%)</title><rect x="1167.2" y="645" width="0.2" height="15.0" fill="rgb(253,123,9)" rx="2" ry="2" />
<text  x="1170.16" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (4 samples, 0.08%)</title><rect x="1147.7" y="613" width="0.9" height="15.0" fill="rgb(251,145,13)" rx="2" ry="2" />
<text  x="1150.72" y="623.5" ></text>
</g>
<g >
<title>database::find_schema (3 samples, 0.06%)</title><rect x="841.8" y="533" width="0.7" height="15.0" fill="rgb(205,190,24)" rx="2" ry="2" />
<text  x="844.81" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (2 samples, 0.04%)</title><rect x="135.5" y="629" width="0.4" height="15.0" fill="rgb(226,205,33)" rx="2" ry="2" />
<text  x="138.48" y="639.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (6 samples, 0.11%)</title><rect x="490.2" y="453" width="1.4" height="15.0" fill="rgb(233,35,44)" rx="2" ry="2" />
<text  x="493.23" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="54.3" y="405" width="0.5" height="15.0" fill="rgb(241,151,43)" rx="2" ry="2" />
<text  x="57.32" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (1 samples, 0.02%)</title><rect x="1061.6" y="517" width="0.2" height="15.0" fill="rgb(211,112,4)" rx="2" ry="2" />
<text  x="1064.58" y="527.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%)</title><rect x="777.1" y="565" width="0.3" height="15.0" fill="rgb(250,82,50)" rx="2" ry="2" />
<text  x="780.15" y="575.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (6 samples, 0.11%)</title><rect x="70.8" y="597" width="1.4" height="15.0" fill="rgb(250,80,48)" rx="2" ry="2" />
<text  x="73.82" y="607.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="55.2" y="437" width="0.2" height="15.0" fill="rgb(228,71,0)" rx="2" ry="2" />
<text  x="58.22" y="447.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%)</title><rect x="715.9" y="661" width="0.2" height="15.0" fill="rgb(250,199,5)" rx="2" ry="2" />
<text  x="718.87" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (5 samples, 0.10%)</title><rect x="623.4" y="533" width="1.1" height="15.0" fill="rgb(210,40,43)" rx="2" ry="2" />
<text  x="626.40" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="46.9" y="357" width="0.2" height="15.0" fill="rgb(234,130,22)" rx="2" ry="2" />
<text  x="49.85" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%)</title><rect x="883.0" y="549" width="0.2" height="15.0" fill="rgb(217,27,42)" rx="2" ry="2" />
<text  x="885.96" y="559.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (6 samples, 0.11%)</title><rect x="1153.8" y="629" width="1.4" height="15.0" fill="rgb(243,140,28)" rx="2" ry="2" />
<text  x="1156.82" y="639.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (3 samples, 0.06%)</title><rect x="955.1" y="581" width="0.7" height="15.0" fill="rgb(221,84,47)" rx="2" ry="2" />
<text  x="958.09" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (2 samples, 0.04%)</title><rect x="57.7" y="453" width="0.5" height="15.0" fill="rgb(241,147,19)" rx="2" ry="2" />
<text  x="60.71" y="463.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous&gt; (2 samples, 0.04%)</title><rect x="830.7" y="469" width="0.5" height="15.0" fill="rgb(212,125,37)" rx="2" ry="2" />
<text  x="833.73" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="1142.5" y="661" width="0.5" height="15.0" fill="rgb(213,223,42)" rx="2" ry="2" />
<text  x="1145.52" y="671.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (2 samples, 0.04%)</title><rect x="864.9" y="597" width="0.4" height="15.0" fill="rgb(229,194,37)" rx="2" ry="2" />
<text  x="867.87" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="722.9" y="629" width="0.4" height="15.0" fill="rgb(215,4,11)" rx="2" ry="2" />
<text  x="725.88" y="639.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (1 samples, 0.02%)</title><rect x="533.0" y="453" width="0.2" height="15.0" fill="rgb(205,149,21)" rx="2" ry="2" />
<text  x="535.96" y="463.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="824.4" y="293" width="0.2" height="15.0" fill="rgb(229,152,28)" rx="2" ry="2" />
<text  x="827.40" y="303.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (4 samples, 0.08%)</title><rect x="360.9" y="341" width="0.9" height="15.0" fill="rgb(209,90,21)" rx="2" ry="2" />
<text  x="363.90" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="958.9" y="565" width="0.3" height="15.0" fill="rgb(239,93,13)" rx="2" ry="2" />
<text  x="961.93" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="504.2" y="453" width="0.7" height="15.0" fill="rgb(226,77,54)" rx="2" ry="2" />
<text  x="507.25" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (3 samples, 0.06%)</title><rect x="349.6" y="437" width="0.7" height="15.0" fill="rgb(236,87,38)" rx="2" ry="2" />
<text  x="352.60" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (2 samples, 0.04%)</title><rect x="497.5" y="469" width="0.4" height="15.0" fill="rgb(219,113,9)" rx="2" ry="2" />
<text  x="500.47" y="479.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%)</title><rect x="556.0" y="405" width="0.3" height="15.0" fill="rgb(234,180,43)" rx="2" ry="2" />
<text  x="559.02" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="579.3" y="517" width="0.7" height="15.0" fill="rgb(244,126,12)" rx="2" ry="2" />
<text  x="582.31" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="803.6" y="469" width="0.2" height="15.0" fill="rgb(224,121,9)" rx="2" ry="2" />
<text  x="806.60" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="671.3" y="645" width="0.3" height="15.0" fill="rgb(232,139,5)" rx="2" ry="2" />
<text  x="674.33" y="655.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="52.5" y="389" width="0.2" height="15.0" fill="rgb(227,130,34)" rx="2" ry="2" />
<text  x="55.51" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%)</title><rect x="81.9" y="581" width="0.2" height="15.0" fill="rgb(246,217,39)" rx="2" ry="2" />
<text  x="84.90" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_Deque_iterator (1 samples, 0.02%)</title><rect x="62.0" y="325" width="0.2" height="15.0" fill="rgb(251,49,2)" rx="2" ry="2" />
<text  x="65.00" y="335.5" ></text>
</g>
<g >
<title>db::schema_tables::query_partition_mutation (1 samples, 0.02%)</title><rect x="107.2" y="677" width="0.2" height="15.0" fill="rgb(241,67,26)" rx="2" ry="2" />
<text  x="110.22" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="917.3" y="549" width="0.3" height="15.0" fill="rgb(237,187,52)" rx="2" ry="2" />
<text  x="920.33" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (2 samples, 0.04%)</title><rect x="301.0" y="421" width="0.4" height="15.0" fill="rgb(231,156,53)" rx="2" ry="2" />
<text  x="303.99" y="431.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (1 samples, 0.02%)</title><rect x="381.0" y="357" width="0.3" height="15.0" fill="rgb(229,137,2)" rx="2" ry="2" />
<text  x="384.03" y="367.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="740.3" y="533" width="0.2" height="15.0" fill="rgb(225,122,20)" rx="2" ry="2" />
<text  x="743.29" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1006.0" y="453" width="0.2" height="15.0" fill="rgb(230,137,29)" rx="2" ry="2" />
<text  x="1008.96" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%)</title><rect x="852.9" y="581" width="0.9" height="15.0" fill="rgb(205,225,46)" rx="2" ry="2" />
<text  x="855.89" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%)</title><rect x="816.5" y="341" width="0.9" height="15.0" fill="rgb(206,184,7)" rx="2" ry="2" />
<text  x="819.49" y="351.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (4 samples, 0.08%)</title><rect x="926.1" y="533" width="0.9" height="15.0" fill="rgb(246,213,40)" rx="2" ry="2" />
<text  x="929.14" y="543.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (1 samples, 0.02%)</title><rect x="677.2" y="645" width="0.2" height="15.0" fill="rgb(246,155,53)" rx="2" ry="2" />
<text  x="680.21" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="815.8" y="357" width="0.5" height="15.0" fill="rgb(208,128,52)" rx="2" ry="2" />
<text  x="818.81" y="367.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (4 samples, 0.08%)</title><rect x="37.4" y="421" width="0.9" height="15.0" fill="rgb(247,74,51)" rx="2" ry="2" />
<text  x="40.36" y="431.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (4 samples, 0.08%)</title><rect x="70.8" y="533" width="0.9" height="15.0" fill="rgb(252,161,4)" rx="2" ry="2" />
<text  x="73.82" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="613.7" y="485" width="0.2" height="15.0" fill="rgb(236,173,20)" rx="2" ry="2" />
<text  x="616.68" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="840.0" y="549" width="0.2" height="15.0" fill="rgb(214,75,7)" rx="2" ry="2" />
<text  x="843.00" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="225.0" y="309" width="0.7" height="15.0" fill="rgb(232,9,33)" rx="2" ry="2" />
<text  x="228.02" y="319.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (22 samples, 0.42%)</title><rect x="1055.9" y="501" width="5.0" height="15.0" fill="rgb(236,8,25)" rx="2" ry="2" />
<text  x="1058.92" y="511.5" ></text>
</g>
<g >
<title>database::find_uuid (18 samples, 0.34%)</title><rect x="842.5" y="533" width="4.1" height="15.0" fill="rgb(244,47,17)" rx="2" ry="2" />
<text  x="845.49" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1038.5" y="389" width="0.2" height="15.0" fill="rgb(223,148,9)" rx="2" ry="2" />
<text  x="1041.52" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="646.0" y="613" width="0.2" height="15.0" fill="rgb(229,70,23)" rx="2" ry="2" />
<text  x="649.01" y="623.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (2 samples, 0.04%)</title><rect x="1075.6" y="453" width="0.4" height="15.0" fill="rgb(235,188,3)" rx="2" ry="2" />
<text  x="1078.59" y="463.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="891.8" y="437" width="0.2" height="15.0" fill="rgb(237,142,47)" rx="2" ry="2" />
<text  x="894.78" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (3 samples, 0.06%)</title><rect x="584.3" y="581" width="0.7" height="15.0" fill="rgb(215,229,23)" rx="2" ry="2" />
<text  x="587.29" y="591.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="639.7" y="581" width="0.2" height="15.0" fill="rgb(226,179,11)" rx="2" ry="2" />
<text  x="642.68" y="591.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="643.3" y="597" width="0.2" height="15.0" fill="rgb(248,55,39)" rx="2" ry="2" />
<text  x="646.30" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (5 samples, 0.10%)</title><rect x="693.7" y="629" width="1.1" height="15.0" fill="rgb(254,130,38)" rx="2" ry="2" />
<text  x="696.72" y="639.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="786.2" y="485" width="0.4" height="15.0" fill="rgb(214,214,39)" rx="2" ry="2" />
<text  x="789.19" y="495.5" ></text>
</g>
<g >
<title>row_cache::make_reader (52 samples, 1.00%)</title><rect x="567.6" y="517" width="11.7" height="15.0" fill="rgb(223,212,5)" rx="2" ry="2" />
<text  x="570.56" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (14 samples, 0.27%)</title><rect x="888.8" y="565" width="3.2" height="15.0" fill="rgb(213,49,51)" rx="2" ry="2" />
<text  x="891.84" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (3 samples, 0.06%)</title><rect x="623.9" y="517" width="0.6" height="15.0" fill="rgb(233,114,26)" rx="2" ry="2" />
<text  x="626.85" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="206.3" y="373" width="0.2" height="15.0" fill="rgb(219,142,24)" rx="2" ry="2" />
<text  x="209.25" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1024.9" y="405" width="0.3" height="15.0" fill="rgb(217,142,24)" rx="2" ry="2" />
<text  x="1027.95" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="272.5" y="341" width="0.5" height="15.0" fill="rgb(209,91,26)" rx="2" ry="2" />
<text  x="275.50" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="23.1" y="645" width="0.2" height="15.0" fill="rgb(209,116,54)" rx="2" ry="2" />
<text  x="26.11" y="655.5" ></text>
</g>
<g >
<title>db::schema_tables::make_create_keyspace_mutations (1 samples, 0.02%)</title><rect x="20.2" y="373" width="0.2" height="15.0" fill="rgb(232,102,2)" rx="2" ry="2" />
<text  x="23.17" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="349.4" y="437" width="0.2" height="15.0" fill="rgb(252,1,16)" rx="2" ry="2" />
<text  x="352.37" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1022.2" y="373" width="0.3" height="15.0" fill="rgb(245,129,22)" rx="2" ry="2" />
<text  x="1025.24" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="498.8" y="453" width="0.2" height="15.0" fill="rgb(216,52,22)" rx="2" ry="2" />
<text  x="501.82" y="463.5" ></text>
</g>
<g >
<title>validation::validate_column_family (2 samples, 0.04%)</title><rect x="81.9" y="629" width="0.5" height="15.0" fill="rgb(205,166,6)" rx="2" ry="2" />
<text  x="84.90" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%)</title><rect x="539.1" y="485" width="0.4" height="15.0" fill="rgb(247,101,3)" rx="2" ry="2" />
<text  x="542.07" y="495.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (10 samples, 0.19%)</title><rect x="1119.7" y="421" width="2.2" height="15.0" fill="rgb(220,180,17)" rx="2" ry="2" />
<text  x="1122.68" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="64.7" y="405" width="0.2" height="15.0" fill="rgb(245,121,38)" rx="2" ry="2" />
<text  x="67.72" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (6 samples, 0.11%)</title><rect x="946.0" y="565" width="1.4" height="15.0" fill="rgb(247,162,4)" rx="2" ry="2" />
<text  x="949.04" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="40.7" y="485" width="0.3" height="15.0" fill="rgb(236,75,10)" rx="2" ry="2" />
<text  x="43.75" y="495.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (6 samples, 0.11%)</title><rect x="1123.1" y="469" width="1.3" height="15.0" fill="rgb(208,143,6)" rx="2" ry="2" />
<text  x="1126.08" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="716.1" y="581" width="0.5" height="15.0" fill="rgb(215,152,28)" rx="2" ry="2" />
<text  x="719.10" y="591.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;scanning_reader::fill_buffer (1 samples, 0.02%)</title><rect x="106.8" y="197" width="0.2" height="15.0" fill="rgb(248,225,8)" rx="2" ry="2" />
<text  x="109.77" y="207.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (32 samples, 0.61%)</title><rect x="1118.3" y="533" width="7.3" height="15.0" fill="rgb(215,175,44)" rx="2" ry="2" />
<text  x="1121.33" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="596.9" y="597" width="0.7" height="15.0" fill="rgb(252,133,24)" rx="2" ry="2" />
<text  x="599.95" y="607.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="998.3" y="453" width="0.2" height="15.0" fill="rgb(212,112,36)" rx="2" ry="2" />
<text  x="1001.27" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (1 samples, 0.02%)</title><rect x="105.6" y="661" width="0.3" height="15.0" fill="rgb(240,45,17)" rx="2" ry="2" />
<text  x="108.64" y="671.5" ></text>
</g>
<g >
<title>seastar::posix_thread::start_routine (2 samples, 0.04%)</title><rect x="1189.5" y="789" width="0.5" height="15.0" fill="rgb(231,97,4)" rx="2" ry="2" />
<text  x="1192.55" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="549.2" y="357" width="0.5" height="15.0" fill="rgb(245,194,43)" rx="2" ry="2" />
<text  x="552.24" y="367.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (1 samples, 0.02%)</title><rect x="269.6" y="309" width="0.2" height="15.0" fill="rgb(217,154,15)" rx="2" ry="2" />
<text  x="272.56" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="842.0" y="485" width="0.5" height="15.0" fill="rgb(220,109,33)" rx="2" ry="2" />
<text  x="845.04" y="495.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%)</title><rect x="18.8" y="677" width="0.2" height="15.0" fill="rgb(239,3,0)" rx="2" ry="2" />
<text  x="21.82" y="687.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="887.3" y="501" width="0.2" height="15.0" fill="rgb(210,205,17)" rx="2" ry="2" />
<text  x="890.26" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (2 samples, 0.04%)</title><rect x="1139.6" y="645" width="0.4" height="15.0" fill="rgb(252,174,11)" rx="2" ry="2" />
<text  x="1142.58" y="655.5" ></text>
</g>
<g >
<title>appending_hash&lt;mutation&gt;::operator (1 samples, 0.02%)</title><rect x="106.1" y="645" width="0.2" height="15.0" fill="rgb(238,180,10)" rx="2" ry="2" />
<text  x="109.09" y="655.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="65.4" y="485" width="0.2" height="15.0" fill="rgb(251,145,10)" rx="2" ry="2" />
<text  x="68.39" y="495.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (2 samples, 0.04%)</title><rect x="997.4" y="469" width="0.4" height="15.0" fill="rgb(236,90,41)" rx="2" ry="2" />
<text  x="1000.37" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (1 samples, 0.02%)</title><rect x="903.8" y="597" width="0.2" height="15.0" fill="rgb(205,203,44)" rx="2" ry="2" />
<text  x="906.76" y="607.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (31 samples, 0.59%)</title><rect x="751.8" y="597" width="7.0" height="15.0" fill="rgb(226,132,14)" rx="2" ry="2" />
<text  x="754.82" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (1 samples, 0.02%)</title><rect x="883.0" y="645" width="0.2" height="15.0" fill="rgb(222,175,32)" rx="2" ry="2" />
<text  x="885.96" y="655.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (8 samples, 0.15%)</title><rect x="130.3" y="565" width="1.8" height="15.0" fill="rgb(214,47,23)" rx="2" ry="2" />
<text  x="133.28" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="24.7" y="517" width="0.2" height="15.0" fill="rgb(210,124,9)" rx="2" ry="2" />
<text  x="27.70" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (2 samples, 0.04%)</title><rect x="1165.6" y="645" width="0.4" height="15.0" fill="rgb(227,111,16)" rx="2" ry="2" />
<text  x="1168.58" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (7 samples, 0.13%)</title><rect x="26.5" y="485" width="1.6" height="15.0" fill="rgb(231,37,52)" rx="2" ry="2" />
<text  x="29.51" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (7 samples, 0.13%)</title><rect x="1131.0" y="389" width="1.6" height="15.0" fill="rgb(224,33,35)" rx="2" ry="2" />
<text  x="1133.99" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="731.9" y="597" width="0.3" height="15.0" fill="rgb(245,182,44)" rx="2" ry="2" />
<text  x="734.93" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="362.5" y="341" width="0.2" height="15.0" fill="rgb(223,49,0)" rx="2" ry="2" />
<text  x="365.49" y="351.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="45.3" y="501" width="0.2" height="15.0" fill="rgb(250,50,11)" rx="2" ry="2" />
<text  x="48.27" y="511.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="306.6" y="485" width="0.3" height="15.0" fill="rgb(208,12,22)" rx="2" ry="2" />
<text  x="309.64" y="495.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (2 samples, 0.04%)</title><rect x="1131.7" y="373" width="0.4" height="15.0" fill="rgb(237,59,12)" rx="2" ry="2" />
<text  x="1134.67" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (1 samples, 0.02%)</title><rect x="884.8" y="565" width="0.2" height="15.0" fill="rgb(236,59,24)" rx="2" ry="2" />
<text  x="887.77" y="575.5" ></text>
</g>
<g >
<title>seastar::(anonymous namespace)::thread_wake_task::run_and_dispose (1 samples, 0.02%)</title><rect x="663.4" y="677" width="0.2" height="15.0" fill="rgb(217,148,13)" rx="2" ry="2" />
<text  x="666.42" y="687.5" ></text>
</g>
<g >
<title>seastar::jmp_buf_link::switch_out (1 samples, 0.02%)</title><rect x="86.6" y="693" width="0.3" height="15.0" fill="rgb(206,220,47)" rx="2" ry="2" />
<text  x="89.65" y="703.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="81.4" y="453" width="0.3" height="15.0" fill="rgb(208,167,30)" rx="2" ry="2" />
<text  x="84.45" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (2 samples, 0.04%)</title><rect x="85.3" y="533" width="0.4" height="15.0" fill="rgb(238,83,31)" rx="2" ry="2" />
<text  x="88.29" y="543.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="81.9" y="613" width="0.2" height="15.0" fill="rgb(228,95,19)" rx="2" ry="2" />
<text  x="84.90" y="623.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (268 samples, 5.14%)</title><rect x="22.0" y="693" width="60.6" height="15.0" fill="rgb(235,8,12)" rx="2" ry="2" />
<text  x="24.98" y="703.5" >single..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (12 samples, 0.23%)</title><rect x="277.9" y="357" width="2.7" height="15.0" fill="rgb(217,31,0)" rx="2" ry="2" />
<text  x="280.92" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="40.7" y="517" width="0.3" height="15.0" fill="rgb(224,93,16)" rx="2" ry="2" />
<text  x="43.75" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::pop_back (1 samples, 0.02%)</title><rect x="41.0" y="501" width="0.2" height="15.0" fill="rgb(237,148,40)" rx="2" ry="2" />
<text  x="43.98" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="45.0" y="389" width="0.3" height="15.0" fill="rgb(231,85,40)" rx="2" ry="2" />
<text  x="48.05" y="399.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;db::system_distributed_keyspace&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="20.2" y="501" width="0.2" height="15.0" fill="rgb(230,91,14)" rx="2" ry="2" />
<text  x="23.17" y="511.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="785.7" y="485" width="0.5" height="15.0" fill="rgb(236,53,9)" rx="2" ry="2" />
<text  x="788.74" y="495.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (39 samples, 0.75%)</title><rect x="94.6" y="677" width="8.8" height="15.0" fill="rgb(240,192,2)" rx="2" ry="2" />
<text  x="97.56" y="687.5" ></text>
</g>
<g >
<title>boost::range_detail::filtered_range&lt;mutation_partition::non_dummy_rows (1 samples, 0.02%)</title><rect x="1128.3" y="325" width="0.2" height="15.0" fill="rgb(226,115,11)" rx="2" ry="2" />
<text  x="1131.28" y="335.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="844.1" y="437" width="0.2" height="15.0" fill="rgb(206,210,5)" rx="2" ry="2" />
<text  x="847.07" y="447.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (3 samples, 0.06%)</title><rect x="1058.6" y="469" width="0.7" height="15.0" fill="rgb(228,215,21)" rx="2" ry="2" />
<text  x="1061.64" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (2 samples, 0.04%)</title><rect x="665.0" y="661" width="0.5" height="15.0" fill="rgb(228,113,48)" rx="2" ry="2" />
<text  x="668.00" y="671.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="76.7" y="485" width="0.2" height="15.0" fill="rgb(221,119,47)" rx="2" ry="2" />
<text  x="79.70" y="495.5" ></text>
</g>
<g >
<title>memtable::update (1 samples, 0.02%)</title><rect x="1122.8" y="437" width="0.3" height="15.0" fill="rgb(242,86,20)" rx="2" ry="2" />
<text  x="1125.85" y="447.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchc (1 samples, 0.02%)</title><rect x="36.2" y="421" width="0.3" height="15.0" fill="rgb(232,18,27)" rx="2" ry="2" />
<text  x="39.23" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="31.3" y="421" width="0.2" height="15.0" fill="rgb(246,182,10)" rx="2" ry="2" />
<text  x="34.25" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (6 samples, 0.11%)</title><rect x="652.6" y="597" width="1.3" height="15.0" fill="rgb(212,34,30)" rx="2" ry="2" />
<text  x="655.57" y="607.5" ></text>
</g>
<g >
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="1189.5" y="757" width="0.3" height="15.0" fill="rgb(216,189,14)" rx="2" ry="2" />
<text  x="1192.55" y="767.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%)</title><rect x="719.7" y="645" width="0.2" height="15.0" fill="rgb(252,112,43)" rx="2" ry="2" />
<text  x="722.72" y="655.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (2 samples, 0.04%)</title><rect x="280.2" y="341" width="0.4" height="15.0" fill="rgb(244,12,26)" rx="2" ry="2" />
<text  x="283.19" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="48.0" y="437" width="0.2" height="15.0" fill="rgb(217,2,30)" rx="2" ry="2" />
<text  x="50.98" y="447.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (1 samples, 0.02%)</title><rect x="1023.6" y="389" width="0.2" height="15.0" fill="rgb(247,115,5)" rx="2" ry="2" />
<text  x="1026.59" y="399.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;seastar::measuring_output_stream&gt; (1 samples, 0.02%)</title><rect x="1123.8" y="405" width="0.2" height="15.0" fill="rgb(245,144,1)" rx="2" ry="2" />
<text  x="1126.75" y="415.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (5 samples, 0.10%)</title><rect x="708.0" y="645" width="1.1" height="15.0" fill="rgb(240,22,46)" rx="2" ry="2" />
<text  x="710.96" y="655.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (9 samples, 0.17%)</title><rect x="943.8" y="565" width="2.0" height="15.0" fill="rgb(216,31,30)" rx="2" ry="2" />
<text  x="946.78" y="575.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (12 samples, 0.23%)</title><rect x="835.7" y="501" width="2.7" height="15.0" fill="rgb(214,50,15)" rx="2" ry="2" />
<text  x="838.71" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (1 samples, 0.02%)</title><rect x="1162.2" y="613" width="0.2" height="15.0" fill="rgb(226,170,22)" rx="2" ry="2" />
<text  x="1165.19" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="795.7" y="549" width="0.4" height="15.0" fill="rgb(225,215,33)" rx="2" ry="2" />
<text  x="798.69" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="192.7" y="437" width="0.2" height="15.0" fill="rgb(221,213,30)" rx="2" ry="2" />
<text  x="195.69" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::list_permissions_statement, std::default_delete&lt;cql3::statements::list_permissions_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="66.8" y="533" width="0.2" height="15.0" fill="rgb(231,182,3)" rx="2" ry="2" />
<text  x="69.75" y="543.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="83.5" y="757" width="0.2" height="15.0" fill="rgb(237,4,22)" rx="2" ry="2" />
<text  x="86.48" y="767.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="62.9" y="437" width="0.2" height="15.0" fill="rgb(236,120,44)" rx="2" ry="2" />
<text  x="65.91" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (500 samples, 9.58%)</title><rect x="968.7" y="549" width="113.0" height="15.0" fill="rgb(215,28,21)" rx="2" ry="2" />
<text  x="971.65" y="559.5" >service::stor..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="694.6" y="581" width="0.2" height="15.0" fill="rgb(243,35,43)" rx="2" ry="2" />
<text  x="697.62" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (2 samples, 0.04%)</title><rect x="853.8" y="613" width="0.4" height="15.0" fill="rgb(221,182,22)" rx="2" ry="2" />
<text  x="856.79" y="623.5" ></text>
</g>
<g >
<title>database::find_column_family (8 samples, 0.15%)</title><rect x="1045.5" y="517" width="1.8" height="15.0" fill="rgb(238,70,12)" rx="2" ry="2" />
<text  x="1048.52" y="527.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%)</title><rect x="639.9" y="581" width="0.2" height="15.0" fill="rgb(227,20,22)" rx="2" ry="2" />
<text  x="642.91" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="470.3" y="581" width="0.3" height="15.0" fill="rgb(211,149,33)" rx="2" ry="2" />
<text  x="473.33" y="591.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="531.6" y="373" width="0.5" height="15.0" fill="rgb(242,169,13)" rx="2" ry="2" />
<text  x="534.61" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="86.4" y="645" width="0.2" height="15.0" fill="rgb(211,201,1)" rx="2" ry="2" />
<text  x="89.42" y="655.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="527.8" y="373" width="0.9" height="15.0" fill="rgb(215,203,20)" rx="2" ry="2" />
<text  x="530.76" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="1129.4" y="277" width="0.2" height="15.0" fill="rgb(205,78,15)" rx="2" ry="2" />
<text  x="1132.41" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (2 samples, 0.04%)</title><rect x="327.2" y="469" width="0.5" height="15.0" fill="rgb(246,204,39)" rx="2" ry="2" />
<text  x="330.21" y="479.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="653.0" y="549" width="0.9" height="15.0" fill="rgb(245,102,34)" rx="2" ry="2" />
<text  x="656.02" y="559.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (2 samples, 0.04%)</title><rect x="716.8" y="677" width="0.4" height="15.0" fill="rgb(227,9,16)" rx="2" ry="2" />
<text  x="719.78" y="687.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (4 samples, 0.08%)</title><rect x="351.6" y="437" width="0.9" height="15.0" fill="rgb(244,98,22)" rx="2" ry="2" />
<text  x="354.63" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (4 samples, 0.08%)</title><rect x="45.7" y="421" width="0.9" height="15.0" fill="rgb(240,50,10)" rx="2" ry="2" />
<text  x="48.72" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (2 samples, 0.04%)</title><rect x="50.5" y="485" width="0.4" height="15.0" fill="rgb(231,148,33)" rx="2" ry="2" />
<text  x="53.47" y="495.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="701.0" y="629" width="0.9" height="15.0" fill="rgb(230,223,12)" rx="2" ry="2" />
<text  x="703.95" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="547.2" y="437" width="0.2" height="15.0" fill="rgb(216,59,53)" rx="2" ry="2" />
<text  x="550.21" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (2 samples, 0.04%)</title><rect x="1101.8" y="581" width="0.5" height="15.0" fill="rgb(216,169,13)" rx="2" ry="2" />
<text  x="1104.82" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="10.9" y="709" width="0.2" height="15.0" fill="rgb(223,4,12)" rx="2" ry="2" />
<text  x="13.90" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="1147.9" y="533" width="0.7" height="15.0" fill="rgb(207,32,43)" rx="2" ry="2" />
<text  x="1150.95" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (11 samples, 0.21%)</title><rect x="943.3" y="581" width="2.5" height="15.0" fill="rgb(244,91,54)" rx="2" ry="2" />
<text  x="946.33" y="591.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%)</title><rect x="251.9" y="277" width="0.2" height="15.0" fill="rgb(245,206,28)" rx="2" ry="2" />
<text  x="254.92" y="287.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (3 samples, 0.06%)</title><rect x="1117.6" y="645" width="0.7" height="15.0" fill="rgb(229,180,2)" rx="2" ry="2" />
<text  x="1120.65" y="655.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="282.7" y="389" width="0.2" height="15.0" fill="rgb(239,226,14)" rx="2" ry="2" />
<text  x="285.67" y="399.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (2 samples, 0.04%)</title><rect x="1020.2" y="325" width="0.5" height="15.0" fill="rgb(243,49,14)" rx="2" ry="2" />
<text  x="1023.20" y="335.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (34 samples, 0.65%)</title><rect x="514.4" y="469" width="7.7" height="15.0" fill="rgb(223,17,1)" rx="2" ry="2" />
<text  x="517.42" y="479.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.02%)</title><rect x="82.6" y="789" width="0.2" height="15.0" fill="rgb(218,50,47)" rx="2" ry="2" />
<text  x="85.58" y="799.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="70.6" y="581" width="0.2" height="15.0" fill="rgb(233,88,29)" rx="2" ry="2" />
<text  x="73.59" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::comparator_type (2 samples, 0.04%)</title><rect x="108.1" y="485" width="0.5" height="15.0" fill="rgb(245,213,52)" rx="2" ry="2" />
<text  x="111.13" y="495.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (9 samples, 0.17%)</title><rect x="576.6" y="453" width="2.0" height="15.0" fill="rgb(217,40,4)" rx="2" ry="2" />
<text  x="579.60" y="463.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="19.7" y="549" width="0.2" height="15.0" fill="rgb(220,77,32)" rx="2" ry="2" />
<text  x="22.72" y="559.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="825.1" y="277" width="0.2" height="15.0" fill="rgb(230,207,10)" rx="2" ry="2" />
<text  x="828.08" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="49.1" y="389" width="0.5" height="15.0" fill="rgb(252,8,22)" rx="2" ry="2" />
<text  x="52.11" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::untyped_constant::operator= (1 samples, 0.02%)</title><rect x="58.8" y="437" width="0.3" height="15.0" fill="rgb(228,109,42)" rx="2" ry="2" />
<text  x="61.84" y="447.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%)</title><rect x="64.3" y="485" width="0.2" height="15.0" fill="rgb(206,216,29)" rx="2" ry="2" />
<text  x="67.26" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (10 samples, 0.19%)</title><rect x="982.7" y="517" width="2.2" height="15.0" fill="rgb(209,113,18)" rx="2" ry="2" />
<text  x="985.67" y="527.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (4 samples, 0.08%)</title><rect x="983.8" y="469" width="0.9" height="15.0" fill="rgb(244,141,14)" rx="2" ry="2" />
<text  x="986.80" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="64.5" y="453" width="0.2" height="15.0" fill="rgb(230,35,20)" rx="2" ry="2" />
<text  x="67.49" y="463.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="991.9" y="501" width="0.3" height="15.0" fill="rgb(247,147,31)" rx="2" ry="2" />
<text  x="994.94" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%)</title><rect x="883.2" y="645" width="0.2" height="15.0" fill="rgb(246,180,39)" rx="2" ry="2" />
<text  x="886.19" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (5 samples, 0.10%)</title><rect x="684.4" y="629" width="1.2" height="15.0" fill="rgb(249,198,42)" rx="2" ry="2" />
<text  x="687.45" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="41.4" y="421" width="0.3" height="15.0" fill="rgb(247,16,50)" rx="2" ry="2" />
<text  x="44.43" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="77.4" y="565" width="0.4" height="15.0" fill="rgb(237,141,30)" rx="2" ry="2" />
<text  x="80.38" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="76.7" y="469" width="0.2" height="15.0" fill="rgb(212,215,24)" rx="2" ry="2" />
<text  x="79.70" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.65%)</title><rect x="1125.6" y="565" width="7.6" height="15.0" fill="rgb(215,91,37)" rx="2" ry="2" />
<text  x="1128.56" y="575.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (9 samples, 0.17%)</title><rect x="746.4" y="645" width="2.0" height="15.0" fill="rgb(244,63,3)" rx="2" ry="2" />
<text  x="749.40" y="655.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%)</title><rect x="452.9" y="389" width="0.3" height="15.0" fill="rgb(224,229,19)" rx="2" ry="2" />
<text  x="455.92" y="399.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (2 samples, 0.04%)</title><rect x="192.2" y="437" width="0.5" height="15.0" fill="rgb(228,31,12)" rx="2" ry="2" />
<text  x="195.23" y="447.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%)</title><rect x="838.0" y="453" width="0.4" height="15.0" fill="rgb(253,31,14)" rx="2" ry="2" />
<text  x="840.97" y="463.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchc (1 samples, 0.02%)</title><rect x="36.5" y="421" width="0.2" height="15.0" fill="rgb(218,203,43)" rx="2" ry="2" />
<text  x="39.45" y="431.5" ></text>
</g>
<g >
<title>database::has_keyspace (12 samples, 0.23%)</title><rect x="860.8" y="597" width="2.7" height="15.0" fill="rgb(232,78,51)" rx="2" ry="2" />
<text  x="863.80" y="607.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%)</title><rect x="18.8" y="725" width="0.2" height="15.0" fill="rgb(247,96,21)" rx="2" ry="2" />
<text  x="21.82" y="735.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (1 samples, 0.02%)</title><rect x="883.0" y="661" width="0.2" height="15.0" fill="rgb(247,57,15)" rx="2" ry="2" />
<text  x="885.96" y="671.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="740.5" y="533" width="0.2" height="15.0" fill="rgb(228,175,17)" rx="2" ry="2" />
<text  x="743.52" y="543.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (3 samples, 0.06%)</title><rect x="552.4" y="373" width="0.7" height="15.0" fill="rgb(237,215,53)" rx="2" ry="2" />
<text  x="555.41" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate (2 samples, 0.04%)</title><rect x="886.1" y="549" width="0.5" height="15.0" fill="rgb(252,217,20)" rx="2" ry="2" />
<text  x="889.13" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (2 samples, 0.04%)</title><rect x="842.0" y="501" width="0.5" height="15.0" fill="rgb(205,38,29)" rx="2" ry="2" />
<text  x="845.04" y="511.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="86.6" y="773" width="0.3" height="15.0" fill="rgb(209,91,23)" rx="2" ry="2" />
<text  x="89.65" y="783.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (2 samples, 0.04%)</title><rect x="279.7" y="277" width="0.5" height="15.0" fill="rgb(246,176,12)" rx="2" ry="2" />
<text  x="282.73" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;checked_file_impl&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="83.7" y="789" width="0.2" height="15.0" fill="rgb(225,90,19)" rx="2" ry="2" />
<text  x="86.71" y="799.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="74.4" y="517" width="0.3" height="15.0" fill="rgb(230,50,31)" rx="2" ry="2" />
<text  x="77.44" y="527.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%)</title><rect x="471.7" y="597" width="0.7" height="15.0" fill="rgb(213,94,30)" rx="2" ry="2" />
<text  x="474.69" y="607.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="822.8" y="293" width="0.2" height="15.0" fill="rgb(247,138,36)" rx="2" ry="2" />
<text  x="825.82" y="303.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="107.2" y="565" width="0.2" height="15.0" fill="rgb(223,70,46)" rx="2" ry="2" />
<text  x="110.22" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="217.6" y="389" width="0.2" height="15.0" fill="rgb(238,47,19)" rx="2" ry="2" />
<text  x="220.56" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (10 samples, 0.19%)</title><rect x="763.4" y="549" width="2.2" height="15.0" fill="rgb(207,103,50)" rx="2" ry="2" />
<text  x="766.36" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (3 samples, 0.06%)</title><rect x="668.4" y="629" width="0.7" height="15.0" fill="rgb(234,73,16)" rx="2" ry="2" />
<text  x="671.39" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="70.4" y="613" width="0.2" height="15.0" fill="rgb(214,17,4)" rx="2" ry="2" />
<text  x="73.37" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="986.5" y="469" width="0.5" height="15.0" fill="rgb(209,150,50)" rx="2" ry="2" />
<text  x="989.51" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="76.7" y="437" width="0.2" height="15.0" fill="rgb(222,146,26)" rx="2" ry="2" />
<text  x="79.70" y="447.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="41.2" y="501" width="0.2" height="15.0" fill="rgb(231,57,39)" rx="2" ry="2" />
<text  x="44.20" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="432.1" y="309" width="0.9" height="15.0" fill="rgb(207,60,0)" rx="2" ry="2" />
<text  x="435.12" y="319.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::work_item_returning&lt;seastar::syscall_result&lt;long&gt; &gt;::process (1 samples, 0.02%)</title><rect x="1189.8" y="741" width="0.2" height="15.0" fill="rgb(248,170,13)" rx="2" ry="2" />
<text  x="1192.77" y="751.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="105.9" y="581" width="0.2" height="15.0" fill="rgb(206,17,39)" rx="2" ry="2" />
<text  x="108.87" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="104.7" y="661" width="0.3" height="15.0" fill="rgb(220,77,43)" rx="2" ry="2" />
<text  x="107.73" y="671.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (1 samples, 0.02%)</title><rect x="886.6" y="533" width="0.2" height="15.0" fill="rgb(207,63,39)" rx="2" ry="2" />
<text  x="889.58" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (185 samples, 3.54%)</title><rect x="998.5" y="469" width="41.8" height="15.0" fill="rgb(230,99,34)" rx="2" ry="2" />
<text  x="1001.50" y="479.5" >ser..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="62.9" y="277" width="0.2" height="15.0" fill="rgb(252,135,51)" rx="2" ry="2" />
<text  x="65.91" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="980.9" y="533" width="0.2" height="15.0" fill="rgb(252,54,53)" rx="2" ry="2" />
<text  x="983.86" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (3 samples, 0.06%)</title><rect x="843.6" y="469" width="0.7" height="15.0" fill="rgb(228,65,12)" rx="2" ry="2" />
<text  x="846.62" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="54.3" y="437" width="0.5" height="15.0" fill="rgb(219,16,0)" rx="2" ry="2" />
<text  x="57.32" y="447.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (2 samples, 0.04%)</title><rect x="716.8" y="645" width="0.4" height="15.0" fill="rgb(252,143,34)" rx="2" ry="2" />
<text  x="719.78" y="655.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (2 samples, 0.04%)</title><rect x="413.4" y="373" width="0.4" height="15.0" fill="rgb(237,15,6)" rx="2" ry="2" />
<text  x="416.36" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (1 samples, 0.02%)</title><rect x="725.8" y="645" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="728.82" y="655.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_new_partition (1 samples, 0.02%)</title><rect x="86.0" y="629" width="0.2" height="15.0" fill="rgb(219,156,8)" rx="2" ry="2" />
<text  x="88.97" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::shared_ptr_count_for&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (2 samples, 0.04%)</title><rect x="78.1" y="581" width="0.4" height="15.0" fill="rgb(216,24,19)" rx="2" ry="2" />
<text  x="81.06" y="591.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (2 samples, 0.04%)</title><rect x="30.3" y="437" width="0.5" height="15.0" fill="rgb(242,177,27)" rx="2" ry="2" />
<text  x="33.35" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="62.9" y="389" width="0.2" height="15.0" fill="rgb(238,109,50)" rx="2" ry="2" />
<text  x="65.91" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (2 samples, 0.04%)</title><rect x="313.0" y="485" width="0.4" height="15.0" fill="rgb(213,154,51)" rx="2" ry="2" />
<text  x="315.97" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="700.7" y="645" width="0.3" height="15.0" fill="rgb(223,129,44)" rx="2" ry="2" />
<text  x="703.73" y="655.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (284 samples, 5.44%)</title><rect x="18.4" y="757" width="64.2" height="15.0" fill="rgb(226,141,41)" rx="2" ry="2" />
<text  x="21.37" y="767.5" >seastar..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (1 samples, 0.02%)</title><rect x="595.1" y="437" width="0.3" height="15.0" fill="rgb(247,146,15)" rx="2" ry="2" />
<text  x="598.14" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (1 samples, 0.02%)</title><rect x="720.6" y="629" width="0.2" height="15.0" fill="rgb(250,42,52)" rx="2" ry="2" />
<text  x="723.62" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (2 samples, 0.04%)</title><rect x="181.6" y="405" width="0.5" height="15.0" fill="rgb(235,114,23)" rx="2" ry="2" />
<text  x="184.61" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="79.9" y="549" width="0.2" height="15.0" fill="rgb(230,39,18)" rx="2" ry="2" />
<text  x="82.86" y="559.5" ></text>
</g>
<g >
<title>executor&lt;test_read (1 samples, 0.02%)</title><rect x="109.3" y="677" width="0.2" height="15.0" fill="rgb(229,83,31)" rx="2" ry="2" />
<text  x="112.26" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="211.2" y="325" width="0.3" height="15.0" fill="rgb(231,190,16)" rx="2" ry="2" />
<text  x="214.23" y="335.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="61.8" y="309" width="0.2" height="15.0" fill="rgb(222,111,54)" rx="2" ry="2" />
<text  x="64.78" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="49.1" y="421" width="0.5" height="15.0" fill="rgb(246,104,40)" rx="2" ry="2" />
<text  x="52.11" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (1 samples, 0.02%)</title><rect x="469.4" y="565" width="0.3" height="15.0" fill="rgb(235,57,33)" rx="2" ry="2" />
<text  x="472.43" y="575.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="291.3" y="341" width="0.4" height="15.0" fill="rgb(233,19,34)" rx="2" ry="2" />
<text  x="294.26" y="351.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%)</title><rect x="81.9" y="597" width="0.2" height="15.0" fill="rgb(253,138,14)" rx="2" ry="2" />
<text  x="84.90" y="607.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (2 samples, 0.04%)</title><rect x="197.0" y="437" width="0.4" height="15.0" fill="rgb(214,76,18)" rx="2" ry="2" />
<text  x="199.98" y="447.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (5 samples, 0.10%)</title><rect x="290.6" y="357" width="1.1" height="15.0" fill="rgb(240,154,2)" rx="2" ry="2" />
<text  x="293.59" y="367.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (4 samples, 0.08%)</title><rect x="83.9" y="661" width="0.9" height="15.0" fill="rgb(232,58,17)" rx="2" ry="2" />
<text  x="86.93" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="813.3" y="405" width="0.5" height="15.0" fill="rgb(209,83,29)" rx="2" ry="2" />
<text  x="816.32" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="808.3" y="469" width="0.3" height="15.0" fill="rgb(215,120,16)" rx="2" ry="2" />
<text  x="811.35" y="479.5" ></text>
</g>
<g >
<title>sstables::write&lt;sstables::file_writer, sstables::disk_array_vint_size&lt;sstables::disk_string_vint_size&gt;, sstables::disk_array_vint_size&lt;sstables::serialization_header::column_desc&gt;, sstables::disk_array_vint_size&lt;sstables::serialization_header::column_desc&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="12.9" y="581" width="0.3" height="15.0" fill="rgb(214,79,38)" rx="2" ry="2" />
<text  x="15.94" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="987.2" y="469" width="0.2" height="15.0" fill="rgb(213,176,33)" rx="2" ry="2" />
<text  x="990.19" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="82.4" y="613" width="0.2" height="15.0" fill="rgb(230,60,2)" rx="2" ry="2" />
<text  x="85.35" y="623.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (2 samples, 0.04%)</title><rect x="21.5" y="645" width="0.5" height="15.0" fill="rgb(232,10,25)" rx="2" ry="2" />
<text  x="24.53" y="655.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (2 samples, 0.04%)</title><rect x="861.0" y="565" width="0.5" height="15.0" fill="rgb(210,39,52)" rx="2" ry="2" />
<text  x="864.03" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="283.8" y="405" width="0.5" height="15.0" fill="rgb(237,2,21)" rx="2" ry="2" />
<text  x="286.80" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="817.8" y="357" width="0.3" height="15.0" fill="rgb(218,158,15)" rx="2" ry="2" />
<text  x="820.84" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="991.7" y="501" width="0.2" height="15.0" fill="rgb(227,136,23)" rx="2" ry="2" />
<text  x="994.71" y="511.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::start (1 samples, 0.02%)</title><rect x="107.7" y="661" width="0.2" height="15.0" fill="rgb(234,146,22)" rx="2" ry="2" />
<text  x="110.67" y="671.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (3 samples, 0.06%)</title><rect x="30.8" y="437" width="0.7" height="15.0" fill="rgb(236,227,54)" rx="2" ry="2" />
<text  x="33.80" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (1 samples, 0.02%)</title><rect x="106.8" y="37" width="0.2" height="15.0" fill="rgb(231,28,21)" rx="2" ry="2" />
<text  x="109.77" y="47.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="887.7" y="469" width="0.2" height="15.0" fill="rgb(207,149,20)" rx="2" ry="2" />
<text  x="890.71" y="479.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="771.0" y="437" width="0.5" height="15.0" fill="rgb(242,67,52)" rx="2" ry="2" />
<text  x="774.04" y="447.5" ></text>
</g>
<g >
<title>db::is_datacenter_local (1 samples, 0.02%)</title><rect x="733.1" y="581" width="0.2" height="15.0" fill="rgb(231,224,54)" rx="2" ry="2" />
<text  x="736.06" y="591.5" ></text>
</g>
<g >
<title>db::block_for (2 samples, 0.04%)</title><rect x="1050.3" y="501" width="0.4" height="15.0" fill="rgb(254,219,22)" rx="2" ry="2" />
<text  x="1053.27" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (4 samples, 0.08%)</title><rect x="366.1" y="357" width="0.9" height="15.0" fill="rgb(241,38,22)" rx="2" ry="2" />
<text  x="369.10" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::remove_response_handler_entry (1 samples, 0.02%)</title><rect x="739.8" y="645" width="0.3" height="15.0" fill="rgb(223,31,15)" rx="2" ry="2" />
<text  x="742.84" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%)</title><rect x="49.6" y="501" width="0.4" height="15.0" fill="rgb(228,61,44)" rx="2" ry="2" />
<text  x="52.57" y="511.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (5 samples, 0.10%)</title><rect x="1126.2" y="405" width="1.2" height="15.0" fill="rgb(228,214,49)" rx="2" ry="2" />
<text  x="1129.24" y="415.5" ></text>
</g>
<g >
<title>schema::column_at (10 samples, 0.19%)</title><rect x="434.4" y="341" width="2.2" height="15.0" fill="rgb(253,202,24)" rx="2" ry="2" />
<text  x="437.38" y="351.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (2 samples, 0.04%)</title><rect x="777.4" y="549" width="0.4" height="15.0" fill="rgb(237,170,7)" rx="2" ry="2" />
<text  x="780.37" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%)</title><rect x="724.2" y="661" width="0.7" height="15.0" fill="rgb(230,79,41)" rx="2" ry="2" />
<text  x="727.24" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="286.1" y="421" width="0.2" height="15.0" fill="rgb(216,29,26)" rx="2" ry="2" />
<text  x="289.06" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (9 samples, 0.17%)</title><rect x="80.3" y="661" width="2.1" height="15.0" fill="rgb(251,30,28)" rx="2" ry="2" />
<text  x="83.32" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1082.2" y="549" width="0.2" height="15.0" fill="rgb(246,104,49)" rx="2" ry="2" />
<text  x="1085.15" y="559.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="77.8" y="565" width="0.3" height="15.0" fill="rgb(225,98,50)" rx="2" ry="2" />
<text  x="80.83" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="1121.3" y="309" width="0.2" height="15.0" fill="rgb(245,147,43)" rx="2" ry="2" />
<text  x="1124.27" y="319.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="20.4" y="501" width="0.2" height="15.0" fill="rgb(225,147,49)" rx="2" ry="2" />
<text  x="23.40" y="511.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::delay&lt;service::abstract_write_response_handler::signal (1 samples, 0.02%)</title><rect x="739.4" y="613" width="0.2" height="15.0" fill="rgb(206,182,29)" rx="2" ry="2" />
<text  x="742.39" y="623.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="82.1" y="533" width="0.3" height="15.0" fill="rgb(246,98,31)" rx="2" ry="2" />
<text  x="85.12" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (1 samples, 0.02%)</title><rect x="133.2" y="629" width="0.2" height="15.0" fill="rgb(238,228,54)" rx="2" ry="2" />
<text  x="136.22" y="639.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (631 samples, 12.09%)</title><rect x="171.0" y="501" width="142.6" height="15.0" fill="rgb(247,217,16)" rx="2" ry="2" />
<text  x="173.98" y="511.5" >mutation_reader_me..</text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%)</title><rect x="1033.1" y="437" width="0.2" height="15.0" fill="rgb(217,203,3)" rx="2" ry="2" />
<text  x="1036.09" y="447.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt;, true&gt;::_M_head (1 samples, 0.02%)</title><rect x="50.7" y="373" width="0.2" height="15.0" fill="rgb(227,187,22)" rx="2" ry="2" />
<text  x="53.70" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (2 samples, 0.04%)</title><rect x="266.2" y="357" width="0.4" height="15.0" fill="rgb(229,84,48)" rx="2" ry="2" />
<text  x="269.17" y="367.5" ></text>
</g>
<g >
<title>database::find_keyspace (13 samples, 0.25%)</title><rect x="1047.3" y="517" width="3.0" height="15.0" fill="rgb(223,6,6)" rx="2" ry="2" />
<text  x="1050.33" y="527.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%)</title><rect x="60.6" y="453" width="0.3" height="15.0" fill="rgb(215,146,14)" rx="2" ry="2" />
<text  x="63.65" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="203.1" y="389" width="0.2" height="15.0" fill="rgb(254,165,42)" rx="2" ry="2" />
<text  x="206.09" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="1132.6" y="517" width="0.6" height="15.0" fill="rgb(212,169,4)" rx="2" ry="2" />
<text  x="1135.57" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="498.4" y="469" width="0.2" height="15.0" fill="rgb(220,117,51)" rx="2" ry="2" />
<text  x="501.37" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="935.6" y="517" width="0.3" height="15.0" fill="rgb(244,53,39)" rx="2" ry="2" />
<text  x="938.64" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="589.3" y="533" width="0.2" height="15.0" fill="rgb(213,50,39)" rx="2" ry="2" />
<text  x="592.26" y="543.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1128.5" y="325" width="0.2" height="15.0" fill="rgb(250,177,33)" rx="2" ry="2" />
<text  x="1131.50" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%)</title><rect x="1165.6" y="549" width="0.2" height="15.0" fill="rgb(241,16,18)" rx="2" ry="2" />
<text  x="1168.58" y="559.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%)</title><rect x="885.0" y="581" width="0.4" height="15.0" fill="rgb(220,91,53)" rx="2" ry="2" />
<text  x="888.00" y="591.5" ></text>
</g>
<g >
<title>mutation_partition::append_clustered_row (1 samples, 0.02%)</title><rect x="105.9" y="597" width="0.2" height="15.0" fill="rgb(225,193,17)" rx="2" ry="2" />
<text  x="108.87" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="40.7" y="373" width="0.3" height="15.0" fill="rgb(207,225,50)" rx="2" ry="2" />
<text  x="43.75" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;std::vector&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::allocator&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="886.6" y="517" width="0.2" height="15.0" fill="rgb(241,113,49)" rx="2" ry="2" />
<text  x="889.58" y="527.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (4 samples, 0.08%)</title><rect x="282.0" y="405" width="0.9" height="15.0" fill="rgb(224,196,31)" rx="2" ry="2" />
<text  x="284.99" y="415.5" ></text>
</g>
<g >
<title>cql3::selection::selection::from_selectors (1 samples, 0.02%)</title><rect x="83.5" y="469" width="0.2" height="15.0" fill="rgb(206,218,33)" rx="2" ry="2" />
<text  x="86.48" y="479.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (17 samples, 0.33%)</title><rect x="517.8" y="437" width="3.9" height="15.0" fill="rgb(209,145,39)" rx="2" ry="2" />
<text  x="520.81" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="26.5" y="373" width="0.2" height="15.0" fill="rgb(218,72,28)" rx="2" ry="2" />
<text  x="29.51" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="613.5" y="485" width="0.2" height="15.0" fill="rgb(223,7,4)" rx="2" ry="2" />
<text  x="616.45" y="495.5" ></text>
</g>
<g >
<title>mutation::data::data (1 samples, 0.02%)</title><rect x="891.8" y="485" width="0.2" height="15.0" fill="rgb(220,77,48)" rx="2" ry="2" />
<text  x="894.78" y="495.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (8 samples, 0.15%)</title><rect x="931.3" y="549" width="1.9" height="15.0" fill="rgb(212,79,41)" rx="2" ry="2" />
<text  x="934.35" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="792.5" y="517" width="0.9" height="15.0" fill="rgb(224,99,6)" rx="2" ry="2" />
<text  x="795.52" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="41.4" y="389" width="0.3" height="15.0" fill="rgb(239,224,51)" rx="2" ry="2" />
<text  x="44.43" y="399.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (103 samples, 1.97%)</title><rect x="537.3" y="501" width="23.2" height="15.0" fill="rgb(214,155,53)" rx="2" ry="2" />
<text  x="540.26" y="511.5" >m..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="716.3" y="453" width="0.3" height="15.0" fill="rgb(205,89,24)" rx="2" ry="2" />
<text  x="719.33" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="609.2" y="453" width="0.2" height="15.0" fill="rgb(237,190,5)" rx="2" ry="2" />
<text  x="612.16" y="463.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (1 samples, 0.02%)</title><rect x="77.6" y="533" width="0.2" height="15.0" fill="rgb(212,145,18)" rx="2" ry="2" />
<text  x="80.60" y="543.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (2 samples, 0.04%)</title><rect x="573.0" y="485" width="0.4" height="15.0" fill="rgb(223,102,17)" rx="2" ry="2" />
<text  x="575.98" y="495.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="109.7" y="677" width="0.5" height="15.0" fill="rgb(211,185,35)" rx="2" ry="2" />
<text  x="112.71" y="687.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="25.1" y="549" width="0.3" height="15.0" fill="rgb(216,196,8)" rx="2" ry="2" />
<text  x="28.15" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%)</title><rect x="106.8" y="69" width="0.2" height="15.0" fill="rgb(210,198,6)" rx="2" ry="2" />
<text  x="109.77" y="79.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="48.0" y="421" width="0.2" height="15.0" fill="rgb(228,149,40)" rx="2" ry="2" />
<text  x="50.98" y="431.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (11 samples, 0.21%)</title><rect x="241.3" y="245" width="2.5" height="15.0" fill="rgb(218,4,39)" rx="2" ry="2" />
<text  x="244.30" y="255.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::start (1 samples, 0.02%)</title><rect x="20.2" y="421" width="0.2" height="15.0" fill="rgb(205,211,2)" rx="2" ry="2" />
<text  x="23.17" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (25 samples, 0.48%)</title><rect x="767.9" y="517" width="5.6" height="15.0" fill="rgb(224,26,9)" rx="2" ry="2" />
<text  x="770.88" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (15 samples, 0.29%)</title><rect x="629.3" y="597" width="3.4" height="15.0" fill="rgb(218,76,14)" rx="2" ry="2" />
<text  x="632.28" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (1 samples, 0.02%)</title><rect x="1113.8" y="597" width="0.2" height="15.0" fill="rgb(230,136,4)" rx="2" ry="2" />
<text  x="1116.81" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="298.5" y="357" width="0.2" height="15.0" fill="rgb(229,46,14)" rx="2" ry="2" />
<text  x="301.50" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (2 samples, 0.04%)</title><rect x="828.2" y="389" width="0.5" height="15.0" fill="rgb(249,184,15)" rx="2" ry="2" />
<text  x="831.24" y="399.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;fragment_range&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="889.3" y="421" width="0.4" height="15.0" fill="rgb(228,217,33)" rx="2" ry="2" />
<text  x="892.29" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="67.7" y="549" width="0.4" height="15.0" fill="rgb(230,0,27)" rx="2" ry="2" />
<text  x="70.65" y="559.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (1 samples, 0.02%)</title><rect x="82.4" y="677" width="0.2" height="15.0" fill="rgb(241,143,5)" rx="2" ry="2" />
<text  x="85.35" y="687.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (6 samples, 0.11%)</title><rect x="278.8" y="325" width="1.4" height="15.0" fill="rgb(209,110,9)" rx="2" ry="2" />
<text  x="281.83" y="335.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::attributes::raw*, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::tuple (1 samples, 0.02%)</title><rect x="65.4" y="469" width="0.2" height="15.0" fill="rgb(217,198,44)" rx="2" ry="2" />
<text  x="68.39" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (5 samples, 0.10%)</title><rect x="818.1" y="357" width="1.1" height="15.0" fill="rgb(221,196,44)" rx="2" ry="2" />
<text  x="821.07" y="367.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (1 samples, 0.02%)</title><rect x="412.5" y="373" width="0.2" height="15.0" fill="rgb(220,159,22)" rx="2" ry="2" />
<text  x="415.45" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="664.6" y="661" width="0.2" height="15.0" fill="rgb(239,129,17)" rx="2" ry="2" />
<text  x="667.55" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="453.4" y="421" width="0.2" height="15.0" fill="rgb(223,217,11)" rx="2" ry="2" />
<text  x="456.38" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="96.6" y="661" width="0.4" height="15.0" fill="rgb(248,70,45)" rx="2" ry="2" />
<text  x="99.60" y="671.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (3 samples, 0.06%)</title><rect x="549.0" y="405" width="0.7" height="15.0" fill="rgb(224,190,28)" rx="2" ry="2" />
<text  x="552.02" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (1 samples, 0.02%)</title><rect x="371.8" y="373" width="0.2" height="15.0" fill="rgb(221,72,31)" rx="2" ry="2" />
<text  x="374.76" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (2 samples, 0.04%)</title><rect x="604.0" y="485" width="0.4" height="15.0" fill="rgb(227,30,44)" rx="2" ry="2" />
<text  x="606.96" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="286.3" y="421" width="0.2" height="15.0" fill="rgb(208,54,48)" rx="2" ry="2" />
<text  x="289.29" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (1 samples, 0.02%)</title><rect x="1023.1" y="389" width="0.3" height="15.0" fill="rgb(219,180,51)" rx="2" ry="2" />
<text  x="1026.14" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="647.6" y="597" width="0.2" height="15.0" fill="rgb(248,0,54)" rx="2" ry="2" />
<text  x="650.59" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (255 samples, 4.89%)</title><rect x="217.8" y="405" width="57.6" height="15.0" fill="rgb(224,221,13)" rx="2" ry="2" />
<text  x="220.78" y="415.5" >partit..</text>
</g>
<g >
<title>dht::i_partitioner::decorate_key (1 samples, 0.02%)</title><rect x="891.8" y="469" width="0.2" height="15.0" fill="rgb(253,5,2)" rx="2" ry="2" />
<text  x="894.78" y="479.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="870.5" y="517" width="0.3" height="15.0" fill="rgb(211,213,44)" rx="2" ry="2" />
<text  x="873.53" y="527.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (19 samples, 0.36%)</title><rect x="402.7" y="341" width="4.3" height="15.0" fill="rgb(216,78,19)" rx="2" ry="2" />
<text  x="405.73" y="351.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%)</title><rect x="788.9" y="581" width="0.2" height="15.0" fill="rgb(239,48,50)" rx="2" ry="2" />
<text  x="791.90" y="591.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="682.2" y="629" width="0.2" height="15.0" fill="rgb(216,143,20)" rx="2" ry="2" />
<text  x="685.19" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="253.3" y="293" width="0.7" height="15.0" fill="rgb(249,113,52)" rx="2" ry="2" />
<text  x="256.28" y="303.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="740.3" y="485" width="0.2" height="15.0" fill="rgb(253,82,11)" rx="2" ry="2" />
<text  x="743.29" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (25 samples, 0.48%)</title><rect x="886.6" y="581" width="5.6" height="15.0" fill="rgb(230,67,1)" rx="2" ry="2" />
<text  x="889.58" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (1 samples, 0.02%)</title><rect x="477.8" y="533" width="0.2" height="15.0" fill="rgb(208,210,42)" rx="2" ry="2" />
<text  x="480.79" y="543.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;cql3::result_generator::query_result_visitor&lt;cql3::untyped_result_set::visitor&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="671.6" y="597" width="0.2" height="15.0" fill="rgb(254,190,47)" rx="2" ry="2" />
<text  x="674.56" y="607.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="716.1" y="549" width="0.5" height="15.0" fill="rgb(246,27,35)" rx="2" ry="2" />
<text  x="719.10" y="559.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="730.6" y="613" width="0.2" height="15.0" fill="rgb(209,105,38)" rx="2" ry="2" />
<text  x="733.57" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="1114.7" y="597" width="0.5" height="15.0" fill="rgb(246,84,12)" rx="2" ry="2" />
<text  x="1117.71" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="876.6" y="597" width="0.9" height="15.0" fill="rgb(207,155,41)" rx="2" ry="2" />
<text  x="879.63" y="607.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::start (1 samples, 0.02%)</title><rect x="107.7" y="677" width="0.2" height="15.0" fill="rgb(220,159,5)" rx="2" ry="2" />
<text  x="110.67" y="687.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (17 samples, 0.33%)</title><rect x="517.8" y="453" width="3.9" height="15.0" fill="rgb(209,63,38)" rx="2" ry="2" />
<text  x="520.81" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="652.6" y="565" width="0.2" height="15.0" fill="rgb(247,78,25)" rx="2" ry="2" />
<text  x="655.57" y="575.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (3 samples, 0.06%)</title><rect x="106.5" y="517" width="0.7" height="15.0" fill="rgb(206,86,18)" rx="2" ry="2" />
<text  x="109.54" y="527.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (94 samples, 1.80%)</title><rect x="809.3" y="469" width="21.2" height="15.0" fill="rgb(245,53,25)" rx="2" ry="2" />
<text  x="812.25" y="479.5" >s..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="719.0" y="661" width="0.3" height="15.0" fill="rgb(214,150,51)" rx="2" ry="2" />
<text  x="722.04" y="671.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (3 samples, 0.06%)</title><rect x="34.6" y="421" width="0.7" height="15.0" fill="rgb(205,12,13)" rx="2" ry="2" />
<text  x="37.64" y="431.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (6 samples, 0.11%)</title><rect x="13.8" y="757" width="1.4" height="15.0" fill="rgb(249,214,48)" rx="2" ry="2" />
<text  x="16.84" y="767.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (1 samples, 0.02%)</title><rect x="313.4" y="485" width="0.2" height="15.0" fill="rgb(207,137,8)" rx="2" ry="2" />
<text  x="316.42" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (5 samples, 0.10%)</title><rect x="75.1" y="533" width="1.1" height="15.0" fill="rgb(229,228,41)" rx="2" ry="2" />
<text  x="78.12" y="543.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (1 samples, 0.02%)</title><rect x="83.0" y="757" width="0.3" height="15.0" fill="rgb(220,4,16)" rx="2" ry="2" />
<text  x="86.03" y="767.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="541.8" y="469" width="0.2" height="15.0" fill="rgb(214,95,26)" rx="2" ry="2" />
<text  x="544.78" y="479.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%)</title><rect x="291.9" y="389" width="0.3" height="15.0" fill="rgb(214,115,49)" rx="2" ry="2" />
<text  x="294.94" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::list_permissions_statement, std::default_delete&lt;cql3::statements::list_permissions_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="66.8" y="517" width="0.2" height="15.0" fill="rgb(252,169,3)" rx="2" ry="2" />
<text  x="69.75" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="19.7" y="661" width="0.2" height="15.0" fill="rgb(237,93,15)" rx="2" ry="2" />
<text  x="22.72" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="938.1" y="565" width="0.7" height="15.0" fill="rgb(220,223,53)" rx="2" ry="2" />
<text  x="941.13" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="27.9" y="405" width="0.2" height="15.0" fill="rgb(240,76,10)" rx="2" ry="2" />
<text  x="30.86" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (4 samples, 0.08%)</title><rect x="627.2" y="597" width="0.9" height="15.0" fill="rgb(250,64,13)" rx="2" ry="2" />
<text  x="630.24" y="607.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::key (1 samples, 0.02%)</title><rect x="107.2" y="629" width="0.2" height="15.0" fill="rgb(225,175,26)" rx="2" ry="2" />
<text  x="110.22" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (2 samples, 0.04%)</title><rect x="184.8" y="421" width="0.4" height="15.0" fill="rgb(244,9,54)" rx="2" ry="2" />
<text  x="187.77" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="182.1" y="405" width="0.2" height="15.0" fill="rgb(254,182,36)" rx="2" ry="2" />
<text  x="185.06" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="75.6" y="341" width="0.2" height="15.0" fill="rgb(235,127,0)" rx="2" ry="2" />
<text  x="78.57" y="351.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (3 samples, 0.06%)</title><rect x="637.9" y="613" width="0.6" height="15.0" fill="rgb(208,210,2)" rx="2" ry="2" />
<text  x="640.87" y="623.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (10 samples, 0.19%)</title><rect x="362.9" y="357" width="2.3" height="15.0" fill="rgb(228,4,22)" rx="2" ry="2" />
<text  x="365.94" y="367.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="982.7" y="469" width="1.1" height="15.0" fill="rgb(232,11,29)" rx="2" ry="2" />
<text  x="985.67" y="479.5" ></text>
</g>
<g >
<title>operator new (14 samples, 0.27%)</title><rect x="866.2" y="581" width="3.2" height="15.0" fill="rgb(238,93,13)" rx="2" ry="2" />
<text  x="869.23" y="591.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="62.9" y="261" width="0.2" height="15.0" fill="rgb(235,182,6)" rx="2" ry="2" />
<text  x="65.91" y="271.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerSharedStateType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedStateType (2 samples, 0.04%)</title><rect x="24.0" y="533" width="0.5" height="15.0" fill="rgb(245,19,11)" rx="2" ry="2" />
<text  x="27.02" y="543.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (11 samples, 0.21%)</title><rect x="398.4" y="341" width="2.5" height="15.0" fill="rgb(218,67,18)" rx="2" ry="2" />
<text  x="401.43" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="740.5" y="565" width="0.2" height="15.0" fill="rgb(216,64,21)" rx="2" ry="2" />
<text  x="743.52" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="57.3" y="437" width="0.4" height="15.0" fill="rgb(206,206,1)" rx="2" ry="2" />
<text  x="60.25" y="447.5" ></text>
</g>
<g >
<title>fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt;::format&lt;fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="21.3" y="645" width="0.2" height="15.0" fill="rgb(205,41,29)" rx="2" ry="2" />
<text  x="24.30" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="913.9" y="469" width="0.3" height="15.0" fill="rgb(254,166,45)" rx="2" ry="2" />
<text  x="916.94" y="479.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (2 samples, 0.04%)</title><rect x="716.1" y="485" width="0.5" height="15.0" fill="rgb(222,135,38)" rx="2" ry="2" />
<text  x="719.10" y="495.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="138.0" y="565" width="0.2" height="15.0" fill="rgb(250,53,45)" rx="2" ry="2" />
<text  x="140.97" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (62 samples, 1.19%)</title><rect x="25.8" y="533" width="14.0" height="15.0" fill="rgb(240,51,10)" rx="2" ry="2" />
<text  x="28.83" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (8 samples, 0.15%)</title><rect x="1139.6" y="661" width="1.8" height="15.0" fill="rgb(249,19,12)" rx="2" ry="2" />
<text  x="1142.58" y="671.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="86.6" y="757" width="0.3" height="15.0" fill="rgb(242,106,42)" rx="2" ry="2" />
<text  x="89.65" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="1164.9" y="677" width="0.2" height="15.0" fill="rgb(240,18,49)" rx="2" ry="2" />
<text  x="1167.90" y="687.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="67.9" y="517" width="0.2" height="15.0" fill="rgb(227,135,28)" rx="2" ry="2" />
<text  x="70.88" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="42.1" y="421" width="0.2" height="15.0" fill="rgb(252,210,40)" rx="2" ry="2" />
<text  x="45.11" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.61%)</title><rect x="1118.3" y="629" width="7.3" height="15.0" fill="rgb(208,174,10)" rx="2" ry="2" />
<text  x="1121.33" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (16 samples, 0.31%)</title><rect x="1025.2" y="405" width="3.6" height="15.0" fill="rgb(216,90,38)" rx="2" ry="2" />
<text  x="1028.18" y="415.5" ></text>
</g>
<g >
<title>database::find_keyspace (1 samples, 0.02%)</title><rect x="972.3" y="533" width="0.2" height="15.0" fill="rgb(242,202,39)" rx="2" ry="2" />
<text  x="975.27" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (7 samples, 0.13%)</title><rect x="309.6" y="453" width="1.6" height="15.0" fill="rgb(252,214,29)" rx="2" ry="2" />
<text  x="312.58" y="463.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="1159.9" y="645" width="0.5" height="15.0" fill="rgb(246,121,35)" rx="2" ry="2" />
<text  x="1162.93" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="291.7" y="389" width="0.2" height="15.0" fill="rgb(233,93,52)" rx="2" ry="2" />
<text  x="294.72" y="399.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (86 samples, 1.65%)</title><rect x="809.7" y="453" width="19.4" height="15.0" fill="rgb(222,161,24)" rx="2" ry="2" />
<text  x="812.70" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (2 samples, 0.04%)</title><rect x="43.7" y="485" width="0.4" height="15.0" fill="rgb(235,79,28)" rx="2" ry="2" />
<text  x="46.69" y="495.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="269.6" y="277" width="0.2" height="15.0" fill="rgb(218,137,35)" rx="2" ry="2" />
<text  x="272.56" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="223.2" y="309" width="0.5" height="15.0" fill="rgb(217,216,14)" rx="2" ry="2" />
<text  x="226.21" y="319.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (19 samples, 0.36%)</title><rect x="407.0" y="341" width="4.3" height="15.0" fill="rgb(254,161,43)" rx="2" ry="2" />
<text  x="410.03" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (1 samples, 0.02%)</title><rect x="803.1" y="485" width="0.3" height="15.0" fill="rgb(229,68,32)" rx="2" ry="2" />
<text  x="806.15" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_function_statement, std::default_delete&lt;cql3::statements::create_function_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="68.8" y="565" width="0.2" height="15.0" fill="rgb(235,142,13)" rx="2" ry="2" />
<text  x="71.79" y="575.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="87.3" y="693" width="0.3" height="15.0" fill="rgb(244,106,49)" rx="2" ry="2" />
<text  x="90.33" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="835.3" y="517" width="0.4" height="15.0" fill="rgb(241,59,36)" rx="2" ry="2" />
<text  x="838.25" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="682.4" y="645" width="0.2" height="15.0" fill="rgb(251,167,54)" rx="2" ry="2" />
<text  x="685.41" y="655.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="834.3" y="453" width="0.3" height="15.0" fill="rgb(236,174,51)" rx="2" ry="2" />
<text  x="837.35" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="44.8" y="501" width="0.5" height="15.0" fill="rgb(224,66,7)" rx="2" ry="2" />
<text  x="47.82" y="511.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (1 samples, 0.02%)</title><rect x="634.5" y="613" width="0.2" height="15.0" fill="rgb(250,31,27)" rx="2" ry="2" />
<text  x="637.48" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="46.6" y="437" width="0.5" height="15.0" fill="rgb(227,107,16)" rx="2" ry="2" />
<text  x="49.63" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (4 samples, 0.08%)</title><rect x="826.2" y="389" width="0.9" height="15.0" fill="rgb(211,49,19)" rx="2" ry="2" />
<text  x="829.21" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (4 samples, 0.08%)</title><rect x="45.7" y="453" width="0.9" height="15.0" fill="rgb(244,23,17)" rx="2" ry="2" />
<text  x="48.72" y="463.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="661.6" y="645" width="0.2" height="15.0" fill="rgb(208,10,21)" rx="2" ry="2" />
<text  x="664.61" y="655.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::operation::set_value*, false&gt;::_Head_base (1 samples, 0.02%)</title><rect x="60.0" y="405" width="0.2" height="15.0" fill="rgb(212,14,27)" rx="2" ry="2" />
<text  x="62.97" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="576.8" y="405" width="0.3" height="15.0" fill="rgb(221,107,15)" rx="2" ry="2" />
<text  x="579.83" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (3 samples, 0.06%)</title><rect x="614.1" y="517" width="0.7" height="15.0" fill="rgb(236,157,28)" rx="2" ry="2" />
<text  x="617.13" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="994.7" y="421" width="0.2" height="15.0" fill="rgb(229,144,1)" rx="2" ry="2" />
<text  x="997.65" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="298.7" y="357" width="0.3" height="15.0" fill="rgb(213,177,38)" rx="2" ry="2" />
<text  x="301.73" y="367.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (11 samples, 0.21%)</title><rect x="576.1" y="469" width="2.5" height="15.0" fill="rgb(209,160,13)" rx="2" ry="2" />
<text  x="579.15" y="479.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%)</title><rect x="883.2" y="581" width="0.2" height="15.0" fill="rgb(243,211,12)" rx="2" ry="2" />
<text  x="886.19" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (14 samples, 0.27%)</title><rect x="709.3" y="661" width="3.2" height="15.0" fill="rgb(247,3,35)" rx="2" ry="2" />
<text  x="712.32" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (72 samples, 1.38%)</title><rect x="420.4" y="357" width="16.2" height="15.0" fill="rgb(228,228,7)" rx="2" ry="2" />
<text  x="423.37" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="103.2" y="645" width="0.2" height="15.0" fill="rgb(243,73,51)" rx="2" ry="2" />
<text  x="106.15" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::single_column_restrictions&gt;::~shared_ptr_count_for (2 samples, 0.04%)</title><rect x="672.9" y="597" width="0.5" height="15.0" fill="rgb(209,9,47)" rx="2" ry="2" />
<text  x="675.92" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="192.9" y="453" width="0.5" height="15.0" fill="rgb(225,192,52)" rx="2" ry="2" />
<text  x="195.91" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="466.0" y="517" width="0.3" height="15.0" fill="rgb(254,172,51)" rx="2" ry="2" />
<text  x="469.04" y="527.5" ></text>
</g>
<g >
<title>query::result::result (1 samples, 0.02%)</title><rect x="645.6" y="597" width="0.2" height="15.0" fill="rgb(215,56,4)" rx="2" ry="2" />
<text  x="648.56" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mIDENT (1 samples, 0.02%)</title><rect x="35.5" y="437" width="0.3" height="15.0" fill="rgb(251,189,11)" rx="2" ry="2" />
<text  x="38.55" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="468.1" y="549" width="0.2" height="15.0" fill="rgb(242,30,40)" rx="2" ry="2" />
<text  x="471.07" y="559.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (2 samples, 0.04%)</title><rect x="1099.1" y="581" width="0.5" height="15.0" fill="rgb(243,145,50)" rx="2" ry="2" />
<text  x="1102.11" y="591.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="61.1" y="437" width="0.2" height="15.0" fill="rgb(250,4,33)" rx="2" ry="2" />
<text  x="64.10" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="1034.2" y="453" width="0.5" height="15.0" fill="rgb(240,26,45)" rx="2" ry="2" />
<text  x="1037.22" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="695.1" y="645" width="0.2" height="15.0" fill="rgb(209,96,41)" rx="2" ry="2" />
<text  x="698.07" y="655.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (45 samples, 0.86%)</title><rect x="1013.9" y="405" width="10.1" height="15.0" fill="rgb(236,223,40)" rx="2" ry="2" />
<text  x="1016.87" y="415.5" ></text>
</g>
<g >
<title>operator delete (10 samples, 0.19%)</title><rect x="331.7" y="469" width="2.3" height="15.0" fill="rgb(222,210,51)" rx="2" ry="2" />
<text  x="334.74" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="45.0" y="373" width="0.3" height="15.0" fill="rgb(229,117,10)" rx="2" ry="2" />
<text  x="48.05" y="383.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="107.7" y="597" width="0.2" height="15.0" fill="rgb(221,201,10)" rx="2" ry="2" />
<text  x="110.67" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1034.7" y="453" width="0.2" height="15.0" fill="rgb(228,99,19)" rx="2" ry="2" />
<text  x="1037.67" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Parser (3 samples, 0.06%)</title><rect x="23.8" y="581" width="0.7" height="15.0" fill="rgb(240,25,18)" rx="2" ry="2" />
<text  x="26.79" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (28 samples, 0.54%)</title><rect x="885.9" y="629" width="6.3" height="15.0" fill="rgb(220,171,41)" rx="2" ry="2" />
<text  x="888.90" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="41.4" y="501" width="0.3" height="15.0" fill="rgb(207,1,16)" rx="2" ry="2" />
<text  x="44.43" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="779.0" y="581" width="0.2" height="15.0" fill="rgb(246,45,15)" rx="2" ry="2" />
<text  x="781.96" y="591.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="62.9" y="485" width="0.2" height="15.0" fill="rgb(214,141,5)" rx="2" ry="2" />
<text  x="65.91" y="495.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.04%)</title><rect x="902.2" y="597" width="0.4" height="15.0" fill="rgb(216,154,38)" rx="2" ry="2" />
<text  x="905.18" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="63.6" y="453" width="0.4" height="15.0" fill="rgb(231,71,41)" rx="2" ry="2" />
<text  x="66.58" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="464.9" y="501" width="1.1" height="15.0" fill="rgb(241,120,16)" rx="2" ry="2" />
<text  x="467.91" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (1 samples, 0.02%)</title><rect x="88.7" y="693" width="0.2" height="15.0" fill="rgb(249,90,8)" rx="2" ry="2" />
<text  x="91.68" y="703.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (60 samples, 1.15%)</title><rect x="1143.0" y="661" width="13.5" height="15.0" fill="rgb(234,169,4)" rx="2" ry="2" />
<text  x="1145.97" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="64.5" y="485" width="0.2" height="15.0" fill="rgb(252,86,40)" rx="2" ry="2" />
<text  x="67.49" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="825.5" y="437" width="0.5" height="15.0" fill="rgb(253,80,24)" rx="2" ry="2" />
<text  x="828.53" y="447.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%)</title><rect x="1119.5" y="389" width="0.2" height="15.0" fill="rgb(224,196,9)" rx="2" ry="2" />
<text  x="1122.46" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1060.4" y="485" width="0.5" height="15.0" fill="rgb(239,172,42)" rx="2" ry="2" />
<text  x="1063.45" y="495.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (5 samples, 0.10%)</title><rect x="820.6" y="293" width="1.1" height="15.0" fill="rgb(224,107,35)" rx="2" ry="2" />
<text  x="823.56" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="674.0" y="533" width="0.5" height="15.0" fill="rgb(207,16,17)" rx="2" ry="2" />
<text  x="677.05" y="543.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="45.0" y="325" width="0.3" height="15.0" fill="rgb(245,175,6)" rx="2" ry="2" />
<text  x="48.05" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="740.5" y="405" width="0.2" height="15.0" fill="rgb(233,141,5)" rx="2" ry="2" />
<text  x="743.52" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; (2 samples, 0.04%)</title><rect x="72.4" y="565" width="0.5" height="15.0" fill="rgb(206,4,53)" rx="2" ry="2" />
<text  x="75.40" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%)</title><rect x="1011.6" y="405" width="2.3" height="15.0" fill="rgb(231,122,47)" rx="2" ry="2" />
<text  x="1014.61" y="415.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%)</title><rect x="80.8" y="485" width="0.9" height="15.0" fill="rgb(209,171,3)" rx="2" ry="2" />
<text  x="83.77" y="495.5" ></text>
</g>
<g >
<title>distributed_loader::init_system_keyspace (1 samples, 0.02%)</title><rect x="19.7" y="725" width="0.2" height="15.0" fill="rgb(245,108,54)" rx="2" ry="2" />
<text  x="22.72" y="735.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="44.4" y="485" width="0.4" height="15.0" fill="rgb(220,213,15)" rx="2" ry="2" />
<text  x="47.37" y="495.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="402.5" y="341" width="0.2" height="15.0" fill="rgb(239,204,0)" rx="2" ry="2" />
<text  x="405.50" y="351.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (3 samples, 0.06%)</title><rect x="126.9" y="581" width="0.7" height="15.0" fill="rgb(214,83,23)" rx="2" ry="2" />
<text  x="129.89" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (11 samples, 0.21%)</title><rect x="819.4" y="341" width="2.5" height="15.0" fill="rgb(224,174,34)" rx="2" ry="2" />
<text  x="822.43" y="351.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (12 samples, 0.23%)</title><rect x="331.3" y="485" width="2.7" height="15.0" fill="rgb(245,215,7)" rx="2" ry="2" />
<text  x="334.28" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (1 samples, 0.02%)</title><rect x="857.6" y="613" width="0.3" height="15.0" fill="rgb(241,52,2)" rx="2" ry="2" />
<text  x="860.64" y="623.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (2 samples, 0.04%)</title><rect x="1131.7" y="357" width="0.4" height="15.0" fill="rgb(208,113,10)" rx="2" ry="2" />
<text  x="1134.67" y="367.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="891.8" y="453" width="0.2" height="15.0" fill="rgb(205,209,22)" rx="2" ry="2" />
<text  x="894.78" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%)</title><rect x="55.2" y="469" width="0.2" height="15.0" fill="rgb(245,89,41)" rx="2" ry="2" />
<text  x="58.22" y="479.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (2 samples, 0.04%)</title><rect x="538.6" y="485" width="0.5" height="15.0" fill="rgb(228,154,26)" rx="2" ry="2" />
<text  x="541.61" y="495.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="727.0" y="645" width="0.2" height="15.0" fill="rgb(221,206,43)" rx="2" ry="2" />
<text  x="729.95" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::single_column_restriction&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="673.1" y="533" width="0.3" height="15.0" fill="rgb(251,104,10)" rx="2" ry="2" />
<text  x="676.14" y="543.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (1 samples, 0.02%)</title><rect x="884.8" y="581" width="0.2" height="15.0" fill="rgb(247,190,7)" rx="2" ry="2" />
<text  x="887.77" y="591.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%)</title><rect x="673.1" y="469" width="0.3" height="15.0" fill="rgb(226,89,16)" rx="2" ry="2" />
<text  x="676.14" y="479.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (4 samples, 0.08%)</title><rect x="1167.4" y="645" width="0.9" height="15.0" fill="rgb(222,222,3)" rx="2" ry="2" />
<text  x="1170.39" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (2 samples, 0.04%)</title><rect x="640.4" y="613" width="0.4" height="15.0" fill="rgb(208,143,54)" rx="2" ry="2" />
<text  x="643.36" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="811.5" y="405" width="0.2" height="15.0" fill="rgb(254,130,24)" rx="2" ry="2" />
<text  x="814.51" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="828.2" y="405" width="0.7" height="15.0" fill="rgb(243,199,31)" rx="2" ry="2" />
<text  x="831.24" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%)</title><rect x="904.2" y="597" width="0.2" height="15.0" fill="rgb(251,148,23)" rx="2" ry="2" />
<text  x="907.21" y="607.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (16 samples, 0.31%)</title><rect x="719.9" y="645" width="3.7" height="15.0" fill="rgb(219,49,23)" rx="2" ry="2" />
<text  x="722.94" y="655.5" ></text>
</g>
<g >
<title>sstables::delete_atomically (1 samples, 0.02%)</title><rect x="86.6" y="789" width="0.3" height="15.0" fill="rgb(218,160,12)" rx="2" ry="2" />
<text  x="89.65" y="799.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="503.3" y="437" width="0.5" height="15.0" fill="rgb(216,19,6)" rx="2" ry="2" />
<text  x="506.34" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (16 samples, 0.31%)</title><rect x="987.0" y="501" width="3.6" height="15.0" fill="rgb(238,84,17)" rx="2" ry="2" />
<text  x="989.96" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="737.8" y="661" width="0.2" height="15.0" fill="rgb(208,89,49)" rx="2" ry="2" />
<text  x="740.81" y="671.5" ></text>
</g>
<g >
<title>std::optional&lt;seastar::promise&lt;void&gt; &gt;::operator=&lt;seastar::promise&lt;void&gt; &gt; (1 samples, 0.02%)</title><rect x="661.6" y="661" width="0.2" height="15.0" fill="rgb(234,146,35)" rx="2" ry="2" />
<text  x="664.61" y="671.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="22.7" y="661" width="0.2" height="15.0" fill="rgb(244,42,19)" rx="2" ry="2" />
<text  x="25.66" y="671.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::update_parameters::make_cell (3 samples, 0.06%)</title><rect x="889.3" y="453" width="0.7" height="15.0" fill="rgb(213,82,0)" rx="2" ry="2" />
<text  x="892.29" y="463.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="61.8" y="357" width="0.2" height="15.0" fill="rgb(230,17,41)" rx="2" ry="2" />
<text  x="64.78" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (22 samples, 0.42%)</title><rect x="316.6" y="517" width="5.0" height="15.0" fill="rgb(248,92,13)" rx="2" ry="2" />
<text  x="319.59" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (2 samples, 0.04%)</title><rect x="753.9" y="501" width="0.4" height="15.0" fill="rgb(244,167,22)" rx="2" ry="2" />
<text  x="756.86" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (4 samples, 0.08%)</title><rect x="658.7" y="645" width="0.9" height="15.0" fill="rgb(205,16,18)" rx="2" ry="2" />
<text  x="661.67" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="463.1" y="549" width="0.5" height="15.0" fill="rgb(212,43,54)" rx="2" ry="2" />
<text  x="466.10" y="559.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (13 samples, 0.25%)</title><rect x="1128.0" y="357" width="3.0" height="15.0" fill="rgb(247,69,0)" rx="2" ry="2" />
<text  x="1131.05" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (20 samples, 0.38%)</title><rect x="301.4" y="437" width="4.6" height="15.0" fill="rgb(242,100,41)" rx="2" ry="2" />
<text  x="304.44" y="447.5" ></text>
</g>
<g >
<title>atomic_cell::atomic_cell (1 samples, 0.02%)</title><rect x="1119.7" y="405" width="0.2" height="15.0" fill="rgb(226,167,22)" rx="2" ry="2" />
<text  x="1122.68" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;cql3::expr::expression, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="65.2" y="485" width="0.2" height="15.0" fill="rgb(232,217,52)" rx="2" ry="2" />
<text  x="68.17" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (3 samples, 0.06%)</title><rect x="62.7" y="501" width="0.7" height="15.0" fill="rgb(234,153,18)" rx="2" ry="2" />
<text  x="65.68" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%)</title><rect x="719.5" y="645" width="0.2" height="15.0" fill="rgb(248,217,52)" rx="2" ry="2" />
<text  x="722.49" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::untyped_constant_test_assignment (1 samples, 0.02%)</title><rect x="73.5" y="485" width="0.3" height="15.0" fill="rgb(227,191,54)" rx="2" ry="2" />
<text  x="76.53" y="495.5" ></text>
</g>
<g >
<title>hashing_partition_visitor&lt;hasher&gt;::accept_row_cell (1 samples, 0.02%)</title><rect x="106.1" y="581" width="0.2" height="15.0" fill="rgb(249,171,51)" rx="2" ry="2" />
<text  x="109.09" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (28 samples, 0.54%)</title><rect x="885.9" y="613" width="6.3" height="15.0" fill="rgb(222,138,23)" rx="2" ry="2" />
<text  x="888.90" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (8 samples, 0.15%)</title><rect x="707.3" y="661" width="1.8" height="15.0" fill="rgb(238,45,51)" rx="2" ry="2" />
<text  x="710.28" y="671.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (26 samples, 0.50%)</title><rect x="1063.6" y="453" width="5.9" height="15.0" fill="rgb(229,64,1)" rx="2" ry="2" />
<text  x="1066.61" y="463.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="48.2" y="453" width="0.5" height="15.0" fill="rgb(249,183,28)" rx="2" ry="2" />
<text  x="51.21" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (3 samples, 0.06%)</title><rect x="1085.8" y="533" width="0.6" height="15.0" fill="rgb(234,215,47)" rx="2" ry="2" />
<text  x="1088.77" y="543.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (25 samples, 0.48%)</title><rect x="325.6" y="485" width="5.7" height="15.0" fill="rgb(217,91,40)" rx="2" ry="2" />
<text  x="328.63" y="495.5" ></text>
</g>
<g >
<title>dirty_memory_manager::account_potentially_cleaned_up_memory (1 samples, 0.02%)</title><rect x="83.9" y="613" width="0.3" height="15.0" fill="rgb(212,41,35)" rx="2" ry="2" />
<text  x="86.93" y="623.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="148.4" y="613" width="0.6" height="15.0" fill="rgb(206,53,17)" rx="2" ry="2" />
<text  x="151.37" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (10 samples, 0.19%)</title><rect x="692.6" y="661" width="2.2" height="15.0" fill="rgb(250,134,29)" rx="2" ry="2" />
<text  x="695.59" y="671.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (3 samples, 0.06%)</title><rect x="85.1" y="565" width="0.6" height="15.0" fill="rgb(222,118,39)" rx="2" ry="2" />
<text  x="88.06" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="82.1" y="565" width="0.3" height="15.0" fill="rgb(237,205,32)" rx="2" ry="2" />
<text  x="85.12" y="575.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="701.9" y="613" width="0.4" height="15.0" fill="rgb(225,65,2)" rx="2" ry="2" />
<text  x="704.86" y="623.5" ></text>
</g>
<g >
<title>frozen_mutation::unfreeze (1 samples, 0.02%)</title><rect x="107.2" y="661" width="0.2" height="15.0" fill="rgb(234,88,20)" rx="2" ry="2" />
<text  x="110.22" y="671.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="206.7" y="357" width="1.1" height="15.0" fill="rgb(247,169,25)" rx="2" ry="2" />
<text  x="209.70" y="367.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="107.2" y="533" width="0.2" height="15.0" fill="rgb(240,197,16)" rx="2" ry="2" />
<text  x="110.22" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="612.3" y="469" width="0.5" height="15.0" fill="rgb(232,222,29)" rx="2" ry="2" />
<text  x="615.32" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="885.2" y="501" width="0.2" height="15.0" fill="rgb(231,68,50)" rx="2" ry="2" />
<text  x="888.22" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%)</title><rect x="762.7" y="549" width="0.2" height="15.0" fill="rgb(225,136,46)" rx="2" ry="2" />
<text  x="765.68" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="975.0" y="501" width="0.2" height="15.0" fill="rgb(213,199,10)" rx="2" ry="2" />
<text  x="977.98" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_allocate_node (1 samples, 0.02%)</title><rect x="27.6" y="421" width="0.3" height="15.0" fill="rgb(242,143,15)" rx="2" ry="2" />
<text  x="30.64" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (7 samples, 0.13%)</title><rect x="248.8" y="293" width="1.5" height="15.0" fill="rgb(252,146,3)" rx="2" ry="2" />
<text  x="251.76" y="303.5" ></text>
</g>
<g >
<title>mutation_partition::apply_monotonically (1 samples, 0.02%)</title><rect x="1122.2" y="405" width="0.2" height="15.0" fill="rgb(226,73,31)" rx="2" ry="2" />
<text  x="1125.17" y="415.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="122.1" y="597" width="0.3" height="15.0" fill="rgb(206,68,50)" rx="2" ry="2" />
<text  x="125.14" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="851.8" y="597" width="0.2" height="15.0" fill="rgb(223,174,3)" rx="2" ry="2" />
<text  x="854.76" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="64.7" y="421" width="0.2" height="15.0" fill="rgb(231,136,28)" rx="2" ry="2" />
<text  x="67.72" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="53.6" y="293" width="0.3" height="15.0" fill="rgb(244,9,48)" rx="2" ry="2" />
<text  x="56.64" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (6 samples, 0.11%)</title><rect x="544.5" y="437" width="1.3" height="15.0" fill="rgb(237,127,5)" rx="2" ry="2" />
<text  x="547.49" y="447.5" ></text>
</g>
<g >
<title>row_cache::update (1 samples, 0.02%)</title><rect x="740.3" y="613" width="0.2" height="15.0" fill="rgb(220,149,39)" rx="2" ry="2" />
<text  x="743.29" y="623.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1 samples, 0.02%)</title><rect x="663.6" y="677" width="0.3" height="15.0" fill="rgb(231,191,22)" rx="2" ry="2" />
<text  x="666.65" y="687.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="935.4" y="517" width="0.2" height="15.0" fill="rgb(226,176,21)" rx="2" ry="2" />
<text  x="938.41" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (32 samples, 0.61%)</title><rect x="907.8" y="517" width="7.3" height="15.0" fill="rgb(254,192,39)" rx="2" ry="2" />
<text  x="910.83" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="41.2" y="325" width="0.2" height="15.0" fill="rgb(213,218,14)" rx="2" ry="2" />
<text  x="44.20" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (21 samples, 0.40%)</title><rect x="1127.8" y="405" width="4.8" height="15.0" fill="rgb(207,202,29)" rx="2" ry="2" />
<text  x="1130.82" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation::data&gt;::operator (2 samples, 0.04%)</title><rect x="1132.8" y="485" width="0.4" height="15.0" fill="rgb(240,205,30)" rx="2" ry="2" />
<text  x="1135.80" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="503.1" y="437" width="0.2" height="15.0" fill="rgb(237,12,50)" rx="2" ry="2" />
<text  x="506.12" y="447.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="949.0" y="565" width="0.2" height="15.0" fill="rgb(209,187,41)" rx="2" ry="2" />
<text  x="951.98" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="46.6" y="389" width="0.5" height="15.0" fill="rgb(212,10,19)" rx="2" ry="2" />
<text  x="49.63" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="1119.2" y="421" width="0.3" height="15.0" fill="rgb(242,30,30)" rx="2" ry="2" />
<text  x="1122.23" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="311.6" y="453" width="0.2" height="15.0" fill="rgb(210,83,38)" rx="2" ry="2" />
<text  x="314.61" y="463.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="912.4" y="469" width="1.1" height="15.0" fill="rgb(246,182,18)" rx="2" ry="2" />
<text  x="915.35" y="479.5" ></text>
</g>
<g >
<title>init_cpu_features.constprop.0 (1 samples, 0.02%)</title><rect x="83.3" y="789" width="0.2" height="15.0" fill="rgb(213,43,48)" rx="2" ry="2" />
<text  x="86.26" y="799.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="891.3" y="453" width="0.5" height="15.0" fill="rgb(218,57,12)" rx="2" ry="2" />
<text  x="894.33" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.02%)</title><rect x="30.8" y="373" width="0.2" height="15.0" fill="rgb(210,16,54)" rx="2" ry="2" />
<text  x="33.80" y="383.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1121.5" y="389" width="0.2" height="15.0" fill="rgb(240,72,36)" rx="2" ry="2" />
<text  x="1124.49" y="399.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="35.5" y="421" width="0.3" height="15.0" fill="rgb(206,75,12)" rx="2" ry="2" />
<text  x="38.55" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (5 samples, 0.10%)</title><rect x="26.5" y="389" width="1.1" height="15.0" fill="rgb(212,171,34)" rx="2" ry="2" />
<text  x="29.51" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="75.6" y="389" width="0.2" height="15.0" fill="rgb(239,68,40)" rx="2" ry="2" />
<text  x="78.57" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr (1 samples, 0.02%)</title><rect x="53.6" y="309" width="0.3" height="15.0" fill="rgb(219,86,16)" rx="2" ry="2" />
<text  x="56.64" y="319.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (11 samples, 0.21%)</title><rect x="669.1" y="677" width="2.5" height="15.0" fill="rgb(207,142,10)" rx="2" ry="2" />
<text  x="672.07" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (14 samples, 0.27%)</title><rect x="866.2" y="565" width="3.2" height="15.0" fill="rgb(237,226,54)" rx="2" ry="2" />
<text  x="869.23" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (12 samples, 0.23%)</title><rect x="149.7" y="597" width="2.7" height="15.0" fill="rgb(241,92,36)" rx="2" ry="2" />
<text  x="152.73" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="134.1" y="629" width="0.3" height="15.0" fill="rgb(228,183,33)" rx="2" ry="2" />
<text  x="137.13" y="639.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (36 samples, 0.69%)</title><rect x="1171.5" y="805" width="8.1" height="15.0" fill="rgb(245,75,35)" rx="2" ry="2" />
<text  x="1174.46" y="815.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerType (2 samples, 0.04%)</title><rect x="24.0" y="565" width="0.5" height="15.0" fill="rgb(250,62,31)" rx="2" ry="2" />
<text  x="27.02" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (2 samples, 0.04%)</title><rect x="269.1" y="325" width="0.5" height="15.0" fill="rgb(245,144,32)" rx="2" ry="2" />
<text  x="272.11" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="889.7" y="421" width="0.3" height="15.0" fill="rgb(240,97,31)" rx="2" ry="2" />
<text  x="892.74" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (1 samples, 0.02%)</title><rect x="891.8" y="533" width="0.2" height="15.0" fill="rgb(239,185,46)" rx="2" ry="2" />
<text  x="894.78" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (4 samples, 0.08%)</title><rect x="733.3" y="613" width="0.9" height="15.0" fill="rgb(237,83,5)" rx="2" ry="2" />
<text  x="736.28" y="623.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="504.2" y="469" width="0.7" height="15.0" fill="rgb(221,146,33)" rx="2" ry="2" />
<text  x="507.25" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="747.3" y="565" width="0.5" height="15.0" fill="rgb(214,12,39)" rx="2" ry="2" />
<text  x="750.30" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="42.1" y="501" width="0.2" height="15.0" fill="rgb(234,178,40)" rx="2" ry="2" />
<text  x="45.11" y="511.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="879.3" y="613" width="0.5" height="15.0" fill="rgb(212,2,46)" rx="2" ry="2" />
<text  x="882.34" y="623.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (3 samples, 0.06%)</title><rect x="606.9" y="469" width="0.7" height="15.0" fill="rgb(207,124,37)" rx="2" ry="2" />
<text  x="609.90" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.11%)</title><rect x="643.5" y="613" width="1.4" height="15.0" fill="rgb(227,94,25)" rx="2" ry="2" />
<text  x="646.52" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="81.4" y="437" width="0.3" height="15.0" fill="rgb(236,193,51)" rx="2" ry="2" />
<text  x="84.45" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="858.8" y="613" width="0.4" height="15.0" fill="rgb(227,47,21)" rx="2" ry="2" />
<text  x="861.77" y="623.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (1 samples, 0.02%)</title><rect x="106.8" y="453" width="0.2" height="15.0" fill="rgb(250,201,2)" rx="2" ry="2" />
<text  x="109.77" y="463.5" ></text>
</g>
<g >
<title>data_value::data_value (1 samples, 0.02%)</title><rect x="20.2" y="325" width="0.2" height="15.0" fill="rgb(212,170,42)" rx="2" ry="2" />
<text  x="23.17" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (1 samples, 0.02%)</title><rect x="903.5" y="597" width="0.3" height="15.0" fill="rgb(219,219,51)" rx="2" ry="2" />
<text  x="906.54" y="607.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_cql (2 samples, 0.04%)</title><rect x="694.8" y="677" width="0.5" height="15.0" fill="rgb(243,172,13)" rx="2" ry="2" />
<text  x="697.85" y="687.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (12 samples, 0.23%)</title><rect x="83.9" y="741" width="2.7" height="15.0" fill="rgb(246,152,40)" rx="2" ry="2" />
<text  x="86.93" y="751.5" ></text>
</g>
<g >
<title>service::migration_manager::announce_new_keyspace (1 samples, 0.02%)</title><rect x="20.2" y="389" width="0.2" height="15.0" fill="rgb(220,186,52)" rx="2" ry="2" />
<text  x="23.17" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="891.8" y="389" width="0.2" height="15.0" fill="rgb(234,201,45)" rx="2" ry="2" />
<text  x="894.78" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_view_update_backlog (1 samples, 0.02%)</title><rect x="738.9" y="661" width="0.3" height="15.0" fill="rgb(238,83,41)" rx="2" ry="2" />
<text  x="741.94" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (2 samples, 0.04%)</title><rect x="287.4" y="405" width="0.5" height="15.0" fill="rgb(239,213,49)" rx="2" ry="2" />
<text  x="290.42" y="415.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%)</title><rect x="754.5" y="485" width="0.3" height="15.0" fill="rgb(208,120,34)" rx="2" ry="2" />
<text  x="757.54" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="1022.5" y="373" width="0.4" height="15.0" fill="rgb(215,227,44)" rx="2" ry="2" />
<text  x="1025.46" y="383.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="705.2" y="661" width="0.3" height="15.0" fill="rgb(238,183,31)" rx="2" ry="2" />
<text  x="708.25" y="671.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (1 samples, 0.02%)</title><rect x="355.7" y="373" width="0.2" height="15.0" fill="rgb(236,134,50)" rx="2" ry="2" />
<text  x="358.70" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::operator bool (1 samples, 0.02%)</title><rect x="61.3" y="501" width="0.3" height="15.0" fill="rgb(227,209,42)" rx="2" ry="2" />
<text  x="64.32" y="511.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (1 samples, 0.02%)</title><rect x="1022.0" y="325" width="0.2" height="15.0" fill="rgb(239,133,37)" rx="2" ry="2" />
<text  x="1025.01" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (1 samples, 0.02%)</title><rect x="832.8" y="485" width="0.2" height="15.0" fill="rgb(234,6,49)" rx="2" ry="2" />
<text  x="835.77" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="41.2" y="405" width="0.2" height="15.0" fill="rgb(251,94,45)" rx="2" ry="2" />
<text  x="44.20" y="415.5" ></text>
</g>
<g >
<title>set_field&lt;long&gt; (1 samples, 0.02%)</title><rect x="108.8" y="437" width="0.2" height="15.0" fill="rgb(229,57,54)" rx="2" ry="2" />
<text  x="111.80" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="56.8" y="453" width="0.5" height="15.0" fill="rgb(240,138,38)" rx="2" ry="2" />
<text  x="59.80" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="73.8" y="485" width="0.2" height="15.0" fill="rgb(208,61,35)" rx="2" ry="2" />
<text  x="76.76" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="42.1" y="437" width="0.2" height="15.0" fill="rgb(211,78,49)" rx="2" ry="2" />
<text  x="45.11" y="447.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (5 samples, 0.10%)</title><rect x="16.6" y="757" width="1.1" height="15.0" fill="rgb(208,128,50)" rx="2" ry="2" />
<text  x="19.56" y="767.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="769.0" y="453" width="0.2" height="15.0" fill="rgb(229,155,0)" rx="2" ry="2" />
<text  x="772.01" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="64.7" y="309" width="0.2" height="15.0" fill="rgb(237,150,11)" rx="2" ry="2" />
<text  x="67.72" y="319.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (27 samples, 0.52%)</title><rect x="819.2" y="389" width="6.1" height="15.0" fill="rgb(254,137,22)" rx="2" ry="2" />
<text  x="822.20" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="762.9" y="565" width="0.2" height="15.0" fill="rgb(222,98,3)" rx="2" ry="2" />
<text  x="765.90" y="575.5" ></text>
</g>
<g >
<title>[unknown] (13 samples, 0.25%)</title><rect x="10.9" y="789" width="2.9" height="15.0" fill="rgb(211,223,43)" rx="2" ry="2" />
<text  x="13.90" y="799.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (3 samples, 0.06%)</title><rect x="811.1" y="437" width="0.6" height="15.0" fill="rgb(232,182,28)" rx="2" ry="2" />
<text  x="814.06" y="447.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (3 samples, 0.06%)</title><rect x="146.1" y="613" width="0.7" height="15.0" fill="rgb(221,213,1)" rx="2" ry="2" />
<text  x="149.11" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (16 samples, 0.31%)</title><rect x="975.2" y="501" width="3.6" height="15.0" fill="rgb(236,14,23)" rx="2" ry="2" />
<text  x="978.21" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (3 samples, 0.06%)</title><rect x="53.4" y="421" width="0.7" height="15.0" fill="rgb(239,202,53)" rx="2" ry="2" />
<text  x="56.41" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="50.9" y="485" width="0.2" height="15.0" fill="rgb(253,163,39)" rx="2" ry="2" />
<text  x="53.92" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="73.3" y="501" width="0.2" height="15.0" fill="rgb(216,83,42)" rx="2" ry="2" />
<text  x="76.31" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1080.8" y="517" width="0.2" height="15.0" fill="rgb(226,209,36)" rx="2" ry="2" />
<text  x="1083.80" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="48.0" y="341" width="0.2" height="15.0" fill="rgb(252,83,54)" rx="2" ry="2" />
<text  x="50.98" y="351.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="107.7" y="421" width="0.2" height="15.0" fill="rgb(241,64,40)" rx="2" ry="2" />
<text  x="110.67" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="111.7" y="661" width="0.3" height="15.0" fill="rgb(215,143,36)" rx="2" ry="2" />
<text  x="114.74" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (7 samples, 0.13%)</title><rect x="672.9" y="661" width="1.6" height="15.0" fill="rgb(220,221,13)" rx="2" ry="2" />
<text  x="675.92" y="671.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%)</title><rect x="849.0" y="485" width="0.3" height="15.0" fill="rgb(211,157,34)" rx="2" ry="2" />
<text  x="852.05" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; (1 samples, 0.02%)</title><rect x="61.1" y="453" width="0.2" height="15.0" fill="rgb(210,170,18)" rx="2" ry="2" />
<text  x="64.10" y="463.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (6 samples, 0.11%)</title><rect x="837.1" y="485" width="1.3" height="15.0" fill="rgb(251,185,51)" rx="2" ry="2" />
<text  x="840.06" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (2 samples, 0.04%)</title><rect x="942.9" y="581" width="0.4" height="15.0" fill="rgb(252,220,33)" rx="2" ry="2" />
<text  x="945.88" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="41.7" y="485" width="0.2" height="15.0" fill="rgb(228,76,50)" rx="2" ry="2" />
<text  x="44.65" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="984.7" y="501" width="0.2" height="15.0" fill="rgb(251,69,0)" rx="2" ry="2" />
<text  x="987.70" y="511.5" ></text>
</g>
<g >
<title>auth::resource::resource (9 samples, 0.17%)</title><rect x="794.1" y="565" width="2.0" height="15.0" fill="rgb(238,4,49)" rx="2" ry="2" />
<text  x="797.10" y="575.5" ></text>
</g>
<g >
<title>row::apply_monotonically (3 samples, 0.06%)</title><rect x="890.6" y="469" width="0.7" height="15.0" fill="rgb(213,154,0)" rx="2" ry="2" />
<text  x="893.65" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="1166.7" y="645" width="0.2" height="15.0" fill="rgb(228,3,53)" rx="2" ry="2" />
<text  x="1169.71" y="655.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (1 samples, 0.02%)</title><rect x="1165.6" y="597" width="0.2" height="15.0" fill="rgb(217,181,28)" rx="2" ry="2" />
<text  x="1168.58" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="46.6" y="421" width="0.5" height="15.0" fill="rgb(223,61,21)" rx="2" ry="2" />
<text  x="49.63" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="64.5" y="469" width="0.2" height="15.0" fill="rgb(210,166,11)" rx="2" ry="2" />
<text  x="67.49" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (10 samples, 0.19%)</title><rect x="609.4" y="469" width="2.2" height="15.0" fill="rgb(230,112,2)" rx="2" ry="2" />
<text  x="612.38" y="479.5" ></text>
</g>
<g >
<title>seastar::aio_storage_context::reap_completions (2 samples, 0.04%)</title><rect x="1166.9" y="661" width="0.5" height="15.0" fill="rgb(230,42,38)" rx="2" ry="2" />
<text  x="1169.94" y="671.5" ></text>
</g>
<g >
<title>locator::token_metadata::is_any_node_being_replaced (1 samples, 0.02%)</title><rect x="1132.1" y="373" width="0.2" height="15.0" fill="rgb(212,220,11)" rx="2" ry="2" />
<text  x="1135.12" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (4 samples, 0.08%)</title><rect x="713.4" y="645" width="0.9" height="15.0" fill="rgb(233,206,10)" rx="2" ry="2" />
<text  x="716.39" y="655.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="621.8" y="517" width="1.1" height="15.0" fill="rgb(212,175,8)" rx="2" ry="2" />
<text  x="624.82" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="674.3" y="501" width="0.2" height="15.0" fill="rgb(214,38,54)" rx="2" ry="2" />
<text  x="677.27" y="511.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="616.8" y="533" width="0.3" height="15.0" fill="rgb(239,83,13)" rx="2" ry="2" />
<text  x="619.84" y="543.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (7 samples, 0.13%)</title><rect x="880.7" y="645" width="1.6" height="15.0" fill="rgb(221,7,0)" rx="2" ry="2" />
<text  x="883.70" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (1 samples, 0.02%)</title><rect x="883.0" y="565" width="0.2" height="15.0" fill="rgb(244,57,1)" rx="2" ry="2" />
<text  x="885.96" y="575.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="740.3" y="501" width="0.2" height="15.0" fill="rgb(250,168,23)" rx="2" ry="2" />
<text  x="743.29" y="511.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (91 samples, 1.74%)</title><rect x="173.9" y="485" width="20.6" height="15.0" fill="rgb(208,103,37)" rx="2" ry="2" />
<text  x="176.92" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (13 samples, 0.25%)</title><rect x="427.4" y="325" width="2.9" height="15.0" fill="rgb(208,107,17)" rx="2" ry="2" />
<text  x="430.37" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (314 samples, 6.02%)</title><rect x="213.3" y="421" width="71.0" height="15.0" fill="rgb(238,24,48)" rx="2" ry="2" />
<text  x="216.26" y="431.5" >partitio..</text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="597.6" y="597" width="0.3" height="15.0" fill="rgb(241,47,22)" rx="2" ry="2" />
<text  x="600.63" y="607.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.25%)</title><rect x="963.7" y="549" width="2.9" height="15.0" fill="rgb(212,122,4)" rx="2" ry="2" />
<text  x="966.68" y="559.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (5 samples, 0.10%)</title><rect x="1126.2" y="421" width="1.2" height="15.0" fill="rgb(220,145,52)" rx="2" ry="2" />
<text  x="1129.24" y="431.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (7 samples, 0.13%)</title><rect x="764.0" y="517" width="1.6" height="15.0" fill="rgb(212,54,24)" rx="2" ry="2" />
<text  x="767.03" y="527.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (206 samples, 3.95%)</title><rect x="23.3" y="629" width="46.6" height="15.0" fill="rgb(210,191,9)" rx="2" ry="2" />
<text  x="26.34" y="639.5" >cql3..</text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (1 samples, 0.02%)</title><rect x="1127.1" y="373" width="0.3" height="15.0" fill="rgb(222,138,6)" rx="2" ry="2" />
<text  x="1130.15" y="383.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (7 samples, 0.13%)</title><rect x="80.3" y="629" width="1.6" height="15.0" fill="rgb(231,117,50)" rx="2" ry="2" />
<text  x="83.32" y="639.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (2 samples, 0.04%)</title><rect x="377.9" y="357" width="0.4" height="15.0" fill="rgb(220,196,1)" rx="2" ry="2" />
<text  x="380.86" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%)</title><rect x="49.1" y="469" width="0.5" height="15.0" fill="rgb(234,104,31)" rx="2" ry="2" />
<text  x="52.11" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (62 samples, 1.19%)</title><rect x="25.8" y="517" width="14.0" height="15.0" fill="rgb(218,40,11)" rx="2" ry="2" />
<text  x="28.83" y="527.5" ></text>
</g>
<g >
<title>std::apply&lt;row_cache::do_update (1 samples, 0.02%)</title><rect x="740.3" y="581" width="0.2" height="15.0" fill="rgb(212,55,1)" rx="2" ry="2" />
<text  x="743.29" y="591.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (13 samples, 0.25%)</title><rect x="921.4" y="549" width="2.9" height="15.0" fill="rgb(232,155,40)" rx="2" ry="2" />
<text  x="924.40" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%)</title><rect x="133.0" y="629" width="0.2" height="15.0" fill="rgb(231,57,15)" rx="2" ry="2" />
<text  x="136.00" y="639.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (4 samples, 0.08%)</title><rect x="80.8" y="517" width="0.9" height="15.0" fill="rgb(215,49,6)" rx="2" ry="2" />
<text  x="83.77" y="527.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="682.6" y="629" width="0.7" height="15.0" fill="rgb(236,47,14)" rx="2" ry="2" />
<text  x="685.64" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%)</title><rect x="457.2" y="453" width="0.2" height="15.0" fill="rgb(224,187,38)" rx="2" ry="2" />
<text  x="460.22" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_tokText (1 samples, 0.02%)</title><rect x="30.8" y="421" width="0.2" height="15.0" fill="rgb(210,98,46)" rx="2" ry="2" />
<text  x="33.80" y="431.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (3 samples, 0.06%)</title><rect x="84.2" y="629" width="0.6" height="15.0" fill="rgb(232,216,7)" rx="2" ry="2" />
<text  x="87.16" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="45.5" y="437" width="0.2" height="15.0" fill="rgb(238,152,17)" rx="2" ry="2" />
<text  x="48.50" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="101.6" y="629" width="0.6" height="15.0" fill="rgb(242,147,37)" rx="2" ry="2" />
<text  x="104.57" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="24.9" y="501" width="0.2" height="15.0" fill="rgb(216,200,13)" rx="2" ry="2" />
<text  x="27.92" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (7 samples, 0.13%)</title><rect x="768.3" y="485" width="1.6" height="15.0" fill="rgb(223,56,25)" rx="2" ry="2" />
<text  x="771.33" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1101.6" y="581" width="0.2" height="15.0" fill="rgb(249,211,47)" rx="2" ry="2" />
<text  x="1104.60" y="591.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;db::system_distributed_keyspace&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="20.2" y="597" width="0.2" height="15.0" fill="rgb(249,225,24)" rx="2" ry="2" />
<text  x="23.17" y="607.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;partition_key&gt; (1 samples, 0.02%)</title><rect x="1130.5" y="309" width="0.3" height="15.0" fill="rgb(215,168,43)" rx="2" ry="2" />
<text  x="1133.54" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="697.6" y="645" width="0.2" height="15.0" fill="rgb(219,23,22)" rx="2" ry="2" />
<text  x="700.56" y="655.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="41.2" y="469" width="0.2" height="15.0" fill="rgb(232,143,49)" rx="2" ry="2" />
<text  x="44.20" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (250 samples, 4.79%)</title><rect x="218.0" y="389" width="56.5" height="15.0" fill="rgb(246,153,46)" rx="2" ry="2" />
<text  x="221.01" y="399.5" >logal..</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::setTokenStream (1 samples, 0.02%)</title><rect x="23.8" y="565" width="0.2" height="15.0" fill="rgb(228,189,19)" rx="2" ry="2" />
<text  x="26.79" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="583.4" y="565" width="0.9" height="15.0" fill="rgb(240,154,37)" rx="2" ry="2" />
<text  x="586.38" y="575.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (539 samples, 10.33%)</title><rect x="750.2" y="629" width="121.9" height="15.0" fill="rgb(223,88,38)" rx="2" ry="2" />
<text  x="753.24" y="639.5" >single_node_cql..</text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="198.8" y="405" width="0.2" height="15.0" fill="rgb(209,39,46)" rx="2" ry="2" />
<text  x="201.79" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="367.9" y="357" width="0.2" height="15.0" fill="rgb(219,212,11)" rx="2" ry="2" />
<text  x="370.91" y="367.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (1 samples, 0.02%)</title><rect x="271.6" y="341" width="0.2" height="15.0" fill="rgb(235,23,48)" rx="2" ry="2" />
<text  x="274.59" y="351.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;cql3::statements::raw::modification_statement&gt;, true&gt;::_Head_base (1 samples, 0.02%)</title><rect x="67.2" y="469" width="0.2" height="15.0" fill="rgb(218,103,14)" rx="2" ry="2" />
<text  x="70.20" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="83.5" y="597" width="0.2" height="15.0" fill="rgb(237,47,16)" rx="2" ry="2" />
<text  x="86.48" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (1 samples, 0.02%)</title><rect x="413.8" y="373" width="0.2" height="15.0" fill="rgb(210,185,28)" rx="2" ry="2" />
<text  x="416.81" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="1165.6" y="565" width="0.2" height="15.0" fill="rgb(243,156,16)" rx="2" ry="2" />
<text  x="1168.58" y="575.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="730.3" y="629" width="0.5" height="15.0" fill="rgb(212,122,49)" rx="2" ry="2" />
<text  x="733.34" y="639.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (1 samples, 0.02%)</title><rect x="750.0" y="629" width="0.2" height="15.0" fill="rgb(219,156,27)" rx="2" ry="2" />
<text  x="753.02" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="828.9" y="421" width="0.2" height="15.0" fill="rgb(215,58,52)" rx="2" ry="2" />
<text  x="831.92" y="431.5" ></text>
</g>
<g >
<title>compound_type&lt; (4 samples, 0.08%)</title><rect x="588.4" y="533" width="0.9" height="15.0" fill="rgb(211,81,44)" rx="2" ry="2" />
<text  x="591.36" y="543.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (6 samples, 0.11%)</title><rect x="73.3" y="549" width="1.4" height="15.0" fill="rgb(205,145,48)" rx="2" ry="2" />
<text  x="76.31" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%)</title><rect x="725.1" y="645" width="0.3" height="15.0" fill="rgb(207,4,20)" rx="2" ry="2" />
<text  x="728.14" y="655.5" ></text>
</g>
<g >
<title>database::find_uuid (2 samples, 0.04%)</title><rect x="79.6" y="597" width="0.5" height="15.0" fill="rgb(220,225,41)" rx="2" ry="2" />
<text  x="82.64" y="607.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="858.1" y="613" width="0.2" height="15.0" fill="rgb(240,203,21)" rx="2" ry="2" />
<text  x="861.09" y="623.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (13 samples, 0.25%)</title><rect x="1110.9" y="597" width="2.9" height="15.0" fill="rgb(236,202,54)" rx="2" ry="2" />
<text  x="1113.87" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="73.8" y="453" width="0.2" height="15.0" fill="rgb(247,162,53)" rx="2" ry="2" />
<text  x="76.76" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; (2 samples, 0.04%)</title><rect x="72.4" y="581" width="0.5" height="15.0" fill="rgb(251,176,41)" rx="2" ry="2" />
<text  x="75.40" y="591.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (2 samples, 0.04%)</title><rect x="1123.8" y="437" width="0.4" height="15.0" fill="rgb(223,60,34)" rx="2" ry="2" />
<text  x="1126.75" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1081.0" y="533" width="0.5" height="15.0" fill="rgb(248,8,32)" rx="2" ry="2" />
<text  x="1084.02" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (567 samples, 10.86%)</title><rect x="958.3" y="581" width="128.1" height="15.0" fill="rgb(226,195,47)" rx="2" ry="2" />
<text  x="961.25" y="591.5" >service::storage..</text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (6 samples, 0.11%)</title><rect x="571.2" y="469" width="1.3" height="15.0" fill="rgb(218,151,22)" rx="2" ry="2" />
<text  x="574.17" y="479.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%)</title><rect x="251.5" y="277" width="0.2" height="15.0" fill="rgb(223,104,46)" rx="2" ry="2" />
<text  x="254.47" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="190.0" y="437" width="0.2" height="15.0" fill="rgb(248,188,30)" rx="2" ry="2" />
<text  x="192.97" y="447.5" ></text>
</g>
<g >
<title>__start_context (284 samples, 5.44%)</title><rect x="18.4" y="789" width="64.2" height="15.0" fill="rgb(224,48,29)" rx="2" ry="2" />
<text  x="21.37" y="799.5" >__start..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="59.3" y="485" width="0.2" height="15.0" fill="rgb(241,18,13)" rx="2" ry="2" />
<text  x="62.29" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="138.0" y="549" width="0.2" height="15.0" fill="rgb(245,25,14)" rx="2" ry="2" />
<text  x="140.97" y="559.5" ></text>
</g>
<g >
<title>sstring_hash::operator (3 samples, 0.06%)</title><rect x="849.5" y="485" width="0.7" height="15.0" fill="rgb(210,217,34)" rx="2" ry="2" />
<text  x="852.50" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="802.0" y="453" width="0.2" height="15.0" fill="rgb(234,144,39)" rx="2" ry="2" />
<text  x="805.02" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="1010.7" y="373" width="0.7" height="15.0" fill="rgb(220,225,6)" rx="2" ry="2" />
<text  x="1013.71" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (1 samples, 0.02%)</title><rect x="64.7" y="469" width="0.2" height="15.0" fill="rgb(210,139,29)" rx="2" ry="2" />
<text  x="67.72" y="479.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="669.1" y="661" width="0.4" height="15.0" fill="rgb(232,190,50)" rx="2" ry="2" />
<text  x="672.07" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="63.4" y="405" width="0.2" height="15.0" fill="rgb(232,95,22)" rx="2" ry="2" />
<text  x="66.36" y="415.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="79.4" y="597" width="0.2" height="15.0" fill="rgb(216,73,28)" rx="2" ry="2" />
<text  x="82.41" y="607.5" ></text>
</g>
<g >
<title>TLS init function for simple_date_type (1 samples, 0.02%)</title><rect x="20.2" y="309" width="0.2" height="15.0" fill="rgb(210,20,13)" rx="2" ry="2" />
<text  x="23.17" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (15 samples, 0.29%)</title><rect x="701.0" y="645" width="3.3" height="15.0" fill="rgb(206,86,54)" rx="2" ry="2" />
<text  x="703.95" y="655.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="31.0" y="405" width="0.3" height="15.0" fill="rgb(212,139,1)" rx="2" ry="2" />
<text  x="34.03" y="415.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (2 samples, 0.04%)</title><rect x="175.1" y="453" width="0.4" height="15.0" fill="rgb(252,141,4)" rx="2" ry="2" />
<text  x="178.05" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (63 samples, 1.21%)</title><rect x="234.5" y="277" width="14.3" height="15.0" fill="rgb(209,151,29)" rx="2" ry="2" />
<text  x="237.51" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="930.7" y="565" width="0.2" height="15.0" fill="rgb(235,117,26)" rx="2" ry="2" />
<text  x="933.67" y="575.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (6 samples, 0.11%)</title><rect x="753.0" y="517" width="1.3" height="15.0" fill="rgb(253,40,36)" rx="2" ry="2" />
<text  x="755.95" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt;, void&gt; (2 samples, 0.04%)</title><rect x="60.6" y="485" width="0.5" height="15.0" fill="rgb(237,127,7)" rx="2" ry="2" />
<text  x="63.65" y="495.5" ></text>
</g>
<g >
<title>std::forward&lt;cql3::operation::raw_update*&gt; (1 samples, 0.02%)</title><rect x="53.6" y="245" width="0.3" height="15.0" fill="rgb(250,219,53)" rx="2" ry="2" />
<text  x="56.64" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="63.4" y="293" width="0.2" height="15.0" fill="rgb(236,207,9)" rx="2" ry="2" />
<text  x="66.36" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (65 samples, 1.25%)</title><rect x="1061.8" y="517" width="14.7" height="15.0" fill="rgb(220,59,2)" rx="2" ry="2" />
<text  x="1064.80" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1036.7" y="453" width="0.2" height="15.0" fill="rgb(248,74,13)" rx="2" ry="2" />
<text  x="1039.71" y="463.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="832.1" y="485" width="0.7" height="15.0" fill="rgb(232,14,23)" rx="2" ry="2" />
<text  x="835.09" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="469.9" y="565" width="0.4" height="15.0" fill="rgb(207,116,53)" rx="2" ry="2" />
<text  x="472.88" y="575.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (3 samples, 0.06%)</title><rect x="824.6" y="293" width="0.7" height="15.0" fill="rgb(233,49,36)" rx="2" ry="2" />
<text  x="827.63" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="913.0" y="437" width="0.5" height="15.0" fill="rgb(231,40,3)" rx="2" ry="2" />
<text  x="916.03" y="447.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="433.3" y="341" width="1.1" height="15.0" fill="rgb(233,69,39)" rx="2" ry="2" />
<text  x="436.25" y="351.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (3 samples, 0.06%)</title><rect x="560.8" y="501" width="0.7" height="15.0" fill="rgb(244,187,3)" rx="2" ry="2" />
<text  x="563.77" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;database&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1036.0" y="453" width="0.3" height="15.0" fill="rgb(207,208,34)" rx="2" ry="2" />
<text  x="1039.03" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="61.8" y="389" width="0.2" height="15.0" fill="rgb(221,36,5)" rx="2" ry="2" />
<text  x="64.78" y="399.5" ></text>
</g>
<g >
<title>validation::validate_column_family (3 samples, 0.06%)</title><rect x="79.4" y="629" width="0.7" height="15.0" fill="rgb(208,92,9)" rx="2" ry="2" />
<text  x="82.41" y="639.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.61%)</title><rect x="1118.3" y="613" width="7.3" height="15.0" fill="rgb(217,142,2)" rx="2" ry="2" />
<text  x="1121.33" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="916.9" y="501" width="0.2" height="15.0" fill="rgb(212,83,43)" rx="2" ry="2" />
<text  x="919.87" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="662.5" y="645" width="0.2" height="15.0" fill="rgb(216,84,20)" rx="2" ry="2" />
<text  x="665.52" y="655.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="122.4" y="613" width="0.2" height="15.0" fill="rgb(224,52,54)" rx="2" ry="2" />
<text  x="125.37" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;, std::allocator&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="69.5" y="597" width="0.2" height="15.0" fill="rgb(229,189,6)" rx="2" ry="2" />
<text  x="72.46" y="607.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="64.7" y="293" width="0.2" height="15.0" fill="rgb(232,142,23)" rx="2" ry="2" />
<text  x="67.72" y="303.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;sstables::sstable_directory&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="740.5" y="517" width="0.2" height="15.0" fill="rgb(222,154,32)" rx="2" ry="2" />
<text  x="743.52" y="527.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::signal (2 samples, 0.04%)</title><rect x="739.2" y="629" width="0.4" height="15.0" fill="rgb(226,46,53)" rx="2" ry="2" />
<text  x="742.16" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (3 samples, 0.06%)</title><rect x="833.0" y="469" width="0.7" height="15.0" fill="rgb(250,26,14)" rx="2" ry="2" />
<text  x="835.99" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="726.0" y="645" width="0.3" height="15.0" fill="rgb(207,222,46)" rx="2" ry="2" />
<text  x="729.05" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%)</title><rect x="322.0" y="517" width="0.2" height="15.0" fill="rgb(228,211,10)" rx="2" ry="2" />
<text  x="325.01" y="527.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (12 samples, 0.23%)</title><rect x="754.8" y="485" width="2.7" height="15.0" fill="rgb(254,75,49)" rx="2" ry="2" />
<text  x="757.76" y="495.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1015.9" y="357" width="0.2" height="15.0" fill="rgb(232,117,9)" rx="2" ry="2" />
<text  x="1018.91" y="367.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%)</title><rect x="20.4" y="597" width="0.2" height="15.0" fill="rgb(235,113,11)" rx="2" ry="2" />
<text  x="23.40" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_table_statement, std::default_delete&lt;cql3::statements::drop_table_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_table_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="66.5" y="549" width="0.3" height="15.0" fill="rgb(208,97,54)" rx="2" ry="2" />
<text  x="69.52" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (2 samples, 0.04%)</title><rect x="279.7" y="309" width="0.5" height="15.0" fill="rgb(214,126,15)" rx="2" ry="2" />
<text  x="282.73" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (28 samples, 0.54%)</title><rect x="885.9" y="645" width="6.3" height="15.0" fill="rgb(250,184,34)" rx="2" ry="2" />
<text  x="888.90" y="655.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="889.5" y="389" width="0.2" height="15.0" fill="rgb(252,221,22)" rx="2" ry="2" />
<text  x="892.52" y="399.5" ></text>
</g>
<g >
<title>ser::writer_of_mutation&lt;bytes_ostream&gt;::writer_of_mutation (1 samples, 0.02%)</title><rect x="1130.8" y="341" width="0.2" height="15.0" fill="rgb(217,83,29)" rx="2" ry="2" />
<text  x="1133.76" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (4 samples, 0.08%)</title><rect x="191.3" y="437" width="0.9" height="15.0" fill="rgb(220,132,29)" rx="2" ry="2" />
<text  x="194.33" y="447.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="43.9" y="437" width="0.2" height="15.0" fill="rgb(249,108,49)" rx="2" ry="2" />
<text  x="46.91" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="46.4" y="309" width="0.2" height="15.0" fill="rgb(254,207,30)" rx="2" ry="2" />
<text  x="49.40" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="858.5" y="613" width="0.3" height="15.0" fill="rgb(251,152,51)" rx="2" ry="2" />
<text  x="861.54" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (523 samples, 10.02%)</title><rect x="344.2" y="533" width="118.2" height="15.0" fill="rgb(227,51,40)" rx="2" ry="2" />
<text  x="347.17" y="543.5" >flat_mutation_..</text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%)</title><rect x="19.0" y="709" width="0.3" height="15.0" fill="rgb(209,154,41)" rx="2" ry="2" />
<text  x="22.04" y="719.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="82.1" y="581" width="0.3" height="15.0" fill="rgb(241,50,25)" rx="2" ry="2" />
<text  x="85.12" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="802.0" y="469" width="0.2" height="15.0" fill="rgb(244,64,14)" rx="2" ry="2" />
<text  x="805.02" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (3 samples, 0.06%)</title><rect x="966.8" y="549" width="0.7" height="15.0" fill="rgb(207,77,7)" rx="2" ry="2" />
<text  x="969.84" y="559.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::statements::raw::update_statement*, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="67.4" y="517" width="0.3" height="15.0" fill="rgb(233,143,19)" rx="2" ry="2" />
<text  x="70.43" y="527.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (2 samples, 0.04%)</title><rect x="933.2" y="565" width="0.4" height="15.0" fill="rgb(224,51,16)" rx="2" ry="2" />
<text  x="936.15" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="61.8" y="485" width="0.4" height="15.0" fill="rgb(230,195,11)" rx="2" ry="2" />
<text  x="64.78" y="495.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="107.4" y="613" width="0.3" height="15.0" fill="rgb(247,180,15)" rx="2" ry="2" />
<text  x="110.45" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%)</title><rect x="938.8" y="581" width="0.7" height="15.0" fill="rgb(237,199,8)" rx="2" ry="2" />
<text  x="941.81" y="591.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;db::system_distributed_keyspace&gt;::invoke_on_all&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="20.2" y="613" width="0.2" height="15.0" fill="rgb(216,106,10)" rx="2" ry="2" />
<text  x="23.17" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="53.9" y="357" width="0.2" height="15.0" fill="rgb(218,86,52)" rx="2" ry="2" />
<text  x="56.86" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relationType (3 samples, 0.06%)</title><rect x="63.4" y="501" width="0.6" height="15.0" fill="rgb(226,33,35)" rx="2" ry="2" />
<text  x="66.36" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="1147.7" y="549" width="0.9" height="15.0" fill="rgb(228,67,22)" rx="2" ry="2" />
<text  x="1150.72" y="559.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%)</title><rect x="824.2" y="293" width="0.2" height="15.0" fill="rgb(233,53,16)" rx="2" ry="2" />
<text  x="827.18" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (35 samples, 0.67%)</title><rect x="1091.2" y="581" width="7.9" height="15.0" fill="rgb(213,54,44)" rx="2" ry="2" />
<text  x="1094.20" y="591.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="205.3" y="373" width="0.3" height="15.0" fill="rgb(229,103,38)" rx="2" ry="2" />
<text  x="208.35" y="383.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (571 samples, 10.94%)</title><rect x="748.9" y="645" width="129.1" height="15.0" fill="rgb(212,91,10)" rx="2" ry="2" />
<text  x="751.88" y="655.5" >single_node_cql_..</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (3 samples, 0.06%)</title><rect x="368.1" y="357" width="0.7" height="15.0" fill="rgb(211,41,27)" rx="2" ry="2" />
<text  x="371.14" y="367.5" ></text>
</g>
<g >
<title>cql3::result_generator::query_result_visitor&lt;cql3::untyped_result_set::visitor&gt;::accept_new_row (1 samples, 0.02%)</title><rect x="671.6" y="565" width="0.2" height="15.0" fill="rgb(205,180,28)" rx="2" ry="2" />
<text  x="674.56" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%)</title><rect x="46.6" y="453" width="0.5" height="15.0" fill="rgb(212,66,43)" rx="2" ry="2" />
<text  x="49.63" y="463.5" ></text>
</g>
<g >
<title>schema::position (1 samples, 0.02%)</title><rect x="941.7" y="581" width="0.3" height="15.0" fill="rgb(207,140,25)" rx="2" ry="2" />
<text  x="944.75" y="591.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="552.6" y="341" width="0.5" height="15.0" fill="rgb(247,72,48)" rx="2" ry="2" />
<text  x="555.63" y="351.5" ></text>
</g>
<g >
<title>validation::validate_cql_key (2 samples, 0.04%)</title><rect x="888.2" y="549" width="0.4" height="15.0" fill="rgb(251,95,16)" rx="2" ry="2" />
<text  x="891.16" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (1 samples, 0.02%)</title><rect x="992.8" y="469" width="0.3" height="15.0" fill="rgb(244,27,47)" rx="2" ry="2" />
<text  x="995.84" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="645.8" y="613" width="0.2" height="15.0" fill="rgb(212,110,44)" rx="2" ry="2" />
<text  x="648.78" y="623.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (1 samples, 0.02%)</title><rect x="84.8" y="597" width="0.3" height="15.0" fill="rgb(234,207,8)" rx="2" ry="2" />
<text  x="87.84" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="83.5" y="693" width="0.2" height="15.0" fill="rgb(205,156,33)" rx="2" ry="2" />
<text  x="86.48" y="703.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (17 samples, 0.33%)</title><rect x="55.4" y="469" width="3.9" height="15.0" fill="rgb(236,48,16)" rx="2" ry="2" />
<text  x="58.45" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (6 samples, 0.11%)</title><rect x="915.7" y="517" width="1.4" height="15.0" fill="rgb(220,92,24)" rx="2" ry="2" />
<text  x="918.74" y="527.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="59.5" y="469" width="0.2" height="15.0" fill="rgb(219,157,4)" rx="2" ry="2" />
<text  x="62.52" y="479.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (25 samples, 0.48%)</title><rect x="872.3" y="629" width="5.7" height="15.0" fill="rgb(218,82,17)" rx="2" ry="2" />
<text  x="875.33" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="664.8" y="661" width="0.2" height="15.0" fill="rgb(252,191,4)" rx="2" ry="2" />
<text  x="667.78" y="671.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::CqlLexer (1 samples, 0.02%)</title><rect x="69.7" y="613" width="0.2" height="15.0" fill="rgb(214,81,12)" rx="2" ry="2" />
<text  x="72.69" y="623.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (409 samples, 7.84%)</title><rect x="352.5" y="437" width="92.5" height="15.0" fill="rgb(225,150,44)" rx="2" ry="2" />
<text  x="355.54" y="447.5" >mutation_fr..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="841.1" y="501" width="0.3" height="15.0" fill="rgb(240,5,25)" rx="2" ry="2" />
<text  x="844.13" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (3 samples, 0.06%)</title><rect x="367.2" y="357" width="0.7" height="15.0" fill="rgb(229,211,38)" rx="2" ry="2" />
<text  x="370.23" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="12.3" y="725" width="0.2" height="15.0" fill="rgb(245,22,4)" rx="2" ry="2" />
<text  x="15.26" y="735.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1060.2" y="469" width="0.2" height="15.0" fill="rgb(226,194,32)" rx="2" ry="2" />
<text  x="1063.22" y="479.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="740.5" y="613" width="0.2" height="15.0" fill="rgb(210,208,6)" rx="2" ry="2" />
<text  x="743.52" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (8 samples, 0.15%)</title><rect x="130.3" y="549" width="1.8" height="15.0" fill="rgb(213,72,3)" rx="2" ry="2" />
<text  x="133.28" y="559.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (252 samples, 4.83%)</title><rect x="23.3" y="661" width="57.0" height="15.0" fill="rgb(228,103,53)" rx="2" ry="2" />
<text  x="26.34" y="671.5" >cql3::..</text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="578.6" y="469" width="0.5" height="15.0" fill="rgb(205,55,46)" rx="2" ry="2" />
<text  x="581.63" y="479.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="874.8" y="533" width="0.7" height="15.0" fill="rgb(246,221,14)" rx="2" ry="2" />
<text  x="877.82" y="543.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="685.6" y="661" width="0.7" height="15.0" fill="rgb(219,61,27)" rx="2" ry="2" />
<text  x="688.58" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="932.9" y="517" width="0.3" height="15.0" fill="rgb(209,61,34)" rx="2" ry="2" />
<text  x="935.93" y="527.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (5 samples, 0.10%)</title><rect x="1027.7" y="389" width="1.1" height="15.0" fill="rgb(232,178,46)" rx="2" ry="2" />
<text  x="1030.66" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (39 samples, 0.75%)</title><rect x="717.5" y="677" width="8.8" height="15.0" fill="rgb(241,79,2)" rx="2" ry="2" />
<text  x="720.46" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="807.0" y="437" width="1.1" height="15.0" fill="rgb(241,169,33)" rx="2" ry="2" />
<text  x="809.99" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%)</title><rect x="709.1" y="661" width="0.2" height="15.0" fill="rgb(225,43,25)" rx="2" ry="2" />
<text  x="712.09" y="671.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%)</title><rect x="73.3" y="485" width="0.2" height="15.0" fill="rgb(214,214,15)" rx="2" ry="2" />
<text  x="76.31" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="61.8" y="437" width="0.2" height="15.0" fill="rgb(207,7,25)" rx="2" ry="2" />
<text  x="64.78" y="447.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="48.2" y="325" width="0.5" height="15.0" fill="rgb(250,171,50)" rx="2" ry="2" />
<text  x="51.21" y="335.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="327.0" y="469" width="0.2" height="15.0" fill="rgb(250,16,20)" rx="2" ry="2" />
<text  x="329.99" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%)</title><rect x="849.5" y="469" width="0.5" height="15.0" fill="rgb(215,129,3)" rx="2" ry="2" />
<text  x="852.50" y="479.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (4 samples, 0.08%)</title><rect x="845.4" y="485" width="0.9" height="15.0" fill="rgb(249,22,21)" rx="2" ry="2" />
<text  x="848.43" y="495.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="925.0" y="549" width="0.5" height="15.0" fill="rgb(224,222,31)" rx="2" ry="2" />
<text  x="928.01" y="559.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="617.3" y="517" width="0.7" height="15.0" fill="rgb(244,2,53)" rx="2" ry="2" />
<text  x="620.30" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%)</title><rect x="450.9" y="341" width="0.7" height="15.0" fill="rgb(232,6,43)" rx="2" ry="2" />
<text  x="453.89" y="351.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (3 samples, 0.06%)</title><rect x="41.2" y="517" width="0.7" height="15.0" fill="rgb(211,189,35)" rx="2" ry="2" />
<text  x="44.20" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;mutation_partition::accept (1 samples, 0.02%)</title><rect x="106.1" y="597" width="0.2" height="15.0" fill="rgb(220,193,21)" rx="2" ry="2" />
<text  x="109.09" y="607.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (6 samples, 0.11%)</title><rect x="807.0" y="469" width="1.3" height="15.0" fill="rgb(241,147,40)" rx="2" ry="2" />
<text  x="809.99" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="24.9" y="485" width="0.2" height="15.0" fill="rgb(231,145,20)" rx="2" ry="2" />
<text  x="27.92" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="46.6" y="325" width="0.3" height="15.0" fill="rgb(233,24,30)" rx="2" ry="2" />
<text  x="49.63" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (6 samples, 0.11%)</title><rect x="48.2" y="501" width="1.4" height="15.0" fill="rgb(226,177,16)" rx="2" ry="2" />
<text  x="51.21" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="59.5" y="453" width="0.2" height="15.0" fill="rgb(245,54,30)" rx="2" ry="2" />
<text  x="62.52" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="887.5" y="533" width="0.2" height="15.0" fill="rgb(216,189,22)" rx="2" ry="2" />
<text  x="890.48" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="41.2" y="373" width="0.2" height="15.0" fill="rgb(237,123,0)" rx="2" ry="2" />
<text  x="44.20" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (17 samples, 0.33%)</title><rect x="834.6" y="533" width="3.8" height="15.0" fill="rgb(235,122,39)" rx="2" ry="2" />
<text  x="837.58" y="543.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="887.3" y="485" width="0.2" height="15.0" fill="rgb(243,87,20)" rx="2" ry="2" />
<text  x="890.26" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="87.1" y="693" width="0.2" height="15.0" fill="rgb(210,49,31)" rx="2" ry="2" />
<text  x="90.10" y="703.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="24.9" y="549" width="0.2" height="15.0" fill="rgb(224,183,8)" rx="2" ry="2" />
<text  x="27.92" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="673.1" y="485" width="0.3" height="15.0" fill="rgb(213,26,28)" rx="2" ry="2" />
<text  x="676.14" y="495.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1119.5" y="373" width="0.2" height="15.0" fill="rgb(212,13,52)" rx="2" ry="2" />
<text  x="1122.46" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (43 samples, 0.82%)</title><rect x="675.9" y="661" width="9.7" height="15.0" fill="rgb(209,164,12)" rx="2" ry="2" />
<text  x="678.86" y="671.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (420 samples, 8.05%)</title><rect x="758.8" y="613" width="95.0" height="15.0" fill="rgb(248,44,3)" rx="2" ry="2" />
<text  x="761.83" y="623.5" >cql3::query..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (7 samples, 0.13%)</title><rect x="26.5" y="453" width="1.6" height="15.0" fill="rgb(214,113,33)" rx="2" ry="2" />
<text  x="29.51" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair (1 samples, 0.02%)</title><rect x="53.6" y="325" width="0.3" height="15.0" fill="rgb(237,57,36)" rx="2" ry="2" />
<text  x="56.64" y="335.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (3 samples, 0.06%)</title><rect x="494.1" y="453" width="0.7" height="15.0" fill="rgb(225,39,3)" rx="2" ry="2" />
<text  x="497.07" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (4 samples, 0.08%)</title><rect x="106.3" y="629" width="0.9" height="15.0" fill="rgb(210,19,1)" rx="2" ry="2" />
<text  x="109.32" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.08%)</title><rect x="45.7" y="469" width="0.9" height="15.0" fill="rgb(238,175,46)" rx="2" ry="2" />
<text  x="48.72" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="97.0" y="661" width="0.3" height="15.0" fill="rgb(220,84,22)" rx="2" ry="2" />
<text  x="100.05" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (60 samples, 1.15%)</title><rect x="25.8" y="501" width="13.6" height="15.0" fill="rgb(239,82,8)" rx="2" ry="2" />
<text  x="28.83" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="811.5" y="389" width="0.2" height="15.0" fill="rgb(217,216,6)" rx="2" ry="2" />
<text  x="814.51" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (6 samples, 0.11%)</title><rect x="724.9" y="661" width="1.4" height="15.0" fill="rgb(210,187,6)" rx="2" ry="2" />
<text  x="727.92" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%)</title><rect x="967.7" y="549" width="0.5" height="15.0" fill="rgb(241,190,31)" rx="2" ry="2" />
<text  x="970.75" y="559.5" ></text>
</g>
<g >
<title>operator new (14 samples, 0.27%)</title><rect x="1002.8" y="453" width="3.2" height="15.0" fill="rgb(236,15,6)" rx="2" ry="2" />
<text  x="1005.79" y="463.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7f2ecf1aa25180816b4ab3815982d6ce313b38a7] (1 samples, 0.02%)</title><rect x="1159.7" y="645" width="0.2" height="15.0" fill="rgb(233,17,40)" rx="2" ry="2" />
<text  x="1162.70" y="655.5" ></text>
</g>
<g >
<title>row::~row (2 samples, 0.04%)</title><rect x="306.0" y="437" width="0.4" height="15.0" fill="rgb(250,148,33)" rx="2" ry="2" />
<text  x="308.96" y="447.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="107.2" y="581" width="0.2" height="15.0" fill="rgb(246,71,7)" rx="2" ry="2" />
<text  x="110.22" y="591.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;db::consistency_level&amp;&gt; (1 samples, 0.02%)</title><rect x="1127.4" y="485" width="0.2" height="15.0" fill="rgb(246,39,46)" rx="2" ry="2" />
<text  x="1130.37" y="495.5" ></text>
</g>
<g >
<title>canonical_mutation::to_mutation (2 samples, 0.04%)</title><rect x="108.8" y="533" width="0.5" height="15.0" fill="rgb(231,57,9)" rx="2" ry="2" />
<text  x="111.80" y="543.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (2 samples, 0.04%)</title><rect x="917.6" y="549" width="0.4" height="15.0" fill="rgb(230,189,36)" rx="2" ry="2" />
<text  x="920.55" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (1 samples, 0.02%)</title><rect x="1018.6" y="325" width="0.2" height="15.0" fill="rgb(246,24,33)" rx="2" ry="2" />
<text  x="1021.62" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="846.3" y="517" width="0.3" height="15.0" fill="rgb(242,20,18)" rx="2" ry="2" />
<text  x="849.33" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.15%)</title><rect x="827.1" y="437" width="1.8" height="15.0" fill="rgb(229,148,53)" rx="2" ry="2" />
<text  x="830.11" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_tokenSource (1 samples, 0.02%)</title><rect x="39.4" y="501" width="0.2" height="15.0" fill="rgb(219,46,35)" rx="2" ry="2" />
<text  x="42.39" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="50.2" y="485" width="0.3" height="15.0" fill="rgb(207,64,9)" rx="2" ry="2" />
<text  x="53.25" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (1 samples, 0.02%)</title><rect x="956.2" y="565" width="0.2" height="15.0" fill="rgb(228,200,51)" rx="2" ry="2" />
<text  x="959.22" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (4 samples, 0.08%)</title><rect x="556.9" y="453" width="0.9" height="15.0" fill="rgb(229,84,13)" rx="2" ry="2" />
<text  x="559.93" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (6 samples, 0.11%)</title><rect x="689.0" y="661" width="1.3" height="15.0" fill="rgb(245,84,54)" rx="2" ry="2" />
<text  x="691.97" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="55.7" y="373" width="0.2" height="15.0" fill="rgb(210,69,7)" rx="2" ry="2" />
<text  x="58.67" y="383.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.10%)</title><rect x="911.2" y="469" width="1.2" height="15.0" fill="rgb(215,65,11)" rx="2" ry="2" />
<text  x="914.22" y="479.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="10.9" y="645" width="0.2" height="15.0" fill="rgb(232,40,17)" rx="2" ry="2" />
<text  x="13.90" y="655.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (2 samples, 0.04%)</title><rect x="79.6" y="581" width="0.5" height="15.0" fill="rgb(234,211,24)" rx="2" ry="2" />
<text  x="82.64" y="591.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (52 samples, 1.00%)</title><rect x="323.1" y="517" width="11.8" height="15.0" fill="rgb(226,162,14)" rx="2" ry="2" />
<text  x="326.14" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (1 samples, 0.02%)</title><rect x="1132.3" y="373" width="0.3" height="15.0" fill="rgb(228,70,5)" rx="2" ry="2" />
<text  x="1135.35" y="383.5" ></text>
</g>
<g >
<title>dht::shard_of (1 samples, 0.02%)</title><rect x="997.1" y="469" width="0.3" height="15.0" fill="rgb(235,155,1)" rx="2" ry="2" />
<text  x="1000.14" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="61.8" y="421" width="0.2" height="15.0" fill="rgb(239,111,39)" rx="2" ry="2" />
<text  x="64.78" y="431.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="883.2" y="565" width="0.2" height="15.0" fill="rgb(247,150,42)" rx="2" ry="2" />
<text  x="886.19" y="575.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (2 samples, 0.04%)</title><rect x="108.8" y="485" width="0.5" height="15.0" fill="rgb(225,106,20)" rx="2" ry="2" />
<text  x="111.80" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::finally&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="740.5" y="421" width="0.2" height="15.0" fill="rgb(214,47,52)" rx="2" ry="2" />
<text  x="743.52" y="431.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="596.0" y="581" width="0.5" height="15.0" fill="rgb(211,159,29)" rx="2" ry="2" />
<text  x="599.04" y="591.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (4 samples, 0.08%)</title><rect x="343.0" y="549" width="0.9" height="15.0" fill="rgb(208,42,46)" rx="2" ry="2" />
<text  x="346.04" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="492.5" y="405" width="0.7" height="15.0" fill="rgb(236,96,39)" rx="2" ry="2" />
<text  x="495.49" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="880.0" y="597" width="0.2" height="15.0" fill="rgb(243,34,11)" rx="2" ry="2" />
<text  x="883.02" y="607.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (574 samples, 11.00%)</title><rect x="339.6" y="565" width="129.8" height="15.0" fill="rgb(230,187,8)" rx="2" ry="2" />
<text  x="342.65" y="575.5" >query::consume_p..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.10%)</title><rect x="818.1" y="341" width="1.1" height="15.0" fill="rgb(254,165,25)" rx="2" ry="2" />
<text  x="821.07" y="351.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="575.9" y="453" width="0.2" height="15.0" fill="rgb(249,70,18)" rx="2" ry="2" />
<text  x="578.92" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="851.5" y="597" width="0.3" height="15.0" fill="rgb(227,206,4)" rx="2" ry="2" />
<text  x="854.53" y="607.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="10.2" y="805" width="0.3" height="15.0" fill="rgb(222,67,19)" rx="2" ry="2" />
<text  x="13.23" y="815.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="1133.0" y="389" width="0.2" height="15.0" fill="rgb(245,153,53)" rx="2" ry="2" />
<text  x="1136.02" y="399.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (2 samples, 0.04%)</title><rect x="505.2" y="501" width="0.4" height="15.0" fill="rgb(209,205,13)" rx="2" ry="2" />
<text  x="508.15" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (10 samples, 0.19%)</title><rect x="554.0" y="421" width="2.3" height="15.0" fill="rgb(247,72,43)" rx="2" ry="2" />
<text  x="556.99" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="50.0" y="501" width="0.2" height="15.0" fill="rgb(248,96,12)" rx="2" ry="2" />
<text  x="53.02" y="511.5" ></text>
</g>
<g >
<title>db::filter_for_query (6 samples, 0.11%)</title><rect x="1051.0" y="517" width="1.3" height="15.0" fill="rgb(225,5,6)" rx="2" ry="2" />
<text  x="1053.95" y="527.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::drop_table_statement, std::default_delete&lt;cql3::statements::drop_table_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="65.8" y="549" width="0.3" height="15.0" fill="rgb(225,39,49)" rx="2" ry="2" />
<text  x="68.85" y="559.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="531.6" y="357" width="0.5" height="15.0" fill="rgb(251,93,52)" rx="2" ry="2" />
<text  x="534.61" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::_M_initialize (1 samples, 0.02%)</title><rect x="70.4" y="597" width="0.2" height="15.0" fill="rgb(232,75,29)" rx="2" ry="2" />
<text  x="73.37" y="607.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (1 samples, 0.02%)</title><rect x="138.0" y="597" width="0.2" height="15.0" fill="rgb(239,6,7)" rx="2" ry="2" />
<text  x="140.97" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (2 samples, 0.04%)</title><rect x="1139.1" y="661" width="0.5" height="15.0" fill="rgb(216,194,3)" rx="2" ry="2" />
<text  x="1142.13" y="671.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (1 samples, 0.02%)</title><rect x="1035.8" y="453" width="0.2" height="15.0" fill="rgb(216,119,8)" rx="2" ry="2" />
<text  x="1038.80" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, utils::directories::verify_owner_and_mode (1 samples, 0.02%)</title><rect x="740.5" y="677" width="0.2" height="15.0" fill="rgb(226,152,1)" rx="2" ry="2" />
<text  x="743.52" y="687.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (1 samples, 0.02%)</title><rect x="107.9" y="629" width="0.2" height="15.0" fill="rgb(227,176,26)" rx="2" ry="2" />
<text  x="110.90" y="639.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="56.6" y="421" width="0.2" height="15.0" fill="rgb(206,103,42)" rx="2" ry="2" />
<text  x="59.58" y="431.5" ></text>
</g>
<g >
<title>auth::get_permissions (5 samples, 0.10%)</title><rect x="80.5" y="549" width="1.2" height="15.0" fill="rgb(230,117,53)" rx="2" ry="2" />
<text  x="83.54" y="559.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (3 samples, 0.06%)</title><rect x="261.9" y="277" width="0.7" height="15.0" fill="rgb(242,124,8)" rx="2" ry="2" />
<text  x="264.87" y="287.5" ></text>
</g>
<g >
<title>schema::position (1 samples, 0.02%)</title><rect x="1104.1" y="597" width="0.2" height="15.0" fill="rgb(251,209,9)" rx="2" ry="2" />
<text  x="1107.08" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="336.5" y="549" width="0.2" height="15.0" fill="rgb(248,210,5)" rx="2" ry="2" />
<text  x="339.48" y="559.5" ></text>
</g>
<g >
<title>create_partitions (274 samples, 5.25%)</title><rect x="20.6" y="709" width="62.0" height="15.0" fill="rgb(214,144,16)" rx="2" ry="2" />
<text  x="23.63" y="719.5" >create..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="45.5" y="389" width="0.2" height="15.0" fill="rgb(219,210,15)" rx="2" ry="2" />
<text  x="48.50" y="399.5" ></text>
</g>
<g >
<title>distributed_loader::lock_table (1 samples, 0.02%)</title><rect x="740.5" y="549" width="0.2" height="15.0" fill="rgb(254,20,40)" rx="2" ry="2" />
<text  x="743.52" y="559.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (1 samples, 0.02%)</title><rect x="312.7" y="485" width="0.3" height="15.0" fill="rgb(248,134,10)" rx="2" ry="2" />
<text  x="315.74" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (11 samples, 0.21%)</title><rect x="832.1" y="501" width="2.5" height="15.0" fill="rgb(207,3,36)" rx="2" ry="2" />
<text  x="835.09" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (2 samples, 0.04%)</title><rect x="1028.3" y="373" width="0.5" height="15.0" fill="rgb(242,212,14)" rx="2" ry="2" />
<text  x="1031.34" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="10.9" y="629" width="0.2" height="15.0" fill="rgb(237,171,21)" rx="2" ry="2" />
<text  x="13.90" y="639.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (1 samples, 0.02%)</title><rect x="885.9" y="581" width="0.2" height="15.0" fill="rgb(242,196,43)" rx="2" ry="2" />
<text  x="888.90" y="591.5" ></text>
</g>
<g >
<title>deletable_row::apply_monotonically (1 samples, 0.02%)</title><rect x="19.0" y="725" width="0.3" height="15.0" fill="rgb(213,101,52)" rx="2" ry="2" />
<text  x="22.04" y="735.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (196 samples, 3.76%)</title><rect x="24.9" y="581" width="44.3" height="15.0" fill="rgb(229,115,49)" rx="2" ry="2" />
<text  x="27.92" y="591.5" >cql3..</text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (2 samples, 0.04%)</title><rect x="85.3" y="501" width="0.4" height="15.0" fill="rgb(209,166,39)" rx="2" ry="2" />
<text  x="88.29" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (2 samples, 0.04%)</title><rect x="1153.4" y="629" width="0.4" height="15.0" fill="rgb(254,72,8)" rx="2" ry="2" />
<text  x="1156.37" y="639.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;scanning_reader::consumer&gt; (1 samples, 0.02%)</title><rect x="106.8" y="149" width="0.2" height="15.0" fill="rgb(240,91,54)" rx="2" ry="2" />
<text  x="109.77" y="159.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="106.8" y="309" width="0.2" height="15.0" fill="rgb(222,72,26)" rx="2" ry="2" />
<text  x="109.77" y="319.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="19.7" y="677" width="0.2" height="15.0" fill="rgb(252,5,8)" rx="2" ry="2" />
<text  x="22.72" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="314.3" y="485" width="0.3" height="15.0" fill="rgb(229,28,19)" rx="2" ry="2" />
<text  x="317.33" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (3 samples, 0.06%)</title><rect x="566.2" y="501" width="0.7" height="15.0" fill="rgb(221,109,47)" rx="2" ry="2" />
<text  x="569.20" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="58.6" y="261" width="0.2" height="15.0" fill="rgb(225,27,39)" rx="2" ry="2" />
<text  x="61.61" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (41 samples, 0.79%)</title><rect x="239.5" y="261" width="9.3" height="15.0" fill="rgb(238,27,53)" rx="2" ry="2" />
<text  x="242.49" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="52.3" y="437" width="0.2" height="15.0" fill="rgb(209,33,19)" rx="2" ry="2" />
<text  x="55.28" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="55.9" y="405" width="0.2" height="15.0" fill="rgb(233,117,48)" rx="2" ry="2" />
<text  x="58.90" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::got_cl (1 samples, 0.02%)</title><rect x="723.6" y="645" width="0.2" height="15.0" fill="rgb(240,132,45)" rx="2" ry="2" />
<text  x="726.56" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (2 samples, 0.04%)</title><rect x="128.7" y="565" width="0.5" height="15.0" fill="rgb(231,35,30)" rx="2" ry="2" />
<text  x="131.70" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="85.1" y="549" width="0.6" height="15.0" fill="rgb(210,213,37)" rx="2" ry="2" />
<text  x="88.06" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="52.1" y="469" width="2.0" height="15.0" fill="rgb(223,190,50)" rx="2" ry="2" />
<text  x="55.05" y="479.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (1 samples, 0.02%)</title><rect x="212.1" y="389" width="0.3" height="15.0" fill="rgb(221,41,44)" rx="2" ry="2" />
<text  x="215.13" y="399.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="53.4" y="405" width="0.7" height="15.0" fill="rgb(241,177,41)" rx="2" ry="2" />
<text  x="56.41" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (32 samples, 0.61%)</title><rect x="182.7" y="437" width="7.3" height="15.0" fill="rgb(213,178,51)" rx="2" ry="2" />
<text  x="185.74" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::iterators_valid (1 samples, 0.02%)</title><rect x="19.3" y="709" width="0.2" height="15.0" fill="rgb(206,6,50)" rx="2" ry="2" />
<text  x="22.27" y="719.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="106.8" y="101" width="0.2" height="15.0" fill="rgb(251,33,46)" rx="2" ry="2" />
<text  x="109.77" y="111.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (29 samples, 0.56%)</title><rect x="275.4" y="405" width="6.6" height="15.0" fill="rgb(235,219,31)" rx="2" ry="2" />
<text  x="278.44" y="415.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (1 samples, 0.02%)</title><rect x="108.8" y="469" width="0.2" height="15.0" fill="rgb(254,124,51)" rx="2" ry="2" />
<text  x="111.80" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="775.3" y="581" width="0.3" height="15.0" fill="rgb(246,27,33)" rx="2" ry="2" />
<text  x="778.34" y="591.5" ></text>
</g>
<g >
<title>parse_raw (2 samples, 0.04%)</title><rect x="108.1" y="533" width="0.5" height="15.0" fill="rgb(244,42,1)" rx="2" ry="2" />
<text  x="111.13" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="63.6" y="437" width="0.4" height="15.0" fill="rgb(215,59,7)" rx="2" ry="2" />
<text  x="66.58" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="857.4" y="549" width="0.2" height="15.0" fill="rgb(212,176,51)" rx="2" ry="2" />
<text  x="860.41" y="559.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (3 samples, 0.06%)</title><rect x="871.0" y="501" width="0.7" height="15.0" fill="rgb(234,89,40)" rx="2" ry="2" />
<text  x="873.98" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="297.6" y="341" width="0.9" height="15.0" fill="rgb(221,5,8)" rx="2" ry="2" />
<text  x="300.60" y="351.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (43 samples, 0.82%)</title><rect x="360.2" y="373" width="9.7" height="15.0" fill="rgb(243,112,20)" rx="2" ry="2" />
<text  x="363.22" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (2 samples, 0.04%)</title><rect x="657.8" y="565" width="0.4" height="15.0" fill="rgb(206,5,3)" rx="2" ry="2" />
<text  x="660.77" y="575.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="1053.4" y="501" width="2.5" height="15.0" fill="rgb(214,133,1)" rx="2" ry="2" />
<text  x="1056.44" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (2 samples, 0.04%)</title><rect x="886.1" y="581" width="0.5" height="15.0" fill="rgb(247,30,36)" rx="2" ry="2" />
<text  x="889.13" y="591.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (2 samples, 0.04%)</title><rect x="487.5" y="485" width="0.5" height="15.0" fill="rgb(253,152,12)" rx="2" ry="2" />
<text  x="490.52" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="58.6" y="357" width="0.2" height="15.0" fill="rgb(245,141,43)" rx="2" ry="2" />
<text  x="61.61" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (124 samples, 2.38%)</title><rect x="598.1" y="581" width="28.0" height="15.0" fill="rgb(224,8,40)" rx="2" ry="2" />
<text  x="601.08" y="591.5" >f..</text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="657.3" y="581" width="0.2" height="15.0" fill="rgb(245,142,20)" rx="2" ry="2" />
<text  x="660.32" y="591.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (23 samples, 0.44%)</title><rect x="925.5" y="549" width="5.2" height="15.0" fill="rgb(249,26,37)" rx="2" ry="2" />
<text  x="928.47" y="559.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (49 samples, 0.94%)</title><rect x="50.2" y="501" width="11.1" height="15.0" fill="rgb(250,26,29)" rx="2" ry="2" />
<text  x="53.25" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1039.0" y="389" width="0.4" height="15.0" fill="rgb(228,110,23)" rx="2" ry="2" />
<text  x="1041.97" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt; &gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="76.2" y="533" width="0.3" height="15.0" fill="rgb(230,31,54)" rx="2" ry="2" />
<text  x="79.25" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (7 samples, 0.13%)</title><rect x="290.1" y="389" width="1.6" height="15.0" fill="rgb(210,17,46)" rx="2" ry="2" />
<text  x="293.13" y="399.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="404.3" y="325" width="0.2" height="15.0" fill="rgb(233,61,50)" rx="2" ry="2" />
<text  x="407.31" y="335.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (24 samples, 0.46%)</title><rect x="499.5" y="485" width="5.4" height="15.0" fill="rgb(223,162,31)" rx="2" ry="2" />
<text  x="502.50" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="462.0" y="501" width="0.2" height="15.0" fill="rgb(252,155,24)" rx="2" ry="2" />
<text  x="464.97" y="511.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (1 samples, 0.02%)</title><rect x="19.7" y="485" width="0.2" height="15.0" fill="rgb(206,168,25)" rx="2" ry="2" />
<text  x="22.72" y="495.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="460.6" y="437" width="1.1" height="15.0" fill="rgb(253,60,38)" rx="2" ry="2" />
<text  x="463.61" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;static_row&gt;::_M_reset (1 samples, 0.02%)</title><rect x="444.8" y="421" width="0.2" height="15.0" fill="rgb(237,39,18)" rx="2" ry="2" />
<text  x="447.78" y="431.5" ></text>
</g>
<g >
<title>sstables::sstable::write_simple&lt; (1 samples, 0.02%)</title><rect x="12.9" y="645" width="0.3" height="15.0" fill="rgb(222,55,45)" rx="2" ry="2" />
<text  x="15.94" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="212.6" y="389" width="0.2" height="15.0" fill="rgb(250,143,41)" rx="2" ry="2" />
<text  x="215.58" y="399.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (7 samples, 0.13%)</title><rect x="755.2" y="469" width="1.6" height="15.0" fill="rgb(218,13,35)" rx="2" ry="2" />
<text  x="758.22" y="479.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="45.0" y="357" width="0.3" height="15.0" fill="rgb(235,84,14)" rx="2" ry="2" />
<text  x="48.05" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="642.8" y="613" width="0.3" height="15.0" fill="rgb(238,180,53)" rx="2" ry="2" />
<text  x="645.85" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (15 samples, 0.29%)</title><rect x="854.2" y="581" width="3.4" height="15.0" fill="rgb(237,181,27)" rx="2" ry="2" />
<text  x="857.25" y="591.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (3 samples, 0.06%)</title><rect x="106.5" y="549" width="0.7" height="15.0" fill="rgb(223,200,20)" rx="2" ry="2" />
<text  x="109.54" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="944.7" y="533" width="1.1" height="15.0" fill="rgb(226,11,20)" rx="2" ry="2" />
<text  x="947.68" y="543.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (4 samples, 0.08%)</title><rect x="439.4" y="405" width="0.9" height="15.0" fill="rgb(230,26,24)" rx="2" ry="2" />
<text  x="442.36" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (2 samples, 0.04%)</title><rect x="640.8" y="613" width="0.5" height="15.0" fill="rgb(253,207,54)" rx="2" ry="2" />
<text  x="643.81" y="623.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (2 samples, 0.04%)</title><rect x="615.9" y="549" width="0.5" height="15.0" fill="rgb(210,37,1)" rx="2" ry="2" />
<text  x="618.94" y="559.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="852.4" y="597" width="0.3" height="15.0" fill="rgb(244,105,35)" rx="2" ry="2" />
<text  x="855.44" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::single_column_restriction&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="672.9" y="549" width="0.2" height="15.0" fill="rgb(227,83,43)" rx="2" ry="2" />
<text  x="675.92" y="559.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="98.6" y="645" width="0.3" height="15.0" fill="rgb(215,35,51)" rx="2" ry="2" />
<text  x="101.63" y="655.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (957 samples, 18.34%)</title><rect x="899.7" y="613" width="216.4" height="15.0" fill="rgb(209,31,47)" rx="2" ry="2" />
<text  x="902.69" y="623.5" >cql3::statements::select_sta..</text>
</g>
<g >
<title>seastar::memory::allocate (12 samples, 0.23%)</title><rect x="1029.7" y="421" width="2.7" height="15.0" fill="rgb(225,175,40)" rx="2" ry="2" />
<text  x="1032.70" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (5 samples, 0.10%)</title><rect x="680.2" y="645" width="1.1" height="15.0" fill="rgb(206,199,35)" rx="2" ry="2" />
<text  x="683.15" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="673.1" y="405" width="0.3" height="15.0" fill="rgb(254,188,0)" rx="2" ry="2" />
<text  x="676.14" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1119.9" y="357" width="0.2" height="15.0" fill="rgb(208,180,25)" rx="2" ry="2" />
<text  x="1122.91" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="826.0" y="421" width="0.2" height="15.0" fill="rgb(205,190,36)" rx="2" ry="2" />
<text  x="828.98" y="431.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="277.7" y="357" width="0.2" height="15.0" fill="rgb(216,196,21)" rx="2" ry="2" />
<text  x="280.70" y="367.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="10.9" y="693" width="0.2" height="15.0" fill="rgb(231,227,43)" rx="2" ry="2" />
<text  x="13.90" y="703.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (4 samples, 0.08%)</title><rect x="708.2" y="629" width="0.9" height="15.0" fill="rgb(227,18,4)" rx="2" ry="2" />
<text  x="711.19" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="55.9" y="389" width="0.2" height="15.0" fill="rgb(219,227,51)" rx="2" ry="2" />
<text  x="58.90" y="399.5" ></text>
</g>
<g >
<title>partition_builder::accept_row (1 samples, 0.02%)</title><rect x="105.9" y="613" width="0.2" height="15.0" fill="rgb(206,150,23)" rx="2" ry="2" />
<text  x="108.87" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="62.0" y="389" width="0.2" height="15.0" fill="rgb(231,184,50)" rx="2" ry="2" />
<text  x="65.00" y="399.5" ></text>
</g>
<g >
<title>schema::partition_key_size (1 samples, 0.02%)</title><rect x="941.5" y="581" width="0.2" height="15.0" fill="rgb(236,133,45)" rx="2" ry="2" />
<text  x="944.52" y="591.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="694.2" y="597" width="0.6" height="15.0" fill="rgb(229,153,42)" rx="2" ry="2" />
<text  x="697.17" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (8 samples, 0.15%)</title><rect x="712.5" y="661" width="1.8" height="15.0" fill="rgb(232,36,30)" rx="2" ry="2" />
<text  x="715.48" y="671.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="746.8" y="597" width="1.0" height="15.0" fill="rgb(205,179,33)" rx="2" ry="2" />
<text  x="749.85" y="607.5" ></text>
</g>
<g >
<title>operator new (14 samples, 0.27%)</title><rect x="592.2" y="517" width="3.2" height="15.0" fill="rgb(211,213,44)" rx="2" ry="2" />
<text  x="595.20" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_Rb_tree (1 samples, 0.02%)</title><rect x="107.9" y="581" width="0.2" height="15.0" fill="rgb(239,4,26)" rx="2" ry="2" />
<text  x="110.90" y="591.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (13 samples, 0.25%)</title><rect x="754.5" y="501" width="3.0" height="15.0" fill="rgb(240,206,30)" rx="2" ry="2" />
<text  x="757.54" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="38.0" y="405" width="0.3" height="15.0" fill="rgb(252,193,33)" rx="2" ry="2" />
<text  x="41.04" y="415.5" ></text>
</g>
<g >
<title>std::move&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="63.1" y="485" width="0.3" height="15.0" fill="rgb(237,45,33)" rx="2" ry="2" />
<text  x="66.13" y="495.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%)</title><rect x="18.8" y="709" width="0.2" height="15.0" fill="rgb(238,127,43)" rx="2" ry="2" />
<text  x="21.82" y="719.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="82.4" y="581" width="0.2" height="15.0" fill="rgb(230,172,16)" rx="2" ry="2" />
<text  x="85.35" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,420 samples, 46.37%)</title><rect x="112.4" y="661" width="547.2" height="15.0" fill="rgb(218,5,50)" rx="2" ry="2" />
<text  x="115.42" y="671.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, partition_key&gt; (1 samples, 0.02%)</title><rect x="1130.5" y="325" width="0.3" height="15.0" fill="rgb(247,96,48)" rx="2" ry="2" />
<text  x="1133.54" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="48.0" y="485" width="0.2" height="15.0" fill="rgb(247,72,30)" rx="2" ry="2" />
<text  x="50.98" y="495.5" ></text>
</g>
<g >
<title>sstables::sstable::do_write_simple (1 samples, 0.02%)</title><rect x="12.9" y="629" width="0.3" height="15.0" fill="rgb(226,20,48)" rx="2" ry="2" />
<text  x="15.94" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_deleter (1 samples, 0.02%)</title><rect x="50.7" y="421" width="0.2" height="15.0" fill="rgb(220,58,32)" rx="2" ry="2" />
<text  x="53.70" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (3 samples, 0.06%)</title><rect x="23.8" y="597" width="0.7" height="15.0" fill="rgb(241,37,54)" rx="2" ry="2" />
<text  x="26.79" y="607.5" ></text>
</g>
</g>
</svg>
