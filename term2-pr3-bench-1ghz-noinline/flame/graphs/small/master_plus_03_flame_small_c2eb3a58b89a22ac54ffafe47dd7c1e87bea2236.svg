<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="918.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="901" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="901" > </text>
<g id="frames">
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (1 samples, 0.02%)</title><rect x="79.0" y="405" width="0.2" height="15.0" fill="rgb(216,57,54)" rx="2" ry="2" />
<text  x="81.96" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="625.8" y="597" width="0.3" height="15.0" fill="rgb(217,75,49)" rx="2" ry="2" />
<text  x="628.83" y="607.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="195.0" y="389" width="0.7" height="15.0" fill="rgb(215,90,20)" rx="2" ry="2" />
<text  x="198.02" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="617.4" y="645" width="0.2" height="15.0" fill="rgb(212,112,54)" rx="2" ry="2" />
<text  x="620.41" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_role_statement, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::alter_role_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="63.9" y="581" width="0.3" height="15.0" fill="rgb(206,22,19)" rx="2" ry="2" />
<text  x="66.94" y="591.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%)</title><rect x="836.1" y="629" width="0.7" height="15.0" fill="rgb(210,10,50)" rx="2" ry="2" />
<text  x="839.11" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="434.4" y="485" width="0.3" height="15.0" fill="rgb(252,90,12)" rx="2" ry="2" />
<text  x="437.44" y="495.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (2 samples, 0.04%)</title><rect x="992.5" y="485" width="0.4" height="15.0" fill="rgb(239,173,28)" rx="2" ry="2" />
<text  x="995.46" y="495.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="17.1" y="661" width="0.2" height="15.0" fill="rgb(231,182,0)" rx="2" ry="2" />
<text  x="20.05" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::shared_ptr_count_for&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (1 samples, 0.02%)</title><rect x="71.9" y="613" width="0.2" height="15.0" fill="rgb(239,152,7)" rx="2" ry="2" />
<text  x="74.90" y="623.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%)</title><rect x="899.2" y="501" width="0.2" height="15.0" fill="rgb(224,177,12)" rx="2" ry="2" />
<text  x="902.15" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (590 samples, 11.38%)</title><rect x="958.3" y="629" width="134.3" height="15.0" fill="rgb(249,202,3)" rx="2" ry="2" />
<text  x="961.32" y="639.5" >cql3::statements..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="782.9" y="517" width="0.4" height="15.0" fill="rgb(220,21,37)" rx="2" ry="2" />
<text  x="785.86" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (37 samples, 0.71%)</title><rect x="868.0" y="645" width="8.4" height="15.0" fill="rgb(231,36,31)" rx="2" ry="2" />
<text  x="870.97" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (8 samples, 0.15%)</title><rect x="1099.4" y="581" width="1.8" height="15.0" fill="rgb(234,171,28)" rx="2" ry="2" />
<text  x="1102.42" y="591.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (3 samples, 0.06%)</title><rect x="56.9" y="517" width="0.7" height="15.0" fill="rgb(225,94,18)" rx="2" ry="2" />
<text  x="59.88" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (5 samples, 0.10%)</title><rect x="667.9" y="693" width="1.2" height="15.0" fill="rgb(253,2,50)" rx="2" ry="2" />
<text  x="670.93" y="703.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="61.4" y="565" width="0.3" height="15.0" fill="rgb(242,115,33)" rx="2" ry="2" />
<text  x="64.43" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%)</title><rect x="954.5" y="581" width="0.4" height="15.0" fill="rgb(218,7,10)" rx="2" ry="2" />
<text  x="957.46" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="815.9" y="501" width="0.6" height="15.0" fill="rgb(242,102,54)" rx="2" ry="2" />
<text  x="818.86" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (2 samples, 0.04%)</title><rect x="290.4" y="485" width="0.4" height="15.0" fill="rgb(245,213,33)" rx="2" ry="2" />
<text  x="293.38" y="495.5" ></text>
</g>
<g >
<title>query::result::builder::builder (11 samples, 0.21%)</title><rect x="604.0" y="629" width="2.5" height="15.0" fill="rgb(218,193,14)" rx="2" ry="2" />
<text  x="606.98" y="639.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (16 samples, 0.31%)</title><rect x="471.3" y="501" width="3.6" height="15.0" fill="rgb(239,70,33)" rx="2" ry="2" />
<text  x="474.30" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="547.8" y="549" width="0.2" height="15.0" fill="rgb(238,95,34)" rx="2" ry="2" />
<text  x="550.77" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="615.6" y="645" width="0.2" height="15.0" fill="rgb(206,202,23)" rx="2" ry="2" />
<text  x="618.59" y="655.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (7 samples, 0.14%)</title><rect x="415.3" y="421" width="1.6" height="15.0" fill="rgb(231,118,14)" rx="2" ry="2" />
<text  x="418.32" y="431.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (3 samples, 0.06%)</title><rect x="199.1" y="421" width="0.7" height="15.0" fill="rgb(206,189,23)" rx="2" ry="2" />
<text  x="202.12" y="431.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="202.8" y="437" width="0.2" height="15.0" fill="rgb(251,155,45)" rx="2" ry="2" />
<text  x="205.76" y="447.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (1 samples, 0.02%)</title><rect x="1124.7" y="533" width="0.2" height="15.0" fill="rgb(248,149,9)" rx="2" ry="2" />
<text  x="1127.68" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="72.6" y="645" width="0.2" height="15.0" fill="rgb(237,63,41)" rx="2" ry="2" />
<text  x="75.58" y="655.5" ></text>
</g>
<g >
<title>mutation_partition::apply_monotonically (1 samples, 0.02%)</title><rect x="1122.6" y="437" width="0.3" height="15.0" fill="rgb(230,185,3)" rx="2" ry="2" />
<text  x="1125.64" y="447.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="103.8" y="453" width="0.2" height="15.0" fill="rgb(240,85,54)" rx="2" ry="2" />
<text  x="106.76" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (5 samples, 0.10%)</title><rect x="298.3" y="533" width="1.2" height="15.0" fill="rgb(206,153,51)" rx="2" ry="2" />
<text  x="301.34" y="543.5" ></text>
</g>
<g >
<title>cql3::to_managed_bytes_opt (2 samples, 0.04%)</title><rect x="915.3" y="565" width="0.5" height="15.0" fill="rgb(250,224,36)" rx="2" ry="2" />
<text  x="918.31" y="575.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="44.4" y="533" width="0.2" height="15.0" fill="rgb(248,192,11)" rx="2" ry="2" />
<text  x="47.36" y="543.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="700.0" y="661" width="0.2" height="15.0" fill="rgb(210,92,54)" rx="2" ry="2" />
<text  x="703.02" y="671.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="83.7" y="757" width="0.3" height="15.0" fill="rgb(215,77,50)" rx="2" ry="2" />
<text  x="86.74" y="767.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (7 samples, 0.14%)</title><rect x="304.9" y="517" width="1.6" height="15.0" fill="rgb(210,57,21)" rx="2" ry="2" />
<text  x="307.94" y="527.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (10 samples, 0.19%)</title><rect x="40.7" y="517" width="2.3" height="15.0" fill="rgb(217,128,32)" rx="2" ry="2" />
<text  x="43.72" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="429.9" y="437" width="0.4" height="15.0" fill="rgb(211,62,34)" rx="2" ry="2" />
<text  x="432.88" y="447.5" ></text>
</g>
<g >
<title>crc32_nbo::process_fragmented&lt;ser::buffer_view&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1123.8" y="469" width="0.2" height="15.0" fill="rgb(218,121,17)" rx="2" ry="2" />
<text  x="1126.77" y="479.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (6 samples, 0.12%)</title><rect x="630.2" y="629" width="1.3" height="15.0" fill="rgb(216,162,47)" rx="2" ry="2" />
<text  x="633.15" y="639.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="1126.5" y="325" width="0.2" height="15.0" fill="rgb(208,66,38)" rx="2" ry="2" />
<text  x="1129.51" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::~when_all_state (1 samples, 0.02%)</title><rect x="867.1" y="677" width="0.2" height="15.0" fill="rgb(253,70,42)" rx="2" ry="2" />
<text  x="870.06" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::do_resize (1 samples, 0.02%)</title><rect x="1166.6" y="709" width="0.2" height="15.0" fill="rgb(223,122,37)" rx="2" ry="2" />
<text  x="1169.56" y="719.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="146.3" y="597" width="0.2" height="15.0" fill="rgb(209,114,53)" rx="2" ry="2" />
<text  x="149.32" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (11 samples, 0.21%)</title><rect x="807.7" y="469" width="2.5" height="15.0" fill="rgb(238,183,45)" rx="2" ry="2" />
<text  x="810.67" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="646.8" y="677" width="0.4" height="15.0" fill="rgb(231,13,32)" rx="2" ry="2" />
<text  x="649.77" y="687.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (16 samples, 0.31%)</title><rect x="989.3" y="517" width="3.6" height="15.0" fill="rgb(213,60,28)" rx="2" ry="2" />
<text  x="992.27" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="76.9" y="437" width="0.2" height="15.0" fill="rgb(238,1,47)" rx="2" ry="2" />
<text  x="79.91" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="47.6" y="437" width="0.6" height="15.0" fill="rgb(253,147,36)" rx="2" ry="2" />
<text  x="50.55" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="822.7" y="549" width="0.2" height="15.0" fill="rgb(252,1,17)" rx="2" ry="2" />
<text  x="825.69" y="559.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (42 samples, 0.81%)</title><rect x="401.0" y="373" width="9.5" height="15.0" fill="rgb(228,102,37)" rx="2" ry="2" />
<text  x="403.98" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="437.8" y="581" width="0.3" height="15.0" fill="rgb(232,20,30)" rx="2" ry="2" />
<text  x="440.85" y="591.5" ></text>
</g>
<g >
<title>logalloc::region_impl::object_descriptor::encode (1 samples, 0.02%)</title><rect x="10.2" y="549" width="0.3" height="15.0" fill="rgb(230,47,6)" rx="2" ry="2" />
<text  x="13.23" y="559.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="866.8" y="693" width="0.3" height="15.0" fill="rgb(223,129,3)" rx="2" ry="2" />
<text  x="869.84" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;void&gt;::promise_type::run_and_dispose (1 samples, 0.02%)</title><rect x="86.2" y="725" width="0.3" height="15.0" fill="rgb(250,207,39)" rx="2" ry="2" />
<text  x="89.24" y="735.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (5 samples, 0.10%)</title><rect x="766.5" y="549" width="1.1" height="15.0" fill="rgb(233,84,30)" rx="2" ry="2" />
<text  x="769.47" y="559.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="804.9" y="277" width="0.3" height="15.0" fill="rgb(254,185,45)" rx="2" ry="2" />
<text  x="807.94" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="374.6" y="357" width="0.7" height="15.0" fill="rgb(238,34,36)" rx="2" ry="2" />
<text  x="377.58" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%)</title><rect x="864.3" y="661" width="0.3" height="15.0" fill="rgb(232,122,30)" rx="2" ry="2" />
<text  x="867.33" y="671.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (1 samples, 0.02%)</title><rect x="609.0" y="629" width="0.2" height="15.0" fill="rgb(219,127,24)" rx="2" ry="2" />
<text  x="611.99" y="639.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="624.2" y="581" width="1.2" height="15.0" fill="rgb(208,49,23)" rx="2" ry="2" />
<text  x="627.24" y="591.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (3 samples, 0.06%)</title><rect x="248.3" y="373" width="0.7" height="15.0" fill="rgb(223,180,48)" rx="2" ry="2" />
<text  x="251.28" y="383.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%)</title><rect x="866.6" y="501" width="0.2" height="15.0" fill="rgb(229,124,35)" rx="2" ry="2" />
<text  x="869.61" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (1 samples, 0.02%)</title><rect x="693.0" y="581" width="0.2" height="15.0" fill="rgb(253,178,39)" rx="2" ry="2" />
<text  x="695.97" y="591.5" ></text>
</g>
<g >
<title>db::schema_tables::add_column_to_schema_mutation (1 samples, 0.02%)</title><rect x="103.8" y="629" width="0.2" height="15.0" fill="rgb(229,98,25)" rx="2" ry="2" />
<text  x="106.76" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="40.0" y="485" width="0.3" height="15.0" fill="rgb(227,55,43)" rx="2" ry="2" />
<text  x="43.04" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="80.8" y="229" width="0.2" height="15.0" fill="rgb(218,57,11)" rx="2" ry="2" />
<text  x="83.78" y="239.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;char*&gt;::pointer_to (1 samples, 0.02%)</title><rect x="56.2" y="437" width="0.2" height="15.0" fill="rgb(253,17,38)" rx="2" ry="2" />
<text  x="59.20" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (6 samples, 0.12%)</title><rect x="947.6" y="613" width="1.4" height="15.0" fill="rgb(236,191,8)" rx="2" ry="2" />
<text  x="950.63" y="623.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="16.1" y="709" width="0.3" height="15.0" fill="rgb(235,15,37)" rx="2" ry="2" />
<text  x="19.14" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="701.2" y="693" width="0.2" height="15.0" fill="rgb(249,207,9)" rx="2" ry="2" />
<text  x="704.16" y="703.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="10.2" y="805" width="0.3" height="15.0" fill="rgb(251,19,31)" rx="2" ry="2" />
<text  x="13.23" y="815.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (22 samples, 0.42%)</title><rect x="555.3" y="597" width="5.0" height="15.0" fill="rgb(242,168,18)" rx="2" ry="2" />
<text  x="558.28" y="607.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%)</title><rect x="866.6" y="437" width="0.2" height="15.0" fill="rgb(215,174,48)" rx="2" ry="2" />
<text  x="869.61" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (4 samples, 0.08%)</title><rect x="1141.3" y="693" width="0.9" height="15.0" fill="rgb(242,207,35)" rx="2" ry="2" />
<text  x="1144.30" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="145.2" y="581" width="0.4" height="15.0" fill="rgb(212,35,30)" rx="2" ry="2" />
<text  x="148.18" y="591.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="691.8" y="517" width="0.3" height="15.0" fill="rgb(233,142,41)" rx="2" ry="2" />
<text  x="694.83" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="630.6" y="597" width="0.2" height="15.0" fill="rgb(226,89,13)" rx="2" ry="2" />
<text  x="633.61" y="607.5" ></text>
</g>
<g >
<title>partition_builder::accept_row (1 samples, 0.02%)</title><rect x="103.3" y="597" width="0.2" height="15.0" fill="rgb(226,63,47)" rx="2" ry="2" />
<text  x="106.31" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (48 samples, 0.93%)</title><rect x="271.3" y="437" width="10.9" height="15.0" fill="rgb(229,91,15)" rx="2" ry="2" />
<text  x="274.26" y="447.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (45 samples, 0.87%)</title><rect x="1064.8" y="485" width="10.3" height="15.0" fill="rgb(228,182,27)" rx="2" ry="2" />
<text  x="1067.83" y="495.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (1 samples, 0.02%)</title><rect x="1163.8" y="613" width="0.3" height="15.0" fill="rgb(206,44,31)" rx="2" ry="2" />
<text  x="1166.83" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="814.7" y="501" width="0.2" height="15.0" fill="rgb(220,37,12)" rx="2" ry="2" />
<text  x="817.72" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="930.3" y="533" width="0.3" height="15.0" fill="rgb(232,220,49)" rx="2" ry="2" />
<text  x="933.33" y="543.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="705.9" y="645" width="0.3" height="15.0" fill="rgb(220,78,54)" rx="2" ry="2" />
<text  x="708.94" y="655.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="565.7" y="533" width="1.4" height="15.0" fill="rgb(224,67,8)" rx="2" ry="2" />
<text  x="568.75" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="256.0" y="357" width="0.2" height="15.0" fill="rgb(217,18,6)" rx="2" ry="2" />
<text  x="259.01" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (175 samples, 3.38%)</title><rect x="999.7" y="501" width="39.9" height="15.0" fill="rgb(241,35,20)" rx="2" ry="2" />
<text  x="1002.74" y="511.5" >ser..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="211.9" y="341" width="0.2" height="15.0" fill="rgb(227,152,7)" rx="2" ry="2" />
<text  x="214.86" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;4ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="229" width="0.3" height="15.0" fill="rgb(218,27,32)" rx="2" ry="2" />
<text  x="62.84" y="239.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="241.4" y="341" width="0.3" height="15.0" fill="rgb(242,58,28)" rx="2" ry="2" />
<text  x="244.45" y="351.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="199.6" y="405" width="0.2" height="15.0" fill="rgb(248,170,49)" rx="2" ry="2" />
<text  x="202.57" y="415.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (9 samples, 0.17%)</title><rect x="459.0" y="485" width="2.1" height="15.0" fill="rgb(228,201,15)" rx="2" ry="2" />
<text  x="462.01" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="871.4" y="549" width="0.2" height="15.0" fill="rgb(221,92,40)" rx="2" ry="2" />
<text  x="874.39" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (6 samples, 0.12%)</title><rect x="41.6" y="501" width="1.4" height="15.0" fill="rgb(215,178,46)" rx="2" ry="2" />
<text  x="44.63" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (9 samples, 0.17%)</title><rect x="820.9" y="597" width="2.0" height="15.0" fill="rgb(236,24,7)" rx="2" ry="2" />
<text  x="823.87" y="607.5" ></text>
</g>
<g >
<title>db::filter_for_query (2 samples, 0.04%)</title><rect x="1051.9" y="549" width="0.4" height="15.0" fill="rgb(219,99,48)" rx="2" ry="2" />
<text  x="1054.86" y="559.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (3 samples, 0.06%)</title><rect x="1020.7" y="373" width="0.7" height="15.0" fill="rgb(251,43,17)" rx="2" ry="2" />
<text  x="1023.68" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message::prepared&gt; &gt;, cql3::query_processor::prepare_one&lt;cql_transport::messages::result_message::prepared::cql, cql3::prepared_cache_key_type  (1 samples, 0.02%)</title><rect x="79.0" y="437" width="0.2" height="15.0" fill="rgb(228,9,12)" rx="2" ry="2" />
<text  x="81.96" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="1012.7" y="405" width="0.5" height="15.0" fill="rgb(224,192,19)" rx="2" ry="2" />
<text  x="1015.72" y="415.5" ></text>
</g>
<g >
<title>abstract_type::bound_value_needs_to_be_reserialized (2 samples, 0.04%)</title><rect x="899.6" y="501" width="0.5" height="15.0" fill="rgb(234,137,20)" rx="2" ry="2" />
<text  x="902.61" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="664.7" y="677" width="0.3" height="15.0" fill="rgb(213,56,24)" rx="2" ry="2" />
<text  x="667.75" y="687.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.48%)</title><rect x="1125.8" y="629" width="5.7" height="15.0" fill="rgb(222,211,45)" rx="2" ry="2" />
<text  x="1128.82" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%)</title><rect x="658.4" y="645" width="0.2" height="15.0" fill="rgb(223,148,16)" rx="2" ry="2" />
<text  x="661.37" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;8ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="293" width="0.3" height="15.0" fill="rgb(253,140,27)" rx="2" ry="2" />
<text  x="62.84" y="303.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (1 samples, 0.02%)</title><rect x="746.4" y="581" width="0.3" height="15.0" fill="rgb(229,27,45)" rx="2" ry="2" />
<text  x="749.45" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="40.3" y="357" width="0.2" height="15.0" fill="rgb(243,13,25)" rx="2" ry="2" />
<text  x="43.27" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (5 samples, 0.10%)</title><rect x="731.4" y="533" width="1.2" height="15.0" fill="rgb(207,4,7)" rx="2" ry="2" />
<text  x="734.43" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="857.7" y="565" width="0.3" height="15.0" fill="rgb(251,130,16)" rx="2" ry="2" />
<text  x="860.73" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="324.5" y="469" width="0.5" height="15.0" fill="rgb(251,119,13)" rx="2" ry="2" />
<text  x="327.51" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%)</title><rect x="831.3" y="501" width="0.5" height="15.0" fill="rgb(250,52,50)" rx="2" ry="2" />
<text  x="834.33" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="1091.9" y="597" width="0.7" height="15.0" fill="rgb(222,76,34)" rx="2" ry="2" />
<text  x="1094.91" y="607.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="1105.6" y="613" width="1.8" height="15.0" fill="rgb(228,172,35)" rx="2" ry="2" />
<text  x="1108.57" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="38.9" y="421" width="0.2" height="15.0" fill="rgb(208,32,23)" rx="2" ry="2" />
<text  x="41.90" y="431.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::drop_type_statement*, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="64.6" y="533" width="0.2" height="15.0" fill="rgb(222,37,10)" rx="2" ry="2" />
<text  x="67.62" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (3 samples, 0.06%)</title><rect x="45.7" y="501" width="0.7" height="15.0" fill="rgb(230,85,52)" rx="2" ry="2" />
<text  x="48.73" y="511.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="751.5" y="533" width="0.2" height="15.0" fill="rgb(220,94,7)" rx="2" ry="2" />
<text  x="754.45" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="69.6" y="565" width="0.3" height="15.0" fill="rgb(223,39,24)" rx="2" ry="2" />
<text  x="72.63" y="575.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (34 samples, 0.66%)</title><rect x="497.2" y="437" width="7.8" height="15.0" fill="rgb(220,170,40)" rx="2" ry="2" />
<text  x="500.25" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (5 samples, 0.10%)</title><rect x="773.5" y="549" width="1.2" height="15.0" fill="rgb(234,5,42)" rx="2" ry="2" />
<text  x="776.53" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%)</title><rect x="873.2" y="485" width="0.2" height="15.0" fill="rgb(224,158,15)" rx="2" ry="2" />
<text  x="876.21" y="495.5" ></text>
</g>
<g >
<title>seastar::gate::leave (3 samples, 0.06%)</title><rect x="615.8" y="645" width="0.7" height="15.0" fill="rgb(208,77,30)" rx="2" ry="2" />
<text  x="618.82" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (3 samples, 0.06%)</title><rect x="1098.3" y="597" width="0.7" height="15.0" fill="rgb(234,186,2)" rx="2" ry="2" />
<text  x="1101.29" y="607.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (9 samples, 0.17%)</title><rect x="75.3" y="661" width="2.1" height="15.0" fill="rgb(236,40,48)" rx="2" ry="2" />
<text  x="78.32" y="671.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (1 samples, 0.02%)</title><rect x="270.4" y="453" width="0.2" height="15.0" fill="rgb(222,172,20)" rx="2" ry="2" />
<text  x="273.35" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="44.8" y="405" width="0.5" height="15.0" fill="rgb(228,188,15)" rx="2" ry="2" />
<text  x="47.82" y="415.5" ></text>
</g>
<g >
<title>query_state::query_state (21 samples, 0.41%)</title><rect x="601.7" y="645" width="4.8" height="15.0" fill="rgb(243,199,29)" rx="2" ry="2" />
<text  x="604.71" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;cql3::expr::expression, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="61.7" y="533" width="0.2" height="15.0" fill="rgb(207,160,48)" rx="2" ry="2" />
<text  x="64.66" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="706.8" y="645" width="0.3" height="15.0" fill="rgb(208,18,41)" rx="2" ry="2" />
<text  x="709.85" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="79.0" y="117" width="0.2" height="15.0" fill="rgb(215,72,4)" rx="2" ry="2" />
<text  x="81.96" y="127.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::set_value (1 samples, 0.02%)</title><rect x="57.1" y="501" width="0.2" height="15.0" fill="rgb(212,213,37)" rx="2" ry="2" />
<text  x="60.11" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%)</title><rect x="990.0" y="501" width="0.2" height="15.0" fill="rgb(232,9,25)" rx="2" ry="2" />
<text  x="992.96" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%)</title><rect x="616.7" y="629" width="0.3" height="15.0" fill="rgb(248,150,34)" rx="2" ry="2" />
<text  x="619.73" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (30 samples, 0.58%)</title><rect x="1094.4" y="613" width="6.8" height="15.0" fill="rgb(221,5,9)" rx="2" ry="2" />
<text  x="1097.42" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (1 samples, 0.02%)</title><rect x="91.0" y="693" width="0.2" height="15.0" fill="rgb(207,196,8)" rx="2" ry="2" />
<text  x="94.02" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="597.4" y="597" width="0.2" height="15.0" fill="rgb(214,127,51)" rx="2" ry="2" />
<text  x="600.38" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (2 samples, 0.04%)</title><rect x="678.6" y="693" width="0.5" height="15.0" fill="rgb(237,78,45)" rx="2" ry="2" />
<text  x="681.63" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%)</title><rect x="515.9" y="469" width="0.2" height="15.0" fill="rgb(243,79,13)" rx="2" ry="2" />
<text  x="518.91" y="479.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;, &amp;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;::_link&gt;::expire (1 samples, 0.02%)</title><rect x="1166.3" y="645" width="0.3" height="15.0" fill="rgb(215,57,15)" rx="2" ry="2" />
<text  x="1169.33" y="655.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="510.2" y="517" width="0.2" height="15.0" fill="rgb(212,214,37)" rx="2" ry="2" />
<text  x="513.22" y="527.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (5 samples, 0.10%)</title><rect x="741.4" y="597" width="1.2" height="15.0" fill="rgb(247,96,10)" rx="2" ry="2" />
<text  x="744.44" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relationType (1 samples, 0.02%)</title><rect x="59.2" y="533" width="0.2" height="15.0" fill="rgb(244,157,4)" rx="2" ry="2" />
<text  x="62.16" y="543.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="1126.3" y="357" width="0.2" height="15.0" fill="rgb(232,11,19)" rx="2" ry="2" />
<text  x="1129.28" y="367.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="856.6" y="565" width="1.1" height="15.0" fill="rgb(223,32,45)" rx="2" ry="2" />
<text  x="859.60" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (5 samples, 0.10%)</title><rect x="81.7" y="629" width="1.1" height="15.0" fill="rgb(229,73,4)" rx="2" ry="2" />
<text  x="84.69" y="639.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (74 samples, 1.43%)</title><rect x="738.0" y="629" width="16.9" height="15.0" fill="rgb(216,185,16)" rx="2" ry="2" />
<text  x="741.03" y="639.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (5 samples, 0.10%)</title><rect x="508.9" y="517" width="1.1" height="15.0" fill="rgb(245,60,5)" rx="2" ry="2" />
<text  x="511.85" y="527.5" ></text>
</g>
<g >
<title>auth::resource::resource (7 samples, 0.14%)</title><rect x="773.3" y="581" width="1.6" height="15.0" fill="rgb(240,144,46)" rx="2" ry="2" />
<text  x="776.30" y="591.5" ></text>
</g>
<g >
<title>seastar::thread_pool::work (2 samples, 0.04%)</title><rect x="1189.5" y="789" width="0.5" height="15.0" fill="rgb(220,121,22)" rx="2" ry="2" />
<text  x="1192.54" y="799.5" ></text>
</g>
<g >
<title>sstables::sstable::do_write_simple (1 samples, 0.02%)</title><rect x="15.0" y="677" width="0.2" height="15.0" fill="rgb(248,131,15)" rx="2" ry="2" />
<text  x="18.01" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (5 samples, 0.10%)</title><rect x="1037.1" y="421" width="1.1" height="15.0" fill="rgb(254,174,8)" rx="2" ry="2" />
<text  x="1040.07" y="431.5" ></text>
</g>
<g >
<title>table::set_hit_rate (5 samples, 0.10%)</title><rect x="710.7" y="661" width="1.2" height="15.0" fill="rgb(238,169,7)" rx="2" ry="2" />
<text  x="713.72" y="671.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (2 samples, 0.04%)</title><rect x="53.7" y="437" width="0.5" height="15.0" fill="rgb(222,124,41)" rx="2" ry="2" />
<text  x="56.70" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="665.9" y="645" width="0.2" height="15.0" fill="rgb(211,15,49)" rx="2" ry="2" />
<text  x="668.88" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="20.2" y="533" width="0.3" height="15.0" fill="rgb(246,64,21)" rx="2" ry="2" />
<text  x="23.24" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="435.6" y="453" width="0.2" height="15.0" fill="rgb(224,205,52)" rx="2" ry="2" />
<text  x="438.57" y="463.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_error (1 samples, 0.02%)</title><rect x="46.4" y="533" width="0.2" height="15.0" fill="rgb(223,97,40)" rx="2" ry="2" />
<text  x="49.41" y="543.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%)</title><rect x="803.6" y="325" width="0.2" height="15.0" fill="rgb(210,91,22)" rx="2" ry="2" />
<text  x="806.57" y="335.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="35.9" y="453" width="0.3" height="15.0" fill="rgb(240,180,26)" rx="2" ry="2" />
<text  x="38.94" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (9 samples, 0.17%)</title><rect x="472.7" y="485" width="2.0" height="15.0" fill="rgb(233,140,38)" rx="2" ry="2" />
<text  x="475.67" y="495.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (1 samples, 0.02%)</title><rect x="820.6" y="597" width="0.3" height="15.0" fill="rgb(210,184,34)" rx="2" ry="2" />
<text  x="823.64" y="607.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (2 samples, 0.04%)</title><rect x="83.1" y="645" width="0.4" height="15.0" fill="rgb(217,107,30)" rx="2" ry="2" />
<text  x="86.05" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="58.5" y="517" width="0.2" height="15.0" fill="rgb(237,227,46)" rx="2" ry="2" />
<text  x="61.47" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="713.0" y="581" width="0.2" height="15.0" fill="rgb(247,131,22)" rx="2" ry="2" />
<text  x="715.99" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (12 samples, 0.23%)</title><rect x="23.0" y="501" width="2.7" height="15.0" fill="rgb(234,65,1)" rx="2" ry="2" />
<text  x="25.97" y="511.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="908.0" y="485" width="0.5" height="15.0" fill="rgb(217,77,5)" rx="2" ry="2" />
<text  x="911.03" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (1 samples, 0.02%)</title><rect x="120.1" y="597" width="0.3" height="15.0" fill="rgb(219,86,28)" rx="2" ry="2" />
<text  x="123.15" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="40.7" y="421" width="0.5" height="15.0" fill="rgb(208,111,45)" rx="2" ry="2" />
<text  x="43.72" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (2 samples, 0.04%)</title><rect x="315.2" y="597" width="0.4" height="15.0" fill="rgb(226,106,6)" rx="2" ry="2" />
<text  x="318.18" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="519.8" y="389" width="0.4" height="15.0" fill="rgb(248,217,10)" rx="2" ry="2" />
<text  x="522.78" y="399.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="17.3" y="469" width="0.2" height="15.0" fill="rgb(214,92,49)" rx="2" ry="2" />
<text  x="20.28" y="479.5" ></text>
</g>
<g >
<title>validation::is_cql_key_invalid (1 samples, 0.02%)</title><rect x="870.7" y="565" width="0.2" height="15.0" fill="rgb(215,192,25)" rx="2" ry="2" />
<text  x="873.71" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_keyspace_statement, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="64.4" y="581" width="0.2" height="15.0" fill="rgb(211,138,12)" rx="2" ry="2" />
<text  x="67.39" y="591.5" ></text>
</g>
<g >
<title>cql3::functions::make_from_blob_function (1 samples, 0.02%)</title><rect x="17.1" y="613" width="0.2" height="15.0" fill="rgb(242,188,6)" rx="2" ry="2" />
<text  x="20.05" y="623.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (245 samples, 4.73%)</title><rect x="204.1" y="421" width="55.8" height="15.0" fill="rgb(208,73,10)" rx="2" ry="2" />
<text  x="207.13" y="431.5" >logal..</text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="748.7" y="501" width="0.3" height="15.0" fill="rgb(216,29,20)" rx="2" ry="2" />
<text  x="751.72" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (1 samples, 0.02%)</title><rect x="691.6" y="549" width="0.2" height="15.0" fill="rgb(220,166,24)" rx="2" ry="2" />
<text  x="694.60" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%)</title><rect x="694.8" y="693" width="0.2" height="15.0" fill="rgb(247,19,19)" rx="2" ry="2" />
<text  x="697.79" y="703.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (19 samples, 0.37%)</title><rect x="1056.4" y="517" width="4.3" height="15.0" fill="rgb(233,146,26)" rx="2" ry="2" />
<text  x="1059.41" y="527.5" ></text>
</g>
<g >
<title>table::make_reader (445 samples, 8.58%)</title><rect x="447.9" y="565" width="101.2" height="15.0" fill="rgb(229,212,31)" rx="2" ry="2" />
<text  x="450.86" y="575.5" >table::make_..</text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="530.2" y="501" width="0.5" height="15.0" fill="rgb(244,202,36)" rx="2" ry="2" />
<text  x="533.25" y="511.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="800.8" y="373" width="0.3" height="15.0" fill="rgb(241,200,33)" rx="2" ry="2" />
<text  x="803.84" y="383.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (257 samples, 4.96%)</title><rect x="19.6" y="709" width="58.4" height="15.0" fill="rgb(233,168,42)" rx="2" ry="2" />
<text  x="22.56" y="719.5" >cql3::..</text>
</g>
<g >
<title>service::abstract_write_response_handler::abstract_write_response_handler (1 samples, 0.02%)</title><rect x="1130.8" y="357" width="0.3" height="15.0" fill="rgb(211,183,8)" rx="2" ry="2" />
<text  x="1133.83" y="367.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="15.7" y="741" width="0.2" height="15.0" fill="rgb(252,116,52)" rx="2" ry="2" />
<text  x="18.69" y="751.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="503.2" y="389" width="0.2" height="15.0" fill="rgb(236,218,30)" rx="2" ry="2" />
<text  x="506.16" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="39.4" y="501" width="0.4" height="15.0" fill="rgb(222,192,18)" rx="2" ry="2" />
<text  x="42.36" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (23 samples, 0.44%)</title><rect x="421.7" y="453" width="5.2" height="15.0" fill="rgb(226,193,21)" rx="2" ry="2" />
<text  x="424.69" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::reset_state (1 samples, 0.02%)</title><rect x="82.6" y="565" width="0.2" height="15.0" fill="rgb(230,93,15)" rx="2" ry="2" />
<text  x="85.60" y="575.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="948.8" y="581" width="0.2" height="15.0" fill="rgb(243,146,10)" rx="2" ry="2" />
<text  x="951.77" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="57.1" y="437" width="0.2" height="15.0" fill="rgb(214,175,9)" rx="2" ry="2" />
<text  x="60.11" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (7 samples, 0.14%)</title><rect x="917.1" y="565" width="1.6" height="15.0" fill="rgb(205,31,43)" rx="2" ry="2" />
<text  x="920.13" y="575.5" ></text>
</g>
<g >
<title>db::block_for (1 samples, 0.02%)</title><rect x="975.2" y="565" width="0.2" height="15.0" fill="rgb(240,133,49)" rx="2" ry="2" />
<text  x="978.16" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="661.6" y="661" width="0.2" height="15.0" fill="rgb(233,0,46)" rx="2" ry="2" />
<text  x="664.56" y="671.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="432.4" y="501" width="0.9" height="15.0" fill="rgb(250,108,4)" rx="2" ry="2" />
<text  x="435.39" y="511.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="705.9" y="661" width="0.3" height="15.0" fill="rgb(231,217,40)" rx="2" ry="2" />
<text  x="708.94" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="44.6" y="373" width="0.2" height="15.0" fill="rgb(223,88,9)" rx="2" ry="2" />
<text  x="47.59" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="60.5" y="469" width="0.3" height="15.0" fill="rgb(219,224,21)" rx="2" ry="2" />
<text  x="63.52" y="479.5" ></text>
</g>
<g >
<title>from_hex (1 samples, 0.02%)</title><rect x="66.9" y="549" width="0.2" height="15.0" fill="rgb(210,128,45)" rx="2" ry="2" />
<text  x="69.89" y="559.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (25 samples, 0.48%)</title><rect x="66.4" y="645" width="5.7" height="15.0" fill="rgb(232,23,4)" rx="2" ry="2" />
<text  x="69.44" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%)</title><rect x="693.0" y="629" width="0.2" height="15.0" fill="rgb(230,183,35)" rx="2" ry="2" />
<text  x="695.97" y="639.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="578.7" y="549" width="0.2" height="15.0" fill="rgb(239,148,14)" rx="2" ry="2" />
<text  x="581.72" y="559.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (6 samples, 0.12%)</title><rect x="66.7" y="629" width="1.3" height="15.0" fill="rgb(228,158,3)" rx="2" ry="2" />
<text  x="69.67" y="639.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (1 samples, 0.02%)</title><rect x="358.2" y="389" width="0.2" height="15.0" fill="rgb(205,105,29)" rx="2" ry="2" />
<text  x="361.20" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (6 samples, 0.12%)</title><rect x="124.7" y="661" width="1.4" height="15.0" fill="rgb(225,82,21)" rx="2" ry="2" />
<text  x="127.70" y="671.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="571.7" y="501" width="1.1" height="15.0" fill="rgb(217,19,9)" rx="2" ry="2" />
<text  x="574.67" y="511.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%)</title><rect x="840.0" y="581" width="1.6" height="15.0" fill="rgb(222,208,43)" rx="2" ry="2" />
<text  x="842.98" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (2 samples, 0.04%)</title><rect x="81.2" y="629" width="0.5" height="15.0" fill="rgb(248,99,7)" rx="2" ry="2" />
<text  x="84.23" y="639.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (4 samples, 0.08%)</title><rect x="998.4" y="501" width="0.9" height="15.0" fill="rgb(232,60,7)" rx="2" ry="2" />
<text  x="1001.38" y="511.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (1 samples, 0.02%)</title><rect x="854.1" y="661" width="0.2" height="15.0" fill="rgb(224,125,35)" rx="2" ry="2" />
<text  x="857.09" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%)</title><rect x="873.9" y="485" width="0.2" height="15.0" fill="rgb(251,154,34)" rx="2" ry="2" />
<text  x="876.89" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="68.9" y="549" width="0.3" height="15.0" fill="rgb(209,163,15)" rx="2" ry="2" />
<text  x="71.94" y="559.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.69%)</title><rect x="1117.2" y="629" width="8.2" height="15.0" fill="rgb(253,34,37)" rx="2" ry="2" />
<text  x="1120.17" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="52.8" y="469" width="0.2" height="15.0" fill="rgb(205,212,48)" rx="2" ry="2" />
<text  x="55.78" y="479.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%)</title><rect x="1117.2" y="485" width="0.2" height="15.0" fill="rgb(250,159,47)" rx="2" ry="2" />
<text  x="1120.17" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="58.5" y="533" width="0.2" height="15.0" fill="rgb(253,139,12)" rx="2" ry="2" />
<text  x="61.47" y="543.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (2 samples, 0.04%)</title><rect x="1129.9" y="389" width="0.5" height="15.0" fill="rgb(246,96,35)" rx="2" ry="2" />
<text  x="1132.92" y="399.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (12 samples, 0.23%)</title><rect x="81.0" y="821" width="2.7" height="15.0" fill="rgb(216,202,21)" rx="2" ry="2" />
<text  x="84.00" y="831.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="606.3" y="597" width="0.2" height="15.0" fill="rgb(217,176,43)" rx="2" ry="2" />
<text  x="609.26" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (3 samples, 0.06%)</title><rect x="1147.7" y="613" width="0.7" height="15.0" fill="rgb(227,71,50)" rx="2" ry="2" />
<text  x="1150.67" y="623.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (4 samples, 0.08%)</title><rect x="38.9" y="549" width="0.9" height="15.0" fill="rgb(251,2,31)" rx="2" ry="2" />
<text  x="41.90" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (4 samples, 0.08%)</title><rect x="688.0" y="661" width="0.9" height="15.0" fill="rgb(208,40,46)" rx="2" ry="2" />
<text  x="690.96" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.06%)</title><rect x="1012.5" y="421" width="0.7" height="15.0" fill="rgb(211,152,15)" rx="2" ry="2" />
<text  x="1015.49" y="431.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (2 samples, 0.04%)</title><rect x="205.3" y="405" width="0.4" height="15.0" fill="rgb(208,15,35)" rx="2" ry="2" />
<text  x="208.26" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::run (4,754 samples, 91.69%)</title><rect x="84.6" y="757" width="1082.0" height="15.0" fill="rgb(243,201,53)" rx="2" ry="2" />
<text  x="87.65" y="767.5" >seastar::reactor::run</text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="577.1" y="517" width="0.3" height="15.0" fill="rgb(208,204,9)" rx="2" ry="2" />
<text  x="580.13" y="527.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (199 samples, 3.84%)</title><rect x="775.4" y="597" width="45.2" height="15.0" fill="rgb(222,3,53)" rx="2" ry="2" />
<text  x="778.35" y="607.5" >std:..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="39.4" y="389" width="0.4" height="15.0" fill="rgb(253,31,43)" rx="2" ry="2" />
<text  x="42.36" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (4 samples, 0.08%)</title><rect x="552.1" y="629" width="0.9" height="15.0" fill="rgb(211,9,39)" rx="2" ry="2" />
<text  x="555.09" y="639.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (2 samples, 0.04%)</title><rect x="1029.1" y="469" width="0.5" height="15.0" fill="rgb(207,177,51)" rx="2" ry="2" />
<text  x="1032.10" y="479.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (1 samples, 0.02%)</title><rect x="79.0" y="309" width="0.2" height="15.0" fill="rgb(231,57,6)" rx="2" ry="2" />
<text  x="81.96" y="319.5" ></text>
</g>
<g >
<title>abstract_type::from_string (2 samples, 0.04%)</title><rect x="66.7" y="581" width="0.4" height="15.0" fill="rgb(251,57,53)" rx="2" ry="2" />
<text  x="69.67" y="591.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="40.3" y="517" width="0.2" height="15.0" fill="rgb(230,13,8)" rx="2" ry="2" />
<text  x="43.27" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (278 samples, 5.36%)</title><rect x="888.2" y="629" width="63.3" height="15.0" fill="rgb(216,188,50)" rx="2" ry="2" />
<text  x="891.23" y="639.5" >cql3::..</text>
</g>
<g >
<title>locator::token_metadata_impl::pending_endpoints_for (1 samples, 0.02%)</title><rect x="1130.6" y="389" width="0.2" height="15.0" fill="rgb(206,211,48)" rx="2" ry="2" />
<text  x="1133.60" y="399.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%)</title><rect x="15.7" y="725" width="0.2" height="15.0" fill="rgb(252,192,39)" rx="2" ry="2" />
<text  x="18.69" y="735.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1021.1" y="341" width="0.3" height="15.0" fill="rgb(238,67,42)" rx="2" ry="2" />
<text  x="1024.14" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="866.6" y="565" width="0.2" height="15.0" fill="rgb(253,175,43)" rx="2" ry="2" />
<text  x="869.61" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="55.1" y="373" width="0.4" height="15.0" fill="rgb(251,198,46)" rx="2" ry="2" />
<text  x="58.06" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.04%)</title><rect x="690.7" y="629" width="0.4" height="15.0" fill="rgb(240,13,12)" rx="2" ry="2" />
<text  x="693.69" y="639.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (2 samples, 0.04%)</title><rect x="68.7" y="581" width="0.5" height="15.0" fill="rgb(208,86,38)" rx="2" ry="2" />
<text  x="71.72" y="591.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (1 samples, 0.02%)</title><rect x="81.2" y="549" width="0.3" height="15.0" fill="rgb(228,60,4)" rx="2" ry="2" />
<text  x="84.23" y="559.5" ></text>
</g>
<g >
<title>std::operator== (1 samples, 0.02%)</title><rect x="36.6" y="517" width="0.3" height="15.0" fill="rgb(225,100,39)" rx="2" ry="2" />
<text  x="39.63" y="527.5" ></text>
</g>
<g >
<title>query::querier_base::close (129 samples, 2.49%)</title><rect x="561.0" y="645" width="29.3" height="15.0" fill="rgb(229,84,5)" rx="2" ry="2" />
<text  x="563.97" y="655.5" >qu..</text>
</g>
<g >
<title>seastar::thread_context::thread_context (2 samples, 0.04%)</title><rect x="1131.7" y="549" width="0.5" height="15.0" fill="rgb(210,46,34)" rx="2" ry="2" />
<text  x="1134.74" y="559.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (1 samples, 0.02%)</title><rect x="455.4" y="533" width="0.2" height="15.0" fill="rgb(235,71,26)" rx="2" ry="2" />
<text  x="458.37" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (6 samples, 0.12%)</title><rect x="685.7" y="677" width="1.3" height="15.0" fill="rgb(219,226,7)" rx="2" ry="2" />
<text  x="688.68" y="687.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="112.9" y="661" width="0.2" height="15.0" fill="rgb(205,29,42)" rx="2" ry="2" />
<text  x="115.87" y="671.5" ></text>
</g>
<g >
<title>sstring_hash::operator (2 samples, 0.04%)</title><rect x="848.4" y="581" width="0.5" height="15.0" fill="rgb(216,190,3)" rx="2" ry="2" />
<text  x="851.40" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="660.2" y="645" width="0.2" height="15.0" fill="rgb(212,77,50)" rx="2" ry="2" />
<text  x="663.19" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%)</title><rect x="45.7" y="485" width="0.5" height="15.0" fill="rgb(237,15,26)" rx="2" ry="2" />
<text  x="48.73" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="691.6" y="613" width="0.7" height="15.0" fill="rgb(205,4,42)" rx="2" ry="2" />
<text  x="694.60" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="653.8" y="661" width="0.3" height="15.0" fill="rgb(207,97,21)" rx="2" ry="2" />
<text  x="656.82" y="671.5" ></text>
</g>
<g >
<title>db::schema_tables::compact_for_schema_digest (1 samples, 0.02%)</title><rect x="103.5" y="629" width="0.3" height="15.0" fill="rgb(229,0,7)" rx="2" ry="2" />
<text  x="106.54" y="639.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (3 samples, 0.06%)</title><rect x="322.0" y="517" width="0.7" height="15.0" fill="rgb(248,61,38)" rx="2" ry="2" />
<text  x="325.01" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1159.3" y="661" width="0.2" height="15.0" fill="rgb(243,186,51)" rx="2" ry="2" />
<text  x="1162.28" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="55.1" y="341" width="0.4" height="15.0" fill="rgb(205,144,13)" rx="2" ry="2" />
<text  x="58.06" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="652.9" y="549" width="0.2" height="15.0" fill="rgb(251,144,54)" rx="2" ry="2" />
<text  x="655.91" y="559.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (6 samples, 0.12%)</title><rect x="830.7" y="581" width="1.3" height="15.0" fill="rgb(227,71,3)" rx="2" ry="2" />
<text  x="833.65" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (4 samples, 0.08%)</title><rect x="15.7" y="773" width="0.9" height="15.0" fill="rgb(242,104,32)" rx="2" ry="2" />
<text  x="18.69" y="783.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (4 samples, 0.08%)</title><rect x="869.8" y="581" width="0.9" height="15.0" fill="rgb(243,46,49)" rx="2" ry="2" />
<text  x="872.80" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (4 samples, 0.08%)</title><rect x="126.5" y="661" width="0.9" height="15.0" fill="rgb(245,66,21)" rx="2" ry="2" />
<text  x="129.52" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (6 samples, 0.12%)</title><rect x="41.6" y="485" width="1.4" height="15.0" fill="rgb(216,68,18)" rx="2" ry="2" />
<text  x="44.63" y="495.5" ></text>
</g>
<g >
<title>boost::program_options::options_description_easy_init::operator (1 samples, 0.02%)</title><rect x="80.3" y="821" width="0.2" height="15.0" fill="rgb(246,107,4)" rx="2" ry="2" />
<text  x="83.32" y="831.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (2 samples, 0.04%)</title><rect x="261.2" y="389" width="0.5" height="15.0" fill="rgb(239,97,14)" rx="2" ry="2" />
<text  x="264.25" y="399.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (3 samples, 0.06%)</title><rect x="521.6" y="405" width="0.7" height="15.0" fill="rgb(254,21,37)" rx="2" ry="2" />
<text  x="524.60" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="785.4" y="485" width="0.2" height="15.0" fill="rgb(251,47,6)" rx="2" ry="2" />
<text  x="788.36" y="495.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="208.4" y="389" width="0.3" height="15.0" fill="rgb(250,84,32)" rx="2" ry="2" />
<text  x="211.45" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="248.0" y="357" width="0.3" height="15.0" fill="rgb(237,182,2)" rx="2" ry="2" />
<text  x="251.05" y="367.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="83.7" y="677" width="0.3" height="15.0" fill="rgb(211,21,34)" rx="2" ry="2" />
<text  x="86.74" y="687.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt;, service::client_state::check_has_permission (1 samples, 0.02%)</title><rect x="817.2" y="549" width="0.3" height="15.0" fill="rgb(253,8,52)" rx="2" ry="2" />
<text  x="820.22" y="559.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="653.8" y="597" width="0.3" height="15.0" fill="rgb(243,116,30)" rx="2" ry="2" />
<text  x="656.82" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (3 samples, 0.06%)</title><rect x="607.4" y="645" width="0.7" height="15.0" fill="rgb(252,108,51)" rx="2" ry="2" />
<text  x="610.40" y="655.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1 samples, 0.02%)</title><rect x="15.0" y="645" width="0.2" height="15.0" fill="rgb(248,50,15)" rx="2" ry="2" />
<text  x="18.01" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="692.3" y="629" width="0.2" height="15.0" fill="rgb(250,89,23)" rx="2" ry="2" />
<text  x="695.28" y="639.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="662.9" y="693" width="1.2" height="15.0" fill="rgb(219,155,54)" rx="2" ry="2" />
<text  x="665.93" y="703.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="311.3" y="517" width="0.2" height="15.0" fill="rgb(238,124,10)" rx="2" ry="2" />
<text  x="314.32" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="79.0" y="181" width="0.2" height="15.0" fill="rgb(246,201,19)" rx="2" ry="2" />
<text  x="81.96" y="191.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (12 samples, 0.23%)</title><rect x="872.1" y="533" width="2.7" height="15.0" fill="rgb(252,172,3)" rx="2" ry="2" />
<text  x="875.07" y="543.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="48.2" y="501" width="0.3" height="15.0" fill="rgb(228,126,4)" rx="2" ry="2" />
<text  x="51.23" y="511.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="22.5" y="421" width="0.2" height="15.0" fill="rgb(252,201,53)" rx="2" ry="2" />
<text  x="25.52" y="431.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (1 samples, 0.02%)</title><rect x="43.0" y="517" width="0.2" height="15.0" fill="rgb(222,157,9)" rx="2" ry="2" />
<text  x="46.00" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6 samples, 0.12%)</title><rect x="1086.0" y="565" width="1.4" height="15.0" fill="rgb(242,21,12)" rx="2" ry="2" />
<text  x="1089.00" y="575.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (1 samples, 0.02%)</title><rect x="819.3" y="533" width="0.2" height="15.0" fill="rgb(215,101,41)" rx="2" ry="2" />
<text  x="822.27" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;5ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="245" width="0.3" height="15.0" fill="rgb(214,92,26)" rx="2" ry="2" />
<text  x="62.84" y="255.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="80.8" y="725" width="0.2" height="15.0" fill="rgb(231,65,41)" rx="2" ry="2" />
<text  x="83.78" y="735.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (3 samples, 0.06%)</title><rect x="451.7" y="549" width="0.7" height="15.0" fill="rgb(221,17,41)" rx="2" ry="2" />
<text  x="454.73" y="559.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;cql3::query_processor&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="79.0" y="597" width="0.2" height="15.0" fill="rgb(239,218,23)" rx="2" ry="2" />
<text  x="81.96" y="607.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (27 samples, 0.52%)</title><rect x="421.0" y="469" width="6.2" height="15.0" fill="rgb(223,193,34)" rx="2" ry="2" />
<text  x="424.01" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="593.7" y="597" width="0.5" height="15.0" fill="rgb(246,127,39)" rx="2" ry="2" />
<text  x="596.74" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="54.6" y="341" width="0.2" height="15.0" fill="rgb(226,153,28)" rx="2" ry="2" />
<text  x="57.61" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (192 samples, 3.70%)</title><rect x="21.8" y="629" width="43.7" height="15.0" fill="rgb(221,5,25)" rx="2" ry="2" />
<text  x="24.83" y="639.5" >seas..</text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::constants::value, true&gt;::make&lt;cql3::raw_value, seastar::shared_ptr&lt;abstract_type const&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="67.6" y="581" width="0.2" height="15.0" fill="rgb(234,186,42)" rx="2" ry="2" />
<text  x="70.58" y="591.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="931.2" y="581" width="0.3" height="15.0" fill="rgb(229,134,3)" rx="2" ry="2" />
<text  x="934.24" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="45.7" y="421" width="0.5" height="15.0" fill="rgb(229,34,32)" rx="2" ry="2" />
<text  x="48.73" y="431.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (5 samples, 0.10%)</title><rect x="481.8" y="485" width="1.1" height="15.0" fill="rgb(250,39,31)" rx="2" ry="2" />
<text  x="484.77" y="495.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1189.1" y="821" width="0.2" height="15.0" fill="rgb(221,132,38)" rx="2" ry="2" />
<text  x="1192.09" y="831.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (3 samples, 0.06%)</title><rect x="955.4" y="581" width="0.6" height="15.0" fill="rgb(225,169,18)" rx="2" ry="2" />
<text  x="958.37" y="591.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%)</title><rect x="956.3" y="597" width="0.2" height="15.0" fill="rgb(233,102,44)" rx="2" ry="2" />
<text  x="959.28" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="52.6" y="469" width="0.2" height="15.0" fill="rgb(205,172,19)" rx="2" ry="2" />
<text  x="55.56" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (2 samples, 0.04%)</title><rect x="894.1" y="565" width="0.5" height="15.0" fill="rgb(245,202,1)" rx="2" ry="2" />
<text  x="897.15" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (3 samples, 0.06%)</title><rect x="1039.6" y="501" width="0.7" height="15.0" fill="rgb(247,121,37)" rx="2" ry="2" />
<text  x="1042.57" y="511.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (1 samples, 0.02%)</title><rect x="22.1" y="581" width="0.2" height="15.0" fill="rgb(216,210,52)" rx="2" ry="2" />
<text  x="25.06" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="268.8" y="421" width="0.2" height="15.0" fill="rgb(229,130,14)" rx="2" ry="2" />
<text  x="271.76" y="431.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="17.3" y="501" width="0.2" height="15.0" fill="rgb(209,31,6)" rx="2" ry="2" />
<text  x="20.28" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (21 samples, 0.41%)</title><rect x="649.3" y="709" width="4.8" height="15.0" fill="rgb(234,194,13)" rx="2" ry="2" />
<text  x="652.27" y="719.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.08%)</title><rect x="1117.6" y="389" width="0.9" height="15.0" fill="rgb(205,159,54)" rx="2" ry="2" />
<text  x="1120.63" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="267.4" y="437" width="0.2" height="15.0" fill="rgb(228,147,51)" rx="2" ry="2" />
<text  x="270.39" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.08%)</title><rect x="763.7" y="549" width="1.0" height="15.0" fill="rgb(235,8,11)" rx="2" ry="2" />
<text  x="766.74" y="559.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.14%)</title><rect x="693.2" y="693" width="1.6" height="15.0" fill="rgb(213,12,4)" rx="2" ry="2" />
<text  x="696.19" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;cql3::prepared_cache_key_type, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, cql3::query_processor::prepare_one&lt;cql_transport::messages::result_message::prepared::cql, cql3::prepared_cache_key_type  (1 samples, 0.02%)</title><rect x="79.0" y="453" width="0.2" height="15.0" fill="rgb(223,112,28)" rx="2" ry="2" />
<text  x="81.96" y="463.5" ></text>
</g>
<g >
<title>ser::start_frame&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1124.5" y="437" width="0.2" height="15.0" fill="rgb(213,103,51)" rx="2" ry="2" />
<text  x="1127.46" y="447.5" ></text>
</g>
<g >
<title>make_combined_reader (96 samples, 1.85%)</title><rect x="453.8" y="549" width="21.8" height="15.0" fill="rgb(245,79,17)" rx="2" ry="2" />
<text  x="456.78" y="559.5" >m..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (4 samples, 0.08%)</title><rect x="1012.3" y="437" width="0.9" height="15.0" fill="rgb(223,216,1)" rx="2" ry="2" />
<text  x="1015.26" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="97.6" y="645" width="0.2" height="15.0" fill="rgb(246,172,9)" rx="2" ry="2" />
<text  x="100.62" y="655.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="630.6" y="613" width="0.2" height="15.0" fill="rgb(250,176,28)" rx="2" ry="2" />
<text  x="633.61" y="623.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (6 samples, 0.12%)</title><rect x="637.9" y="693" width="1.4" height="15.0" fill="rgb(237,24,13)" rx="2" ry="2" />
<text  x="640.89" y="703.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (44 samples, 0.85%)</title><rect x="703.0" y="709" width="10.0" height="15.0" fill="rgb(231,86,10)" rx="2" ry="2" />
<text  x="705.98" y="719.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (6 samples, 0.12%)</title><rect x="1126.1" y="469" width="1.3" height="15.0" fill="rgb(241,23,16)" rx="2" ry="2" />
<text  x="1129.05" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="722.6" y="645" width="0.2" height="15.0" fill="rgb(237,141,49)" rx="2" ry="2" />
<text  x="725.55" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (53 samples, 1.02%)</title><rect x="301.5" y="565" width="12.1" height="15.0" fill="rgb(253,62,51)" rx="2" ry="2" />
<text  x="304.53" y="575.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (54 samples, 1.04%)</title><rect x="455.8" y="517" width="12.3" height="15.0" fill="rgb(222,214,5)" rx="2" ry="2" />
<text  x="458.83" y="527.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="79.0" y="677" width="0.2" height="15.0" fill="rgb(249,1,2)" rx="2" ry="2" />
<text  x="81.96" y="687.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="551.6" y="613" width="0.3" height="15.0" fill="rgb(238,66,44)" rx="2" ry="2" />
<text  x="554.64" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="706.6" y="645" width="0.2" height="15.0" fill="rgb(234,227,35)" rx="2" ry="2" />
<text  x="709.62" y="655.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="103.1" y="533" width="0.2" height="15.0" fill="rgb(248,108,12)" rx="2" ry="2" />
<text  x="106.08" y="543.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="522.1" y="373" width="0.2" height="15.0" fill="rgb(245,70,35)" rx="2" ry="2" />
<text  x="525.05" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="536.2" y="533" width="0.2" height="15.0" fill="rgb(219,38,8)" rx="2" ry="2" />
<text  x="539.16" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="322.0" y="485" width="0.2" height="15.0" fill="rgb(228,155,42)" rx="2" ry="2" />
<text  x="325.01" y="495.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (3 samples, 0.06%)</title><rect x="211.2" y="341" width="0.7" height="15.0" fill="rgb(225,47,21)" rx="2" ry="2" />
<text  x="214.18" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (4 samples, 0.08%)</title><rect x="587.4" y="581" width="0.9" height="15.0" fill="rgb(219,26,27)" rx="2" ry="2" />
<text  x="590.37" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="569.2" y="501" width="0.2" height="15.0" fill="rgb(236,89,30)" rx="2" ry="2" />
<text  x="572.16" y="511.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="45.0" y="357" width="0.3" height="15.0" fill="rgb(209,214,34)" rx="2" ry="2" />
<text  x="48.05" y="367.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (8 samples, 0.15%)</title><rect x="44.6" y="517" width="1.8" height="15.0" fill="rgb(252,195,38)" rx="2" ry="2" />
<text  x="47.59" y="527.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (5 samples, 0.10%)</title><rect x="545.0" y="469" width="1.2" height="15.0" fill="rgb(234,54,52)" rx="2" ry="2" />
<text  x="548.04" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (4 samples, 0.08%)</title><rect x="1031.8" y="485" width="0.9" height="15.0" fill="rgb(230,162,45)" rx="2" ry="2" />
<text  x="1034.83" y="495.5" ></text>
</g>
<g >
<title>seastar::smp::poll_queues (1 samples, 0.02%)</title><rect x="1165.2" y="693" width="0.2" height="15.0" fill="rgb(226,37,54)" rx="2" ry="2" />
<text  x="1168.19" y="703.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (8 samples, 0.15%)</title><rect x="118.6" y="613" width="1.8" height="15.0" fill="rgb(244,26,10)" rx="2" ry="2" />
<text  x="121.56" y="623.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (85 samples, 1.64%)</title><rect x="654.1" y="709" width="19.3" height="15.0" fill="rgb(228,178,25)" rx="2" ry="2" />
<text  x="657.05" y="719.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (10 samples, 0.19%)</title><rect x="656.1" y="677" width="2.3" height="15.0" fill="rgb(212,19,18)" rx="2" ry="2" />
<text  x="659.10" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (8 samples, 0.15%)</title><rect x="462.4" y="469" width="1.8" height="15.0" fill="rgb(241,101,10)" rx="2" ry="2" />
<text  x="465.43" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="247.4" y="373" width="0.2" height="15.0" fill="rgb(223,110,10)" rx="2" ry="2" />
<text  x="250.37" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (29 samples, 0.56%)</title><rect x="641.1" y="709" width="6.6" height="15.0" fill="rgb(248,66,19)" rx="2" ry="2" />
<text  x="644.08" y="719.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (1 samples, 0.02%)</title><rect x="80.8" y="501" width="0.2" height="15.0" fill="rgb(229,217,43)" rx="2" ry="2" />
<text  x="83.78" y="511.5" ></text>
</g>
<g >
<title>dht::shard_of (1 samples, 0.02%)</title><rect x="1126.7" y="373" width="0.3" height="15.0" fill="rgb(236,105,53)" rx="2" ry="2" />
<text  x="1129.73" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="432.2" y="485" width="0.2" height="15.0" fill="rgb(217,128,28)" rx="2" ry="2" />
<text  x="435.16" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (2 samples, 0.04%)</title><rect x="1103.5" y="629" width="0.5" height="15.0" fill="rgb(233,166,32)" rx="2" ry="2" />
<text  x="1106.52" y="639.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (2 samples, 0.04%)</title><rect x="872.8" y="485" width="0.4" height="15.0" fill="rgb(254,25,43)" rx="2" ry="2" />
<text  x="875.75" y="495.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (3 samples, 0.06%)</title><rect x="869.8" y="549" width="0.7" height="15.0" fill="rgb(209,138,22)" rx="2" ry="2" />
<text  x="872.80" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="41.2" y="453" width="0.4" height="15.0" fill="rgb(252,111,25)" rx="2" ry="2" />
<text  x="44.18" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (2 samples, 0.04%)</title><rect x="44.8" y="389" width="0.5" height="15.0" fill="rgb(239,34,47)" rx="2" ry="2" />
<text  x="47.82" y="399.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (2 samples, 0.04%)</title><rect x="758.1" y="581" width="0.4" height="15.0" fill="rgb(208,63,14)" rx="2" ry="2" />
<text  x="761.05" y="591.5" ></text>
</g>
<g >
<title>row::append_cell (2 samples, 0.04%)</title><rect x="1120.6" y="421" width="0.4" height="15.0" fill="rgb(208,147,41)" rx="2" ry="2" />
<text  x="1123.59" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="59.4" y="517" width="0.2" height="15.0" fill="rgb(244,112,18)" rx="2" ry="2" />
<text  x="62.38" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%)</title><rect x="791.7" y="453" width="0.9" height="15.0" fill="rgb(219,185,48)" rx="2" ry="2" />
<text  x="794.74" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="861.8" y="629" width="0.5" height="15.0" fill="rgb(217,24,43)" rx="2" ry="2" />
<text  x="864.83" y="639.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (6 samples, 0.12%)</title><rect x="757.1" y="597" width="1.4" height="15.0" fill="rgb(228,169,53)" rx="2" ry="2" />
<text  x="760.14" y="607.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (175 samples, 3.38%)</title><rect x="777.9" y="565" width="39.8" height="15.0" fill="rgb(232,197,6)" rx="2" ry="2" />
<text  x="780.85" y="575.5" >ser..</text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (2 samples, 0.04%)</title><rect x="392.8" y="373" width="0.4" height="15.0" fill="rgb(231,33,48)" rx="2" ry="2" />
<text  x="395.79" y="383.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (1 samples, 0.02%)</title><rect x="417.8" y="437" width="0.3" height="15.0" fill="rgb(209,199,12)" rx="2" ry="2" />
<text  x="420.82" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (2 samples, 0.04%)</title><rect x="886.0" y="629" width="0.4" height="15.0" fill="rgb(240,187,35)" rx="2" ry="2" />
<text  x="888.95" y="639.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (1 samples, 0.02%)</title><rect x="1130.8" y="405" width="0.3" height="15.0" fill="rgb(209,106,7)" rx="2" ry="2" />
<text  x="1133.83" y="415.5" ></text>
</g>
<g >
<title>database::find_schema (27 samples, 0.52%)</title><rect x="763.1" y="613" width="6.1" height="15.0" fill="rgb(215,189,0)" rx="2" ry="2" />
<text  x="766.06" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="322.5" y="501" width="0.2" height="15.0" fill="rgb(224,168,31)" rx="2" ry="2" />
<text  x="325.47" y="511.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (21 samples, 0.41%)</title><rect x="306.5" y="517" width="4.8" height="15.0" fill="rgb(213,184,47)" rx="2" ry="2" />
<text  x="309.54" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="1134.5" y="709" width="0.2" height="15.0" fill="rgb(253,172,7)" rx="2" ry="2" />
<text  x="1137.47" y="719.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="103.8" y="437" width="0.2" height="15.0" fill="rgb(237,188,9)" rx="2" ry="2" />
<text  x="106.76" y="447.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (2 samples, 0.04%)</title><rect x="831.3" y="485" width="0.5" height="15.0" fill="rgb(254,138,5)" rx="2" ry="2" />
<text  x="834.33" y="495.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::work_item_returning&lt;seastar::syscall_result&lt;int&gt; &gt;::process (1 samples, 0.02%)</title><rect x="1189.8" y="773" width="0.2" height="15.0" fill="rgb(240,203,45)" rx="2" ry="2" />
<text  x="1192.77" y="783.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (17 samples, 0.33%)</title><rect x="1127.4" y="485" width="3.9" height="15.0" fill="rgb(251,178,48)" rx="2" ry="2" />
<text  x="1130.42" y="495.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="10.2" y="677" width="0.3" height="15.0" fill="rgb(252,116,35)" rx="2" ry="2" />
<text  x="13.23" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (17 samples, 0.33%)</title><rect x="1034.3" y="469" width="3.9" height="15.0" fill="rgb(227,137,39)" rx="2" ry="2" />
<text  x="1037.34" y="479.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_channel (1 samples, 0.02%)</title><rect x="28.7" y="469" width="0.2" height="15.0" fill="rgb(209,27,6)" rx="2" ry="2" />
<text  x="31.66" y="479.5" ></text>
</g>
<g >
<title>memtable_entry::memtable_entry (2 samples, 0.04%)</title><rect x="1117.6" y="357" width="0.5" height="15.0" fill="rgb(234,87,48)" rx="2" ry="2" />
<text  x="1120.63" y="367.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="794.9" y="373" width="0.2" height="15.0" fill="rgb(221,27,11)" rx="2" ry="2" />
<text  x="797.92" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="79.0" y="53" width="0.2" height="15.0" fill="rgb(253,93,40)" rx="2" ry="2" />
<text  x="81.96" y="63.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (482 samples, 9.30%)</title><rect x="322.7" y="517" width="109.7" height="15.0" fill="rgb(242,194,3)" rx="2" ry="2" />
<text  x="325.69" y="527.5" >std::__invoke..</text>
</g>
<g >
<title>reader_permit::impl::impl (4 samples, 0.08%)</title><rect x="1025.7" y="421" width="0.9" height="15.0" fill="rgb(212,141,45)" rx="2" ry="2" />
<text  x="1028.69" y="431.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="277.4" y="389" width="0.5" height="15.0" fill="rgb(214,65,40)" rx="2" ry="2" />
<text  x="280.41" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="1120.1" y="437" width="0.3" height="15.0" fill="rgb(222,84,48)" rx="2" ry="2" />
<text  x="1123.13" y="447.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%)</title><rect x="848.4" y="565" width="0.5" height="15.0" fill="rgb(227,110,37)" rx="2" ry="2" />
<text  x="851.40" y="575.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (315 samples, 6.08%)</title><rect x="761.2" y="629" width="71.7" height="15.0" fill="rgb(225,115,23)" rx="2" ry="2" />
<text  x="764.24" y="639.5" >cql3::st..</text>
</g>
<g >
<title>seastar::continuation_base_with_promise&lt;seastar::internal::promise_base_with_type&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;, void&gt;::waiting_task (1 samples, 0.02%)</title><rect x="80.8" y="821" width="0.2" height="15.0" fill="rgb(213,16,36)" rx="2" ry="2" />
<text  x="83.78" y="831.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="71.4" y="613" width="0.3" height="15.0" fill="rgb(233,94,30)" rx="2" ry="2" />
<text  x="74.45" y="623.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="1028.0" y="469" width="1.1" height="15.0" fill="rgb(250,2,12)" rx="2" ry="2" />
<text  x="1030.96" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="644.7" y="693" width="0.2" height="15.0" fill="rgb(207,155,33)" rx="2" ry="2" />
<text  x="647.72" y="703.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%)</title><rect x="989.5" y="501" width="0.5" height="15.0" fill="rgb(230,103,5)" rx="2" ry="2" />
<text  x="992.50" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (2 samples, 0.04%)</title><rect x="1007.3" y="485" width="0.4" height="15.0" fill="rgb(213,206,6)" rx="2" ry="2" />
<text  x="1010.25" y="495.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (23 samples, 0.44%)</title><rect x="746.7" y="581" width="5.2" height="15.0" fill="rgb(231,146,29)" rx="2" ry="2" />
<text  x="749.68" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1030.5" y="485" width="0.2" height="15.0" fill="rgb(205,130,25)" rx="2" ry="2" />
<text  x="1033.47" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1110.1" y="597" width="0.2" height="15.0" fill="rgb(214,138,21)" rx="2" ry="2" />
<text  x="1113.12" y="607.5" ></text>
</g>
<g >
<title>operator delete (10 samples, 0.19%)</title><rect x="428.1" y="453" width="2.2" height="15.0" fill="rgb(238,181,39)" rx="2" ry="2" />
<text  x="431.06" y="463.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (44 samples, 0.85%)</title><rect x="578.5" y="597" width="10.0" height="15.0" fill="rgb(225,93,7)" rx="2" ry="2" />
<text  x="581.49" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%)</title><rect x="95.3" y="629" width="0.7" height="15.0" fill="rgb(233,110,11)" rx="2" ry="2" />
<text  x="98.34" y="639.5" ></text>
</g>
<g >
<title>database::find_uuid (19 samples, 0.37%)</title><rect x="764.9" y="597" width="4.3" height="15.0" fill="rgb(234,50,40)" rx="2" ry="2" />
<text  x="767.88" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (15 samples, 0.29%)</title><rect x="556.9" y="565" width="3.4" height="15.0" fill="rgb(226,11,11)" rx="2" ry="2" />
<text  x="559.87" y="575.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (1 samples, 0.02%)</title><rect x="333.8" y="405" width="0.3" height="15.0" fill="rgb(235,191,21)" rx="2" ry="2" />
<text  x="336.85" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="47.6" y="453" width="0.6" height="15.0" fill="rgb(233,65,32)" rx="2" ry="2" />
<text  x="50.55" y="463.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="632.7" y="693" width="0.2" height="15.0" fill="rgb(238,29,15)" rx="2" ry="2" />
<text  x="635.66" y="703.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="103.1" y="549" width="0.2" height="15.0" fill="rgb(205,70,2)" rx="2" ry="2" />
<text  x="106.08" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (4 samples, 0.08%)</title><rect x="984.7" y="517" width="0.9" height="15.0" fill="rgb(251,86,22)" rx="2" ry="2" />
<text  x="987.72" y="527.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (1 samples, 0.02%)</title><rect x="604.2" y="597" width="0.2" height="15.0" fill="rgb(238,38,11)" rx="2" ry="2" />
<text  x="607.21" y="607.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (1 samples, 0.02%)</title><rect x="601.0" y="645" width="0.3" height="15.0" fill="rgb(252,138,15)" rx="2" ry="2" />
<text  x="604.02" y="655.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="796.1" y="421" width="0.6" height="15.0" fill="rgb(206,66,24)" rx="2" ry="2" />
<text  x="799.06" y="431.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;sstables::sstable_directory&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="15.5" y="741" width="0.2" height="15.0" fill="rgb(224,144,15)" rx="2" ry="2" />
<text  x="18.46" y="751.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="83.7" y="645" width="0.3" height="15.0" fill="rgb(242,59,51)" rx="2" ry="2" />
<text  x="86.74" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="45.3" y="405" width="0.4" height="15.0" fill="rgb(208,178,19)" rx="2" ry="2" />
<text  x="48.27" y="415.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (45 samples, 0.87%)</title><rect x="335.2" y="405" width="10.3" height="15.0" fill="rgb(226,22,2)" rx="2" ry="2" />
<text  x="338.21" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="771.0" y="565" width="0.3" height="15.0" fill="rgb(244,55,16)" rx="2" ry="2" />
<text  x="774.03" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (5 samples, 0.10%)</title><rect x="652.9" y="693" width="1.2" height="15.0" fill="rgb(252,7,0)" rx="2" ry="2" />
<text  x="655.91" y="703.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="691.8" y="453" width="0.3" height="15.0" fill="rgb(248,31,12)" rx="2" ry="2" />
<text  x="694.83" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="569.6" y="469" width="0.2" height="15.0" fill="rgb(246,63,10)" rx="2" ry="2" />
<text  x="572.62" y="479.5" ></text>
</g>
<g >
<title>db::system_keyspace::all_tables (1 samples, 0.02%)</title><rect x="16.6" y="501" width="0.2" height="15.0" fill="rgb(223,30,33)" rx="2" ry="2" />
<text  x="19.60" y="511.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.14%)</title><rect x="807.7" y="453" width="1.6" height="15.0" fill="rgb(205,111,52)" rx="2" ry="2" />
<text  x="810.67" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="40.3" y="453" width="0.2" height="15.0" fill="rgb(230,122,38)" rx="2" ry="2" />
<text  x="43.27" y="463.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="873.0" y="453" width="0.2" height="15.0" fill="rgb(227,116,6)" rx="2" ry="2" />
<text  x="875.98" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="55.5" y="357" width="0.2" height="15.0" fill="rgb(226,155,18)" rx="2" ry="2" />
<text  x="58.52" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::syscall_pollfn::poll (2 samples, 0.04%)</title><rect x="1165.4" y="709" width="0.5" height="15.0" fill="rgb(250,92,29)" rx="2" ry="2" />
<text  x="1168.42" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="521.1" y="389" width="0.5" height="15.0" fill="rgb(220,112,44)" rx="2" ry="2" />
<text  x="524.14" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::reserve (1 samples, 0.02%)</title><rect x="1087.6" y="565" width="0.2" height="15.0" fill="rgb(236,89,31)" rx="2" ry="2" />
<text  x="1090.59" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="273.3" y="421" width="0.2" height="15.0" fill="rgb(216,23,7)" rx="2" ry="2" />
<text  x="276.31" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (12 samples, 0.23%)</title><rect x="994.3" y="485" width="2.7" height="15.0" fill="rgb(227,56,31)" rx="2" ry="2" />
<text  x="997.28" y="495.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="57.1" y="405" width="0.2" height="15.0" fill="rgb(207,50,42)" rx="2" ry="2" />
<text  x="60.11" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="410.5" y="373" width="0.7" height="15.0" fill="rgb(250,179,6)" rx="2" ry="2" />
<text  x="413.54" y="383.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (1 samples, 0.02%)</title><rect x="103.3" y="613" width="0.2" height="15.0" fill="rgb(207,13,1)" rx="2" ry="2" />
<text  x="106.31" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::pop_back (1 samples, 0.02%)</title><rect x="22.1" y="565" width="0.2" height="15.0" fill="rgb(251,118,40)" rx="2" ry="2" />
<text  x="25.06" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="40.3" y="437" width="0.2" height="15.0" fill="rgb(213,151,24)" rx="2" ry="2" />
<text  x="43.27" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::~statement_restrictions (2 samples, 0.04%)</title><rect x="652.9" y="661" width="0.5" height="15.0" fill="rgb(227,38,41)" rx="2" ry="2" />
<text  x="655.91" y="671.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (4 samples, 0.08%)</title><rect x="44.8" y="485" width="0.9" height="15.0" fill="rgb(227,62,0)" rx="2" ry="2" />
<text  x="47.82" y="495.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (2 samples, 0.04%)</title><rect x="104.0" y="629" width="0.4" height="15.0" fill="rgb(218,177,38)" rx="2" ry="2" />
<text  x="106.99" y="639.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="567.6" y="517" width="0.2" height="15.0" fill="rgb(242,19,46)" rx="2" ry="2" />
<text  x="570.57" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;std::vector&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::allocator&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="869.1" y="581" width="0.2" height="15.0" fill="rgb(224,125,24)" rx="2" ry="2" />
<text  x="872.11" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%)</title><rect x="23.9" y="373" width="0.2" height="15.0" fill="rgb(227,222,46)" rx="2" ry="2" />
<text  x="26.88" y="383.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="828.1" y="469" width="0.3" height="15.0" fill="rgb(208,24,24)" rx="2" ry="2" />
<text  x="831.15" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (1 samples, 0.02%)</title><rect x="625.6" y="597" width="0.2" height="15.0" fill="rgb(250,150,39)" rx="2" ry="2" />
<text  x="628.60" y="607.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (1 samples, 0.02%)</title><rect x="181.4" y="453" width="0.2" height="15.0" fill="rgb(254,194,4)" rx="2" ry="2" />
<text  x="184.37" y="463.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="45.3" y="373" width="0.4" height="15.0" fill="rgb(231,114,17)" rx="2" ry="2" />
<text  x="48.27" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="196.8" y="389" width="0.3" height="15.0" fill="rgb(214,83,11)" rx="2" ry="2" />
<text  x="199.84" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1109.0" y="581" width="0.4" height="15.0" fill="rgb(243,208,32)" rx="2" ry="2" />
<text  x="1111.98" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1030.7" y="485" width="0.2" height="15.0" fill="rgb(205,84,29)" rx="2" ry="2" />
<text  x="1033.69" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%)</title><rect x="1125.8" y="453" width="0.3" height="15.0" fill="rgb(221,90,51)" rx="2" ry="2" />
<text  x="1128.82" y="463.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (1 samples, 0.02%)</title><rect x="368.4" y="373" width="0.3" height="15.0" fill="rgb(241,52,32)" rx="2" ry="2" />
<text  x="371.44" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (12 samples, 0.23%)</title><rect x="726.6" y="629" width="2.8" height="15.0" fill="rgb(210,181,22)" rx="2" ry="2" />
<text  x="729.65" y="639.5" ></text>
</g>
<g >
<title>db::cql_type_parser::parse (1 samples, 0.02%)</title><rect x="104.0" y="597" width="0.2" height="15.0" fill="rgb(251,45,50)" rx="2" ry="2" />
<text  x="106.99" y="607.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::intrusive_array&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, dht::decorated_key, mutation_partition&gt; (3 samples, 0.06%)</title><rect x="1117.6" y="373" width="0.7" height="15.0" fill="rgb(238,42,2)" rx="2" ry="2" />
<text  x="1120.63" y="383.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="80.8" y="565" width="0.2" height="15.0" fill="rgb(231,67,31)" rx="2" ry="2" />
<text  x="83.78" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%)</title><rect x="1155.2" y="693" width="0.7" height="15.0" fill="rgb(222,169,40)" rx="2" ry="2" />
<text  x="1158.18" y="703.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="814.5" y="517" width="0.4" height="15.0" fill="rgb(227,6,37)" rx="2" ry="2" />
<text  x="817.49" y="527.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="16.6" y="613" width="0.2" height="15.0" fill="rgb(237,36,1)" rx="2" ry="2" />
<text  x="19.60" y="623.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (6 samples, 0.12%)</title><rect x="1003.4" y="485" width="1.4" height="15.0" fill="rgb(225,119,2)" rx="2" ry="2" />
<text  x="1006.38" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="69.9" y="581" width="0.2" height="15.0" fill="rgb(240,85,50)" rx="2" ry="2" />
<text  x="72.85" y="591.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="504.8" y="421" width="0.2" height="15.0" fill="rgb(226,84,47)" rx="2" ry="2" />
<text  x="507.76" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="90.8" y="677" width="0.2" height="15.0" fill="rgb(246,143,31)" rx="2" ry="2" />
<text  x="93.79" y="687.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::make_empty (1 samples, 0.02%)</title><rect x="871.8" y="549" width="0.3" height="15.0" fill="rgb(240,178,1)" rx="2" ry="2" />
<text  x="874.84" y="559.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%)</title><rect x="745.5" y="565" width="0.9" height="15.0" fill="rgb(216,10,47)" rx="2" ry="2" />
<text  x="748.54" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (1 samples, 0.02%)</title><rect x="565.5" y="533" width="0.2" height="15.0" fill="rgb(223,122,1)" rx="2" ry="2" />
<text  x="568.52" y="543.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (13 samples, 0.25%)</title><rect x="933.5" y="565" width="3.0" height="15.0" fill="rgb(248,85,51)" rx="2" ry="2" />
<text  x="936.52" y="575.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (1 samples, 0.02%)</title><rect x="874.8" y="565" width="0.2" height="15.0" fill="rgb(223,126,47)" rx="2" ry="2" />
<text  x="877.80" y="575.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="81.7" y="533" width="0.2" height="15.0" fill="rgb(224,44,38)" rx="2" ry="2" />
<text  x="84.69" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="82.6" y="533" width="0.2" height="15.0" fill="rgb(220,141,22)" rx="2" ry="2" />
<text  x="85.60" y="543.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="637.7" y="677" width="0.2" height="15.0" fill="rgb(241,132,36)" rx="2" ry="2" />
<text  x="640.66" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (32 samples, 0.62%)</title><rect x="619.2" y="645" width="7.3" height="15.0" fill="rgb(226,126,20)" rx="2" ry="2" />
<text  x="622.23" y="655.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="830.4" y="549" width="0.3" height="15.0" fill="rgb(221,143,3)" rx="2" ry="2" />
<text  x="833.42" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="74.2" y="661" width="0.2" height="15.0" fill="rgb(240,140,6)" rx="2" ry="2" />
<text  x="77.18" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (4 samples, 0.08%)</title><rect x="672.3" y="645" width="0.9" height="15.0" fill="rgb(230,138,28)" rx="2" ry="2" />
<text  x="675.26" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="60.1" y="357" width="0.2" height="15.0" fill="rgb(225,95,29)" rx="2" ry="2" />
<text  x="63.07" y="367.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (2 samples, 0.04%)</title><rect x="189.1" y="453" width="0.5" height="15.0" fill="rgb(237,85,44)" rx="2" ry="2" />
<text  x="192.11" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="346.4" y="405" width="0.2" height="15.0" fill="rgb(221,96,29)" rx="2" ry="2" />
<text  x="349.36" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.02%)</title><rect x="69.2" y="485" width="0.2" height="15.0" fill="rgb(209,185,14)" rx="2" ry="2" />
<text  x="72.17" y="495.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (5 samples, 0.10%)</title><rect x="1126.3" y="437" width="1.1" height="15.0" fill="rgb(222,96,9)" rx="2" ry="2" />
<text  x="1129.28" y="447.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="44.6" y="485" width="0.2" height="15.0" fill="rgb(241,154,20)" rx="2" ry="2" />
<text  x="47.59" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (12 samples, 0.23%)</title><rect x="872.1" y="549" width="2.7" height="15.0" fill="rgb(230,195,19)" rx="2" ry="2" />
<text  x="875.07" y="559.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (3 samples, 0.06%)</title><rect x="960.1" y="613" width="0.7" height="15.0" fill="rgb(234,151,41)" rx="2" ry="2" />
<text  x="963.14" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="474.9" y="501" width="0.3" height="15.0" fill="rgb(210,177,45)" rx="2" ry="2" />
<text  x="477.95" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="530.0" y="501" width="0.2" height="15.0" fill="rgb(217,9,20)" rx="2" ry="2" />
<text  x="533.02" y="511.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (5 samples, 0.10%)</title><rect x="171.1" y="485" width="1.2" height="15.0" fill="rgb(223,6,44)" rx="2" ry="2" />
<text  x="174.13" y="495.5" ></text>
</g>
<g >
<title>compound_type&lt; (13 samples, 0.25%)</title><rect x="927.8" y="565" width="3.0" height="15.0" fill="rgb(247,127,2)" rx="2" ry="2" />
<text  x="930.83" y="575.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (200 samples, 3.86%)</title><rect x="20.0" y="677" width="45.5" height="15.0" fill="rgb(252,210,7)" rx="2" ry="2" />
<text  x="23.01" y="687.5" >cql3..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="55.1" y="405" width="0.4" height="15.0" fill="rgb(247,154,18)" rx="2" ry="2" />
<text  x="58.06" y="415.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (2 samples, 0.04%)</title><rect x="1117.6" y="341" width="0.5" height="15.0" fill="rgb(212,153,41)" rx="2" ry="2" />
<text  x="1120.63" y="351.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (3 samples, 0.06%)</title><rect x="684.5" y="661" width="0.7" height="15.0" fill="rgb(218,186,50)" rx="2" ry="2" />
<text  x="687.55" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="22.5" y="517" width="0.2" height="15.0" fill="rgb(240,158,3)" rx="2" ry="2" />
<text  x="25.52" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.04%)</title><rect x="688.4" y="645" width="0.5" height="15.0" fill="rgb(230,13,31)" rx="2" ry="2" />
<text  x="691.41" y="655.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (3 samples, 0.06%)</title><rect x="1101.9" y="597" width="0.7" height="15.0" fill="rgb(253,16,10)" rx="2" ry="2" />
<text  x="1104.93" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="780.8" y="501" width="0.9" height="15.0" fill="rgb(223,121,54)" rx="2" ry="2" />
<text  x="783.81" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (2 samples, 0.04%)</title><rect x="58.7" y="533" width="0.5" height="15.0" fill="rgb(206,168,1)" rx="2" ry="2" />
<text  x="61.70" y="543.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (2 samples, 0.04%)</title><rect x="477.2" y="533" width="0.5" height="15.0" fill="rgb(253,215,9)" rx="2" ry="2" />
<text  x="480.22" y="543.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="38.9" y="517" width="0.2" height="15.0" fill="rgb(223,190,6)" rx="2" ry="2" />
<text  x="41.90" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (192 samples, 3.70%)</title><rect x="21.8" y="613" width="43.7" height="15.0" fill="rgb(235,53,47)" rx="2" ry="2" />
<text  x="24.83" y="623.5" >cql3..</text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (3 samples, 0.06%)</title><rect x="236.7" y="309" width="0.7" height="15.0" fill="rgb(217,111,52)" rx="2" ry="2" />
<text  x="239.67" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="809.5" y="453" width="0.7" height="15.0" fill="rgb(218,81,35)" rx="2" ry="2" />
<text  x="812.49" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="589.4" y="581" width="0.5" height="15.0" fill="rgb(217,171,2)" rx="2" ry="2" />
<text  x="592.42" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (7 samples, 0.14%)</title><rect x="756.9" y="613" width="1.6" height="15.0" fill="rgb(226,28,27)" rx="2" ry="2" />
<text  x="759.92" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1121.5" y="405" width="0.2" height="15.0" fill="rgb(232,49,38)" rx="2" ry="2" />
<text  x="1124.50" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="106.5" y="693" width="0.2" height="15.0" fill="rgb(250,108,31)" rx="2" ry="2" />
<text  x="109.49" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (4 samples, 0.08%)</title><rect x="1087.8" y="581" width="0.9" height="15.0" fill="rgb(239,100,13)" rx="2" ry="2" />
<text  x="1090.82" y="591.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="766.7" y="501" width="0.2" height="15.0" fill="rgb(238,116,44)" rx="2" ry="2" />
<text  x="769.70" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="440.8" y="565" width="0.2" height="15.0" fill="rgb(229,119,8)" rx="2" ry="2" />
<text  x="443.81" y="575.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (261 samples, 5.03%)</title><rect x="19.6" y="725" width="59.4" height="15.0" fill="rgb(244,113,33)" rx="2" ry="2" />
<text  x="22.56" y="735.5" >single..</text>
</g>
<g >
<title>cql3_parser::CqlParser::value (21 samples, 0.41%)</title><rect x="51.6" y="501" width="4.8" height="15.0" fill="rgb(243,193,43)" rx="2" ry="2" />
<text  x="54.65" y="511.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="77.8" y="677" width="0.2" height="15.0" fill="rgb(253,9,50)" rx="2" ry="2" />
<text  x="80.82" y="687.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%)</title><rect x="17.5" y="629" width="0.2" height="15.0" fill="rgb(249,45,1)" rx="2" ry="2" />
<text  x="20.51" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1161.8" y="629" width="0.2" height="15.0" fill="rgb(206,120,49)" rx="2" ry="2" />
<text  x="1164.78" y="639.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (5 samples, 0.10%)</title><rect x="843.6" y="645" width="1.2" height="15.0" fill="rgb(249,31,45)" rx="2" ry="2" />
<text  x="846.62" y="655.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="80.8" y="789" width="0.2" height="15.0" fill="rgb(207,187,33)" rx="2" ry="2" />
<text  x="83.78" y="799.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="50.3" y="405" width="0.2" height="15.0" fill="rgb(223,113,44)" rx="2" ry="2" />
<text  x="53.28" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::emplace_back&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="34.8" y="421" width="0.7" height="15.0" fill="rgb(209,215,46)" rx="2" ry="2" />
<text  x="37.81" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%)</title><rect x="17.3" y="693" width="0.4" height="15.0" fill="rgb(231,199,4)" rx="2" ry="2" />
<text  x="20.28" y="703.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (3 samples, 0.06%)</title><rect x="182.5" y="437" width="0.7" height="15.0" fill="rgb(222,151,26)" rx="2" ry="2" />
<text  x="185.51" y="447.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (1 samples, 0.02%)</title><rect x="430.8" y="437" width="0.2" height="15.0" fill="rgb(238,209,46)" rx="2" ry="2" />
<text  x="433.79" y="447.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (2 samples, 0.04%)</title><rect x="816.8" y="549" width="0.4" height="15.0" fill="rgb(231,73,43)" rx="2" ry="2" />
<text  x="819.77" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (7 samples, 0.14%)</title><rect x="1125.8" y="501" width="1.6" height="15.0" fill="rgb(251,126,37)" rx="2" ry="2" />
<text  x="1128.82" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="698.2" y="661" width="0.2" height="15.0" fill="rgb(243,101,42)" rx="2" ry="2" />
<text  x="701.20" y="671.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_timeout (1 samples, 0.02%)</title><rect x="876.2" y="629" width="0.2" height="15.0" fill="rgb(253,30,38)" rx="2" ry="2" />
<text  x="879.17" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (15 samples, 0.29%)</title><rect x="236.0" y="325" width="3.4" height="15.0" fill="rgb(226,19,10)" rx="2" ry="2" />
<text  x="238.99" y="335.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::attributes::raw*, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="61.9" y="501" width="0.2" height="15.0" fill="rgb(212,132,49)" rx="2" ry="2" />
<text  x="64.89" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="126.3" y="661" width="0.2" height="15.0" fill="rgb(205,184,37)" rx="2" ry="2" />
<text  x="129.29" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reallocate_map (1 samples, 0.02%)</title><rect x="25.5" y="437" width="0.2" height="15.0" fill="rgb(246,84,10)" rx="2" ry="2" />
<text  x="28.48" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="694.6" y="677" width="0.2" height="15.0" fill="rgb(232,151,21)" rx="2" ry="2" />
<text  x="697.56" y="687.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (302 samples, 5.82%)</title><rect x="200.9" y="453" width="68.8" height="15.0" fill="rgb(252,7,35)" rx="2" ry="2" />
<text  x="203.94" y="463.5" >partiti..</text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (38 samples, 0.73%)</title><rect x="703.4" y="693" width="8.7" height="15.0" fill="rgb(242,4,5)" rx="2" ry="2" />
<text  x="706.43" y="703.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="43.0" y="533" width="0.2" height="15.0" fill="rgb(237,131,11)" rx="2" ry="2" />
<text  x="46.00" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (18 samples, 0.35%)</title><rect x="764.9" y="581" width="4.1" height="15.0" fill="rgb(220,55,34)" rx="2" ry="2" />
<text  x="767.88" y="591.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (43 samples, 0.83%)</title><rect x="1065.3" y="469" width="9.8" height="15.0" fill="rgb(234,61,18)" rx="2" ry="2" />
<text  x="1068.29" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (515 samples, 9.93%)</title><rect x="320.6" y="581" width="117.2" height="15.0" fill="rgb(220,179,17)" rx="2" ry="2" />
<text  x="323.65" y="591.5" >flat_mutation_..</text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="83.7" y="773" width="0.3" height="15.0" fill="rgb(208,158,6)" rx="2" ry="2" />
<text  x="86.74" y="783.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="15.0" y="757" width="0.2" height="15.0" fill="rgb(207,153,42)" rx="2" ry="2" />
<text  x="18.01" y="767.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (1 samples, 0.02%)</title><rect x="991.3" y="453" width="0.3" height="15.0" fill="rgb(244,60,13)" rx="2" ry="2" />
<text  x="994.32" y="463.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="326.6" y="469" width="0.2" height="15.0" fill="rgb(230,166,42)" rx="2" ry="2" />
<text  x="329.56" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (2 samples, 0.04%)</title><rect x="1099.0" y="581" width="0.4" height="15.0" fill="rgb(225,152,41)" rx="2" ry="2" />
<text  x="1101.97" y="591.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (3 samples, 0.06%)</title><rect x="797.0" y="389" width="0.7" height="15.0" fill="rgb(234,195,54)" rx="2" ry="2" />
<text  x="799.97" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (1 samples, 0.02%)</title><rect x="68.0" y="613" width="0.3" height="15.0" fill="rgb(216,140,35)" rx="2" ry="2" />
<text  x="71.03" y="623.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (130 samples, 2.51%)</title><rect x="891.4" y="597" width="29.6" height="15.0" fill="rgb(205,161,3)" rx="2" ry="2" />
<text  x="894.42" y="607.5" >_Z..</text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="341" width="0.3" height="15.0" fill="rgb(234,68,52)" rx="2" ry="2" />
<text  x="62.84" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="1017.9" y="357" width="0.3" height="15.0" fill="rgb(211,130,16)" rx="2" ry="2" />
<text  x="1020.95" y="367.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (2 samples, 0.04%)</title><rect x="762.4" y="613" width="0.4" height="15.0" fill="rgb(246,108,30)" rx="2" ry="2" />
<text  x="765.38" y="623.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="916.0" y="565" width="0.4" height="15.0" fill="rgb(212,135,5)" rx="2" ry="2" />
<text  x="918.99" y="575.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="76.5" y="469" width="0.6" height="15.0" fill="rgb(242,129,17)" rx="2" ry="2" />
<text  x="79.45" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1161.6" y="629" width="0.2" height="15.0" fill="rgb(230,195,42)" rx="2" ry="2" />
<text  x="1164.55" y="639.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (2 samples, 0.04%)</title><rect x="1018.6" y="357" width="0.5" height="15.0" fill="rgb(244,192,18)" rx="2" ry="2" />
<text  x="1021.63" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (3 samples, 0.06%)</title><rect x="571.0" y="501" width="0.7" height="15.0" fill="rgb(245,61,44)" rx="2" ry="2" />
<text  x="573.98" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="109.5" y="677" width="0.2" height="15.0" fill="rgb(214,127,18)" rx="2" ry="2" />
<text  x="112.45" y="687.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (6 samples, 0.12%)</title><rect x="1155.9" y="677" width="1.3" height="15.0" fill="rgb(232,82,3)" rx="2" ry="2" />
<text  x="1158.86" y="687.5" ></text>
</g>
<g >
<title>cql3::attributes::raw::prepare (1 samples, 0.02%)</title><rect x="65.8" y="661" width="0.2" height="15.0" fill="rgb(225,176,10)" rx="2" ry="2" />
<text  x="68.76" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="871.8" y="533" width="0.3" height="15.0" fill="rgb(237,138,30)" rx="2" ry="2" />
<text  x="874.84" y="543.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="652.9" y="533" width="0.2" height="15.0" fill="rgb(236,151,12)" rx="2" ry="2" />
<text  x="655.91" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (2 samples, 0.04%)</title><rect x="574.6" y="485" width="0.5" height="15.0" fill="rgb(234,124,18)" rx="2" ry="2" />
<text  x="577.62" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="647.2" y="677" width="0.5" height="15.0" fill="rgb(246,185,7)" rx="2" ry="2" />
<text  x="650.22" y="687.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (1 samples, 0.02%)</title><rect x="267.2" y="421" width="0.2" height="15.0" fill="rgb(240,87,11)" rx="2" ry="2" />
<text  x="270.16" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (2 samples, 0.04%)</title><rect x="1159.5" y="661" width="0.5" height="15.0" fill="rgb(221,146,0)" rx="2" ry="2" />
<text  x="1162.50" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="443.3" y="613" width="0.2" height="15.0" fill="rgb(221,95,25)" rx="2" ry="2" />
<text  x="446.31" y="623.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::create_keyspace_statement*, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="64.4" y="549" width="0.2" height="15.0" fill="rgb(243,82,3)" rx="2" ry="2" />
<text  x="67.39" y="559.5" ></text>
</g>
<g >
<title>database::has_keyspace (6 samples, 0.12%)</title><rect x="830.7" y="565" width="1.3" height="15.0" fill="rgb(241,68,1)" rx="2" ry="2" />
<text  x="833.65" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::delete_statement, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="65.3" y="597" width="0.2" height="15.0" fill="rgb(236,121,45)" rx="2" ry="2" />
<text  x="68.30" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="971.3" y="581" width="0.2" height="15.0" fill="rgb(208,90,50)" rx="2" ry="2" />
<text  x="974.30" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="551.2" y="597" width="0.2" height="15.0" fill="rgb(216,173,15)" rx="2" ry="2" />
<text  x="554.18" y="607.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (1 samples, 0.02%)</title><rect x="860.9" y="677" width="0.2" height="15.0" fill="rgb(216,211,9)" rx="2" ry="2" />
<text  x="863.92" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.14%)</title><rect x="1099.7" y="549" width="1.5" height="15.0" fill="rgb(209,176,8)" rx="2" ry="2" />
<text  x="1102.65" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="46.0" y="357" width="0.2" height="15.0" fill="rgb(239,79,50)" rx="2" ry="2" />
<text  x="48.96" y="367.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="19.1" y="693" width="0.5" height="15.0" fill="rgb(212,98,38)" rx="2" ry="2" />
<text  x="22.10" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;cdc::token_range_description, std::allocator&lt;cdc::token_range_description&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="16.8" y="485" width="0.3" height="15.0" fill="rgb(221,217,52)" rx="2" ry="2" />
<text  x="19.83" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="832.5" y="613" width="0.4" height="15.0" fill="rgb(248,41,25)" rx="2" ry="2" />
<text  x="835.47" y="623.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%)</title><rect x="139.5" y="645" width="1.8" height="15.0" fill="rgb(248,33,8)" rx="2" ry="2" />
<text  x="142.49" y="655.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="52.8" y="437" width="0.2" height="15.0" fill="rgb(231,57,48)" rx="2" ry="2" />
<text  x="55.78" y="447.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="254.9" y="309" width="0.2" height="15.0" fill="rgb(238,43,13)" rx="2" ry="2" />
<text  x="257.88" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1126.3" y="325" width="0.2" height="15.0" fill="rgb(252,179,49)" rx="2" ry="2" />
<text  x="1129.28" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%)</title><rect x="431.0" y="485" width="0.2" height="15.0" fill="rgb(216,15,8)" rx="2" ry="2" />
<text  x="434.02" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::release (1 samples, 0.02%)</title><rect x="51.2" y="453" width="0.2" height="15.0" fill="rgb(230,219,26)" rx="2" ry="2" />
<text  x="54.19" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::single_column_relation&gt; &gt; (2 samples, 0.04%)</title><rect x="60.8" y="533" width="0.4" height="15.0" fill="rgb(247,84,41)" rx="2" ry="2" />
<text  x="63.75" y="543.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%)</title><rect x="103.8" y="565" width="0.2" height="15.0" fill="rgb(212,13,20)" rx="2" ry="2" />
<text  x="106.76" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::unique_ptr (1 samples, 0.02%)</title><rect x="62.1" y="549" width="0.2" height="15.0" fill="rgb(216,12,46)" rx="2" ry="2" />
<text  x="65.12" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%)</title><rect x="964.0" y="613" width="0.2" height="15.0" fill="rgb(231,137,44)" rx="2" ry="2" />
<text  x="967.01" y="623.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%)</title><rect x="252.8" y="357" width="0.3" height="15.0" fill="rgb(223,118,40)" rx="2" ry="2" />
<text  x="255.83" y="367.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (5 samples, 0.10%)</title><rect x="195.9" y="421" width="1.2" height="15.0" fill="rgb(234,28,7)" rx="2" ry="2" />
<text  x="198.93" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (13 samples, 0.25%)</title><rect x="197.1" y="437" width="2.9" height="15.0" fill="rgb(237,199,38)" rx="2" ry="2" />
<text  x="200.07" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (7 samples, 0.14%)</title><rect x="1111.3" y="629" width="1.6" height="15.0" fill="rgb(224,188,32)" rx="2" ry="2" />
<text  x="1114.26" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (4 samples, 0.08%)</title><rect x="681.4" y="661" width="0.9" height="15.0" fill="rgb(222,199,21)" rx="2" ry="2" />
<text  x="684.36" y="671.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (1 samples, 0.02%)</title><rect x="1165.6" y="677" width="0.3" height="15.0" fill="rgb(247,135,25)" rx="2" ry="2" />
<text  x="1168.65" y="687.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (3 samples, 0.06%)</title><rect x="804.7" y="309" width="0.7" height="15.0" fill="rgb(236,110,2)" rx="2" ry="2" />
<text  x="807.71" y="319.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="51.0" y="421" width="0.2" height="15.0" fill="rgb(209,136,30)" rx="2" ry="2" />
<text  x="53.96" y="431.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="861.8" y="645" width="0.5" height="15.0" fill="rgb(250,112,48)" rx="2" ry="2" />
<text  x="864.83" y="655.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (4 samples, 0.08%)</title><rect x="888.9" y="613" width="0.9" height="15.0" fill="rgb(220,179,49)" rx="2" ry="2" />
<text  x="891.91" y="623.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="42.5" y="373" width="0.5" height="15.0" fill="rgb(234,45,46)" rx="2" ry="2" />
<text  x="45.54" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (7 samples, 0.14%)</title><rect x="869.3" y="597" width="1.6" height="15.0" fill="rgb(248,87,27)" rx="2" ry="2" />
<text  x="872.34" y="607.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (2 samples, 0.04%)</title><rect x="355.0" y="373" width="0.5" height="15.0" fill="rgb(234,108,2)" rx="2" ry="2" />
<text  x="358.01" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (1 samples, 0.02%)</title><rect x="292.2" y="517" width="0.2" height="15.0" fill="rgb(207,207,41)" rx="2" ry="2" />
<text  x="295.20" y="527.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%)</title><rect x="114.9" y="613" width="0.5" height="15.0" fill="rgb(240,228,26)" rx="2" ry="2" />
<text  x="117.91" y="623.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (3 samples, 0.06%)</title><rect x="1081.4" y="517" width="0.7" height="15.0" fill="rgb(230,126,0)" rx="2" ry="2" />
<text  x="1084.44" y="527.5" ></text>
</g>
<g >
<title>schema::column_at (3 samples, 0.06%)</title><rect x="240.3" y="325" width="0.7" height="15.0" fill="rgb(222,65,22)" rx="2" ry="2" />
<text  x="243.31" y="335.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (6 samples, 0.12%)</title><rect x="647.7" y="709" width="1.3" height="15.0" fill="rgb(252,122,26)" rx="2" ry="2" />
<text  x="650.68" y="719.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (233 samples, 4.49%)</title><rect x="206.4" y="405" width="53.0" height="15.0" fill="rgb(236,48,0)" rx="2" ry="2" />
<text  x="209.40" y="415.5" >parti..</text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (6 samples, 0.12%)</title><rect x="1150.9" y="661" width="1.3" height="15.0" fill="rgb(239,192,44)" rx="2" ry="2" />
<text  x="1153.86" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="40.7" y="373" width="0.3" height="15.0" fill="rgb(207,44,44)" rx="2" ry="2" />
<text  x="43.72" y="383.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (3 samples, 0.06%)</title><rect x="1124.0" y="469" width="0.7" height="15.0" fill="rgb(206,97,49)" rx="2" ry="2" />
<text  x="1127.00" y="479.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="316.5" y="597" width="0.5" height="15.0" fill="rgb(218,201,4)" rx="2" ry="2" />
<text  x="319.55" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="16.6" y="693" width="0.2" height="15.0" fill="rgb(246,103,27)" rx="2" ry="2" />
<text  x="19.60" y="703.5" ></text>
</g>
<g >
<title>schema::get_column_definition (1 samples, 0.02%)</title><rect x="71.4" y="629" width="0.3" height="15.0" fill="rgb(244,104,4)" rx="2" ry="2" />
<text  x="74.45" y="639.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::max_backlog (1 samples, 0.02%)</title><rect x="713.0" y="629" width="0.2" height="15.0" fill="rgb(231,10,23)" rx="2" ry="2" />
<text  x="715.99" y="639.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="16.6" y="677" width="0.2" height="15.0" fill="rgb(217,128,38)" rx="2" ry="2" />
<text  x="19.60" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="199.8" y="421" width="0.2" height="15.0" fill="rgb(237,169,29)" rx="2" ry="2" />
<text  x="202.80" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (1 samples, 0.02%)</title><rect x="1164.1" y="629" width="0.2" height="15.0" fill="rgb(221,152,16)" rx="2" ry="2" />
<text  x="1167.06" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (44 samples, 0.85%)</title><rect x="899.4" y="533" width="10.0" height="15.0" fill="rgb(216,116,42)" rx="2" ry="2" />
<text  x="902.38" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="10.7" y="613" width="0.2" height="15.0" fill="rgb(240,88,32)" rx="2" ry="2" />
<text  x="13.68" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (1 samples, 0.02%)</title><rect x="710.0" y="645" width="0.3" height="15.0" fill="rgb(217,15,26)" rx="2" ry="2" />
<text  x="713.03" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_aligned (1 samples, 0.02%)</title><rect x="693.0" y="613" width="0.2" height="15.0" fill="rgb(237,120,0)" rx="2" ry="2" />
<text  x="695.97" y="623.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (1 samples, 0.02%)</title><rect x="791.7" y="437" width="0.3" height="15.0" fill="rgb(213,189,5)" rx="2" ry="2" />
<text  x="794.74" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="51.4" y="469" width="0.2" height="15.0" fill="rgb(224,116,38)" rx="2" ry="2" />
<text  x="54.42" y="479.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (4 samples, 0.08%)</title><rect x="606.5" y="645" width="0.9" height="15.0" fill="rgb(227,96,18)" rx="2" ry="2" />
<text  x="609.49" y="655.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (1 samples, 0.02%)</title><rect x="263.8" y="389" width="0.2" height="15.0" fill="rgb(212,179,51)" rx="2" ry="2" />
<text  x="266.75" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%)</title><rect x="345.9" y="421" width="0.2" height="15.0" fill="rgb(224,6,12)" rx="2" ry="2" />
<text  x="348.91" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (7 samples, 0.14%)</title><rect x="814.9" y="517" width="1.6" height="15.0" fill="rgb(207,56,52)" rx="2" ry="2" />
<text  x="817.95" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="300.2" y="549" width="0.2" height="15.0" fill="rgb(218,60,42)" rx="2" ry="2" />
<text  x="303.16" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (6 samples, 0.12%)</title><rect x="23.2" y="421" width="1.4" height="15.0" fill="rgb(207,113,40)" rx="2" ry="2" />
<text  x="26.20" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="1050.0" y="485" width="0.3" height="15.0" fill="rgb(231,204,44)" rx="2" ry="2" />
<text  x="1053.04" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="22.5" y="597" width="0.2" height="15.0" fill="rgb(215,116,11)" rx="2" ry="2" />
<text  x="25.52" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, boost::icl::interval_map&lt;dht::token, std::unordered_set&lt;gms::inet_address, std::hash&lt;gms::inet_address&gt;, std::equal_to&lt;gms::inet_address&gt;, std::allocator&lt;gms::inet_address&gt; &gt;, boost::icl::partial_absorber, std::less, boost::icl::inplace_plus, boost::icl::inter_section, boost::icl::continuous_interval&lt;dht::token, std::less&gt;, std::allocator&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, boost::icl::interval_map&lt;dht::token, std::unordered_set&lt;gms::inet_address, std::hash&lt;gms::inet_address&gt;, std::equal_to&lt;gms::inet_address&gt;, std::allocator&lt;gms::inet_address&gt; &gt;, boost::icl::partial_absorber, std::less, boost::icl::inplace_plus, boost::icl::inter_section, boost::icl::continuous_interval&lt;dht::token, std::less&gt;, std::allocator&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1130.6" y="373" width="0.2" height="15.0" fill="rgb(229,68,13)" rx="2" ry="2" />
<text  x="1133.60" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (62 samples, 1.20%)</title><rect x="563.9" y="549" width="14.1" height="15.0" fill="rgb(239,199,29)" rx="2" ry="2" />
<text  x="566.93" y="559.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%)</title><rect x="525.9" y="421" width="0.3" height="15.0" fill="rgb(207,37,43)" rx="2" ry="2" />
<text  x="528.92" y="431.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (9 samples, 0.17%)</title><rect x="477.7" y="533" width="2.0" height="15.0" fill="rgb(217,193,43)" rx="2" ry="2" />
<text  x="480.68" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1022.5" y="421" width="0.2" height="15.0" fill="rgb(254,153,5)" rx="2" ry="2" />
<text  x="1025.50" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (3 samples, 0.06%)</title><rect x="944.9" y="613" width="0.7" height="15.0" fill="rgb(244,64,35)" rx="2" ry="2" />
<text  x="947.90" y="623.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (1 samples, 0.02%)</title><rect x="1027.7" y="453" width="0.3" height="15.0" fill="rgb(232,47,39)" rx="2" ry="2" />
<text  x="1030.74" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="782.4" y="469" width="0.2" height="15.0" fill="rgb(225,66,16)" rx="2" ry="2" />
<text  x="785.41" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (31 samples, 0.60%)</title><rect x="1016.1" y="437" width="7.1" height="15.0" fill="rgb(245,112,48)" rx="2" ry="2" />
<text  x="1019.13" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (1 samples, 0.02%)</title><rect x="81.7" y="549" width="0.2" height="15.0" fill="rgb(211,193,25)" rx="2" ry="2" />
<text  x="84.69" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="912.4" y="501" width="0.2" height="15.0" fill="rgb(238,172,46)" rx="2" ry="2" />
<text  x="915.35" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (2 samples, 0.04%)</title><rect x="186.4" y="485" width="0.4" height="15.0" fill="rgb(227,216,45)" rx="2" ry="2" />
<text  x="189.37" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, std::optional&lt;cdc::topology_description&gt; &gt;, std::_Select1st&lt;std::pair&lt;long const, std::optional&lt;cdc::topology_description&gt; &gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, std::optional&lt;cdc::topology_description&gt; &gt; &gt; &gt;::_M_drop_node (1 samples, 0.02%)</title><rect x="16.8" y="501" width="0.3" height="15.0" fill="rgb(216,121,19)" rx="2" ry="2" />
<text  x="19.83" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="40.3" y="405" width="0.2" height="15.0" fill="rgb(227,216,18)" rx="2" ry="2" />
<text  x="43.27" y="415.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%)</title><rect x="424.9" y="405" width="0.2" height="15.0" fill="rgb(246,118,12)" rx="2" ry="2" />
<text  x="427.88" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="501" width="0.3" height="15.0" fill="rgb(226,10,29)" rx="2" ry="2" />
<text  x="62.84" y="511.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="630.8" y="597" width="0.7" height="15.0" fill="rgb(227,168,53)" rx="2" ry="2" />
<text  x="633.84" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="102.6" y="549" width="0.3" height="15.0" fill="rgb(231,164,25)" rx="2" ry="2" />
<text  x="105.62" y="559.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%)</title><rect x="17.3" y="597" width="0.2" height="15.0" fill="rgb(254,197,1)" rx="2" ry="2" />
<text  x="20.28" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="15.0" y="741" width="0.2" height="15.0" fill="rgb(251,100,25)" rx="2" ry="2" />
<text  x="18.01" y="751.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (1 samples, 0.02%)</title><rect x="269.9" y="453" width="0.2" height="15.0" fill="rgb(215,190,29)" rx="2" ry="2" />
<text  x="272.90" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="16.8" y="677" width="0.3" height="15.0" fill="rgb(249,49,2)" rx="2" ry="2" />
<text  x="19.83" y="687.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (1 samples, 0.02%)</title><rect x="83.1" y="613" width="0.2" height="15.0" fill="rgb(212,211,19)" rx="2" ry="2" />
<text  x="86.05" y="623.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (1 samples, 0.02%)</title><rect x="724.6" y="661" width="0.2" height="15.0" fill="rgb(214,156,22)" rx="2" ry="2" />
<text  x="727.60" y="671.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (3 samples, 0.06%)</title><rect x="267.6" y="437" width="0.7" height="15.0" fill="rgb(253,46,22)" rx="2" ry="2" />
<text  x="270.62" y="447.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="80.8" y="709" width="0.2" height="15.0" fill="rgb(246,189,40)" rx="2" ry="2" />
<text  x="83.78" y="719.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="43.9" y="437" width="0.5" height="15.0" fill="rgb(223,219,48)" rx="2" ry="2" />
<text  x="46.91" y="447.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (10 samples, 0.19%)</title><rect x="707.3" y="645" width="2.3" height="15.0" fill="rgb(215,57,52)" rx="2" ry="2" />
<text  x="710.30" y="655.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%)</title><rect x="844.1" y="629" width="0.7" height="15.0" fill="rgb(238,83,8)" rx="2" ry="2" />
<text  x="847.08" y="639.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (2 samples, 0.04%)</title><rect x="872.8" y="501" width="0.4" height="15.0" fill="rgb(243,174,40)" rx="2" ry="2" />
<text  x="875.75" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="188.9" y="453" width="0.2" height="15.0" fill="rgb(221,10,17)" rx="2" ry="2" />
<text  x="191.88" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1032.3" y="469" width="0.4" height="15.0" fill="rgb(220,221,24)" rx="2" ry="2" />
<text  x="1035.29" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (5 samples, 0.10%)</title><rect x="781.7" y="517" width="1.2" height="15.0" fill="rgb(228,102,0)" rx="2" ry="2" />
<text  x="784.72" y="527.5" ></text>
</g>
<g >
<title>mutation::data::data (1 samples, 0.02%)</title><rect x="875.0" y="533" width="0.3" height="15.0" fill="rgb(247,186,0)" rx="2" ry="2" />
<text  x="878.03" y="543.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="804.3" y="293" width="0.2" height="15.0" fill="rgb(213,225,22)" rx="2" ry="2" />
<text  x="807.25" y="303.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (3 samples, 0.06%)</title><rect x="1120.4" y="437" width="0.6" height="15.0" fill="rgb(240,148,30)" rx="2" ry="2" />
<text  x="1123.36" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (3 samples, 0.06%)</title><rect x="70.3" y="597" width="0.7" height="15.0" fill="rgb(224,17,0)" rx="2" ry="2" />
<text  x="73.31" y="607.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="10.2" y="725" width="0.3" height="15.0" fill="rgb(212,30,18)" rx="2" ry="2" />
<text  x="13.23" y="735.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (7 samples, 0.14%)</title><rect x="192.3" y="421" width="1.6" height="15.0" fill="rgb(229,204,15)" rx="2" ry="2" />
<text  x="195.29" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (16 samples, 0.31%)</title><rect x="243.3" y="341" width="3.6" height="15.0" fill="rgb(222,96,31)" rx="2" ry="2" />
<text  x="246.27" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="472.4" y="469" width="0.3" height="15.0" fill="rgb(249,157,25)" rx="2" ry="2" />
<text  x="475.44" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%)</title><rect x="15.0" y="773" width="0.2" height="15.0" fill="rgb(239,102,51)" rx="2" ry="2" />
<text  x="18.01" y="783.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.08%)</title><rect x="44.8" y="469" width="0.9" height="15.0" fill="rgb(215,24,49)" rx="2" ry="2" />
<text  x="47.82" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1052.5" y="549" width="0.3" height="15.0" fill="rgb(249,99,47)" rx="2" ry="2" />
<text  x="1055.54" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="917.8" y="517" width="0.7" height="15.0" fill="rgb(218,167,42)" rx="2" ry="2" />
<text  x="920.81" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="792.4" y="421" width="0.2" height="15.0" fill="rgb(238,56,33)" rx="2" ry="2" />
<text  x="795.42" y="431.5" ></text>
</g>
<g >
<title>schema::raw_schema::raw_schema (1 samples, 0.02%)</title><rect x="104.2" y="581" width="0.2" height="15.0" fill="rgb(209,135,33)" rx="2" ry="2" />
<text  x="107.22" y="591.5" ></text>
</g>
<g >
<title>std::optional&lt;seastar::promise&lt;void&gt; &gt;::operator=&lt;seastar::promise&lt;void&gt; &gt; (1 samples, 0.02%)</title><rect x="637.7" y="693" width="0.2" height="15.0" fill="rgb(234,201,7)" rx="2" ry="2" />
<text  x="640.66" y="703.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="866.6" y="549" width="0.2" height="15.0" fill="rgb(253,73,15)" rx="2" ry="2" />
<text  x="869.61" y="559.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="434.7" y="485" width="0.4" height="15.0" fill="rgb(246,198,50)" rx="2" ry="2" />
<text  x="437.66" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (3 samples, 0.06%)</title><rect x="1128.3" y="325" width="0.7" height="15.0" fill="rgb(228,114,29)" rx="2" ry="2" />
<text  x="1131.33" y="335.5" ></text>
</g>
<g >
<title>std::move&lt;std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="57.6" y="517" width="0.2" height="15.0" fill="rgb(229,188,28)" rx="2" ry="2" />
<text  x="60.56" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="769.0" y="581" width="0.2" height="15.0" fill="rgb(221,166,36)" rx="2" ry="2" />
<text  x="771.98" y="591.5" ></text>
</g>
<g >
<title>seastar::deferred_stop&lt;seastar::sharded&lt;sstables::sstable_directory&gt; &gt;::do_stop (1 samples, 0.02%)</title><rect x="15.5" y="773" width="0.2" height="15.0" fill="rgb(247,164,42)" rx="2" ry="2" />
<text  x="18.46" y="783.5" ></text>
</g>
<g >
<title>db::cql_type_parser::parse (1 samples, 0.02%)</title><rect x="102.6" y="597" width="0.3" height="15.0" fill="rgb(226,112,8)" rx="2" ry="2" />
<text  x="105.62" y="607.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (8 samples, 0.15%)</title><rect x="343.6" y="389" width="1.9" height="15.0" fill="rgb(235,46,17)" rx="2" ry="2" />
<text  x="346.63" y="399.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="682.5" y="693" width="0.2" height="15.0" fill="rgb(245,174,50)" rx="2" ry="2" />
<text  x="685.50" y="703.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="542.1" y="517" width="0.2" height="15.0" fill="rgb(222,227,50)" rx="2" ry="2" />
<text  x="545.08" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="853.0" y="565" width="0.4" height="15.0" fill="rgb(245,157,1)" rx="2" ry="2" />
<text  x="855.95" y="575.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1020.2" y="373" width="0.3" height="15.0" fill="rgb(238,145,39)" rx="2" ry="2" />
<text  x="1023.23" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="340.2" y="373" width="0.2" height="15.0" fill="rgb(247,202,11)" rx="2" ry="2" />
<text  x="343.22" y="383.5" ></text>
</g>
<g >
<title>locator::token_metadata::is_any_node_being_replaced (3 samples, 0.06%)</title><rect x="1079.9" y="501" width="0.6" height="15.0" fill="rgb(254,15,23)" rx="2" ry="2" />
<text  x="1082.85" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="75.1" y="629" width="0.2" height="15.0" fill="rgb(205,117,34)" rx="2" ry="2" />
<text  x="78.09" y="639.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (3 samples, 0.06%)</title><rect x="39.8" y="565" width="0.7" height="15.0" fill="rgb(248,55,4)" rx="2" ry="2" />
<text  x="42.81" y="575.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::decorated_key, long, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1118.5" y="373" width="0.3" height="15.0" fill="rgb(209,134,17)" rx="2" ry="2" />
<text  x="1121.54" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;, std::allocator&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; &gt; &gt;::_M_get_Tp_allocator (1 samples, 0.02%)</title><rect x="21.6" y="613" width="0.2" height="15.0" fill="rgb(230,28,2)" rx="2" ry="2" />
<text  x="24.61" y="623.5" ></text>
</g>
<g >
<title>auth::get_permissions (118 samples, 2.28%)</title><rect x="786.7" y="517" width="26.9" height="15.0" fill="rgb(210,64,54)" rx="2" ry="2" />
<text  x="789.73" y="527.5" >a..</text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%)</title><rect x="417.6" y="437" width="0.2" height="15.0" fill="rgb(212,27,39)" rx="2" ry="2" />
<text  x="420.59" y="447.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (1 samples, 0.02%)</title><rect x="710.3" y="661" width="0.2" height="15.0" fill="rgb(232,220,15)" rx="2" ry="2" />
<text  x="713.26" y="671.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="620.8" y="629" width="0.7" height="15.0" fill="rgb(233,108,18)" rx="2" ry="2" />
<text  x="623.82" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1061.4" y="533" width="0.2" height="15.0" fill="rgb(211,165,6)" rx="2" ry="2" />
<text  x="1064.42" y="543.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (2 samples, 0.04%)</title><rect x="728.9" y="613" width="0.5" height="15.0" fill="rgb(251,216,13)" rx="2" ry="2" />
<text  x="731.92" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (3 samples, 0.06%)</title><rect x="336.8" y="373" width="0.7" height="15.0" fill="rgb(232,81,20)" rx="2" ry="2" />
<text  x="339.80" y="383.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="447.2" y="565" width="0.2" height="15.0" fill="rgb(240,211,48)" rx="2" ry="2" />
<text  x="450.18" y="575.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%)</title><rect x="800.6" y="341" width="0.2" height="15.0" fill="rgb(247,167,47)" rx="2" ry="2" />
<text  x="803.61" y="351.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="94.7" y="661" width="0.2" height="15.0" fill="rgb(230,18,8)" rx="2" ry="2" />
<text  x="97.66" y="671.5" ></text>
</g>
<g >
<title>database::find_keyspace (21 samples, 0.41%)</title><rect x="1047.1" y="549" width="4.8" height="15.0" fill="rgb(226,181,45)" rx="2" ry="2" />
<text  x="1050.08" y="559.5" ></text>
</g>
<g >
<title>single_node_cql_env::prepare (1 samples, 0.02%)</title><rect x="79.0" y="533" width="0.2" height="15.0" fill="rgb(227,27,28)" rx="2" ry="2" />
<text  x="81.96" y="543.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::append&lt;char&gt; (1 samples, 0.02%)</title><rect x="10.9" y="773" width="0.2" height="15.0" fill="rgb(228,91,39)" rx="2" ry="2" />
<text  x="13.91" y="783.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="83.7" y="741" width="0.3" height="15.0" fill="rgb(210,147,40)" rx="2" ry="2" />
<text  x="86.74" y="751.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (1 samples, 0.02%)</title><rect x="869.6" y="581" width="0.2" height="15.0" fill="rgb(232,126,1)" rx="2" ry="2" />
<text  x="872.57" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="675.4" y="677" width="0.3" height="15.0" fill="rgb(231,24,36)" rx="2" ry="2" />
<text  x="678.44" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="945.1" y="581" width="0.5" height="15.0" fill="rgb(211,155,2)" rx="2" ry="2" />
<text  x="948.12" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="54.6" y="421" width="0.2" height="15.0" fill="rgb(238,218,6)" rx="2" ry="2" />
<text  x="57.61" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (3 samples, 0.06%)</title><rect x="1163.6" y="677" width="0.7" height="15.0" fill="rgb(228,29,44)" rx="2" ry="2" />
<text  x="1166.60" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="74.4" y="661" width="0.2" height="15.0" fill="rgb(242,221,14)" rx="2" ry="2" />
<text  x="77.41" y="671.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%)</title><rect x="730.1" y="613" width="0.2" height="15.0" fill="rgb(226,82,7)" rx="2" ry="2" />
<text  x="733.06" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%)</title><rect x="866.6" y="453" width="0.2" height="15.0" fill="rgb(223,217,44)" rx="2" ry="2" />
<text  x="869.61" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;cql3::query_processor&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="79.0" y="613" width="0.2" height="15.0" fill="rgb(217,143,32)" rx="2" ry="2" />
<text  x="81.96" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (64 samples, 1.23%)</title><rect x="23.0" y="533" width="14.5" height="15.0" fill="rgb(210,101,1)" rx="2" ry="2" />
<text  x="25.97" y="543.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (13 samples, 0.25%)</title><rect x="75.1" y="693" width="2.9" height="15.0" fill="rgb(248,41,27)" rx="2" ry="2" />
<text  x="78.09" y="703.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (10 samples, 0.19%)</title><rect x="749.2" y="485" width="2.3" height="15.0" fill="rgb(206,90,36)" rx="2" ry="2" />
<text  x="752.18" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (6 samples, 0.12%)</title><rect x="917.4" y="549" width="1.3" height="15.0" fill="rgb(254,136,24)" rx="2" ry="2" />
<text  x="920.36" y="559.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="41.4" y="309" width="0.2" height="15.0" fill="rgb(243,0,2)" rx="2" ry="2" />
<text  x="44.41" y="319.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="568.9" y="501" width="0.3" height="15.0" fill="rgb(222,90,35)" rx="2" ry="2" />
<text  x="571.94" y="511.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, clustering_key_prefix&gt; (1 samples, 0.02%)</title><rect x="1129.2" y="309" width="0.3" height="15.0" fill="rgb(251,205,48)" rx="2" ry="2" />
<text  x="1132.24" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (51 samples, 0.98%)</title><rect x="174.5" y="485" width="11.6" height="15.0" fill="rgb(213,94,30)" rx="2" ry="2" />
<text  x="177.54" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="41.2" y="501" width="0.4" height="15.0" fill="rgb(224,137,36)" rx="2" ry="2" />
<text  x="44.18" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (4 samples, 0.08%)</title><rect x="54.8" y="469" width="0.9" height="15.0" fill="rgb(205,109,27)" rx="2" ry="2" />
<text  x="57.83" y="479.5" ></text>
</g>
<g >
<title>service::client_state::has_access (193 samples, 3.72%)</title><rect x="776.7" y="581" width="43.9" height="15.0" fill="rgb(225,82,11)" rx="2" ry="2" />
<text  x="779.72" y="591.5" >serv..</text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="442.9" y="597" width="0.2" height="15.0" fill="rgb(240,99,29)" rx="2" ry="2" />
<text  x="445.86" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (20 samples, 0.39%)</title><rect x="621.5" y="629" width="4.6" height="15.0" fill="rgb(235,179,50)" rx="2" ry="2" />
<text  x="624.51" y="639.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (28 samples, 0.54%)</title><rect x="1117.2" y="517" width="6.3" height="15.0" fill="rgb(219,218,28)" rx="2" ry="2" />
<text  x="1120.17" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="474.0" y="469" width="0.7" height="15.0" fill="rgb(226,38,47)" rx="2" ry="2" />
<text  x="477.03" y="479.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%)</title><rect x="640.9" y="645" width="0.2" height="15.0" fill="rgb(248,227,24)" rx="2" ry="2" />
<text  x="643.85" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="560.5" y="629" width="0.2" height="15.0" fill="rgb(224,128,36)" rx="2" ry="2" />
<text  x="563.51" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1163.4" y="709" width="0.2" height="15.0" fill="rgb(230,99,14)" rx="2" ry="2" />
<text  x="1166.37" y="719.5" ></text>
</g>
<g >
<title>seastar::reactor::smp_pollfn::poll (2 samples, 0.04%)</title><rect x="1165.0" y="709" width="0.4" height="15.0" fill="rgb(242,210,18)" rx="2" ry="2" />
<text  x="1167.97" y="719.5" ></text>
</g>
<g >
<title>sstables::metadata_collector::update_min_max_components (1 samples, 0.02%)</title><rect x="83.3" y="613" width="0.2" height="15.0" fill="rgb(226,90,20)" rx="2" ry="2" />
<text  x="86.28" y="623.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (7 samples, 0.14%)</title><rect x="318.1" y="581" width="1.6" height="15.0" fill="rgb(235,36,40)" rx="2" ry="2" />
<text  x="321.14" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="1147.9" y="581" width="0.5" height="15.0" fill="rgb(219,191,32)" rx="2" ry="2" />
<text  x="1150.90" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="444.4" y="597" width="0.3" height="15.0" fill="rgb(221,179,50)" rx="2" ry="2" />
<text  x="447.45" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="586.7" y="549" width="0.2" height="15.0" fill="rgb(219,87,2)" rx="2" ry="2" />
<text  x="589.69" y="559.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="935.1" y="533" width="1.1" height="15.0" fill="rgb(234,78,38)" rx="2" ry="2" />
<text  x="938.11" y="543.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="22.5" y="565" width="0.2" height="15.0" fill="rgb(222,215,16)" rx="2" ry="2" />
<text  x="25.52" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::ensure_entry_if_complete (2 samples, 0.04%)</title><rect x="15.9" y="757" width="0.5" height="15.0" fill="rgb(234,210,8)" rx="2" ry="2" />
<text  x="18.92" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="547.1" y="517" width="0.2" height="15.0" fill="rgb(251,104,39)" rx="2" ry="2" />
<text  x="550.09" y="527.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="259.9" y="421" width="0.2" height="15.0" fill="rgb(210,206,30)" rx="2" ry="2" />
<text  x="262.88" y="431.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::done (1 samples, 0.02%)</title><rect x="600.6" y="629" width="0.2" height="15.0" fill="rgb(253,155,38)" rx="2" ry="2" />
<text  x="603.57" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (10 samples, 0.19%)</title><rect x="572.8" y="501" width="2.3" height="15.0" fill="rgb(241,224,4)" rx="2" ry="2" />
<text  x="575.80" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="44.6" y="341" width="0.2" height="15.0" fill="rgb(250,130,29)" rx="2" ry="2" />
<text  x="47.59" y="351.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (5 samples, 0.10%)</title><rect x="691.6" y="677" width="1.1" height="15.0" fill="rgb(231,172,6)" rx="2" ry="2" />
<text  x="694.60" y="687.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="830.2" y="533" width="0.2" height="15.0" fill="rgb(245,155,11)" rx="2" ry="2" />
<text  x="833.20" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (77 samples, 1.49%)</title><rect x="895.3" y="549" width="17.5" height="15.0" fill="rgb(215,96,37)" rx="2" ry="2" />
<text  x="898.28" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="1163.1" y="709" width="0.3" height="15.0" fill="rgb(234,212,34)" rx="2" ry="2" />
<text  x="1166.15" y="719.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (55 samples, 1.06%)</title><rect x="492.5" y="501" width="12.5" height="15.0" fill="rgb(253,205,45)" rx="2" ry="2" />
<text  x="495.47" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::on_new_range (1 samples, 0.02%)</title><rect x="82.6" y="581" width="0.2" height="15.0" fill="rgb(244,94,6)" rx="2" ry="2" />
<text  x="85.60" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (3 samples, 0.06%)</title><rect x="675.7" y="677" width="0.7" height="15.0" fill="rgb(213,120,4)" rx="2" ry="2" />
<text  x="678.67" y="687.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (2 samples, 0.04%)</title><rect x="930.8" y="581" width="0.4" height="15.0" fill="rgb(240,195,15)" rx="2" ry="2" />
<text  x="933.79" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="48.5" y="517" width="0.2" height="15.0" fill="rgb(210,215,25)" rx="2" ry="2" />
<text  x="51.46" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="1119.0" y="421" width="0.5" height="15.0" fill="rgb(232,102,52)" rx="2" ry="2" />
<text  x="1122.00" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (55 samples, 1.06%)</title><rect x="221.2" y="309" width="12.5" height="15.0" fill="rgb(242,10,0)" rx="2" ry="2" />
<text  x="224.19" y="319.5" ></text>
</g>
<g >
<title>query::result::builder::build (13 samples, 0.25%)</title><rect x="597.8" y="645" width="3.0" height="15.0" fill="rgb(233,35,25)" rx="2" ry="2" />
<text  x="600.84" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="48.9" y="517" width="0.2" height="15.0" fill="rgb(235,60,47)" rx="2" ry="2" />
<text  x="51.92" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;6ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="261" width="0.3" height="15.0" fill="rgb(205,97,38)" rx="2" ry="2" />
<text  x="62.84" y="271.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (3 samples, 0.06%)</title><rect x="953.5" y="597" width="0.7" height="15.0" fill="rgb(241,19,47)" rx="2" ry="2" />
<text  x="956.54" y="607.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="867.3" y="693" width="0.4" height="15.0" fill="rgb(209,170,12)" rx="2" ry="2" />
<text  x="870.29" y="703.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="296.3" y="549" width="0.2" height="15.0" fill="rgb(224,82,50)" rx="2" ry="2" />
<text  x="299.30" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (46 samples, 0.89%)</title><rect x="190.5" y="453" width="10.4" height="15.0" fill="rgb(206,227,24)" rx="2" ry="2" />
<text  x="193.47" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%)</title><rect x="835.2" y="629" width="0.2" height="15.0" fill="rgb(241,129,30)" rx="2" ry="2" />
<text  x="838.20" y="639.5" ></text>
</g>
<g >
<title>table::make_reader (1 samples, 0.02%)</title><rect x="549.1" y="581" width="0.3" height="15.0" fill="rgb(250,201,37)" rx="2" ry="2" />
<text  x="552.14" y="591.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%)</title><rect x="103.1" y="581" width="0.2" height="15.0" fill="rgb(250,196,19)" rx="2" ry="2" />
<text  x="106.08" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (461 samples, 8.89%)</title><rect x="326.1" y="485" width="104.9" height="15.0" fill="rgb(236,79,7)" rx="2" ry="2" />
<text  x="329.11" y="495.5" >flat_mutatio..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="530.9" y="533" width="0.3" height="15.0" fill="rgb(250,50,43)" rx="2" ry="2" />
<text  x="533.93" y="543.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (47 samples, 0.91%)</title><rect x="726.6" y="645" width="10.7" height="15.0" fill="rgb(251,85,31)" rx="2" ry="2" />
<text  x="729.65" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;3ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="213" width="0.3" height="15.0" fill="rgb(251,197,52)" rx="2" ry="2" />
<text  x="62.84" y="223.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%)</title><rect x="10.2" y="693" width="0.3" height="15.0" fill="rgb(233,2,7)" rx="2" ry="2" />
<text  x="13.23" y="703.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="46.0" y="341" width="0.2" height="15.0" fill="rgb(224,198,14)" rx="2" ry="2" />
<text  x="48.96" y="351.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="435.1" y="469" width="0.7" height="15.0" fill="rgb(237,67,45)" rx="2" ry="2" />
<text  x="438.12" y="479.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (2 samples, 0.04%)</title><rect x="355.0" y="389" width="0.5" height="15.0" fill="rgb(225,198,18)" rx="2" ry="2" />
<text  x="358.01" y="399.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (6 samples, 0.12%)</title><rect x="1117.6" y="453" width="1.4" height="15.0" fill="rgb(217,154,36)" rx="2" ry="2" />
<text  x="1120.63" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (2 samples, 0.04%)</title><rect x="873.4" y="485" width="0.5" height="15.0" fill="rgb(229,155,37)" rx="2" ry="2" />
<text  x="876.44" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="515.0" y="485" width="0.2" height="15.0" fill="rgb(242,189,43)" rx="2" ry="2" />
<text  x="518.00" y="495.5" ></text>
</g>
<g >
<title>database::find_schema (32 samples, 0.62%)</title><rect x="823.4" y="581" width="7.3" height="15.0" fill="rgb(252,48,44)" rx="2" ry="2" />
<text  x="826.37" y="591.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="969.2" y="581" width="0.7" height="15.0" fill="rgb(247,49,27)" rx="2" ry="2" />
<text  x="972.25" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (508 samples, 9.80%)</title><rect x="321.6" y="533" width="115.6" height="15.0" fill="rgb(217,219,30)" rx="2" ry="2" />
<text  x="324.56" y="543.5" >seastar::inter..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="83.1" y="581" width="0.2" height="15.0" fill="rgb(210,211,32)" rx="2" ry="2" />
<text  x="86.05" y="591.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="16.6" y="661" width="0.2" height="15.0" fill="rgb(240,172,46)" rx="2" ry="2" />
<text  x="19.60" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="661.1" y="645" width="0.5" height="15.0" fill="rgb(246,34,3)" rx="2" ry="2" />
<text  x="664.11" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_write_response_handler&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1126.1" y="453" width="0.2" height="15.0" fill="rgb(249,195,31)" rx="2" ry="2" />
<text  x="1129.05" y="463.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="103.8" y="533" width="0.2" height="15.0" fill="rgb(252,134,6)" rx="2" ry="2" />
<text  x="106.76" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1162.5" y="629" width="0.2" height="15.0" fill="rgb(220,142,54)" rx="2" ry="2" />
<text  x="1165.46" y="639.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (1 samples, 0.02%)</title><rect x="103.1" y="565" width="0.2" height="15.0" fill="rgb(230,163,54)" rx="2" ry="2" />
<text  x="106.08" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;streamed_mutation_freezer&gt;::_M_reset (1 samples, 0.02%)</title><rect x="103.1" y="485" width="0.2" height="15.0" fill="rgb(222,211,0)" rx="2" ry="2" />
<text  x="106.08" y="495.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (1 samples, 0.02%)</title><rect x="35.7" y="453" width="0.2" height="15.0" fill="rgb(241,94,33)" rx="2" ry="2" />
<text  x="38.72" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (3 samples, 0.06%)</title><rect x="465.4" y="469" width="0.7" height="15.0" fill="rgb(252,134,54)" rx="2" ry="2" />
<text  x="468.39" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="875.5" y="597" width="0.2" height="15.0" fill="rgb(243,221,31)" rx="2" ry="2" />
<text  x="878.49" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (2 samples, 0.04%)</title><rect x="909.6" y="533" width="0.5" height="15.0" fill="rgb(238,175,22)" rx="2" ry="2" />
<text  x="912.62" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="652.9" y="597" width="0.2" height="15.0" fill="rgb(227,24,10)" rx="2" ry="2" />
<text  x="655.91" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%)</title><rect x="1189.1" y="837" width="0.2" height="15.0" fill="rgb(238,45,33)" rx="2" ry="2" />
<text  x="1192.09" y="847.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1,162 samples, 22.41%)</title><rect x="867.3" y="709" width="264.4" height="15.0" fill="rgb(212,29,50)" rx="2" ry="2" />
<text  x="870.29" y="719.5" >seastar::lambda_task&lt;seastar::execu..</text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (9 samples, 0.17%)</title><rect x="934.2" y="549" width="2.0" height="15.0" fill="rgb(243,167,29)" rx="2" ry="2" />
<text  x="937.20" y="559.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (19 samples, 0.37%)</title><rect x="939.4" y="597" width="4.4" height="15.0" fill="rgb(232,178,8)" rx="2" ry="2" />
<text  x="942.43" y="607.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="930.6" y="533" width="0.2" height="15.0" fill="rgb(251,72,12)" rx="2" ry="2" />
<text  x="933.56" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="145.0" y="613" width="0.2" height="15.0" fill="rgb(248,19,45)" rx="2" ry="2" />
<text  x="147.95" y="623.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="80.8" y="389" width="0.2" height="15.0" fill="rgb(232,156,45)" rx="2" ry="2" />
<text  x="83.78" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="40.3" y="501" width="0.2" height="15.0" fill="rgb(237,100,48)" rx="2" ry="2" />
<text  x="43.27" y="511.5" ></text>
</g>
<g >
<title>std::optional&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator=&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%)</title><rect x="74.6" y="677" width="0.3" height="15.0" fill="rgb(221,112,31)" rx="2" ry="2" />
<text  x="77.63" y="687.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (2 samples, 0.04%)</title><rect x="19.1" y="677" width="0.5" height="15.0" fill="rgb(229,157,35)" rx="2" ry="2" />
<text  x="22.10" y="687.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%)</title><rect x="776.5" y="581" width="0.2" height="15.0" fill="rgb(238,106,36)" rx="2" ry="2" />
<text  x="779.49" y="591.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="539.4" y="533" width="0.2" height="15.0" fill="rgb(218,184,5)" rx="2" ry="2" />
<text  x="542.35" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (15 samples, 0.29%)</title><rect x="58.0" y="565" width="3.4" height="15.0" fill="rgb(246,133,40)" rx="2" ry="2" />
<text  x="61.02" y="575.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (1 samples, 0.02%)</title><rect x="1101.5" y="597" width="0.2" height="15.0" fill="rgb(248,14,52)" rx="2" ry="2" />
<text  x="1104.47" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="853.6" y="645" width="0.3" height="15.0" fill="rgb(228,82,23)" rx="2" ry="2" />
<text  x="856.64" y="655.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_super (1 samples, 0.02%)</title><rect x="29.3" y="469" width="0.3" height="15.0" fill="rgb(251,154,8)" rx="2" ry="2" />
<text  x="32.34" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="22.5" y="501" width="0.2" height="15.0" fill="rgb(247,167,50)" rx="2" ry="2" />
<text  x="25.52" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.14%)</title><rect x="793.6" y="421" width="1.5" height="15.0" fill="rgb(234,102,14)" rx="2" ry="2" />
<text  x="796.56" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (2 samples, 0.04%)</title><rect x="23.9" y="389" width="0.4" height="15.0" fill="rgb(225,223,53)" rx="2" ry="2" />
<text  x="26.88" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::deque (1 samples, 0.02%)</title><rect x="20.0" y="517" width="0.2" height="15.0" fill="rgb(222,174,35)" rx="2" ry="2" />
<text  x="23.01" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%)</title><rect x="961.5" y="581" width="0.2" height="15.0" fill="rgb(237,174,12)" rx="2" ry="2" />
<text  x="964.51" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (1 samples, 0.02%)</title><rect x="614.5" y="645" width="0.2" height="15.0" fill="rgb(211,87,51)" rx="2" ry="2" />
<text  x="617.45" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="673.2" y="693" width="0.2" height="15.0" fill="rgb(218,19,50)" rx="2" ry="2" />
<text  x="676.17" y="703.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="43.9" y="341" width="0.2" height="15.0" fill="rgb(237,78,46)" rx="2" ry="2" />
<text  x="46.91" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="862.3" y="613" width="0.2" height="15.0" fill="rgb(244,61,2)" rx="2" ry="2" />
<text  x="865.29" y="623.5" ></text>
</g>
<g >
<title>_IO_fgets (1 samples, 0.02%)</title><rect x="84.4" y="837" width="0.2" height="15.0" fill="rgb(206,89,24)" rx="2" ry="2" />
<text  x="87.42" y="847.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="38.2" y="405" width="0.5" height="15.0" fill="rgb(237,20,3)" rx="2" ry="2" />
<text  x="41.22" y="415.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="499.8" y="405" width="0.6" height="15.0" fill="rgb(207,34,53)" rx="2" ry="2" />
<text  x="502.75" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="282.6" y="453" width="0.3" height="15.0" fill="rgb(241,3,38)" rx="2" ry="2" />
<text  x="285.64" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%)</title><rect x="793.8" y="373" width="1.1" height="15.0" fill="rgb(253,38,12)" rx="2" ry="2" />
<text  x="796.78" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (7 samples, 0.14%)</title><rect x="280.6" y="421" width="1.6" height="15.0" fill="rgb(216,8,31)" rx="2" ry="2" />
<text  x="283.59" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="691.1" y="693" width="0.5" height="15.0" fill="rgb(226,182,8)" rx="2" ry="2" />
<text  x="694.15" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (7 samples, 0.14%)</title><rect x="1146.8" y="661" width="1.6" height="15.0" fill="rgb(246,77,21)" rx="2" ry="2" />
<text  x="1149.76" y="671.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (1 samples, 0.02%)</title><rect x="117.4" y="613" width="0.2" height="15.0" fill="rgb(239,137,17)" rx="2" ry="2" />
<text  x="120.42" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="774.7" y="565" width="0.2" height="15.0" fill="rgb(246,87,12)" rx="2" ry="2" />
<text  x="777.67" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (2 samples, 0.04%)</title><rect x="952.9" y="613" width="0.4" height="15.0" fill="rgb(237,164,15)" rx="2" ry="2" />
<text  x="955.86" y="623.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="38.0" y="389" width="0.2" height="15.0" fill="rgb(223,78,37)" rx="2" ry="2" />
<text  x="40.99" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (4 samples, 0.08%)</title><rect x="827.9" y="501" width="0.9" height="15.0" fill="rgb(238,173,15)" rx="2" ry="2" />
<text  x="830.92" y="511.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%)</title><rect x="890.7" y="597" width="0.3" height="15.0" fill="rgb(234,18,4)" rx="2" ry="2" />
<text  x="893.73" y="607.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="866.6" y="613" width="0.2" height="15.0" fill="rgb(212,11,41)" rx="2" ry="2" />
<text  x="869.61" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="103.5" y="597" width="0.3" height="15.0" fill="rgb(235,6,34)" rx="2" ry="2" />
<text  x="106.54" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_charPositionInLine (1 samples, 0.02%)</title><rect x="27.5" y="469" width="0.3" height="15.0" fill="rgb(254,34,40)" rx="2" ry="2" />
<text  x="30.52" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%)</title><rect x="971.5" y="485" width="0.3" height="15.0" fill="rgb(242,210,0)" rx="2" ry="2" />
<text  x="974.52" y="495.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="703.0" y="693" width="0.4" height="15.0" fill="rgb(251,169,5)" rx="2" ry="2" />
<text  x="705.98" y="703.5" ></text>
</g>
<g >
<title>query::querier&lt; (1,815 samples, 35.00%)</title><rect x="147.9" y="645" width="413.1" height="15.0" fill="rgb(247,77,0)" rx="2" ry="2" />
<text  x="150.91" y="655.5" >query::querier&lt;</text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (5 samples, 0.10%)</title><rect x="53.0" y="469" width="1.2" height="15.0" fill="rgb(249,142,45)" rx="2" ry="2" />
<text  x="56.01" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="17.1" y="597" width="0.2" height="15.0" fill="rgb(232,199,53)" rx="2" ry="2" />
<text  x="20.05" y="607.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (192 samples, 3.70%)</title><rect x="997.5" y="517" width="43.7" height="15.0" fill="rgb(254,203,51)" rx="2" ry="2" />
<text  x="1000.47" y="527.5" >serv..</text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1127.2" y="373" width="0.2" height="15.0" fill="rgb(234,189,48)" rx="2" ry="2" />
<text  x="1130.19" y="383.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%)</title><rect x="254.0" y="341" width="0.2" height="15.0" fill="rgb(221,85,28)" rx="2" ry="2" />
<text  x="256.97" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (1 samples, 0.02%)</title><rect x="10.7" y="789" width="0.2" height="15.0" fill="rgb(251,2,9)" rx="2" ry="2" />
<text  x="13.68" y="799.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (7 samples, 0.14%)</title><rect x="18.0" y="725" width="1.6" height="15.0" fill="rgb(224,75,11)" rx="2" ry="2" />
<text  x="20.97" y="735.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.69%)</title><rect x="1117.2" y="645" width="8.2" height="15.0" fill="rgb(206,168,32)" rx="2" ry="2" />
<text  x="1120.17" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1148.1" y="565" width="0.3" height="15.0" fill="rgb(244,202,11)" rx="2" ry="2" />
<text  x="1151.13" y="575.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="805.2" y="293" width="0.2" height="15.0" fill="rgb(216,49,10)" rx="2" ry="2" />
<text  x="808.16" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="352.5" y="389" width="0.2" height="15.0" fill="rgb(210,101,11)" rx="2" ry="2" />
<text  x="355.51" y="399.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1118.5" y="389" width="0.3" height="15.0" fill="rgb(205,210,14)" rx="2" ry="2" />
<text  x="1121.54" y="399.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (8 samples, 0.15%)</title><rect x="862.5" y="677" width="1.8" height="15.0" fill="rgb(231,66,53)" rx="2" ry="2" />
<text  x="865.51" y="687.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (13 samples, 0.25%)</title><rect x="802.4" y="341" width="3.0" height="15.0" fill="rgb(221,142,1)" rx="2" ry="2" />
<text  x="805.43" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.14%)</title><rect x="439.0" y="533" width="1.6" height="15.0" fill="rgb(215,96,34)" rx="2" ry="2" />
<text  x="441.99" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (6 samples, 0.12%)</title><rect x="59.4" y="533" width="1.4" height="15.0" fill="rgb(228,112,4)" rx="2" ry="2" />
<text  x="62.38" y="543.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%)</title><rect x="102.4" y="677" width="0.2" height="15.0" fill="rgb(245,30,34)" rx="2" ry="2" />
<text  x="105.40" y="687.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (4 samples, 0.08%)</title><rect x="887.3" y="629" width="0.9" height="15.0" fill="rgb(228,208,39)" rx="2" ry="2" />
<text  x="890.32" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (6 samples, 0.12%)</title><rect x="987.7" y="501" width="1.3" height="15.0" fill="rgb(215,36,4)" rx="2" ry="2" />
<text  x="990.68" y="511.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::write&lt;seastar::measuring_output_stream&gt; (1 samples, 0.02%)</title><rect x="1129.2" y="277" width="0.3" height="15.0" fill="rgb(210,174,35)" rx="2" ry="2" />
<text  x="1132.24" y="287.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="69.6" y="597" width="0.3" height="15.0" fill="rgb(230,198,23)" rx="2" ry="2" />
<text  x="72.63" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (138 samples, 2.66%)</title><rect x="891.0" y="613" width="31.4" height="15.0" fill="rgb(231,13,35)" rx="2" ry="2" />
<text  x="893.96" y="623.5" >cq..</text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (1 samples, 0.02%)</title><rect x="415.1" y="405" width="0.2" height="15.0" fill="rgb(221,14,48)" rx="2" ry="2" />
<text  x="418.09" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (66 samples, 1.27%)</title><rect x="514.8" y="501" width="15.0" height="15.0" fill="rgb(205,53,50)" rx="2" ry="2" />
<text  x="517.77" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.69%)</title><rect x="1117.2" y="581" width="8.2" height="15.0" fill="rgb(205,181,41)" rx="2" ry="2" />
<text  x="1120.17" y="591.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="277.2" y="373" width="0.2" height="15.0" fill="rgb(253,121,18)" rx="2" ry="2" />
<text  x="280.18" y="383.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (3 samples, 0.06%)</title><rect x="639.7" y="709" width="0.7" height="15.0" fill="rgb(251,112,22)" rx="2" ry="2" />
<text  x="642.71" y="719.5" ></text>
</g>
<g >
<title>database::apply_in_memory (27 samples, 0.52%)</title><rect x="1117.2" y="501" width="6.1" height="15.0" fill="rgb(227,63,44)" rx="2" ry="2" />
<text  x="1120.17" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (10 samples, 0.19%)</title><rect x="1099.0" y="597" width="2.2" height="15.0" fill="rgb(210,67,48)" rx="2" ry="2" />
<text  x="1101.97" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="45.7" y="453" width="0.5" height="15.0" fill="rgb(220,229,37)" rx="2" ry="2" />
<text  x="48.73" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="875.7" y="597" width="0.2" height="15.0" fill="rgb(214,164,4)" rx="2" ry="2" />
<text  x="878.71" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="43.9" y="485" width="0.5" height="15.0" fill="rgb(241,173,19)" rx="2" ry="2" />
<text  x="46.91" y="495.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%)</title><rect x="74.9" y="677" width="0.2" height="15.0" fill="rgb(209,90,48)" rx="2" ry="2" />
<text  x="77.86" y="687.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (2 samples, 0.04%)</title><rect x="1131.7" y="517" width="0.5" height="15.0" fill="rgb(208,152,28)" rx="2" ry="2" />
<text  x="1134.74" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%)</title><rect x="544.6" y="501" width="0.2" height="15.0" fill="rgb(243,135,41)" rx="2" ry="2" />
<text  x="547.58" y="511.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::tuple (1 samples, 0.02%)</title><rect x="57.1" y="421" width="0.2" height="15.0" fill="rgb(224,41,37)" rx="2" ry="2" />
<text  x="60.11" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (1 samples, 0.02%)</title><rect x="80.8" y="453" width="0.2" height="15.0" fill="rgb(210,77,53)" rx="2" ry="2" />
<text  x="83.78" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="254.0" y="357" width="0.2" height="15.0" fill="rgb(208,206,25)" rx="2" ry="2" />
<text  x="256.97" y="367.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (5 samples, 0.10%)</title><rect x="519.1" y="437" width="1.1" height="15.0" fill="rgb(226,89,10)" rx="2" ry="2" />
<text  x="522.10" y="447.5" ></text>
</g>
<g >
<title>free (2 samples, 0.04%)</title><rect x="94.9" y="629" width="0.4" height="15.0" fill="rgb(229,35,5)" rx="2" ry="2" />
<text  x="97.89" y="639.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (19 samples, 0.37%)</title><rect x="229.4" y="277" width="4.3" height="15.0" fill="rgb(224,78,39)" rx="2" ry="2" />
<text  x="232.39" y="287.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (1 samples, 0.02%)</title><rect x="870.5" y="533" width="0.2" height="15.0" fill="rgb(227,150,38)" rx="2" ry="2" />
<text  x="873.48" y="543.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (6 samples, 0.12%)</title><rect x="921.0" y="597" width="1.4" height="15.0" fill="rgb(216,20,48)" rx="2" ry="2" />
<text  x="924.00" y="607.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="1112.6" y="613" width="0.3" height="15.0" fill="rgb(246,182,28)" rx="2" ry="2" />
<text  x="1115.62" y="623.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="732.1" y="501" width="0.2" height="15.0" fill="rgb(212,186,33)" rx="2" ry="2" />
<text  x="735.11" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (7 samples, 0.14%)</title><rect x="516.4" y="469" width="1.6" height="15.0" fill="rgb(228,209,43)" rx="2" ry="2" />
<text  x="519.36" y="479.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (1 samples, 0.02%)</title><rect x="960.6" y="597" width="0.2" height="15.0" fill="rgb(217,181,53)" rx="2" ry="2" />
<text  x="963.60" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="624.9" y="565" width="0.5" height="15.0" fill="rgb(206,3,51)" rx="2" ry="2" />
<text  x="627.92" y="575.5" ></text>
</g>
<g >
<title>db::schema_tables::diff_table_or_view (1 samples, 0.02%)</title><rect x="102.6" y="677" width="0.3" height="15.0" fill="rgb(221,129,54)" rx="2" ry="2" />
<text  x="105.62" y="687.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (3 samples, 0.06%)</title><rect x="568.3" y="501" width="0.6" height="15.0" fill="rgb(220,46,0)" rx="2" ry="2" />
<text  x="571.25" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="691.8" y="533" width="0.3" height="15.0" fill="rgb(227,186,3)" rx="2" ry="2" />
<text  x="694.83" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (2 samples, 0.04%)</title><rect x="285.1" y="469" width="0.5" height="15.0" fill="rgb(212,191,32)" rx="2" ry="2" />
<text  x="288.14" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%)</title><rect x="1013.4" y="437" width="2.5" height="15.0" fill="rgb(243,199,52)" rx="2" ry="2" />
<text  x="1016.40" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="692.5" y="661" width="0.2" height="15.0" fill="rgb(206,212,22)" rx="2" ry="2" />
<text  x="695.51" y="671.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="38.9" y="373" width="0.2" height="15.0" fill="rgb(251,215,29)" rx="2" ry="2" />
<text  x="41.90" y="383.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (5 samples, 0.10%)</title><rect x="767.8" y="549" width="1.2" height="15.0" fill="rgb(209,194,6)" rx="2" ry="2" />
<text  x="770.84" y="559.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (3 samples, 0.06%)</title><rect x="981.1" y="565" width="0.7" height="15.0" fill="rgb(227,74,13)" rx="2" ry="2" />
<text  x="984.08" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="264.0" y="389" width="0.2" height="15.0" fill="rgb(216,108,27)" rx="2" ry="2" />
<text  x="266.98" y="399.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (697 samples, 13.44%)</title><rect x="156.6" y="597" width="158.6" height="15.0" fill="rgb(233,128,19)" rx="2" ry="2" />
<text  x="159.56" y="607.5" >merging_reader&lt;mutat..</text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="985.4" y="501" width="0.2" height="15.0" fill="rgb(240,88,52)" rx="2" ry="2" />
<text  x="988.41" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="535.3" y="517" width="0.9" height="15.0" fill="rgb(241,117,15)" rx="2" ry="2" />
<text  x="538.25" y="527.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;char const  (1 samples, 0.02%)</title><rect x="78.0" y="709" width="0.3" height="15.0" fill="rgb(246,156,13)" rx="2" ry="2" />
<text  x="81.05" y="719.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (127 samples, 2.45%)</title><rect x="212.3" y="341" width="28.9" height="15.0" fill="rgb(230,30,17)" rx="2" ry="2" />
<text  x="215.32" y="351.5" >co..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (9 samples, 0.17%)</title><rect x="261.7" y="389" width="2.1" height="15.0" fill="rgb(206,174,35)" rx="2" ry="2" />
<text  x="264.70" y="399.5" ></text>
</g>
<g >
<title>[unknown] (13 samples, 0.25%)</title><rect x="11.1" y="805" width="3.0" height="15.0" fill="rgb(206,22,37)" rx="2" ry="2" />
<text  x="14.14" y="815.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="40.7" y="453" width="0.5" height="15.0" fill="rgb(208,207,21)" rx="2" ry="2" />
<text  x="43.72" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (2 samples, 0.04%)</title><rect x="834.5" y="613" width="0.5" height="15.0" fill="rgb(236,225,24)" rx="2" ry="2" />
<text  x="837.52" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="658.6" y="677" width="0.5" height="15.0" fill="rgb(239,69,38)" rx="2" ry="2" />
<text  x="661.60" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="908.9" y="501" width="0.5" height="15.0" fill="rgb(227,219,40)" rx="2" ry="2" />
<text  x="911.94" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="662.5" y="645" width="0.2" height="15.0" fill="rgb(244,212,1)" rx="2" ry="2" />
<text  x="665.47" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%)</title><rect x="345.7" y="421" width="0.2" height="15.0" fill="rgb(219,180,38)" rx="2" ry="2" />
<text  x="348.68" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (1 samples, 0.02%)</title><rect x="1103.3" y="613" width="0.2" height="15.0" fill="rgb(249,41,34)" rx="2" ry="2" />
<text  x="1106.29" y="623.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="10.2" y="773" width="0.3" height="15.0" fill="rgb(254,174,28)" rx="2" ry="2" />
<text  x="13.23" y="783.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::statements::update_statement, false&gt;::make&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (1 samples, 0.02%)</title><rect x="71.9" y="629" width="0.2" height="15.0" fill="rgb(206,161,30)" rx="2" ry="2" />
<text  x="74.90" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (1 samples, 0.02%)</title><rect x="886.4" y="629" width="0.2" height="15.0" fill="rgb(218,212,4)" rx="2" ry="2" />
<text  x="889.41" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="48.2" y="453" width="0.3" height="15.0" fill="rgb(226,7,30)" rx="2" ry="2" />
<text  x="51.23" y="463.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (12 samples, 0.23%)</title><rect x="1160.0" y="661" width="2.7" height="15.0" fill="rgb(252,2,25)" rx="2" ry="2" />
<text  x="1162.96" y="671.5" ></text>
</g>
<g >
<title>db::query_context::execute_cql&lt;&gt; (1 samples, 0.02%)</title><rect x="80.8" y="597" width="0.2" height="15.0" fill="rgb(217,94,23)" rx="2" ry="2" />
<text  x="83.78" y="607.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="1083.7" y="517" width="0.2" height="15.0" fill="rgb(223,42,6)" rx="2" ry="2" />
<text  x="1086.72" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="140.9" y="629" width="0.4" height="15.0" fill="rgb(241,5,22)" rx="2" ry="2" />
<text  x="143.86" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="438.5" y="565" width="0.3" height="15.0" fill="rgb(252,186,21)" rx="2" ry="2" />
<text  x="441.53" y="575.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (39 samples, 0.75%)</title><rect x="844.8" y="645" width="8.8" height="15.0" fill="rgb(251,215,20)" rx="2" ry="2" />
<text  x="847.76" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (10 samples, 0.19%)</title><rect x="688.9" y="693" width="2.2" height="15.0" fill="rgb(221,193,37)" rx="2" ry="2" />
<text  x="691.87" y="703.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (3 samples, 0.06%)</title><rect x="81.0" y="661" width="0.7" height="15.0" fill="rgb(206,188,15)" rx="2" ry="2" />
<text  x="84.00" y="671.5" ></text>
</g>
<g >
<title>row_cache::update (2 samples, 0.04%)</title><rect x="1131.7" y="661" width="0.5" height="15.0" fill="rgb(246,97,19)" rx="2" ry="2" />
<text  x="1134.74" y="671.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (5 samples, 0.10%)</title><rect x="339.1" y="373" width="1.1" height="15.0" fill="rgb(222,214,19)" rx="2" ry="2" />
<text  x="342.08" y="383.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="519.8" y="405" width="0.4" height="15.0" fill="rgb(215,4,17)" rx="2" ry="2" />
<text  x="522.78" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1061.0" y="501" width="0.2" height="15.0" fill="rgb(223,108,7)" rx="2" ry="2" />
<text  x="1063.96" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="629.7" y="645" width="0.2" height="15.0" fill="rgb(230,100,39)" rx="2" ry="2" />
<text  x="632.70" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="870.3" y="533" width="0.2" height="15.0" fill="rgb(239,98,51)" rx="2" ry="2" />
<text  x="873.25" y="543.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="985.0" y="501" width="0.4" height="15.0" fill="rgb(225,81,38)" rx="2" ry="2" />
<text  x="987.95" y="511.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="913.7" y="501" width="0.7" height="15.0" fill="rgb(209,188,18)" rx="2" ry="2" />
<text  x="916.72" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (404 samples, 7.79%)</title><rect x="329.1" y="469" width="91.9" height="15.0" fill="rgb(221,102,4)" rx="2" ry="2" />
<text  x="332.07" y="479.5" >mutation_f..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (17 samples, 0.33%)</title><rect x="260.3" y="421" width="3.9" height="15.0" fill="rgb(223,176,21)" rx="2" ry="2" />
<text  x="263.34" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="941.9" y="549" width="0.5" height="15.0" fill="rgb(243,68,21)" rx="2" ry="2" />
<text  x="944.94" y="559.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="647.9" y="693" width="0.2" height="15.0" fill="rgb(248,35,10)" rx="2" ry="2" />
<text  x="650.91" y="703.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (2 samples, 0.04%)</title><rect x="1163.6" y="629" width="0.5" height="15.0" fill="rgb(233,40,11)" rx="2" ry="2" />
<text  x="1166.60" y="639.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (36 samples, 0.69%)</title><rect x="1117.2" y="613" width="8.2" height="15.0" fill="rgb(239,2,42)" rx="2" ry="2" />
<text  x="1120.17" y="623.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="1148.4" y="645" width="1.8" height="15.0" fill="rgb(228,97,5)" rx="2" ry="2" />
<text  x="1151.35" y="655.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="16.1" y="725" width="0.3" height="15.0" fill="rgb(246,165,4)" rx="2" ry="2" />
<text  x="19.14" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="71.2" y="613" width="0.2" height="15.0" fill="rgb(249,74,12)" rx="2" ry="2" />
<text  x="74.22" y="623.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.08%)</title><rect x="142.7" y="629" width="0.9" height="15.0" fill="rgb(237,212,43)" rx="2" ry="2" />
<text  x="145.68" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="41.2" y="485" width="0.4" height="15.0" fill="rgb(227,53,19)" rx="2" ry="2" />
<text  x="44.18" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="56.4" y="501" width="0.3" height="15.0" fill="rgb(233,45,31)" rx="2" ry="2" />
<text  x="59.43" y="511.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="42.8" y="325" width="0.2" height="15.0" fill="rgb(214,202,13)" rx="2" ry="2" />
<text  x="45.77" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="53.7" y="405" width="0.2" height="15.0" fill="rgb(220,100,52)" rx="2" ry="2" />
<text  x="56.70" y="415.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="796.5" y="405" width="0.2" height="15.0" fill="rgb(248,76,19)" rx="2" ry="2" />
<text  x="799.51" y="415.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (4 samples, 0.08%)</title><rect x="76.5" y="549" width="0.9" height="15.0" fill="rgb(227,188,33)" rx="2" ry="2" />
<text  x="79.45" y="559.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="580.1" y="565" width="0.2" height="15.0" fill="rgb(238,92,16)" rx="2" ry="2" />
<text  x="583.09" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="878.7" y="677" width="0.4" height="15.0" fill="rgb(232,24,16)" rx="2" ry="2" />
<text  x="881.67" y="687.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (13 samples, 0.25%)</title><rect x="827.2" y="533" width="3.0" height="15.0" fill="rgb(237,154,45)" rx="2" ry="2" />
<text  x="830.24" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="58.7" y="517" width="0.2" height="15.0" fill="rgb(236,18,27)" rx="2" ry="2" />
<text  x="61.70" y="527.5" ></text>
</g>
<g >
<title>compound_type&lt; (11 samples, 0.21%)</title><rect x="924.0" y="581" width="2.5" height="15.0" fill="rgb(211,68,5)" rx="2" ry="2" />
<text  x="926.96" y="591.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="308.1" y="501" width="0.3" height="15.0" fill="rgb(212,220,16)" rx="2" ry="2" />
<text  x="311.13" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mQUOTED_NAME (1 samples, 0.02%)</title><rect x="33.0" y="469" width="0.2" height="15.0" fill="rgb(248,39,38)" rx="2" ry="2" />
<text  x="35.99" y="479.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (1 samples, 0.02%)</title><rect x="1097.4" y="565" width="0.2" height="15.0" fill="rgb(220,157,34)" rx="2" ry="2" />
<text  x="1100.38" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="55.1" y="357" width="0.4" height="15.0" fill="rgb(229,153,24)" rx="2" ry="2" />
<text  x="58.06" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="56.7" y="517" width="0.2" height="15.0" fill="rgb(244,159,48)" rx="2" ry="2" />
<text  x="59.65" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="1131.7" y="469" width="0.3" height="15.0" fill="rgb(241,157,38)" rx="2" ry="2" />
<text  x="1134.74" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (4 samples, 0.08%)</title><rect x="861.6" y="661" width="0.9" height="15.0" fill="rgb(237,215,37)" rx="2" ry="2" />
<text  x="864.60" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (1 samples, 0.02%)</title><rect x="708.2" y="613" width="0.2" height="15.0" fill="rgb(229,35,46)" rx="2" ry="2" />
<text  x="711.21" y="623.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (11 samples, 0.21%)</title><rect x="308.8" y="501" width="2.5" height="15.0" fill="rgb(241,193,2)" rx="2" ry="2" />
<text  x="311.81" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="907.3" y="485" width="0.3" height="15.0" fill="rgb(208,109,19)" rx="2" ry="2" />
<text  x="910.35" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="816.1" y="485" width="0.2" height="15.0" fill="rgb(229,139,40)" rx="2" ry="2" />
<text  x="819.09" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2 samples, 0.04%)</title><rect x="56.0" y="469" width="0.4" height="15.0" fill="rgb(219,53,3)" rx="2" ry="2" />
<text  x="58.97" y="479.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (1 samples, 0.02%)</title><rect x="1164.1" y="645" width="0.2" height="15.0" fill="rgb(211,28,45)" rx="2" ry="2" />
<text  x="1167.06" y="655.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::statements::raw::update_statement, cql3::cf_name, std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;, bool&amp;&gt; (4 samples, 0.08%)</title><rect x="62.1" y="565" width="0.9" height="15.0" fill="rgb(229,58,37)" rx="2" ry="2" />
<text  x="65.12" y="575.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (1 samples, 0.02%)</title><rect x="806.1" y="469" width="0.2" height="15.0" fill="rgb(223,85,26)" rx="2" ry="2" />
<text  x="809.07" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (3 samples, 0.06%)</title><rect x="510.7" y="517" width="0.7" height="15.0" fill="rgb(254,227,51)" rx="2" ry="2" />
<text  x="513.68" y="527.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt;, true, true&gt;::__uniq_ptr_impl (3 samples, 0.06%)</title><rect x="62.3" y="533" width="0.7" height="15.0" fill="rgb(222,51,7)" rx="2" ry="2" />
<text  x="65.34" y="543.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="44.4" y="517" width="0.2" height="15.0" fill="rgb(253,97,46)" rx="2" ry="2" />
<text  x="47.36" y="527.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="259.4" y="405" width="0.3" height="15.0" fill="rgb(221,75,49)" rx="2" ry="2" />
<text  x="262.43" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.04%)</title><rect x="1092.1" y="581" width="0.5" height="15.0" fill="rgb(222,28,12)" rx="2" ry="2" />
<text  x="1095.14" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="237.4" y="309" width="0.6" height="15.0" fill="rgb(225,186,33)" rx="2" ry="2" />
<text  x="240.35" y="319.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (2 samples, 0.04%)</title><rect x="810.9" y="485" width="0.4" height="15.0" fill="rgb(218,39,49)" rx="2" ry="2" />
<text  x="813.85" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="102.6" y="469" width="0.3" height="15.0" fill="rgb(244,90,46)" rx="2" ry="2" />
<text  x="105.62" y="479.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="67.1" y="581" width="0.3" height="15.0" fill="rgb(205,48,9)" rx="2" ry="2" />
<text  x="70.12" y="591.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%)</title><rect x="804.7" y="293" width="0.5" height="15.0" fill="rgb(218,95,32)" rx="2" ry="2" />
<text  x="807.71" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="907.1" y="485" width="0.2" height="15.0" fill="rgb(231,229,6)" rx="2" ry="2" />
<text  x="910.12" y="495.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (3 samples, 0.06%)</title><rect x="247.6" y="373" width="0.7" height="15.0" fill="rgb(233,127,10)" rx="2" ry="2" />
<text  x="250.59" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="178.0" y="453" width="0.4" height="15.0" fill="rgb(210,3,18)" rx="2" ry="2" />
<text  x="180.95" y="463.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="59.2" y="501" width="0.2" height="15.0" fill="rgb(228,71,14)" rx="2" ry="2" />
<text  x="62.16" y="511.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (1 samples, 0.02%)</title><rect x="1127.0" y="389" width="0.2" height="15.0" fill="rgb(210,158,37)" rx="2" ry="2" />
<text  x="1129.96" y="399.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (5 samples, 0.10%)</title><rect x="1123.5" y="517" width="1.2" height="15.0" fill="rgb(251,115,9)" rx="2" ry="2" />
<text  x="1126.55" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="25.7" y="501" width="0.2" height="15.0" fill="rgb(232,206,4)" rx="2" ry="2" />
<text  x="28.70" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (3 samples, 0.06%)</title><rect x="569.8" y="501" width="0.7" height="15.0" fill="rgb(221,67,21)" rx="2" ry="2" />
<text  x="572.85" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (2 samples, 0.04%)</title><rect x="844.8" y="597" width="0.4" height="15.0" fill="rgb(232,121,51)" rx="2" ry="2" />
<text  x="847.76" y="607.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="568.5" y="485" width="0.2" height="15.0" fill="rgb(224,179,13)" rx="2" ry="2" />
<text  x="571.48" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="50.5" y="469" width="0.2" height="15.0" fill="rgb(206,33,51)" rx="2" ry="2" />
<text  x="53.51" y="479.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%)</title><rect x="1131.3" y="517" width="0.2" height="15.0" fill="rgb(236,122,24)" rx="2" ry="2" />
<text  x="1134.28" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1143.3" y="645" width="0.3" height="15.0" fill="rgb(249,218,38)" rx="2" ry="2" />
<text  x="1146.35" y="655.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::attributes::raw&gt; (2 samples, 0.04%)</title><rect x="61.7" y="565" width="0.4" height="15.0" fill="rgb(250,113,26)" rx="2" ry="2" />
<text  x="64.66" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="41.0" y="341" width="0.2" height="15.0" fill="rgb(207,181,53)" rx="2" ry="2" />
<text  x="43.95" y="351.5" ></text>
</g>
<g >
<title>sstables::dirname (1 samples, 0.02%)</title><rect x="713.4" y="677" width="0.3" height="15.0" fill="rgb(220,125,42)" rx="2" ry="2" />
<text  x="716.45" y="687.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%)</title><rect x="1122.4" y="421" width="0.2" height="15.0" fill="rgb(230,70,36)" rx="2" ry="2" />
<text  x="1125.41" y="431.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (2 samples, 0.04%)</title><rect x="1119.0" y="437" width="0.5" height="15.0" fill="rgb(232,50,26)" rx="2" ry="2" />
<text  x="1122.00" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2 samples, 0.04%)</title><rect x="70.5" y="565" width="0.5" height="15.0" fill="rgb(233,159,23)" rx="2" ry="2" />
<text  x="73.54" y="575.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="56.9" y="485" width="0.2" height="15.0" fill="rgb(228,212,50)" rx="2" ry="2" />
<text  x="59.88" y="495.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (1 samples, 0.02%)</title><rect x="17.7" y="725" width="0.3" height="15.0" fill="rgb(209,183,0)" rx="2" ry="2" />
<text  x="20.74" y="735.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="55.5" y="341" width="0.2" height="15.0" fill="rgb(241,190,2)" rx="2" ry="2" />
<text  x="58.52" y="351.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (9 samples, 0.17%)</title><rect x="419.0" y="453" width="2.0" height="15.0" fill="rgb(236,159,37)" rx="2" ry="2" />
<text  x="421.96" y="463.5" ></text>
</g>
<g >
<title>partition_entry::apply (2 samples, 0.04%)</title><rect x="1122.4" y="453" width="0.5" height="15.0" fill="rgb(218,146,49)" rx="2" ry="2" />
<text  x="1125.41" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="120.1" y="581" width="0.3" height="15.0" fill="rgb(242,0,4)" rx="2" ry="2" />
<text  x="123.15" y="591.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="1051.2" y="485" width="0.2" height="15.0" fill="rgb(210,61,49)" rx="2" ry="2" />
<text  x="1054.18" y="495.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (10 samples, 0.19%)</title><rect x="275.6" y="405" width="2.3" height="15.0" fill="rgb(254,8,51)" rx="2" ry="2" />
<text  x="278.59" y="415.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_error (1 samples, 0.02%)</title><rect x="26.6" y="485" width="0.2" height="15.0" fill="rgb(248,1,22)" rx="2" ry="2" />
<text  x="29.61" y="495.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="1023.9" y="421" width="1.8" height="15.0" fill="rgb(222,41,35)" rx="2" ry="2" />
<text  x="1026.87" y="431.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%)</title><rect x="873.7" y="421" width="0.2" height="15.0" fill="rgb(238,190,17)" rx="2" ry="2" />
<text  x="876.66" y="431.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="10.2" y="661" width="0.3" height="15.0" fill="rgb(243,229,46)" rx="2" ry="2" />
<text  x="13.23" y="671.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="548.7" y="533" width="0.2" height="15.0" fill="rgb(213,178,35)" rx="2" ry="2" />
<text  x="551.68" y="543.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (25 samples, 0.48%)</title><rect x="1055.7" y="533" width="5.7" height="15.0" fill="rgb(228,48,14)" rx="2" ry="2" />
<text  x="1058.73" y="543.5" ></text>
</g>
<g >
<title>std::__addressof&lt;char&gt; (1 samples, 0.02%)</title><rect x="24.3" y="357" width="0.3" height="15.0" fill="rgb(252,91,41)" rx="2" ry="2" />
<text  x="27.34" y="367.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (3 samples, 0.06%)</title><rect x="103.1" y="709" width="0.7" height="15.0" fill="rgb(212,26,42)" rx="2" ry="2" />
<text  x="106.08" y="719.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="910.1" y="533" width="0.2" height="15.0" fill="rgb(236,60,48)" rx="2" ry="2" />
<text  x="913.08" y="543.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (3 samples, 0.06%)</title><rect x="36.9" y="517" width="0.6" height="15.0" fill="rgb(229,49,39)" rx="2" ry="2" />
<text  x="39.85" y="527.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (2 samples, 0.04%)</title><rect x="955.6" y="549" width="0.4" height="15.0" fill="rgb(237,87,23)" rx="2" ry="2" />
<text  x="958.59" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%)</title><rect x="997.0" y="485" width="0.2" height="15.0" fill="rgb(226,152,8)" rx="2" ry="2" />
<text  x="1000.01" y="495.5" ></text>
</g>
<g >
<title>do_cql_test (270 samples, 5.21%)</title><rect x="17.7" y="757" width="61.5" height="15.0" fill="rgb(219,171,27)" rx="2" ry="2" />
<text  x="20.74" y="767.5" >do_cql..</text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="945.8" y="613" width="0.9" height="15.0" fill="rgb(219,129,33)" rx="2" ry="2" />
<text  x="948.81" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (1 samples, 0.02%)</title><rect x="37.5" y="533" width="0.3" height="15.0" fill="rgb(236,195,18)" rx="2" ry="2" />
<text  x="40.54" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="426.7" y="421" width="0.2" height="15.0" fill="rgb(222,223,48)" rx="2" ry="2" />
<text  x="429.70" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::drop_type_statement*, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="64.6" y="549" width="0.2" height="15.0" fill="rgb(250,44,36)" rx="2" ry="2" />
<text  x="67.62" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice (1 samples, 0.02%)</title><rect x="68.5" y="597" width="0.2" height="15.0" fill="rgb(224,169,19)" rx="2" ry="2" />
<text  x="71.49" y="607.5" ></text>
</g>
<g >
<title>parse_raw (1 samples, 0.02%)</title><rect x="102.6" y="581" width="0.3" height="15.0" fill="rgb(249,227,34)" rx="2" ry="2" />
<text  x="105.62" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="1096.2" y="565" width="0.3" height="15.0" fill="rgb(228,7,22)" rx="2" ry="2" />
<text  x="1099.24" y="575.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="521.1" y="405" width="0.5" height="15.0" fill="rgb(229,80,25)" rx="2" ry="2" />
<text  x="524.14" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="44.6" y="469" width="0.2" height="15.0" fill="rgb(250,167,50)" rx="2" ry="2" />
<text  x="47.59" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="38.9" y="533" width="0.2" height="15.0" fill="rgb(212,166,3)" rx="2" ry="2" />
<text  x="41.90" y="543.5" ></text>
</g>
<g >
<title>seastar::reactor::do_expire_lowres_timers (1 samples, 0.02%)</title><rect x="1164.7" y="709" width="0.3" height="15.0" fill="rgb(241,3,3)" rx="2" ry="2" />
<text  x="1167.74" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1021.1" y="325" width="0.3" height="15.0" fill="rgb(237,104,6)" rx="2" ry="2" />
<text  x="1024.14" y="335.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (374 samples, 7.21%)</title><rect x="331.8" y="437" width="85.1" height="15.0" fill="rgb(241,34,13)" rx="2" ry="2" />
<text  x="334.80" y="447.5" >compact_mu..</text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.10%)</title><rect x="759.4" y="581" width="1.2" height="15.0" fill="rgb(230,104,3)" rx="2" ry="2" />
<text  x="762.42" y="591.5" ></text>
</g>
<g >
<title>compound_type&lt; (15 samples, 0.29%)</title><rect x="940.3" y="565" width="3.5" height="15.0" fill="rgb(215,61,1)" rx="2" ry="2" />
<text  x="943.35" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (433 samples, 8.35%)</title><rect x="187.1" y="517" width="98.5" height="15.0" fill="rgb(239,55,49)" rx="2" ry="2" />
<text  x="190.06" y="527.5" >partition_s..</text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.12%)</title><rect x="23.2" y="453" width="1.4" height="15.0" fill="rgb(236,210,22)" rx="2" ry="2" />
<text  x="26.20" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="560.7" y="629" width="0.3" height="15.0" fill="rgb(233,203,6)" rx="2" ry="2" />
<text  x="563.74" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%)</title><rect x="665.0" y="677" width="1.1" height="15.0" fill="rgb(217,5,27)" rx="2" ry="2" />
<text  x="667.97" y="687.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (30 samples, 0.58%)</title><rect x="249.9" y="389" width="6.8" height="15.0" fill="rgb(225,71,37)" rx="2" ry="2" />
<text  x="252.87" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (4 samples, 0.08%)</title><rect x="37.8" y="565" width="0.9" height="15.0" fill="rgb(209,102,49)" rx="2" ry="2" />
<text  x="40.76" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="864.6" y="709" width="0.2" height="15.0" fill="rgb(212,128,37)" rx="2" ry="2" />
<text  x="867.56" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (11 samples, 0.21%)</title><rect x="670.7" y="693" width="2.5" height="15.0" fill="rgb(250,186,5)" rx="2" ry="2" />
<text  x="673.66" y="703.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (3 samples, 0.06%)</title><rect x="245.1" y="309" width="0.7" height="15.0" fill="rgb(244,41,41)" rx="2" ry="2" />
<text  x="248.09" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%)</title><rect x="692.1" y="485" width="0.2" height="15.0" fill="rgb(253,102,29)" rx="2" ry="2" />
<text  x="695.06" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, sstables::sstable::seal_sstable (1 samples, 0.02%)</title><rect x="713.7" y="709" width="0.2" height="15.0" fill="rgb(222,196,37)" rx="2" ry="2" />
<text  x="716.68" y="719.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::explode (1 samples, 0.02%)</title><rect x="1129.2" y="261" width="0.3" height="15.0" fill="rgb(224,44,35)" rx="2" ry="2" />
<text  x="1132.24" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="796.7" y="405" width="1.0" height="15.0" fill="rgb(216,7,33)" rx="2" ry="2" />
<text  x="799.74" y="415.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="517.3" y="453" width="0.2" height="15.0" fill="rgb(234,84,18)" rx="2" ry="2" />
<text  x="520.27" y="463.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (1 samples, 0.02%)</title><rect x="662.2" y="645" width="0.3" height="15.0" fill="rgb(226,112,51)" rx="2" ry="2" />
<text  x="665.24" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="60.3" y="341" width="0.2" height="15.0" fill="rgb(222,118,29)" rx="2" ry="2" />
<text  x="63.30" y="351.5" ></text>
</g>
<g >
<title>sstables::fsync_directory (1 samples, 0.02%)</title><rect x="713.4" y="693" width="0.3" height="15.0" fill="rgb(245,56,42)" rx="2" ry="2" />
<text  x="716.45" y="703.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt; &gt;::_Vector_base (2 samples, 0.04%)</title><rect x="21.2" y="597" width="0.4" height="15.0" fill="rgb(228,135,45)" rx="2" ry="2" />
<text  x="24.15" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::stats (2 samples, 0.04%)</title><rect x="517.5" y="453" width="0.5" height="15.0" fill="rgb(205,187,23)" rx="2" ry="2" />
<text  x="520.50" y="463.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (4 samples, 0.08%)</title><rect x="1101.7" y="613" width="0.9" height="15.0" fill="rgb(206,138,54)" rx="2" ry="2" />
<text  x="1104.70" y="623.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (3 samples, 0.06%)</title><rect x="870.9" y="565" width="0.7" height="15.0" fill="rgb(234,171,36)" rx="2" ry="2" />
<text  x="873.93" y="575.5" ></text>
</g>
<g >
<title>tracing::add_table_name (3 samples, 0.06%)</title><rect x="1115.6" y="629" width="0.7" height="15.0" fill="rgb(210,217,17)" rx="2" ry="2" />
<text  x="1118.58" y="639.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (1 samples, 0.02%)</title><rect x="331.6" y="421" width="0.2" height="15.0" fill="rgb(225,180,51)" rx="2" ry="2" />
<text  x="334.57" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="375.3" y="373" width="0.9" height="15.0" fill="rgb(240,75,5)" rx="2" ry="2" />
<text  x="378.27" y="383.5" ></text>
</g>
<g >
<title>service::query_ranges_to_vnodes_generator::operator (1 samples, 0.02%)</title><rect x="971.5" y="405" width="0.3" height="15.0" fill="rgb(218,51,27)" rx="2" ry="2" />
<text  x="974.52" y="415.5" ></text>
</g>
<g >
<title>database::find_schema (2 samples, 0.04%)</title><rect x="77.4" y="645" width="0.4" height="15.0" fill="rgb(250,211,22)" rx="2" ry="2" />
<text  x="80.36" y="655.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="535.3" y="533" width="0.9" height="15.0" fill="rgb(244,142,47)" rx="2" ry="2" />
<text  x="538.25" y="543.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%)</title><rect x="420.3" y="421" width="0.5" height="15.0" fill="rgb(218,92,41)" rx="2" ry="2" />
<text  x="423.33" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::execute_direct (1 samples, 0.02%)</title><rect x="649.0" y="709" width="0.3" height="15.0" fill="rgb(248,229,3)" rx="2" ry="2" />
<text  x="652.04" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (2 samples, 0.04%)</title><rect x="460.2" y="469" width="0.4" height="15.0" fill="rgb(219,202,12)" rx="2" ry="2" />
<text  x="463.15" y="479.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="588.5" y="597" width="1.4" height="15.0" fill="rgb(237,200,18)" rx="2" ry="2" />
<text  x="591.51" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (3 samples, 0.06%)</title><rect x="413.5" y="357" width="0.7" height="15.0" fill="rgb(231,46,34)" rx="2" ry="2" />
<text  x="416.50" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="41.0" y="373" width="0.2" height="15.0" fill="rgb(226,97,51)" rx="2" ry="2" />
<text  x="43.95" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="765.1" y="565" width="0.2" height="15.0" fill="rgb(247,64,51)" rx="2" ry="2" />
<text  x="768.11" y="575.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (1 samples, 0.02%)</title><rect x="84.0" y="821" width="0.2" height="15.0" fill="rgb(229,72,52)" rx="2" ry="2" />
<text  x="86.96" y="831.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="936.2" y="549" width="0.3" height="15.0" fill="rgb(214,222,13)" rx="2" ry="2" />
<text  x="939.25" y="559.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%)</title><rect x="208.2" y="389" width="0.2" height="15.0" fill="rgb(239,162,1)" rx="2" ry="2" />
<text  x="211.22" y="399.5" ></text>
</g>
<g >
<title>set_value&lt;fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="872.5" y="437" width="0.3" height="15.0" fill="rgb(242,193,27)" rx="2" ry="2" />
<text  x="875.53" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (3 samples, 0.06%)</title><rect x="771.5" y="549" width="0.7" height="15.0" fill="rgb(235,56,33)" rx="2" ry="2" />
<text  x="774.48" y="559.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="475.2" y="533" width="0.4" height="15.0" fill="rgb(237,25,3)" rx="2" ry="2" />
<text  x="478.17" y="543.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="97.4" y="661" width="0.2" height="15.0" fill="rgb(243,28,41)" rx="2" ry="2" />
<text  x="100.39" y="671.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (5 samples, 0.10%)</title><rect x="741.4" y="581" width="1.2" height="15.0" fill="rgb(205,153,0)" rx="2" ry="2" />
<text  x="744.44" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="73.9" y="597" width="0.3" height="15.0" fill="rgb(210,167,3)" rx="2" ry="2" />
<text  x="76.95" y="607.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (6 samples, 0.12%)</title><rect x="950.1" y="581" width="1.4" height="15.0" fill="rgb(231,156,26)" rx="2" ry="2" />
<text  x="953.13" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="83.7" y="629" width="0.3" height="15.0" fill="rgb(211,47,9)" rx="2" ry="2" />
<text  x="86.74" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::prepare_heap (1 samples, 0.02%)</title><rect x="16.4" y="741" width="0.2" height="15.0" fill="rgb(219,223,33)" rx="2" ry="2" />
<text  x="19.37" y="751.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::add_restriction (1 samples, 0.02%)</title><rect x="69.2" y="517" width="0.2" height="15.0" fill="rgb(229,130,30)" rx="2" ry="2" />
<text  x="72.17" y="527.5" ></text>
</g>
<g >
<title>abstract_type::bound_value_needs_to_be_reserialized (1 samples, 0.02%)</title><rect x="900.5" y="485" width="0.2" height="15.0" fill="rgb(210,76,49)" rx="2" ry="2" />
<text  x="903.52" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (2 samples, 0.04%)</title><rect x="552.5" y="613" width="0.5" height="15.0" fill="rgb(254,93,16)" rx="2" ry="2" />
<text  x="555.55" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="50.3" y="437" width="0.2" height="15.0" fill="rgb(236,100,22)" rx="2" ry="2" />
<text  x="53.28" y="447.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (1 samples, 0.02%)</title><rect x="723.9" y="661" width="0.2" height="15.0" fill="rgb(232,226,9)" rx="2" ry="2" />
<text  x="726.92" y="671.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="10.7" y="693" width="0.2" height="15.0" fill="rgb(228,157,46)" rx="2" ry="2" />
<text  x="13.68" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (1 samples, 0.02%)</title><rect x="181.1" y="453" width="0.3" height="15.0" fill="rgb(240,30,0)" rx="2" ry="2" />
<text  x="184.14" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (213 samples, 4.11%)</title><rect x="992.9" y="549" width="48.5" height="15.0" fill="rgb(230,194,43)" rx="2" ry="2" />
<text  x="995.92" y="559.5" >serv..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="1040.3" y="501" width="0.2" height="15.0" fill="rgb(254,219,35)" rx="2" ry="2" />
<text  x="1043.25" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (3 samples, 0.06%)</title><rect x="652.0" y="677" width="0.7" height="15.0" fill="rgb(250,10,38)" rx="2" ry="2" />
<text  x="655.00" y="687.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::maybe_advance_to (1 samples, 0.02%)</title><rect x="16.4" y="757" width="0.2" height="15.0" fill="rgb(225,142,18)" rx="2" ry="2" />
<text  x="19.37" y="767.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="760.6" y="613" width="0.2" height="15.0" fill="rgb(252,133,18)" rx="2" ry="2" />
<text  x="763.56" y="623.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="1050.9" y="469" width="0.3" height="15.0" fill="rgb(211,193,20)" rx="2" ry="2" />
<text  x="1053.95" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="856.1" y="581" width="0.3" height="15.0" fill="rgb(234,46,6)" rx="2" ry="2" />
<text  x="859.14" y="591.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%)</title><rect x="76.5" y="517" width="0.9" height="15.0" fill="rgb(221,48,39)" rx="2" ry="2" />
<text  x="79.45" y="527.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (10 samples, 0.19%)</title><rect x="544.8" y="501" width="2.3" height="15.0" fill="rgb(252,110,34)" rx="2" ry="2" />
<text  x="547.81" y="511.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (3 samples, 0.06%)</title><rect x="276.7" y="389" width="0.7" height="15.0" fill="rgb(228,160,47)" rx="2" ry="2" />
<text  x="279.72" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (3 samples, 0.06%)</title><rect x="1150.2" y="661" width="0.7" height="15.0" fill="rgb(252,80,4)" rx="2" ry="2" />
<text  x="1153.17" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="1115.1" y="629" width="0.5" height="15.0" fill="rgb(210,114,10)" rx="2" ry="2" />
<text  x="1118.13" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (7 samples, 0.14%)</title><rect x="897.1" y="485" width="1.6" height="15.0" fill="rgb(227,14,15)" rx="2" ry="2" />
<text  x="900.11" y="495.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (1 samples, 0.02%)</title><rect x="382.8" y="357" width="0.2" height="15.0" fill="rgb(250,21,6)" rx="2" ry="2" />
<text  x="385.78" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="809.3" y="453" width="0.2" height="15.0" fill="rgb(250,31,25)" rx="2" ry="2" />
<text  x="812.26" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (5 samples, 0.10%)</title><rect x="665.0" y="693" width="1.1" height="15.0" fill="rgb(212,128,47)" rx="2" ry="2" />
<text  x="667.97" y="703.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="578.3" y="581" width="0.2" height="15.0" fill="rgb(215,4,9)" rx="2" ry="2" />
<text  x="581.27" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (5 samples, 0.10%)</title><rect x="710.7" y="645" width="1.2" height="15.0" fill="rgb(222,184,18)" rx="2" ry="2" />
<text  x="713.72" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (11 samples, 0.21%)</title><rect x="814.0" y="533" width="2.5" height="15.0" fill="rgb(247,91,14)" rx="2" ry="2" />
<text  x="817.04" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="346.1" y="405" width="0.3" height="15.0" fill="rgb(236,26,24)" rx="2" ry="2" />
<text  x="349.14" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (1 samples, 0.02%)</title><rect x="1113.5" y="629" width="0.3" height="15.0" fill="rgb(227,210,17)" rx="2" ry="2" />
<text  x="1116.53" y="639.5" ></text>
</g>
<g >
<title>range_tombstone_stream::empty (1 samples, 0.02%)</title><rect x="264.2" y="421" width="0.2" height="15.0" fill="rgb(235,26,44)" rx="2" ry="2" />
<text  x="267.21" y="431.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (511 samples, 9.86%)</title><rect x="321.1" y="549" width="116.3" height="15.0" fill="rgb(212,191,4)" rx="2" ry="2" />
<text  x="324.10" y="559.5" >seastar::futur..</text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%)</title><rect x="1019.3" y="325" width="0.5" height="15.0" fill="rgb(226,207,44)" rx="2" ry="2" />
<text  x="1022.32" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="618.8" y="645" width="0.4" height="15.0" fill="rgb(253,123,53)" rx="2" ry="2" />
<text  x="621.78" y="655.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,310 samples, 44.55%)</title><rect x="106.9" y="693" width="525.8" height="15.0" fill="rgb(242,123,26)" rx="2" ry="2" />
<text  x="109.95" y="703.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (3 samples, 0.06%)</title><rect x="676.4" y="677" width="0.6" height="15.0" fill="rgb(218,212,41)" rx="2" ry="2" />
<text  x="679.35" y="687.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%)</title><rect x="427.2" y="469" width="0.2" height="15.0" fill="rgb(221,199,22)" rx="2" ry="2" />
<text  x="430.15" y="479.5" ></text>
</g>
<g >
<title>fmt::v7::detail::value&lt;fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt;::format_custom_arg&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt; &gt; (1 samples, 0.02%)</title><rect x="18.9" y="693" width="0.2" height="15.0" fill="rgb(205,223,9)" rx="2" ry="2" />
<text  x="21.88" y="703.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%)</title><rect x="625.6" y="581" width="0.2" height="15.0" fill="rgb(208,2,51)" rx="2" ry="2" />
<text  x="628.60" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (29 samples, 0.56%)</title><rect x="66.2" y="661" width="6.6" height="15.0" fill="rgb(205,123,2)" rx="2" ry="2" />
<text  x="69.21" y="671.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (2 samples, 0.04%)</title><rect x="354.6" y="389" width="0.4" height="15.0" fill="rgb(207,218,46)" rx="2" ry="2" />
<text  x="357.56" y="399.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;char*&gt;::pointer_to (1 samples, 0.02%)</title><rect x="24.3" y="373" width="0.3" height="15.0" fill="rgb(235,73,30)" rx="2" ry="2" />
<text  x="27.34" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="186.1" y="485" width="0.3" height="15.0" fill="rgb(222,56,0)" rx="2" ry="2" />
<text  x="189.15" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="54.6" y="453" width="0.2" height="15.0" fill="rgb(249,214,36)" rx="2" ry="2" />
<text  x="57.61" y="463.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="50.5" y="421" width="0.2" height="15.0" fill="rgb(228,84,22)" rx="2" ry="2" />
<text  x="53.51" y="431.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::work_item, 128ul&gt;::back_chunk_new (1 samples, 0.02%)</title><rect x="757.8" y="581" width="0.3" height="15.0" fill="rgb(243,46,5)" rx="2" ry="2" />
<text  x="760.83" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="38.0" y="437" width="0.2" height="15.0" fill="rgb(222,127,30)" rx="2" ry="2" />
<text  x="40.99" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (123 samples, 2.37%)</title><rect x="1134.7" y="709" width="28.0" height="15.0" fill="rgb(249,225,18)" rx="2" ry="2" />
<text  x="1137.70" y="719.5" >s..</text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="818.8" y="549" width="0.2" height="15.0" fill="rgb(224,140,2)" rx="2" ry="2" />
<text  x="821.82" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="810.2" y="453" width="0.2" height="15.0" fill="rgb(248,29,54)" rx="2" ry="2" />
<text  x="813.17" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (4 samples, 0.08%)</title><rect x="763.7" y="565" width="1.0" height="15.0" fill="rgb(234,114,45)" rx="2" ry="2" />
<text  x="766.74" y="575.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (5 samples, 0.10%)</title><rect x="578.9" y="549" width="1.2" height="15.0" fill="rgb(219,100,35)" rx="2" ry="2" />
<text  x="581.95" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (15 samples, 0.29%)</title><rect x="845.4" y="597" width="3.5" height="15.0" fill="rgb(244,156,40)" rx="2" ry="2" />
<text  x="848.44" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%)</title><rect x="1141.5" y="661" width="0.7" height="15.0" fill="rgb(232,221,54)" rx="2" ry="2" />
<text  x="1144.53" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="868.4" y="549" width="0.3" height="15.0" fill="rgb(243,90,10)" rx="2" ry="2" />
<text  x="871.43" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%)</title><rect x="866.6" y="517" width="0.2" height="15.0" fill="rgb(230,1,0)" rx="2" ry="2" />
<text  x="869.61" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (1 samples, 0.02%)</title><rect x="263.3" y="341" width="0.2" height="15.0" fill="rgb(232,181,17)" rx="2" ry="2" />
<text  x="266.30" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (16 samples, 0.31%)</title><rect x="427.4" y="469" width="3.6" height="15.0" fill="rgb(234,25,53)" rx="2" ry="2" />
<text  x="430.38" y="479.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (6 samples, 0.12%)</title><rect x="1117.6" y="405" width="1.4" height="15.0" fill="rgb(248,132,35)" rx="2" ry="2" />
<text  x="1120.63" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="436.9" y="501" width="0.3" height="15.0" fill="rgb(227,76,36)" rx="2" ry="2" />
<text  x="439.94" y="511.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (2 samples, 0.04%)</title><rect x="170.4" y="501" width="0.5" height="15.0" fill="rgb(207,49,49)" rx="2" ry="2" />
<text  x="173.44" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (6 samples, 0.12%)</title><rect x="1036.8" y="437" width="1.4" height="15.0" fill="rgb(226,144,53)" rx="2" ry="2" />
<text  x="1039.84" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (3 samples, 0.06%)</title><rect x="1165.9" y="693" width="0.7" height="15.0" fill="rgb(247,181,30)" rx="2" ry="2" />
<text  x="1168.88" y="703.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="925.6" y="549" width="0.2" height="15.0" fill="rgb(223,94,15)" rx="2" ry="2" />
<text  x="928.55" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;bool  (1 samples, 0.02%)</title><rect x="68.3" y="597" width="0.2" height="15.0" fill="rgb(224,124,35)" rx="2" ry="2" />
<text  x="71.26" y="607.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (1 samples, 0.02%)</title><rect x="59.8" y="453" width="0.3" height="15.0" fill="rgb(243,45,15)" rx="2" ry="2" />
<text  x="62.84" y="463.5" ></text>
</g>
<g >
<title>seastar::file_desc::read (1 samples, 0.02%)</title><rect x="1166.1" y="661" width="0.2" height="15.0" fill="rgb(218,18,16)" rx="2" ry="2" />
<text  x="1169.10" y="671.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cdc::generation_service&gt;::stop (1 samples, 0.02%)</title><rect x="16.8" y="741" width="0.3" height="15.0" fill="rgb(239,101,26)" rx="2" ry="2" />
<text  x="19.83" y="751.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (362 samples, 6.98%)</title><rect x="188.4" y="469" width="82.4" height="15.0" fill="rgb(238,185,54)" rx="2" ry="2" />
<text  x="191.42" y="479.5" >partition..</text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (2 samples, 0.04%)</title><rect x="14.6" y="789" width="0.4" height="15.0" fill="rgb(244,160,9)" rx="2" ry="2" />
<text  x="17.55" y="799.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_token (1 samples, 0.02%)</title><rect x="26.4" y="485" width="0.2" height="15.0" fill="rgb(247,53,27)" rx="2" ry="2" />
<text  x="29.39" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="47.6" y="485" width="0.6" height="15.0" fill="rgb(208,157,9)" rx="2" ry="2" />
<text  x="50.55" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (1 samples, 0.02%)</title><rect x="875.0" y="565" width="0.3" height="15.0" fill="rgb(234,193,35)" rx="2" ry="2" />
<text  x="878.03" y="575.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%)</title><rect x="103.8" y="581" width="0.2" height="15.0" fill="rgb(211,77,26)" rx="2" ry="2" />
<text  x="106.76" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="39.1" y="421" width="0.3" height="15.0" fill="rgb(254,74,13)" rx="2" ry="2" />
<text  x="42.13" y="431.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="627.7" y="645" width="0.2" height="15.0" fill="rgb(208,83,10)" rx="2" ry="2" />
<text  x="630.65" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="38.9" y="453" width="0.2" height="15.0" fill="rgb(207,170,16)" rx="2" ry="2" />
<text  x="41.90" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (2 samples, 0.04%)</title><rect x="810.4" y="485" width="0.5" height="15.0" fill="rgb(207,195,31)" rx="2" ry="2" />
<text  x="813.40" y="495.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1129.2" y="325" width="0.3" height="15.0" fill="rgb(234,15,39)" rx="2" ry="2" />
<text  x="1132.24" y="335.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (2 samples, 0.04%)</title><rect x="811.3" y="485" width="0.5" height="15.0" fill="rgb(253,28,26)" rx="2" ry="2" />
<text  x="814.31" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="470.2" y="517" width="0.4" height="15.0" fill="rgb(243,133,30)" rx="2" ry="2" />
<text  x="473.17" y="527.5" ></text>
</g>
<g >
<title>schema_registry::learn (3 samples, 0.06%)</title><rect x="103.8" y="677" width="0.6" height="15.0" fill="rgb(222,39,54)" rx="2" ry="2" />
<text  x="106.76" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (7 samples, 0.14%)</title><rect x="280.6" y="405" width="1.6" height="15.0" fill="rgb(246,204,11)" rx="2" ry="2" />
<text  x="283.59" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="73.0" y="661" width="0.3" height="15.0" fill="rgb(220,164,24)" rx="2" ry="2" />
<text  x="76.04" y="671.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (2 samples, 0.04%)</title><rect x="174.1" y="485" width="0.4" height="15.0" fill="rgb(215,19,46)" rx="2" ry="2" />
<text  x="177.08" y="495.5" ></text>
</g>
<g >
<title>db::schema_tables::fill_column_info (1 samples, 0.02%)</title><rect x="103.8" y="613" width="0.2" height="15.0" fill="rgb(243,36,38)" rx="2" ry="2" />
<text  x="106.76" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1084.2" y="549" width="0.2" height="15.0" fill="rgb(221,74,53)" rx="2" ry="2" />
<text  x="1087.18" y="559.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="678.9" y="677" width="0.2" height="15.0" fill="rgb(207,212,20)" rx="2" ry="2" />
<text  x="681.86" y="687.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="710.9" y="629" width="0.3" height="15.0" fill="rgb(228,97,19)" rx="2" ry="2" />
<text  x="713.95" y="639.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="1121.3" y="405" width="0.2" height="15.0" fill="rgb(230,104,46)" rx="2" ry="2" />
<text  x="1124.27" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="274.9" y="421" width="0.5" height="15.0" fill="rgb(250,115,10)" rx="2" ry="2" />
<text  x="277.90" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (3 samples, 0.06%)</title><rect x="284.2" y="421" width="0.7" height="15.0" fill="rgb(214,109,8)" rx="2" ry="2" />
<text  x="287.23" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="1047.1" y="517" width="0.2" height="15.0" fill="rgb(231,100,53)" rx="2" ry="2" />
<text  x="1050.08" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="805.6" y="421" width="0.5" height="15.0" fill="rgb(228,52,22)" rx="2" ry="2" />
<text  x="808.62" y="431.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%)</title><rect x="762.8" y="613" width="0.3" height="15.0" fill="rgb(223,135,50)" rx="2" ry="2" />
<text  x="765.83" y="623.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="549.4" y="613" width="1.8" height="15.0" fill="rgb(249,118,39)" rx="2" ry="2" />
<text  x="552.36" y="623.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::set_tokenNames (1 samples, 0.02%)</title><rect x="20.7" y="597" width="0.2" height="15.0" fill="rgb(233,225,4)" rx="2" ry="2" />
<text  x="23.70" y="607.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="103.8" y="421" width="0.2" height="15.0" fill="rgb(218,21,7)" rx="2" ry="2" />
<text  x="106.76" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (4 samples, 0.08%)</title><rect x="352.7" y="389" width="0.9" height="15.0" fill="rgb(234,30,37)" rx="2" ry="2" />
<text  x="355.73" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (17 samples, 0.33%)</title><rect x="229.8" y="245" width="3.9" height="15.0" fill="rgb(230,157,32)" rx="2" ry="2" />
<text  x="232.84" y="255.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="949.7" y="581" width="0.4" height="15.0" fill="rgb(244,61,4)" rx="2" ry="2" />
<text  x="952.68" y="591.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="687.7" y="661" width="0.3" height="15.0" fill="rgb(216,7,39)" rx="2" ry="2" />
<text  x="690.73" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="587.1" y="581" width="0.3" height="15.0" fill="rgb(239,187,29)" rx="2" ry="2" />
<text  x="590.14" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="55.5" y="373" width="0.2" height="15.0" fill="rgb(216,8,43)" rx="2" ry="2" />
<text  x="58.52" y="383.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (1 samples, 0.02%)</title><rect x="871.2" y="533" width="0.2" height="15.0" fill="rgb(237,23,11)" rx="2" ry="2" />
<text  x="874.16" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (5 samples, 0.10%)</title><rect x="97.4" y="677" width="1.1" height="15.0" fill="rgb(231,82,51)" rx="2" ry="2" />
<text  x="100.39" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.10%)</title><rect x="24.6" y="469" width="1.1" height="15.0" fill="rgb(250,180,19)" rx="2" ry="2" />
<text  x="27.57" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="441.5" y="565" width="0.4" height="15.0" fill="rgb(219,194,52)" rx="2" ry="2" />
<text  x="444.49" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1165.4" y="677" width="0.2" height="15.0" fill="rgb(208,18,45)" rx="2" ry="2" />
<text  x="1168.42" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="971.1" y="581" width="0.2" height="15.0" fill="rgb(219,212,45)" rx="2" ry="2" />
<text  x="974.07" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="354.3" y="389" width="0.3" height="15.0" fill="rgb(226,118,26)" rx="2" ry="2" />
<text  x="357.33" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="691.8" y="565" width="0.5" height="15.0" fill="rgb(205,77,53)" rx="2" ry="2" />
<text  x="694.83" y="575.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="60.3" y="325" width="0.2" height="15.0" fill="rgb(247,98,39)" rx="2" ry="2" />
<text  x="63.30" y="335.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="80.8" y="213" width="0.2" height="15.0" fill="rgb(219,178,26)" rx="2" ry="2" />
<text  x="83.78" y="223.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (3 samples, 0.06%)</title><rect x="841.6" y="581" width="0.7" height="15.0" fill="rgb(253,65,40)" rx="2" ry="2" />
<text  x="844.58" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="669.1" y="693" width="0.2" height="15.0" fill="rgb(247,74,38)" rx="2" ry="2" />
<text  x="672.07" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (128 samples, 2.47%)</title><rect x="561.2" y="629" width="29.1" height="15.0" fill="rgb(228,42,30)" rx="2" ry="2" />
<text  x="564.20" y="639.5" >st..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="809.7" y="437" width="0.5" height="15.0" fill="rgb(233,99,30)" rx="2" ry="2" />
<text  x="812.71" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1019.8" y="373" width="0.2" height="15.0" fill="rgb(243,186,15)" rx="2" ry="2" />
<text  x="1022.77" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="529.1" y="485" width="0.7" height="15.0" fill="rgb(253,33,29)" rx="2" ry="2" />
<text  x="532.11" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, index_metadata&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, index_metadata&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, index_metadata&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, index_metadata&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, index_metadata&gt;, true&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="16.6" y="405" width="0.2" height="15.0" fill="rgb(242,25,46)" rx="2" ry="2" />
<text  x="19.60" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1101.0" y="533" width="0.2" height="15.0" fill="rgb(253,215,41)" rx="2" ry="2" />
<text  x="1104.02" y="543.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (1 samples, 0.02%)</title><rect x="79.0" y="325" width="0.2" height="15.0" fill="rgb(223,192,10)" rx="2" ry="2" />
<text  x="81.96" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="795.1" y="421" width="0.5" height="15.0" fill="rgb(207,222,36)" rx="2" ry="2" />
<text  x="798.15" y="431.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%)</title><rect x="200.5" y="437" width="0.2" height="15.0" fill="rgb(228,118,15)" rx="2" ry="2" />
<text  x="203.48" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%)</title><rect x="712.3" y="693" width="0.7" height="15.0" fill="rgb(237,102,11)" rx="2" ry="2" />
<text  x="715.31" y="703.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (1 samples, 0.02%)</title><rect x="455.6" y="517" width="0.2" height="15.0" fill="rgb(216,54,32)" rx="2" ry="2" />
<text  x="458.60" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="194.8" y="405" width="0.2" height="15.0" fill="rgb(250,46,38)" rx="2" ry="2" />
<text  x="197.79" y="415.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%)</title><rect x="17.3" y="581" width="0.2" height="15.0" fill="rgb(223,92,12)" rx="2" ry="2" />
<text  x="20.28" y="591.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%)</title><rect x="1118.1" y="357" width="0.2" height="15.0" fill="rgb(249,153,41)" rx="2" ry="2" />
<text  x="1121.08" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (3 samples, 0.06%)</title><rect x="433.3" y="501" width="0.7" height="15.0" fill="rgb(235,174,47)" rx="2" ry="2" />
<text  x="436.30" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (2 samples, 0.04%)</title><rect x="1104.9" y="629" width="0.4" height="15.0" fill="rgb(230,192,37)" rx="2" ry="2" />
<text  x="1107.89" y="639.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (5 samples, 0.10%)</title><rect x="114.2" y="645" width="1.2" height="15.0" fill="rgb(247,153,37)" rx="2" ry="2" />
<text  x="117.23" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (18 samples, 0.35%)</title><rect x="252.1" y="373" width="4.1" height="15.0" fill="rgb(229,156,10)" rx="2" ry="2" />
<text  x="255.14" y="383.5" ></text>
</g>
<g >
<title>schema::raw_schema::raw_schema (1 samples, 0.02%)</title><rect x="16.6" y="437" width="0.2" height="15.0" fill="rgb(244,58,8)" rx="2" ry="2" />
<text  x="19.60" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (33 samples, 0.64%)</title><rect x="1145.2" y="677" width="7.5" height="15.0" fill="rgb(224,29,3)" rx="2" ry="2" />
<text  x="1148.17" y="687.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (1 samples, 0.02%)</title><rect x="526.8" y="453" width="0.3" height="15.0" fill="rgb(243,221,11)" rx="2" ry="2" />
<text  x="529.83" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (2 samples, 0.04%)</title><rect x="866.6" y="709" width="0.5" height="15.0" fill="rgb(209,219,46)" rx="2" ry="2" />
<text  x="869.61" y="719.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="716.4" y="709" width="0.2" height="15.0" fill="rgb(220,94,20)" rx="2" ry="2" />
<text  x="719.41" y="719.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (3 samples, 0.06%)</title><rect x="519.6" y="421" width="0.6" height="15.0" fill="rgb(212,78,32)" rx="2" ry="2" />
<text  x="522.55" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (4 samples, 0.08%)</title><rect x="314.0" y="565" width="1.0" height="15.0" fill="rgb(216,126,26)" rx="2" ry="2" />
<text  x="317.05" y="575.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (5 samples, 0.10%)</title><rect x="76.2" y="597" width="1.2" height="15.0" fill="rgb(242,99,39)" rx="2" ry="2" />
<text  x="79.23" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="40.0" y="549" width="0.3" height="15.0" fill="rgb(212,167,15)" rx="2" ry="2" />
<text  x="43.04" y="559.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (15 samples, 0.29%)</title><rect x="732.6" y="549" width="3.4" height="15.0" fill="rgb(249,158,20)" rx="2" ry="2" />
<text  x="735.57" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (5 samples, 0.10%)</title><rect x="1143.6" y="645" width="1.1" height="15.0" fill="rgb(209,0,2)" rx="2" ry="2" />
<text  x="1146.57" y="655.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (4 samples, 0.08%)</title><rect x="628.8" y="613" width="0.9" height="15.0" fill="rgb(210,65,10)" rx="2" ry="2" />
<text  x="631.79" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="566.9" y="517" width="0.2" height="15.0" fill="rgb(226,182,29)" rx="2" ry="2" />
<text  x="569.89" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="1163.8" y="597" width="0.3" height="15.0" fill="rgb(225,170,14)" rx="2" ry="2" />
<text  x="1166.83" y="607.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="763.1" y="597" width="0.2" height="15.0" fill="rgb(219,67,44)" rx="2" ry="2" />
<text  x="766.06" y="607.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::mark (4 samples, 0.08%)</title><rect x="34.6" y="437" width="0.9" height="15.0" fill="rgb(245,43,30)" rx="2" ry="2" />
<text  x="37.58" y="447.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.8" y="405" width="0.3" height="15.0" fill="rgb(218,129,43)" rx="2" ry="2" />
<text  x="52.83" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="62.1" y="533" width="0.2" height="15.0" fill="rgb(227,156,16)" rx="2" ry="2" />
<text  x="65.12" y="543.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (476 samples, 9.18%)</title><rect x="443.5" y="629" width="108.4" height="15.0" fill="rgb(247,5,3)" rx="2" ry="2" />
<text  x="446.54" y="639.5" >query::querie..</text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%)</title><rect x="691.6" y="661" width="0.9" height="15.0" fill="rgb(216,81,22)" rx="2" ry="2" />
<text  x="694.60" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="792.9" y="437" width="0.4" height="15.0" fill="rgb(252,197,29)" rx="2" ry="2" />
<text  x="795.87" y="447.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (2 samples, 0.04%)</title><rect x="32.3" y="453" width="0.5" height="15.0" fill="rgb(240,193,39)" rx="2" ry="2" />
<text  x="35.30" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="40.3" y="389" width="0.2" height="15.0" fill="rgb(239,124,25)" rx="2" ry="2" />
<text  x="43.27" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (2 samples, 0.04%)</title><rect x="41.9" y="389" width="0.4" height="15.0" fill="rgb(230,211,2)" rx="2" ry="2" />
<text  x="44.86" y="399.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (5 samples, 0.10%)</title><rect x="791.5" y="469" width="1.1" height="15.0" fill="rgb(226,27,33)" rx="2" ry="2" />
<text  x="794.51" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt;::emplace_back&lt;service::storage_proxy&amp;, unsigned long&gt; (1 samples, 0.02%)</title><rect x="1131.1" y="469" width="0.2" height="15.0" fill="rgb(231,62,0)" rx="2" ry="2" />
<text  x="1134.06" y="479.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;, true&gt; (1 samples, 0.02%)</title><rect x="49.1" y="437" width="0.3" height="15.0" fill="rgb(253,114,19)" rx="2" ry="2" />
<text  x="52.14" y="447.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (460 samples, 8.87%)</title><rect x="444.7" y="597" width="104.7" height="15.0" fill="rgb(243,103,54)" rx="2" ry="2" />
<text  x="447.68" y="607.5" >std::functio..</text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1102.8" y="613" width="0.3" height="15.0" fill="rgb(216,213,47)" rx="2" ry="2" />
<text  x="1105.84" y="623.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (3 samples, 0.06%)</title><rect x="103.1" y="677" width="0.7" height="15.0" fill="rgb(239,18,34)" rx="2" ry="2" />
<text  x="106.08" y="687.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%)</title><rect x="491.1" y="485" width="0.2" height="15.0" fill="rgb(232,15,46)" rx="2" ry="2" />
<text  x="494.10" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (12 samples, 0.23%)</title><rect x="81.0" y="741" width="2.7" height="15.0" fill="rgb(219,145,29)" rx="2" ry="2" />
<text  x="84.00" y="751.5" ></text>
</g>
<g >
<title>[unknown] (326 samples, 6.29%)</title><rect x="10.2" y="837" width="74.2" height="15.0" fill="rgb(254,158,14)" rx="2" ry="2" />
<text  x="13.23" y="847.5" >[unknown]</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="42.5" y="357" width="0.5" height="15.0" fill="rgb(248,224,37)" rx="2" ry="2" />
<text  x="45.54" y="367.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (24 samples, 0.46%)</title><rect x="241.7" y="373" width="5.4" height="15.0" fill="rgb(215,3,0)" rx="2" ry="2" />
<text  x="244.68" y="383.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (1 samples, 0.02%)</title><rect x="265.1" y="421" width="0.2" height="15.0" fill="rgb(247,67,30)" rx="2" ry="2" />
<text  x="268.12" y="431.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="103.5" y="549" width="0.3" height="15.0" fill="rgb(218,52,24)" rx="2" ry="2" />
<text  x="106.54" y="559.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="810.6" y="469" width="0.3" height="15.0" fill="rgb(217,197,10)" rx="2" ry="2" />
<text  x="813.62" y="479.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%)</title><rect x="574.4" y="485" width="0.2" height="15.0" fill="rgb(236,122,36)" rx="2" ry="2" />
<text  x="577.40" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="79.0" y="629" width="0.2" height="15.0" fill="rgb(233,62,52)" rx="2" ry="2" />
<text  x="81.96" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::single_column_primary_key_restrictions (1 samples, 0.02%)</title><rect x="69.4" y="549" width="0.2" height="15.0" fill="rgb(217,180,2)" rx="2" ry="2" />
<text  x="72.40" y="559.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="112.2" y="661" width="0.7" height="15.0" fill="rgb(249,134,18)" rx="2" ry="2" />
<text  x="115.18" y="671.5" ></text>
</g>
<g >
<title>seastar::(anonymous namespace)::thread_wake_task::run_and_dispose (2 samples, 0.04%)</title><rect x="639.3" y="709" width="0.4" height="15.0" fill="rgb(230,82,53)" rx="2" ry="2" />
<text  x="642.26" y="719.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="441.9" y="581" width="0.3" height="15.0" fill="rgb(242,169,49)" rx="2" ry="2" />
<text  x="444.95" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (2 samples, 0.04%)</title><rect x="752.1" y="613" width="0.5" height="15.0" fill="rgb(250,168,2)" rx="2" ry="2" />
<text  x="755.14" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="1015.4" y="421" width="0.5" height="15.0" fill="rgb(222,222,17)" rx="2" ry="2" />
<text  x="1018.45" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="10.7" y="757" width="0.2" height="15.0" fill="rgb(242,111,0)" rx="2" ry="2" />
<text  x="13.68" y="767.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (12 samples, 0.23%)</title><rect x="595.1" y="613" width="2.7" height="15.0" fill="rgb(209,196,2)" rx="2" ry="2" />
<text  x="598.11" y="623.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info (2 samples, 0.04%)</title><rect x="14.6" y="821" width="0.4" height="15.0" fill="rgb(215,144,9)" rx="2" ry="2" />
<text  x="17.55" y="831.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (2 samples, 0.04%)</title><rect x="1129.9" y="373" width="0.5" height="15.0" fill="rgb(231,117,28)" rx="2" ry="2" />
<text  x="1132.92" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="78.7" y="677" width="0.3" height="15.0" fill="rgb(216,165,7)" rx="2" ry="2" />
<text  x="81.73" y="687.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (6 samples, 0.12%)</title><rect x="1036.8" y="453" width="1.4" height="15.0" fill="rgb(211,84,18)" rx="2" ry="2" />
<text  x="1039.84" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (13 samples, 0.25%)</title><rect x="23.0" y="517" width="2.9" height="15.0" fill="rgb(234,25,17)" rx="2" ry="2" />
<text  x="25.97" y="527.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (7 samples, 0.14%)</title><rect x="481.3" y="501" width="1.6" height="15.0" fill="rgb(253,64,46)" rx="2" ry="2" />
<text  x="484.32" y="511.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (1 samples, 0.02%)</title><rect x="81.0" y="613" width="0.2" height="15.0" fill="rgb(218,215,46)" rx="2" ry="2" />
<text  x="84.00" y="623.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,045 samples, 20.15%)</title><rect x="879.1" y="677" width="237.8" height="15.0" fill="rgb(207,124,34)" rx="2" ry="2" />
<text  x="882.13" y="687.5" >seastar::noncopyable_function&lt;s..</text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="524.1" y="437" width="0.2" height="15.0" fill="rgb(228,123,35)" rx="2" ry="2" />
<text  x="527.10" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%)</title><rect x="971.5" y="421" width="0.3" height="15.0" fill="rgb(243,188,38)" rx="2" ry="2" />
<text  x="974.52" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (2 samples, 0.04%)</title><rect x="834.5" y="597" width="0.5" height="15.0" fill="rgb(225,115,20)" rx="2" ry="2" />
<text  x="837.52" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="55.1" y="389" width="0.4" height="15.0" fill="rgb(223,169,50)" rx="2" ry="2" />
<text  x="58.06" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1132.0" y="453" width="0.2" height="15.0" fill="rgb(234,157,28)" rx="2" ry="2" />
<text  x="1134.97" y="463.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%)</title><rect x="1021.4" y="405" width="0.4" height="15.0" fill="rgb(212,149,26)" rx="2" ry="2" />
<text  x="1024.36" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_SET (1 samples, 0.02%)</title><rect x="32.8" y="469" width="0.2" height="15.0" fill="rgb(211,155,43)" rx="2" ry="2" />
<text  x="35.76" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="772.2" y="549" width="0.6" height="15.0" fill="rgb(223,77,48)" rx="2" ry="2" />
<text  x="775.16" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;9ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="309" width="0.3" height="15.0" fill="rgb(247,126,4)" rx="2" ry="2" />
<text  x="62.84" y="319.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::with_scheduling_group&lt;table::try_flush_memtable_to_sstable (2 samples, 0.04%)</title><rect x="1131.7" y="709" width="0.5" height="15.0" fill="rgb(236,5,13)" rx="2" ry="2" />
<text  x="1134.74" y="719.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (2 samples, 0.04%)</title><rect x="996.3" y="469" width="0.5" height="15.0" fill="rgb(221,83,2)" rx="2" ry="2" />
<text  x="999.33" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::move_it (1 samples, 0.02%)</title><rect x="785.8" y="533" width="0.2" height="15.0" fill="rgb(239,217,19)" rx="2" ry="2" />
<text  x="788.82" y="543.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="261.0" y="389" width="0.2" height="15.0" fill="rgb(239,189,18)" rx="2" ry="2" />
<text  x="264.02" y="399.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="10.2" y="645" width="0.3" height="15.0" fill="rgb(244,192,25)" rx="2" ry="2" />
<text  x="13.23" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="848.9" y="613" width="1.3" height="15.0" fill="rgb(232,22,17)" rx="2" ry="2" />
<text  x="851.86" y="623.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (27 samples, 0.52%)</title><rect x="1125.4" y="693" width="6.1" height="15.0" fill="rgb(211,1,54)" rx="2" ry="2" />
<text  x="1128.37" y="703.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (4 samples, 0.08%)</title><rect x="50.7" y="501" width="0.9" height="15.0" fill="rgb(242,188,11)" rx="2" ry="2" />
<text  x="53.74" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (1 samples, 0.02%)</title><rect x="1131.5" y="693" width="0.2" height="15.0" fill="rgb(243,51,0)" rx="2" ry="2" />
<text  x="1134.51" y="703.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%)</title><rect x="748.0" y="485" width="0.3" height="15.0" fill="rgb(213,226,35)" rx="2" ry="2" />
<text  x="751.04" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="328.8" y="453" width="0.3" height="15.0" fill="rgb(225,31,15)" rx="2" ry="2" />
<text  x="331.84" y="463.5" ></text>
</g>
<g >
<title>executor&lt;test_read (643 samples, 12.40%)</title><rect x="718.0" y="693" width="146.3" height="15.0" fill="rgb(205,76,40)" rx="2" ry="2" />
<text  x="721.00" y="703.5" >executor&lt;test_read</text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (1 samples, 0.02%)</title><rect x="52.3" y="469" width="0.3" height="15.0" fill="rgb(245,186,18)" rx="2" ry="2" />
<text  x="55.33" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="67.8" y="565" width="0.2" height="15.0" fill="rgb(238,125,8)" rx="2" ry="2" />
<text  x="70.81" y="575.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (4 samples, 0.08%)</title><rect x="522.3" y="405" width="0.9" height="15.0" fill="rgb(224,26,7)" rx="2" ry="2" />
<text  x="525.28" y="415.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (9 samples, 0.17%)</title><rect x="733.7" y="501" width="2.1" height="15.0" fill="rgb(211,3,20)" rx="2" ry="2" />
<text  x="736.70" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="313.6" y="565" width="0.2" height="15.0" fill="rgb(248,151,35)" rx="2" ry="2" />
<text  x="316.59" y="575.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (13 samples, 0.25%)</title><rect x="368.7" y="373" width="2.9" height="15.0" fill="rgb(236,98,45)" rx="2" ry="2" />
<text  x="371.67" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="969.2" y="565" width="0.7" height="15.0" fill="rgb(220,119,28)" rx="2" ry="2" />
<text  x="972.25" y="575.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="811.8" y="501" width="0.2" height="15.0" fill="rgb(248,157,30)" rx="2" ry="2" />
<text  x="814.76" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (19 samples, 0.37%)</title><rect x="837.9" y="645" width="4.4" height="15.0" fill="rgb(210,110,14)" rx="2" ry="2" />
<text  x="840.93" y="655.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::touch (1 samples, 0.02%)</title><rect x="744.9" y="517" width="0.2" height="15.0" fill="rgb(248,74,16)" rx="2" ry="2" />
<text  x="747.85" y="527.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (5 samples, 0.10%)</title><rect x="575.1" y="501" width="1.1" height="15.0" fill="rgb(227,10,31)" rx="2" ry="2" />
<text  x="578.08" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="41.4" y="325" width="0.2" height="15.0" fill="rgb(210,206,25)" rx="2" ry="2" />
<text  x="44.41" y="335.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="820.0" y="485" width="0.2" height="15.0" fill="rgb(216,226,4)" rx="2" ry="2" />
<text  x="822.96" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="70.1" y="597" width="0.2" height="15.0" fill="rgb(219,106,18)" rx="2" ry="2" />
<text  x="73.08" y="607.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (12 samples, 0.23%)</title><rect x="75.1" y="677" width="2.7" height="15.0" fill="rgb(228,169,34)" rx="2" ry="2" />
<text  x="78.09" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="139.0" y="645" width="0.5" height="15.0" fill="rgb(210,46,8)" rx="2" ry="2" />
<text  x="142.04" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (2 samples, 0.04%)</title><rect x="280.1" y="421" width="0.5" height="15.0" fill="rgb(228,180,26)" rx="2" ry="2" />
<text  x="283.14" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1126.3" y="309" width="0.2" height="15.0" fill="rgb(207,23,33)" rx="2" ry="2" />
<text  x="1129.28" y="319.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="942.6" y="533" width="1.2" height="15.0" fill="rgb(241,100,27)" rx="2" ry="2" />
<text  x="945.62" y="543.5" ></text>
</g>
<g >
<title>seastar::smp::invoke_on_all&lt;single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="17.1" y="741" width="0.2" height="15.0" fill="rgb(214,9,15)" rx="2" ry="2" />
<text  x="20.05" y="751.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%)</title><rect x="657.7" y="613" width="0.2" height="15.0" fill="rgb(217,159,49)" rx="2" ry="2" />
<text  x="660.69" y="623.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedState (2 samples, 0.04%)</title><rect x="20.0" y="549" width="0.5" height="15.0" fill="rgb(224,209,22)" rx="2" ry="2" />
<text  x="23.01" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="671.3" y="661" width="0.3" height="15.0" fill="rgb(213,112,45)" rx="2" ry="2" />
<text  x="674.35" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="856.6" y="549" width="1.1" height="15.0" fill="rgb(207,96,38)" rx="2" ry="2" />
<text  x="859.60" y="559.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="104.0" y="565" width="0.2" height="15.0" fill="rgb(221,180,46)" rx="2" ry="2" />
<text  x="106.99" y="575.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="1131.7" y="581" width="0.5" height="15.0" fill="rgb(224,25,20)" rx="2" ry="2" />
<text  x="1134.74" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="638.3" y="677" width="0.3" height="15.0" fill="rgb(231,153,30)" rx="2" ry="2" />
<text  x="641.35" y="687.5" ></text>
</g>
<g >
<title>db::schema_tables::feed_hash_for_schema_digest (1 samples, 0.02%)</title><rect x="103.5" y="645" width="0.3" height="15.0" fill="rgb(236,114,5)" rx="2" ry="2" />
<text  x="106.54" y="655.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.1" y="453" width="0.3" height="15.0" fill="rgb(211,6,25)" rx="2" ry="2" />
<text  x="52.14" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1130.6" y="357" width="0.2" height="15.0" fill="rgb(250,9,16)" rx="2" ry="2" />
<text  x="1133.60" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%)</title><rect x="835.0" y="613" width="0.2" height="15.0" fill="rgb(216,193,27)" rx="2" ry="2" />
<text  x="837.98" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="83.7" y="613" width="0.3" height="15.0" fill="rgb(236,7,53)" rx="2" ry="2" />
<text  x="86.74" y="623.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (1 samples, 0.02%)</title><rect x="832.2" y="613" width="0.3" height="15.0" fill="rgb(245,202,8)" rx="2" ry="2" />
<text  x="835.24" y="623.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::statements::raw::update_statement, cql3::cf_name, std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;, bool&amp;&gt; (1 samples, 0.02%)</title><rect x="63.7" y="581" width="0.2" height="15.0" fill="rgb(215,93,11)" rx="2" ry="2" />
<text  x="66.71" y="591.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="1147.2" y="613" width="0.5" height="15.0" fill="rgb(233,137,20)" rx="2" ry="2" />
<text  x="1150.22" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (3 samples, 0.06%)</title><rect x="865.9" y="709" width="0.7" height="15.0" fill="rgb(233,208,5)" rx="2" ry="2" />
<text  x="868.93" y="719.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (1 samples, 0.02%)</title><rect x="1017.0" y="405" width="0.3" height="15.0" fill="rgb(223,133,14)" rx="2" ry="2" />
<text  x="1020.04" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%)</title><rect x="249.4" y="389" width="0.2" height="15.0" fill="rgb(226,53,12)" rx="2" ry="2" />
<text  x="252.41" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1022.7" y="421" width="0.3" height="15.0" fill="rgb(253,188,29)" rx="2" ry="2" />
<text  x="1025.73" y="431.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (282 samples, 5.44%)</title><rect x="15.0" y="805" width="64.2" height="15.0" fill="rgb(250,223,30)" rx="2" ry="2" />
<text  x="18.01" y="815.5" >seastar..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="54.6" y="357" width="0.2" height="15.0" fill="rgb(206,115,23)" rx="2" ry="2" />
<text  x="57.61" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::selector (1 samples, 0.02%)</title><rect x="80.8" y="405" width="0.2" height="15.0" fill="rgb(217,171,39)" rx="2" ry="2" />
<text  x="83.78" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (10 samples, 0.19%)</title><rect x="910.5" y="533" width="2.3" height="15.0" fill="rgb(252,82,11)" rx="2" ry="2" />
<text  x="913.53" y="543.5" ></text>
</g>
<g >
<title>schema::position (1 samples, 0.02%)</title><rect x="947.2" y="613" width="0.2" height="15.0" fill="rgb(228,84,13)" rx="2" ry="2" />
<text  x="950.17" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="57.1" y="453" width="0.2" height="15.0" fill="rgb(232,98,23)" rx="2" ry="2" />
<text  x="60.11" y="463.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (28 samples, 0.54%)</title><rect x="754.9" y="629" width="6.3" height="15.0" fill="rgb(227,87,6)" rx="2" ry="2" />
<text  x="757.87" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (5 samples, 0.10%)</title><rect x="300.4" y="565" width="1.1" height="15.0" fill="rgb(211,151,24)" rx="2" ry="2" />
<text  x="303.39" y="575.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (3 samples, 0.06%)</title><rect x="528.4" y="485" width="0.7" height="15.0" fill="rgb(206,60,12)" rx="2" ry="2" />
<text  x="531.43" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (72 samples, 1.39%)</title><rect x="561.9" y="581" width="16.4" height="15.0" fill="rgb(209,17,51)" rx="2" ry="2" />
<text  x="564.88" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::populate_slot (1 samples, 0.02%)</title><rect x="873.7" y="469" width="0.2" height="15.0" fill="rgb(231,191,40)" rx="2" ry="2" />
<text  x="876.66" y="479.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="16.1" y="693" width="0.3" height="15.0" fill="rgb(230,162,2)" rx="2" ry="2" />
<text  x="19.14" y="703.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (16 samples, 0.31%)</title><rect x="1127.4" y="437" width="3.7" height="15.0" fill="rgb(224,223,22)" rx="2" ry="2" />
<text  x="1130.42" y="447.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_stream (1 samples, 0.02%)</title><rect x="15.0" y="725" width="0.2" height="15.0" fill="rgb(219,6,32)" rx="2" ry="2" />
<text  x="18.01" y="735.5" ></text>
</g>
<g >
<title>auth::resource::resource (10 samples, 0.19%)</title><rect x="773.1" y="597" width="2.3" height="15.0" fill="rgb(227,77,6)" rx="2" ry="2" />
<text  x="776.07" y="607.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="83.7" y="661" width="0.3" height="15.0" fill="rgb(234,99,44)" rx="2" ry="2" />
<text  x="86.74" y="671.5" ></text>
</g>
<g >
<title>query::querier_base::close (3 samples, 0.06%)</title><rect x="1163.6" y="693" width="0.7" height="15.0" fill="rgb(224,54,50)" rx="2" ry="2" />
<text  x="1166.60" y="703.5" ></text>
</g>
<g >
<title>table::set_metrics (1 samples, 0.02%)</title><rect x="104.4" y="629" width="0.3" height="15.0" fill="rgb(240,177,17)" rx="2" ry="2" />
<text  x="107.45" y="639.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (5 samples, 0.10%)</title><rect x="829.1" y="517" width="1.1" height="15.0" fill="rgb(233,101,29)" rx="2" ry="2" />
<text  x="832.06" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.48%)</title><rect x="1125.8" y="597" width="5.7" height="15.0" fill="rgb(208,7,43)" rx="2" ry="2" />
<text  x="1128.82" y="607.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="595.3" y="597" width="0.5" height="15.0" fill="rgb(208,163,33)" rx="2" ry="2" />
<text  x="598.33" y="607.5" ></text>
</g>
<g >
<title>std::operator- (2 samples, 0.04%)</title><rect x="41.9" y="373" width="0.4" height="15.0" fill="rgb(222,126,38)" rx="2" ry="2" />
<text  x="44.86" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="83.5" y="677" width="0.2" height="15.0" fill="rgb(253,47,35)" rx="2" ry="2" />
<text  x="86.51" y="687.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (4 samples, 0.08%)</title><rect x="384.8" y="357" width="0.9" height="15.0" fill="rgb(237,159,7)" rx="2" ry="2" />
<text  x="387.82" y="367.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (3 samples, 0.06%)</title><rect x="563.0" y="549" width="0.7" height="15.0" fill="rgb(225,222,45)" rx="2" ry="2" />
<text  x="566.02" y="559.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="40.7" y="357" width="0.3" height="15.0" fill="rgb(223,157,19)" rx="2" ry="2" />
<text  x="43.72" y="367.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (35 samples, 0.68%)</title><rect x="729.4" y="629" width="7.9" height="15.0" fill="rgb(225,125,16)" rx="2" ry="2" />
<text  x="732.38" y="639.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="103.8" y="549" width="0.2" height="15.0" fill="rgb(251,85,9)" rx="2" ry="2" />
<text  x="106.76" y="559.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (33 samples, 0.64%)</title><rect x="539.8" y="533" width="7.5" height="15.0" fill="rgb(246,220,24)" rx="2" ry="2" />
<text  x="542.81" y="543.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;long, std::allocator&lt;long&gt; &gt;::push_back_impl&lt;long const&amp;&gt; (1 samples, 0.02%)</title><rect x="685.0" y="645" width="0.2" height="15.0" fill="rgb(229,100,54)" rx="2" ry="2" />
<text  x="688.00" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1061.6" y="533" width="0.5" height="15.0" fill="rgb(240,160,53)" rx="2" ry="2" />
<text  x="1064.65" y="543.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="946.7" y="613" width="0.5" height="15.0" fill="rgb(237,85,3)" rx="2" ry="2" />
<text  x="949.72" y="623.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%)</title><rect x="76.5" y="501" width="0.9" height="15.0" fill="rgb(224,113,24)" rx="2" ry="2" />
<text  x="79.45" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="1020.0" y="373" width="0.2" height="15.0" fill="rgb(240,157,47)" rx="2" ry="2" />
<text  x="1023.00" y="383.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%)</title><rect x="273.1" y="421" width="0.2" height="15.0" fill="rgb(232,169,31)" rx="2" ry="2" />
<text  x="276.08" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="290.2" y="485" width="0.2" height="15.0" fill="rgb(220,51,15)" rx="2" ry="2" />
<text  x="293.15" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::do_recursive_touch_directory (1 samples, 0.02%)</title><rect x="85.8" y="725" width="0.2" height="15.0" fill="rgb(219,112,13)" rx="2" ry="2" />
<text  x="88.78" y="735.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="636.1" y="693" width="0.2" height="15.0" fill="rgb(212,9,7)" rx="2" ry="2" />
<text  x="639.07" y="703.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="16.8" y="661" width="0.3" height="15.0" fill="rgb(220,133,46)" rx="2" ry="2" />
<text  x="19.83" y="671.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (17 samples, 0.33%)</title><rect x="487.2" y="485" width="3.9" height="15.0" fill="rgb(243,51,29)" rx="2" ry="2" />
<text  x="490.23" y="495.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (2 samples, 0.04%)</title><rect x="274.9" y="405" width="0.5" height="15.0" fill="rgb(244,133,20)" rx="2" ry="2" />
<text  x="277.90" y="415.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%)</title><rect x="10.2" y="565" width="0.3" height="15.0" fill="rgb(223,177,9)" rx="2" ry="2" />
<text  x="13.23" y="575.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::BaseRecognizer (2 samples, 0.04%)</title><rect x="20.0" y="581" width="0.5" height="15.0" fill="rgb(243,100,1)" rx="2" ry="2" />
<text  x="23.01" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="1113.3" y="629" width="0.2" height="15.0" fill="rgb(254,122,10)" rx="2" ry="2" />
<text  x="1116.31" y="639.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="695.2" y="677" width="0.3" height="15.0" fill="rgb(211,89,54)" rx="2" ry="2" />
<text  x="698.24" y="687.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, sstables::remove_by_toc_name (1 samples, 0.02%)</title><rect x="713.4" y="709" width="0.3" height="15.0" fill="rgb(216,213,25)" rx="2" ry="2" />
<text  x="716.45" y="719.5" ></text>
</g>
<g >
<title>database::add_column_family (4 samples, 0.08%)</title><rect x="103.8" y="693" width="0.9" height="15.0" fill="rgb(231,56,28)" rx="2" ry="2" />
<text  x="106.76" y="703.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (5 samples, 0.10%)</title><rect x="542.3" y="517" width="1.1" height="15.0" fill="rgb(242,221,16)" rx="2" ry="2" />
<text  x="545.31" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="1116.5" y="645" width="0.4" height="15.0" fill="rgb(214,139,35)" rx="2" ry="2" />
<text  x="1119.49" y="655.5" ></text>
</g>
<g >
<title>freeze (10 samples, 0.19%)</title><rect x="1127.4" y="405" width="2.3" height="15.0" fill="rgb(211,28,13)" rx="2" ry="2" />
<text  x="1130.42" y="415.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (1 samples, 0.02%)</title><rect x="102.6" y="565" width="0.3" height="15.0" fill="rgb(251,182,54)" rx="2" ry="2" />
<text  x="105.62" y="575.5" ></text>
</g>
<g >
<title>cql3::query_processor::for_each_cql_result (1 samples, 0.02%)</title><rect x="640.6" y="693" width="0.3" height="15.0" fill="rgb(218,211,8)" rx="2" ry="2" />
<text  x="643.62" y="703.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="434.0" y="485" width="0.4" height="15.0" fill="rgb(248,227,5)" rx="2" ry="2" />
<text  x="436.98" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (510 samples, 9.84%)</title><rect x="971.8" y="581" width="116.0" height="15.0" fill="rgb(236,79,32)" rx="2" ry="2" />
<text  x="974.75" y="591.5" >service::stora..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="792.0" y="437" width="0.6" height="15.0" fill="rgb(250,122,42)" rx="2" ry="2" />
<text  x="794.96" y="447.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (1 samples, 0.02%)</title><rect x="640.4" y="709" width="0.2" height="15.0" fill="rgb(246,77,1)" rx="2" ry="2" />
<text  x="643.40" y="719.5" ></text>
</g>
<g >
<title>std::move&lt;std::allocator&lt;char&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="25.2" y="373" width="0.3" height="15.0" fill="rgb(209,18,46)" rx="2" ry="2" />
<text  x="28.25" y="383.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="724.4" y="661" width="0.2" height="15.0" fill="rgb(248,105,39)" rx="2" ry="2" />
<text  x="727.37" y="671.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%)</title><rect x="1140.2" y="677" width="0.2" height="15.0" fill="rgb(246,203,4)" rx="2" ry="2" />
<text  x="1143.16" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%)</title><rect x="83.7" y="597" width="0.3" height="15.0" fill="rgb(248,200,34)" rx="2" ry="2" />
<text  x="86.74" y="607.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (37 samples, 0.71%)</title><rect x="90.6" y="709" width="8.4" height="15.0" fill="rgb(227,40,42)" rx="2" ry="2" />
<text  x="93.56" y="719.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="822.2" y="565" width="0.7" height="15.0" fill="rgb(222,159,10)" rx="2" ry="2" />
<text  x="825.23" y="575.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.12%)</title><rect x="23.2" y="437" width="1.4" height="15.0" fill="rgb(234,100,11)" rx="2" ry="2" />
<text  x="26.20" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="816.5" y="533" width="0.3" height="15.0" fill="rgb(225,142,8)" rx="2" ry="2" />
<text  x="819.54" y="543.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%)</title><rect x="198.9" y="421" width="0.2" height="15.0" fill="rgb(211,44,10)" rx="2" ry="2" />
<text  x="201.89" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (282 samples, 5.44%)</title><rect x="15.0" y="789" width="64.2" height="15.0" fill="rgb(212,20,51)" rx="2" ry="2" />
<text  x="18.01" y="799.5" >seastar..</text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (9 samples, 0.17%)</title><rect x="937.4" y="581" width="2.0" height="15.0" fill="rgb(231,180,52)" rx="2" ry="2" />
<text  x="940.39" y="591.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="504.1" y="389" width="0.2" height="15.0" fill="rgb(232,122,33)" rx="2" ry="2" />
<text  x="507.08" y="399.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="1052.3" y="549" width="0.2" height="15.0" fill="rgb(226,54,12)" rx="2" ry="2" />
<text  x="1055.31" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (3 samples, 0.06%)</title><rect x="82.8" y="693" width="0.7" height="15.0" fill="rgb(254,83,22)" rx="2" ry="2" />
<text  x="85.83" y="703.5" ></text>
</g>
<g >
<title>make_shared_schema (1 samples, 0.02%)</title><rect x="16.6" y="469" width="0.2" height="15.0" fill="rgb(219,217,36)" rx="2" ry="2" />
<text  x="19.60" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="79.0" y="197" width="0.2" height="15.0" fill="rgb(220,34,47)" rx="2" ry="2" />
<text  x="81.96" y="207.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (1 samples, 0.02%)</title><rect x="80.8" y="533" width="0.2" height="15.0" fill="rgb(252,132,31)" rx="2" ry="2" />
<text  x="83.78" y="543.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (2 samples, 0.04%)</title><rect x="1129.9" y="405" width="0.5" height="15.0" fill="rgb(235,95,13)" rx="2" ry="2" />
<text  x="1132.92" y="415.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="129.7" y="613" width="0.2" height="15.0" fill="rgb(207,12,46)" rx="2" ry="2" />
<text  x="132.71" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="862.3" y="629" width="0.2" height="15.0" fill="rgb(251,141,18)" rx="2" ry="2" />
<text  x="865.29" y="639.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (1 samples, 0.02%)</title><rect x="79.0" y="357" width="0.2" height="15.0" fill="rgb(248,128,39)" rx="2" ry="2" />
<text  x="81.96" y="367.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%)</title><rect x="802.2" y="341" width="0.2" height="15.0" fill="rgb(242,115,47)" rx="2" ry="2" />
<text  x="805.20" y="351.5" ></text>
</g>
<g >
<title>seastar::file_data_sink_impl::~file_data_sink_impl (1 samples, 0.02%)</title><rect x="10.7" y="501" width="0.2" height="15.0" fill="rgb(251,0,15)" rx="2" ry="2" />
<text  x="13.68" y="511.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (4 samples, 0.08%)</title><rect x="103.8" y="709" width="0.9" height="15.0" fill="rgb(254,228,45)" rx="2" ry="2" />
<text  x="106.76" y="719.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (1 samples, 0.02%)</title><rect x="1163.8" y="517" width="0.3" height="15.0" fill="rgb(230,85,45)" rx="2" ry="2" />
<text  x="1166.83" y="527.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (1 samples, 0.02%)</title><rect x="1127.0" y="373" width="0.2" height="15.0" fill="rgb(234,223,42)" rx="2" ry="2" />
<text  x="1129.96" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::validate (1 samples, 0.02%)</title><rect x="833.8" y="629" width="0.3" height="15.0" fill="rgb(248,146,20)" rx="2" ry="2" />
<text  x="836.84" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="40.3" y="485" width="0.2" height="15.0" fill="rgb(234,228,0)" rx="2" ry="2" />
<text  x="43.27" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (4 samples, 0.08%)</title><rect x="176.8" y="453" width="0.9" height="15.0" fill="rgb(244,21,45)" rx="2" ry="2" />
<text  x="179.82" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="60.5" y="437" width="0.3" height="15.0" fill="rgb(242,76,21)" rx="2" ry="2" />
<text  x="63.52" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1134.2" y="709" width="0.3" height="15.0" fill="rgb(220,195,8)" rx="2" ry="2" />
<text  x="1137.24" y="719.5" ></text>
</g>
<g >
<title>memtable::apply (24 samples, 0.46%)</title><rect x="1117.4" y="469" width="5.5" height="15.0" fill="rgb(242,43,24)" rx="2" ry="2" />
<text  x="1120.40" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="1131.7" y="565" width="0.5" height="15.0" fill="rgb(243,85,51)" rx="2" ry="2" />
<text  x="1134.74" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="822.9" y="597" width="0.2" height="15.0" fill="rgb(210,19,9)" rx="2" ry="2" />
<text  x="825.91" y="607.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (43 samples, 0.83%)</title><rect x="693.2" y="709" width="9.8" height="15.0" fill="rgb(210,159,38)" rx="2" ry="2" />
<text  x="696.19" y="719.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="503.6" y="405" width="0.7" height="15.0" fill="rgb(233,151,4)" rx="2" ry="2" />
<text  x="506.62" y="415.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="820.0" y="501" width="0.2" height="15.0" fill="rgb(240,198,43)" rx="2" ry="2" />
<text  x="822.96" y="511.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="992.9" y="533" width="0.2" height="15.0" fill="rgb(232,127,12)" rx="2" ry="2" />
<text  x="995.92" y="543.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="868.9" y="517" width="0.2" height="15.0" fill="rgb(217,18,6)" rx="2" ry="2" />
<text  x="871.89" y="527.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1,278 samples, 24.65%)</title><rect x="152.2" y="629" width="290.9" height="15.0" fill="rgb(205,136,32)" rx="2" ry="2" />
<text  x="155.24" y="639.5" >query::consume_page&lt;</text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (2 samples, 0.04%)</title><rect x="145.2" y="613" width="0.4" height="15.0" fill="rgb(238,183,52)" rx="2" ry="2" />
<text  x="148.18" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="389" width="0.3" height="15.0" fill="rgb(234,105,44)" rx="2" ry="2" />
<text  x="62.84" y="399.5" ></text>
</g>
<g >
<title>row::compact_and_expire (1 samples, 0.02%)</title><rect x="691.8" y="501" width="0.3" height="15.0" fill="rgb(235,144,52)" rx="2" ry="2" />
<text  x="694.83" y="511.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%)</title><rect x="766.9" y="533" width="0.7" height="15.0" fill="rgb(216,219,34)" rx="2" ry="2" />
<text  x="769.93" y="543.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (22 samples, 0.42%)</title><rect x="141.8" y="645" width="5.0" height="15.0" fill="rgb(240,17,12)" rx="2" ry="2" />
<text  x="144.77" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (5 samples, 0.10%)</title><rect x="666.8" y="693" width="1.1" height="15.0" fill="rgb(235,52,19)" rx="2" ry="2" />
<text  x="669.79" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state_component&lt;seastar::future&lt;void&gt; &gt;::run_and_dispose (1 samples, 0.02%)</title><rect x="86.5" y="725" width="0.2" height="15.0" fill="rgb(243,92,17)" rx="2" ry="2" />
<text  x="89.47" y="735.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (5 samples, 0.10%)</title><rect x="984.5" y="533" width="1.1" height="15.0" fill="rgb(231,6,21)" rx="2" ry="2" />
<text  x="987.50" y="543.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (1 samples, 0.02%)</title><rect x="853.9" y="645" width="0.2" height="15.0" fill="rgb(252,229,47)" rx="2" ry="2" />
<text  x="856.86" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::do_refresh_state (1 samples, 0.02%)</title><rect x="82.6" y="549" width="0.2" height="15.0" fill="rgb(241,112,48)" rx="2" ry="2" />
<text  x="85.60" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="183.0" y="421" width="0.2" height="15.0" fill="rgb(227,129,27)" rx="2" ry="2" />
<text  x="185.96" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="259.7" y="405" width="0.2" height="15.0" fill="rgb(213,52,53)" rx="2" ry="2" />
<text  x="262.65" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="41.4" y="341" width="0.2" height="15.0" fill="rgb(250,179,26)" rx="2" ry="2" />
<text  x="44.41" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (4 samples, 0.08%)</title><rect x="991.6" y="485" width="0.9" height="15.0" fill="rgb(247,229,34)" rx="2" ry="2" />
<text  x="994.55" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;boost::intrusive::detail::null_disposer, boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="570.5" y="501" width="0.5" height="15.0" fill="rgb(247,169,42)" rx="2" ry="2" />
<text  x="573.53" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (2 samples, 0.04%)</title><rect x="586.2" y="565" width="0.5" height="15.0" fill="rgb(246,14,47)" rx="2" ry="2" />
<text  x="589.23" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="693.0" y="597" width="0.2" height="15.0" fill="rgb(250,11,29)" rx="2" ry="2" />
<text  x="695.97" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="442.6" y="597" width="0.3" height="15.0" fill="rgb(219,7,23)" rx="2" ry="2" />
<text  x="445.63" y="607.5" ></text>
</g>
<g >
<title>query::result::builder::build (1 samples, 0.02%)</title><rect x="113.5" y="661" width="0.3" height="15.0" fill="rgb(253,177,31)" rx="2" ry="2" />
<text  x="116.55" y="671.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="1127.6" y="357" width="0.3" height="15.0" fill="rgb(238,128,41)" rx="2" ry="2" />
<text  x="1130.64" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="630.8" y="581" width="0.7" height="15.0" fill="rgb(247,81,24)" rx="2" ry="2" />
<text  x="633.84" y="591.5" ></text>
</g>
<g >
<title>seastar::posix_thread::start_routine (3 samples, 0.06%)</title><rect x="1189.3" y="821" width="0.7" height="15.0" fill="rgb(245,21,13)" rx="2" ry="2" />
<text  x="1192.32" y="831.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (29 samples, 0.56%)</title><rect x="986.3" y="549" width="6.6" height="15.0" fill="rgb(253,62,5)" rx="2" ry="2" />
<text  x="989.32" y="559.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (10 samples, 0.19%)</title><rect x="40.7" y="533" width="2.3" height="15.0" fill="rgb(219,151,9)" rx="2" ry="2" />
<text  x="43.72" y="543.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (9 samples, 0.17%)</title><rect x="1127.4" y="389" width="2.1" height="15.0" fill="rgb(206,183,7)" rx="2" ry="2" />
<text  x="1130.42" y="399.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (1 samples, 0.02%)</title><rect x="837.0" y="645" width="0.3" height="15.0" fill="rgb(252,164,24)" rx="2" ry="2" />
<text  x="840.02" y="655.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="1162.2" y="613" width="0.3" height="15.0" fill="rgb(236,220,9)" rx="2" ry="2" />
<text  x="1165.24" y="623.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (1 samples, 0.02%)</title><rect x="660.9" y="661" width="0.2" height="15.0" fill="rgb(232,140,52)" rx="2" ry="2" />
<text  x="663.88" y="671.5" ></text>
</g>
<g >
<title>row_cache::do_update (2 samples, 0.04%)</title><rect x="1131.7" y="597" width="0.5" height="15.0" fill="rgb(253,39,43)" rx="2" ry="2" />
<text  x="1134.74" y="607.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%)</title><rect x="83.3" y="597" width="0.2" height="15.0" fill="rgb(243,182,26)" rx="2" ry="2" />
<text  x="86.28" y="607.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.14%)</title><rect x="910.5" y="517" width="1.6" height="15.0" fill="rgb(212,40,13)" rx="2" ry="2" />
<text  x="913.53" y="527.5" ></text>
</g>
<g >
<title>posix_memalign (2 samples, 0.04%)</title><rect x="874.3" y="437" width="0.5" height="15.0" fill="rgb(229,181,5)" rx="2" ry="2" />
<text  x="877.35" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (10 samples, 0.19%)</title><rect x="524.6" y="453" width="2.2" height="15.0" fill="rgb(225,152,47)" rx="2" ry="2" />
<text  x="527.56" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (4 samples, 0.08%)</title><rect x="1089.9" y="613" width="0.9" height="15.0" fill="rgb(231,56,22)" rx="2" ry="2" />
<text  x="1092.86" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="44.6" y="421" width="0.2" height="15.0" fill="rgb(249,211,20)" rx="2" ry="2" />
<text  x="47.59" y="431.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (2 samples, 0.04%)</title><rect x="119.7" y="597" width="0.4" height="15.0" fill="rgb(254,69,51)" rx="2" ry="2" />
<text  x="122.69" y="607.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (103 samples, 1.99%)</title><rect x="507.5" y="533" width="23.4" height="15.0" fill="rgb(244,91,9)" rx="2" ry="2" />
<text  x="510.49" y="543.5" >m..</text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (1 samples, 0.02%)</title><rect x="1026.6" y="453" width="0.2" height="15.0" fill="rgb(211,34,47)" rx="2" ry="2" />
<text  x="1029.60" y="463.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (11 samples, 0.21%)</title><rect x="379.1" y="373" width="2.5" height="15.0" fill="rgb(216,54,53)" rx="2" ry="2" />
<text  x="382.13" y="383.5" ></text>
</g>
<g >
<title>database::find_column_family (2 samples, 0.04%)</title><rect x="73.7" y="613" width="0.5" height="15.0" fill="rgb(221,47,52)" rx="2" ry="2" />
<text  x="76.72" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="55.5" y="405" width="0.2" height="15.0" fill="rgb(220,224,44)" rx="2" ry="2" />
<text  x="58.52" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="60.3" y="405" width="0.2" height="15.0" fill="rgb(251,84,3)" rx="2" ry="2" />
<text  x="63.30" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_Deque_base (1 samples, 0.02%)</title><rect x="20.0" y="501" width="0.2" height="15.0" fill="rgb(229,5,38)" rx="2" ry="2" />
<text  x="23.01" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (11 samples, 0.21%)</title><rect x="749.0" y="501" width="2.5" height="15.0" fill="rgb(231,146,51)" rx="2" ry="2" />
<text  x="751.95" y="511.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (59 samples, 1.14%)</title><rect x="792.6" y="469" width="13.5" height="15.0" fill="rgb(207,125,26)" rx="2" ry="2" />
<text  x="795.65" y="479.5" ></text>
</g>
<g >
<title>seastar::smp::configure (1 samples, 0.02%)</title><rect x="1166.6" y="757" width="0.2" height="15.0" fill="rgb(206,190,42)" rx="2" ry="2" />
<text  x="1169.56" y="767.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (16 samples, 0.31%)</title><rect x="1175.4" y="821" width="3.7" height="15.0" fill="rgb(254,3,41)" rx="2" ry="2" />
<text  x="1178.43" y="831.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="46.0" y="389" width="0.2" height="15.0" fill="rgb(205,116,36)" rx="2" ry="2" />
<text  x="48.96" y="399.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3 samples, 0.06%)</title><rect x="799.5" y="325" width="0.7" height="15.0" fill="rgb(239,59,14)" rx="2" ry="2" />
<text  x="802.47" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.08%)</title><rect x="44.8" y="437" width="0.9" height="15.0" fill="rgb(226,51,4)" rx="2" ry="2" />
<text  x="47.82" y="447.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2 samples, 0.04%)</title><rect x="767.2" y="517" width="0.4" height="15.0" fill="rgb(232,226,3)" rx="2" ry="2" />
<text  x="770.16" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (382 samples, 7.37%)</title><rect x="331.8" y="453" width="86.9" height="15.0" fill="rgb(231,201,43)" rx="2" ry="2" />
<text  x="334.80" y="463.5" >flat_mutat..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::operator= (1 samples, 0.02%)</title><rect x="43.2" y="533" width="0.3" height="15.0" fill="rgb(232,40,1)" rx="2" ry="2" />
<text  x="46.23" y="543.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="253.7" y="309" width="0.3" height="15.0" fill="rgb(244,155,14)" rx="2" ry="2" />
<text  x="256.74" y="319.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="691.6" y="565" width="0.2" height="15.0" fill="rgb(240,39,17)" rx="2" ry="2" />
<text  x="694.60" y="575.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="84.0" y="805" width="0.2" height="15.0" fill="rgb(253,0,49)" rx="2" ry="2" />
<text  x="86.96" y="815.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%)</title><rect x="655.6" y="677" width="0.3" height="15.0" fill="rgb(212,74,23)" rx="2" ry="2" />
<text  x="658.64" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::query_options, false&gt;::make&lt;cql3::query_options&amp;&gt; (2 samples, 0.04%)</title><rect x="78.3" y="709" width="0.4" height="15.0" fill="rgb(227,127,29)" rx="2" ry="2" />
<text  x="81.27" y="719.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::mhtraits&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, boost::intrusive::list_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="728.9" y="597" width="0.5" height="15.0" fill="rgb(208,172,22)" rx="2" ry="2" />
<text  x="731.92" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="436.5" y="453" width="0.4" height="15.0" fill="rgb(235,216,26)" rx="2" ry="2" />
<text  x="439.48" y="463.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (10 samples, 0.19%)</title><rect x="544.8" y="517" width="2.3" height="15.0" fill="rgb(241,168,54)" rx="2" ry="2" />
<text  x="547.81" y="527.5" ></text>
</g>
<g >
<title>__start_context (2 samples, 0.04%)</title><rect x="17.3" y="725" width="0.4" height="15.0" fill="rgb(213,83,47)" rx="2" ry="2" />
<text  x="20.28" y="735.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="669.3" y="693" width="0.2" height="15.0" fill="rgb(249,121,13)" rx="2" ry="2" />
<text  x="672.30" y="703.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="44.6" y="389" width="0.2" height="15.0" fill="rgb(248,12,44)" rx="2" ry="2" />
<text  x="47.59" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (7 samples, 0.14%)</title><rect x="689.6" y="677" width="1.5" height="15.0" fill="rgb(247,152,3)" rx="2" ry="2" />
<text  x="692.55" y="687.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (5 samples, 0.10%)</title><rect x="581.0" y="565" width="1.1" height="15.0" fill="rgb(239,32,27)" rx="2" ry="2" />
<text  x="584.00" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="55.5" y="325" width="0.2" height="15.0" fill="rgb(205,180,39)" rx="2" ry="2" />
<text  x="58.52" y="335.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (6 samples, 0.12%)</title><rect x="1117.6" y="421" width="1.4" height="15.0" fill="rgb(240,32,34)" rx="2" ry="2" />
<text  x="1120.63" y="431.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="785.6" y="533" width="0.2" height="15.0" fill="rgb(231,229,40)" rx="2" ry="2" />
<text  x="788.59" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="49.1" y="405" width="0.3" height="15.0" fill="rgb(232,205,39)" rx="2" ry="2" />
<text  x="52.14" y="415.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (4 samples, 0.08%)</title><rect x="319.7" y="581" width="0.9" height="15.0" fill="rgb(243,163,41)" rx="2" ry="2" />
<text  x="322.74" y="591.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="55.5" y="309" width="0.2" height="15.0" fill="rgb(219,10,2)" rx="2" ry="2" />
<text  x="58.52" y="319.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (24 samples, 0.46%)</title><rect x="730.5" y="597" width="5.5" height="15.0" fill="rgb(246,214,45)" rx="2" ry="2" />
<text  x="733.52" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (5 samples, 0.10%)</title><rect x="1126.3" y="421" width="1.1" height="15.0" fill="rgb(205,63,48)" rx="2" ry="2" />
<text  x="1129.28" y="431.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (200 samples, 3.86%)</title><rect x="20.0" y="661" width="45.5" height="15.0" fill="rgb(227,199,31)" rx="2" ry="2" />
<text  x="23.01" y="671.5" >cql3..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="39.4" y="453" width="0.4" height="15.0" fill="rgb(205,35,17)" rx="2" ry="2" />
<text  x="42.36" y="463.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="45.5" y="325" width="0.2" height="15.0" fill="rgb(248,110,5)" rx="2" ry="2" />
<text  x="48.50" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="141.3" y="629" width="0.5" height="15.0" fill="rgb(222,52,32)" rx="2" ry="2" />
<text  x="144.31" y="639.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.04%)</title><rect x="12.5" y="789" width="0.5" height="15.0" fill="rgb(243,160,32)" rx="2" ry="2" />
<text  x="15.50" y="799.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="876.4" y="645" width="0.2" height="15.0" fill="rgb(208,109,8)" rx="2" ry="2" />
<text  x="879.40" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (10 samples, 0.19%)</title><rect x="978.8" y="533" width="2.3" height="15.0" fill="rgb(253,211,2)" rx="2" ry="2" />
<text  x="981.81" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="617.0" y="613" width="0.2" height="15.0" fill="rgb(251,119,15)" rx="2" ry="2" />
<text  x="619.95" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="469.0" y="501" width="0.3" height="15.0" fill="rgb(229,79,42)" rx="2" ry="2" />
<text  x="472.03" y="511.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="733.5" y="501" width="0.2" height="15.0" fill="rgb(208,107,1)" rx="2" ry="2" />
<text  x="736.48" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (5 samples, 0.10%)</title><rect x="830.7" y="549" width="1.1" height="15.0" fill="rgb(220,66,12)" rx="2" ry="2" />
<text  x="833.65" y="559.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (77 samples, 1.49%)</title><rect x="40.5" y="565" width="17.5" height="15.0" fill="rgb(207,86,30)" rx="2" ry="2" />
<text  x="43.50" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::update_statement&gt;, void&gt; (3 samples, 0.06%)</title><rect x="62.3" y="549" width="0.7" height="15.0" fill="rgb(241,68,1)" rx="2" ry="2" />
<text  x="65.34" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%)</title><rect x="1141.3" y="677" width="0.2" height="15.0" fill="rgb(247,94,25)" rx="2" ry="2" />
<text  x="1144.30" y="687.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="83.1" y="533" width="0.2" height="15.0" fill="rgb(206,142,38)" rx="2" ry="2" />
<text  x="86.05" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%)</title><rect x="10.7" y="597" width="0.2" height="15.0" fill="rgb(236,59,46)" rx="2" ry="2" />
<text  x="13.68" y="607.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="39.4" y="405" width="0.4" height="15.0" fill="rgb(218,19,23)" rx="2" ry="2" />
<text  x="42.36" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,039 samples, 20.04%)</title><rect x="880.5" y="661" width="236.4" height="15.0" fill="rgb(224,144,37)" rx="2" ry="2" />
<text  x="883.49" y="671.5" >seastar::noncopyable_function&lt;s..</text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="97.8" y="661" width="0.3" height="15.0" fill="rgb(239,192,18)" rx="2" ry="2" />
<text  x="100.85" y="671.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (14 samples, 0.27%)</title><rect x="953.3" y="613" width="3.2" height="15.0" fill="rgb(222,96,6)" rx="2" ry="2" />
<text  x="956.32" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="548.9" y="549" width="0.2" height="15.0" fill="rgb(226,102,35)" rx="2" ry="2" />
<text  x="551.91" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="999.3" y="501" width="0.2" height="15.0" fill="rgb(215,19,22)" rx="2" ry="2" />
<text  x="1002.29" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::~CqlParser (1 samples, 0.02%)</title><rect x="21.6" y="629" width="0.2" height="15.0" fill="rgb(219,133,19)" rx="2" ry="2" />
<text  x="24.61" y="639.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;, merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="640.9" y="709" width="0.2" height="15.0" fill="rgb(205,154,46)" rx="2" ry="2" />
<text  x="643.85" y="719.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="104.7" y="693" width="0.2" height="15.0" fill="rgb(254,162,42)" rx="2" ry="2" />
<text  x="107.67" y="703.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (3 samples, 0.06%)</title><rect x="1108.8" y="597" width="0.6" height="15.0" fill="rgb(242,42,43)" rx="2" ry="2" />
<text  x="1111.75" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%)</title><rect x="81.0" y="597" width="0.2" height="15.0" fill="rgb(222,220,6)" rx="2" ry="2" />
<text  x="84.00" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="653.6" y="661" width="0.2" height="15.0" fill="rgb(252,183,22)" rx="2" ry="2" />
<text  x="656.59" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1023.0" y="421" width="0.2" height="15.0" fill="rgb(253,103,41)" rx="2" ry="2" />
<text  x="1025.96" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="708.2" y="629" width="0.2" height="15.0" fill="rgb(214,39,23)" rx="2" ry="2" />
<text  x="711.21" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (6 samples, 0.12%)</title><rect x="636.3" y="693" width="1.4" height="15.0" fill="rgb(207,212,12)" rx="2" ry="2" />
<text  x="639.30" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (1 samples, 0.02%)</title><rect x="1163.8" y="533" width="0.3" height="15.0" fill="rgb(238,132,4)" rx="2" ry="2" />
<text  x="1166.83" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (5 samples, 0.10%)</title><rect x="325.0" y="501" width="1.1" height="15.0" fill="rgb(229,66,25)" rx="2" ry="2" />
<text  x="327.97" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (611 samples, 11.78%)</title><rect x="161.3" y="565" width="139.1" height="15.0" fill="rgb(216,67,26)" rx="2" ry="2" />
<text  x="164.34" y="575.5" >mutation_fragment..</text>
</g>
<g >
<title>std::forward&lt;std::default_delete&lt;cql3::operation::raw_update&gt; &gt; (1 samples, 0.02%)</title><rect x="49.1" y="341" width="0.3" height="15.0" fill="rgb(236,157,48)" rx="2" ry="2" />
<text  x="52.14" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (559 samples, 10.78%)</title><rect x="315.9" y="613" width="127.2" height="15.0" fill="rgb(245,219,11)" rx="2" ry="2" />
<text  x="318.87" y="623.5" >seastar::future..</text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="828.8" y="485" width="0.3" height="15.0" fill="rgb(217,107,46)" rx="2" ry="2" />
<text  x="831.83" y="495.5" ></text>
</g>
<g >
<title>row_cache::do_update (2 samples, 0.04%)</title><rect x="1131.7" y="645" width="0.5" height="15.0" fill="rgb(221,58,14)" rx="2" ry="2" />
<text  x="1134.74" y="655.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="805.8" y="389" width="0.3" height="15.0" fill="rgb(253,167,48)" rx="2" ry="2" />
<text  x="808.85" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="1163.6" y="613" width="0.2" height="15.0" fill="rgb(244,142,47)" rx="2" ry="2" />
<text  x="1166.60" y="623.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_per_partition_limit (2 samples, 0.04%)</title><rect x="1101.2" y="613" width="0.5" height="15.0" fill="rgb(207,130,34)" rx="2" ry="2" />
<text  x="1104.24" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%)</title><rect x="56.2" y="453" width="0.2" height="15.0" fill="rgb(231,211,12)" rx="2" ry="2" />
<text  x="59.20" y="463.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (3 samples, 0.06%)</title><rect x="717.3" y="693" width="0.7" height="15.0" fill="rgb(238,36,52)" rx="2" ry="2" />
<text  x="720.32" y="703.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (135 samples, 2.60%)</title><rect x="358.7" y="389" width="30.7" height="15.0" fill="rgb(233,217,41)" rx="2" ry="2" />
<text  x="361.65" y="399.5" >wr..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="77.6" y="597" width="0.2" height="15.0" fill="rgb(235,80,50)" rx="2" ry="2" />
<text  x="80.59" y="607.5" ></text>
</g>
<g >
<title>main (4,755 samples, 91.71%)</title><rect x="84.6" y="821" width="1082.2" height="15.0" fill="rgb(245,179,33)" rx="2" ry="2" />
<text  x="87.65" y="831.5" >main</text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (1 samples, 0.02%)</title><rect x="621.5" y="613" width="0.2" height="15.0" fill="rgb(219,200,20)" rx="2" ry="2" />
<text  x="624.51" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="536.4" y="533" width="0.2" height="15.0" fill="rgb(241,130,52)" rx="2" ry="2" />
<text  x="539.39" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="292.0" y="517" width="0.2" height="15.0" fill="rgb(237,173,16)" rx="2" ry="2" />
<text  x="294.97" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (6 samples, 0.12%)</title><rect x="505.9" y="533" width="1.4" height="15.0" fill="rgb(221,166,2)" rx="2" ry="2" />
<text  x="508.90" y="543.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (1 samples, 0.02%)</title><rect x="71.4" y="565" width="0.3" height="15.0" fill="rgb(240,170,6)" rx="2" ry="2" />
<text  x="74.45" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%)</title><rect x="866.6" y="581" width="0.2" height="15.0" fill="rgb(226,33,35)" rx="2" ry="2" />
<text  x="869.61" y="591.5" ></text>
</g>
<g >
<title>do_io_check&lt;checked_file_impl::flush (1 samples, 0.02%)</title><rect x="713.7" y="661" width="0.2" height="15.0" fill="rgb(251,99,49)" rx="2" ry="2" />
<text  x="716.68" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="758.5" y="597" width="2.1" height="15.0" fill="rgb(237,221,29)" rx="2" ry="2" />
<text  x="761.51" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (2 samples, 0.04%)</title><rect x="830.9" y="517" width="0.4" height="15.0" fill="rgb(239,123,51)" rx="2" ry="2" />
<text  x="833.88" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (3 samples, 0.06%)</title><rect x="850.7" y="629" width="0.7" height="15.0" fill="rgb(226,67,23)" rx="2" ry="2" />
<text  x="853.68" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="546.9" y="485" width="0.2" height="15.0" fill="rgb(245,65,5)" rx="2" ry="2" />
<text  x="549.86" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (7 samples, 0.14%)</title><rect x="20.0" y="629" width="1.6" height="15.0" fill="rgb(207,208,32)" rx="2" ry="2" />
<text  x="23.01" y="639.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (2 samples, 0.04%)</title><rect x="452.4" y="549" width="0.5" height="15.0" fill="rgb(208,115,2)" rx="2" ry="2" />
<text  x="455.41" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1157.7" y="661" width="0.2" height="15.0" fill="rgb(210,75,21)" rx="2" ry="2" />
<text  x="1160.68" y="671.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="52.8" y="453" width="0.2" height="15.0" fill="rgb(210,39,35)" rx="2" ry="2" />
<text  x="55.78" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="41.0" y="389" width="0.2" height="15.0" fill="rgb(241,31,41)" rx="2" ry="2" />
<text  x="43.95" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="991.3" y="469" width="0.3" height="15.0" fill="rgb(246,196,45)" rx="2" ry="2" />
<text  x="994.32" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (3 samples, 0.06%)</title><rect x="1189.3" y="805" width="0.7" height="15.0" fill="rgb(223,5,40)" rx="2" ry="2" />
<text  x="1192.32" y="815.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::write_response_handler, true&gt;::make&lt;seastar::shared_ptr&lt;service::storage_proxy&gt;, keyspace&amp;, db::consistency_level&amp;, db::write_type&amp;, std::unique_ptr&lt;service::mutation_holder, std::default_delete&lt;service::mutation_holder&gt; &gt;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; const&amp;, utils::small_vector&lt;gms::inet_address, 1ul&gt;, tracing::trace_state_ptr, service::storage_proxy_stats::write_stats&amp;, service_permit&gt; (1 samples, 0.02%)</title><rect x="1130.8" y="389" width="0.3" height="15.0" fill="rgb(231,91,26)" rx="2" ry="2" />
<text  x="1133.83" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (1 samples, 0.02%)</title><rect x="711.9" y="661" width="0.2" height="15.0" fill="rgb(214,135,22)" rx="2" ry="2" />
<text  x="714.86" y="671.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%)</title><rect x="10.7" y="629" width="0.2" height="15.0" fill="rgb(242,197,18)" rx="2" ry="2" />
<text  x="13.68" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="1158.8" y="661" width="0.5" height="15.0" fill="rgb(218,148,19)" rx="2" ry="2" />
<text  x="1161.82" y="671.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (2 samples, 0.04%)</title><rect x="172.3" y="485" width="0.4" height="15.0" fill="rgb(238,126,9)" rx="2" ry="2" />
<text  x="175.26" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (1 samples, 0.02%)</title><rect x="707.1" y="645" width="0.2" height="15.0" fill="rgb(225,95,12)" rx="2" ry="2" />
<text  x="710.08" y="655.5" ></text>
</g>
<g >
<title>validation::validate_cql_key (1 samples, 0.02%)</title><rect x="870.7" y="581" width="0.2" height="15.0" fill="rgb(216,91,15)" rx="2" ry="2" />
<text  x="873.71" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="618.1" y="645" width="0.7" height="15.0" fill="rgb(209,204,49)" rx="2" ry="2" />
<text  x="621.09" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (10 samples, 0.19%)</title><rect x="176.1" y="469" width="2.3" height="15.0" fill="rgb(206,11,38)" rx="2" ry="2" />
<text  x="179.13" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="949.0" y="613" width="0.2" height="15.0" fill="rgb(223,165,46)" rx="2" ry="2" />
<text  x="951.99" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (4 samples, 0.08%)</title><rect x="545.0" y="453" width="0.9" height="15.0" fill="rgb(233,35,4)" rx="2" ry="2" />
<text  x="548.04" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="54.6" y="469" width="0.2" height="15.0" fill="rgb(223,193,40)" rx="2" ry="2" />
<text  x="57.61" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (3 samples, 0.06%)</title><rect x="203.0" y="437" width="0.7" height="15.0" fill="rgb(243,160,54)" rx="2" ry="2" />
<text  x="205.99" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (4 samples, 0.08%)</title><rect x="49.1" y="485" width="1.0" height="15.0" fill="rgb(217,148,17)" rx="2" ry="2" />
<text  x="52.14" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::empty (1 samples, 0.02%)</title><rect x="658.1" y="645" width="0.3" height="15.0" fill="rgb(205,68,24)" rx="2" ry="2" />
<text  x="661.15" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="861.1" y="677" width="0.5" height="15.0" fill="rgb(212,120,9)" rx="2" ry="2" />
<text  x="864.15" y="687.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (37 samples, 0.71%)</title><rect x="1116.9" y="693" width="8.5" height="15.0" fill="rgb(214,153,21)" rx="2" ry="2" />
<text  x="1119.95" y="703.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="247.8" y="341" width="0.2" height="15.0" fill="rgb(220,2,40)" rx="2" ry="2" />
<text  x="250.82" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (5 samples, 0.10%)</title><rect x="852.3" y="597" width="1.1" height="15.0" fill="rgb(228,120,9)" rx="2" ry="2" />
<text  x="855.27" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (3 samples, 0.06%)</title><rect x="638.6" y="677" width="0.7" height="15.0" fill="rgb(226,219,4)" rx="2" ry="2" />
<text  x="641.57" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="479.3" y="501" width="0.4" height="15.0" fill="rgb(238,179,21)" rx="2" ry="2" />
<text  x="482.27" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="109.7" y="677" width="0.2" height="15.0" fill="rgb(206,62,49)" rx="2" ry="2" />
<text  x="112.68" y="687.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;, std::_Bind_front&lt;bool  (3 samples, 0.06%)</title><rect x="868.4" y="581" width="0.7" height="15.0" fill="rgb(205,208,41)" rx="2" ry="2" />
<text  x="871.43" y="591.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="805.6" y="405" width="0.2" height="15.0" fill="rgb(242,132,43)" rx="2" ry="2" />
<text  x="808.62" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="50.3" y="501" width="0.2" height="15.0" fill="rgb(211,83,22)" rx="2" ry="2" />
<text  x="53.28" y="511.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="503.4" y="389" width="0.2" height="15.0" fill="rgb(214,212,34)" rx="2" ry="2" />
<text  x="506.39" y="399.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="904.8" y="469" width="1.0" height="15.0" fill="rgb(242,69,32)" rx="2" ry="2" />
<text  x="907.84" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (1 samples, 0.02%)</title><rect x="124.5" y="661" width="0.2" height="15.0" fill="rgb(254,72,48)" rx="2" ry="2" />
<text  x="127.47" y="671.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="795.8" y="421" width="0.3" height="15.0" fill="rgb(237,45,38)" rx="2" ry="2" />
<text  x="798.83" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (4 samples, 0.08%)</title><rect x="1128.1" y="341" width="0.9" height="15.0" fill="rgb(216,9,42)" rx="2" ry="2" />
<text  x="1131.10" y="351.5" ></text>
</g>
<g >
<title>query::digester::digester (1 samples, 0.02%)</title><rect x="604.2" y="613" width="0.2" height="15.0" fill="rgb(216,18,41)" rx="2" ry="2" />
<text  x="607.21" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="38.9" y="485" width="0.2" height="15.0" fill="rgb(226,94,45)" rx="2" ry="2" />
<text  x="41.90" y="495.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (552 samples, 10.65%)</title><rect x="317.0" y="597" width="125.6" height="15.0" fill="rgb(248,141,38)" rx="2" ry="2" />
<text  x="320.00" y="607.5" >query::consume_..</text>
</g>
<g >
<title>ser::serializer&lt;utils::UUID&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1129.5" y="389" width="0.2" height="15.0" fill="rgb(221,118,20)" rx="2" ry="2" />
<text  x="1132.46" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="1006.8" y="453" width="0.5" height="15.0" fill="rgb(206,179,42)" rx="2" ry="2" />
<text  x="1009.80" y="463.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="49.6" y="421" width="0.5" height="15.0" fill="rgb(246,50,43)" rx="2" ry="2" />
<text  x="52.60" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (2 samples, 0.04%)</title><rect x="1144.7" y="661" width="0.5" height="15.0" fill="rgb(253,19,49)" rx="2" ry="2" />
<text  x="1147.71" y="671.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="683.6" y="677" width="0.5" height="15.0" fill="rgb(210,60,27)" rx="2" ry="2" />
<text  x="686.64" y="687.5" ></text>
</g>
<g >
<title>ser::writer_of_deletable_row&lt;bytes_ostream&gt;::write_key (2 samples, 0.04%)</title><rect x="1129.0" y="341" width="0.5" height="15.0" fill="rgb(254,37,47)" rx="2" ry="2" />
<text  x="1132.01" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%)</title><rect x="912.4" y="485" width="0.2" height="15.0" fill="rgb(237,22,2)" rx="2" ry="2" />
<text  x="915.35" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (4 samples, 0.08%)</title><rect x="185.2" y="469" width="0.9" height="15.0" fill="rgb(251,224,46)" rx="2" ry="2" />
<text  x="188.24" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (47 samples, 0.91%)</title><rect x="25.9" y="501" width="10.7" height="15.0" fill="rgb(208,132,35)" rx="2" ry="2" />
<text  x="28.93" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (83 samples, 1.60%)</title><rect x="1063.2" y="533" width="18.9" height="15.0" fill="rgb(234,207,49)" rx="2" ry="2" />
<text  x="1066.24" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="898.9" y="517" width="0.5" height="15.0" fill="rgb(222,200,35)" rx="2" ry="2" />
<text  x="901.93" y="527.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (8 samples, 0.15%)</title><rect x="44.6" y="533" width="1.8" height="15.0" fill="rgb(241,131,3)" rx="2" ry="2" />
<text  x="47.59" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1020.2" y="357" width="0.3" height="15.0" fill="rgb(210,193,45)" rx="2" ry="2" />
<text  x="1023.23" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::~modification_statement (5 samples, 0.10%)</title><rect x="652.9" y="677" width="1.2" height="15.0" fill="rgb(239,169,8)" rx="2" ry="2" />
<text  x="655.91" y="687.5" ></text>
</g>
<g >
<title>compound_type&lt; (17 samples, 0.33%)</title><rect x="500.4" y="421" width="3.9" height="15.0" fill="rgb(248,204,44)" rx="2" ry="2" />
<text  x="503.43" y="431.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="523.4" y="421" width="0.2" height="15.0" fill="rgb(249,39,11)" rx="2" ry="2" />
<text  x="526.42" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (1 samples, 0.02%)</title><rect x="118.8" y="597" width="0.2" height="15.0" fill="rgb(244,133,22)" rx="2" ry="2" />
<text  x="121.78" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="712.1" y="693" width="0.2" height="15.0" fill="rgb(209,12,47)" rx="2" ry="2" />
<text  x="715.08" y="703.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (11 samples, 0.21%)</title><rect x="531.4" y="533" width="2.5" height="15.0" fill="rgb(246,116,20)" rx="2" ry="2" />
<text  x="534.38" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (2 samples, 0.04%)</title><rect x="177.3" y="437" width="0.4" height="15.0" fill="rgb(205,141,46)" rx="2" ry="2" />
<text  x="180.27" y="447.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_4findERKNS2_10expressionENS2_6oper_tEEUlRKNS2_15binary_operatorEE_EEPS9_S6_T_EUlSA_E_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_8constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_11conjunctionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_12column_valueEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_5tokenEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13function_callEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4castEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_15field_selectionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4nullEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13bind_variableEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_16untyped_constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_17tuple_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_22collection_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSJ_S8_SN_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_SF_S1R_S1V_S1Z_EEEENSt13invoke_resultISD_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSD_DpOS29_ (1 samples, 0.02%)</title><rect x="961.3" y="549" width="0.2" height="15.0" fill="rgb(218,62,40)" rx="2" ry="2" />
<text  x="964.28" y="559.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (37 samples, 0.71%)</title><rect x="116.1" y="645" width="8.4" height="15.0" fill="rgb(234,67,6)" rx="2" ry="2" />
<text  x="119.05" y="655.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="704.8" y="661" width="0.7" height="15.0" fill="rgb(223,194,24)" rx="2" ry="2" />
<text  x="707.80" y="671.5" ></text>
</g>
<g >
<title>sstring_hash::operator (3 samples, 0.06%)</title><rect x="1050.7" y="501" width="0.7" height="15.0" fill="rgb(232,6,42)" rx="2" ry="2" />
<text  x="1053.72" y="511.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (1 samples, 0.02%)</title><rect x="430.3" y="453" width="0.3" height="15.0" fill="rgb(214,148,52)" rx="2" ry="2" />
<text  x="433.34" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="42.8" y="341" width="0.2" height="15.0" fill="rgb(251,175,23)" rx="2" ry="2" />
<text  x="45.77" y="351.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="546.2" y="469" width="0.4" height="15.0" fill="rgb(233,102,9)" rx="2" ry="2" />
<text  x="549.18" y="479.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (1 samples, 0.02%)</title><rect x="1117.6" y="325" width="0.3" height="15.0" fill="rgb(211,55,24)" rx="2" ry="2" />
<text  x="1120.63" y="335.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1128.8" y="309" width="0.2" height="15.0" fill="rgb(231,133,39)" rx="2" ry="2" />
<text  x="1131.78" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (3 samples, 0.06%)</title><rect x="81.9" y="565" width="0.7" height="15.0" fill="rgb(223,217,24)" rx="2" ry="2" />
<text  x="84.92" y="575.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (4 samples, 0.08%)</title><rect x="1063.7" y="517" width="0.9" height="15.0" fill="rgb(225,23,41)" rx="2" ry="2" />
<text  x="1066.69" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mX (1 samples, 0.02%)</title><rect x="36.2" y="469" width="0.2" height="15.0" fill="rgb(239,182,3)" rx="2" ry="2" />
<text  x="39.17" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;boost::intrusive::detail::null_disposer, boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="570.3" y="485" width="0.2" height="15.0" fill="rgb(246,9,51)" rx="2" ry="2" />
<text  x="573.30" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;cql3::restrictions::statement_restrictions, std::_Optional_base&lt;cql3::restrictions::statement_restrictions, false, false&gt; &gt;::_M_construct&lt;cql3::restrictions::statement_restrictions&gt; (1 samples, 0.02%)</title><rect x="71.0" y="597" width="0.2" height="15.0" fill="rgb(214,137,52)" rx="2" ry="2" />
<text  x="73.99" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%)</title><rect x="426.5" y="421" width="0.2" height="15.0" fill="rgb(249,208,48)" rx="2" ry="2" />
<text  x="429.47" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="81.2" y="597" width="0.3" height="15.0" fill="rgb(236,155,33)" rx="2" ry="2" />
<text  x="84.23" y="607.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="41.2" y="373" width="0.4" height="15.0" fill="rgb(205,27,26)" rx="2" ry="2" />
<text  x="44.18" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="80.8" y="325" width="0.2" height="15.0" fill="rgb(226,15,7)" rx="2" ry="2" />
<text  x="83.78" y="335.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (3 samples, 0.06%)</title><rect x="395.7" y="389" width="0.7" height="15.0" fill="rgb(233,99,7)" rx="2" ry="2" />
<text  x="398.75" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (7 samples, 0.14%)</title><rect x="819.0" y="549" width="1.6" height="15.0" fill="rgb(221,9,5)" rx="2" ry="2" />
<text  x="822.05" y="559.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1032.5" y="453" width="0.2" height="15.0" fill="rgb(220,167,54)" rx="2" ry="2" />
<text  x="1035.51" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (24 samples, 0.46%)</title><rect x="1016.4" y="421" width="5.4" height="15.0" fill="rgb(218,74,19)" rx="2" ry="2" />
<text  x="1019.36" y="431.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt; &gt; (2 samples, 0.04%)</title><rect x="813.6" y="533" width="0.4" height="15.0" fill="rgb(229,203,1)" rx="2" ry="2" />
<text  x="816.58" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (4 samples, 0.08%)</title><rect x="238.5" y="277" width="0.9" height="15.0" fill="rgb(239,77,2)" rx="2" ry="2" />
<text  x="241.49" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::shared_ptr_count_for&lt;cql3::metadata&amp;&gt; (1 samples, 0.02%)</title><rect x="660.4" y="661" width="0.2" height="15.0" fill="rgb(210,76,15)" rx="2" ry="2" />
<text  x="663.42" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (5 samples, 0.10%)</title><rect x="743.9" y="533" width="1.2" height="15.0" fill="rgb(248,214,0)" rx="2" ry="2" />
<text  x="746.94" y="543.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="254.9" y="325" width="0.2" height="15.0" fill="rgb(224,54,3)" rx="2" ry="2" />
<text  x="257.88" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="908.7" y="501" width="0.2" height="15.0" fill="rgb(243,196,31)" rx="2" ry="2" />
<text  x="911.71" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="83.5" y="645" width="0.2" height="15.0" fill="rgb(224,173,18)" rx="2" ry="2" />
<text  x="86.51" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="20.0" y="453" width="0.2" height="15.0" fill="rgb(242,115,39)" rx="2" ry="2" />
<text  x="23.01" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="38.2" y="437" width="0.5" height="15.0" fill="rgb(230,26,42)" rx="2" ry="2" />
<text  x="41.22" y="447.5" ></text>
</g>
<g >
<title>__vfprintf_internal (2 samples, 0.04%)</title><rect x="79.9" y="821" width="0.4" height="15.0" fill="rgb(211,195,37)" rx="2" ry="2" />
<text  x="82.87" y="831.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="91.5" y="693" width="0.2" height="15.0" fill="rgb(227,151,44)" rx="2" ry="2" />
<text  x="94.47" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1107.4" y="613" width="0.2" height="15.0" fill="rgb(211,3,39)" rx="2" ry="2" />
<text  x="1110.39" y="623.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (16 samples, 0.31%)</title><rect x="371.6" y="373" width="3.7" height="15.0" fill="rgb(205,216,18)" rx="2" ry="2" />
<text  x="374.62" y="383.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="77.1" y="485" width="0.3" height="15.0" fill="rgb(213,217,35)" rx="2" ry="2" />
<text  x="80.14" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (13 samples, 0.25%)</title><rect x="94.4" y="677" width="3.0" height="15.0" fill="rgb(228,147,13)" rx="2" ry="2" />
<text  x="97.43" y="687.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (7 samples, 0.14%)</title><rect x="937.8" y="565" width="1.6" height="15.0" fill="rgb(207,164,41)" rx="2" ry="2" />
<text  x="940.84" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (4 samples, 0.08%)</title><rect x="44.8" y="453" width="0.9" height="15.0" fill="rgb(230,110,25)" rx="2" ry="2" />
<text  x="47.82" y="463.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (2 samples, 0.04%)</title><rect x="60.1" y="469" width="0.4" height="15.0" fill="rgb(219,12,46)" rx="2" ry="2" />
<text  x="63.07" y="479.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_28has_slice_or_needs_filteringERKNS2_10expressionEEUlRKNS2_15binary_operatorEE_EEPS8_S6_T_EUlS9_E_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_8constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_11conjunctionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_12column_valueEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_5tokenEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13function_callEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4castEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_15field_selectionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4nullEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13bind_variableEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_16untyped_constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_17tuple_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_22collection_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSI_S7_SM_SQ_SU_SY_S12_S16_S1A_S1E_S1I_S1M_SE_S1Q_S1U_S1Y_EEEENSt13invoke_resultISC_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSC_DpOS28_ (1 samples, 0.02%)</title><rect x="954.2" y="581" width="0.3" height="15.0" fill="rgb(249,10,18)" rx="2" ry="2" />
<text  x="957.23" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="10.2" y="741" width="0.3" height="15.0" fill="rgb(237,150,49)" rx="2" ry="2" />
<text  x="13.23" y="751.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%)</title><rect x="787.9" y="485" width="1.6" height="15.0" fill="rgb(246,5,44)" rx="2" ry="2" />
<text  x="790.87" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (457 samples, 8.81%)</title><rect x="445.1" y="581" width="104.0" height="15.0" fill="rgb(213,133,12)" rx="2" ry="2" />
<text  x="448.13" y="591.5" >std::_Functi..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="986.1" y="549" width="0.2" height="15.0" fill="rgb(215,77,8)" rx="2" ry="2" />
<text  x="989.09" y="559.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (7 samples, 0.14%)</title><rect x="553.7" y="581" width="1.6" height="15.0" fill="rgb(228,112,50)" rx="2" ry="2" />
<text  x="556.69" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier&gt;::~shared_ptr_count_for (2 samples, 0.04%)</title><rect x="72.1" y="645" width="0.5" height="15.0" fill="rgb(223,88,39)" rx="2" ry="2" />
<text  x="75.13" y="655.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%)</title><rect x="702.1" y="661" width="0.2" height="15.0" fill="rgb(235,148,32)" rx="2" ry="2" />
<text  x="705.07" y="671.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="84.9" y="725" width="0.2" height="15.0" fill="rgb(212,209,44)" rx="2" ry="2" />
<text  x="87.87" y="735.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="691.6" y="581" width="0.2" height="15.0" fill="rgb(220,114,21)" rx="2" ry="2" />
<text  x="694.60" y="591.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="79.0" y="565" width="0.2" height="15.0" fill="rgb(216,68,8)" rx="2" ry="2" />
<text  x="81.96" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="48.2" y="469" width="0.3" height="15.0" fill="rgb(220,75,27)" rx="2" ry="2" />
<text  x="51.23" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%)</title><rect x="689.6" y="645" width="0.6" height="15.0" fill="rgb(206,180,45)" rx="2" ry="2" />
<text  x="692.55" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="698.0" y="661" width="0.2" height="15.0" fill="rgb(217,210,6)" rx="2" ry="2" />
<text  x="700.97" y="671.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (2 samples, 0.04%)</title><rect x="451.3" y="549" width="0.4" height="15.0" fill="rgb(231,201,29)" rx="2" ry="2" />
<text  x="454.28" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="764.7" y="581" width="0.2" height="15.0" fill="rgb(248,79,10)" rx="2" ry="2" />
<text  x="767.65" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="50.3" y="421" width="0.2" height="15.0" fill="rgb(233,174,48)" rx="2" ry="2" />
<text  x="53.28" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="1089.0" y="597" width="0.2" height="15.0" fill="rgb(249,219,25)" rx="2" ry="2" />
<text  x="1091.95" y="607.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (20 samples, 0.39%)</title><rect x="696.2" y="677" width="4.5" height="15.0" fill="rgb(224,36,41)" rx="2" ry="2" />
<text  x="699.15" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="681.6" y="645" width="0.7" height="15.0" fill="rgb(225,77,27)" rx="2" ry="2" />
<text  x="684.59" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="269.0" y="437" width="0.7" height="15.0" fill="rgb(210,208,28)" rx="2" ry="2" />
<text  x="271.99" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1087.1" y="549" width="0.3" height="15.0" fill="rgb(244,223,43)" rx="2" ry="2" />
<text  x="1090.13" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (3 samples, 0.06%)</title><rect x="205.7" y="405" width="0.7" height="15.0" fill="rgb(245,223,1)" rx="2" ry="2" />
<text  x="208.72" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="44.1" y="357" width="0.3" height="15.0" fill="rgb(249,130,41)" rx="2" ry="2" />
<text  x="47.14" y="367.5" ></text>
</g>
<g >
<title>row::apply_monotonically (3 samples, 0.06%)</title><rect x="873.2" y="501" width="0.7" height="15.0" fill="rgb(240,80,49)" rx="2" ry="2" />
<text  x="876.21" y="511.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="41.0" y="357" width="0.2" height="15.0" fill="rgb(241,129,1)" rx="2" ry="2" />
<text  x="43.95" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="55.5" y="421" width="0.2" height="15.0" fill="rgb(219,105,23)" rx="2" ry="2" />
<text  x="58.52" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (1 samples, 0.02%)</title><rect x="467.0" y="485" width="0.2" height="15.0" fill="rgb(238,135,41)" rx="2" ry="2" />
<text  x="469.98" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="631.5" y="629" width="0.2" height="15.0" fill="rgb(229,72,32)" rx="2" ry="2" />
<text  x="634.52" y="639.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%)</title><rect x="733.0" y="517" width="0.2" height="15.0" fill="rgb(212,31,33)" rx="2" ry="2" />
<text  x="736.02" y="527.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (2 samples, 0.04%)</title><rect x="1082.6" y="517" width="0.4" height="15.0" fill="rgb(225,152,12)" rx="2" ry="2" />
<text  x="1085.58" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::validate (1 samples, 0.02%)</title><rect x="19.6" y="677" width="0.2" height="15.0" fill="rgb(237,69,1)" rx="2" ry="2" />
<text  x="22.56" y="687.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="1129.2" y="229" width="0.3" height="15.0" fill="rgb(215,174,48)" rx="2" ry="2" />
<text  x="1132.24" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (8 samples, 0.15%)</title><rect x="687.0" y="677" width="1.9" height="15.0" fill="rgb(205,19,17)" rx="2" ry="2" />
<text  x="690.05" y="687.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (1 samples, 0.02%)</title><rect x="183.2" y="437" width="0.2" height="15.0" fill="rgb(216,118,37)" rx="2" ry="2" />
<text  x="186.19" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="17.3" y="437" width="0.2" height="15.0" fill="rgb(227,122,41)" rx="2" ry="2" />
<text  x="20.28" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (5 samples, 0.10%)</title><rect x="954.9" y="597" width="1.1" height="15.0" fill="rgb(217,17,12)" rx="2" ry="2" />
<text  x="957.91" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="40.7" y="341" width="0.3" height="15.0" fill="rgb(222,21,22)" rx="2" ry="2" />
<text  x="43.72" y="351.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="49.1" y="357" width="0.3" height="15.0" fill="rgb(248,110,30)" rx="2" ry="2" />
<text  x="52.14" y="367.5" ></text>
</g>
<g >
<title>dht::tri_compare (5 samples, 0.10%)</title><rect x="1065.5" y="453" width="1.2" height="15.0" fill="rgb(237,99,14)" rx="2" ry="2" />
<text  x="1068.51" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="944.2" y="581" width="0.2" height="15.0" fill="rgb(235,130,40)" rx="2" ry="2" />
<text  x="947.21" y="591.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="917.8" y="533" width="0.7" height="15.0" fill="rgb(214,120,39)" rx="2" ry="2" />
<text  x="920.81" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1055.3" y="501" width="0.2" height="15.0" fill="rgb(210,92,27)" rx="2" ry="2" />
<text  x="1058.27" y="511.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (1 samples, 0.02%)</title><rect x="83.1" y="597" width="0.2" height="15.0" fill="rgb(213,166,36)" rx="2" ry="2" />
<text  x="86.05" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (4 samples, 0.08%)</title><rect x="648.1" y="693" width="0.9" height="15.0" fill="rgb(206,130,11)" rx="2" ry="2" />
<text  x="651.13" y="703.5" ></text>
</g>
<g >
<title>syscall-0 (3 samples, 0.06%)</title><rect x="1189.3" y="853" width="0.7" height="15.0" fill="rgb(232,167,28)" rx="2" ry="2" />
<text  x="1192.32" y="863.5" ></text>
</g>
<g >
<title>seastar::memory::configure (1 samples, 0.02%)</title><rect x="1166.6" y="741" width="0.2" height="15.0" fill="rgb(248,25,33)" rx="2" ry="2" />
<text  x="1169.56" y="751.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="1034.3" y="453" width="2.1" height="15.0" fill="rgb(223,181,48)" rx="2" ry="2" />
<text  x="1037.34" y="463.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%)</title><rect x="873.7" y="437" width="0.2" height="15.0" fill="rgb(224,32,41)" rx="2" ry="2" />
<text  x="876.66" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="239.4" y="325" width="0.5" height="15.0" fill="rgb(226,54,49)" rx="2" ry="2" />
<text  x="242.40" y="335.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (1 samples, 0.02%)</title><rect x="745.1" y="565" width="0.2" height="15.0" fill="rgb(244,39,34)" rx="2" ry="2" />
<text  x="748.08" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="469.9" y="501" width="0.3" height="15.0" fill="rgb(249,129,9)" rx="2" ry="2" />
<text  x="472.94" y="511.5" ></text>
</g>
<g >
<title>dht::shard_of (4 samples, 0.08%)</title><rect x="1002.5" y="485" width="0.9" height="15.0" fill="rgb(212,151,44)" rx="2" ry="2" />
<text  x="1005.47" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%)</title><rect x="38.7" y="565" width="0.2" height="15.0" fill="rgb(211,157,33)" rx="2" ry="2" />
<text  x="41.68" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="67.4" y="549" width="0.2" height="15.0" fill="rgb(254,164,43)" rx="2" ry="2" />
<text  x="70.35" y="559.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="853.4" y="613" width="0.2" height="15.0" fill="rgb(233,77,52)" rx="2" ry="2" />
<text  x="856.41" y="623.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="40.3" y="533" width="0.2" height="15.0" fill="rgb(241,204,42)" rx="2" ry="2" />
<text  x="43.27" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (3 samples, 0.06%)</title><rect x="847.5" y="581" width="0.7" height="15.0" fill="rgb(223,152,4)" rx="2" ry="2" />
<text  x="850.49" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="950.8" y="533" width="0.7" height="15.0" fill="rgb(223,9,15)" rx="2" ry="2" />
<text  x="953.81" y="543.5" ></text>
</g>
<g >
<title>std::__addressof&lt;char&gt; (1 samples, 0.02%)</title><rect x="25.0" y="341" width="0.2" height="15.0" fill="rgb(235,185,46)" rx="2" ry="2" />
<text  x="28.02" y="351.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (14 samples, 0.27%)</title><rect x="854.8" y="645" width="3.2" height="15.0" fill="rgb(233,62,33)" rx="2" ry="2" />
<text  x="857.78" y="655.5" ></text>
</g>
<g >
<title>siglongjmp@GLIBC_2.2.5 (2 samples, 0.04%)</title><rect x="639.3" y="693" width="0.4" height="15.0" fill="rgb(239,60,52)" rx="2" ry="2" />
<text  x="642.26" y="703.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (1 samples, 0.02%)</title><rect x="697.7" y="661" width="0.3" height="15.0" fill="rgb(236,202,3)" rx="2" ry="2" />
<text  x="700.75" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="431.9" y="485" width="0.3" height="15.0" fill="rgb(220,71,20)" rx="2" ry="2" />
<text  x="434.93" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="79.0" y="101" width="0.2" height="15.0" fill="rgb(251,103,46)" rx="2" ry="2" />
<text  x="81.96" y="111.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (4 samples, 0.08%)</title><rect x="657.2" y="645" width="0.9" height="15.0" fill="rgb(228,226,42)" rx="2" ry="2" />
<text  x="660.24" y="655.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (5 samples, 0.10%)</title><rect x="16.6" y="773" width="1.1" height="15.0" fill="rgb(229,145,42)" rx="2" ry="2" />
<text  x="19.60" y="783.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (13 samples, 0.25%)</title><rect x="675.2" y="693" width="3.0" height="15.0" fill="rgb(227,100,24)" rx="2" ry="2" />
<text  x="678.22" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1087.4" y="565" width="0.2" height="15.0" fill="rgb(211,201,14)" rx="2" ry="2" />
<text  x="1090.36" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="1050.3" y="501" width="0.2" height="15.0" fill="rgb(221,82,32)" rx="2" ry="2" />
<text  x="1053.27" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (5 samples, 0.10%)</title><rect x="53.0" y="485" width="1.2" height="15.0" fill="rgb(254,225,37)" rx="2" ry="2" />
<text  x="56.01" y="495.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="853.0" y="549" width="0.4" height="15.0" fill="rgb(234,154,20)" rx="2" ry="2" />
<text  x="855.95" y="559.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="197.1" y="421" width="1.8" height="15.0" fill="rgb(217,174,46)" rx="2" ry="2" />
<text  x="200.07" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::alter_service_level_statement, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="64.2" y="565" width="0.2" height="15.0" fill="rgb(212,107,12)" rx="2" ry="2" />
<text  x="67.16" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (6 samples, 0.12%)</title><rect x="1045.7" y="501" width="1.4" height="15.0" fill="rgb(218,143,40)" rx="2" ry="2" />
<text  x="1048.71" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (36 samples, 0.69%)</title><rect x="1117.2" y="565" width="8.2" height="15.0" fill="rgb(212,120,46)" rx="2" ry="2" />
<text  x="1120.17" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="586.7" y="565" width="0.2" height="15.0" fill="rgb(218,99,39)" rx="2" ry="2" />
<text  x="589.69" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, index_metadata&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, index_metadata&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="16.6" y="421" width="0.2" height="15.0" fill="rgb(244,122,13)" rx="2" ry="2" />
<text  x="19.60" y="431.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.25%)</title><rect x="895.7" y="517" width="3.0" height="15.0" fill="rgb(207,154,33)" rx="2" ry="2" />
<text  x="898.74" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (1 samples, 0.02%)</title><rect x="970.8" y="581" width="0.3" height="15.0" fill="rgb(237,29,22)" rx="2" ry="2" />
<text  x="973.84" y="591.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (4 samples, 0.08%)</title><rect x="581.2" y="549" width="0.9" height="15.0" fill="rgb(226,66,20)" rx="2" ry="2" />
<text  x="584.22" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%)</title><rect x="971.5" y="437" width="0.3" height="15.0" fill="rgb(208,184,22)" rx="2" ry="2" />
<text  x="974.52" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="559.6" y="517" width="0.7" height="15.0" fill="rgb(233,175,21)" rx="2" ry="2" />
<text  x="562.60" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="529.8" y="501" width="0.2" height="15.0" fill="rgb(229,17,48)" rx="2" ry="2" />
<text  x="532.79" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="678.2" y="693" width="0.2" height="15.0" fill="rgb(252,217,7)" rx="2" ry="2" />
<text  x="681.17" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (3 samples, 0.06%)</title><rect x="189.8" y="453" width="0.7" height="15.0" fill="rgb(217,60,54)" rx="2" ry="2" />
<text  x="192.79" y="463.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (1 samples, 0.02%)</title><rect x="601.3" y="645" width="0.2" height="15.0" fill="rgb(239,201,3)" rx="2" ry="2" />
<text  x="604.25" y="655.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (5 samples, 0.10%)</title><rect x="599.2" y="613" width="1.1" height="15.0" fill="rgb(232,217,18)" rx="2" ry="2" />
<text  x="602.20" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%)</title><rect x="691.8" y="469" width="0.3" height="15.0" fill="rgb(208,201,34)" rx="2" ry="2" />
<text  x="694.83" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation::data, std::default_delete&lt;mutation::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1131.3" y="533" width="0.2" height="15.0" fill="rgb(235,62,33)" rx="2" ry="2" />
<text  x="1134.28" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="447.6" y="565" width="0.3" height="15.0" fill="rgb(225,44,51)" rx="2" ry="2" />
<text  x="450.64" y="575.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="821.1" y="581" width="0.7" height="15.0" fill="rgb(221,62,18)" rx="2" ry="2" />
<text  x="824.09" y="591.5" ></text>
</g>
<g >
<title>all (5,185 samples, 100%)</title><rect x="10.0" y="869" width="1180.0" height="15.0" fill="rgb(215,228,6)" rx="2" ry="2" />
<text  x="13.00" y="879.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;unsigned int&gt;::_Rb_tree_const_iterator (1 samples, 0.02%)</title><rect x="37.3" y="501" width="0.2" height="15.0" fill="rgb(247,159,10)" rx="2" ry="2" />
<text  x="40.31" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (4 samples, 0.08%)</title><rect x="736.2" y="597" width="0.9" height="15.0" fill="rgb(245,11,5)" rx="2" ry="2" />
<text  x="739.21" y="607.5" ></text>
</g>
<g >
<title>table::table (1 samples, 0.02%)</title><rect x="104.4" y="645" width="0.3" height="15.0" fill="rgb(214,14,29)" rx="2" ry="2" />
<text  x="107.45" y="655.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="249.2" y="373" width="0.2" height="15.0" fill="rgb(230,19,45)" rx="2" ry="2" />
<text  x="252.19" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="834.3" y="629" width="0.2" height="15.0" fill="rgb(244,11,20)" rx="2" ry="2" />
<text  x="837.29" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="545.7" y="437" width="0.2" height="15.0" fill="rgb(237,74,37)" rx="2" ry="2" />
<text  x="548.72" y="447.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="77.4" y="629" width="0.2" height="15.0" fill="rgb(215,94,0)" rx="2" ry="2" />
<text  x="80.36" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_function_statement, std::default_delete&lt;cql3::statements::create_function_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="64.8" y="597" width="0.3" height="15.0" fill="rgb(252,90,29)" rx="2" ry="2" />
<text  x="67.85" y="607.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::invoke_on_all&lt;single_node_cql_env::prepare (1 samples, 0.02%)</title><rect x="79.0" y="725" width="0.2" height="15.0" fill="rgb(251,28,22)" rx="2" ry="2" />
<text  x="81.96" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="460.2" y="453" width="0.4" height="15.0" fill="rgb(220,15,39)" rx="2" ry="2" />
<text  x="463.15" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="845.2" y="597" width="0.2" height="15.0" fill="rgb(208,107,18)" rx="2" ry="2" />
<text  x="848.22" y="607.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="76.7" y="453" width="0.4" height="15.0" fill="rgb(206,99,43)" rx="2" ry="2" />
<text  x="79.68" y="463.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (1 samples, 0.02%)</title><rect x="129.7" y="629" width="0.2" height="15.0" fill="rgb(216,61,10)" rx="2" ry="2" />
<text  x="132.71" y="639.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (5 samples, 0.10%)</title><rect x="736.0" y="613" width="1.1" height="15.0" fill="rgb(232,40,17)" rx="2" ry="2" />
<text  x="738.98" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::__uniq_ptr_impl (2 samples, 0.04%)</title><rect x="53.2" y="421" width="0.5" height="15.0" fill="rgb(225,142,37)" rx="2" ry="2" />
<text  x="56.24" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="420.8" y="421" width="0.2" height="15.0" fill="rgb(246,142,19)" rx="2" ry="2" />
<text  x="423.78" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (3 samples, 0.06%)</title><rect x="1141.5" y="677" width="0.7" height="15.0" fill="rgb(222,165,47)" rx="2" ry="2" />
<text  x="1144.53" y="687.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::range_or_slice_eq_null (4 samples, 0.08%)</title><rect x="868.4" y="597" width="0.9" height="15.0" fill="rgb(221,9,3)" rx="2" ry="2" />
<text  x="871.43" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="59.2" y="517" width="0.2" height="15.0" fill="rgb(231,132,18)" rx="2" ry="2" />
<text  x="62.16" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (7 samples, 0.14%)</title><rect x="292.4" y="533" width="1.6" height="15.0" fill="rgb(219,97,36)" rx="2" ry="2" />
<text  x="295.43" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1023.2" y="437" width="0.2" height="15.0" fill="rgb(237,19,40)" rx="2" ry="2" />
<text  x="1026.18" y="447.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (8 samples, 0.15%)</title><rect x="256.9" y="373" width="1.8" height="15.0" fill="rgb(248,25,35)" rx="2" ry="2" />
<text  x="259.92" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (1 samples, 0.02%)</title><rect x="658.4" y="677" width="0.2" height="15.0" fill="rgb(235,177,49)" rx="2" ry="2" />
<text  x="661.37" y="687.5" ></text>
</g>
<g >
<title>__start_context (2 samples, 0.04%)</title><rect x="1131.7" y="533" width="0.5" height="15.0" fill="rgb(216,109,43)" rx="2" ry="2" />
<text  x="1134.74" y="543.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="507.0" y="501" width="0.3" height="15.0" fill="rgb(209,138,18)" rx="2" ry="2" />
<text  x="510.03" y="511.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (13 samples, 0.25%)</title><rect x="1119.5" y="453" width="2.9" height="15.0" fill="rgb(208,145,47)" rx="2" ry="2" />
<text  x="1122.45" y="463.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="80.8" y="805" width="0.2" height="15.0" fill="rgb(206,13,54)" rx="2" ry="2" />
<text  x="83.78" y="815.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="266.9" y="405" width="0.3" height="15.0" fill="rgb(210,224,3)" rx="2" ry="2" />
<text  x="269.94" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="184.8" y="469" width="0.2" height="15.0" fill="rgb(239,37,35)" rx="2" ry="2" />
<text  x="187.78" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (5 samples, 0.10%)</title><rect x="956.7" y="613" width="1.2" height="15.0" fill="rgb(207,40,28)" rx="2" ry="2" />
<text  x="959.73" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="342.5" y="389" width="0.2" height="15.0" fill="rgb(207,64,34)" rx="2" ry="2" />
<text  x="345.49" y="399.5" ></text>
</g>
<g >
<title>sstables::sstable::do_write_simple (1 samples, 0.02%)</title><rect x="10.7" y="549" width="0.2" height="15.0" fill="rgb(243,52,52)" rx="2" ry="2" />
<text  x="13.68" y="559.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (7 samples, 0.14%)</title><rect x="872.3" y="517" width="1.6" height="15.0" fill="rgb(239,217,19)" rx="2" ry="2" />
<text  x="875.30" y="527.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (13 samples, 0.25%)</title><rect x="407.6" y="357" width="2.9" height="15.0" fill="rgb(253,43,51)" rx="2" ry="2" />
<text  x="410.58" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="64.6" y="581" width="0.2" height="15.0" fill="rgb(227,2,26)" rx="2" ry="2" />
<text  x="67.62" y="591.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (1 samples, 0.02%)</title><rect x="103.1" y="629" width="0.2" height="15.0" fill="rgb(236,143,48)" rx="2" ry="2" />
<text  x="106.08" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (9 samples, 0.17%)</title><rect x="771.0" y="581" width="2.1" height="15.0" fill="rgb(220,92,25)" rx="2" ry="2" />
<text  x="774.03" y="591.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="79.0" y="645" width="0.2" height="15.0" fill="rgb(236,14,19)" rx="2" ry="2" />
<text  x="81.96" y="655.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (2 samples, 0.04%)</title><rect x="357.7" y="389" width="0.5" height="15.0" fill="rgb(223,46,41)" rx="2" ry="2" />
<text  x="360.74" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mE (1 samples, 0.02%)</title><rect x="32.8" y="453" width="0.2" height="15.0" fill="rgb(225,117,51)" rx="2" ry="2" />
<text  x="35.76" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (15 samples, 0.29%)</title><rect x="871.8" y="597" width="3.5" height="15.0" fill="rgb(237,30,9)" rx="2" ry="2" />
<text  x="874.84" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (4 samples, 0.08%)</title><rect x="1026.8" y="453" width="0.9" height="15.0" fill="rgb(243,188,12)" rx="2" ry="2" />
<text  x="1029.83" y="463.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (15 samples, 0.29%)</title><rect x="121.1" y="613" width="3.4" height="15.0" fill="rgb(219,76,10)" rx="2" ry="2" />
<text  x="124.06" y="623.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="804.5" y="293" width="0.2" height="15.0" fill="rgb(249,152,34)" rx="2" ry="2" />
<text  x="807.48" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (1 samples, 0.02%)</title><rect x="24.1" y="373" width="0.2" height="15.0" fill="rgb(214,23,34)" rx="2" ry="2" />
<text  x="27.11" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="690.5" y="645" width="0.6" height="15.0" fill="rgb(224,127,8)" rx="2" ry="2" />
<text  x="693.46" y="655.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="67.4" y="565" width="0.2" height="15.0" fill="rgb(207,176,23)" rx="2" ry="2" />
<text  x="70.35" y="575.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::index_impl (1 samples, 0.02%)</title><rect x="28.2" y="437" width="0.2" height="15.0" fill="rgb(233,22,13)" rx="2" ry="2" />
<text  x="31.21" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (5 samples, 0.10%)</title><rect x="773.5" y="565" width="1.2" height="15.0" fill="rgb(234,86,7)" rx="2" ry="2" />
<text  x="776.53" y="575.5" ></text>
</g>
<g >
<title>auth::resource::parent (10 samples, 0.19%)</title><rect x="783.3" y="533" width="2.3" height="15.0" fill="rgb(205,22,23)" rx="2" ry="2" />
<text  x="786.32" y="543.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (9 samples, 0.17%)</title><rect x="468.1" y="517" width="2.1" height="15.0" fill="rgb(246,26,50)" rx="2" ry="2" />
<text  x="471.12" y="527.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (33 samples, 0.64%)</title><rect x="553.0" y="629" width="7.5" height="15.0" fill="rgb(222,105,34)" rx="2" ry="2" />
<text  x="556.00" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="1110.3" y="629" width="0.3" height="15.0" fill="rgb(244,216,1)" rx="2" ry="2" />
<text  x="1113.35" y="639.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (7 samples, 0.14%)</title><rect x="192.3" y="405" width="1.6" height="15.0" fill="rgb(205,215,7)" rx="2" ry="2" />
<text  x="195.29" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="692.1" y="501" width="0.2" height="15.0" fill="rgb(229,150,20)" rx="2" ry="2" />
<text  x="695.06" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="38.9" y="501" width="0.2" height="15.0" fill="rgb(209,12,34)" rx="2" ry="2" />
<text  x="41.90" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (34 samples, 0.66%)</title><rect x="797.7" y="405" width="7.7" height="15.0" fill="rgb(250,181,45)" rx="2" ry="2" />
<text  x="800.65" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="872.5" y="421" width="0.3" height="15.0" fill="rgb(240,105,2)" rx="2" ry="2" />
<text  x="875.53" y="431.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (7 samples, 0.14%)</title><rect x="862.7" y="661" width="1.6" height="15.0" fill="rgb(231,70,30)" rx="2" ry="2" />
<text  x="865.74" y="671.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (25 samples, 0.48%)</title><rect x="695.0" y="693" width="5.7" height="15.0" fill="rgb(245,1,27)" rx="2" ry="2" />
<text  x="698.01" y="703.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1123.3" y="501" width="0.2" height="15.0" fill="rgb(240,109,17)" rx="2" ry="2" />
<text  x="1126.32" y="511.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%)</title><rect x="1038.9" y="485" width="0.2" height="15.0" fill="rgb(247,84,19)" rx="2" ry="2" />
<text  x="1041.89" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1025.5" y="389" width="0.2" height="15.0" fill="rgb(229,97,29)" rx="2" ry="2" />
<text  x="1028.46" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2 samples, 0.04%)</title><rect x="25.0" y="389" width="0.5" height="15.0" fill="rgb(242,153,34)" rx="2" ry="2" />
<text  x="28.02" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1144.9" y="629" width="0.3" height="15.0" fill="rgb(205,221,37)" rx="2" ry="2" />
<text  x="1147.94" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (7 samples, 0.14%)</title><rect x="656.8" y="661" width="1.6" height="15.0" fill="rgb(217,172,0)" rx="2" ry="2" />
<text  x="659.78" y="671.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (1 samples, 0.02%)</title><rect x="103.8" y="645" width="0.2" height="15.0" fill="rgb(228,47,29)" rx="2" ry="2" />
<text  x="106.76" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="41.2" y="405" width="0.4" height="15.0" fill="rgb(244,49,7)" rx="2" ry="2" />
<text  x="44.18" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (1 samples, 0.02%)</title><rect x="69.2" y="565" width="0.2" height="15.0" fill="rgb(250,226,16)" rx="2" ry="2" />
<text  x="72.17" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="58.5" y="501" width="0.2" height="15.0" fill="rgb(247,74,28)" rx="2" ry="2" />
<text  x="61.47" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="715.7" y="709" width="0.3" height="15.0" fill="rgb(253,58,45)" rx="2" ry="2" />
<text  x="718.72" y="719.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="951.3" y="517" width="0.2" height="15.0" fill="rgb(250,39,38)" rx="2" ry="2" />
<text  x="954.27" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="866.6" y="677" width="0.2" height="15.0" fill="rgb(218,180,45)" rx="2" ry="2" />
<text  x="869.61" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="469.3" y="501" width="0.2" height="15.0" fill="rgb(241,72,40)" rx="2" ry="2" />
<text  x="472.26" y="511.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="249.6" y="389" width="0.3" height="15.0" fill="rgb(211,66,41)" rx="2" ry="2" />
<text  x="252.64" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="79.0" y="149" width="0.2" height="15.0" fill="rgb(250,76,53)" rx="2" ry="2" />
<text  x="81.96" y="159.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="22.5" y="437" width="0.2" height="15.0" fill="rgb(205,183,39)" rx="2" ry="2" />
<text  x="25.52" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (18 samples, 0.35%)</title><rect x="1047.3" y="517" width="4.1" height="15.0" fill="rgb(228,169,53)" rx="2" ry="2" />
<text  x="1050.31" y="527.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.15%)</title><rect x="501.8" y="405" width="1.8" height="15.0" fill="rgb(224,122,50)" rx="2" ry="2" />
<text  x="504.80" y="415.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%)</title><rect x="103.5" y="613" width="0.3" height="15.0" fill="rgb(218,94,51)" rx="2" ry="2" />
<text  x="106.54" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (2 samples, 0.04%)</title><rect x="907.6" y="485" width="0.4" height="15.0" fill="rgb(207,26,17)" rx="2" ry="2" />
<text  x="910.57" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::pop_back (1 samples, 0.02%)</title><rect x="52.3" y="453" width="0.3" height="15.0" fill="rgb(239,23,44)" rx="2" ry="2" />
<text  x="55.33" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cfName (1 samples, 0.02%)</title><rect x="40.3" y="549" width="0.2" height="15.0" fill="rgb(232,138,53)" rx="2" ry="2" />
<text  x="43.27" y="559.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6 samples, 0.12%)</title><rect x="902.8" y="469" width="1.4" height="15.0" fill="rgb(216,111,35)" rx="2" ry="2" />
<text  x="905.79" y="479.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%)</title><rect x="173.9" y="485" width="0.2" height="15.0" fill="rgb(254,63,45)" rx="2" ry="2" />
<text  x="176.86" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="754.4" y="613" width="0.5" height="15.0" fill="rgb(241,16,8)" rx="2" ry="2" />
<text  x="757.41" y="623.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="277.9" y="405" width="0.2" height="15.0" fill="rgb(215,15,9)" rx="2" ry="2" />
<text  x="280.86" y="415.5" ></text>
</g>
<g >
<title>table::as_mutation_source (8 samples, 0.15%)</title><rect x="629.9" y="645" width="1.8" height="15.0" fill="rgb(210,68,32)" rx="2" ry="2" />
<text  x="632.93" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;checked_file_impl&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="10.7" y="485" width="0.2" height="15.0" fill="rgb(252,149,8)" rx="2" ry="2" />
<text  x="13.68" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::resize (1 samples, 0.02%)</title><rect x="1166.6" y="725" width="0.2" height="15.0" fill="rgb(211,16,5)" rx="2" ry="2" />
<text  x="1169.56" y="735.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="905.1" y="453" width="0.7" height="15.0" fill="rgb(237,72,20)" rx="2" ry="2" />
<text  x="908.07" y="463.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="103.3" y="517" width="0.2" height="15.0" fill="rgb(209,132,5)" rx="2" ry="2" />
<text  x="106.31" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (20 samples, 0.39%)</title><rect x="747.1" y="549" width="4.6" height="15.0" fill="rgb(232,188,17)" rx="2" ry="2" />
<text  x="750.13" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="28.0" y="437" width="0.2" height="15.0" fill="rgb(233,164,39)" rx="2" ry="2" />
<text  x="30.98" y="447.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%)</title><rect x="311.5" y="517" width="0.3" height="15.0" fill="rgb(246,144,14)" rx="2" ry="2" />
<text  x="314.54" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="679.8" y="677" width="0.2" height="15.0" fill="rgb(212,78,54)" rx="2" ry="2" />
<text  x="682.77" y="687.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="40.3" y="373" width="0.2" height="15.0" fill="rgb(253,20,54)" rx="2" ry="2" />
<text  x="43.27" y="383.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="925.8" y="565" width="0.7" height="15.0" fill="rgb(221,154,32)" rx="2" ry="2" />
<text  x="928.78" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (4 samples, 0.08%)</title><rect x="661.8" y="661" width="0.9" height="15.0" fill="rgb(247,47,32)" rx="2" ry="2" />
<text  x="664.79" y="671.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.04%)</title><rect x="605.8" y="581" width="0.5" height="15.0" fill="rgb(237,82,47)" rx="2" ry="2" />
<text  x="608.80" y="591.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (6 samples, 0.12%)</title><rect x="419.6" y="437" width="1.4" height="15.0" fill="rgb(224,70,39)" rx="2" ry="2" />
<text  x="422.64" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (11 samples, 0.21%)</title><rect x="520.9" y="421" width="2.5" height="15.0" fill="rgb(233,124,44)" rx="2" ry="2" />
<text  x="523.92" y="431.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="48.9" y="453" width="0.2" height="15.0" fill="rgb(230,1,13)" rx="2" ry="2" />
<text  x="51.92" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="38.0" y="469" width="0.7" height="15.0" fill="rgb(246,82,27)" rx="2" ry="2" />
<text  x="40.99" y="479.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="44.6" y="325" width="0.2" height="15.0" fill="rgb(254,67,16)" rx="2" ry="2" />
<text  x="47.59" y="335.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="60.1" y="309" width="0.2" height="15.0" fill="rgb(223,193,13)" rx="2" ry="2" />
<text  x="63.07" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="315.6" y="597" width="0.3" height="15.0" fill="rgb(220,151,25)" rx="2" ry="2" />
<text  x="318.64" y="607.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="516.1" y="469" width="0.3" height="15.0" fill="rgb(212,26,43)" rx="2" ry="2" />
<text  x="519.14" y="479.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (4 samples, 0.08%)</title><rect x="266.3" y="421" width="0.9" height="15.0" fill="rgb(245,110,28)" rx="2" ry="2" />
<text  x="269.25" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (19 samples, 0.37%)</title><rect x="260.1" y="437" width="4.3" height="15.0" fill="rgb(246,53,28)" rx="2" ry="2" />
<text  x="263.11" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (64 samples, 1.23%)</title><rect x="43.5" y="549" width="14.5" height="15.0" fill="rgb(216,68,54)" rx="2" ry="2" />
<text  x="46.45" y="559.5" ></text>
</g>
<g >
<title>database::find_schema (2 samples, 0.04%)</title><rect x="73.7" y="629" width="0.5" height="15.0" fill="rgb(244,9,25)" rx="2" ry="2" />
<text  x="76.72" y="639.5" ></text>
</g>
<g >
<title>table::try_flush_memtable_to_sstable (2 samples, 0.04%)</title><rect x="1131.7" y="693" width="0.5" height="15.0" fill="rgb(229,12,50)" rx="2" ry="2" />
<text  x="1134.74" y="703.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="555.7" y="565" width="1.2" height="15.0" fill="rgb(224,45,13)" rx="2" ry="2" />
<text  x="558.74" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="55.5" y="293" width="0.2" height="15.0" fill="rgb(238,81,46)" rx="2" ry="2" />
<text  x="58.52" y="303.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (467 samples, 9.01%)</title><rect x="326.1" y="501" width="106.3" height="15.0" fill="rgb(235,221,19)" rx="2" ry="2" />
<text  x="329.11" y="511.5" >seastar::repe..</text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="839.3" y="597" width="0.2" height="15.0" fill="rgb(209,190,47)" rx="2" ry="2" />
<text  x="842.30" y="607.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (1 samples, 0.02%)</title><rect x="114.0" y="645" width="0.2" height="15.0" fill="rgb(220,26,16)" rx="2" ry="2" />
<text  x="117.00" y="655.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="586.9" y="581" width="0.2" height="15.0" fill="rgb(226,212,35)" rx="2" ry="2" />
<text  x="589.91" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="547.3" y="533" width="0.5" height="15.0" fill="rgb(229,51,51)" rx="2" ry="2" />
<text  x="550.32" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="67.1" y="565" width="0.3" height="15.0" fill="rgb(246,80,1)" rx="2" ry="2" />
<text  x="70.12" y="575.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (3 samples, 0.06%)</title><rect x="103.1" y="693" width="0.7" height="15.0" fill="rgb(224,60,25)" rx="2" ry="2" />
<text  x="106.08" y="703.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (2 samples, 0.04%)</title><rect x="886.6" y="629" width="0.5" height="15.0" fill="rgb(226,25,13)" rx="2" ry="2" />
<text  x="889.64" y="639.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;7ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="277" width="0.3" height="15.0" fill="rgb(211,180,8)" rx="2" ry="2" />
<text  x="62.84" y="287.5" ></text>
</g>
<g >
<title>locator::token_metadata::pending_endpoints_for (2 samples, 0.04%)</title><rect x="1130.4" y="405" width="0.4" height="15.0" fill="rgb(228,91,20)" rx="2" ry="2" />
<text  x="1133.37" y="415.5" ></text>
</g>
<g >
<title>perf_simple_que (5,182 samples, 99.94%)</title><rect x="10.0" y="853" width="1179.3" height="15.0" fill="rgb(230,161,7)" rx="2" ry="2" />
<text  x="13.00" y="863.5" >perf_simple_que</text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (1 samples, 0.02%)</title><rect x="716.2" y="709" width="0.2" height="15.0" fill="rgb(210,5,30)" rx="2" ry="2" />
<text  x="719.18" y="719.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Uninitialized&lt;cql3::expr::untyped_constant, false&gt;::_Uninitialized&lt;cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="165" width="0.3" height="15.0" fill="rgb(232,68,36)" rx="2" ry="2" />
<text  x="62.84" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (1 samples, 0.02%)</title><rect x="146.5" y="613" width="0.3" height="15.0" fill="rgb(227,223,24)" rx="2" ry="2" />
<text  x="149.55" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="666.1" y="693" width="0.2" height="15.0" fill="rgb(223,141,13)" rx="2" ry="2" />
<text  x="669.11" y="703.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="522.7" y="389" width="0.5" height="15.0" fill="rgb(211,66,11)" rx="2" ry="2" />
<text  x="525.74" y="399.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="40.0" y="469" width="0.3" height="15.0" fill="rgb(247,109,46)" rx="2" ry="2" />
<text  x="43.04" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (6 samples, 0.12%)</title><rect x="643.1" y="693" width="1.4" height="15.0" fill="rgb(232,28,17)" rx="2" ry="2" />
<text  x="646.13" y="703.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getCharIndex (1 samples, 0.02%)</title><rect x="28.2" y="453" width="0.2" height="15.0" fill="rgb(208,214,0)" rx="2" ry="2" />
<text  x="31.21" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (9 samples, 0.17%)</title><rect x="391.2" y="405" width="2.0" height="15.0" fill="rgb(220,210,33)" rx="2" ry="2" />
<text  x="394.20" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="409.4" y="341" width="1.1" height="15.0" fill="rgb(210,148,47)" rx="2" ry="2" />
<text  x="412.40" y="351.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (8 samples, 0.15%)</title><rect x="627.9" y="645" width="1.8" height="15.0" fill="rgb(251,146,45)" rx="2" ry="2" />
<text  x="630.88" y="655.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (13 samples, 0.25%)</title><rect x="871.8" y="565" width="3.0" height="15.0" fill="rgb(238,162,0)" rx="2" ry="2" />
<text  x="874.84" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.14%)</title><rect x="858.0" y="629" width="1.6" height="15.0" fill="rgb(250,9,15)" rx="2" ry="2" />
<text  x="860.96" y="639.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="917.1" y="549" width="0.3" height="15.0" fill="rgb(243,64,4)" rx="2" ry="2" />
<text  x="920.13" y="559.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt;&gt; (1 samples, 0.02%)</title><rect x="50.7" y="405" width="0.3" height="15.0" fill="rgb(225,4,42)" rx="2" ry="2" />
<text  x="53.74" y="415.5" ></text>
</g>
<g >
<title>schema::column_at (6 samples, 0.12%)</title><rect x="412.8" y="373" width="1.4" height="15.0" fill="rgb(205,79,33)" rx="2" ry="2" />
<text  x="415.82" y="383.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (1 samples, 0.02%)</title><rect x="418.1" y="437" width="0.2" height="15.0" fill="rgb(229,207,36)" rx="2" ry="2" />
<text  x="421.05" y="447.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%)</title><rect x="237.1" y="293" width="0.3" height="15.0" fill="rgb(224,171,49)" rx="2" ry="2" />
<text  x="240.12" y="303.5" ></text>
</g>
<g >
<title>std::apply&lt;row_cache::do_update (2 samples, 0.04%)</title><rect x="1131.7" y="629" width="0.5" height="15.0" fill="rgb(217,126,40)" rx="2" ry="2" />
<text  x="1134.74" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="324.3" y="453" width="0.2" height="15.0" fill="rgb(237,186,54)" rx="2" ry="2" />
<text  x="327.29" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="858.9" y="613" width="0.7" height="15.0" fill="rgb(228,202,50)" rx="2" ry="2" />
<text  x="861.87" y="623.5" ></text>
</g>
<g >
<title>cql3::prepare_context::bound_variables_size (1 samples, 0.02%)</title><rect x="66.2" y="645" width="0.2" height="15.0" fill="rgb(217,17,14)" rx="2" ry="2" />
<text  x="69.21" y="655.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (2 samples, 0.04%)</title><rect x="748.5" y="517" width="0.5" height="15.0" fill="rgb(212,133,53)" rx="2" ry="2" />
<text  x="751.50" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="772.8" y="565" width="0.3" height="15.0" fill="rgb(251,186,9)" rx="2" ry="2" />
<text  x="775.85" y="575.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (3 samples, 0.06%)</title><rect x="187.7" y="469" width="0.7" height="15.0" fill="rgb(226,96,27)" rx="2" ry="2" />
<text  x="190.74" y="479.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (74 samples, 1.43%)</title><rect x="216.9" y="325" width="16.8" height="15.0" fill="rgb(217,47,47)" rx="2" ry="2" />
<text  x="219.87" y="335.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (52 samples, 1.00%)</title><rect x="333.8" y="421" width="11.9" height="15.0" fill="rgb(213,131,17)" rx="2" ry="2" />
<text  x="336.85" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (1 samples, 0.02%)</title><rect x="880.3" y="661" width="0.2" height="15.0" fill="rgb(208,13,24)" rx="2" ry="2" />
<text  x="883.26" y="671.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (1 samples, 0.02%)</title><rect x="22.1" y="549" width="0.2" height="15.0" fill="rgb(205,119,4)" rx="2" ry="2" />
<text  x="25.06" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="326.8" y="469" width="0.2" height="15.0" fill="rgb(206,121,4)" rx="2" ry="2" />
<text  x="329.79" y="479.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (6 samples, 0.12%)</title><rect x="1117.6" y="437" width="1.4" height="15.0" fill="rgb(236,142,24)" rx="2" ry="2" />
<text  x="1120.63" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="76.7" y="437" width="0.2" height="15.0" fill="rgb(236,77,14)" rx="2" ry="2" />
<text  x="79.68" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="625.4" y="581" width="0.2" height="15.0" fill="rgb(251,54,19)" rx="2" ry="2" />
<text  x="628.38" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="39.1" y="453" width="0.3" height="15.0" fill="rgb(226,5,31)" rx="2" ry="2" />
<text  x="42.13" y="463.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::make&lt;managed_bytes&gt; (4 samples, 0.08%)</title><rect x="913.5" y="517" width="0.9" height="15.0" fill="rgb(210,223,52)" rx="2" ry="2" />
<text  x="916.49" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (15 samples, 0.29%)</title><rect x="1076.0" y="469" width="3.4" height="15.0" fill="rgb(241,226,46)" rx="2" ry="2" />
<text  x="1078.98" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="76.5" y="453" width="0.2" height="15.0" fill="rgb(225,112,46)" rx="2" ry="2" />
<text  x="79.45" y="463.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="827.9" y="485" width="0.2" height="15.0" fill="rgb(237,101,8)" rx="2" ry="2" />
<text  x="830.92" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="937.4" y="565" width="0.4" height="15.0" fill="rgb(208,116,39)" rx="2" ry="2" />
<text  x="940.39" y="575.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%)</title><rect x="251.9" y="341" width="0.2" height="15.0" fill="rgb(240,170,9)" rx="2" ry="2" />
<text  x="254.92" y="351.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (1 samples, 0.02%)</title><rect x="1022.3" y="421" width="0.2" height="15.0" fill="rgb(253,164,36)" rx="2" ry="2" />
<text  x="1025.27" y="431.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (1 samples, 0.02%)</title><rect x="1040.9" y="501" width="0.3" height="15.0" fill="rgb(216,222,41)" rx="2" ry="2" />
<text  x="1043.94" y="511.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="1144.7" y="645" width="0.5" height="15.0" fill="rgb(230,196,2)" rx="2" ry="2" />
<text  x="1147.71" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (17 samples, 0.33%)</title><rect x="989.0" y="533" width="3.9" height="15.0" fill="rgb(244,32,43)" rx="2" ry="2" />
<text  x="992.05" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (3 samples, 0.06%)</title><rect x="49.4" y="453" width="0.7" height="15.0" fill="rgb(254,215,19)" rx="2" ry="2" />
<text  x="52.37" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (9 samples, 0.17%)</title><rect x="623.6" y="597" width="2.0" height="15.0" fill="rgb(245,190,5)" rx="2" ry="2" />
<text  x="626.55" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="637.7" y="661" width="0.2" height="15.0" fill="rgb(225,168,45)" rx="2" ry="2" />
<text  x="640.66" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="632.0" y="677" width="0.7" height="15.0" fill="rgb(225,65,53)" rx="2" ry="2" />
<text  x="634.97" y="687.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="80.8" y="245" width="0.2" height="15.0" fill="rgb(240,93,42)" rx="2" ry="2" />
<text  x="83.78" y="255.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (1 samples, 0.02%)</title><rect x="80.8" y="517" width="0.2" height="15.0" fill="rgb(219,101,49)" rx="2" ry="2" />
<text  x="83.78" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (2 samples, 0.04%)</title><rect x="955.6" y="565" width="0.4" height="15.0" fill="rgb(213,26,12)" rx="2" ry="2" />
<text  x="958.59" y="575.5" ></text>
</g>
<g >
<title>query::result::result (9 samples, 0.17%)</title><rect x="598.5" y="629" width="2.1" height="15.0" fill="rgb(217,134,19)" rx="2" ry="2" />
<text  x="601.52" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (2 samples, 0.04%)</title><rect x="392.3" y="373" width="0.5" height="15.0" fill="rgb(234,16,9)" rx="2" ry="2" />
<text  x="395.33" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (11 samples, 0.21%)</title><rect x="1160.2" y="645" width="2.5" height="15.0" fill="rgb(235,182,36)" rx="2" ry="2" />
<text  x="1163.19" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="511.4" y="517" width="0.2" height="15.0" fill="rgb(243,82,51)" rx="2" ry="2" />
<text  x="514.36" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="91.9" y="693" width="0.3" height="15.0" fill="rgb(253,123,32)" rx="2" ry="2" />
<text  x="94.93" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="56.9" y="469" width="0.2" height="15.0" fill="rgb(250,170,25)" rx="2" ry="2" />
<text  x="59.88" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (8 samples, 0.15%)</title><rect x="524.6" y="437" width="1.8" height="15.0" fill="rgb(227,195,48)" rx="2" ry="2" />
<text  x="527.56" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (1 samples, 0.02%)</title><rect x="551.9" y="629" width="0.2" height="15.0" fill="rgb(232,185,54)" rx="2" ry="2" />
<text  x="554.87" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="809.9" y="421" width="0.3" height="15.0" fill="rgb(218,169,46)" rx="2" ry="2" />
<text  x="812.94" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;, cql3::query_processor::for_each_cql_result (1 samples, 0.02%)</title><rect x="640.6" y="709" width="0.3" height="15.0" fill="rgb(247,215,46)" rx="2" ry="2" />
<text  x="643.62" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (6 samples, 0.12%)</title><rect x="1147.0" y="645" width="1.4" height="15.0" fill="rgb(240,184,36)" rx="2" ry="2" />
<text  x="1149.99" y="655.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="505.2" y="517" width="0.2" height="15.0" fill="rgb(227,176,4)" rx="2" ry="2" />
<text  x="508.21" y="527.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (3 samples, 0.06%)</title><rect x="1019.1" y="357" width="0.7" height="15.0" fill="rgb(249,163,19)" rx="2" ry="2" />
<text  x="1022.09" y="367.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="509.1" y="501" width="0.9" height="15.0" fill="rgb(240,110,34)" rx="2" ry="2" />
<text  x="512.08" y="511.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2 samples, 0.04%)</title><rect x="828.4" y="469" width="0.4" height="15.0" fill="rgb(254,26,15)" rx="2" ry="2" />
<text  x="831.38" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_drop_node (1 samples, 0.02%)</title><rect x="652.9" y="581" width="0.2" height="15.0" fill="rgb(214,110,7)" rx="2" ry="2" />
<text  x="655.91" y="591.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (10 samples, 0.19%)</title><rect x="498.2" y="421" width="2.2" height="15.0" fill="rgb(212,24,0)" rx="2" ry="2" />
<text  x="501.16" y="431.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="646.1" y="677" width="0.4" height="15.0" fill="rgb(242,205,2)" rx="2" ry="2" />
<text  x="649.08" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7 samples, 0.14%)</title><rect x="824.1" y="517" width="1.5" height="15.0" fill="rgb(248,128,11)" rx="2" ry="2" />
<text  x="827.05" y="527.5" ></text>
</g>
<g >
<title>database::find_schema (7 samples, 0.14%)</title><rect x="763.3" y="597" width="1.6" height="15.0" fill="rgb(253,176,7)" rx="2" ry="2" />
<text  x="766.29" y="607.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (1 samples, 0.02%)</title><rect x="590.3" y="645" width="0.3" height="15.0" fill="rgb(239,90,40)" rx="2" ry="2" />
<text  x="593.33" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="126.1" y="661" width="0.2" height="15.0" fill="rgb(227,106,17)" rx="2" ry="2" />
<text  x="129.07" y="671.5" ></text>
</g>
<g >
<title>schema::column_at (10 samples, 0.19%)</title><rect x="355.5" y="389" width="2.2" height="15.0" fill="rgb(216,213,37)" rx="2" ry="2" />
<text  x="358.47" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (1 samples, 0.02%)</title><rect x="102.9" y="645" width="0.2" height="15.0" fill="rgb(216,36,13)" rx="2" ry="2" />
<text  x="105.85" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="60.3" y="357" width="0.2" height="15.0" fill="rgb(215,180,24)" rx="2" ry="2" />
<text  x="63.30" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::end (1 samples, 0.02%)</title><rect x="61.0" y="517" width="0.2" height="15.0" fill="rgb(229,133,44)" rx="2" ry="2" />
<text  x="63.98" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%)</title><rect x="47.8" y="341" width="0.4" height="15.0" fill="rgb(220,95,30)" rx="2" ry="2" />
<text  x="50.78" y="351.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%)</title><rect x="491.3" y="485" width="0.3" height="15.0" fill="rgb(244,195,37)" rx="2" ry="2" />
<text  x="494.33" y="495.5" ></text>
</g>
<g >
<title>row::external_memory_usage (19 samples, 0.37%)</title><rect x="242.8" y="357" width="4.3" height="15.0" fill="rgb(251,116,53)" rx="2" ry="2" />
<text  x="245.81" y="367.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (2 samples, 0.04%)</title><rect x="610.8" y="613" width="0.5" height="15.0" fill="rgb(254,101,13)" rx="2" ry="2" />
<text  x="613.81" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (2 samples, 0.04%)</title><rect x="1036.4" y="453" width="0.4" height="15.0" fill="rgb(219,11,29)" rx="2" ry="2" />
<text  x="1039.38" y="463.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (4 samples, 0.08%)</title><rect x="684.3" y="677" width="0.9" height="15.0" fill="rgb(253,9,9)" rx="2" ry="2" />
<text  x="687.32" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="875.9" y="613" width="0.3" height="15.0" fill="rgb(211,57,27)" rx="2" ry="2" />
<text  x="878.94" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="698.7" y="645" width="0.4" height="15.0" fill="rgb(222,114,7)" rx="2" ry="2" />
<text  x="701.66" y="655.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_keyspace_statement, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="64.4" y="565" width="0.2" height="15.0" fill="rgb(229,31,34)" rx="2" ry="2" />
<text  x="67.39" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="692.1" y="533" width="0.2" height="15.0" fill="rgb(251,2,26)" rx="2" ry="2" />
<text  x="695.06" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%)</title><rect x="642.9" y="693" width="0.2" height="15.0" fill="rgb(231,117,39)" rx="2" ry="2" />
<text  x="645.90" y="703.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%)</title><rect x="858.0" y="645" width="1.6" height="15.0" fill="rgb(205,54,7)" rx="2" ry="2" />
<text  x="860.96" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (9 samples, 0.17%)</title><rect x="660.6" y="677" width="2.1" height="15.0" fill="rgb(224,39,27)" rx="2" ry="2" />
<text  x="663.65" y="687.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (6 samples, 0.12%)</title><rect x="605.1" y="613" width="1.4" height="15.0" fill="rgb(248,41,29)" rx="2" ry="2" />
<text  x="608.12" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="43.9" y="405" width="0.5" height="15.0" fill="rgb(213,42,17)" rx="2" ry="2" />
<text  x="46.91" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="539.6" y="533" width="0.2" height="15.0" fill="rgb(227,14,28)" rx="2" ry="2" />
<text  x="542.58" y="543.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="75.1" y="645" width="0.2" height="15.0" fill="rgb(254,148,3)" rx="2" ry="2" />
<text  x="78.09" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%)</title><rect x="431.9" y="469" width="0.3" height="15.0" fill="rgb(233,37,17)" rx="2" ry="2" />
<text  x="434.93" y="479.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (9 samples, 0.17%)</title><rect x="33.7" y="453" width="2.0" height="15.0" fill="rgb(213,125,21)" rx="2" ry="2" />
<text  x="36.67" y="463.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="50.7" y="421" width="0.3" height="15.0" fill="rgb(211,13,41)" rx="2" ry="2" />
<text  x="53.74" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (36 samples, 0.69%)</title><rect x="868.0" y="629" width="8.2" height="15.0" fill="rgb(216,161,21)" rx="2" ry="2" />
<text  x="870.97" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="41.2" y="389" width="0.4" height="15.0" fill="rgb(213,166,47)" rx="2" ry="2" />
<text  x="44.18" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="18.9" y="661" width="0.2" height="15.0" fill="rgb(241,43,14)" rx="2" ry="2" />
<text  x="21.88" y="671.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="60.1" y="421" width="0.2" height="15.0" fill="rgb(226,177,41)" rx="2" ry="2" />
<text  x="63.07" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="585.5" y="565" width="0.3" height="15.0" fill="rgb(236,104,21)" rx="2" ry="2" />
<text  x="588.55" y="575.5" ></text>
</g>
<g >
<title>schema::column_at (5 samples, 0.10%)</title><rect x="245.8" y="309" width="1.1" height="15.0" fill="rgb(237,191,11)" rx="2" ry="2" />
<text  x="248.77" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range (1 samples, 0.02%)</title><rect x="971.5" y="581" width="0.3" height="15.0" fill="rgb(241,15,29)" rx="2" ry="2" />
<text  x="974.52" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;reader_permit::impl, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%)</title><rect x="1026.1" y="405" width="0.3" height="15.0" fill="rgb(206,172,38)" rx="2" ry="2" />
<text  x="1029.14" y="415.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::components (1 samples, 0.02%)</title><rect x="1129.2" y="245" width="0.3" height="15.0" fill="rgb(225,66,42)" rx="2" ry="2" />
<text  x="1132.24" y="255.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::work_item, 128ul&gt;::back_chunk_new (1 samples, 0.02%)</title><rect x="758.3" y="565" width="0.2" height="15.0" fill="rgb(216,93,22)" rx="2" ry="2" />
<text  x="761.28" y="575.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (2 samples, 0.04%)</title><rect x="870.9" y="549" width="0.5" height="15.0" fill="rgb(205,68,2)" rx="2" ry="2" />
<text  x="873.93" y="559.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (2 samples, 0.04%)</title><rect x="617.0" y="645" width="0.4" height="15.0" fill="rgb(215,95,10)" rx="2" ry="2" />
<text  x="619.95" y="655.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="533.9" y="533" width="1.4" height="15.0" fill="rgb(247,139,15)" rx="2" ry="2" />
<text  x="536.89" y="543.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="16.1" y="677" width="0.3" height="15.0" fill="rgb(210,64,10)" rx="2" ry="2" />
<text  x="19.14" y="687.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::column_value&gt; (1 samples, 0.02%)</title><rect x="68.9" y="565" width="0.3" height="15.0" fill="rgb(238,204,6)" rx="2" ry="2" />
<text  x="71.94" y="575.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::wait_for_one (1 samples, 0.02%)</title><rect x="1132.2" y="693" width="0.2" height="15.0" fill="rgb(245,162,54)" rx="2" ry="2" />
<text  x="1135.19" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="1113.1" y="629" width="0.2" height="15.0" fill="rgb(234,202,10)" rx="2" ry="2" />
<text  x="1116.08" y="639.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%)</title><rect x="1118.5" y="357" width="0.3" height="15.0" fill="rgb(207,57,39)" rx="2" ry="2" />
<text  x="1121.54" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::do_merge_with (1 samples, 0.02%)</title><rect x="69.2" y="533" width="0.2" height="15.0" fill="rgb(252,229,45)" rx="2" ry="2" />
<text  x="72.17" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="467.4" y="485" width="0.7" height="15.0" fill="rgb(210,57,4)" rx="2" ry="2" />
<text  x="470.43" y="495.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (59 samples, 1.14%)</title><rect x="792.6" y="453" width="13.5" height="15.0" fill="rgb(225,25,8)" rx="2" ry="2" />
<text  x="795.65" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="98.3" y="645" width="0.2" height="15.0" fill="rgb(254,181,53)" rx="2" ry="2" />
<text  x="101.30" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="60.1" y="293" width="0.2" height="15.0" fill="rgb(243,22,36)" rx="2" ry="2" />
<text  x="63.07" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="168.2" y="501" width="0.2" height="15.0" fill="rgb(215,143,30)" rx="2" ry="2" />
<text  x="171.17" y="511.5" ></text>
</g>
<g >
<title>partition_entry::apply_to_incomplete (1 samples, 0.02%)</title><rect x="15.2" y="773" width="0.3" height="15.0" fill="rgb(206,171,39)" rx="2" ry="2" />
<text  x="18.23" y="783.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="713.9" y="709" width="0.5" height="15.0" fill="rgb(213,96,20)" rx="2" ry="2" />
<text  x="716.90" y="719.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%)</title><rect x="842.7" y="645" width="0.5" height="15.0" fill="rgb(234,25,6)" rx="2" ry="2" />
<text  x="845.71" y="655.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%)</title><rect x="1026.4" y="389" width="0.2" height="15.0" fill="rgb(223,2,25)" rx="2" ry="2" />
<text  x="1029.37" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (15 samples, 0.29%)</title><rect x="871.8" y="581" width="3.5" height="15.0" fill="rgb(243,22,5)" rx="2" ry="2" />
<text  x="874.84" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (5 samples, 0.10%)</title><rect x="950.4" y="565" width="1.1" height="15.0" fill="rgb(249,82,39)" rx="2" ry="2" />
<text  x="953.36" y="575.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="1147.9" y="597" width="0.5" height="15.0" fill="rgb(230,75,30)" rx="2" ry="2" />
<text  x="1150.90" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (3 samples, 0.06%)</title><rect x="289.2" y="485" width="0.7" height="15.0" fill="rgb(214,163,1)" rx="2" ry="2" />
<text  x="292.24" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="692.1" y="453" width="0.2" height="15.0" fill="rgb(237,34,33)" rx="2" ry="2" />
<text  x="695.06" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (16 samples, 0.31%)</title><rect x="765.3" y="565" width="3.7" height="15.0" fill="rgb(252,119,15)" rx="2" ry="2" />
<text  x="768.34" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="61.2" y="533" width="0.2" height="15.0" fill="rgb(221,105,21)" rx="2" ry="2" />
<text  x="64.21" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="48.9" y="501" width="0.2" height="15.0" fill="rgb(207,1,32)" rx="2" ry="2" />
<text  x="51.92" y="511.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, seastar::future&lt;void&gt;, false&gt;::_Head_base&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%)</title><rect x="867.1" y="661" width="0.2" height="15.0" fill="rgb(237,103,40)" rx="2" ry="2" />
<text  x="870.06" y="671.5" ></text>
</g>
<g >
<title>free (5 samples, 0.10%)</title><rect x="425.1" y="405" width="1.1" height="15.0" fill="rgb(250,109,9)" rx="2" ry="2" />
<text  x="428.11" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="102.6" y="501" width="0.3" height="15.0" fill="rgb(229,37,52)" rx="2" ry="2" />
<text  x="105.62" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="43.9" y="373" width="0.5" height="15.0" fill="rgb(246,162,37)" rx="2" ry="2" />
<text  x="46.91" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (5 samples, 0.10%)</title><rect x="852.3" y="581" width="1.1" height="15.0" fill="rgb(242,20,31)" rx="2" ry="2" />
<text  x="855.27" y="591.5" ></text>
</g>
<g >
<title>cql3::functions::functions::init (1 samples, 0.02%)</title><rect x="17.1" y="629" width="0.2" height="15.0" fill="rgb(220,88,12)" rx="2" ry="2" />
<text  x="20.05" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt; &gt;::vector (2 samples, 0.04%)</title><rect x="21.2" y="613" width="0.4" height="15.0" fill="rgb(206,127,7)" rx="2" ry="2" />
<text  x="24.15" y="623.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="420.1" y="421" width="0.2" height="15.0" fill="rgb(217,178,3)" rx="2" ry="2" />
<text  x="423.10" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::clear (1 samples, 0.02%)</title><rect x="745.3" y="581" width="0.2" height="15.0" fill="rgb(246,221,50)" rx="2" ry="2" />
<text  x="748.31" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="695.5" y="677" width="0.2" height="15.0" fill="rgb(217,22,19)" rx="2" ry="2" />
<text  x="698.47" y="687.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (14 samples, 0.27%)</title><rect x="732.8" y="533" width="3.2" height="15.0" fill="rgb(250,35,26)" rx="2" ry="2" />
<text  x="735.79" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="44.6" y="453" width="0.2" height="15.0" fill="rgb(214,7,25)" rx="2" ry="2" />
<text  x="47.59" y="463.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="322.0" y="501" width="0.2" height="15.0" fill="rgb(249,229,42)" rx="2" ry="2" />
<text  x="325.01" y="511.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (2 samples, 0.04%)</title><rect x="247.6" y="357" width="0.4" height="15.0" fill="rgb(251,188,34)" rx="2" ry="2" />
<text  x="250.59" y="367.5" ></text>
</g>
<g >
<title>std::ostream::write (1 samples, 0.02%)</title><rect x="10.9" y="805" width="0.2" height="15.0" fill="rgb(237,181,17)" rx="2" ry="2" />
<text  x="13.91" y="815.5" ></text>
</g>
<g >
<title>dht::tri_compare (8 samples, 0.15%)</title><rect x="494.3" y="469" width="1.8" height="15.0" fill="rgb(241,185,35)" rx="2" ry="2" />
<text  x="497.29" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="420.6" y="405" width="0.2" height="15.0" fill="rgb(254,190,14)" rx="2" ry="2" />
<text  x="423.55" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="533.2" y="469" width="0.7" height="15.0" fill="rgb(229,79,28)" rx="2" ry="2" />
<text  x="536.21" y="479.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (13 samples, 0.25%)</title><rect x="337.5" y="389" width="2.9" height="15.0" fill="rgb(232,186,4)" rx="2" ry="2" />
<text  x="340.49" y="399.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%)</title><rect x="103.8" y="469" width="0.2" height="15.0" fill="rgb(222,144,0)" rx="2" ry="2" />
<text  x="106.76" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (1 samples, 0.02%)</title><rect x="702.1" y="677" width="0.2" height="15.0" fill="rgb(211,38,43)" rx="2" ry="2" />
<text  x="705.07" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="49.8" y="357" width="0.3" height="15.0" fill="rgb(234,79,33)" rx="2" ry="2" />
<text  x="52.83" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="1035.7" y="421" width="0.7" height="15.0" fill="rgb(253,136,41)" rx="2" ry="2" />
<text  x="1038.70" y="431.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (1 samples, 0.02%)</title><rect x="393.2" y="421" width="0.3" height="15.0" fill="rgb(248,97,32)" rx="2" ry="2" />
<text  x="396.24" y="431.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="10.2" y="709" width="0.3" height="15.0" fill="rgb(243,170,7)" rx="2" ry="2" />
<text  x="13.23" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1131.3" y="549" width="0.2" height="15.0" fill="rgb(209,195,4)" rx="2" ry="2" />
<text  x="1134.28" y="559.5" ></text>
</g>
<g >
<title>db::schema_tables::read_schema_for_keyspaces (1 samples, 0.02%)</title><rect x="102.9" y="693" width="0.2" height="15.0" fill="rgb(248,98,36)" rx="2" ry="2" />
<text  x="105.85" y="703.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (6 samples, 0.12%)</title><rect x="578.7" y="565" width="1.4" height="15.0" fill="rgb(227,71,42)" rx="2" ry="2" />
<text  x="581.72" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%)</title><rect x="656.6" y="661" width="0.2" height="15.0" fill="rgb(214,109,5)" rx="2" ry="2" />
<text  x="659.55" y="671.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;std::vector&lt;ser::column_view, std::allocator&lt;ser::column_view&gt; &gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1122.2" y="421" width="0.2" height="15.0" fill="rgb(252,107,32)" rx="2" ry="2" />
<text  x="1125.18" y="431.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::response (1 samples, 0.02%)</title><rect x="713.0" y="677" width="0.2" height="15.0" fill="rgb(248,9,40)" rx="2" ry="2" />
<text  x="715.99" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (1 samples, 0.02%)</title><rect x="20.2" y="517" width="0.3" height="15.0" fill="rgb(226,68,9)" rx="2" ry="2" />
<text  x="23.24" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1017.0" y="389" width="0.3" height="15.0" fill="rgb(210,193,13)" rx="2" ry="2" />
<text  x="1020.04" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::~update_statement (2 samples, 0.04%)</title><rect x="74.2" y="677" width="0.4" height="15.0" fill="rgb(217,220,52)" rx="2" ry="2" />
<text  x="77.18" y="687.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (4 samples, 0.08%)</title><rect x="825.9" y="533" width="0.9" height="15.0" fill="rgb(250,46,38)" rx="2" ry="2" />
<text  x="828.87" y="543.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (4,735 samples, 91.32%)</title><rect x="86.7" y="725" width="1077.6" height="15.0" fill="rgb(223,48,18)" rx="2" ry="2" />
<text  x="89.69" y="735.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>std::variant&lt;fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="914.4" y="517" width="0.5" height="15.0" fill="rgb(218,198,40)" rx="2" ry="2" />
<text  x="917.40" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="289.9" y="485" width="0.3" height="15.0" fill="rgb(239,97,6)" rx="2" ry="2" />
<text  x="292.92" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="982.9" y="565" width="0.2" height="15.0" fill="rgb(213,213,38)" rx="2" ry="2" />
<text  x="985.90" y="575.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%)</title><rect x="77.6" y="629" width="0.2" height="15.0" fill="rgb(221,49,14)" rx="2" ry="2" />
<text  x="80.59" y="639.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%)</title><rect x="52.3" y="485" width="0.3" height="15.0" fill="rgb(251,96,1)" rx="2" ry="2" />
<text  x="55.33" y="495.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="17.5" y="613" width="0.2" height="15.0" fill="rgb(237,79,43)" rx="2" ry="2" />
<text  x="20.51" y="623.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%)</title><rect x="735.8" y="501" width="0.2" height="15.0" fill="rgb(220,23,43)" rx="2" ry="2" />
<text  x="738.75" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="781.7" y="485" width="0.9" height="15.0" fill="rgb(247,142,32)" rx="2" ry="2" />
<text  x="784.72" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="10.7" y="645" width="0.2" height="15.0" fill="rgb(221,20,50)" rx="2" ry="2" />
<text  x="13.68" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="995.9" y="437" width="0.4" height="15.0" fill="rgb(208,171,53)" rx="2" ry="2" />
<text  x="998.87" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (248 samples, 4.78%)</title><rect x="203.7" y="437" width="56.4" height="15.0" fill="rgb(245,38,24)" rx="2" ry="2" />
<text  x="206.67" y="447.5" >parti..</text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="40.7" y="485" width="0.5" height="15.0" fill="rgb(206,109,23)" rx="2" ry="2" />
<text  x="43.72" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (1 samples, 0.02%)</title><rect x="865.7" y="709" width="0.2" height="15.0" fill="rgb(247,84,25)" rx="2" ry="2" />
<text  x="868.70" y="719.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="22.5" y="469" width="0.2" height="15.0" fill="rgb(254,201,38)" rx="2" ry="2" />
<text  x="25.52" y="479.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (11 samples, 0.21%)</title><rect x="1127.4" y="421" width="2.5" height="15.0" fill="rgb(207,106,4)" rx="2" ry="2" />
<text  x="1130.42" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (9 samples, 0.17%)</title><rect x="256.7" y="389" width="2.0" height="15.0" fill="rgb(236,153,30)" rx="2" ry="2" />
<text  x="259.70" y="399.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="1162.0" y="629" width="0.5" height="15.0" fill="rgb(245,96,47)" rx="2" ry="2" />
<text  x="1165.01" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (44 samples, 0.85%)</title><rect x="303.1" y="533" width="10.0" height="15.0" fill="rgb(248,110,46)" rx="2" ry="2" />
<text  x="306.12" y="543.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="284.0" y="421" width="0.2" height="15.0" fill="rgb(230,116,7)" rx="2" ry="2" />
<text  x="287.01" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="39.1" y="517" width="0.3" height="15.0" fill="rgb(251,211,7)" rx="2" ry="2" />
<text  x="42.13" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="764.9" y="565" width="0.2" height="15.0" fill="rgb(210,74,22)" rx="2" ry="2" />
<text  x="767.88" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy::remove_response_handler_entry (1 samples, 0.02%)</title><rect x="713.2" y="693" width="0.2" height="15.0" fill="rgb(220,186,17)" rx="2" ry="2" />
<text  x="716.22" y="703.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (2 samples, 0.04%)</title><rect x="609.9" y="613" width="0.5" height="15.0" fill="rgb(220,184,40)" rx="2" ry="2" />
<text  x="612.90" y="623.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%)</title><rect x="804.3" y="309" width="0.4" height="15.0" fill="rgb(246,105,26)" rx="2" ry="2" />
<text  x="807.25" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="829.7" y="501" width="0.5" height="15.0" fill="rgb(242,13,22)" rx="2" ry="2" />
<text  x="832.74" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="1164.1" y="613" width="0.2" height="15.0" fill="rgb(249,33,5)" rx="2" ry="2" />
<text  x="1167.06" y="623.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (8 samples, 0.15%)</title><rect x="385.7" y="373" width="1.9" height="15.0" fill="rgb(253,15,32)" rx="2" ry="2" />
<text  x="388.73" y="383.5" ></text>
</g>
<g >
<title>std::operator- (2 samples, 0.04%)</title><rect x="55.1" y="309" width="0.4" height="15.0" fill="rgb(223,159,28)" rx="2" ry="2" />
<text  x="58.06" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="904.2" y="469" width="0.4" height="15.0" fill="rgb(212,147,20)" rx="2" ry="2" />
<text  x="907.16" y="479.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::run_and_dispose (1 samples, 0.02%)</title><rect x="1132.2" y="709" width="0.2" height="15.0" fill="rgb(215,128,4)" rx="2" ry="2" />
<text  x="1135.19" y="719.5" ></text>
</g>
<g >
<title>cql3::selection::simple_selection::is_aggregate (2 samples, 0.04%)</title><rect x="881.4" y="645" width="0.5" height="15.0" fill="rgb(215,137,48)" rx="2" ry="2" />
<text  x="884.40" y="655.5" ></text>
</g>
<g >
<title>distributed_loader::populate_column_family (1 samples, 0.02%)</title><rect x="693.0" y="677" width="0.2" height="15.0" fill="rgb(240,199,49)" rx="2" ry="2" />
<text  x="695.97" y="687.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (2 samples, 0.04%)</title><rect x="657.5" y="629" width="0.4" height="15.0" fill="rgb(209,117,19)" rx="2" ry="2" />
<text  x="660.46" y="639.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (1 samples, 0.02%)</title><rect x="724.1" y="661" width="0.3" height="15.0" fill="rgb(219,197,4)" rx="2" ry="2" />
<text  x="727.14" y="671.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (1 samples, 0.02%)</title><rect x="83.5" y="693" width="0.2" height="15.0" fill="rgb(231,43,11)" rx="2" ry="2" />
<text  x="86.51" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="440.6" y="549" width="0.2" height="15.0" fill="rgb(236,9,19)" rx="2" ry="2" />
<text  x="443.58" y="559.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (2 samples, 0.04%)</title><rect x="523.6" y="421" width="0.5" height="15.0" fill="rgb(214,110,19)" rx="2" ry="2" />
<text  x="526.65" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="945.6" y="613" width="0.2" height="15.0" fill="rgb(213,132,15)" rx="2" ry="2" />
<text  x="948.58" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="650.2" y="693" width="0.2" height="15.0" fill="rgb(211,26,33)" rx="2" ry="2" />
<text  x="653.18" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;2ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="197" width="0.3" height="15.0" fill="rgb(238,191,34)" rx="2" ry="2" />
<text  x="62.84" y="207.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="10.7" y="725" width="0.2" height="15.0" fill="rgb(207,83,34)" rx="2" ry="2" />
<text  x="13.68" y="735.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%)</title><rect x="41.9" y="357" width="0.4" height="15.0" fill="rgb(213,91,53)" rx="2" ry="2" />
<text  x="44.86" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="44.6" y="405" width="0.2" height="15.0" fill="rgb(206,8,3)" rx="2" ry="2" />
<text  x="47.59" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (5 samples, 0.10%)</title><rect x="344.3" y="357" width="1.2" height="15.0" fill="rgb(230,204,15)" rx="2" ry="2" />
<text  x="347.31" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%)</title><rect x="616.7" y="645" width="0.3" height="15.0" fill="rgb(245,173,4)" rx="2" ry="2" />
<text  x="619.73" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::destroy&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="52.3" y="437" width="0.3" height="15.0" fill="rgb(240,212,33)" rx="2" ry="2" />
<text  x="55.33" y="447.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="284.9" y="421" width="0.2" height="15.0" fill="rgb(227,228,17)" rx="2" ry="2" />
<text  x="287.92" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="49.1" y="389" width="0.3" height="15.0" fill="rgb(236,223,43)" rx="2" ry="2" />
<text  x="52.14" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="911.7" y="501" width="0.4" height="15.0" fill="rgb(241,139,43)" rx="2" ry="2" />
<text  x="914.67" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::future (1 samples, 0.02%)</title><rect x="982.0" y="565" width="0.2" height="15.0" fill="rgb(215,54,20)" rx="2" ry="2" />
<text  x="984.99" y="575.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (4 samples, 0.08%)</title><rect x="564.6" y="533" width="0.9" height="15.0" fill="rgb(236,55,24)" rx="2" ry="2" />
<text  x="567.61" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="913.7" y="485" width="0.7" height="15.0" fill="rgb(239,124,7)" rx="2" ry="2" />
<text  x="916.72" y="495.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (4 samples, 0.08%)</title><rect x="264.4" y="437" width="0.9" height="15.0" fill="rgb(223,210,49)" rx="2" ry="2" />
<text  x="267.43" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="58.9" y="517" width="0.3" height="15.0" fill="rgb(219,76,43)" rx="2" ry="2" />
<text  x="61.93" y="527.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%)</title><rect x="1050.7" y="485" width="0.5" height="15.0" fill="rgb(238,155,32)" rx="2" ry="2" />
<text  x="1053.72" y="495.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (11 samples, 0.21%)</title><rect x="749.0" y="517" width="2.5" height="15.0" fill="rgb(240,94,35)" rx="2" ry="2" />
<text  x="751.95" y="527.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_endpoint (1 samples, 0.02%)</title><rect x="17.5" y="597" width="0.2" height="15.0" fill="rgb(245,15,33)" rx="2" ry="2" />
<text  x="20.51" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::setTokenStream (1 samples, 0.02%)</title><rect x="20.5" y="613" width="0.2" height="15.0" fill="rgb(220,161,11)" rx="2" ry="2" />
<text  x="23.47" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (2 samples, 0.04%)</title><rect x="695.7" y="677" width="0.5" height="15.0" fill="rgb(228,113,23)" rx="2" ry="2" />
<text  x="698.70" y="687.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_28has_slice_or_needs_filteringERKNS2_10expressionEEUlRKNS2_15binary_operatorEE_EEPS8_S6_T_EUlS9_E_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_8constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_11conjunctionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_12column_valueEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_5tokenEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13function_callEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4castEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_15field_selectionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4nullEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13bind_variableEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_16untyped_constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_17tuple_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_22collection_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSI_S7_SM_SQ_SU_SY_S12_S16_S1A_S1E_S1I_S1M_SE_S1Q_S1U_S1Y_EEEENSt13invoke_resultISC_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSC_DpOS28_ (1 samples, 0.02%)</title><rect x="657.0" y="613" width="0.2" height="15.0" fill="rgb(217,209,25)" rx="2" ry="2" />
<text  x="660.01" y="623.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (1 samples, 0.02%)</title><rect x="59.8" y="469" width="0.3" height="15.0" fill="rgb(251,56,7)" rx="2" ry="2" />
<text  x="62.84" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reserve_map_at_back (1 samples, 0.02%)</title><rect x="25.5" y="453" width="0.2" height="15.0" fill="rgb(209,115,12)" rx="2" ry="2" />
<text  x="28.48" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (1 samples, 0.02%)</title><rect x="578.0" y="549" width="0.3" height="15.0" fill="rgb(247,206,47)" rx="2" ry="2" />
<text  x="581.04" y="559.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.14%)</title><rect x="592.6" y="613" width="1.6" height="15.0" fill="rgb(223,47,35)" rx="2" ry="2" />
<text  x="595.60" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="308.4" y="501" width="0.4" height="15.0" fill="rgb(216,66,15)" rx="2" ry="2" />
<text  x="311.36" y="511.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (1 samples, 0.02%)</title><rect x="263.5" y="373" width="0.3" height="15.0" fill="rgb(239,183,32)" rx="2" ry="2" />
<text  x="266.52" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%)</title><rect x="42.3" y="389" width="0.7" height="15.0" fill="rgb(243,111,20)" rx="2" ry="2" />
<text  x="45.32" y="399.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="711.6" y="613" width="0.3" height="15.0" fill="rgb(232,117,39)" rx="2" ry="2" />
<text  x="714.63" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="81.7" y="517" width="0.2" height="15.0" fill="rgb(228,175,17)" rx="2" ry="2" />
<text  x="84.69" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_destroy&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="52.3" y="421" width="0.3" height="15.0" fill="rgb(227,157,29)" rx="2" ry="2" />
<text  x="55.33" y="431.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (1 samples, 0.02%)</title><rect x="75.1" y="661" width="0.2" height="15.0" fill="rgb(250,100,2)" rx="2" ry="2" />
<text  x="78.09" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (1 samples, 0.02%)</title><rect x="296.1" y="533" width="0.2" height="15.0" fill="rgb(209,34,14)" rx="2" ry="2" />
<text  x="299.07" y="543.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_state (1 samples, 0.02%)</title><rect x="25.9" y="485" width="0.3" height="15.0" fill="rgb(224,210,42)" rx="2" ry="2" />
<text  x="28.93" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (1 samples, 0.02%)</title><rect x="524.3" y="453" width="0.3" height="15.0" fill="rgb(208,41,22)" rx="2" ry="2" />
<text  x="527.33" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (1 samples, 0.02%)</title><rect x="1085.3" y="565" width="0.2" height="15.0" fill="rgb(252,205,46)" rx="2" ry="2" />
<text  x="1088.31" y="575.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (9 samples, 0.17%)</title><rect x="544.8" y="485" width="2.1" height="15.0" fill="rgb(247,4,26)" rx="2" ry="2" />
<text  x="547.81" y="495.5" ></text>
</g>
<g >
<title>table::as_mutation_source (1 samples, 0.02%)</title><rect x="129.5" y="661" width="0.2" height="15.0" fill="rgb(232,160,50)" rx="2" ry="2" />
<text  x="132.48" y="671.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="647.7" y="693" width="0.2" height="15.0" fill="rgb(215,68,35)" rx="2" ry="2" />
<text  x="650.68" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="430.6" y="453" width="0.2" height="15.0" fill="rgb(236,95,19)" rx="2" ry="2" />
<text  x="433.57" y="463.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::signal (1 samples, 0.02%)</title><rect x="713.0" y="661" width="0.2" height="15.0" fill="rgb(216,165,17)" rx="2" ry="2" />
<text  x="715.99" y="671.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="834.1" y="629" width="0.2" height="15.0" fill="rgb(242,134,50)" rx="2" ry="2" />
<text  x="837.07" y="639.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="10.7" y="661" width="0.2" height="15.0" fill="rgb(224,36,14)" rx="2" ry="2" />
<text  x="13.68" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (3 samples, 0.06%)</title><rect x="121.7" y="597" width="0.7" height="15.0" fill="rgb(230,74,31)" rx="2" ry="2" />
<text  x="124.74" y="607.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (16 samples, 0.31%)</title><rect x="719.6" y="677" width="3.6" height="15.0" fill="rgb(225,138,24)" rx="2" ry="2" />
<text  x="722.59" y="687.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="80.8" y="645" width="0.2" height="15.0" fill="rgb(240,37,29)" rx="2" ry="2" />
<text  x="83.78" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="650.0" y="693" width="0.2" height="15.0" fill="rgb(232,159,0)" rx="2" ry="2" />
<text  x="652.95" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (28 samples, 0.54%)</title><rect x="518.0" y="453" width="6.3" height="15.0" fill="rgb(229,189,35)" rx="2" ry="2" />
<text  x="520.96" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="313.4" y="549" width="0.2" height="15.0" fill="rgb(230,201,34)" rx="2" ry="2" />
<text  x="316.36" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state_component&lt;seastar::future&lt;void&gt; &gt;::run_and_dispose (1 samples, 0.02%)</title><rect x="867.1" y="709" width="0.2" height="15.0" fill="rgb(251,38,5)" rx="2" ry="2" />
<text  x="870.06" y="719.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="944.4" y="613" width="0.3" height="15.0" fill="rgb(243,106,32)" rx="2" ry="2" />
<text  x="947.44" y="623.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::range_or_slice_eq_null (1 samples, 0.02%)</title><rect x="868.2" y="613" width="0.2" height="15.0" fill="rgb(225,34,23)" rx="2" ry="2" />
<text  x="871.20" y="623.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (13 samples, 0.25%)</title><rect x="376.2" y="373" width="2.9" height="15.0" fill="rgb(226,223,2)" rx="2" ry="2" />
<text  x="379.18" y="383.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::touch (1 samples, 0.02%)</title><rect x="737.1" y="613" width="0.2" height="15.0" fill="rgb(217,127,7)" rx="2" ry="2" />
<text  x="740.12" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="995.0" y="453" width="1.3" height="15.0" fill="rgb(236,180,27)" rx="2" ry="2" />
<text  x="997.96" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%)</title><rect x="1138.6" y="677" width="0.6" height="15.0" fill="rgb(217,197,4)" rx="2" ry="2" />
<text  x="1141.57" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="68.7" y="549" width="0.2" height="15.0" fill="rgb(211,139,21)" rx="2" ry="2" />
<text  x="71.72" y="559.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="441.5" y="581" width="0.4" height="15.0" fill="rgb(218,101,1)" rx="2" ry="2" />
<text  x="444.49" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (32 samples, 0.62%)</title><rect x="798.1" y="389" width="7.3" height="15.0" fill="rgb(238,176,21)" rx="2" ry="2" />
<text  x="801.11" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (12 samples, 0.23%)</title><rect x="733.2" y="517" width="2.8" height="15.0" fill="rgb(216,216,54)" rx="2" ry="2" />
<text  x="736.25" y="527.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (2 samples, 0.04%)</title><rect x="803.1" y="325" width="0.5" height="15.0" fill="rgb(251,40,41)" rx="2" ry="2" />
<text  x="806.11" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="764.4" y="533" width="0.3" height="15.0" fill="rgb(236,69,40)" rx="2" ry="2" />
<text  x="767.43" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="665.9" y="661" width="0.2" height="15.0" fill="rgb(250,112,48)" rx="2" ry="2" />
<text  x="668.88" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="122.4" y="597" width="0.3" height="15.0" fill="rgb(208,179,29)" rx="2" ry="2" />
<text  x="125.42" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%)</title><rect x="313.8" y="565" width="0.2" height="15.0" fill="rgb(252,157,32)" rx="2" ry="2" />
<text  x="316.82" y="575.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%)</title><rect x="1132.4" y="709" width="0.7" height="15.0" fill="rgb(244,31,1)" rx="2" ry="2" />
<text  x="1135.42" y="719.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="839.1" y="597" width="0.2" height="15.0" fill="rgb(251,209,1)" rx="2" ry="2" />
<text  x="842.07" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (8 samples, 0.15%)</title><rect x="783.8" y="517" width="1.8" height="15.0" fill="rgb(225,13,42)" rx="2" ry="2" />
<text  x="786.77" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="53.9" y="405" width="0.3" height="15.0" fill="rgb(250,65,29)" rx="2" ry="2" />
<text  x="56.92" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (10 samples, 0.19%)</title><rect x="949.2" y="613" width="2.3" height="15.0" fill="rgb(221,110,42)" rx="2" ry="2" />
<text  x="952.22" y="623.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (1 samples, 0.02%)</title><rect x="10.5" y="805" width="0.2" height="15.0" fill="rgb(249,154,27)" rx="2" ry="2" />
<text  x="13.46" y="815.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="270.1" y="453" width="0.3" height="15.0" fill="rgb(207,111,3)" rx="2" ry="2" />
<text  x="273.12" y="463.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (2 samples, 0.04%)</title><rect x="1030.0" y="469" width="0.5" height="15.0" fill="rgb(249,154,23)" rx="2" ry="2" />
<text  x="1033.01" y="479.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (9 samples, 0.17%)</title><rect x="726.9" y="613" width="2.0" height="15.0" fill="rgb(215,218,54)" rx="2" ry="2" />
<text  x="729.88" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="1005.2" y="469" width="2.1" height="15.0" fill="rgb(221,182,52)" rx="2" ry="2" />
<text  x="1008.21" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="129.7" y="597" width="0.2" height="15.0" fill="rgb(217,85,16)" rx="2" ry="2" />
<text  x="132.71" y="607.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (4 samples, 0.08%)</title><rect x="228.5" y="277" width="0.9" height="15.0" fill="rgb(250,99,34)" rx="2" ry="2" />
<text  x="231.48" y="287.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (3 samples, 0.06%)</title><rect x="101.9" y="693" width="0.7" height="15.0" fill="rgb(226,19,10)" rx="2" ry="2" />
<text  x="104.94" y="703.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="1120.8" y="389" width="0.2" height="15.0" fill="rgb(218,39,40)" rx="2" ry="2" />
<text  x="1123.82" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="1142.2" y="693" width="0.2" height="15.0" fill="rgb(239,191,31)" rx="2" ry="2" />
<text  x="1145.21" y="703.5" ></text>
</g>
<g >
<title>distributed_loader::init_system_keyspace (1 samples, 0.02%)</title><rect x="16.6" y="757" width="0.2" height="15.0" fill="rgb(231,41,7)" rx="2" ry="2" />
<text  x="19.60" y="767.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.23%)</title><rect x="1013.2" y="453" width="2.7" height="15.0" fill="rgb(211,224,34)" rx="2" ry="2" />
<text  x="1016.17" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="239.9" y="325" width="0.4" height="15.0" fill="rgb(250,217,14)" rx="2" ry="2" />
<text  x="242.86" y="335.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (2 samples, 0.04%)</title><rect x="53.7" y="453" width="0.5" height="15.0" fill="rgb(239,114,42)" rx="2" ry="2" />
<text  x="56.70" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::selectStatement (1 samples, 0.02%)</title><rect x="79.0" y="245" width="0.2" height="15.0" fill="rgb(229,137,0)" rx="2" ry="2" />
<text  x="81.96" y="255.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (10 samples, 0.19%)</title><rect x="855.7" y="613" width="2.3" height="15.0" fill="rgb(252,9,27)" rx="2" ry="2" />
<text  x="858.69" y="623.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (2 samples, 0.04%)</title><rect x="700.2" y="661" width="0.5" height="15.0" fill="rgb(207,86,39)" rx="2" ry="2" />
<text  x="703.25" y="671.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (1 samples, 0.02%)</title><rect x="1021.8" y="405" width="0.2" height="15.0" fill="rgb(222,3,46)" rx="2" ry="2" />
<text  x="1024.82" y="415.5" ></text>
</g>
<g >
<title>validation::validate_column_family (2 samples, 0.04%)</title><rect x="77.4" y="661" width="0.4" height="15.0" fill="rgb(232,111,41)" rx="2" ry="2" />
<text  x="80.36" y="671.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="103.3" y="565" width="0.2" height="15.0" fill="rgb(243,213,44)" rx="2" ry="2" />
<text  x="106.31" y="575.5" ></text>
</g>
<g >
<title>table::query (3 samples, 0.06%)</title><rect x="1163.6" y="709" width="0.7" height="15.0" fill="rgb(225,146,12)" rx="2" ry="2" />
<text  x="1166.60" y="719.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (50 samples, 0.96%)</title><rect x="271.3" y="453" width="11.3" height="15.0" fill="rgb(218,74,26)" rx="2" ry="2" />
<text  x="274.26" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="626.5" y="645" width="0.2" height="15.0" fill="rgb(219,222,47)" rx="2" ry="2" />
<text  x="629.51" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="45.7" y="437" width="0.5" height="15.0" fill="rgb(241,56,49)" rx="2" ry="2" />
<text  x="48.73" y="447.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%)</title><rect x="259.0" y="389" width="0.2" height="15.0" fill="rgb(211,139,24)" rx="2" ry="2" />
<text  x="261.97" y="399.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (90 samples, 1.74%)</title><rect x="789.9" y="485" width="20.5" height="15.0" fill="rgb(249,154,18)" rx="2" ry="2" />
<text  x="792.92" y="495.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (6 samples, 0.12%)</title><rect x="123.1" y="597" width="1.4" height="15.0" fill="rgb(206,201,32)" rx="2" ry="2" />
<text  x="126.11" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.08%)</title><rect x="37.8" y="549" width="0.9" height="15.0" fill="rgb(220,135,46)" rx="2" ry="2" />
<text  x="40.76" y="559.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%)</title><rect x="801.3" y="325" width="0.7" height="15.0" fill="rgb(213,88,33)" rx="2" ry="2" />
<text  x="804.29" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="67.8" y="581" width="0.2" height="15.0" fill="rgb(218,86,1)" rx="2" ry="2" />
<text  x="70.81" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="289.7" y="469" width="0.2" height="15.0" fill="rgb(224,39,53)" rx="2" ry="2" />
<text  x="292.70" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%)</title><rect x="887.1" y="629" width="0.2" height="15.0" fill="rgb(228,124,23)" rx="2" ry="2" />
<text  x="890.09" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="177.7" y="453" width="0.3" height="15.0" fill="rgb(233,68,54)" rx="2" ry="2" />
<text  x="180.73" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="47.6" y="469" width="0.6" height="15.0" fill="rgb(235,105,25)" rx="2" ry="2" />
<text  x="50.55" y="479.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (4 samples, 0.08%)</title><rect x="117.6" y="613" width="1.0" height="15.0" fill="rgb(230,176,27)" rx="2" ry="2" />
<text  x="120.65" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::__uniq_ptr_impl (3 samples, 0.06%)</title><rect x="62.3" y="517" width="0.7" height="15.0" fill="rgb(230,213,54)" rx="2" ry="2" />
<text  x="65.34" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="711.2" y="629" width="0.7" height="15.0" fill="rgb(206,138,46)" rx="2" ry="2" />
<text  x="714.17" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (19 samples, 0.37%)</title><rect x="1047.1" y="533" width="4.3" height="15.0" fill="rgb(248,196,0)" rx="2" ry="2" />
<text  x="1050.08" y="543.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::prepare_column_identifier (1 samples, 0.02%)</title><rect x="66.4" y="629" width="0.3" height="15.0" fill="rgb(225,139,13)" rx="2" ry="2" />
<text  x="69.44" y="639.5" ></text>
</g>
<g >
<title>service::query_ranges_to_vnodes_generator::process_one_range (1 samples, 0.02%)</title><rect x="971.5" y="389" width="0.3" height="15.0" fill="rgb(225,222,40)" rx="2" ry="2" />
<text  x="974.52" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (4 samples, 0.08%)</title><rect x="38.9" y="565" width="0.9" height="15.0" fill="rgb(253,187,21)" rx="2" ry="2" />
<text  x="41.90" y="575.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%)</title><rect x="24.6" y="437" width="0.4" height="15.0" fill="rgb(224,212,19)" rx="2" ry="2" />
<text  x="27.57" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (5 samples, 0.10%)</title><rect x="146.8" y="645" width="1.1" height="15.0" fill="rgb(223,72,45)" rx="2" ry="2" />
<text  x="149.78" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (5 samples, 0.10%)</title><rect x="296.8" y="549" width="1.1" height="15.0" fill="rgb(214,175,48)" rx="2" ry="2" />
<text  x="299.75" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="859.8" y="661" width="0.7" height="15.0" fill="rgb(211,200,52)" rx="2" ry="2" />
<text  x="862.78" y="671.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (1 samples, 0.02%)</title><rect x="313.1" y="533" width="0.3" height="15.0" fill="rgb(225,147,7)" rx="2" ry="2" />
<text  x="316.14" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (20 samples, 0.39%)</title><rect x="825.9" y="549" width="4.5" height="15.0" fill="rgb(219,223,19)" rx="2" ry="2" />
<text  x="828.87" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1085.5" y="565" width="0.3" height="15.0" fill="rgb(237,54,38)" rx="2" ry="2" />
<text  x="1088.54" y="575.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (1 samples, 0.02%)</title><rect x="79.0" y="389" width="0.2" height="15.0" fill="rgb(207,80,54)" rx="2" ry="2" />
<text  x="81.96" y="399.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="519.3" y="421" width="0.3" height="15.0" fill="rgb(248,19,9)" rx="2" ry="2" />
<text  x="522.32" y="431.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (6 samples, 0.12%)</title><rect x="30.9" y="453" width="1.4" height="15.0" fill="rgb(211,49,0)" rx="2" ry="2" />
<text  x="33.94" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="40.7" y="469" width="0.5" height="15.0" fill="rgb(230,192,50)" rx="2" ry="2" />
<text  x="43.72" y="479.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (20 samples, 0.39%)</title><rect x="470.6" y="517" width="4.6" height="15.0" fill="rgb(211,92,26)" rx="2" ry="2" />
<text  x="473.62" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="38.0" y="501" width="0.7" height="15.0" fill="rgb(228,77,26)" rx="2" ry="2" />
<text  x="40.99" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="83.5" y="661" width="0.2" height="15.0" fill="rgb(227,89,23)" rx="2" ry="2" />
<text  x="86.51" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="680.9" y="645" width="0.5" height="15.0" fill="rgb(215,64,38)" rx="2" ry="2" />
<text  x="683.90" y="655.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (15 samples, 0.29%)</title><rect x="719.8" y="661" width="3.4" height="15.0" fill="rgb(254,13,52)" rx="2" ry="2" />
<text  x="722.82" y="671.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (3 samples, 0.06%)</title><rect x="699.1" y="661" width="0.7" height="15.0" fill="rgb(234,21,49)" rx="2" ry="2" />
<text  x="702.11" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="73.9" y="581" width="0.3" height="15.0" fill="rgb(220,167,7)" rx="2" ry="2" />
<text  x="76.95" y="591.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="770.6" y="581" width="0.4" height="15.0" fill="rgb(246,206,38)" rx="2" ry="2" />
<text  x="773.57" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (2 samples, 0.04%)</title><rect x="676.6" y="661" width="0.4" height="15.0" fill="rgb(238,157,0)" rx="2" ry="2" />
<text  x="679.58" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="724.8" y="661" width="0.3" height="15.0" fill="rgb(222,195,1)" rx="2" ry="2" />
<text  x="727.83" y="671.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (55 samples, 1.06%)</title><rect x="1142.7" y="693" width="12.5" height="15.0" fill="rgb(249,213,36)" rx="2" ry="2" />
<text  x="1145.66" y="703.5" ></text>
</g>
<g >
<title>sstables::sstable::write_compression (1 samples, 0.02%)</title><rect x="15.0" y="709" width="0.2" height="15.0" fill="rgb(241,65,17)" rx="2" ry="2" />
<text  x="18.01" y="719.5" ></text>
</g>
<g >
<title>table::mutation_query (1 samples, 0.02%)</title><rect x="129.7" y="661" width="0.2" height="15.0" fill="rgb(242,86,6)" rx="2" ry="2" />
<text  x="132.71" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;1ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="181" width="0.3" height="15.0" fill="rgb(234,134,27)" rx="2" ry="2" />
<text  x="62.84" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1130.8" y="341" width="0.3" height="15.0" fill="rgb(240,52,37)" rx="2" ry="2" />
<text  x="1133.83" y="351.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (1 samples, 0.02%)</title><rect x="590.1" y="613" width="0.2" height="15.0" fill="rgb(236,141,10)" rx="2" ry="2" />
<text  x="593.10" y="623.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%)</title><rect x="258.7" y="389" width="0.3" height="15.0" fill="rgb(240,108,8)" rx="2" ry="2" />
<text  x="261.74" y="399.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (1 samples, 0.02%)</title><rect x="291.7" y="517" width="0.3" height="15.0" fill="rgb(245,64,8)" rx="2" ry="2" />
<text  x="294.74" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (3 samples, 0.06%)</title><rect x="952.2" y="613" width="0.7" height="15.0" fill="rgb(242,10,4)" rx="2" ry="2" />
<text  x="955.18" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (7 samples, 0.14%)</title><rect x="701.4" y="693" width="1.6" height="15.0" fill="rgb(213,178,2)" rx="2" ry="2" />
<text  x="704.39" y="703.5" ></text>
</g>
<g >
<title>std::forward&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="50.5" y="405" width="0.2" height="15.0" fill="rgb(253,185,54)" rx="2" ry="2" />
<text  x="53.51" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (1 samples, 0.02%)</title><rect x="949.4" y="597" width="0.3" height="15.0" fill="rgb(223,187,3)" rx="2" ry="2" />
<text  x="952.45" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (5 samples, 0.10%)</title><rect x="984.5" y="549" width="1.1" height="15.0" fill="rgb(228,66,26)" rx="2" ry="2" />
<text  x="987.50" y="559.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="1104.0" y="629" width="0.2" height="15.0" fill="rgb(250,209,24)" rx="2" ry="2" />
<text  x="1106.97" y="639.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (82 samples, 1.58%)</title><rect x="168.4" y="517" width="18.7" height="15.0" fill="rgb(208,141,12)" rx="2" ry="2" />
<text  x="171.40" y="527.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="665.7" y="661" width="0.2" height="15.0" fill="rgb(242,4,0)" rx="2" ry="2" />
<text  x="668.66" y="671.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::create_clustering_ranges (4 samples, 0.08%)</title><rect x="870.9" y="597" width="0.9" height="15.0" fill="rgb(253,53,46)" rx="2" ry="2" />
<text  x="873.93" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="50.5" y="501" width="0.2" height="15.0" fill="rgb(220,41,5)" rx="2" ry="2" />
<text  x="53.51" y="511.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (2 samples, 0.04%)</title><rect x="78.3" y="693" width="0.4" height="15.0" fill="rgb(219,83,35)" rx="2" ry="2" />
<text  x="81.27" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="309.0" y="469" width="2.1" height="15.0" fill="rgb(234,189,19)" rx="2" ry="2" />
<text  x="312.04" y="479.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (3 samples, 0.06%)</title><rect x="1111.9" y="597" width="0.7" height="15.0" fill="rgb(230,59,53)" rx="2" ry="2" />
<text  x="1114.94" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="203.4" y="421" width="0.3" height="15.0" fill="rgb(225,196,20)" rx="2" ry="2" />
<text  x="206.44" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (2 samples, 0.04%)</title><rect x="306.1" y="501" width="0.4" height="15.0" fill="rgb(239,71,47)" rx="2" ry="2" />
<text  x="309.08" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="61.2" y="549" width="0.2" height="15.0" fill="rgb(249,229,11)" rx="2" ry="2" />
<text  x="64.21" y="559.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (22 samples, 0.42%)</title><rect x="461.1" y="485" width="5.0" height="15.0" fill="rgb(210,96,33)" rx="2" ry="2" />
<text  x="464.06" y="495.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="657.5" y="613" width="0.2" height="15.0" fill="rgb(212,102,8)" rx="2" ry="2" />
<text  x="660.46" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (4 samples, 0.08%)</title><rect x="873.9" y="517" width="0.9" height="15.0" fill="rgb(210,47,15)" rx="2" ry="2" />
<text  x="876.89" y="527.5" ></text>
</g>
<g >
<title>cql3::constants::value::~value (1 samples, 0.02%)</title><rect x="653.8" y="629" width="0.3" height="15.0" fill="rgb(238,215,3)" rx="2" ry="2" />
<text  x="656.82" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (12 samples, 0.23%)</title><rect x="986.3" y="517" width="2.7" height="15.0" fill="rgb(244,50,37)" rx="2" ry="2" />
<text  x="989.32" y="527.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="1041.2" y="533" width="0.2" height="15.0" fill="rgb(252,40,18)" rx="2" ry="2" />
<text  x="1044.16" y="543.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1119.9" y="389" width="0.2" height="15.0" fill="rgb(233,148,47)" rx="2" ry="2" />
<text  x="1122.91" y="399.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (4 samples, 0.08%)</title><rect x="76.5" y="533" width="0.9" height="15.0" fill="rgb(250,188,52)" rx="2" ry="2" />
<text  x="79.45" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (4 samples, 0.08%)</title><rect x="781.7" y="501" width="0.9" height="15.0" fill="rgb(245,186,16)" rx="2" ry="2" />
<text  x="784.72" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (23 samples, 0.44%)</title><rect x="730.7" y="581" width="5.3" height="15.0" fill="rgb(230,119,42)" rx="2" ry="2" />
<text  x="733.74" y="591.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare (1 samples, 0.02%)</title><rect x="79.0" y="501" width="0.2" height="15.0" fill="rgb(207,134,43)" rx="2" ry="2" />
<text  x="81.96" y="511.5" ></text>
</g>
<g >
<title>dht::tri_compare (2 samples, 0.04%)</title><rect x="1129.9" y="325" width="0.5" height="15.0" fill="rgb(239,155,19)" rx="2" ry="2" />
<text  x="1132.92" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.69%)</title><rect x="1117.2" y="597" width="8.2" height="15.0" fill="rgb(243,145,11)" rx="2" ry="2" />
<text  x="1120.17" y="607.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (18 samples, 0.35%)</title><rect x="706.2" y="661" width="4.1" height="15.0" fill="rgb(242,30,6)" rx="2" ry="2" />
<text  x="709.17" y="671.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (2 samples, 0.04%)</title><rect x="713.0" y="709" width="0.4" height="15.0" fill="rgb(238,71,48)" rx="2" ry="2" />
<text  x="715.99" y="719.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="648.8" y="677" width="0.2" height="15.0" fill="rgb(236,34,15)" rx="2" ry="2" />
<text  x="651.82" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.10%)</title><rect x="478.6" y="517" width="1.1" height="15.0" fill="rgb(223,132,39)" rx="2" ry="2" />
<text  x="481.59" y="527.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (2 samples, 0.04%)</title><rect x="874.3" y="453" width="0.5" height="15.0" fill="rgb(246,157,7)" rx="2" ry="2" />
<text  x="877.35" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="284.2" y="405" width="0.3" height="15.0" fill="rgb(246,179,13)" rx="2" ry="2" />
<text  x="287.23" y="415.5" ></text>
</g>
<g >
<title>validation::validate_column_family (2 samples, 0.04%)</title><rect x="73.7" y="661" width="0.5" height="15.0" fill="rgb(247,21,4)" rx="2" ry="2" />
<text  x="76.72" y="671.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%)</title><rect x="692.1" y="469" width="0.2" height="15.0" fill="rgb(227,96,16)" rx="2" ry="2" />
<text  x="695.06" y="479.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (4,755 samples, 91.71%)</title><rect x="84.6" y="773" width="1082.2" height="15.0" fill="rgb(213,147,10)" rx="2" ry="2" />
<text  x="87.65" y="783.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="10.7" y="677" width="0.2" height="15.0" fill="rgb(247,138,4)" rx="2" ry="2" />
<text  x="13.68" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (1 samples, 0.02%)</title><rect x="560.3" y="597" width="0.2" height="15.0" fill="rgb(231,81,15)" rx="2" ry="2" />
<text  x="563.29" y="607.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="305.9" y="485" width="0.2" height="15.0" fill="rgb(234,76,31)" rx="2" ry="2" />
<text  x="308.85" y="495.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="1050.0" y="469" width="0.3" height="15.0" fill="rgb(214,68,31)" rx="2" ry="2" />
<text  x="1053.04" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="793.3" y="437" width="0.3" height="15.0" fill="rgb(240,20,16)" rx="2" ry="2" />
<text  x="796.33" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="40.0" y="517" width="0.3" height="15.0" fill="rgb(219,183,43)" rx="2" ry="2" />
<text  x="43.04" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (41 samples, 0.79%)</title><rect x="1052.8" y="549" width="9.3" height="15.0" fill="rgb(210,21,12)" rx="2" ry="2" />
<text  x="1055.77" y="559.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::comparator_type (1 samples, 0.02%)</title><rect x="102.6" y="533" width="0.3" height="15.0" fill="rgb(225,101,52)" rx="2" ry="2" />
<text  x="105.62" y="543.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%)</title><rect x="17.3" y="517" width="0.2" height="15.0" fill="rgb(222,182,50)" rx="2" ry="2" />
<text  x="20.28" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="40.7" y="437" width="0.5" height="15.0" fill="rgb(220,140,48)" rx="2" ry="2" />
<text  x="43.72" y="447.5" ></text>
</g>
<g >
<title>std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt;::allocator (2 samples, 0.04%)</title><rect x="21.2" y="581" width="0.4" height="15.0" fill="rgb(252,139,12)" rx="2" ry="2" />
<text  x="24.15" y="591.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="200.0" y="437" width="0.3" height="15.0" fill="rgb(217,169,4)" rx="2" ry="2" />
<text  x="203.03" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="548.7" y="517" width="0.2" height="15.0" fill="rgb(214,88,25)" rx="2" ry="2" />
<text  x="551.68" y="527.5" ></text>
</g>
<g >
<title>partition_entry::read (10 samples, 0.19%)</title><rect x="531.6" y="517" width="2.3" height="15.0" fill="rgb(218,162,2)" rx="2" ry="2" />
<text  x="534.61" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="53.9" y="373" width="0.3" height="15.0" fill="rgb(251,67,31)" rx="2" ry="2" />
<text  x="56.92" y="383.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%)</title><rect x="47.8" y="325" width="0.4" height="15.0" fill="rgb(227,93,26)" rx="2" ry="2" />
<text  x="50.78" y="335.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (54 samples, 1.04%)</title><rect x="739.6" y="613" width="12.3" height="15.0" fill="rgb(230,16,12)" rx="2" ry="2" />
<text  x="742.62" y="623.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (15 samples, 0.29%)</title><rect x="68.0" y="629" width="3.4" height="15.0" fill="rgb(225,7,11)" rx="2" ry="2" />
<text  x="71.03" y="639.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="54.6" y="277" width="0.2" height="15.0" fill="rgb(233,85,8)" rx="2" ry="2" />
<text  x="57.61" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%)</title><rect x="1131.7" y="501" width="0.5" height="15.0" fill="rgb(249,36,48)" rx="2" ry="2" />
<text  x="1134.74" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (5 samples, 0.10%)</title><rect x="827.9" y="517" width="1.2" height="15.0" fill="rgb(227,50,52)" rx="2" ry="2" />
<text  x="830.92" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.10%)</title><rect x="41.9" y="469" width="1.1" height="15.0" fill="rgb(209,99,33)" rx="2" ry="2" />
<text  x="44.86" y="479.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (6 samples, 0.12%)</title><rect x="1111.3" y="613" width="1.3" height="15.0" fill="rgb(248,114,2)" rx="2" ry="2" />
<text  x="1114.26" y="623.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="44.6" y="357" width="0.2" height="15.0" fill="rgb(243,28,37)" rx="2" ry="2" />
<text  x="47.59" y="367.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="79.0" y="213" width="0.2" height="15.0" fill="rgb(205,49,7)" rx="2" ry="2" />
<text  x="81.96" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::ensure_entry_if_complete (1 samples, 0.02%)</title><rect x="1132.0" y="469" width="0.2" height="15.0" fill="rgb(254,70,40)" rx="2" ry="2" />
<text  x="1134.97" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, cql3::cql3_type&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, cql3::cql3_type&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="104.0" y="581" width="0.2" height="15.0" fill="rgb(217,90,9)" rx="2" ry="2" />
<text  x="106.99" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (2 samples, 0.04%)</title><rect x="69.2" y="597" width="0.4" height="15.0" fill="rgb(228,33,54)" rx="2" ry="2" />
<text  x="72.17" y="607.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::raw::update_statement*, false&gt;::_Head_base (1 samples, 0.02%)</title><rect x="62.8" y="485" width="0.2" height="15.0" fill="rgb(216,164,17)" rx="2" ry="2" />
<text  x="65.80" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (47 samples, 0.91%)</title><rect x="25.9" y="517" width="10.7" height="15.0" fill="rgb(246,152,1)" rx="2" ry="2" />
<text  x="28.93" y="527.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_token_present (1 samples, 0.02%)</title><rect x="29.1" y="469" width="0.2" height="15.0" fill="rgb(224,214,37)" rx="2" ry="2" />
<text  x="32.12" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="28.0" y="421" width="0.2" height="15.0" fill="rgb(205,106,1)" rx="2" ry="2" />
<text  x="30.98" y="431.5" ></text>
</g>
<g >
<title>database::find_column_family (5 samples, 0.10%)</title><rect x="1012.0" y="453" width="1.2" height="15.0" fill="rgb(253,43,10)" rx="2" ry="2" />
<text  x="1015.03" y="463.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (74 samples, 1.43%)</title><rect x="1064.6" y="517" width="16.8" height="15.0" fill="rgb(226,70,34)" rx="2" ry="2" />
<text  x="1067.60" y="527.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;table&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, table::config, db::commitlog&amp;, compaction_manager&amp;, cell_locker_stats&amp;, cache_tracker&amp;&gt; (1 samples, 0.02%)</title><rect x="104.4" y="677" width="0.3" height="15.0" fill="rgb(243,144,34)" rx="2" ry="2" />
<text  x="107.45" y="687.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (3 samples, 0.06%)</title><rect x="60.1" y="501" width="0.7" height="15.0" fill="rgb(239,53,38)" rx="2" ry="2" />
<text  x="63.07" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="523.2" y="405" width="0.2" height="15.0" fill="rgb(222,225,9)" rx="2" ry="2" />
<text  x="526.19" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::single_column_restrictions&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="652.9" y="629" width="0.2" height="15.0" fill="rgb(232,123,27)" rx="2" ry="2" />
<text  x="655.91" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (8 samples, 0.15%)</title><rect x="1090.8" y="613" width="1.8" height="15.0" fill="rgb(250,71,20)" rx="2" ry="2" />
<text  x="1093.78" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="702.3" y="677" width="0.7" height="15.0" fill="rgb(246,15,25)" rx="2" ry="2" />
<text  x="705.30" y="687.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="956.0" y="597" width="0.3" height="15.0" fill="rgb(235,172,31)" rx="2" ry="2" />
<text  x="959.05" y="607.5" ></text>
</g>
<g >
<title>fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt;::format&lt;fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="18.9" y="677" width="0.2" height="15.0" fill="rgb(235,193,44)" rx="2" ry="2" />
<text  x="21.88" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="466.8" y="485" width="0.2" height="15.0" fill="rgb(236,181,12)" rx="2" ry="2" />
<text  x="469.75" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (2 samples, 0.04%)</title><rect x="69.2" y="581" width="0.4" height="15.0" fill="rgb(209,1,3)" rx="2" ry="2" />
<text  x="72.17" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;column_definition const*, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; (1 samples, 0.02%)</title><rect x="69.2" y="501" width="0.2" height="15.0" fill="rgb(228,201,25)" rx="2" ry="2" />
<text  x="72.17" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="1144.3" y="629" width="0.4" height="15.0" fill="rgb(207,8,15)" rx="2" ry="2" />
<text  x="1147.26" y="639.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="682.7" y="693" width="0.3" height="15.0" fill="rgb(248,218,45)" rx="2" ry="2" />
<text  x="685.73" y="703.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="55.7" y="469" width="0.3" height="15.0" fill="rgb(228,81,19)" rx="2" ry="2" />
<text  x="58.74" y="479.5" ></text>
</g>
<g >
<title>_start (4 samples, 0.08%)</title><rect x="1167.2" y="837" width="1.0" height="15.0" fill="rgb(226,32,51)" rx="2" ry="2" />
<text  x="1170.24" y="847.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%)</title><rect x="657.7" y="597" width="0.2" height="15.0" fill="rgb(241,60,30)" rx="2" ry="2" />
<text  x="660.69" y="607.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (2 samples, 0.04%)</title><rect x="1119.7" y="437" width="0.4" height="15.0" fill="rgb(238,63,7)" rx="2" ry="2" />
<text  x="1122.68" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="924.6" y="565" width="1.2" height="15.0" fill="rgb(230,127,54)" rx="2" ry="2" />
<text  x="927.64" y="575.5" ></text>
</g>
<g >
<title>partition_entry::apply_to_incomplete (1 samples, 0.02%)</title><rect x="1131.7" y="485" width="0.3" height="15.0" fill="rgb(227,116,19)" rx="2" ry="2" />
<text  x="1134.74" y="495.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="80.8" y="677" width="0.2" height="15.0" fill="rgb(235,191,51)" rx="2" ry="2" />
<text  x="83.78" y="687.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="866.6" y="629" width="0.2" height="15.0" fill="rgb(217,195,8)" rx="2" ry="2" />
<text  x="869.61" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (2 samples, 0.04%)</title><rect x="826.8" y="533" width="0.4" height="15.0" fill="rgb(254,34,9)" rx="2" ry="2" />
<text  x="829.78" y="543.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (7 samples, 0.14%)</title><rect x="1152.7" y="661" width="1.6" height="15.0" fill="rgb(218,168,24)" rx="2" ry="2" />
<text  x="1155.68" y="671.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="16.6" y="565" width="0.2" height="15.0" fill="rgb(241,30,1)" rx="2" ry="2" />
<text  x="19.60" y="575.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_limit (1 samples, 0.02%)</title><rect x="1092.6" y="629" width="0.2" height="15.0" fill="rgb(249,225,37)" rx="2" ry="2" />
<text  x="1095.60" y="639.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cdc::generation_service&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="16.8" y="693" width="0.3" height="15.0" fill="rgb(237,4,39)" rx="2" ry="2" />
<text  x="19.83" y="703.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (2 samples, 0.04%)</title><rect x="17.3" y="709" width="0.4" height="15.0" fill="rgb(210,185,31)" rx="2" ry="2" />
<text  x="20.28" y="719.5" ></text>
</g>
<g >
<title>frozen_mutation::partition (1 samples, 0.02%)</title><rect x="1117.4" y="453" width="0.2" height="15.0" fill="rgb(239,155,8)" rx="2" ry="2" />
<text  x="1120.40" y="463.5" ></text>
</g>
<g >
<title>boost::range_detail::default_constructible_unary_fn_wrapper&lt;service::abstract_write_response_handler::max_backlog (1 samples, 0.02%)</title><rect x="713.0" y="613" width="0.2" height="15.0" fill="rgb(248,102,18)" rx="2" ry="2" />
<text  x="715.99" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1088.5" y="565" width="0.2" height="15.0" fill="rgb(231,211,17)" rx="2" ry="2" />
<text  x="1091.50" y="575.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_input (1 samples, 0.02%)</title><rect x="28.4" y="469" width="0.3" height="15.0" fill="rgb(254,108,28)" rx="2" ry="2" />
<text  x="31.43" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (3 samples, 0.06%)</title><rect x="82.8" y="677" width="0.7" height="15.0" fill="rgb(242,83,3)" rx="2" ry="2" />
<text  x="85.83" y="687.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%)</title><rect x="104.2" y="597" width="0.2" height="15.0" fill="rgb(206,194,39)" rx="2" ry="2" />
<text  x="107.22" y="607.5" ></text>
</g>
<g >
<title>db::schema_tables::do_merge_schema (2 samples, 0.04%)</title><rect x="102.6" y="709" width="0.5" height="15.0" fill="rgb(223,25,12)" rx="2" ry="2" />
<text  x="105.62" y="719.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (1 samples, 0.02%)</title><rect x="730.3" y="597" width="0.2" height="15.0" fill="rgb(254,221,46)" rx="2" ry="2" />
<text  x="733.29" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (5 samples, 0.10%)</title><rect x="59.6" y="517" width="1.2" height="15.0" fill="rgb(222,138,43)" rx="2" ry="2" />
<text  x="62.61" y="527.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (65 samples, 1.25%)</title><rect x="23.0" y="581" width="14.8" height="15.0" fill="rgb(234,114,44)" rx="2" ry="2" />
<text  x="25.97" y="591.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (3 samples, 0.06%)</title><rect x="195.0" y="405" width="0.7" height="15.0" fill="rgb(206,29,16)" rx="2" ry="2" />
<text  x="198.02" y="415.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (2 samples, 0.04%)</title><rect x="83.1" y="629" width="0.4" height="15.0" fill="rgb(218,150,27)" rx="2" ry="2" />
<text  x="86.05" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="810.2" y="469" width="0.2" height="15.0" fill="rgb(244,88,35)" rx="2" ry="2" />
<text  x="813.17" y="479.5" ></text>
</g>
<g >
<title>query_result_builder::query_result_builder (1 samples, 0.02%)</title><rect x="601.5" y="645" width="0.2" height="15.0" fill="rgb(217,9,29)" rx="2" ry="2" />
<text  x="604.48" y="655.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mWS (1 samples, 0.02%)</title><rect x="35.9" y="469" width="0.3" height="15.0" fill="rgb(210,163,32)" rx="2" ry="2" />
<text  x="38.94" y="479.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="537.5" y="549" width="0.5" height="15.0" fill="rgb(212,133,30)" rx="2" ry="2" />
<text  x="540.53" y="559.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (4 samples, 0.08%)</title><rect x="605.3" y="597" width="1.0" height="15.0" fill="rgb(248,106,11)" rx="2" ry="2" />
<text  x="608.35" y="607.5" ></text>
</g>
<g >
<title>cdc::generation_service::~generation_service (1 samples, 0.02%)</title><rect x="16.8" y="565" width="0.3" height="15.0" fill="rgb(212,3,36)" rx="2" ry="2" />
<text  x="19.83" y="575.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (2 samples, 0.04%)</title><rect x="1029.6" y="469" width="0.4" height="15.0" fill="rgb(226,110,43)" rx="2" ry="2" />
<text  x="1032.56" y="479.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (271 samples, 5.23%)</title><rect x="475.6" y="549" width="61.7" height="15.0" fill="rgb(243,118,50)" rx="2" ry="2" />
<text  x="478.63" y="559.5" >memtab..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%)</title><rect x="691.8" y="485" width="0.3" height="15.0" fill="rgb(241,191,5)" rx="2" ry="2" />
<text  x="694.83" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (648 samples, 12.50%)</title><rect x="716.9" y="709" width="147.4" height="15.0" fill="rgb(208,54,13)" rx="2" ry="2" />
<text  x="719.86" y="719.5" >seastar::internal:..</text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="650.4" y="693" width="0.5" height="15.0" fill="rgb(225,14,44)" rx="2" ry="2" />
<text  x="653.41" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, std::optional&lt;cdc::topology_description&gt; &gt;, std::_Select1st&lt;std::pair&lt;long const, std::optional&lt;cdc::topology_description&gt; &gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, std::optional&lt;cdc::topology_description&gt; &gt; &gt; &gt;::~_Rb_tree (1 samples, 0.02%)</title><rect x="16.8" y="533" width="0.3" height="15.0" fill="rgb(213,127,32)" rx="2" ry="2" />
<text  x="19.83" y="543.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="58.7" y="501" width="0.2" height="15.0" fill="rgb(253,59,40)" rx="2" ry="2" />
<text  x="61.70" y="511.5" ></text>
</g>
<g >
<title>sstables::sstable::write_simple&lt; (1 samples, 0.02%)</title><rect x="10.7" y="565" width="0.2" height="15.0" fill="rgb(221,58,54)" rx="2" ry="2" />
<text  x="13.68" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,294 samples, 44.24%)</title><rect x="109.9" y="677" width="522.1" height="15.0" fill="rgb(245,110,33)" rx="2" ry="2" />
<text  x="112.91" y="687.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1020.5" y="389" width="0.2" height="15.0" fill="rgb(248,159,22)" rx="2" ry="2" />
<text  x="1023.45" y="399.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%)</title><rect x="1018.4" y="357" width="0.2" height="15.0" fill="rgb(228,15,46)" rx="2" ry="2" />
<text  x="1021.41" y="367.5" ></text>
</g>
<g >
<title>distributed_loader::populate_keyspace (1 samples, 0.02%)</title><rect x="693.0" y="693" width="0.2" height="15.0" fill="rgb(215,209,39)" rx="2" ry="2" />
<text  x="695.97" y="703.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%)</title><rect x="526.2" y="421" width="0.2" height="15.0" fill="rgb(213,66,23)" rx="2" ry="2" />
<text  x="529.15" y="431.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="54.6" y="325" width="0.2" height="15.0" fill="rgb(211,199,10)" rx="2" ry="2" />
<text  x="57.61" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="38.4" y="389" width="0.3" height="15.0" fill="rgb(229,128,27)" rx="2" ry="2" />
<text  x="41.45" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1133.3" y="709" width="0.3" height="15.0" fill="rgb(211,185,42)" rx="2" ry="2" />
<text  x="1136.33" y="719.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="995.0" y="469" width="1.3" height="15.0" fill="rgb(249,9,17)" rx="2" ry="2" />
<text  x="997.96" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;managed_bytes&gt;::_M_reset (1 samples, 0.02%)</title><rect x="916.7" y="565" width="0.2" height="15.0" fill="rgb(206,132,46)" rx="2" ry="2" />
<text  x="919.68" y="575.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="109.0" y="677" width="0.5" height="15.0" fill="rgb(249,99,22)" rx="2" ry="2" />
<text  x="112.00" y="687.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (2 samples, 0.04%)</title><rect x="872.3" y="469" width="0.5" height="15.0" fill="rgb(213,180,48)" rx="2" ry="2" />
<text  x="875.30" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%)</title><rect x="10.2" y="581" width="0.3" height="15.0" fill="rgb(206,167,50)" rx="2" ry="2" />
<text  x="13.23" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::response_wait (1 samples, 0.02%)</title><rect x="1125.8" y="469" width="0.3" height="15.0" fill="rgb(222,125,51)" rx="2" ry="2" />
<text  x="1128.82" y="479.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (2 samples, 0.04%)</title><rect x="253.5" y="341" width="0.5" height="15.0" fill="rgb(234,22,40)" rx="2" ry="2" />
<text  x="256.51" y="351.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (1 samples, 0.02%)</title><rect x="269.7" y="453" width="0.2" height="15.0" fill="rgb(246,79,22)" rx="2" ry="2" />
<text  x="272.67" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1060.5" y="485" width="0.2" height="15.0" fill="rgb(215,218,19)" rx="2" ry="2" />
<text  x="1063.51" y="495.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (3 samples, 0.06%)</title><rect x="691.6" y="629" width="0.7" height="15.0" fill="rgb(223,228,34)" rx="2" ry="2" />
<text  x="694.60" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="43.9" y="453" width="0.5" height="15.0" fill="rgb(231,171,10)" rx="2" ry="2" />
<text  x="46.91" y="463.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (1 samples, 0.02%)</title><rect x="418.7" y="453" width="0.3" height="15.0" fill="rgb(245,62,16)" rx="2" ry="2" />
<text  x="421.73" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (558 samples, 10.76%)</title><rect x="165.4" y="533" width="127.0" height="15.0" fill="rgb(241,222,29)" rx="2" ry="2" />
<text  x="168.44" y="543.5" >mutation_reader..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (8 samples, 0.15%)</title><rect x="1148.4" y="661" width="1.8" height="15.0" fill="rgb(209,9,10)" rx="2" ry="2" />
<text  x="1151.35" y="671.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%)</title><rect x="971.5" y="469" width="0.3" height="15.0" fill="rgb(206,4,37)" rx="2" ry="2" />
<text  x="974.52" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="590.8" y="629" width="0.4" height="15.0" fill="rgb(211,215,28)" rx="2" ry="2" />
<text  x="593.78" y="639.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (185 samples, 3.57%)</title><rect x="22.7" y="597" width="42.1" height="15.0" fill="rgb(226,83,3)" rx="2" ry="2" />
<text  x="25.74" y="607.5" >cql..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%)</title><rect x="1157.2" y="677" width="0.7" height="15.0" fill="rgb(216,152,7)" rx="2" ry="2" />
<text  x="1160.23" y="687.5" ></text>
</g>
<g >
<title>cql3::functions::functions::clear_functions (1 samples, 0.02%)</title><rect x="17.1" y="645" width="0.2" height="15.0" fill="rgb(215,154,49)" rx="2" ry="2" />
<text  x="20.05" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_service_level_attachments_statement, std::default_delete&lt;cql3::statements::list_service_level_attachments_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::list_service_level_attachments_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="65.1" y="597" width="0.2" height="15.0" fill="rgb(225,95,5)" rx="2" ry="2" />
<text  x="68.07" y="607.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.17%)</title><rect x="405.5" y="357" width="2.1" height="15.0" fill="rgb(225,61,4)" rx="2" ry="2" />
<text  x="408.53" y="367.5" ></text>
</g>
<g >
<title>table::table (1 samples, 0.02%)</title><rect x="104.4" y="661" width="0.3" height="15.0" fill="rgb(227,101,52)" rx="2" ry="2" />
<text  x="107.45" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::expr::expression::impl&gt;, void&gt; (2 samples, 0.04%)</title><rect x="53.2" y="453" width="0.5" height="15.0" fill="rgb(250,167,11)" rx="2" ry="2" />
<text  x="56.24" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (3 samples, 0.06%)</title><rect x="50.7" y="469" width="0.7" height="15.0" fill="rgb(250,198,45)" rx="2" ry="2" />
<text  x="53.74" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="60.3" y="437" width="0.2" height="15.0" fill="rgb(225,164,43)" rx="2" ry="2" />
<text  x="63.30" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="122.9" y="581" width="0.2" height="15.0" fill="rgb(226,30,26)" rx="2" ry="2" />
<text  x="125.88" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (1 samples, 0.02%)</title><rect x="246.9" y="341" width="0.2" height="15.0" fill="rgb(216,227,33)" rx="2" ry="2" />
<text  x="249.91" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="805.8" y="405" width="0.3" height="15.0" fill="rgb(220,26,6)" rx="2" ry="2" />
<text  x="808.85" y="415.5" ></text>
</g>
<g >
<title>db::schema_tables::read_schema_partition_for_keyspace (1 samples, 0.02%)</title><rect x="102.9" y="677" width="0.2" height="15.0" fill="rgb(206,189,15)" rx="2" ry="2" />
<text  x="105.85" y="687.5" ></text>
</g>
<g >
<title>database::do_apply (35 samples, 0.68%)</title><rect x="1117.2" y="549" width="7.9" height="15.0" fill="rgb(225,178,38)" rx="2" ry="2" />
<text  x="1120.17" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (3 samples, 0.06%)</title><rect x="1033.4" y="485" width="0.7" height="15.0" fill="rgb(226,117,21)" rx="2" ry="2" />
<text  x="1036.43" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::binary_operator&gt; (1 samples, 0.02%)</title><rect x="68.7" y="565" width="0.2" height="15.0" fill="rgb(251,187,52)" rx="2" ry="2" />
<text  x="71.72" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (2 samples, 0.04%)</title><rect x="157.7" y="581" width="0.5" height="15.0" fill="rgb(246,19,25)" rx="2" ry="2" />
<text  x="160.70" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="76.5" y="485" width="0.6" height="15.0" fill="rgb(244,204,25)" rx="2" ry="2" />
<text  x="79.45" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (11 samples, 0.21%)</title><rect x="23.2" y="485" width="2.5" height="15.0" fill="rgb(225,155,45)" rx="2" ry="2" />
<text  x="26.20" y="495.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (1 samples, 0.02%)</title><rect x="1122.4" y="437" width="0.2" height="15.0" fill="rgb(212,82,6)" rx="2" ry="2" />
<text  x="1125.41" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="549.4" y="597" width="1.8" height="15.0" fill="rgb(254,53,38)" rx="2" ry="2" />
<text  x="552.36" y="607.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (7 samples, 0.14%)</title><rect x="803.8" y="325" width="1.6" height="15.0" fill="rgb(211,173,24)" rx="2" ry="2" />
<text  x="806.80" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="545.9" y="453" width="0.3" height="15.0" fill="rgb(216,12,40)" rx="2" ry="2" />
<text  x="548.95" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (1 samples, 0.02%)</title><rect x="127.4" y="661" width="0.3" height="15.0" fill="rgb(208,113,38)" rx="2" ry="2" />
<text  x="130.43" y="671.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="145.2" y="597" width="0.4" height="15.0" fill="rgb(234,106,10)" rx="2" ry="2" />
<text  x="148.18" y="607.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="60.1" y="261" width="0.2" height="15.0" fill="rgb(232,124,18)" rx="2" ry="2" />
<text  x="63.07" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (2 samples, 0.04%)</title><rect x="873.9" y="501" width="0.4" height="15.0" fill="rgb(216,137,27)" rx="2" ry="2" />
<text  x="876.89" y="511.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::attributes::raw*, false&gt;::_Head_base (1 samples, 0.02%)</title><rect x="61.9" y="485" width="0.2" height="15.0" fill="rgb(209,226,24)" rx="2" ry="2" />
<text  x="64.89" y="495.5" ></text>
</g>
<g >
<title>mutation::set_cell (1 samples, 0.02%)</title><rect x="17.3" y="613" width="0.2" height="15.0" fill="rgb(218,94,39)" rx="2" ry="2" />
<text  x="20.28" y="623.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerSharedStateType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedStateType (2 samples, 0.04%)</title><rect x="20.0" y="565" width="0.5" height="15.0" fill="rgb(214,32,45)" rx="2" ry="2" />
<text  x="23.01" y="575.5" ></text>
</g>
<g >
<title>db::system_keyspace::query (1 samples, 0.02%)</title><rect x="102.9" y="661" width="0.2" height="15.0" fill="rgb(221,16,18)" rx="2" ry="2" />
<text  x="105.85" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="200.7" y="437" width="0.2" height="15.0" fill="rgb(209,57,38)" rx="2" ry="2" />
<text  x="203.71" y="447.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="104.9" y="709" width="0.5" height="15.0" fill="rgb(226,24,19)" rx="2" ry="2" />
<text  x="107.90" y="719.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="83.7" y="725" width="0.3" height="15.0" fill="rgb(250,203,27)" rx="2" ry="2" />
<text  x="86.74" y="735.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::restrictions::has_eq_null (2 samples, 0.04%)</title><rect x="868.7" y="549" width="0.4" height="15.0" fill="rgb(210,66,34)" rx="2" ry="2" />
<text  x="871.66" y="559.5" ></text>
</g>
<g >
<title>database::find_schema (2 samples, 0.04%)</title><rect x="73.7" y="645" width="0.5" height="15.0" fill="rgb(233,216,51)" rx="2" ry="2" />
<text  x="76.72" y="655.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;char*&gt;::pointer_to (1 samples, 0.02%)</title><rect x="25.0" y="357" width="0.2" height="15.0" fill="rgb(248,98,54)" rx="2" ry="2" />
<text  x="28.02" y="367.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (2 samples, 0.04%)</title><rect x="1129.9" y="341" width="0.5" height="15.0" fill="rgb(241,218,25)" rx="2" ry="2" />
<text  x="1132.92" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::conjunction::~conjunction (1 samples, 0.02%)</title><rect x="48.7" y="517" width="0.2" height="15.0" fill="rgb(245,192,20)" rx="2" ry="2" />
<text  x="51.69" y="527.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="1130.6" y="341" width="0.2" height="15.0" fill="rgb(229,218,11)" rx="2" ry="2" />
<text  x="1133.60" y="351.5" ></text>
</g>
<g >
<title>database::find_uuid (22 samples, 0.42%)</title><rect x="825.6" y="565" width="5.1" height="15.0" fill="rgb(230,191,36)" rx="2" ry="2" />
<text  x="828.65" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="53.9" y="389" width="0.3" height="15.0" fill="rgb(208,181,54)" rx="2" ry="2" />
<text  x="56.92" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="43.9" y="533" width="0.5" height="15.0" fill="rgb(227,219,48)" rx="2" ry="2" />
<text  x="46.91" y="543.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="281.3" y="389" width="0.9" height="15.0" fill="rgb(225,14,18)" rx="2" ry="2" />
<text  x="284.27" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (7 samples, 0.14%)</title><rect x="283.6" y="437" width="1.5" height="15.0" fill="rgb(238,170,22)" rx="2" ry="2" />
<text  x="286.55" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="560.1" y="501" width="0.2" height="15.0" fill="rgb(234,92,9)" rx="2" ry="2" />
<text  x="563.06" y="511.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::get&lt;cql3::query_processor::prepare_one&lt;cql_transport::messages::result_message::prepared::cql, cql3::prepared_cache_key_type  (1 samples, 0.02%)</title><rect x="79.0" y="421" width="0.2" height="15.0" fill="rgb(253,21,37)" rx="2" ry="2" />
<text  x="81.96" y="431.5" ></text>
</g>
<g >
<title>query_result_builder::consume (197 samples, 3.80%)</title><rect x="346.1" y="421" width="44.9" height="15.0" fill="rgb(227,63,34)" rx="2" ry="2" />
<text  x="349.14" y="431.5" >quer..</text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="43.9" y="389" width="0.5" height="15.0" fill="rgb(234,4,40)" rx="2" ry="2" />
<text  x="46.91" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%)</title><rect x="655.4" y="677" width="0.2" height="15.0" fill="rgb(234,174,41)" rx="2" ry="2" />
<text  x="658.42" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="295.8" y="533" width="0.3" height="15.0" fill="rgb(240,14,23)" rx="2" ry="2" />
<text  x="298.84" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%)</title><rect x="710.5" y="661" width="0.2" height="15.0" fill="rgb(212,97,18)" rx="2" ry="2" />
<text  x="713.49" y="671.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::raw::update_statement*, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt; (2 samples, 0.04%)</title><rect x="62.3" y="501" width="0.5" height="15.0" fill="rgb(220,159,19)" rx="2" ry="2" />
<text  x="65.34" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="342.7" y="389" width="0.2" height="15.0" fill="rgb(228,125,50)" rx="2" ry="2" />
<text  x="345.72" y="399.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (10 samples, 0.19%)</title><rect x="1142.9" y="677" width="2.3" height="15.0" fill="rgb(229,54,48)" rx="2" ry="2" />
<text  x="1145.89" y="687.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="83.7" y="789" width="0.3" height="15.0" fill="rgb(219,139,53)" rx="2" ry="2" />
<text  x="86.74" y="799.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (2 samples, 0.04%)</title><rect x="17.3" y="741" width="0.4" height="15.0" fill="rgb(249,221,26)" rx="2" ry="2" />
<text  x="20.28" y="751.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="60.3" y="373" width="0.2" height="15.0" fill="rgb(217,224,44)" rx="2" ry="2" />
<text  x="63.30" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="67.6" y="565" width="0.2" height="15.0" fill="rgb(226,56,30)" rx="2" ry="2" />
<text  x="70.58" y="575.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%)</title><rect x="551.2" y="613" width="0.2" height="15.0" fill="rgb(229,174,51)" rx="2" ry="2" />
<text  x="554.18" y="623.5" ></text>
</g>
<g >
<title>cql3::untyped_result_set_row::get_as&lt;signed char&gt; (1 samples, 0.02%)</title><rect x="640.6" y="645" width="0.3" height="15.0" fill="rgb(211,89,51)" rx="2" ry="2" />
<text  x="643.62" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="721.2" y="613" width="1.1" height="15.0" fill="rgb(213,38,48)" rx="2" ry="2" />
<text  x="724.19" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (2 samples, 0.04%)</title><rect x="394.2" y="405" width="0.4" height="15.0" fill="rgb(238,228,44)" rx="2" ry="2" />
<text  x="397.15" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="1028.0" y="453" width="1.1" height="15.0" fill="rgb(252,34,37)" rx="2" ry="2" />
<text  x="1030.96" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (1 samples, 0.02%)</title><rect x="346.6" y="405" width="0.2" height="15.0" fill="rgb(214,62,0)" rx="2" ry="2" />
<text  x="349.59" y="415.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%)</title><rect x="41.9" y="341" width="0.4" height="15.0" fill="rgb(210,126,29)" rx="2" ry="2" />
<text  x="44.86" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="60.1" y="277" width="0.2" height="15.0" fill="rgb(227,62,33)" rx="2" ry="2" />
<text  x="63.07" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (39 samples, 0.75%)</title><rect x="867.7" y="661" width="8.9" height="15.0" fill="rgb(206,215,43)" rx="2" ry="2" />
<text  x="870.75" y="671.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="17.3" y="533" width="0.2" height="15.0" fill="rgb(238,135,53)" rx="2" ry="2" />
<text  x="20.28" y="543.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%)</title><rect x="1040.7" y="501" width="0.2" height="15.0" fill="rgb(253,105,39)" rx="2" ry="2" />
<text  x="1043.71" y="511.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (111 samples, 2.14%)</title><rect x="479.7" y="533" width="25.3" height="15.0" fill="rgb(246,185,32)" rx="2" ry="2" />
<text  x="482.72" y="543.5" >d..</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (2 samples, 0.04%)</title><rect x="60.1" y="485" width="0.4" height="15.0" fill="rgb(220,95,6)" rx="2" ry="2" />
<text  x="63.07" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="54.6" y="437" width="0.2" height="15.0" fill="rgb(212,22,34)" rx="2" ry="2" />
<text  x="57.61" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="949.7" y="565" width="0.4" height="15.0" fill="rgb(219,159,9)" rx="2" ry="2" />
<text  x="952.68" y="575.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (39 samples, 0.75%)</title><rect x="867.7" y="693" width="8.9" height="15.0" fill="rgb(210,176,7)" rx="2" ry="2" />
<text  x="870.75" y="703.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (3 samples, 0.06%)</title><rect x="894.6" y="549" width="0.7" height="15.0" fill="rgb(230,80,53)" rx="2" ry="2" />
<text  x="897.60" y="559.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (2 samples, 0.04%)</title><rect x="331.3" y="437" width="0.5" height="15.0" fill="rgb(221,179,48)" rx="2" ry="2" />
<text  x="334.34" y="447.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (8 samples, 0.15%)</title><rect x="335.7" y="389" width="1.8" height="15.0" fill="rgb(213,131,40)" rx="2" ry="2" />
<text  x="338.67" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="555.7" y="549" width="1.2" height="15.0" fill="rgb(220,71,31)" rx="2" ry="2" />
<text  x="558.74" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (5 samples, 0.10%)</title><rect x="1126.3" y="405" width="1.1" height="15.0" fill="rgb(247,217,34)" rx="2" ry="2" />
<text  x="1129.28" y="415.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerType (2 samples, 0.04%)</title><rect x="20.0" y="597" width="0.5" height="15.0" fill="rgb(221,62,42)" rx="2" ry="2" />
<text  x="23.01" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (10 samples, 0.19%)</title><rect x="683.0" y="693" width="2.2" height="15.0" fill="rgb(251,32,7)" rx="2" ry="2" />
<text  x="685.95" y="703.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (2 samples, 0.04%)</title><rect x="104.0" y="661" width="0.4" height="15.0" fill="rgb(221,28,43)" rx="2" ry="2" />
<text  x="106.99" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="39.4" y="437" width="0.4" height="15.0" fill="rgb(215,209,51)" rx="2" ry="2" />
<text  x="42.36" y="447.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="78.7" y="693" width="0.3" height="15.0" fill="rgb(218,28,15)" rx="2" ry="2" />
<text  x="81.73" y="703.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.12%)</title><rect x="793.8" y="389" width="1.3" height="15.0" fill="rgb(224,9,16)" rx="2" ry="2" />
<text  x="796.78" y="399.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="80.8" y="741" width="0.2" height="15.0" fill="rgb(232,199,28)" rx="2" ry="2" />
<text  x="83.78" y="751.5" ></text>
</g>
<g >
<title>schema_registry::get (17 samples, 0.33%)</title><rect x="977.2" y="565" width="3.9" height="15.0" fill="rgb(221,45,53)" rx="2" ry="2" />
<text  x="980.21" y="575.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (7 samples, 0.14%)</title><rect x="1127.9" y="373" width="1.6" height="15.0" fill="rgb(207,124,50)" rx="2" ry="2" />
<text  x="1130.87" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="103.8" y="517" width="0.2" height="15.0" fill="rgb(215,66,10)" rx="2" ry="2" />
<text  x="106.76" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="691.6" y="597" width="0.7" height="15.0" fill="rgb(254,158,53)" rx="2" ry="2" />
<text  x="694.60" y="607.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (1 samples, 0.02%)</title><rect x="889.8" y="613" width="0.3" height="15.0" fill="rgb(220,196,0)" rx="2" ry="2" />
<text  x="892.82" y="623.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%)</title><rect x="22.1" y="597" width="0.2" height="15.0" fill="rgb(232,217,51)" rx="2" ry="2" />
<text  x="25.06" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%)</title><rect x="961.1" y="581" width="0.4" height="15.0" fill="rgb(216,130,47)" rx="2" ry="2" />
<text  x="964.05" y="591.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (3 samples, 0.06%)</title><rect x="82.8" y="661" width="0.7" height="15.0" fill="rgb(236,15,41)" rx="2" ry="2" />
<text  x="85.83" y="671.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (14 samples, 0.27%)</title><rect x="275.4" y="421" width="3.1" height="15.0" fill="rgb(232,152,48)" rx="2" ry="2" />
<text  x="278.36" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (1 samples, 0.02%)</title><rect x="916.9" y="565" width="0.2" height="15.0" fill="rgb(231,183,13)" rx="2" ry="2" />
<text  x="919.90" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="54.6" y="405" width="0.2" height="15.0" fill="rgb(227,11,48)" rx="2" ry="2" />
<text  x="57.61" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="80.8" y="277" width="0.2" height="15.0" fill="rgb(211,164,1)" rx="2" ry="2" />
<text  x="83.78" y="287.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.08%)</title><rect x="10.2" y="821" width="0.9" height="15.0" fill="rgb(236,145,2)" rx="2" ry="2" />
<text  x="13.23" y="831.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%)</title><rect x="1099.7" y="565" width="1.5" height="15.0" fill="rgb(230,209,23)" rx="2" ry="2" />
<text  x="1102.65" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (4 samples, 0.08%)</title><rect x="596.2" y="581" width="1.0" height="15.0" fill="rgb(229,104,51)" rx="2" ry="2" />
<text  x="599.24" y="591.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (1 samples, 0.02%)</title><rect x="868.4" y="565" width="0.3" height="15.0" fill="rgb(235,55,2)" rx="2" ry="2" />
<text  x="871.43" y="575.5" ></text>
</g>
<g >
<title>posix_memalign (18 samples, 0.35%)</title><rect x="229.6" y="261" width="4.1" height="15.0" fill="rgb(243,180,23)" rx="2" ry="2" />
<text  x="232.61" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.12%)</title><rect x="123.1" y="581" width="1.4" height="15.0" fill="rgb(228,80,50)" rx="2" ry="2" />
<text  x="126.11" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="283.1" y="453" width="0.2" height="15.0" fill="rgb(209,75,43)" rx="2" ry="2" />
<text  x="286.10" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;void&gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;void&gt;::promise_type&gt; (1 samples, 0.02%)</title><rect x="716.6" y="709" width="0.3" height="15.0" fill="rgb(221,206,27)" rx="2" ry="2" />
<text  x="719.63" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="58.7" y="453" width="0.2" height="15.0" fill="rgb(212,53,16)" rx="2" ry="2" />
<text  x="61.70" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::move_it (2 samples, 0.04%)</title><rect x="779.2" y="549" width="0.5" height="15.0" fill="rgb(243,66,33)" rx="2" ry="2" />
<text  x="782.22" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="45.5" y="341" width="0.2" height="15.0" fill="rgb(213,130,24)" rx="2" ry="2" />
<text  x="48.50" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="53.9" y="341" width="0.3" height="15.0" fill="rgb(216,174,53)" rx="2" ry="2" />
<text  x="56.92" y="351.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (2,346 samples, 45.25%)</title><rect x="105.4" y="709" width="533.9" height="15.0" fill="rgb(209,189,46)" rx="2" ry="2" />
<text  x="108.36" y="719.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="999.5" y="501" width="0.2" height="15.0" fill="rgb(243,46,2)" rx="2" ry="2" />
<text  x="1002.52" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::_M_begin (1 samples, 0.02%)</title><rect x="37.1" y="485" width="0.2" height="15.0" fill="rgb(247,160,40)" rx="2" ry="2" />
<text  x="40.08" y="495.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::~path (1 samples, 0.02%)</title><rect x="713.4" y="661" width="0.3" height="15.0" fill="rgb(206,109,28)" rx="2" ry="2" />
<text  x="716.45" y="671.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="58.7" y="485" width="0.2" height="15.0" fill="rgb(249,175,42)" rx="2" ry="2" />
<text  x="61.70" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="565.3" y="517" width="0.2" height="15.0" fill="rgb(242,111,53)" rx="2" ry="2" />
<text  x="568.29" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="774.9" y="581" width="0.5" height="15.0" fill="rgb(238,50,34)" rx="2" ry="2" />
<text  x="777.89" y="591.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="38.0" y="421" width="0.2" height="15.0" fill="rgb(228,173,23)" rx="2" ry="2" />
<text  x="40.99" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%)</title><rect x="42.3" y="405" width="0.7" height="15.0" fill="rgb(211,159,26)" rx="2" ry="2" />
<text  x="45.32" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (13 samples, 0.25%)</title><rect x="143.6" y="629" width="2.9" height="15.0" fill="rgb(218,140,9)" rx="2" ry="2" />
<text  x="146.59" y="639.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="437" width="0.3" height="15.0" fill="rgb(254,134,44)" rx="2" ry="2" />
<text  x="62.84" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="60.3" y="453" width="0.2" height="15.0" fill="rgb(229,183,32)" rx="2" ry="2" />
<text  x="63.30" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (7 samples, 0.14%)</title><rect x="771.3" y="565" width="1.5" height="15.0" fill="rgb(208,121,16)" rx="2" ry="2" />
<text  x="774.25" y="575.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (1 samples, 0.02%)</title><rect x="658.4" y="661" width="0.2" height="15.0" fill="rgb(242,37,49)" rx="2" ry="2" />
<text  x="661.37" y="671.5" ></text>
</g>
<g >
<title>service::storage_proxy::got_response (1 samples, 0.02%)</title><rect x="713.0" y="693" width="0.2" height="15.0" fill="rgb(242,3,38)" rx="2" ry="2" />
<text  x="715.99" y="703.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (3 samples, 0.06%)</title><rect x="954.2" y="597" width="0.7" height="15.0" fill="rgb(219,50,32)" rx="2" ry="2" />
<text  x="957.23" y="607.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (48 samples, 0.93%)</title><rect x="1168.2" y="837" width="10.9" height="15.0" fill="rgb(243,215,10)" rx="2" ry="2" />
<text  x="1171.15" y="847.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.08%)</title><rect x="44.8" y="501" width="0.9" height="15.0" fill="rgb(238,100,44)" rx="2" ry="2" />
<text  x="47.82" y="511.5" ></text>
</g>
<g >
<title>non-virtual thunk to cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::~single_column_primary_key_restrictions (1 samples, 0.02%)</title><rect x="652.9" y="645" width="0.2" height="15.0" fill="rgb(237,211,31)" rx="2" ry="2" />
<text  x="655.91" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (9 samples, 0.17%)</title><rect x="244.9" y="325" width="2.0" height="15.0" fill="rgb(235,33,31)" rx="2" ry="2" />
<text  x="247.86" y="335.5" ></text>
</g>
<g >
<title>dht::tri_compare (2 samples, 0.04%)</title><rect x="1078.9" y="453" width="0.5" height="15.0" fill="rgb(206,228,4)" rx="2" ry="2" />
<text  x="1081.94" y="463.5" ></text>
</g>
<g >
<title>std::forward&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="48.2" y="437" width="0.3" height="15.0" fill="rgb(249,149,37)" rx="2" ry="2" />
<text  x="51.23" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1160.0" y="645" width="0.2" height="15.0" fill="rgb(238,49,45)" rx="2" ry="2" />
<text  x="1162.96" y="655.5" ></text>
</g>
<g >
<title>dht::tri_compare (25 samples, 0.48%)</title><rect x="1069.4" y="437" width="5.7" height="15.0" fill="rgb(234,2,33)" rx="2" ry="2" />
<text  x="1072.38" y="447.5" ></text>
</g>
<g >
<title>db::system_keyspace::compaction_history (1 samples, 0.02%)</title><rect x="16.6" y="485" width="0.2" height="15.0" fill="rgb(235,50,0)" rx="2" ry="2" />
<text  x="19.60" y="495.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="860.5" y="677" width="0.2" height="15.0" fill="rgb(239,37,53)" rx="2" ry="2" />
<text  x="863.46" y="687.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::tombstone_view&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1121.0" y="421" width="0.3" height="15.0" fill="rgb(236,202,23)" rx="2" ry="2" />
<text  x="1124.04" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="247.4" y="357" width="0.2" height="15.0" fill="rgb(253,60,45)" rx="2" ry="2" />
<text  x="250.37" y="367.5" ></text>
</g>
<g >
<title>database::find_column_family (8 samples, 0.15%)</title><rect x="823.8" y="549" width="1.8" height="15.0" fill="rgb(206,137,9)" rx="2" ry="2" />
<text  x="826.82" y="559.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (2 samples, 0.04%)</title><rect x="1021.8" y="421" width="0.5" height="15.0" fill="rgb(209,64,20)" rx="2" ry="2" />
<text  x="1024.82" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (8 samples, 0.15%)</title><rect x="170.9" y="501" width="1.8" height="15.0" fill="rgb(210,140,22)" rx="2" ry="2" />
<text  x="173.90" y="511.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="920.8" y="581" width="0.2" height="15.0" fill="rgb(231,66,18)" rx="2" ry="2" />
<text  x="923.77" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (4 samples, 0.08%)</title><rect x="626.7" y="645" width="1.0" height="15.0" fill="rgb(221,72,18)" rx="2" ry="2" />
<text  x="629.74" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="653.8" y="613" width="0.3" height="15.0" fill="rgb(225,195,46)" rx="2" ry="2" />
<text  x="656.82" y="623.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (1 samples, 0.02%)</title><rect x="66.9" y="565" width="0.2" height="15.0" fill="rgb(210,202,23)" rx="2" ry="2" />
<text  x="69.89" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (3 samples, 0.06%)</title><rect x="990.6" y="469" width="0.7" height="15.0" fill="rgb(214,117,54)" rx="2" ry="2" />
<text  x="993.64" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="1148.4" y="629" width="1.8" height="15.0" fill="rgb(231,34,52)" rx="2" ry="2" />
<text  x="1151.35" y="639.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="46.0" y="373" width="0.2" height="15.0" fill="rgb(254,13,29)" rx="2" ry="2" />
<text  x="48.96" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="119.9" y="581" width="0.2" height="15.0" fill="rgb(229,99,17)" rx="2" ry="2" />
<text  x="122.92" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="35.3" y="405" width="0.2" height="15.0" fill="rgb(232,73,20)" rx="2" ry="2" />
<text  x="38.26" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="82.6" y="517" width="0.2" height="15.0" fill="rgb(241,52,18)" rx="2" ry="2" />
<text  x="85.60" y="527.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (19 samples, 0.37%)</title><rect x="801.1" y="373" width="4.3" height="15.0" fill="rgb(217,18,19)" rx="2" ry="2" />
<text  x="804.07" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%)</title><rect x="1018.2" y="357" width="0.2" height="15.0" fill="rgb(236,150,9)" rx="2" ry="2" />
<text  x="1021.18" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::unique_ptr (1 samples, 0.02%)</title><rect x="57.1" y="469" width="0.2" height="15.0" fill="rgb(224,9,52)" rx="2" ry="2" />
<text  x="60.11" y="479.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (1 samples, 0.02%)</title><rect x="103.5" y="565" width="0.3" height="15.0" fill="rgb(215,118,49)" rx="2" ry="2" />
<text  x="106.54" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="652.7" y="693" width="0.2" height="15.0" fill="rgb(238,65,54)" rx="2" ry="2" />
<text  x="655.68" y="703.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="48.9" y="485" width="0.2" height="15.0" fill="rgb(210,55,54)" rx="2" ry="2" />
<text  x="51.92" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1127.6" y="341" width="0.3" height="15.0" fill="rgb(217,1,19)" rx="2" ry="2" />
<text  x="1130.64" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="583.3" y="549" width="0.2" height="15.0" fill="rgb(206,33,52)" rx="2" ry="2" />
<text  x="586.27" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="25.0" y="437" width="0.5" height="15.0" fill="rgb(251,45,2)" rx="2" ry="2" />
<text  x="28.02" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="692.1" y="517" width="0.2" height="15.0" fill="rgb(231,164,11)" rx="2" ry="2" />
<text  x="695.06" y="527.5" ></text>
</g>
<g >
<title>query::result::builder::builder (1 samples, 0.02%)</title><rect x="600.8" y="645" width="0.2" height="15.0" fill="rgb(236,96,5)" rx="2" ry="2" />
<text  x="603.80" y="655.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare_one&lt;cql_transport::messages::result_message::prepared::cql, cql3::prepared_cache_key_type  (1 samples, 0.02%)</title><rect x="79.0" y="485" width="0.2" height="15.0" fill="rgb(238,96,30)" rx="2" ry="2" />
<text  x="81.96" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (2 samples, 0.04%)</title><rect x="85.3" y="725" width="0.5" height="15.0" fill="rgb(250,89,54)" rx="2" ry="2" />
<text  x="88.33" y="735.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="1023.4" y="437" width="0.2" height="15.0" fill="rgb(235,29,34)" rx="2" ry="2" />
<text  x="1026.41" y="447.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (1 samples, 0.02%)</title><rect x="868.7" y="485" width="0.2" height="15.0" fill="rgb(251,185,40)" rx="2" ry="2" />
<text  x="871.66" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="60.1" y="325" width="0.2" height="15.0" fill="rgb(217,224,9)" rx="2" ry="2" />
<text  x="63.07" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="446.7" y="565" width="0.3" height="15.0" fill="rgb(244,88,1)" rx="2" ry="2" />
<text  x="449.73" y="575.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (10 samples, 0.19%)</title><rect x="1164.3" y="725" width="2.3" height="15.0" fill="rgb(250,14,24)" rx="2" ry="2" />
<text  x="1167.28" y="735.5" ></text>
</g>
<g >
<title>row_cache::make_reader (43 samples, 0.83%)</title><rect x="538.0" y="549" width="9.8" height="15.0" fill="rgb(240,77,36)" rx="2" ry="2" />
<text  x="540.98" y="559.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (4 samples, 0.08%)</title><rect x="254.2" y="357" width="0.9" height="15.0" fill="rgb(243,188,43)" rx="2" ry="2" />
<text  x="257.19" y="367.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (2 samples, 0.04%)</title><rect x="14.1" y="821" width="0.5" height="15.0" fill="rgb(245,229,31)" rx="2" ry="2" />
<text  x="17.10" y="831.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="77.4" y="581" width="0.2" height="15.0" fill="rgb(216,208,34)" rx="2" ry="2" />
<text  x="80.36" y="591.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%)</title><rect x="47.6" y="373" width="0.6" height="15.0" fill="rgb(248,165,21)" rx="2" ry="2" />
<text  x="50.55" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="98.5" y="677" width="0.3" height="15.0" fill="rgb(221,173,51)" rx="2" ry="2" />
<text  x="101.53" y="687.5" ></text>
</g>
<g >
<title>auth::get_permissions (5 samples, 0.10%)</title><rect x="76.2" y="581" width="1.2" height="15.0" fill="rgb(207,105,20)" rx="2" ry="2" />
<text  x="79.23" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (127 samples, 2.45%)</title><rect x="561.2" y="613" width="28.9" height="15.0" fill="rgb(253,102,36)" rx="2" ry="2" />
<text  x="564.20" y="623.5" >fl..</text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="22.5" y="549" width="0.2" height="15.0" fill="rgb(215,196,44)" rx="2" ry="2" />
<text  x="25.52" y="559.5" ></text>
</g>
<g >
<title>database::has_keyspace (5 samples, 0.10%)</title><rect x="852.3" y="613" width="1.1" height="15.0" fill="rgb(238,121,45)" rx="2" ry="2" />
<text  x="855.27" y="623.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (6 samples, 0.12%)</title><rect x="799.2" y="341" width="1.4" height="15.0" fill="rgb(210,195,43)" rx="2" ry="2" />
<text  x="802.25" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (65 samples, 1.25%)</title><rect x="23.0" y="565" width="14.8" height="15.0" fill="rgb(242,90,22)" rx="2" ry="2" />
<text  x="25.97" y="575.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%)</title><rect x="1081.9" y="453" width="0.2" height="15.0" fill="rgb(242,13,8)" rx="2" ry="2" />
<text  x="1084.90" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (15 samples, 0.29%)</title><rect x="838.8" y="629" width="3.5" height="15.0" fill="rgb(205,158,26)" rx="2" ry="2" />
<text  x="841.84" y="639.5" ></text>
</g>
<g >
<title>compound_type&lt; (19 samples, 0.37%)</title><rect x="939.4" y="581" width="4.4" height="15.0" fill="rgb(250,149,35)" rx="2" ry="2" />
<text  x="942.43" y="591.5" ></text>
</g>
<g >
<title>cdc::generation_service::~generation_service (1 samples, 0.02%)</title><rect x="16.8" y="549" width="0.3" height="15.0" fill="rgb(225,216,6)" rx="2" ry="2" />
<text  x="19.83" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="54.8" y="421" width="0.7" height="15.0" fill="rgb(226,84,35)" rx="2" ry="2" />
<text  x="57.83" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="1040.5" y="501" width="0.2" height="15.0" fill="rgb(239,38,16)" rx="2" ry="2" />
<text  x="1043.48" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="937.2" y="581" width="0.2" height="15.0" fill="rgb(206,35,16)" rx="2" ry="2" />
<text  x="940.16" y="591.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="55.5" y="277" width="0.2" height="15.0" fill="rgb(235,28,34)" rx="2" ry="2" />
<text  x="58.52" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (4 samples, 0.08%)</title><rect x="747.4" y="533" width="0.9" height="15.0" fill="rgb(248,95,1)" rx="2" ry="2" />
<text  x="750.36" y="543.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="1126.5" y="341" width="0.2" height="15.0" fill="rgb(242,117,33)" rx="2" ry="2" />
<text  x="1129.51" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (6 samples, 0.12%)</title><rect x="659.3" y="677" width="1.3" height="15.0" fill="rgb(215,62,51)" rx="2" ry="2" />
<text  x="662.28" y="687.5" ></text>
</g>
<g >
<title>ser::row_view::columns (1 samples, 0.02%)</title><rect x="1122.2" y="437" width="0.2" height="15.0" fill="rgb(248,17,43)" rx="2" ry="2" />
<text  x="1125.18" y="447.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (8 samples, 0.15%)</title><rect x="743.3" y="565" width="1.8" height="15.0" fill="rgb(226,15,46)" rx="2" ry="2" />
<text  x="746.26" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="752.4" y="597" width="0.2" height="15.0" fill="rgb(227,2,31)" rx="2" ry="2" />
<text  x="755.36" y="607.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="61.9" y="517" width="0.2" height="15.0" fill="rgb(251,206,41)" rx="2" ry="2" />
<text  x="64.89" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (23 samples, 0.44%)</title><rect x="421.7" y="437" width="5.2" height="15.0" fill="rgb(242,30,53)" rx="2" ry="2" />
<text  x="424.69" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (179 samples, 3.45%)</title><rect x="208.7" y="389" width="40.7" height="15.0" fill="rgb(247,199,43)" rx="2" ry="2" />
<text  x="211.68" y="399.5" >mut..</text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::future (1 samples, 0.02%)</title><rect x="969.9" y="581" width="0.3" height="15.0" fill="rgb(207,202,36)" rx="2" ry="2" />
<text  x="972.93" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="197.1" y="405" width="1.8" height="15.0" fill="rgb(235,134,25)" rx="2" ry="2" />
<text  x="200.07" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (3 samples, 0.06%)</title><rect x="81.9" y="549" width="0.7" height="15.0" fill="rgb(220,9,42)" rx="2" ry="2" />
<text  x="84.92" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (12 samples, 0.23%)</title><rect x="81.0" y="709" width="2.7" height="15.0" fill="rgb(216,28,35)" rx="2" ry="2" />
<text  x="84.00" y="719.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write&lt;seastar::memory_output_stream&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="1124.0" y="437" width="0.5" height="15.0" fill="rgb(222,18,52)" rx="2" ry="2" />
<text  x="1127.00" y="447.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cell (1 samples, 0.02%)</title><rect x="83.1" y="549" width="0.2" height="15.0" fill="rgb(216,143,16)" rx="2" ry="2" />
<text  x="86.05" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%)</title><rect x="866.6" y="597" width="0.2" height="15.0" fill="rgb(205,153,46)" rx="2" ry="2" />
<text  x="869.61" y="607.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (21 samples, 0.41%)</title><rect x="286.3" y="501" width="4.8" height="15.0" fill="rgb(247,15,5)" rx="2" ry="2" />
<text  x="289.28" y="511.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (9 samples, 0.17%)</title><rect x="438.8" y="565" width="2.0" height="15.0" fill="rgb(242,182,53)" rx="2" ry="2" />
<text  x="441.76" y="575.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (7 samples, 0.14%)</title><rect x="1152.7" y="677" width="1.6" height="15.0" fill="rgb(248,43,23)" rx="2" ry="2" />
<text  x="1155.68" y="687.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%)</title><rect x="692.7" y="709" width="0.3" height="15.0" fill="rgb(246,211,37)" rx="2" ry="2" />
<text  x="695.74" y="719.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (1 samples, 0.02%)</title><rect x="855.9" y="597" width="0.2" height="15.0" fill="rgb(215,4,34)" rx="2" ry="2" />
<text  x="858.91" y="607.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="507.3" y="533" width="0.2" height="15.0" fill="rgb(250,220,41)" rx="2" ry="2" />
<text  x="510.26" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="38.0" y="517" width="0.7" height="15.0" fill="rgb(207,77,32)" rx="2" ry="2" />
<text  x="40.99" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (2 samples, 0.04%)</title><rect x="629.2" y="597" width="0.5" height="15.0" fill="rgb(209,229,22)" rx="2" ry="2" />
<text  x="632.24" y="607.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%)</title><rect x="1142.4" y="693" width="0.3" height="15.0" fill="rgb(241,207,3)" rx="2" ry="2" />
<text  x="1145.44" y="703.5" ></text>
</g>
<g >
<title>database::query (85 samples, 1.64%)</title><rect x="1008.6" y="469" width="19.4" height="15.0" fill="rgb(207,108,30)" rx="2" ry="2" />
<text  x="1011.62" y="479.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%)</title><rect x="17.3" y="485" width="0.2" height="15.0" fill="rgb(211,169,19)" rx="2" ry="2" />
<text  x="20.28" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="83.7" y="821" width="0.3" height="15.0" fill="rgb(241,61,33)" rx="2" ry="2" />
<text  x="86.74" y="831.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (1 samples, 0.02%)</title><rect x="908.5" y="501" width="0.2" height="15.0" fill="rgb(246,148,34)" rx="2" ry="2" />
<text  x="911.48" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;, merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="640.9" y="677" width="0.2" height="15.0" fill="rgb(216,187,16)" rx="2" ry="2" />
<text  x="643.85" y="687.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="47.6" y="501" width="0.6" height="15.0" fill="rgb(254,113,41)" rx="2" ry="2" />
<text  x="50.55" y="511.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_stream (1 samples, 0.02%)</title><rect x="10.7" y="581" width="0.2" height="15.0" fill="rgb(214,127,16)" rx="2" ry="2" />
<text  x="13.68" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="39.1" y="437" width="0.3" height="15.0" fill="rgb(238,210,0)" rx="2" ry="2" />
<text  x="42.13" y="447.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="49.4" y="437" width="0.7" height="15.0" fill="rgb(211,214,1)" rx="2" ry="2" />
<text  x="52.37" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (37 samples, 0.71%)</title><rect x="900.1" y="501" width="8.4" height="15.0" fill="rgb(209,224,23)" rx="2" ry="2" />
<text  x="903.06" y="511.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (12 samples, 0.23%)</title><rect x="81.0" y="789" width="2.7" height="15.0" fill="rgb(223,111,37)" rx="2" ry="2" />
<text  x="84.00" y="799.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="660.2" y="661" width="0.2" height="15.0" fill="rgb(224,151,39)" rx="2" ry="2" />
<text  x="663.19" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="537.3" y="549" width="0.2" height="15.0" fill="rgb(244,191,22)" rx="2" ry="2" />
<text  x="540.30" y="559.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (14 samples, 0.27%)</title><rect x="632.9" y="693" width="3.2" height="15.0" fill="rgb(211,51,33)" rx="2" ry="2" />
<text  x="635.89" y="703.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (1 samples, 0.02%)</title><rect x="1122.4" y="405" width="0.2" height="15.0" fill="rgb(222,192,51)" rx="2" ry="2" />
<text  x="1125.41" y="415.5" ></text>
</g>
<g >
<title>row::compact_and_expire (92 samples, 1.77%)</title><rect x="393.7" y="421" width="20.9" height="15.0" fill="rgb(237,82,16)" rx="2" ry="2" />
<text  x="396.70" y="431.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare (1 samples, 0.02%)</title><rect x="79.0" y="517" width="0.2" height="15.0" fill="rgb(240,66,2)" rx="2" ry="2" />
<text  x="81.96" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (5 samples, 0.10%)</title><rect x="677.0" y="677" width="1.2" height="15.0" fill="rgb(241,193,32)" rx="2" ry="2" />
<text  x="680.04" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (2 samples, 0.04%)</title><rect x="1018.6" y="341" width="0.5" height="15.0" fill="rgb(252,207,7)" rx="2" ry="2" />
<text  x="1021.63" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (1 samples, 0.02%)</title><rect x="868.7" y="517" width="0.2" height="15.0" fill="rgb(239,109,41)" rx="2" ry="2" />
<text  x="871.66" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%)</title><rect x="296.5" y="549" width="0.3" height="15.0" fill="rgb(244,138,12)" rx="2" ry="2" />
<text  x="299.52" y="559.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="497.0" y="437" width="0.2" height="15.0" fill="rgb(251,111,5)" rx="2" ry="2" />
<text  x="500.02" y="447.5" ></text>
</g>
<g >
<title>table::update_cache (2 samples, 0.04%)</title><rect x="1131.7" y="677" width="0.5" height="15.0" fill="rgb(212,159,53)" rx="2" ry="2" />
<text  x="1134.74" y="687.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="622.9" y="597" width="0.7" height="15.0" fill="rgb(248,191,20)" rx="2" ry="2" />
<text  x="625.87" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (21 samples, 0.41%)</title><rect x="432.4" y="517" width="4.8" height="15.0" fill="rgb(227,31,40)" rx="2" ry="2" />
<text  x="435.39" y="527.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_tables_and_views (1 samples, 0.02%)</title><rect x="102.6" y="693" width="0.3" height="15.0" fill="rgb(237,154,28)" rx="2" ry="2" />
<text  x="105.62" y="703.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (2 samples, 0.04%)</title><rect x="12.0" y="789" width="0.5" height="15.0" fill="rgb(232,128,22)" rx="2" ry="2" />
<text  x="15.05" y="799.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="102.6" y="485" width="0.3" height="15.0" fill="rgb(232,184,37)" rx="2" ry="2" />
<text  x="105.62" y="495.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (1 samples, 0.02%)</title><rect x="708.9" y="629" width="0.2" height="15.0" fill="rgb(254,55,15)" rx="2" ry="2" />
<text  x="711.90" y="639.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (16 samples, 0.31%)</title><rect x="1127.4" y="453" width="3.7" height="15.0" fill="rgb(222,56,37)" rx="2" ry="2" />
<text  x="1130.42" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="766.7" y="533" width="0.2" height="15.0" fill="rgb(231,134,2)" rx="2" ry="2" />
<text  x="769.70" y="543.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;fragment_range&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="872.3" y="453" width="0.5" height="15.0" fill="rgb(206,223,50)" rx="2" ry="2" />
<text  x="875.30" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="45.3" y="357" width="0.4" height="15.0" fill="rgb(239,116,13)" rx="2" ry="2" />
<text  x="48.27" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="706.6" y="629" width="0.2" height="15.0" fill="rgb(254,123,7)" rx="2" ry="2" />
<text  x="709.62" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%)</title><rect x="101.0" y="693" width="0.5" height="15.0" fill="rgb(210,222,49)" rx="2" ry="2" />
<text  x="104.03" y="703.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1121.7" y="437" width="0.3" height="15.0" fill="rgb(240,49,16)" rx="2" ry="2" />
<text  x="1124.73" y="447.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,755 samples, 91.71%)</title><rect x="84.6" y="789" width="1082.2" height="15.0" fill="rgb(221,171,34)" rx="2" ry="2" />
<text  x="87.65" y="799.5" >seastar::app_template::run</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%)</title><rect x="58.9" y="501" width="0.3" height="15.0" fill="rgb(217,114,33)" rx="2" ry="2" />
<text  x="61.93" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="79.0" y="85" width="0.2" height="15.0" fill="rgb(231,132,23)" rx="2" ry="2" />
<text  x="81.96" y="95.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (1 samples, 0.02%)</title><rect x="1083.9" y="549" width="0.3" height="15.0" fill="rgb(248,76,9)" rx="2" ry="2" />
<text  x="1086.95" y="559.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="681.4" y="645" width="0.2" height="15.0" fill="rgb(245,165,9)" rx="2" ry="2" />
<text  x="684.36" y="655.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="81.2" y="613" width="0.3" height="15.0" fill="rgb(239,48,48)" rx="2" ry="2" />
<text  x="84.23" y="623.5" ></text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%)</title><rect x="17.5" y="645" width="0.2" height="15.0" fill="rgb(227,58,50)" rx="2" ry="2" />
<text  x="20.51" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="467.2" y="485" width="0.2" height="15.0" fill="rgb(206,135,49)" rx="2" ry="2" />
<text  x="470.21" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="22.5" y="533" width="0.2" height="15.0" fill="rgb(229,180,22)" rx="2" ry="2" />
<text  x="25.52" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="722.3" y="629" width="0.3" height="15.0" fill="rgb(248,109,54)" rx="2" ry="2" />
<text  x="725.32" y="639.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1132.0" y="437" width="0.2" height="15.0" fill="rgb(206,177,52)" rx="2" ry="2" />
<text  x="1134.97" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="985.6" y="549" width="0.3" height="15.0" fill="rgb(224,203,41)" rx="2" ry="2" />
<text  x="988.63" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (3 samples, 0.06%)</title><rect x="189.8" y="437" width="0.7" height="15.0" fill="rgb(230,8,36)" rx="2" ry="2" />
<text  x="192.79" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::list_service_level_attachments_statement, std::default_delete&lt;cql3::statements::list_service_level_attachments_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="63.5" y="581" width="0.2" height="15.0" fill="rgb(230,96,5)" rx="2" ry="2" />
<text  x="66.48" y="591.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="533.2" y="485" width="0.7" height="15.0" fill="rgb(249,61,17)" rx="2" ry="2" />
<text  x="536.21" y="495.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (56 samples, 1.08%)</title><rect x="923.7" y="597" width="12.8" height="15.0" fill="rgb(228,55,2)" rx="2" ry="2" />
<text  x="926.73" y="607.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;flush_reader::get_next_partition (1 samples, 0.02%)</title><rect x="81.0" y="629" width="0.2" height="15.0" fill="rgb(230,69,22)" rx="2" ry="2" />
<text  x="84.00" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (9 samples, 0.17%)</title><rect x="567.8" y="517" width="2.0" height="15.0" fill="rgb(230,88,53)" rx="2" ry="2" />
<text  x="570.80" y="527.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%)</title><rect x="338.9" y="373" width="0.2" height="15.0" fill="rgb(233,215,49)" rx="2" ry="2" />
<text  x="341.85" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::has_eq_null (2 samples, 0.04%)</title><rect x="868.7" y="565" width="0.4" height="15.0" fill="rgb(211,184,23)" rx="2" ry="2" />
<text  x="871.66" y="575.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (6 samples, 0.12%)</title><rect x="340.4" y="389" width="1.4" height="15.0" fill="rgb(225,42,43)" rx="2" ry="2" />
<text  x="343.45" y="399.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (100 samples, 1.93%)</title><rect x="1007.7" y="485" width="22.8" height="15.0" fill="rgb(244,167,16)" rx="2" ry="2" />
<text  x="1010.71" y="495.5" >s..</text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="936.5" y="597" width="0.2" height="15.0" fill="rgb(226,50,46)" rx="2" ry="2" />
<text  x="939.48" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (4 samples, 0.08%)</title><rect x="50.7" y="485" width="0.9" height="15.0" fill="rgb(254,199,30)" rx="2" ry="2" />
<text  x="53.74" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (25 samples, 0.48%)</title><rect x="1125.8" y="565" width="5.7" height="15.0" fill="rgb(223,83,52)" rx="2" ry="2" />
<text  x="1128.82" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (18 samples, 0.35%)</title><rect x="993.4" y="517" width="4.1" height="15.0" fill="rgb(215,163,34)" rx="2" ry="2" />
<text  x="996.37" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%)</title><rect x="1119.0" y="405" width="0.2" height="15.0" fill="rgb(245,7,25)" rx="2" ry="2" />
<text  x="1122.00" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.08%)</title><rect x="1080.5" y="501" width="0.9" height="15.0" fill="rgb(233,60,18)" rx="2" ry="2" />
<text  x="1083.53" y="511.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (5 samples, 0.10%)</title><rect x="334.1" y="405" width="1.1" height="15.0" fill="rgb(218,3,22)" rx="2" ry="2" />
<text  x="337.07" y="415.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (9 samples, 0.17%)</title><rect x="1017.7" y="373" width="2.1" height="15.0" fill="rgb(215,159,37)" rx="2" ry="2" />
<text  x="1020.72" y="383.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (1 samples, 0.02%)</title><rect x="40.5" y="549" width="0.2" height="15.0" fill="rgb(222,180,7)" rx="2" ry="2" />
<text  x="43.50" y="559.5" ></text>
</g>
<g >
<title>std::optional&lt;cql3::restrictions::statement_restrictions&gt;::operator=&lt;cql3::restrictions::statement_restrictions&gt; (1 samples, 0.02%)</title><rect x="71.0" y="613" width="0.2" height="15.0" fill="rgb(218,10,36)" rx="2" ry="2" />
<text  x="73.99" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="39.1" y="533" width="0.3" height="15.0" fill="rgb(245,93,48)" rx="2" ry="2" />
<text  x="42.13" y="543.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="20.0" y="469" width="0.2" height="15.0" fill="rgb(234,46,51)" rx="2" ry="2" />
<text  x="23.01" y="479.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (1 samples, 0.02%)</title><rect x="1030.9" y="485" width="0.2" height="15.0" fill="rgb(251,63,49)" rx="2" ry="2" />
<text  x="1033.92" y="495.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%)</title><rect x="1128.6" y="309" width="0.2" height="15.0" fill="rgb(216,225,2)" rx="2" ry="2" />
<text  x="1131.55" y="319.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (6 samples, 0.12%)</title><rect x="311.8" y="517" width="1.3" height="15.0" fill="rgb(209,225,41)" rx="2" ry="2" />
<text  x="314.77" y="527.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (2 samples, 0.04%)</title><rect x="709.6" y="645" width="0.4" height="15.0" fill="rgb(254,206,43)" rx="2" ry="2" />
<text  x="712.58" y="655.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare_internal (1 samples, 0.02%)</title><rect x="80.8" y="549" width="0.2" height="15.0" fill="rgb(215,47,45)" rx="2" ry="2" />
<text  x="83.78" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%)</title><rect x="873.7" y="405" width="0.2" height="15.0" fill="rgb(214,200,40)" rx="2" ry="2" />
<text  x="876.66" y="415.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (5 samples, 0.10%)</title><rect x="76.2" y="613" width="1.2" height="15.0" fill="rgb(249,116,12)" rx="2" ry="2" />
<text  x="79.23" y="623.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (1 samples, 0.02%)</title><rect x="875.0" y="549" width="0.3" height="15.0" fill="rgb(252,174,25)" rx="2" ry="2" />
<text  x="878.03" y="559.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (12 samples, 0.23%)</title><rect x="40.7" y="549" width="2.8" height="15.0" fill="rgb(251,61,45)" rx="2" ry="2" />
<text  x="43.72" y="559.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="71.4" y="581" width="0.3" height="15.0" fill="rgb(243,162,13)" rx="2" ry="2" />
<text  x="74.45" y="591.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="807.4" y="421" width="0.3" height="15.0" fill="rgb(248,195,54)" rx="2" ry="2" />
<text  x="810.44" y="431.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="50.5" y="485" width="0.2" height="15.0" fill="rgb(254,194,47)" rx="2" ry="2" />
<text  x="53.51" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (30 samples, 0.58%)</title><rect x="951.5" y="629" width="6.8" height="15.0" fill="rgb(220,92,43)" rx="2" ry="2" />
<text  x="954.50" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="469.5" y="501" width="0.4" height="15.0" fill="rgb(216,181,6)" rx="2" ry="2" />
<text  x="472.48" y="511.5" ></text>
</g>
<g >
<title>cql3::relation::to_restriction (2 samples, 0.04%)</title><rect x="68.7" y="597" width="0.5" height="15.0" fill="rgb(253,86,2)" rx="2" ry="2" />
<text  x="71.72" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.69%)</title><rect x="1117.2" y="661" width="8.2" height="15.0" fill="rgb(238,106,5)" rx="2" ry="2" />
<text  x="1120.17" y="671.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="157.5" y="581" width="0.2" height="15.0" fill="rgb(206,142,31)" rx="2" ry="2" />
<text  x="160.47" y="591.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="16.8" y="645" width="0.3" height="15.0" fill="rgb(222,205,30)" rx="2" ry="2" />
<text  x="19.83" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="256.5" y="373" width="0.2" height="15.0" fill="rgb(246,226,7)" rx="2" ry="2" />
<text  x="259.47" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="878.4" y="677" width="0.3" height="15.0" fill="rgb(217,209,28)" rx="2" ry="2" />
<text  x="881.44" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.14%)</title><rect x="787.9" y="469" width="1.6" height="15.0" fill="rgb(215,167,4)" rx="2" ry="2" />
<text  x="790.87" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="40.3" y="421" width="0.2" height="15.0" fill="rgb(220,26,45)" rx="2" ry="2" />
<text  x="43.27" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="57.3" y="501" width="0.3" height="15.0" fill="rgb(251,166,28)" rx="2" ry="2" />
<text  x="60.34" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%)</title><rect x="103.1" y="597" width="0.2" height="15.0" fill="rgb(229,91,28)" rx="2" ry="2" />
<text  x="106.08" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (6 samples, 0.12%)</title><rect x="294.0" y="533" width="1.4" height="15.0" fill="rgb(224,77,34)" rx="2" ry="2" />
<text  x="297.02" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="80.8" y="341" width="0.2" height="15.0" fill="rgb(232,173,42)" rx="2" ry="2" />
<text  x="83.78" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="437.4" y="549" width="0.2" height="15.0" fill="rgb(240,111,45)" rx="2" ry="2" />
<text  x="440.39" y="559.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (2 samples, 0.04%)</title><rect x="1152.2" y="661" width="0.5" height="15.0" fill="rgb(248,30,25)" rx="2" ry="2" />
<text  x="1155.22" y="671.5" ></text>
</g>
<g >
<title>row_tombstone::apply (2 samples, 0.04%)</title><rect x="414.9" y="421" width="0.4" height="15.0" fill="rgb(237,36,18)" rx="2" ry="2" />
<text  x="417.86" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="866.6" y="645" width="0.2" height="15.0" fill="rgb(215,222,7)" rx="2" ry="2" />
<text  x="869.61" y="655.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (16 samples, 0.31%)</title><rect x="1127.4" y="469" width="3.7" height="15.0" fill="rgb(224,57,48)" rx="2" ry="2" />
<text  x="1130.42" y="479.5" ></text>
</g>
<g >
<title>db::system_keyspace::load_peer_features (1 samples, 0.02%)</title><rect x="80.8" y="613" width="0.2" height="15.0" fill="rgb(246,53,22)" rx="2" ry="2" />
<text  x="83.78" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (2 samples, 0.04%)</title><rect x="842.3" y="645" width="0.4" height="15.0" fill="rgb(231,225,10)" rx="2" ry="2" />
<text  x="845.26" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="1028.2" y="437" width="0.9" height="15.0" fill="rgb(206,136,23)" rx="2" ry="2" />
<text  x="1031.19" y="447.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (17 samples, 0.33%)</title><rect x="895.5" y="533" width="3.9" height="15.0" fill="rgb(242,11,3)" rx="2" ry="2" />
<text  x="898.51" y="543.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (1 samples, 0.02%)</title><rect x="870.5" y="549" width="0.2" height="15.0" fill="rgb(207,218,28)" rx="2" ry="2" />
<text  x="873.48" y="559.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="721.2" y="629" width="1.1" height="15.0" fill="rgb(213,127,3)" rx="2" ry="2" />
<text  x="724.19" y="639.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (4 samples, 0.08%)</title><rect x="330.9" y="453" width="0.9" height="15.0" fill="rgb(206,88,53)" rx="2" ry="2" />
<text  x="333.89" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (15 samples, 0.29%)</title><rect x="802.0" y="357" width="3.4" height="15.0" fill="rgb(205,186,14)" rx="2" ry="2" />
<text  x="804.98" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (431 samples, 8.31%)</title><rect x="187.5" y="485" width="98.1" height="15.0" fill="rgb(234,198,22)" rx="2" ry="2" />
<text  x="190.51" y="495.5" >logalloc::a..</text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1158.6" y="661" width="0.2" height="15.0" fill="rgb(216,117,36)" rx="2" ry="2" />
<text  x="1161.59" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="662.7" y="677" width="0.2" height="15.0" fill="rgb(211,23,36)" rx="2" ry="2" />
<text  x="665.70" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="782.6" y="501" width="0.3" height="15.0" fill="rgb(229,183,28)" rx="2" ry="2" />
<text  x="785.63" y="511.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="76.7" y="421" width="0.2" height="15.0" fill="rgb(213,191,29)" rx="2" ry="2" />
<text  x="79.68" y="431.5" ></text>
</g>
<g >
<title>service::client_state::has_access (9 samples, 0.17%)</title><rect x="75.3" y="645" width="2.1" height="15.0" fill="rgb(226,116,11)" rx="2" ry="2" />
<text  x="78.32" y="655.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (13 samples, 0.25%)</title><rect x="438.1" y="581" width="2.9" height="15.0" fill="rgb(207,80,9)" rx="2" ry="2" />
<text  x="441.08" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1023.6" y="437" width="0.3" height="15.0" fill="rgb(250,70,12)" rx="2" ry="2" />
<text  x="1026.64" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (15 samples, 0.29%)</title><rect x="217.8" y="309" width="3.4" height="15.0" fill="rgb(218,26,46)" rx="2" ry="2" />
<text  x="220.78" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="60.1" y="389" width="0.2" height="15.0" fill="rgb(240,79,30)" rx="2" ry="2" />
<text  x="63.07" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (5 samples, 0.10%)</title><rect x="532.8" y="501" width="1.1" height="15.0" fill="rgb(234,126,32)" rx="2" ry="2" />
<text  x="535.75" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="92.4" y="693" width="0.2" height="15.0" fill="rgb(254,19,14)" rx="2" ry="2" />
<text  x="95.38" y="703.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.69%)</title><rect x="1117.2" y="677" width="8.2" height="15.0" fill="rgb(226,60,24)" rx="2" ry="2" />
<text  x="1120.17" y="687.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (26 samples, 0.50%)</title><rect x="178.4" y="469" width="5.9" height="15.0" fill="rgb(223,38,42)" rx="2" ry="2" />
<text  x="181.41" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="53.9" y="357" width="0.3" height="15.0" fill="rgb(240,45,49)" rx="2" ry="2" />
<text  x="56.92" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (2 samples, 0.04%)</title><rect x="1120.6" y="405" width="0.4" height="15.0" fill="rgb(215,156,44)" rx="2" ry="2" />
<text  x="1123.59" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::parallel_for_each_impl&lt;boost::integer_range&lt;unsigned int&gt;, seastar::smp::invoke_on_all&lt;single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="17.1" y="709" width="0.2" height="15.0" fill="rgb(206,18,32)" rx="2" ry="2" />
<text  x="20.05" y="719.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="630.4" y="613" width="0.2" height="15.0" fill="rgb(214,227,5)" rx="2" ry="2" />
<text  x="633.38" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="38.2" y="453" width="0.5" height="15.0" fill="rgb(234,83,35)" rx="2" ry="2" />
<text  x="41.22" y="463.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (1 samples, 0.02%)</title><rect x="563.7" y="549" width="0.2" height="15.0" fill="rgb(247,92,41)" rx="2" ry="2" />
<text  x="566.70" y="559.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="84.2" y="805" width="0.2" height="15.0" fill="rgb(225,112,4)" rx="2" ry="2" />
<text  x="87.19" y="815.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (8 samples, 0.15%)</title><rect x="1082.1" y="533" width="1.8" height="15.0" fill="rgb(207,70,2)" rx="2" ry="2" />
<text  x="1085.13" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="1096.7" y="565" width="0.7" height="15.0" fill="rgb(249,120,30)" rx="2" ry="2" />
<text  x="1099.69" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%)</title><rect x="890.1" y="613" width="0.2" height="15.0" fill="rgb(231,179,19)" rx="2" ry="2" />
<text  x="893.05" y="623.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (5 samples, 0.10%)</title><rect x="389.4" y="405" width="1.1" height="15.0" fill="rgb(229,73,21)" rx="2" ry="2" />
<text  x="392.38" y="415.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::complete (2 samples, 0.04%)</title><rect x="1165.4" y="693" width="0.5" height="15.0" fill="rgb(212,41,24)" rx="2" ry="2" />
<text  x="1168.42" y="703.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (1 samples, 0.02%)</title><rect x="1079.6" y="501" width="0.3" height="15.0" fill="rgb(212,119,14)" rx="2" ry="2" />
<text  x="1082.62" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="293.8" y="517" width="0.2" height="15.0" fill="rgb(237,139,39)" rx="2" ry="2" />
<text  x="296.79" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="80.8" y="261" width="0.2" height="15.0" fill="rgb(237,49,20)" rx="2" ry="2" />
<text  x="83.78" y="271.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (63 samples, 1.22%)</title><rect x="172.7" y="501" width="14.4" height="15.0" fill="rgb(219,119,43)" rx="2" ry="2" />
<text  x="175.72" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="10.7" y="709" width="0.2" height="15.0" fill="rgb(248,26,1)" rx="2" ry="2" />
<text  x="13.68" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (12 samples, 0.23%)</title><rect x="644.9" y="693" width="2.8" height="15.0" fill="rgb(245,42,28)" rx="2" ry="2" />
<text  x="647.95" y="703.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="80.8" y="357" width="0.2" height="15.0" fill="rgb(229,16,35)" rx="2" ry="2" />
<text  x="83.78" y="367.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (1 samples, 0.02%)</title><rect x="1020.9" y="357" width="0.2" height="15.0" fill="rgb(217,49,49)" rx="2" ry="2" />
<text  x="1023.91" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::stats (3 samples, 0.06%)</title><rect x="187.7" y="453" width="0.7" height="15.0" fill="rgb(228,84,43)" rx="2" ry="2" />
<text  x="190.74" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="638.8" y="661" width="0.5" height="15.0" fill="rgb(253,37,3)" rx="2" ry="2" />
<text  x="641.80" y="671.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="17.3" y="565" width="0.2" height="15.0" fill="rgb(248,142,28)" rx="2" ry="2" />
<text  x="20.28" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (8 samples, 0.15%)</title><rect x="435.1" y="485" width="1.8" height="15.0" fill="rgb(223,113,31)" rx="2" ry="2" />
<text  x="438.12" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (3 samples, 0.06%)</title><rect x="120.4" y="613" width="0.7" height="15.0" fill="rgb(206,170,41)" rx="2" ry="2" />
<text  x="123.38" y="623.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="1050.5" y="501" width="0.2" height="15.0" fill="rgb(248,184,26)" rx="2" ry="2" />
<text  x="1053.49" y="511.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="900.7" y="485" width="0.5" height="15.0" fill="rgb(249,120,26)" rx="2" ry="2" />
<text  x="903.75" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1060.7" y="517" width="0.5" height="15.0" fill="rgb(227,170,53)" rx="2" ry="2" />
<text  x="1063.73" y="527.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (1 samples, 0.02%)</title><rect x="1082.4" y="517" width="0.2" height="15.0" fill="rgb(247,33,0)" rx="2" ry="2" />
<text  x="1085.35" y="527.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (38 samples, 0.73%)</title><rect x="482.9" y="501" width="8.7" height="15.0" fill="rgb(253,165,53)" rx="2" ry="2" />
<text  x="485.91" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (5 samples, 0.10%)</title><rect x="435.8" y="469" width="1.1" height="15.0" fill="rgb(206,195,25)" rx="2" ry="2" />
<text  x="438.80" y="479.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="259.2" y="389" width="0.2" height="15.0" fill="rgb(236,153,22)" rx="2" ry="2" />
<text  x="262.20" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="100.3" y="693" width="0.3" height="15.0" fill="rgb(249,188,35)" rx="2" ry="2" />
<text  x="103.35" y="703.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (1 samples, 0.02%)</title><rect x="1026.4" y="405" width="0.2" height="15.0" fill="rgb(241,203,5)" rx="2" ry="2" />
<text  x="1029.37" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="194.6" y="405" width="0.2" height="15.0" fill="rgb(241,28,33)" rx="2" ry="2" />
<text  x="197.57" y="415.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="59.2" y="469" width="0.2" height="15.0" fill="rgb(252,189,40)" rx="2" ry="2" />
<text  x="62.16" y="479.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="79.0" y="69" width="0.2" height="15.0" fill="rgb(214,93,14)" rx="2" ry="2" />
<text  x="81.96" y="79.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="835.7" y="629" width="0.4" height="15.0" fill="rgb(208,52,10)" rx="2" ry="2" />
<text  x="838.66" y="639.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%)</title><rect x="22.3" y="597" width="0.2" height="15.0" fill="rgb(254,154,34)" rx="2" ry="2" />
<text  x="25.29" y="607.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (6 samples, 0.12%)</title><rect x="595.8" y="597" width="1.4" height="15.0" fill="rgb(244,149,4)" rx="2" ry="2" />
<text  x="598.79" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="22.5" y="405" width="0.2" height="15.0" fill="rgb(248,209,42)" rx="2" ry="2" />
<text  x="25.52" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%)</title><rect x="52.6" y="485" width="0.4" height="15.0" fill="rgb(228,59,8)" rx="2" ry="2" />
<text  x="55.56" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_initialize_map (1 samples, 0.02%)</title><rect x="20.0" y="485" width="0.2" height="15.0" fill="rgb(233,32,10)" rx="2" ry="2" />
<text  x="23.01" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="605.8" y="565" width="0.5" height="15.0" fill="rgb(239,170,46)" rx="2" ry="2" />
<text  x="608.80" y="575.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%)</title><rect x="526.4" y="437" width="0.2" height="15.0" fill="rgb(235,171,52)" rx="2" ry="2" />
<text  x="529.38" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (3 samples, 0.06%)</title><rect x="834.5" y="629" width="0.7" height="15.0" fill="rgb(244,199,46)" rx="2" ry="2" />
<text  x="837.52" y="639.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (4 samples, 0.08%)</title><rect x="611.5" y="629" width="0.9" height="15.0" fill="rgb(248,216,39)" rx="2" ry="2" />
<text  x="614.49" y="639.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="273.5" y="405" width="0.3" height="15.0" fill="rgb(237,30,19)" rx="2" ry="2" />
<text  x="276.54" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="528.2" y="485" width="0.2" height="15.0" fill="rgb(250,192,47)" rx="2" ry="2" />
<text  x="531.20" y="495.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%)</title><rect x="83.7" y="709" width="0.3" height="15.0" fill="rgb(231,196,31)" rx="2" ry="2" />
<text  x="86.74" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="40.3" y="469" width="0.2" height="15.0" fill="rgb(225,169,19)" rx="2" ry="2" />
<text  x="43.27" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (78 samples, 1.50%)</title><rect x="396.4" y="389" width="17.8" height="15.0" fill="rgb(234,102,12)" rx="2" ry="2" />
<text  x="399.43" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="1133.8" y="709" width="0.4" height="15.0" fill="rgb(224,228,46)" rx="2" ry="2" />
<text  x="1136.79" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="43.9" y="469" width="0.5" height="15.0" fill="rgb(208,88,30)" rx="2" ry="2" />
<text  x="46.91" y="479.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%)</title><rect x="101.7" y="693" width="0.2" height="15.0" fill="rgb(208,32,33)" rx="2" ry="2" />
<text  x="104.71" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="315.0" y="565" width="0.2" height="15.0" fill="rgb(243,212,4)" rx="2" ry="2" />
<text  x="317.96" y="575.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (2 samples, 0.04%)</title><rect x="335.7" y="373" width="0.4" height="15.0" fill="rgb(253,208,7)" rx="2" ry="2" />
<text  x="338.67" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (4 samples, 0.08%)</title><rect x="990.6" y="485" width="1.0" height="15.0" fill="rgb(224,35,43)" rx="2" ry="2" />
<text  x="993.64" y="495.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS4_12restrictionsL11has_eq_nullERKNS4_13query_optionsERKNS5_10expressionEE3$_8EES8_SI_T_EUlRS7_E_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_8constantEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_11conjunctionEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_12column_valueEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_5tokenEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_13function_callEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_4castEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_15field_selectionEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_4nullEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_13bind_variableEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_16untyped_constantEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_17tuple_constructorEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_22collection_constructorEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSR_S6_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_S1V_SN_S1Z_S23_S27_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES2C_S2F_ (2 samples, 0.04%)</title><rect x="868.7" y="533" width="0.4" height="15.0" fill="rgb(222,47,5)" rx="2" ry="2" />
<text  x="871.66" y="543.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (39 samples, 0.75%)</title><rect x="673.6" y="709" width="8.9" height="15.0" fill="rgb(252,25,37)" rx="2" ry="2" />
<text  x="676.62" y="719.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="26.2" y="485" width="0.2" height="15.0" fill="rgb(247,216,19)" rx="2" ry="2" />
<text  x="29.16" y="495.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="820.2" y="501" width="0.4" height="15.0" fill="rgb(224,209,8)" rx="2" ry="2" />
<text  x="823.18" y="511.5" ></text>
</g>
<g >
<title>cql3::attributes::raw::raw (1 samples, 0.02%)</title><rect x="61.7" y="549" width="0.2" height="15.0" fill="rgb(232,118,28)" rx="2" ry="2" />
<text  x="64.66" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (583 samples, 11.24%)</title><rect x="163.6" y="549" width="132.7" height="15.0" fill="rgb(242,22,45)" rx="2" ry="2" />
<text  x="166.62" y="559.5" >mutation_fragmen..</text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (65 samples, 1.25%)</title><rect x="23.0" y="549" width="14.8" height="15.0" fill="rgb(230,54,13)" rx="2" ry="2" />
<text  x="25.97" y="559.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;mutation_fragment*&gt;, flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="85.1" y="725" width="0.2" height="15.0" fill="rgb(208,210,0)" rx="2" ry="2" />
<text  x="88.10" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="288.8" y="485" width="0.4" height="15.0" fill="rgb(213,102,15)" rx="2" ry="2" />
<text  x="291.78" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="691.8" y="549" width="0.3" height="15.0" fill="rgb(215,162,6)" rx="2" ry="2" />
<text  x="694.83" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (1 samples, 0.02%)</title><rect x="103.1" y="613" width="0.2" height="15.0" fill="rgb(236,203,0)" rx="2" ry="2" />
<text  x="106.08" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="990.4" y="485" width="0.2" height="15.0" fill="rgb(213,20,45)" rx="2" ry="2" />
<text  x="993.41" y="495.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (3 samples, 0.06%)</title><rect x="272.4" y="421" width="0.7" height="15.0" fill="rgb(254,21,33)" rx="2" ry="2" />
<text  x="275.40" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (3 samples, 0.06%)</title><rect x="689.6" y="661" width="0.6" height="15.0" fill="rgb(253,15,2)" rx="2" ry="2" />
<text  x="692.55" y="671.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="670.7" y="677" width="0.4" height="15.0" fill="rgb(205,120,20)" rx="2" ry="2" />
<text  x="673.66" y="687.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (5 samples, 0.10%)</title><rect x="543.7" y="517" width="1.1" height="15.0" fill="rgb(230,135,46)" rx="2" ry="2" />
<text  x="546.67" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (3 samples, 0.06%)</title><rect x="300.8" y="549" width="0.7" height="15.0" fill="rgb(215,2,27)" rx="2" ry="2" />
<text  x="303.85" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (12 samples, 0.23%)</title><rect x="81.0" y="725" width="2.7" height="15.0" fill="rgb(210,209,49)" rx="2" ry="2" />
<text  x="84.00" y="735.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="59.2" y="453" width="0.2" height="15.0" fill="rgb(248,34,48)" rx="2" ry="2" />
<text  x="62.16" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="43.9" y="357" width="0.2" height="15.0" fill="rgb(214,86,51)" rx="2" ry="2" />
<text  x="46.91" y="367.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::alter_service_level_statement*, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="64.2" y="549" width="0.2" height="15.0" fill="rgb(253,60,22)" rx="2" ry="2" />
<text  x="67.16" y="559.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%)</title><rect x="104.7" y="709" width="0.2" height="15.0" fill="rgb(223,166,5)" rx="2" ry="2" />
<text  x="107.67" y="719.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.29%)</title><rect x="556.9" y="549" width="3.4" height="15.0" fill="rgb(249,184,41)" rx="2" ry="2" />
<text  x="559.87" y="559.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%)</title><rect x="744.6" y="501" width="0.3" height="15.0" fill="rgb(207,202,3)" rx="2" ry="2" />
<text  x="747.63" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (2 samples, 0.04%)</title><rect x="685.2" y="693" width="0.5" height="15.0" fill="rgb(254,224,50)" rx="2" ry="2" />
<text  x="688.23" y="703.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="873.4" y="453" width="0.3" height="15.0" fill="rgb(216,24,37)" rx="2" ry="2" />
<text  x="876.44" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::single_column_restrictions&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="653.4" y="661" width="0.2" height="15.0" fill="rgb(228,121,3)" rx="2" ry="2" />
<text  x="656.37" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="209.6" y="357" width="0.7" height="15.0" fill="rgb(222,93,15)" rx="2" ry="2" />
<text  x="212.59" y="367.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="1056.2" y="517" width="0.2" height="15.0" fill="rgb(250,145,53)" rx="2" ry="2" />
<text  x="1059.18" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::query_options&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="673.4" y="693" width="0.2" height="15.0" fill="rgb(227,108,31)" rx="2" ry="2" />
<text  x="676.39" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (15 samples, 0.29%)</title><rect x="556.9" y="533" width="3.4" height="15.0" fill="rgb(226,186,17)" rx="2" ry="2" />
<text  x="559.87" y="543.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (8 samples, 0.15%)</title><rect x="727.1" y="597" width="1.8" height="15.0" fill="rgb(227,120,45)" rx="2" ry="2" />
<text  x="730.10" y="607.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (27 samples, 0.52%)</title><rect x="580.8" y="581" width="6.1" height="15.0" fill="rgb(242,39,20)" rx="2" ry="2" />
<text  x="583.77" y="591.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="672.3" y="629" width="0.9" height="15.0" fill="rgb(233,146,2)" rx="2" ry="2" />
<text  x="675.26" y="639.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="836.8" y="629" width="0.2" height="15.0" fill="rgb(231,14,35)" rx="2" ry="2" />
<text  x="839.80" y="639.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (2 samples, 0.04%)</title><rect x="747.8" y="501" width="0.5" height="15.0" fill="rgb(251,196,13)" rx="2" ry="2" />
<text  x="750.81" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="45.7" y="405" width="0.5" height="15.0" fill="rgb(209,101,26)" rx="2" ry="2" />
<text  x="48.73" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="40.0" y="501" width="0.3" height="15.0" fill="rgb(233,59,34)" rx="2" ry="2" />
<text  x="43.04" y="511.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1127.2" y="389" width="0.2" height="15.0" fill="rgb(231,103,49)" rx="2" ry="2" />
<text  x="1130.19" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (28 samples, 0.54%)</title><rect x="92.6" y="693" width="6.4" height="15.0" fill="rgb(239,168,48)" rx="2" ry="2" />
<text  x="95.61" y="703.5" ></text>
</g>
<g >
<title>db::system_keyspace::make (1 samples, 0.02%)</title><rect x="16.6" y="533" width="0.2" height="15.0" fill="rgb(246,89,17)" rx="2" ry="2" />
<text  x="19.60" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (514 samples, 9.91%)</title><rect x="320.6" y="565" width="117.0" height="15.0" fill="rgb(211,154,38)" rx="2" ry="2" />
<text  x="323.65" y="575.5" >flat_mutation_..</text>
</g>
<g >
<title>partition_snapshot::get_change_mark (3 samples, 0.06%)</title><rect x="262.8" y="357" width="0.7" height="15.0" fill="rgb(249,50,2)" rx="2" ry="2" />
<text  x="265.84" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="46.6" y="533" width="0.3" height="15.0" fill="rgb(226,167,42)" rx="2" ry="2" />
<text  x="49.64" y="543.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (5 samples, 0.10%)</title><rect x="81.7" y="613" width="1.1" height="15.0" fill="rgb(206,220,47)" rx="2" ry="2" />
<text  x="84.69" y="623.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="693.0" y="661" width="0.2" height="15.0" fill="rgb(211,113,1)" rx="2" ry="2" />
<text  x="695.97" y="671.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (20 samples, 0.39%)</title><rect x="747.1" y="565" width="4.6" height="15.0" fill="rgb(250,130,6)" rx="2" ry="2" />
<text  x="750.13" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;long, std::pair&lt;long const, std::optional&lt;cdc::topology_description&gt; &gt;, std::_Select1st&lt;std::pair&lt;long const, std::optional&lt;cdc::topology_description&gt; &gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, std::optional&lt;cdc::topology_description&gt; &gt; &gt; &gt;::_M_erase (1 samples, 0.02%)</title><rect x="16.8" y="517" width="0.3" height="15.0" fill="rgb(223,202,38)" rx="2" ry="2" />
<text  x="19.83" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%)</title><rect x="656.8" y="645" width="0.4" height="15.0" fill="rgb(225,191,18)" rx="2" ry="2" />
<text  x="659.78" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="822.0" y="565" width="0.2" height="15.0" fill="rgb(249,123,8)" rx="2" ry="2" />
<text  x="825.00" y="575.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="253.5" y="325" width="0.5" height="15.0" fill="rgb(247,136,23)" rx="2" ry="2" />
<text  x="256.51" y="335.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (2 samples, 0.04%)</title><rect x="104.0" y="613" width="0.4" height="15.0" fill="rgb(218,218,14)" rx="2" ry="2" />
<text  x="106.99" y="623.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::rewind (1 samples, 0.02%)</title><rect x="35.5" y="437" width="0.2" height="15.0" fill="rgb(221,30,11)" rx="2" ry="2" />
<text  x="38.49" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="122.7" y="597" width="0.4" height="15.0" fill="rgb(222,155,36)" rx="2" ry="2" />
<text  x="125.65" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="186.8" y="485" width="0.3" height="15.0" fill="rgb(231,200,40)" rx="2" ry="2" />
<text  x="189.83" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::clear (1 samples, 0.02%)</title><rect x="741.2" y="597" width="0.2" height="15.0" fill="rgb(225,186,6)" rx="2" ry="2" />
<text  x="744.21" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="16.8" y="453" width="0.3" height="15.0" fill="rgb(205,25,2)" rx="2" ry="2" />
<text  x="19.83" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="373" width="0.3" height="15.0" fill="rgb(232,124,26)" rx="2" ry="2" />
<text  x="62.84" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="976.1" y="549" width="1.1" height="15.0" fill="rgb(217,124,34)" rx="2" ry="2" />
<text  x="979.08" y="559.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (1 samples, 0.02%)</title><rect x="837.3" y="645" width="0.2" height="15.0" fill="rgb(227,15,41)" rx="2" ry="2" />
<text  x="840.25" y="655.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%)</title><rect x="794.0" y="357" width="0.9" height="15.0" fill="rgb(206,15,3)" rx="2" ry="2" />
<text  x="797.01" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="241.2" y="341" width="0.2" height="15.0" fill="rgb(242,114,48)" rx="2" ry="2" />
<text  x="244.22" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="754.4" y="597" width="0.5" height="15.0" fill="rgb(252,47,35)" rx="2" ry="2" />
<text  x="757.41" y="607.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%)</title><rect x="81.2" y="565" width="0.3" height="15.0" fill="rgb(233,153,22)" rx="2" ry="2" />
<text  x="84.23" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="425.8" y="389" width="0.4" height="15.0" fill="rgb(222,21,25)" rx="2" ry="2" />
<text  x="428.79" y="399.5" ></text>
</g>
<g >
<title>fmt::v7::detail::formatbuf&lt;char&gt;::xsputn (1 samples, 0.02%)</title><rect x="10.9" y="789" width="0.2" height="15.0" fill="rgb(214,128,49)" rx="2" ry="2" />
<text  x="13.91" y="799.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%)</title><rect x="956.5" y="613" width="0.2" height="15.0" fill="rgb(234,7,51)" rx="2" ry="2" />
<text  x="959.50" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="621.1" y="613" width="0.4" height="15.0" fill="rgb(243,57,42)" rx="2" ry="2" />
<text  x="624.05" y="623.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (275 samples, 5.30%)</title><rect x="769.4" y="613" width="62.6" height="15.0" fill="rgb(242,209,27)" rx="2" ry="2" />
<text  x="772.43" y="623.5" >servic..</text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (5 samples, 0.10%)</title><rect x="1129.9" y="421" width="1.2" height="15.0" fill="rgb(213,7,42)" rx="2" ry="2" />
<text  x="1132.92" y="431.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="1126.5" y="357" width="0.2" height="15.0" fill="rgb(208,159,40)" rx="2" ry="2" />
<text  x="1129.51" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="54.6" y="309" width="0.2" height="15.0" fill="rgb(236,93,45)" rx="2" ry="2" />
<text  x="57.61" y="319.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="1031.1" y="485" width="0.5" height="15.0" fill="rgb(250,15,30)" rx="2" ry="2" />
<text  x="1034.15" y="495.5" ></text>
</g>
<g >
<title>sstables::file_writer::~file_writer (1 samples, 0.02%)</title><rect x="10.7" y="533" width="0.2" height="15.0" fill="rgb(244,203,44)" rx="2" ry="2" />
<text  x="13.68" y="543.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="104.0" y="549" width="0.2" height="15.0" fill="rgb(222,208,20)" rx="2" ry="2" />
<text  x="106.99" y="559.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (59 samples, 1.14%)</title><rect x="491.6" y="517" width="13.4" height="15.0" fill="rgb(212,42,49)" rx="2" ry="2" />
<text  x="494.56" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="60.1" y="405" width="0.2" height="15.0" fill="rgb(249,59,10)" rx="2" ry="2" />
<text  x="63.07" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="467.9" y="469" width="0.2" height="15.0" fill="rgb(209,76,54)" rx="2" ry="2" />
<text  x="470.89" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="16.6" y="597" width="0.2" height="15.0" fill="rgb(216,76,29)" rx="2" ry="2" />
<text  x="19.60" y="607.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="866.6" y="693" width="0.2" height="15.0" fill="rgb(205,43,53)" rx="2" ry="2" />
<text  x="869.61" y="703.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (3 samples, 0.06%)</title><rect x="1083.0" y="517" width="0.7" height="15.0" fill="rgb(233,211,43)" rx="2" ry="2" />
<text  x="1086.04" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="682.3" y="661" width="0.2" height="15.0" fill="rgb(211,27,33)" rx="2" ry="2" />
<text  x="685.27" y="671.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%)</title><rect x="102.6" y="661" width="0.3" height="15.0" fill="rgb(234,59,2)" rx="2" ry="2" />
<text  x="105.62" y="671.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (1 samples, 0.02%)</title><rect x="1146.5" y="661" width="0.3" height="15.0" fill="rgb(254,48,48)" rx="2" ry="2" />
<text  x="1149.53" y="671.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="50.3" y="485" width="0.2" height="15.0" fill="rgb(239,77,35)" rx="2" ry="2" />
<text  x="53.28" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="536.6" y="533" width="0.2" height="15.0" fill="rgb(213,188,26)" rx="2" ry="2" />
<text  x="539.62" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (2 samples, 0.04%)</title><rect x="939.0" y="549" width="0.4" height="15.0" fill="rgb(253,149,50)" rx="2" ry="2" />
<text  x="941.98" y="559.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (4 samples, 0.08%)</title><rect x="49.1" y="517" width="1.0" height="15.0" fill="rgb(226,87,29)" rx="2" ry="2" />
<text  x="52.14" y="527.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (51 samples, 0.98%)</title><rect x="493.4" y="485" width="11.6" height="15.0" fill="rgb(249,64,46)" rx="2" ry="2" />
<text  x="496.38" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="916.4" y="549" width="0.3" height="15.0" fill="rgb(213,183,9)" rx="2" ry="2" />
<text  x="919.45" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="721.4" y="597" width="0.9" height="15.0" fill="rgb(238,70,36)" rx="2" ry="2" />
<text  x="724.41" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::single_column_restriction&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="652.9" y="565" width="0.2" height="15.0" fill="rgb(237,222,42)" rx="2" ry="2" />
<text  x="655.91" y="575.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (52 samples, 1.00%)</title><rect x="515.2" y="485" width="11.9" height="15.0" fill="rgb(240,229,35)" rx="2" ry="2" />
<text  x="518.23" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (6 samples, 0.12%)</title><rect x="96.0" y="629" width="1.4" height="15.0" fill="rgb(248,49,36)" rx="2" ry="2" />
<text  x="99.03" y="639.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1,056 samples, 20.37%)</title><rect x="876.6" y="693" width="240.3" height="15.0" fill="rgb(237,163,14)" rx="2" ry="2" />
<text  x="879.62" y="703.5" >seastar::concrete_execution_sta..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%)</title><rect x="873.4" y="469" width="0.3" height="15.0" fill="rgb(211,125,47)" rx="2" ry="2" />
<text  x="876.44" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (37 samples, 0.71%)</title><rect x="654.5" y="693" width="8.4" height="15.0" fill="rgb(211,25,36)" rx="2" ry="2" />
<text  x="657.51" y="703.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (17 samples, 0.33%)</title><rect x="260.3" y="405" width="3.9" height="15.0" fill="rgb(231,203,2)" rx="2" ry="2" />
<text  x="263.34" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%)</title><rect x="774.0" y="533" width="0.7" height="15.0" fill="rgb(251,75,49)" rx="2" ry="2" />
<text  x="776.98" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="691.6" y="533" width="0.2" height="15.0" fill="rgb(205,215,27)" rx="2" ry="2" />
<text  x="694.60" y="543.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (3 samples, 0.06%)</title><rect x="254.2" y="325" width="0.7" height="15.0" fill="rgb(208,196,8)" rx="2" ry="2" />
<text  x="257.19" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%)</title><rect x="873.7" y="453" width="0.2" height="15.0" fill="rgb(224,216,14)" rx="2" ry="2" />
<text  x="876.66" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (8 samples, 0.15%)</title><rect x="856.1" y="597" width="1.9" height="15.0" fill="rgb(251,128,30)" rx="2" ry="2" />
<text  x="859.14" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%)</title><rect x="47.6" y="357" width="0.6" height="15.0" fill="rgb(214,152,6)" rx="2" ry="2" />
<text  x="50.55" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="54.8" y="437" width="0.7" height="15.0" fill="rgb(241,144,46)" rx="2" ry="2" />
<text  x="57.83" y="447.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%)</title><rect x="866.6" y="421" width="0.2" height="15.0" fill="rgb(220,17,14)" rx="2" ry="2" />
<text  x="869.61" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%)</title><rect x="559.8" y="501" width="0.3" height="15.0" fill="rgb(219,126,34)" rx="2" ry="2" />
<text  x="562.83" y="511.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="40.0" y="533" width="0.3" height="15.0" fill="rgb(217,163,4)" rx="2" ry="2" />
<text  x="43.04" y="543.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (33 samples, 0.64%)</title><rect x="868.4" y="613" width="7.5" height="15.0" fill="rgb(218,189,44)" rx="2" ry="2" />
<text  x="871.43" y="623.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="79.0" y="693" width="0.2" height="15.0" fill="rgb(247,50,18)" rx="2" ry="2" />
<text  x="81.96" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="1149.5" y="613" width="0.7" height="15.0" fill="rgb(205,111,53)" rx="2" ry="2" />
<text  x="1152.49" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (12 samples, 0.23%)</title><rect x="1107.6" y="613" width="2.7" height="15.0" fill="rgb(221,211,50)" rx="2" ry="2" />
<text  x="1110.62" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%)</title><rect x="864.3" y="677" width="0.3" height="15.0" fill="rgb(217,22,26)" rx="2" ry="2" />
<text  x="867.33" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="1034.3" y="437" width="2.1" height="15.0" fill="rgb(208,18,44)" rx="2" ry="2" />
<text  x="1037.34" y="447.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="679.3" y="677" width="0.5" height="15.0" fill="rgb(237,179,1)" rx="2" ry="2" />
<text  x="682.31" y="687.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (1 samples, 0.02%)</title><rect x="103.8" y="661" width="0.2" height="15.0" fill="rgb(234,53,13)" rx="2" ry="2" />
<text  x="106.76" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (4 samples, 0.08%)</title><rect x="980.2" y="517" width="0.9" height="15.0" fill="rgb(223,216,37)" rx="2" ry="2" />
<text  x="983.17" y="527.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="16.6" y="725" width="0.2" height="15.0" fill="rgb(242,20,36)" rx="2" ry="2" />
<text  x="19.60" y="735.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (16 samples, 0.31%)</title><rect x="977.4" y="549" width="3.7" height="15.0" fill="rgb(254,12,23)" rx="2" ry="2" />
<text  x="980.44" y="559.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (3 samples, 0.06%)</title><rect x="744.2" y="517" width="0.7" height="15.0" fill="rgb(217,177,40)" rx="2" ry="2" />
<text  x="747.17" y="527.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::raw::update_statement*, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="62.8" y="501" width="0.2" height="15.0" fill="rgb(236,165,11)" rx="2" ry="2" />
<text  x="65.80" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="36.4" y="469" width="0.2" height="15.0" fill="rgb(251,8,30)" rx="2" ry="2" />
<text  x="39.40" y="479.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (18 samples, 0.35%)</title><rect x="381.6" y="373" width="4.1" height="15.0" fill="rgb(221,138,31)" rx="2" ry="2" />
<text  x="384.64" y="383.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c2eb3a58b89a22ac54ffafe47dd7c1e87bea2236] (1 samples, 0.02%)</title><rect x="747.8" y="485" width="0.2" height="15.0" fill="rgb(225,69,11)" rx="2" ry="2" />
<text  x="750.81" y="495.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1124.5" y="421" width="0.2" height="15.0" fill="rgb(215,61,37)" rx="2" ry="2" />
<text  x="1127.46" y="431.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (3 samples, 0.06%)</title><rect x="27.8" y="469" width="0.6" height="15.0" fill="rgb(253,205,1)" rx="2" ry="2" />
<text  x="30.75" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (4 samples, 0.08%)</title><rect x="690.2" y="661" width="0.9" height="15.0" fill="rgb(248,175,45)" rx="2" ry="2" />
<text  x="693.24" y="671.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="524.1" y="421" width="0.2" height="15.0" fill="rgb(225,96,51)" rx="2" ry="2" />
<text  x="527.10" y="431.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::key (2 samples, 0.04%)</title><rect x="1121.3" y="437" width="0.4" height="15.0" fill="rgb(209,145,20)" rx="2" ry="2" />
<text  x="1124.27" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%)</title><rect x="24.1" y="357" width="0.2" height="15.0" fill="rgb(237,37,49)" rx="2" ry="2" />
<text  x="27.11" y="367.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (4 samples, 0.08%)</title><rect x="76.5" y="565" width="0.9" height="15.0" fill="rgb(212,105,25)" rx="2" ry="2" />
<text  x="79.45" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%)</title><rect x="39.4" y="533" width="0.4" height="15.0" fill="rgb(244,96,32)" rx="2" ry="2" />
<text  x="42.36" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="944.9" y="597" width="0.7" height="15.0" fill="rgb(222,146,35)" rx="2" ry="2" />
<text  x="947.90" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="185.0" y="469" width="0.2" height="15.0" fill="rgb(236,166,44)" rx="2" ry="2" />
<text  x="188.01" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.10%)</title><rect x="41.9" y="437" width="1.1" height="15.0" fill="rgb(236,95,37)" rx="2" ry="2" />
<text  x="44.86" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="1124.0" y="421" width="0.5" height="15.0" fill="rgb(213,166,18)" rx="2" ry="2" />
<text  x="1127.00" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="38.0" y="485" width="0.7" height="15.0" fill="rgb(244,218,46)" rx="2" ry="2" />
<text  x="40.99" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="585.8" y="565" width="0.4" height="15.0" fill="rgb(238,182,45)" rx="2" ry="2" />
<text  x="588.78" y="575.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (48 samples, 0.93%)</title><rect x="302.4" y="549" width="11.0" height="15.0" fill="rgb(210,190,49)" rx="2" ry="2" />
<text  x="305.44" y="559.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="828.8" y="501" width="0.3" height="15.0" fill="rgb(218,97,0)" rx="2" ry="2" />
<text  x="831.83" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (3 samples, 0.06%)</title><rect x="341.8" y="389" width="0.7" height="15.0" fill="rgb(213,16,30)" rx="2" ry="2" />
<text  x="344.81" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (17 samples, 0.33%)</title><rect x="1127.4" y="501" width="3.9" height="15.0" fill="rgb(235,137,6)" rx="2" ry="2" />
<text  x="1130.42" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="38.9" y="469" width="0.2" height="15.0" fill="rgb(252,6,4)" rx="2" ry="2" />
<text  x="41.90" y="479.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="780.8" y="517" width="0.9" height="15.0" fill="rgb(225,100,42)" rx="2" ry="2" />
<text  x="783.81" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="322.2" y="501" width="0.3" height="15.0" fill="rgb(235,146,47)" rx="2" ry="2" />
<text  x="325.24" y="511.5" ></text>
</g>
<g >
<title>database::query (16 samples, 0.31%)</title><rect x="99.0" y="709" width="3.6" height="15.0" fill="rgb(221,192,25)" rx="2" ry="2" />
<text  x="101.98" y="719.5" ></text>
</g>
<g >
<title>database::find_schema (9 samples, 0.17%)</title><rect x="823.6" y="565" width="2.0" height="15.0" fill="rgb(212,158,16)" rx="2" ry="2" />
<text  x="826.60" y="575.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="466.1" y="485" width="0.7" height="15.0" fill="rgb(249,184,25)" rx="2" ry="2" />
<text  x="469.07" y="495.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (5 samples, 0.10%)</title><rect x="749.9" y="469" width="1.1" height="15.0" fill="rgb(245,182,2)" rx="2" ry="2" />
<text  x="752.86" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (2 samples, 0.04%)</title><rect x="617.6" y="645" width="0.5" height="15.0" fill="rgb(220,196,5)" rx="2" ry="2" />
<text  x="620.64" y="655.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (8 samples, 0.15%)</title><rect x="81.0" y="693" width="1.8" height="15.0" fill="rgb(211,207,14)" rx="2" ry="2" />
<text  x="84.00" y="703.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="426.9" y="453" width="0.3" height="15.0" fill="rgb(216,212,23)" rx="2" ry="2" />
<text  x="429.93" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (8 samples, 0.15%)</title><rect x="343.6" y="373" width="1.9" height="15.0" fill="rgb(209,64,2)" rx="2" ry="2" />
<text  x="346.63" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="961.7" y="597" width="1.9" height="15.0" fill="rgb(228,134,38)" rx="2" ry="2" />
<text  x="964.74" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1115.4" y="613" width="0.2" height="15.0" fill="rgb(253,46,23)" rx="2" ry="2" />
<text  x="1118.35" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="146.5" y="629" width="0.3" height="15.0" fill="rgb(249,52,9)" rx="2" ry="2" />
<text  x="149.55" y="639.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="485" width="0.3" height="15.0" fill="rgb(206,25,35)" rx="2" ry="2" />
<text  x="62.84" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%)</title><rect x="54.2" y="485" width="0.2" height="15.0" fill="rgb(216,158,43)" rx="2" ry="2" />
<text  x="57.15" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (3 samples, 0.06%)</title><rect x="81.9" y="533" width="0.7" height="15.0" fill="rgb(220,208,20)" rx="2" ry="2" />
<text  x="84.92" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_tokText (1 samples, 0.02%)</title><rect x="28.0" y="453" width="0.2" height="15.0" fill="rgb(249,189,24)" rx="2" ry="2" />
<text  x="30.98" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="473.6" y="469" width="0.4" height="15.0" fill="rgb(214,176,37)" rx="2" ry="2" />
<text  x="476.58" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (7 samples, 0.14%)</title><rect x="1125.8" y="517" width="1.6" height="15.0" fill="rgb(250,163,49)" rx="2" ry="2" />
<text  x="1128.82" y="527.5" ></text>
</g>
<g >
<title>bytes_ostream::view (1 samples, 0.02%)</title><rect x="600.1" y="597" width="0.2" height="15.0" fill="rgb(243,27,35)" rx="2" ry="2" />
<text  x="603.11" y="607.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::raw_value_view (9 samples, 0.17%)</title><rect x="912.8" y="533" width="2.1" height="15.0" fill="rgb(236,173,30)" rx="2" ry="2" />
<text  x="915.81" y="543.5" ></text>
</g>
<g >
<title>row::external_memory_usage (1 samples, 0.02%)</title><rect x="249.0" y="373" width="0.2" height="15.0" fill="rgb(251,143,51)" rx="2" ry="2" />
<text  x="251.96" y="383.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="25.0" y="421" width="0.5" height="15.0" fill="rgb(238,77,29)" rx="2" ry="2" />
<text  x="28.02" y="431.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (200 samples, 3.86%)</title><rect x="20.0" y="645" width="45.5" height="15.0" fill="rgb(220,115,47)" rx="2" ry="2" />
<text  x="23.01" y="655.5" >cql3..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (1 samples, 0.02%)</title><rect x="567.1" y="533" width="0.2" height="15.0" fill="rgb(214,220,48)" rx="2" ry="2" />
<text  x="570.11" y="543.5" ></text>
</g>
<g >
<title>create_partitions (269 samples, 5.19%)</title><rect x="17.7" y="741" width="61.3" height="15.0" fill="rgb(223,71,29)" rx="2" ry="2" />
<text  x="20.74" y="751.5" >create..</text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="141.3" y="645" width="0.5" height="15.0" fill="rgb(252,28,24)" rx="2" ry="2" />
<text  x="144.31" y="655.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (3 samples, 0.06%)</title><rect x="305.4" y="501" width="0.7" height="15.0" fill="rgb(237,199,28)" rx="2" ry="2" />
<text  x="308.40" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="44.4" y="485" width="0.2" height="15.0" fill="rgb(230,49,42)" rx="2" ry="2" />
<text  x="47.36" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="66.0" y="645" width="0.2" height="15.0" fill="rgb(217,190,53)" rx="2" ry="2" />
<text  x="68.98" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="659.1" y="677" width="0.2" height="15.0" fill="rgb(248,145,32)" rx="2" ry="2" />
<text  x="662.06" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="943.8" y="597" width="0.6" height="15.0" fill="rgb(249,69,39)" rx="2" ry="2" />
<text  x="946.76" y="607.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1119.7" y="389" width="0.2" height="15.0" fill="rgb(236,72,32)" rx="2" ry="2" />
<text  x="1122.68" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="701.8" y="677" width="0.3" height="15.0" fill="rgb(213,116,2)" rx="2" ry="2" />
<text  x="704.84" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (11 samples, 0.21%)</title><rect x="1044.6" y="517" width="2.5" height="15.0" fill="rgb(232,27,44)" rx="2" ry="2" />
<text  x="1047.58" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="10.2" y="597" width="0.3" height="15.0" fill="rgb(230,137,39)" rx="2" ry="2" />
<text  x="13.23" y="607.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::insert_cdc_generation (1 samples, 0.02%)</title><rect x="17.3" y="645" width="0.2" height="15.0" fill="rgb(228,186,4)" rx="2" ry="2" />
<text  x="20.28" y="655.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::cells (1 samples, 0.02%)</title><rect x="1121.0" y="437" width="0.3" height="15.0" fill="rgb(210,114,10)" rx="2" ry="2" />
<text  x="1124.04" y="447.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (9 samples, 0.17%)</title><rect x="720.5" y="645" width="2.1" height="15.0" fill="rgb(249,104,3)" rx="2" ry="2" />
<text  x="723.50" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (4 samples, 0.08%)</title><rect x="628.8" y="629" width="0.9" height="15.0" fill="rgb(241,213,44)" rx="2" ry="2" />
<text  x="631.79" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (18 samples, 0.35%)</title><rect x="844.8" y="613" width="4.1" height="15.0" fill="rgb(232,85,15)" rx="2" ry="2" />
<text  x="847.76" y="623.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::drop_type_statement*, false&gt;::_M_head (1 samples, 0.02%)</title><rect x="64.6" y="517" width="0.2" height="15.0" fill="rgb(230,141,54)" rx="2" ry="2" />
<text  x="67.62" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (2 samples, 0.04%)</title><rect x="614.7" y="645" width="0.4" height="15.0" fill="rgb(212,25,49)" rx="2" ry="2" />
<text  x="617.68" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="616.5" y="645" width="0.2" height="15.0" fill="rgb(245,117,42)" rx="2" ry="2" />
<text  x="619.50" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (3 samples, 0.06%)</title><rect x="548.2" y="549" width="0.7" height="15.0" fill="rgb(224,38,31)" rx="2" ry="2" />
<text  x="551.23" y="559.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (32 samples, 0.62%)</title><rect x="590.6" y="645" width="7.2" height="15.0" fill="rgb(218,23,23)" rx="2" ry="2" />
<text  x="593.56" y="655.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="17.1" y="725" width="0.2" height="15.0" fill="rgb(235,126,32)" rx="2" ry="2" />
<text  x="20.05" y="735.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (2 samples, 0.04%)</title><rect x="1084.4" y="549" width="0.5" height="15.0" fill="rgb(218,212,16)" rx="2" ry="2" />
<text  x="1087.40" y="559.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (2 samples, 0.04%)</title><rect x="751.0" y="469" width="0.5" height="15.0" fill="rgb(209,227,26)" rx="2" ry="2" />
<text  x="754.00" y="479.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (3 samples, 0.06%)</title><rect x="542.8" y="501" width="0.6" height="15.0" fill="rgb(216,178,16)" rx="2" ry="2" />
<text  x="545.76" y="511.5" ></text>
</g>
<g >
<title>database::has_keyspace (18 samples, 0.35%)</title><rect x="844.8" y="629" width="4.1" height="15.0" fill="rgb(206,206,43)" rx="2" ry="2" />
<text  x="847.76" y="639.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::raw_value_view::validate (1 samples, 0.02%)</title><rect x="905.8" y="485" width="0.2" height="15.0" fill="rgb(239,189,20)" rx="2" ry="2" />
<text  x="908.75" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::comparator_type (1 samples, 0.02%)</title><rect x="102.6" y="517" width="0.3" height="15.0" fill="rgb(215,64,1)" rx="2" ry="2" />
<text  x="105.62" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (2 samples, 0.04%)</title><rect x="957.9" y="613" width="0.4" height="15.0" fill="rgb(218,219,34)" rx="2" ry="2" />
<text  x="960.87" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="40.3" y="341" width="0.2" height="15.0" fill="rgb(254,207,52)" rx="2" ry="2" />
<text  x="43.27" y="351.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="312.0" y="501" width="1.1" height="15.0" fill="rgb(254,64,10)" rx="2" ry="2" />
<text  x="315.00" y="511.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.04%)</title><rect x="14.6" y="805" width="0.4" height="15.0" fill="rgb(236,187,4)" rx="2" ry="2" />
<text  x="17.55" y="815.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="664.1" y="693" width="0.2" height="15.0" fill="rgb(241,111,49)" rx="2" ry="2" />
<text  x="667.06" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (11 samples, 0.21%)</title><rect x="94.9" y="661" width="2.5" height="15.0" fill="rgb(235,55,5)" rx="2" ry="2" />
<text  x="97.89" y="671.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (1 samples, 0.02%)</title><rect x="1021.1" y="357" width="0.3" height="15.0" fill="rgb(249,118,43)" rx="2" ry="2" />
<text  x="1024.14" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%)</title><rect x="47.6" y="389" width="0.6" height="15.0" fill="rgb(239,87,8)" rx="2" ry="2" />
<text  x="50.55" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="58.7" y="469" width="0.2" height="15.0" fill="rgb(245,186,8)" rx="2" ry="2" />
<text  x="61.70" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (3 samples, 0.06%)</title><rect x="801.3" y="341" width="0.7" height="15.0" fill="rgb(239,223,17)" rx="2" ry="2" />
<text  x="804.29" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (5 samples, 0.10%)</title><rect x="611.3" y="645" width="1.1" height="15.0" fill="rgb(252,147,3)" rx="2" ry="2" />
<text  x="614.27" y="655.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (242 samples, 4.67%)</title><rect x="20.0" y="693" width="55.1" height="15.0" fill="rgb(218,177,7)" rx="2" ry="2" />
<text  x="23.01" y="703.5" >cql3:..</text>
</g>
<g >
<title>std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="73.3" y="661" width="0.4" height="15.0" fill="rgb(207,97,33)" rx="2" ry="2" />
<text  x="76.27" y="671.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="15.5" y="725" width="0.2" height="15.0" fill="rgb(238,20,28)" rx="2" ry="2" />
<text  x="18.46" y="735.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%)</title><rect x="251.7" y="341" width="0.2" height="15.0" fill="rgb(254,161,31)" rx="2" ry="2" />
<text  x="254.69" y="351.5" ></text>
</g>
<g >
<title>db::get_cdc_generation_mutations (1 samples, 0.02%)</title><rect x="17.3" y="629" width="0.2" height="15.0" fill="rgb(211,50,28)" rx="2" ry="2" />
<text  x="20.28" y="639.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%)</title><rect x="888.7" y="613" width="0.2" height="15.0" fill="rgb(253,94,48)" rx="2" ry="2" />
<text  x="891.68" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (2 samples, 0.04%)</title><rect x="25.0" y="405" width="0.5" height="15.0" fill="rgb(224,111,49)" rx="2" ry="2" />
<text  x="28.02" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (1 samples, 0.02%)</title><rect x="80.8" y="469" width="0.2" height="15.0" fill="rgb(245,183,14)" rx="2" ry="2" />
<text  x="83.78" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (91 samples, 1.76%)</title><rect x="894.6" y="565" width="20.7" height="15.0" fill="rgb(224,41,6)" rx="2" ry="2" />
<text  x="897.60" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.1" y="469" width="0.3" height="15.0" fill="rgb(231,122,43)" rx="2" ry="2" />
<text  x="52.14" y="479.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (14 samples, 0.27%)</title><rect x="29.6" y="469" width="3.2" height="15.0" fill="rgb(228,112,45)" rx="2" ry="2" />
<text  x="32.57" y="479.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="10.2" y="789" width="0.3" height="15.0" fill="rgb(220,195,22)" rx="2" ry="2" />
<text  x="13.23" y="799.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="10.2" y="629" width="0.3" height="15.0" fill="rgb(207,143,16)" rx="2" ry="2" />
<text  x="13.23" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.8" y="389" width="0.3" height="15.0" fill="rgb(205,124,38)" rx="2" ry="2" />
<text  x="52.83" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (11 samples, 0.21%)</title><rect x="1155.9" y="693" width="2.5" height="15.0" fill="rgb(245,154,21)" rx="2" ry="2" />
<text  x="1158.86" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="437.6" y="565" width="0.2" height="15.0" fill="rgb(213,77,26)" rx="2" ry="2" />
<text  x="440.62" y="575.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (3 samples, 0.06%)</title><rect x="630.8" y="613" width="0.7" height="15.0" fill="rgb(244,39,25)" rx="2" ry="2" />
<text  x="633.84" y="623.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1122.0" y="437" width="0.2" height="15.0" fill="rgb(213,22,8)" rx="2" ry="2" />
<text  x="1124.95" y="447.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="961.7" y="613" width="1.9" height="15.0" fill="rgb(238,217,46)" rx="2" ry="2" />
<text  x="964.74" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="577.4" y="533" width="0.6" height="15.0" fill="rgb(213,142,20)" rx="2" ry="2" />
<text  x="580.36" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (8 samples, 0.15%)</title><rect x="54.6" y="485" width="1.8" height="15.0" fill="rgb(231,174,22)" rx="2" ry="2" />
<text  x="57.61" y="495.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (4 samples, 0.08%)</title><rect x="54.8" y="453" width="0.9" height="15.0" fill="rgb(209,24,3)" rx="2" ry="2" />
<text  x="57.83" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="20.9" y="613" width="0.3" height="15.0" fill="rgb(210,36,38)" rx="2" ry="2" />
<text  x="23.92" y="623.5" ></text>
</g>
<g >
<title>start_thread (3 samples, 0.06%)</title><rect x="1189.3" y="837" width="0.7" height="15.0" fill="rgb(240,109,48)" rx="2" ry="2" />
<text  x="1192.32" y="847.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (44 samples, 0.85%)</title><rect x="899.4" y="517" width="10.0" height="15.0" fill="rgb(239,133,45)" rx="2" ry="2" />
<text  x="902.38" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="41.2" y="357" width="0.4" height="15.0" fill="rgb(250,174,5)" rx="2" ry="2" />
<text  x="44.18" y="367.5" ></text>
</g>
<g >
<title>[[vdso]] (28 samples, 0.54%)</title><rect x="1169.1" y="821" width="6.3" height="15.0" fill="rgb(213,93,34)" rx="2" ry="2" />
<text  x="1172.06" y="831.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::make_temporary (10 samples, 0.19%)</title><rect x="912.8" y="549" width="2.3" height="15.0" fill="rgb(254,11,32)" rx="2" ry="2" />
<text  x="915.81" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="1105.6" y="597" width="1.8" height="15.0" fill="rgb(227,109,42)" rx="2" ry="2" />
<text  x="1108.57" y="607.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="1126.3" y="373" width="0.2" height="15.0" fill="rgb(237,52,22)" rx="2" ry="2" />
<text  x="1129.28" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="302.2" y="549" width="0.2" height="15.0" fill="rgb(208,191,25)" rx="2" ry="2" />
<text  x="305.21" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (2 samples, 0.04%)</title><rect x="574.6" y="469" width="0.5" height="15.0" fill="rgb(210,14,22)" rx="2" ry="2" />
<text  x="577.62" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::clustering_key_restrictions&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="653.1" y="645" width="0.3" height="15.0" fill="rgb(214,186,22)" rx="2" ry="2" />
<text  x="656.14" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="80.8" y="293" width="0.2" height="15.0" fill="rgb(244,58,52)" rx="2" ry="2" />
<text  x="83.78" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (10 samples, 0.19%)</title><rect x="297.9" y="549" width="2.3" height="15.0" fill="rgb(240,156,10)" rx="2" ry="2" />
<text  x="300.89" y="559.5" ></text>
</g>
<g >
<title>std::destroy_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="49.8" y="373" width="0.3" height="15.0" fill="rgb(240,13,33)" rx="2" ry="2" />
<text  x="52.83" y="383.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="38.4" y="373" width="0.3" height="15.0" fill="rgb(224,44,1)" rx="2" ry="2" />
<text  x="41.45" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (1 samples, 0.02%)</title><rect x="910.3" y="533" width="0.2" height="15.0" fill="rgb(229,32,38)" rx="2" ry="2" />
<text  x="913.30" y="543.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (7 samples, 0.14%)</title><rect x="411.2" y="373" width="1.6" height="15.0" fill="rgb(206,52,13)" rx="2" ry="2" />
<text  x="414.22" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (6 samples, 0.12%)</title><rect x="1147.0" y="629" width="1.4" height="15.0" fill="rgb(246,136,29)" rx="2" ry="2" />
<text  x="1149.99" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="48.2" y="485" width="0.3" height="15.0" fill="rgb(236,84,2)" rx="2" ry="2" />
<text  x="51.23" y="495.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (11 samples, 0.21%)</title><rect x="770.6" y="597" width="2.5" height="15.0" fill="rgb(230,19,13)" rx="2" ry="2" />
<text  x="773.57" y="607.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (38 samples, 0.73%)</title><rect x="65.5" y="677" width="8.7" height="15.0" fill="rgb(246,175,21)" rx="2" ry="2" />
<text  x="68.53" y="687.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (55 samples, 1.06%)</title><rect x="793.6" y="437" width="12.5" height="15.0" fill="rgb(233,213,32)" rx="2" ry="2" />
<text  x="796.56" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (8 samples, 0.15%)</title><rect x="283.3" y="453" width="1.8" height="15.0" fill="rgb(223,1,43)" rx="2" ry="2" />
<text  x="286.32" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="79.0" y="165" width="0.2" height="15.0" fill="rgb(244,147,1)" rx="2" ry="2" />
<text  x="81.96" y="175.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_type (1 samples, 0.02%)</title><rect x="28.9" y="469" width="0.2" height="15.0" fill="rgb(233,15,0)" rx="2" ry="2" />
<text  x="31.89" y="479.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (6 samples, 0.12%)</title><rect x="238.0" y="309" width="1.4" height="15.0" fill="rgb(220,167,31)" rx="2" ry="2" />
<text  x="241.03" y="319.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (1 samples, 0.02%)</title><rect x="198.9" y="405" width="0.2" height="15.0" fill="rgb(252,100,29)" rx="2" ry="2" />
<text  x="201.89" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%)</title><rect x="25.0" y="373" width="0.2" height="15.0" fill="rgb(225,108,16)" rx="2" ry="2" />
<text  x="28.02" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="1022.0" y="405" width="0.3" height="15.0" fill="rgb(207,173,49)" rx="2" ry="2" />
<text  x="1025.05" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="860.7" y="677" width="0.2" height="15.0" fill="rgb(220,72,15)" rx="2" ry="2" />
<text  x="863.69" y="687.5" ></text>
</g>
<g >
<title>make_combined_reader (86 samples, 1.66%)</title><rect x="455.6" y="533" width="19.6" height="15.0" fill="rgb(232,72,25)" rx="2" ry="2" />
<text  x="458.60" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (9 samples, 0.17%)</title><rect x="592.4" y="629" width="2.0" height="15.0" fill="rgb(218,166,1)" rx="2" ry="2" />
<text  x="595.38" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="639.0" y="645" width="0.3" height="15.0" fill="rgb(223,184,34)" rx="2" ry="2" />
<text  x="642.03" y="655.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (5 samples, 0.10%)</title><rect x="575.1" y="485" width="1.1" height="15.0" fill="rgb(206,83,16)" rx="2" ry="2" />
<text  x="578.08" y="495.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (1 samples, 0.02%)</title><rect x="1031.6" y="485" width="0.2" height="15.0" fill="rgb(248,94,45)" rx="2" ry="2" />
<text  x="1034.60" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1087.4" y="549" width="0.2" height="15.0" fill="rgb(213,98,46)" rx="2" ry="2" />
<text  x="1090.36" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="61.9" y="533" width="0.2" height="15.0" fill="rgb(238,184,2)" rx="2" ry="2" />
<text  x="64.89" y="543.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="580.1" y="549" width="0.2" height="15.0" fill="rgb(236,171,9)" rx="2" ry="2" />
<text  x="583.09" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (542 samples, 10.45%)</title><rect x="965.6" y="597" width="123.4" height="15.0" fill="rgb(240,220,34)" rx="2" ry="2" />
<text  x="968.61" y="607.5" >service::storag..</text>
</g>
<g >
<title>clustering_row::clustering_row (144 samples, 2.78%)</title><rect x="208.9" y="373" width="32.8" height="15.0" fill="rgb(240,1,35)" rx="2" ry="2" />
<text  x="211.90" y="383.5" >cl..</text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="644.5" y="693" width="0.2" height="15.0" fill="rgb(224,205,49)" rx="2" ry="2" />
<text  x="647.49" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (704 samples, 13.58%)</title><rect x="155.7" y="613" width="160.2" height="15.0" fill="rgb(222,140,5)" rx="2" ry="2" />
<text  x="158.65" y="623.5" >flat_mutation_reader..</text>
</g>
<g >
<title>cql3::query_processor::execute_direct (2 samples, 0.04%)</title><rect x="19.6" y="693" width="0.4" height="15.0" fill="rgb(241,111,24)" rx="2" ry="2" />
<text  x="22.56" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="898.7" y="517" width="0.2" height="15.0" fill="rgb(235,43,30)" rx="2" ry="2" />
<text  x="901.70" y="527.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, schema const&amp;, flush_memory_accounter&amp;&gt; (2 samples, 0.04%)</title><rect x="81.2" y="645" width="0.5" height="15.0" fill="rgb(215,177,37)" rx="2" ry="2" />
<text  x="84.23" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (1 samples, 0.02%)</title><rect x="777.6" y="565" width="0.3" height="15.0" fill="rgb(234,35,9)" rx="2" ry="2" />
<text  x="780.63" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (3 samples, 0.06%)</title><rect x="948.3" y="597" width="0.7" height="15.0" fill="rgb(223,183,19)" rx="2" ry="2" />
<text  x="951.31" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (2 samples, 0.04%)</title><rect x="874.3" y="421" width="0.5" height="15.0" fill="rgb(225,4,46)" rx="2" ry="2" />
<text  x="877.35" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="41.2" y="421" width="0.4" height="15.0" fill="rgb(222,191,18)" rx="2" ry="2" />
<text  x="44.18" y="431.5" ></text>
</g>
<g >
<title>cql3::update_parameters::make_cell (2 samples, 0.04%)</title><rect x="872.3" y="501" width="0.5" height="15.0" fill="rgb(222,60,23)" rx="2" ry="2" />
<text  x="875.30" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="299.5" y="533" width="0.7" height="15.0" fill="rgb(213,102,16)" rx="2" ry="2" />
<text  x="302.48" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%)</title><rect x="971.5" y="565" width="0.3" height="15.0" fill="rgb(206,189,46)" rx="2" ry="2" />
<text  x="974.52" y="575.5" ></text>
</g>
<g >
<title>local_schema_registry (1 samples, 0.02%)</title><rect x="969.0" y="581" width="0.2" height="15.0" fill="rgb(242,182,46)" rx="2" ry="2" />
<text  x="972.02" y="591.5" ></text>
</g>
<g >
<title>seastar::output_stream&lt;char&gt;::~output_stream (1 samples, 0.02%)</title><rect x="10.7" y="517" width="0.2" height="15.0" fill="rgb(211,222,10)" rx="2" ry="2" />
<text  x="13.68" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="416.9" y="437" width="0.7" height="15.0" fill="rgb(246,206,2)" rx="2" ry="2" />
<text  x="419.91" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="475.2" y="517" width="0.4" height="15.0" fill="rgb(250,41,14)" rx="2" ry="2" />
<text  x="478.17" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="67.4" y="581" width="0.2" height="15.0" fill="rgb(227,165,1)" rx="2" ry="2" />
<text  x="70.35" y="591.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (8 samples, 0.15%)</title><rect x="387.6" y="373" width="1.8" height="15.0" fill="rgb(207,97,21)" rx="2" ry="2" />
<text  x="390.55" y="383.5" ></text>
</g>
<g >
<title>frozen_mutation::column_family_id (1 samples, 0.02%)</title><rect x="1124.9" y="533" width="0.2" height="15.0" fill="rgb(238,78,2)" rx="2" ry="2" />
<text  x="1127.91" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (18 samples, 0.35%)</title><rect x="1158.6" y="677" width="4.1" height="15.0" fill="rgb(233,135,26)" rx="2" ry="2" />
<text  x="1161.59" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (3 samples, 0.06%)</title><rect x="815.2" y="501" width="0.7" height="15.0" fill="rgb(214,49,14)" rx="2" ry="2" />
<text  x="818.18" y="511.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::find_bucket_index (1 samples, 0.02%)</title><rect x="609.0" y="613" width="0.2" height="15.0" fill="rgb(250,173,32)" rx="2" ry="2" />
<text  x="611.99" y="623.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%)</title><rect x="836.1" y="613" width="0.7" height="15.0" fill="rgb(209,180,25)" rx="2" ry="2" />
<text  x="839.11" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="632.7" y="677" width="0.2" height="15.0" fill="rgb(245,31,33)" rx="2" ry="2" />
<text  x="635.66" y="687.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (6 samples, 0.12%)</title><rect x="96.0" y="613" width="1.4" height="15.0" fill="rgb(241,79,43)" rx="2" ry="2" />
<text  x="99.03" y="623.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (2 samples, 0.04%)</title><rect x="850.2" y="629" width="0.5" height="15.0" fill="rgb(228,178,48)" rx="2" ry="2" />
<text  x="853.22" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="54.6" y="389" width="0.2" height="15.0" fill="rgb(241,42,7)" rx="2" ry="2" />
<text  x="57.61" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.08%)</title><rect x="506.4" y="517" width="0.9" height="15.0" fill="rgb(254,46,17)" rx="2" ry="2" />
<text  x="509.35" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1102.6" y="613" width="0.2" height="15.0" fill="rgb(246,192,51)" rx="2" ry="2" />
<text  x="1105.61" y="623.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="60.1" y="437" width="0.2" height="15.0" fill="rgb(234,213,30)" rx="2" ry="2" />
<text  x="63.07" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (1 samples, 0.02%)</title><rect x="870.5" y="565" width="0.2" height="15.0" fill="rgb(236,229,44)" rx="2" ry="2" />
<text  x="873.48" y="575.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (1 samples, 0.02%)</title><rect x="1041.4" y="565" width="0.2" height="15.0" fill="rgb(226,38,40)" rx="2" ry="2" />
<text  x="1044.39" y="575.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="83.3" y="581" width="0.2" height="15.0" fill="rgb(252,126,18)" rx="2" ry="2" />
<text  x="86.28" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (2 samples, 0.04%)</title><rect x="705.5" y="661" width="0.4" height="15.0" fill="rgb(213,174,1)" rx="2" ry="2" />
<text  x="708.48" y="671.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (270 samples, 5.21%)</title><rect x="17.7" y="773" width="61.5" height="15.0" fill="rgb(244,204,34)" rx="2" ry="2" />
<text  x="20.74" y="783.5" >std::_..</text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (1 samples, 0.02%)</title><rect x="982.2" y="565" width="0.2" height="15.0" fill="rgb(253,60,41)" rx="2" ry="2" />
<text  x="985.22" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="831.8" y="549" width="0.2" height="15.0" fill="rgb(251,130,43)" rx="2" ry="2" />
<text  x="834.79" y="559.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="901.0" y="469" width="0.2" height="15.0" fill="rgb(243,54,46)" rx="2" ry="2" />
<text  x="903.97" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (14 samples, 0.27%)</title><rect x="685.7" y="693" width="3.2" height="15.0" fill="rgb(222,191,49)" rx="2" ry="2" />
<text  x="688.68" y="703.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="16.6" y="581" width="0.2" height="15.0" fill="rgb(216,32,2)" rx="2" ry="2" />
<text  x="19.60" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="41.2" y="469" width="0.4" height="15.0" fill="rgb(238,159,51)" rx="2" ry="2" />
<text  x="44.18" y="479.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (5 samples, 0.10%)</title><rect x="279.0" y="421" width="1.1" height="15.0" fill="rgb(233,127,50)" rx="2" ry="2" />
<text  x="282.00" y="431.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (2 samples, 0.04%)</title><rect x="1166.1" y="677" width="0.5" height="15.0" fill="rgb(247,106,2)" rx="2" ry="2" />
<text  x="1169.10" y="687.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="83.7" y="693" width="0.3" height="15.0" fill="rgb(211,173,50)" rx="2" ry="2" />
<text  x="86.74" y="703.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="906.0" y="485" width="0.7" height="15.0" fill="rgb(232,0,43)" rx="2" ry="2" />
<text  x="908.98" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;10ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="325" width="0.3" height="15.0" fill="rgb(239,221,22)" rx="2" ry="2" />
<text  x="62.84" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="852.0" y="613" width="0.3" height="15.0" fill="rgb(228,82,11)" rx="2" ry="2" />
<text  x="855.04" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="1139.2" y="693" width="0.3" height="15.0" fill="rgb(207,218,43)" rx="2" ry="2" />
<text  x="1142.25" y="703.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (2 samples, 0.04%)</title><rect x="1119.7" y="421" width="0.4" height="15.0" fill="rgb(247,182,40)" rx="2" ry="2" />
<text  x="1122.68" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (2 samples, 0.04%)</title><rect x="472.2" y="485" width="0.5" height="15.0" fill="rgb(249,9,30)" rx="2" ry="2" />
<text  x="475.21" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="588.3" y="581" width="0.2" height="15.0" fill="rgb(205,11,10)" rx="2" ry="2" />
<text  x="591.28" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (12 samples, 0.23%)</title><rect x="68.3" y="613" width="2.7" height="15.0" fill="rgb(219,191,53)" rx="2" ry="2" />
<text  x="71.26" y="623.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1040.0" y="485" width="0.3" height="15.0" fill="rgb(210,134,35)" rx="2" ry="2" />
<text  x="1043.03" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="418.3" y="437" width="0.2" height="15.0" fill="rgb(239,139,54)" rx="2" ry="2" />
<text  x="421.28" y="447.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (11 samples, 0.21%)</title><rect x="855.5" y="629" width="2.5" height="15.0" fill="rgb(217,214,34)" rx="2" ry="2" />
<text  x="858.46" y="639.5" ></text>
</g>
<g >
<title>posix_memalign (5 samples, 0.10%)</title><rect x="238.3" y="293" width="1.1" height="15.0" fill="rgb(229,51,50)" rx="2" ry="2" />
<text  x="241.26" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="699.8" y="661" width="0.2" height="15.0" fill="rgb(205,208,28)" rx="2" ry="2" />
<text  x="702.79" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_channel (1 samples, 0.02%)</title><rect x="41.6" y="469" width="0.3" height="15.0" fill="rgb(217,73,6)" rx="2" ry="2" />
<text  x="44.63" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (2 samples, 0.04%)</title><rect x="99.9" y="693" width="0.4" height="15.0" fill="rgb(208,150,36)" rx="2" ry="2" />
<text  x="102.89" y="703.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="16.6" y="709" width="0.2" height="15.0" fill="rgb(237,16,19)" rx="2" ry="2" />
<text  x="19.60" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="985.0" y="485" width="0.4" height="15.0" fill="rgb(247,61,10)" rx="2" ry="2" />
<text  x="987.95" y="495.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (2 samples, 0.04%)</title><rect x="282.2" y="437" width="0.4" height="15.0" fill="rgb(244,196,16)" rx="2" ry="2" />
<text  x="285.19" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (552 samples, 10.65%)</title><rect x="964.2" y="613" width="125.7" height="15.0" fill="rgb(228,23,27)" rx="2" ry="2" />
<text  x="967.24" y="623.5" >service::storag..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="83.3" y="565" width="0.2" height="15.0" fill="rgb(253,182,23)" rx="2" ry="2" />
<text  x="86.28" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="915.1" y="549" width="0.2" height="15.0" fill="rgb(244,0,17)" rx="2" ry="2" />
<text  x="918.08" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="551.4" y="613" width="0.2" height="15.0" fill="rgb(244,101,21)" rx="2" ry="2" />
<text  x="554.41" y="623.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="751.9" y="613" width="0.2" height="15.0" fill="rgb(214,67,18)" rx="2" ry="2" />
<text  x="754.91" y="623.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (47 samples, 0.91%)</title><rect x="1092.8" y="629" width="10.7" height="15.0" fill="rgb(251,159,30)" rx="2" ry="2" />
<text  x="1095.82" y="639.5" ></text>
</g>
<g >
<title>std::__addressof&lt;char&gt; (1 samples, 0.02%)</title><rect x="56.2" y="421" width="0.2" height="15.0" fill="rgb(235,180,44)" rx="2" ry="2" />
<text  x="59.20" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="649.0" y="693" width="0.3" height="15.0" fill="rgb(250,221,13)" rx="2" ry="2" />
<text  x="652.04" y="703.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="10.7" y="773" width="0.2" height="15.0" fill="rgb(210,64,33)" rx="2" ry="2" />
<text  x="13.68" y="783.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (3 samples, 0.06%)</title><rect x="820.0" y="517" width="0.6" height="15.0" fill="rgb(248,78,36)" rx="2" ry="2" />
<text  x="822.96" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="985.0" y="469" width="0.4" height="15.0" fill="rgb(207,121,11)" rx="2" ry="2" />
<text  x="987.95" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="722.8" y="645" width="0.4" height="15.0" fill="rgb(242,207,49)" rx="2" ry="2" />
<text  x="725.78" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="45.3" y="389" width="0.4" height="15.0" fill="rgb(247,26,34)" rx="2" ry="2" />
<text  x="48.27" y="399.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="99.7" y="693" width="0.2" height="15.0" fill="rgb(221,106,28)" rx="2" ry="2" />
<text  x="102.67" y="703.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (38 samples, 0.73%)</title><rect x="703.4" y="677" width="8.7" height="15.0" fill="rgb(227,189,9)" rx="2" ry="2" />
<text  x="706.43" y="687.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="80.8" y="373" width="0.2" height="15.0" fill="rgb(249,144,17)" rx="2" ry="2" />
<text  x="83.78" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%)</title><rect x="841.8" y="565" width="0.5" height="15.0" fill="rgb(235,153,28)" rx="2" ry="2" />
<text  x="844.80" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (12 samples, 0.23%)</title><rect x="81.0" y="773" width="2.7" height="15.0" fill="rgb(242,147,53)" rx="2" ry="2" />
<text  x="84.00" y="783.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="40.7" y="405" width="0.5" height="15.0" fill="rgb(229,100,21)" rx="2" ry="2" />
<text  x="43.72" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::alter_role_statement, std::default_delete&lt;cql3::statements::alter_role_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="63.9" y="565" width="0.3" height="15.0" fill="rgb(214,75,7)" rx="2" ry="2" />
<text  x="66.94" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (1 samples, 0.02%)</title><rect x="290.8" y="485" width="0.3" height="15.0" fill="rgb(206,91,49)" rx="2" ry="2" />
<text  x="293.83" y="495.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="848.9" y="629" width="1.3" height="15.0" fill="rgb(225,131,10)" rx="2" ry="2" />
<text  x="851.86" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="39.4" y="469" width="0.4" height="15.0" fill="rgb(236,82,39)" rx="2" ry="2" />
<text  x="42.36" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="98.1" y="661" width="0.4" height="15.0" fill="rgb(212,52,27)" rx="2" ry="2" />
<text  x="101.07" y="671.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (3 samples, 0.06%)</title><rect x="604.4" y="613" width="0.7" height="15.0" fill="rgb(208,225,49)" rx="2" ry="2" />
<text  x="607.44" y="623.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (6 samples, 0.12%)</title><rect x="784.2" y="501" width="1.4" height="15.0" fill="rgb(242,218,39)" rx="2" ry="2" />
<text  x="787.23" y="511.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%)</title><rect x="200.3" y="437" width="0.2" height="15.0" fill="rgb(216,103,34)" rx="2" ry="2" />
<text  x="203.26" y="447.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (8 samples, 0.15%)</title><rect x="113.8" y="661" width="1.8" height="15.0" fill="rgb(254,75,23)" rx="2" ry="2" />
<text  x="116.78" y="671.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="80.8" y="581" width="0.2" height="15.0" fill="rgb(222,89,37)" rx="2" ry="2" />
<text  x="83.78" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="672.9" y="613" width="0.3" height="15.0" fill="rgb(227,24,52)" rx="2" ry="2" />
<text  x="675.94" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="469.7" y="485" width="0.2" height="15.0" fill="rgb(245,176,49)" rx="2" ry="2" />
<text  x="472.71" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="64.6" y="565" width="0.2" height="15.0" fill="rgb(229,16,45)" rx="2" ry="2" />
<text  x="67.62" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="345.5" y="405" width="0.2" height="15.0" fill="rgb(216,210,4)" rx="2" ry="2" />
<text  x="348.45" y="415.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%)</title><rect x="526.6" y="437" width="0.2" height="15.0" fill="rgb(213,36,18)" rx="2" ry="2" />
<text  x="529.61" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::alter_view_statement, std::default_delete&lt;cql3::statements::alter_view_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="63.3" y="581" width="0.2" height="15.0" fill="rgb(224,151,17)" rx="2" ry="2" />
<text  x="66.25" y="591.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (66 samples, 1.27%)</title><rect x="1064.6" y="501" width="15.0" height="15.0" fill="rgb(240,34,1)" rx="2" ry="2" />
<text  x="1067.60" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="1163.8" y="549" width="0.3" height="15.0" fill="rgb(213,219,4)" rx="2" ry="2" />
<text  x="1166.83" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (8 samples, 0.15%)</title><rect x="250.3" y="373" width="1.8" height="15.0" fill="rgb(236,118,46)" rx="2" ry="2" />
<text  x="253.32" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (7 samples, 0.14%)</title><rect x="856.4" y="581" width="1.6" height="15.0" fill="rgb(238,25,27)" rx="2" ry="2" />
<text  x="859.37" y="591.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1119.9" y="373" width="0.2" height="15.0" fill="rgb(209,188,23)" rx="2" ry="2" />
<text  x="1122.91" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (13 samples, 0.25%)</title><rect x="58.2" y="549" width="3.0" height="15.0" fill="rgb(243,196,13)" rx="2" ry="2" />
<text  x="61.25" y="559.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="16.4" y="709" width="0.2" height="15.0" fill="rgb(253,163,54)" rx="2" ry="2" />
<text  x="19.37" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="39.1" y="469" width="0.3" height="15.0" fill="rgb(242,153,16)" rx="2" ry="2" />
<text  x="42.13" y="479.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="77.4" y="613" width="0.2" height="15.0" fill="rgb(223,187,6)" rx="2" ry="2" />
<text  x="80.36" y="623.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="38.9" y="389" width="0.2" height="15.0" fill="rgb(251,95,0)" rx="2" ry="2" />
<text  x="41.90" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cdc::generation_service&gt;::operator= (1 samples, 0.02%)</title><rect x="16.8" y="581" width="0.3" height="15.0" fill="rgb(237,224,41)" rx="2" ry="2" />
<text  x="19.83" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (5 samples, 0.10%)</title><rect x="241.7" y="357" width="1.1" height="15.0" fill="rgb(253,52,20)" rx="2" ry="2" />
<text  x="244.68" y="367.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="69.9" y="549" width="0.2" height="15.0" fill="rgb(215,115,51)" rx="2" ry="2" />
<text  x="72.85" y="559.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (1 samples, 0.02%)</title><rect x="536.8" y="533" width="0.3" height="15.0" fill="rgb(225,24,44)" rx="2" ry="2" />
<text  x="539.85" y="543.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="661.1" y="661" width="0.5" height="15.0" fill="rgb(251,134,29)" rx="2" ry="2" />
<text  x="664.11" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (3 samples, 0.06%)</title><rect x="707.5" y="629" width="0.7" height="15.0" fill="rgb(215,157,26)" rx="2" ry="2" />
<text  x="710.53" y="639.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="480.4" y="517" width="0.2" height="15.0" fill="rgb(248,212,28)" rx="2" ry="2" />
<text  x="483.41" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (2 samples, 0.04%)</title><rect x="1062.1" y="549" width="0.5" height="15.0" fill="rgb(225,77,39)" rx="2" ry="2" />
<text  x="1065.10" y="559.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="1126.5" y="373" width="0.2" height="15.0" fill="rgb(211,123,25)" rx="2" ry="2" />
<text  x="1129.51" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%)</title><rect x="708.4" y="629" width="0.5" height="15.0" fill="rgb(217,35,45)" rx="2" ry="2" />
<text  x="711.44" y="639.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="43.7" y="533" width="0.2" height="15.0" fill="rgb(239,229,48)" rx="2" ry="2" />
<text  x="46.68" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="48.9" y="469" width="0.2" height="15.0" fill="rgb(247,13,5)" rx="2" ry="2" />
<text  x="51.92" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="40.7" y="501" width="0.5" height="15.0" fill="rgb(210,46,50)" rx="2" ry="2" />
<text  x="43.72" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="22.5" y="453" width="0.2" height="15.0" fill="rgb(219,227,36)" rx="2" ry="2" />
<text  x="25.52" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.48%)</title><rect x="1125.8" y="581" width="5.7" height="15.0" fill="rgb(241,10,20)" rx="2" ry="2" />
<text  x="1128.82" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="405" width="0.3" height="15.0" fill="rgb(231,5,19)" rx="2" ry="2" />
<text  x="62.84" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, distributed_loader::populate_keyspace (1 samples, 0.02%)</title><rect x="693.0" y="709" width="0.2" height="15.0" fill="rgb(228,159,12)" rx="2" ry="2" />
<text  x="695.97" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="442.2" y="581" width="0.4" height="15.0" fill="rgb(253,86,40)" rx="2" ry="2" />
<text  x="445.17" y="591.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="10.2" y="757" width="0.3" height="15.0" fill="rgb(206,149,2)" rx="2" ry="2" />
<text  x="13.23" y="767.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (97 samples, 1.87%)</title><rect x="922.4" y="613" width="22.0" height="15.0" fill="rgb(249,182,31)" rx="2" ry="2" />
<text  x="925.37" y="623.5" >c..</text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (1 samples, 0.02%)</title><rect x="1092.6" y="613" width="0.2" height="15.0" fill="rgb(222,108,24)" rx="2" ry="2" />
<text  x="1095.60" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::__uniq_ptr_impl (2 samples, 0.04%)</title><rect x="53.2" y="437" width="0.5" height="15.0" fill="rgb(235,83,24)" rx="2" ry="2" />
<text  x="56.24" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (3 samples, 0.06%)</title><rect x="342.9" y="389" width="0.7" height="15.0" fill="rgb(247,151,47)" rx="2" ry="2" />
<text  x="345.95" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="770.6" y="565" width="0.4" height="15.0" fill="rgb(212,31,49)" rx="2" ry="2" />
<text  x="773.57" y="575.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (4 samples, 0.08%)</title><rect x="254.2" y="341" width="0.9" height="15.0" fill="rgb(232,10,38)" rx="2" ry="2" />
<text  x="257.19" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="73.9" y="565" width="0.3" height="15.0" fill="rgb(254,91,49)" rx="2" ry="2" />
<text  x="76.95" y="575.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (9 samples, 0.17%)</title><rect x="265.3" y="437" width="2.1" height="15.0" fill="rgb(221,184,16)" rx="2" ry="2" />
<text  x="268.34" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="1033.2" y="485" width="0.2" height="15.0" fill="rgb(218,42,25)" rx="2" ry="2" />
<text  x="1036.20" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="617.0" y="629" width="0.2" height="15.0" fill="rgb(252,25,40)" rx="2" ry="2" />
<text  x="619.95" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="45.7" y="469" width="0.5" height="15.0" fill="rgb(210,12,47)" rx="2" ry="2" />
<text  x="48.73" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="474.7" y="485" width="0.2" height="15.0" fill="rgb(230,45,15)" rx="2" ry="2" />
<text  x="477.72" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1098.1" y="581" width="0.2" height="15.0" fill="rgb(247,89,32)" rx="2" ry="2" />
<text  x="1101.06" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="43.9" y="421" width="0.5" height="15.0" fill="rgb(222,173,52)" rx="2" ry="2" />
<text  x="46.91" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (15 samples, 0.29%)</title><rect x="993.8" y="501" width="3.4" height="15.0" fill="rgb(205,221,12)" rx="2" ry="2" />
<text  x="996.83" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%)</title><rect x="970.2" y="581" width="0.2" height="15.0" fill="rgb(250,160,10)" rx="2" ry="2" />
<text  x="973.16" y="591.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="649.7" y="693" width="0.3" height="15.0" fill="rgb(239,44,24)" rx="2" ry="2" />
<text  x="652.73" y="703.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1085.1" y="549" width="0.2" height="15.0" fill="rgb(230,202,9)" rx="2" ry="2" />
<text  x="1088.09" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="50.3" y="469" width="0.2" height="15.0" fill="rgb(208,212,24)" rx="2" ry="2" />
<text  x="53.28" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (8 samples, 0.15%)</title><rect x="730.7" y="549" width="1.9" height="15.0" fill="rgb(234,94,23)" rx="2" ry="2" />
<text  x="733.74" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (2 samples, 0.04%)</title><rect x="55.1" y="325" width="0.4" height="15.0" fill="rgb(222,80,2)" rx="2" ry="2" />
<text  x="58.06" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="642.7" y="693" width="0.2" height="15.0" fill="rgb(245,170,34)" rx="2" ry="2" />
<text  x="645.67" y="703.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="80.8" y="661" width="0.2" height="15.0" fill="rgb(228,30,17)" rx="2" ry="2" />
<text  x="83.78" y="671.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (9 samples, 0.17%)</title><rect x="327.0" y="469" width="2.1" height="15.0" fill="rgb(218,177,52)" rx="2" ry="2" />
<text  x="330.02" y="479.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::optional&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt; &gt; &gt;::invoke&lt;cql3::query_processor::for_each_cql_result (1 samples, 0.02%)</title><rect x="640.6" y="677" width="0.3" height="15.0" fill="rgb(228,228,22)" rx="2" ry="2" />
<text  x="643.62" y="687.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (7 samples, 0.14%)</title><rect x="743.5" y="549" width="1.6" height="15.0" fill="rgb(248,84,9)" rx="2" ry="2" />
<text  x="746.49" y="559.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (48 samples, 0.93%)</title><rect x="480.6" y="517" width="11.0" height="15.0" fill="rgb(242,60,3)" rx="2" ry="2" />
<text  x="483.63" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="60.3" y="421" width="0.2" height="15.0" fill="rgb(245,111,21)" rx="2" ry="2" />
<text  x="63.30" y="431.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (24 samples, 0.46%)</title><rect x="854.3" y="661" width="5.5" height="15.0" fill="rgb(209,69,25)" rx="2" ry="2" />
<text  x="857.32" y="671.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (1 samples, 0.02%)</title><rect x="631.7" y="645" width="0.3" height="15.0" fill="rgb(209,168,42)" rx="2" ry="2" />
<text  x="634.75" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="57.1" y="485" width="0.2" height="15.0" fill="rgb(226,73,12)" rx="2" ry="2" />
<text  x="60.11" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%)</title><rect x="102.6" y="645" width="0.3" height="15.0" fill="rgb(233,191,36)" rx="2" ry="2" />
<text  x="105.62" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="560.5" y="613" width="0.2" height="15.0" fill="rgb(238,138,12)" rx="2" ry="2" />
<text  x="563.51" y="623.5" ></text>
</g>
<g >
<title>service::storage_service::mutate_token_metadata (1 samples, 0.02%)</title><rect x="17.5" y="661" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="20.51" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="256.2" y="373" width="0.3" height="15.0" fill="rgb(242,227,30)" rx="2" ry="2" />
<text  x="259.24" y="383.5" ></text>
</g>
<g >
<title>fmt::v7::basic_format_parse_context&lt;char, fmt::v7::detail::error_handler&gt;::next_arg_id (2 samples, 0.04%)</title><rect x="18.4" y="693" width="0.5" height="15.0" fill="rgb(212,187,6)" rx="2" ry="2" />
<text  x="21.42" y="703.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (3 samples, 0.06%)</title><rect x="1062.6" y="533" width="0.6" height="15.0" fill="rgb(235,173,22)" rx="2" ry="2" />
<text  x="1065.56" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (17 samples, 0.33%)</title><rect x="1127.4" y="517" width="3.9" height="15.0" fill="rgb(253,152,2)" rx="2" ry="2" />
<text  x="1130.42" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="816.3" y="485" width="0.2" height="15.0" fill="rgb(248,39,31)" rx="2" ry="2" />
<text  x="819.31" y="495.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (1 samples, 0.02%)</title><rect x="1133.1" y="709" width="0.2" height="15.0" fill="rgb(253,216,33)" rx="2" ry="2" />
<text  x="1136.11" y="719.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="758.5" y="613" width="2.1" height="15.0" fill="rgb(241,17,22)" rx="2" ry="2" />
<text  x="761.51" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1055.5" y="533" width="0.2" height="15.0" fill="rgb(238,46,32)" rx="2" ry="2" />
<text  x="1058.50" y="543.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="138.8" y="645" width="0.2" height="15.0" fill="rgb(210,102,12)" rx="2" ry="2" />
<text  x="141.81" y="655.5" ></text>
</g>
<g >
<title>query::result::result (1 samples, 0.02%)</title><rect x="617.2" y="629" width="0.2" height="15.0" fill="rgb(240,45,35)" rx="2" ry="2" />
<text  x="620.18" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="559.8" y="485" width="0.3" height="15.0" fill="rgb(242,82,11)" rx="2" ry="2" />
<text  x="562.83" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="41.0" y="325" width="0.2" height="15.0" fill="rgb(232,102,11)" rx="2" ry="2" />
<text  x="43.95" y="335.5" ></text>
</g>
<g >
<title>table::as_mutation_source (1 samples, 0.02%)</title><rect x="129.7" y="645" width="0.2" height="15.0" fill="rgb(208,204,52)" rx="2" ry="2" />
<text  x="132.71" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (40 samples, 0.77%)</title><rect x="518.0" y="469" width="9.1" height="15.0" fill="rgb(206,191,25)" rx="2" ry="2" />
<text  x="520.96" y="479.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (2 samples, 0.04%)</title><rect x="1119.0" y="453" width="0.5" height="15.0" fill="rgb(228,208,41)" rx="2" ry="2" />
<text  x="1122.00" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="950.8" y="549" width="0.7" height="15.0" fill="rgb(209,89,51)" rx="2" ry="2" />
<text  x="953.81" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="101.5" y="693" width="0.2" height="15.0" fill="rgb(254,98,19)" rx="2" ry="2" />
<text  x="104.49" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="947.4" y="613" width="0.2" height="15.0" fill="rgb(248,56,3)" rx="2" ry="2" />
<text  x="950.40" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="10.7" y="805" width="0.2" height="15.0" fill="rgb(217,60,19)" rx="2" ry="2" />
<text  x="13.68" y="815.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (2 samples, 0.04%)</title><rect x="70.5" y="581" width="0.5" height="15.0" fill="rgb(227,113,45)" rx="2" ry="2" />
<text  x="73.54" y="591.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%)</title><rect x="103.8" y="597" width="0.2" height="15.0" fill="rgb(222,100,54)" rx="2" ry="2" />
<text  x="106.76" y="607.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (11 samples, 0.21%)</title><rect x="798.3" y="373" width="2.5" height="15.0" fill="rgb(227,181,15)" rx="2" ry="2" />
<text  x="801.34" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="850.9" y="597" width="0.5" height="15.0" fill="rgb(233,217,8)" rx="2" ry="2" />
<text  x="853.91" y="607.5" ></text>
</g>
<g >
<title>cql3::to_managed_bytes_opt (5 samples, 0.10%)</title><rect x="919.6" y="581" width="1.2" height="15.0" fill="rgb(223,36,11)" rx="2" ry="2" />
<text  x="922.64" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::selectClause (1 samples, 0.02%)</title><rect x="80.8" y="421" width="0.2" height="15.0" fill="rgb(206,80,42)" rx="2" ry="2" />
<text  x="83.78" y="431.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%)</title><rect x="740.8" y="597" width="0.2" height="15.0" fill="rgb(217,133,8)" rx="2" ry="2" />
<text  x="743.76" y="607.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.23%)</title><rect x="986.3" y="533" width="2.7" height="15.0" fill="rgb(235,103,48)" rx="2" ry="2" />
<text  x="989.32" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (12 samples, 0.23%)</title><rect x="81.0" y="757" width="2.7" height="15.0" fill="rgb(244,55,8)" rx="2" ry="2" />
<text  x="84.00" y="767.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1189.3" y="789" width="0.2" height="15.0" fill="rgb(244,179,35)" rx="2" ry="2" />
<text  x="1192.32" y="799.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="874.3" y="469" width="0.5" height="15.0" fill="rgb(226,137,33)" rx="2" ry="2" />
<text  x="877.35" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%)</title><rect x="716.0" y="709" width="0.2" height="15.0" fill="rgb(245,59,22)" rx="2" ry="2" />
<text  x="718.95" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="47.1" y="517" width="0.2" height="15.0" fill="rgb(208,78,16)" rx="2" ry="2" />
<text  x="50.10" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (1 samples, 0.02%)</title><rect x="983.1" y="565" width="0.3" height="15.0" fill="rgb(239,191,46)" rx="2" ry="2" />
<text  x="986.13" y="575.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (1 samples, 0.02%)</title><rect x="732.3" y="501" width="0.3" height="15.0" fill="rgb(241,223,28)" rx="2" ry="2" />
<text  x="735.34" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="452.9" y="549" width="0.2" height="15.0" fill="rgb(222,54,52)" rx="2" ry="2" />
<text  x="455.87" y="559.5" ></text>
</g>
<g >
<title>row_cache::make_reader (1 samples, 0.02%)</title><rect x="447.4" y="565" width="0.2" height="15.0" fill="rgb(213,92,26)" rx="2" ry="2" />
<text  x="450.41" y="575.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;partition_version&gt; (1 samples, 0.02%)</title><rect x="1117.9" y="325" width="0.2" height="15.0" fill="rgb(246,201,37)" rx="2" ry="2" />
<text  x="1120.86" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (2 samples, 0.04%)</title><rect x="963.6" y="613" width="0.4" height="15.0" fill="rgb(234,10,6)" rx="2" ry="2" />
<text  x="966.56" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="81.2" y="517" width="0.3" height="15.0" fill="rgb(206,100,49)" rx="2" ry="2" />
<text  x="84.23" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%)</title><rect x="985.9" y="549" width="0.2" height="15.0" fill="rgb(239,102,9)" rx="2" ry="2" />
<text  x="988.86" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1088.7" y="581" width="0.3" height="15.0" fill="rgb(209,74,32)" rx="2" ry="2" />
<text  x="1091.73" y="591.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (1 samples, 0.02%)</title><rect x="684.1" y="677" width="0.2" height="15.0" fill="rgb(254,223,34)" rx="2" ry="2" />
<text  x="687.09" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr (1 samples, 0.02%)</title><rect x="49.1" y="421" width="0.3" height="15.0" fill="rgb(251,52,32)" rx="2" ry="2" />
<text  x="52.14" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="233.5" y="229" width="0.2" height="15.0" fill="rgb(244,175,41)" rx="2" ry="2" />
<text  x="236.48" y="239.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="17.3" y="549" width="0.2" height="15.0" fill="rgb(210,220,22)" rx="2" ry="2" />
<text  x="20.28" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (2 samples, 0.04%)</title><rect x="1081.7" y="485" width="0.4" height="15.0" fill="rgb(230,137,52)" rx="2" ry="2" />
<text  x="1084.67" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%)</title><rect x="829.3" y="501" width="0.4" height="15.0" fill="rgb(247,98,47)" rx="2" ry="2" />
<text  x="832.29" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (1 samples, 0.02%)</title><rect x="1155.0" y="661" width="0.2" height="15.0" fill="rgb(227,28,52)" rx="2" ry="2" />
<text  x="1157.95" y="671.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (1 samples, 0.02%)</title><rect x="79.0" y="261" width="0.2" height="15.0" fill="rgb(233,120,50)" rx="2" ry="2" />
<text  x="81.96" y="271.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (1 samples, 0.02%)</title><rect x="751.7" y="565" width="0.2" height="15.0" fill="rgb(248,3,21)" rx="2" ry="2" />
<text  x="754.68" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;cdc::stream_id, std::allocator&lt;cdc::stream_id&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="16.8" y="469" width="0.3" height="15.0" fill="rgb(226,0,38)" rx="2" ry="2" />
<text  x="19.83" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="1154.3" y="677" width="0.9" height="15.0" fill="rgb(251,218,0)" rx="2" ry="2" />
<text  x="1157.27" y="687.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="50.7" y="453" width="0.5" height="15.0" fill="rgb(225,31,13)" rx="2" ry="2" />
<text  x="53.74" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.48%)</title><rect x="1125.8" y="645" width="5.7" height="15.0" fill="rgb(254,152,30)" rx="2" ry="2" />
<text  x="1128.82" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="353.6" y="389" width="0.7" height="15.0" fill="rgb(239,101,3)" rx="2" ry="2" />
<text  x="356.65" y="399.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;seastar::lowres_clock&gt;, &amp;seastar::timer&lt;seastar::lowres_clock&gt;::_link&gt;::expire (1 samples, 0.02%)</title><rect x="1164.7" y="693" width="0.3" height="15.0" fill="rgb(229,48,14)" rx="2" ry="2" />
<text  x="1167.74" y="703.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1061.2" y="517" width="0.2" height="15.0" fill="rgb(238,170,20)" rx="2" ry="2" />
<text  x="1064.19" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%)</title><rect x="961.1" y="565" width="0.4" height="15.0" fill="rgb(246,3,18)" rx="2" ry="2" />
<text  x="964.05" y="575.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (4 samples, 0.08%)</title><rect x="768.1" y="533" width="0.9" height="15.0" fill="rgb(229,69,20)" rx="2" ry="2" />
<text  x="771.07" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::~_Rb_tree (1 samples, 0.02%)</title><rect x="652.9" y="613" width="0.2" height="15.0" fill="rgb(250,217,4)" rx="2" ry="2" />
<text  x="655.91" y="623.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (3 samples, 0.06%)</title><rect x="171.6" y="469" width="0.7" height="15.0" fill="rgb(214,226,50)" rx="2" ry="2" />
<text  x="174.58" y="479.5" ></text>
</g>
<g >
<title>service::write_response_handler::write_response_handler (1 samples, 0.02%)</title><rect x="1130.8" y="373" width="0.3" height="15.0" fill="rgb(233,146,21)" rx="2" ry="2" />
<text  x="1133.83" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;char [], seastar::mmap_deleter&gt;  (1 samples, 0.02%)</title><rect x="1166.6" y="693" width="0.2" height="15.0" fill="rgb(222,116,32)" rx="2" ry="2" />
<text  x="1169.56" y="703.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (1 samples, 0.02%)</title><rect x="1166.3" y="661" width="0.3" height="15.0" fill="rgb(219,120,26)" rx="2" ry="2" />
<text  x="1169.33" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="79.0" y="661" width="0.2" height="15.0" fill="rgb(213,83,39)" rx="2" ry="2" />
<text  x="81.96" y="671.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="546.6" y="469" width="0.3" height="15.0" fill="rgb(226,107,14)" rx="2" ry="2" />
<text  x="549.63" y="479.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (4 samples, 0.08%)</title><rect x="801.1" y="357" width="0.9" height="15.0" fill="rgb(241,12,28)" rx="2" ry="2" />
<text  x="804.07" y="367.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (5 samples, 0.10%)</title><rect x="13.0" y="789" width="1.1" height="15.0" fill="rgb(247,199,22)" rx="2" ry="2" />
<text  x="15.96" y="799.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="71.4" y="597" width="0.3" height="15.0" fill="rgb(238,90,21)" rx="2" ry="2" />
<text  x="74.45" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (1 samples, 0.02%)</title><rect x="1112.9" y="629" width="0.2" height="15.0" fill="rgb(241,61,13)" rx="2" ry="2" />
<text  x="1115.85" y="639.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (603 samples, 11.63%)</title><rect x="723.2" y="677" width="137.3" height="15.0" fill="rgb(229,61,10)" rx="2" ry="2" />
<text  x="726.23" y="687.5" >single_node_cql_e..</text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (3 samples, 0.06%)</title><rect x="288.1" y="485" width="0.7" height="15.0" fill="rgb(222,146,45)" rx="2" ry="2" />
<text  x="291.10" y="495.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (3 samples, 0.06%)</title><rect x="1089.2" y="597" width="0.7" height="15.0" fill="rgb(220,3,45)" rx="2" ry="2" />
<text  x="1092.18" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="80.8" y="309" width="0.2" height="15.0" fill="rgb(235,219,52)" rx="2" ry="2" />
<text  x="83.78" y="319.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="248.5" y="357" width="0.5" height="15.0" fill="rgb(214,88,45)" rx="2" ry="2" />
<text  x="251.50" y="367.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="441.0" y="581" width="0.5" height="15.0" fill="rgb(217,22,40)" rx="2" ry="2" />
<text  x="444.04" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="531.2" y="533" width="0.2" height="15.0" fill="rgb(240,90,50)" rx="2" ry="2" />
<text  x="534.16" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (4 samples, 0.08%)</title><rect x="253.1" y="357" width="0.9" height="15.0" fill="rgb(216,114,31)" rx="2" ry="2" />
<text  x="256.05" y="367.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="462.9" y="453" width="1.3" height="15.0" fill="rgb(235,192,7)" rx="2" ry="2" />
<text  x="465.88" y="463.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (33 samples, 0.64%)</title><rect x="1117.2" y="533" width="7.5" height="15.0" fill="rgb(227,114,0)" rx="2" ry="2" />
<text  x="1120.17" y="543.5" ></text>
</g>
<g >
<title>ser::mutation_partition__rows&lt;bytes_ostream&gt;::add (1 samples, 0.02%)</title><rect x="1127.9" y="357" width="0.2" height="15.0" fill="rgb(221,179,31)" rx="2" ry="2" />
<text  x="1130.87" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (5 samples, 0.10%)</title><rect x="819.5" y="533" width="1.1" height="15.0" fill="rgb(254,128,30)" rx="2" ry="2" />
<text  x="822.50" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="944.7" y="613" width="0.2" height="15.0" fill="rgb(241,172,18)" rx="2" ry="2" />
<text  x="947.67" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="597.2" y="597" width="0.2" height="15.0" fill="rgb(205,173,38)" rx="2" ry="2" />
<text  x="600.16" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="1165.4" y="661" width="0.2" height="15.0" fill="rgb(239,46,11)" rx="2" ry="2" />
<text  x="1168.42" y="671.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (1 samples, 0.02%)</title><rect x="518.9" y="437" width="0.2" height="15.0" fill="rgb(236,208,23)" rx="2" ry="2" />
<text  x="521.87" y="447.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (690 samples, 13.31%)</title><rect x="158.2" y="581" width="157.0" height="15.0" fill="rgb(211,54,40)" rx="2" ry="2" />
<text  x="161.15" y="591.5" >seastar::repeat&lt;merg..</text>
</g>
<g >
<title>cql3_parser::CqlParser::init (1 samples, 0.02%)</title><rect x="20.7" y="613" width="0.2" height="15.0" fill="rgb(244,209,8)" rx="2" ry="2" />
<text  x="23.70" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="91.2" y="693" width="0.3" height="15.0" fill="rgb(253,83,47)" rx="2" ry="2" />
<text  x="94.25" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="789.5" y="485" width="0.2" height="15.0" fill="rgb(240,60,50)" rx="2" ry="2" />
<text  x="792.46" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (3 samples, 0.06%)</title><rect x="869.8" y="565" width="0.7" height="15.0" fill="rgb(207,173,12)" rx="2" ry="2" />
<text  x="872.80" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="72.8" y="661" width="0.2" height="15.0" fill="rgb(242,61,35)" rx="2" ry="2" />
<text  x="75.81" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="38.9" y="437" width="0.2" height="15.0" fill="rgb(221,59,49)" rx="2" ry="2" />
<text  x="41.90" y="447.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;single_node_cql_env::do_with (2 samples, 0.04%)</title><rect x="16.8" y="757" width="0.5" height="15.0" fill="rgb(231,52,21)" rx="2" ry="2" />
<text  x="19.83" y="767.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (73 samples, 1.41%)</title><rect x="561.9" y="597" width="16.6" height="15.0" fill="rgb(228,101,39)" rx="2" ry="2" />
<text  x="564.88" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="16.6" y="645" width="0.2" height="15.0" fill="rgb(246,184,33)" rx="2" ry="2" />
<text  x="19.60" y="655.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%)</title><rect x="520.7" y="421" width="0.2" height="15.0" fill="rgb(210,178,23)" rx="2" ry="2" />
<text  x="523.69" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="189.6" y="453" width="0.2" height="15.0" fill="rgb(211,168,5)" rx="2" ry="2" />
<text  x="192.56" y="463.5" ></text>
</g>
<g >
<title>row::row (2 samples, 0.04%)</title><rect x="284.5" y="405" width="0.4" height="15.0" fill="rgb(218,91,38)" rx="2" ry="2" />
<text  x="287.46" y="415.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (14 samples, 0.27%)</title><rect x="748.3" y="533" width="3.2" height="15.0" fill="rgb(216,220,13)" rx="2" ry="2" />
<text  x="751.27" y="543.5" ></text>
</g>
<g >
<title>bytes_ostream::view (1 samples, 0.02%)</title><rect x="600.3" y="613" width="0.3" height="15.0" fill="rgb(222,80,17)" rx="2" ry="2" />
<text  x="603.34" y="623.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (3 samples, 0.06%)</title><rect x="103.1" y="661" width="0.7" height="15.0" fill="rgb(216,221,46)" rx="2" ry="2" />
<text  x="106.08" y="671.5" ></text>
</g>
<g >
<title>std::locale::_S_initialize (1 samples, 0.02%)</title><rect x="84.0" y="789" width="0.2" height="15.0" fill="rgb(247,63,22)" rx="2" ry="2" />
<text  x="86.96" y="799.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::sharded&lt;cdc::generation_service&gt;::stop (1 samples, 0.02%)</title><rect x="16.8" y="709" width="0.3" height="15.0" fill="rgb(219,102,2)" rx="2" ry="2" />
<text  x="19.83" y="719.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;clustering_key_prefix&gt; (1 samples, 0.02%)</title><rect x="1129.2" y="293" width="0.3" height="15.0" fill="rgb(241,117,17)" rx="2" ry="2" />
<text  x="1132.24" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="904.6" y="469" width="0.2" height="15.0" fill="rgb(242,23,44)" rx="2" ry="2" />
<text  x="907.62" y="479.5" ></text>
</g>
<g >
<title>db::schema_tables::create_columns_from_column_rows (1 samples, 0.02%)</title><rect x="102.6" y="613" width="0.3" height="15.0" fill="rgb(247,131,24)" rx="2" ry="2" />
<text  x="105.62" y="623.5" ></text>
</g>
<g >
<title>service::storage_service::init_server (1 samples, 0.02%)</title><rect x="80.8" y="693" width="0.2" height="15.0" fill="rgb(254,71,42)" rx="2" ry="2" />
<text  x="83.78" y="703.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (121 samples, 2.33%)</title><rect x="786.0" y="533" width="27.6" height="15.0" fill="rgb(244,98,27)" rx="2" ry="2" />
<text  x="789.05" y="543.5" >s..</text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="837.5" y="645" width="0.4" height="15.0" fill="rgb(221,59,45)" rx="2" ry="2" />
<text  x="840.48" y="655.5" ></text>
</g>
<g >
<title>row_cache::do_update (2 samples, 0.04%)</title><rect x="1131.7" y="613" width="0.5" height="15.0" fill="rgb(208,71,51)" rx="2" ry="2" />
<text  x="1134.74" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (19 samples, 0.37%)</title><rect x="1158.4" y="693" width="4.3" height="15.0" fill="rgb(234,224,13)" rx="2" ry="2" />
<text  x="1161.37" y="703.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%)</title><rect x="745.5" y="581" width="0.9" height="15.0" fill="rgb(225,189,51)" rx="2" ry="2" />
<text  x="748.54" y="591.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="573.0" y="485" width="1.2" height="15.0" fill="rgb(214,100,26)" rx="2" ry="2" />
<text  x="576.03" y="495.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (11 samples, 0.21%)</title><rect x="936.9" y="597" width="2.5" height="15.0" fill="rgb(213,16,24)" rx="2" ry="2" />
<text  x="939.93" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%)</title><rect x="812.4" y="501" width="1.2" height="15.0" fill="rgb(252,52,30)" rx="2" ry="2" />
<text  x="815.45" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="63.0" y="549" width="0.3" height="15.0" fill="rgb(223,1,37)" rx="2" ry="2" />
<text  x="66.03" y="559.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (4 samples, 0.08%)</title><rect x="255.1" y="357" width="0.9" height="15.0" fill="rgb(242,108,8)" rx="2" ry="2" />
<text  x="258.10" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (4 samples, 0.08%)</title><rect x="183.4" y="453" width="0.9" height="15.0" fill="rgb(253,132,32)" rx="2" ry="2" />
<text  x="186.42" y="463.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (2 samples, 0.04%)</title><rect x="1162.7" y="709" width="0.4" height="15.0" fill="rgb(240,227,41)" rx="2" ry="2" />
<text  x="1165.69" y="719.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="79.0" y="229" width="0.2" height="15.0" fill="rgb(245,22,0)" rx="2" ry="2" />
<text  x="81.96" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_service_level_statement, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="64.2" y="581" width="0.2" height="15.0" fill="rgb(246,93,7)" rx="2" ry="2" />
<text  x="67.16" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;managed_bytes&gt;::dispose (1 samples, 0.02%)</title><rect x="916.4" y="565" width="0.3" height="15.0" fill="rgb(205,7,3)" rx="2" ry="2" />
<text  x="919.45" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="1032.7" y="485" width="0.5" height="15.0" fill="rgb(225,67,11)" rx="2" ry="2" />
<text  x="1035.74" y="495.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%)</title><rect x="819.7" y="517" width="0.3" height="15.0" fill="rgb(246,102,41)" rx="2" ry="2" />
<text  x="822.73" y="527.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (2 samples, 0.04%)</title><rect x="580.3" y="581" width="0.5" height="15.0" fill="rgb(233,122,3)" rx="2" ry="2" />
<text  x="583.31" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::constants::setter&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="653.8" y="645" width="0.3" height="15.0" fill="rgb(244,60,34)" rx="2" ry="2" />
<text  x="656.82" y="655.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (2 samples, 0.04%)</title><rect x="1081.7" y="469" width="0.4" height="15.0" fill="rgb(211,62,48)" rx="2" ry="2" />
<text  x="1084.67" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="843.2" y="645" width="0.4" height="15.0" fill="rgb(211,209,39)" rx="2" ry="2" />
<text  x="846.17" y="655.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (84 samples, 1.62%)</title><rect x="511.6" y="517" width="19.1" height="15.0" fill="rgb(211,115,54)" rx="2" ry="2" />
<text  x="514.59" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (31 samples, 0.60%)</title><rect x="569.8" y="517" width="7.1" height="15.0" fill="rgb(225,133,20)" rx="2" ry="2" />
<text  x="572.85" y="527.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.14%)</title><rect x="92.8" y="677" width="1.6" height="15.0" fill="rgb(227,207,8)" rx="2" ry="2" />
<text  x="95.84" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="198.0" y="389" width="0.9" height="15.0" fill="rgb(215,156,9)" rx="2" ry="2" />
<text  x="200.98" y="399.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1081.7" y="453" width="0.2" height="15.0" fill="rgb(215,67,32)" rx="2" ry="2" />
<text  x="1084.67" y="463.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::invoke_on_all&lt;single_node_cql_env::prepare (1 samples, 0.02%)</title><rect x="79.0" y="709" width="0.2" height="15.0" fill="rgb(211,147,26)" rx="2" ry="2" />
<text  x="81.96" y="719.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="264.9" y="421" width="0.2" height="15.0" fill="rgb(249,97,27)" rx="2" ry="2" />
<text  x="267.89" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="761.0" y="613" width="0.2" height="15.0" fill="rgb(228,114,16)" rx="2" ry="2" />
<text  x="764.01" y="623.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (4 samples, 0.08%)</title><rect x="11.1" y="789" width="0.9" height="15.0" fill="rgb(209,135,26)" rx="2" ry="2" />
<text  x="14.14" y="799.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (17 samples, 0.33%)</title><rect x="520.2" y="437" width="3.9" height="15.0" fill="rgb(219,89,24)" rx="2" ry="2" />
<text  x="523.23" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="859.6" y="645" width="0.2" height="15.0" fill="rgb(252,48,4)" rx="2" ry="2" />
<text  x="862.55" y="655.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="1059.4" y="485" width="0.2" height="15.0" fill="rgb(229,61,43)" rx="2" ry="2" />
<text  x="1062.37" y="495.5" ></text>
</g>
<g >
<title>ser::mutation_view::table_id (1 samples, 0.02%)</title><rect x="1124.9" y="517" width="0.2" height="15.0" fill="rgb(226,87,0)" rx="2" ry="2" />
<text  x="1127.91" y="527.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (1 samples, 0.02%)</title><rect x="79.0" y="341" width="0.2" height="15.0" fill="rgb(244,72,0)" rx="2" ry="2" />
<text  x="81.96" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (4 samples, 0.08%)</title><rect x="870.9" y="581" width="0.9" height="15.0" fill="rgb(249,136,48)" rx="2" ry="2" />
<text  x="873.93" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (9 samples, 0.17%)</title><rect x="671.1" y="677" width="2.1" height="15.0" fill="rgb(228,45,11)" rx="2" ry="2" />
<text  x="674.12" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="103.5" y="581" width="0.3" height="15.0" fill="rgb(206,51,35)" rx="2" ry="2" />
<text  x="106.54" y="591.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (22 samples, 0.42%)</title><rect x="931.5" y="581" width="5.0" height="15.0" fill="rgb(225,94,10)" rx="2" ry="2" />
<text  x="934.47" y="591.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (1 samples, 0.02%)</title><rect x="418.5" y="437" width="0.2" height="15.0" fill="rgb(254,150,3)" rx="2" ry="2" />
<text  x="421.51" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="39.4" y="485" width="0.4" height="15.0" fill="rgb(228,187,1)" rx="2" ry="2" />
<text  x="42.36" y="495.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (17 samples, 0.33%)</title><rect x="901.9" y="485" width="3.9" height="15.0" fill="rgb(250,189,25)" rx="2" ry="2" />
<text  x="904.88" y="495.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (8 samples, 0.15%)</title><rect x="193.9" y="421" width="1.8" height="15.0" fill="rgb(238,65,50)" rx="2" ry="2" />
<text  x="196.88" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="38.0" y="405" width="0.2" height="15.0" fill="rgb(235,87,45)" rx="2" ry="2" />
<text  x="40.99" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="806.8" y="453" width="0.9" height="15.0" fill="rgb(237,47,6)" rx="2" ry="2" />
<text  x="809.76" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (1 samples, 0.02%)</title><rect x="948.1" y="597" width="0.2" height="15.0" fill="rgb(241,27,39)" rx="2" ry="2" />
<text  x="951.08" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="247.1" y="373" width="0.3" height="15.0" fill="rgb(220,56,30)" rx="2" ry="2" />
<text  x="250.14" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="82.4" y="485" width="0.2" height="15.0" fill="rgb(209,32,19)" rx="2" ry="2" />
<text  x="85.37" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="80.3" y="805" width="0.2" height="15.0" fill="rgb(233,45,49)" rx="2" ry="2" />
<text  x="83.32" y="815.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%)</title><rect x="47.6" y="405" width="0.6" height="15.0" fill="rgb(211,183,14)" rx="2" ry="2" />
<text  x="50.55" y="415.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (2 samples, 0.04%)</title><rect x="982.4" y="565" width="0.5" height="15.0" fill="rgb(214,173,47)" rx="2" ry="2" />
<text  x="985.45" y="575.5" ></text>
</g>
<g >
<title>set_field&lt;long&gt; (1 samples, 0.02%)</title><rect x="872.3" y="437" width="0.2" height="15.0" fill="rgb(209,151,29)" rx="2" ry="2" />
<text  x="875.30" y="447.5" ></text>
</g>
<g >
<title>sstring_hash::operator (2 samples, 0.04%)</title><rect x="831.3" y="517" width="0.5" height="15.0" fill="rgb(217,221,19)" rx="2" ry="2" />
<text  x="834.33" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%)</title><rect x="741.0" y="597" width="0.2" height="15.0" fill="rgb(231,135,1)" rx="2" ry="2" />
<text  x="743.99" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%)</title><rect x="25.0" y="453" width="0.5" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="28.02" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (2 samples, 0.04%)</title><rect x="295.4" y="533" width="0.4" height="15.0" fill="rgb(235,33,40)" rx="2" ry="2" />
<text  x="298.38" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::shared_ptr (1 samples, 0.02%)</title><rect x="57.8" y="533" width="0.2" height="15.0" fill="rgb(251,219,25)" rx="2" ry="2" />
<text  x="60.79" y="543.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (39 samples, 0.75%)</title><rect x="496.1" y="469" width="8.9" height="15.0" fill="rgb(206,40,19)" rx="2" ry="2" />
<text  x="499.11" y="479.5" ></text>
</g>
<g >
<title>aligned_alloc (1 samples, 0.02%)</title><rect x="693.0" y="645" width="0.2" height="15.0" fill="rgb(252,79,43)" rx="2" ry="2" />
<text  x="695.97" y="655.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (11 samples, 0.21%)</title><rect x="780.8" y="533" width="2.5" height="15.0" fill="rgb(211,14,47)" rx="2" ry="2" />
<text  x="783.81" y="543.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="569.4" y="485" width="0.4" height="15.0" fill="rgb(234,25,24)" rx="2" ry="2" />
<text  x="572.39" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (1 samples, 0.02%)</title><rect x="91.7" y="677" width="0.2" height="15.0" fill="rgb(218,114,4)" rx="2" ry="2" />
<text  x="94.70" y="687.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="832.0" y="613" width="0.2" height="15.0" fill="rgb(209,180,51)" rx="2" ry="2" />
<text  x="835.02" y="623.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (5 samples, 0.10%)</title><rect x="273.8" y="389" width="1.1" height="15.0" fill="rgb(247,55,9)" rx="2" ry="2" />
<text  x="276.76" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="1106.5" y="581" width="0.9" height="15.0" fill="rgb(250,148,8)" rx="2" ry="2" />
<text  x="1109.48" y="591.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (1 samples, 0.02%)</title><rect x="1127.6" y="373" width="0.3" height="15.0" fill="rgb(252,83,32)" rx="2" ry="2" />
<text  x="1130.64" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (1 samples, 0.02%)</title><rect x="37.1" y="501" width="0.2" height="15.0" fill="rgb(228,65,9)" rx="2" ry="2" />
<text  x="40.08" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="43.9" y="501" width="0.5" height="15.0" fill="rgb(235,193,7)" rx="2" ry="2" />
<text  x="46.91" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (1 samples, 0.02%)</title><rect x="514.5" y="501" width="0.3" height="15.0" fill="rgb(207,195,0)" rx="2" ry="2" />
<text  x="517.54" y="511.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="40.7" y="325" width="0.3" height="15.0" fill="rgb(230,42,44)" rx="2" ry="2" />
<text  x="43.72" y="335.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="90.6" y="693" width="0.4" height="15.0" fill="rgb(227,129,36)" rx="2" ry="2" />
<text  x="93.56" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;10ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="53.9" y="325" width="0.3" height="15.0" fill="rgb(226,18,2)" rx="2" ry="2" />
<text  x="56.92" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (1,031 samples, 19.88%)</title><rect x="881.9" y="645" width="234.6" height="15.0" fill="rgb(251,194,45)" rx="2" ry="2" />
<text  x="884.86" y="655.5" >cql3::statements::select_statem..</text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%)</title><rect x="767.6" y="549" width="0.2" height="15.0" fill="rgb(224,18,24)" rx="2" ry="2" />
<text  x="770.61" y="559.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (3 samples, 0.06%)</title><rect x="609.2" y="613" width="0.7" height="15.0" fill="rgb(252,56,38)" rx="2" ry="2" />
<text  x="612.22" y="623.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (8 samples, 0.15%)</title><rect x="81.0" y="677" width="1.8" height="15.0" fill="rgb(249,187,14)" rx="2" ry="2" />
<text  x="84.00" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (11 samples, 0.21%)</title><rect x="94.9" y="645" width="2.5" height="15.0" fill="rgb(249,55,33)" rx="2" ry="2" />
<text  x="97.89" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (1 samples, 0.02%)</title><rect x="86.0" y="725" width="0.2" height="15.0" fill="rgb(216,91,50)" rx="2" ry="2" />
<text  x="89.01" y="735.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="864.3" y="693" width="0.3" height="15.0" fill="rgb(211,164,12)" rx="2" ry="2" />
<text  x="867.33" y="703.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (94 samples, 1.81%)</title><rect x="1062.6" y="549" width="21.3" height="15.0" fill="rgb(215,72,27)" rx="2" ry="2" />
<text  x="1065.56" y="559.5" >s..</text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl_nrvo&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="640.9" y="693" width="0.2" height="15.0" fill="rgb(228,161,41)" rx="2" ry="2" />
<text  x="643.85" y="703.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (438 samples, 8.45%)</title><rect x="737.3" y="645" width="99.7" height="15.0" fill="rgb(237,223,14)" rx="2" ry="2" />
<text  x="740.34" y="655.5" >cql3::query_..</text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (8 samples, 0.15%)</title><rect x="391.4" y="389" width="1.8" height="15.0" fill="rgb(246,7,32)" rx="2" ry="2" />
<text  x="394.42" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="98.8" y="677" width="0.2" height="15.0" fill="rgb(222,105,22)" rx="2" ry="2" />
<text  x="101.76" y="687.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (1 samples, 0.02%)</title><rect x="430.8" y="453" width="0.2" height="15.0" fill="rgb(222,133,39)" rx="2" ry="2" />
<text  x="433.79" y="463.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (9 samples, 0.17%)</title><rect x="609.2" y="629" width="2.1" height="15.0" fill="rgb(239,184,50)" rx="2" ry="2" />
<text  x="612.22" y="639.5" ></text>
</g>
<g >
<title>database::find_column_family (11 samples, 0.21%)</title><rect x="1044.6" y="549" width="2.5" height="15.0" fill="rgb(213,43,48)" rx="2" ry="2" />
<text  x="1047.58" y="559.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="618.1" y="613" width="0.7" height="15.0" fill="rgb(211,113,7)" rx="2" ry="2" />
<text  x="621.09" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1141.1" y="693" width="0.2" height="15.0" fill="rgb(247,224,18)" rx="2" ry="2" />
<text  x="1144.07" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (18 samples, 0.35%)</title><rect x="1034.1" y="485" width="4.1" height="15.0" fill="rgb(226,215,15)" rx="2" ry="2" />
<text  x="1037.11" y="495.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="83.7" y="805" width="0.3" height="15.0" fill="rgb(235,147,15)" rx="2" ry="2" />
<text  x="86.74" y="815.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Parser (2 samples, 0.04%)</title><rect x="20.0" y="613" width="0.5" height="15.0" fill="rgb(220,77,13)" rx="2" ry="2" />
<text  x="23.01" y="623.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (13 samples, 0.25%)</title><rect x="1017.5" y="389" width="3.0" height="15.0" fill="rgb(233,196,45)" rx="2" ry="2" />
<text  x="1020.49" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1079.4" y="485" width="0.2" height="15.0" fill="rgb(210,220,40)" rx="2" ry="2" />
<text  x="1082.40" y="495.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (25 samples, 0.48%)</title><rect x="730.3" y="613" width="5.7" height="15.0" fill="rgb(241,32,42)" rx="2" ry="2" />
<text  x="733.29" y="623.5" ></text>
</g>
<g >
<title>query::querier&lt; (2 samples, 0.04%)</title><rect x="113.1" y="661" width="0.4" height="15.0" fill="rgb(248,187,8)" rx="2" ry="2" />
<text  x="116.09" y="671.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="45.0" y="373" width="0.3" height="15.0" fill="rgb(242,126,42)" rx="2" ry="2" />
<text  x="48.05" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::then_impl&lt;service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%)</title><rect x="971.5" y="453" width="0.3" height="15.0" fill="rgb(232,19,44)" rx="2" ry="2" />
<text  x="974.52" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="640.9" y="661" width="0.2" height="15.0" fill="rgb(237,61,37)" rx="2" ry="2" />
<text  x="643.85" y="671.5" ></text>
</g>
<g >
<title>mutation_partition::append_clustered_row (1 samples, 0.02%)</title><rect x="103.3" y="581" width="0.2" height="15.0" fill="rgb(214,103,48)" rx="2" ry="2" />
<text  x="106.31" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (88 samples, 1.70%)</title><rect x="394.6" y="405" width="20.0" height="15.0" fill="rgb(224,152,13)" rx="2" ry="2" />
<text  x="397.61" y="415.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare_one&lt;cql_transport::messages::result_message::prepared::cql, cql3::prepared_cache_key_type  (1 samples, 0.02%)</title><rect x="79.0" y="373" width="0.2" height="15.0" fill="rgb(242,176,10)" rx="2" ry="2" />
<text  x="81.96" y="383.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="80.8" y="757" width="0.2" height="15.0" fill="rgb(247,124,17)" rx="2" ry="2" />
<text  x="83.78" y="767.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (7 samples, 0.14%)</title><rect x="1058.0" y="501" width="1.6" height="15.0" fill="rgb(231,56,21)" rx="2" ry="2" />
<text  x="1061.00" y="511.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="949.2" y="597" width="0.2" height="15.0" fill="rgb(254,67,32)" rx="2" ry="2" />
<text  x="952.22" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (4 samples, 0.08%)</title><rect x="44.8" y="421" width="0.9" height="15.0" fill="rgb(240,151,36)" rx="2" ry="2" />
<text  x="47.82" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="19.8" y="677" width="0.2" height="15.0" fill="rgb(211,168,16)" rx="2" ry="2" />
<text  x="22.79" y="687.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt; (1 samples, 0.02%)</title><rect x="604.2" y="581" width="0.2" height="15.0" fill="rgb(236,152,53)" rx="2" ry="2" />
<text  x="607.21" y="591.5" ></text>
</g>
<g >
<title>utils::crc32::process (1 samples, 0.02%)</title><rect x="1123.8" y="453" width="0.2" height="15.0" fill="rgb(224,208,50)" rx="2" ry="2" />
<text  x="1126.77" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (211 samples, 4.07%)</title><rect x="993.1" y="533" width="48.1" height="15.0" fill="rgb(231,119,40)" rx="2" ry="2" />
<text  x="996.14" y="543.5" >serv..</text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="16.4" y="725" width="0.2" height="15.0" fill="rgb(226,152,22)" rx="2" ry="2" />
<text  x="19.37" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter&gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="713.4" y="645" width="0.3" height="15.0" fill="rgb(245,106,31)" rx="2" ry="2" />
<text  x="716.45" y="655.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, auth::permissions_cache::get (1 samples, 0.02%)</title><rect x="806.3" y="469" width="0.2" height="15.0" fill="rgb(214,64,14)" rx="2" ry="2" />
<text  x="809.30" y="479.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%)</title><rect x="258.1" y="357" width="0.6" height="15.0" fill="rgb(245,50,1)" rx="2" ry="2" />
<text  x="261.06" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (23 samples, 0.44%)</title><rect x="730.7" y="565" width="5.3" height="15.0" fill="rgb(220,4,43)" rx="2" ry="2" />
<text  x="733.74" y="575.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="22.5" y="581" width="0.2" height="15.0" fill="rgb(227,164,37)" rx="2" ry="2" />
<text  x="25.52" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="835.4" y="629" width="0.3" height="15.0" fill="rgb(221,170,7)" rx="2" ry="2" />
<text  x="838.43" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="73.7" y="597" width="0.2" height="15.0" fill="rgb(230,98,32)" rx="2" ry="2" />
<text  x="76.72" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;cql3::update_parameters::prefetch_data&gt;::clear (1 samples, 0.02%)</title><rect x="875.3" y="597" width="0.2" height="15.0" fill="rgb(214,137,14)" rx="2" ry="2" />
<text  x="878.26" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="115.4" y="645" width="0.2" height="15.0" fill="rgb(240,29,10)" rx="2" ry="2" />
<text  x="118.37" y="655.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="673.8" y="693" width="1.4" height="15.0" fill="rgb(254,40,30)" rx="2" ry="2" />
<text  x="676.85" y="703.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;sstables::sstable_directory&gt;::stop (1 samples, 0.02%)</title><rect x="15.5" y="757" width="0.2" height="15.0" fill="rgb(251,80,46)" rx="2" ry="2" />
<text  x="18.46" y="767.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (10 samples, 0.19%)</title><rect x="282.9" y="469" width="2.2" height="15.0" fill="rgb(243,26,18)" rx="2" ry="2" />
<text  x="285.87" y="479.5" ></text>
</g>
<g >
<title>service::storage_service::join_cluster (2 samples, 0.04%)</title><rect x="17.3" y="757" width="0.4" height="15.0" fill="rgb(214,50,17)" rx="2" ry="2" />
<text  x="20.28" y="767.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="594.2" y="597" width="0.2" height="15.0" fill="rgb(254,64,4)" rx="2" ry="2" />
<text  x="597.20" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1109.4" y="597" width="0.3" height="15.0" fill="rgb(252,67,46)" rx="2" ry="2" />
<text  x="1112.44" y="607.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="103.8" y="485" width="0.2" height="15.0" fill="rgb(250,87,39)" rx="2" ry="2" />
<text  x="106.76" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (1 samples, 0.02%)</title><rect x="79.0" y="277" width="0.2" height="15.0" fill="rgb(219,209,42)" rx="2" ry="2" />
<text  x="81.96" y="287.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::update_parameters::make_cell (2 samples, 0.04%)</title><rect x="872.3" y="485" width="0.5" height="15.0" fill="rgb(248,134,38)" rx="2" ry="2" />
<text  x="875.30" y="495.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="850.9" y="613" width="0.5" height="15.0" fill="rgb(238,191,21)" rx="2" ry="2" />
<text  x="853.91" y="623.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (6 samples, 0.12%)</title><rect x="942.4" y="549" width="1.4" height="15.0" fill="rgb(238,22,45)" rx="2" ry="2" />
<text  x="945.39" y="559.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (1 samples, 0.02%)</title><rect x="974.9" y="565" width="0.3" height="15.0" fill="rgb(252,126,37)" rx="2" ry="2" />
<text  x="977.94" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (4 samples, 0.08%)</title><rect x="861.6" y="677" width="0.9" height="15.0" fill="rgb(220,135,11)" rx="2" ry="2" />
<text  x="864.60" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="713.0" y="597" width="0.2" height="15.0" fill="rgb(210,106,26)" rx="2" ry="2" />
<text  x="715.99" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="63.0" y="565" width="0.3" height="15.0" fill="rgb(226,87,10)" rx="2" ry="2" />
<text  x="66.03" y="575.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (4 samples, 0.08%)</title><rect x="1139.5" y="693" width="0.9" height="15.0" fill="rgb(254,3,27)" rx="2" ry="2" />
<text  x="1142.48" y="703.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="384.4" y="357" width="0.4" height="15.0" fill="rgb(246,211,10)" rx="2" ry="2" />
<text  x="387.37" y="367.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (1 samples, 0.02%)</title><rect x="594.2" y="613" width="0.2" height="15.0" fill="rgb(253,220,0)" rx="2" ry="2" />
<text  x="597.20" y="623.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (43 samples, 0.83%)</title><rect x="458.3" y="501" width="9.8" height="15.0" fill="rgb(241,22,48)" rx="2" ry="2" />
<text  x="461.33" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="551.4" y="597" width="0.2" height="15.0" fill="rgb(238,132,43)" rx="2" ry="2" />
<text  x="554.41" y="607.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="805.4" y="405" width="0.2" height="15.0" fill="rgb(213,86,10)" rx="2" ry="2" />
<text  x="808.39" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (8 samples, 0.15%)</title><rect x="323.1" y="501" width="1.9" height="15.0" fill="rgb(212,166,4)" rx="2" ry="2" />
<text  x="326.15" y="511.5" ></text>
</g>
<g >
<title>dht::sharder::shard_of (1 samples, 0.02%)</title><rect x="998.2" y="501" width="0.2" height="15.0" fill="rgb(238,146,53)" rx="2" ry="2" />
<text  x="1001.15" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (4 samples, 0.08%)</title><rect x="49.1" y="501" width="1.0" height="15.0" fill="rgb(251,24,20)" rx="2" ry="2" />
<text  x="52.14" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (44 samples, 0.85%)</title><rect x="567.3" y="533" width="10.1" height="15.0" fill="rgb(215,88,7)" rx="2" ry="2" />
<text  x="570.34" y="543.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (5 samples, 0.10%)</title><rect x="821.8" y="581" width="1.1" height="15.0" fill="rgb(244,197,8)" rx="2" ry="2" />
<text  x="824.78" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="866.6" y="533" width="0.2" height="15.0" fill="rgb(220,28,33)" rx="2" ry="2" />
<text  x="869.61" y="543.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (35 samples, 0.68%)</title><rect x="797.7" y="421" width="7.9" height="15.0" fill="rgb(225,215,2)" rx="2" ry="2" />
<text  x="800.65" y="431.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (2 samples, 0.04%)</title><rect x="104.0" y="645" width="0.4" height="15.0" fill="rgb(241,224,23)" rx="2" ry="2" />
<text  x="106.99" y="655.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="689.1" y="677" width="0.2" height="15.0" fill="rgb(254,188,29)" rx="2" ry="2" />
<text  x="692.10" y="687.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (3 samples, 0.06%)</title><rect x="919.0" y="581" width="0.6" height="15.0" fill="rgb(234,66,11)" rx="2" ry="2" />
<text  x="921.95" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (2 samples, 0.04%)</title><rect x="1097.6" y="581" width="0.5" height="15.0" fill="rgb(237,210,8)" rx="2" ry="2" />
<text  x="1100.60" y="591.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (3 samples, 0.06%)</title><rect x="1110.6" y="629" width="0.7" height="15.0" fill="rgb(232,54,37)" rx="2" ry="2" />
<text  x="1113.57" y="639.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (5 samples, 0.10%)</title><rect x="273.8" y="405" width="1.1" height="15.0" fill="rgb(228,82,31)" rx="2" ry="2" />
<text  x="276.76" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (4 samples, 0.08%)</title><rect x="37.8" y="533" width="0.9" height="15.0" fill="rgb(248,209,0)" rx="2" ry="2" />
<text  x="40.76" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="698.7" y="661" width="0.4" height="15.0" fill="rgb(211,177,3)" rx="2" ry="2" />
<text  x="701.66" y="671.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (5 samples, 0.10%)</title><rect x="691.6" y="693" width="1.1" height="15.0" fill="rgb(253,191,0)" rx="2" ry="2" />
<text  x="694.60" y="703.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (2 samples, 0.04%)</title><rect x="615.1" y="645" width="0.5" height="15.0" fill="rgb(234,137,43)" rx="2" ry="2" />
<text  x="618.13" y="655.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6 samples, 0.12%)</title><rect x="383.0" y="357" width="1.4" height="15.0" fill="rgb(226,146,37)" rx="2" ry="2" />
<text  x="386.00" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (2 samples, 0.04%)</title><rect x="505.0" y="533" width="0.4" height="15.0" fill="rgb(242,66,45)" rx="2" ry="2" />
<text  x="507.99" y="543.5" ></text>
</g>
<g >
<title>schema::partition_key_size (1 samples, 0.02%)</title><rect x="1104.7" y="629" width="0.2" height="15.0" fill="rgb(249,106,45)" rx="2" ry="2" />
<text  x="1107.66" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="60.3" y="389" width="0.2" height="15.0" fill="rgb(249,120,38)" rx="2" ry="2" />
<text  x="63.30" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (2 samples, 0.04%)</title><rect x="114.2" y="629" width="0.5" height="15.0" fill="rgb(223,121,14)" rx="2" ry="2" />
<text  x="117.23" y="639.5" ></text>
</g>
<g >
<title>from_hex (1 samples, 0.02%)</title><rect x="66.7" y="565" width="0.2" height="15.0" fill="rgb(214,158,37)" rx="2" ry="2" />
<text  x="69.67" y="575.5" ></text>
</g>
<g >
<title>database::find_column_family (5 samples, 0.10%)</title><rect x="763.5" y="581" width="1.2" height="15.0" fill="rgb(245,192,50)" rx="2" ry="2" />
<text  x="766.52" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;  (1 samples, 0.02%)</title><rect x="640.6" y="661" width="0.3" height="15.0" fill="rgb(231,116,14)" rx="2" ry="2" />
<text  x="643.62" y="671.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (38 samples, 0.73%)</title><rect x="115.8" y="661" width="8.7" height="15.0" fill="rgb(224,83,38)" rx="2" ry="2" />
<text  x="118.82" y="671.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (7 samples, 0.14%)</title><rect x="553.7" y="597" width="1.6" height="15.0" fill="rgb(223,216,0)" rx="2" ry="2" />
<text  x="556.69" y="607.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%)</title><rect x="431.2" y="485" width="0.7" height="15.0" fill="rgb(237,143,13)" rx="2" ry="2" />
<text  x="434.25" y="495.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (2 samples, 0.04%)</title><rect x="103.1" y="645" width="0.4" height="15.0" fill="rgb(217,134,4)" rx="2" ry="2" />
<text  x="106.08" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="871.6" y="565" width="0.2" height="15.0" fill="rgb(241,75,49)" rx="2" ry="2" />
<text  x="874.62" y="575.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="103.1" y="501" width="0.2" height="15.0" fill="rgb(207,70,14)" rx="2" ry="2" />
<text  x="106.08" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="647.5" y="661" width="0.2" height="15.0" fill="rgb(232,132,14)" rx="2" ry="2" />
<text  x="650.45" y="671.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (1 samples, 0.02%)</title><rect x="108.8" y="677" width="0.2" height="15.0" fill="rgb(214,20,54)" rx="2" ry="2" />
<text  x="111.77" y="687.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (70 samples, 1.35%)</title><rect x="562.3" y="565" width="16.0" height="15.0" fill="rgb(253,67,20)" rx="2" ry="2" />
<text  x="565.34" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="39.1" y="501" width="0.3" height="15.0" fill="rgb(213,178,52)" rx="2" ry="2" />
<text  x="42.13" y="511.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (6 samples, 0.12%)</title><rect x="323.6" y="485" width="1.4" height="15.0" fill="rgb(248,112,45)" rx="2" ry="2" />
<text  x="326.60" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="865.5" y="709" width="0.2" height="15.0" fill="rgb(214,48,4)" rx="2" ry="2" />
<text  x="868.47" y="719.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (7 samples, 0.14%)</title><rect x="1125.8" y="485" width="1.6" height="15.0" fill="rgb(221,165,3)" rx="2" ry="2" />
<text  x="1128.82" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%)</title><rect x="866.6" y="661" width="0.2" height="15.0" fill="rgb(233,141,6)" rx="2" ry="2" />
<text  x="869.61" y="671.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="564.8" y="517" width="0.5" height="15.0" fill="rgb(208,105,2)" rx="2" ry="2" />
<text  x="567.84" y="527.5" ></text>
</g>
<g >
<title>seastar::file::flush (1 samples, 0.02%)</title><rect x="713.7" y="677" width="0.2" height="15.0" fill="rgb(227,132,12)" rx="2" ry="2" />
<text  x="716.68" y="687.5" ></text>
</g>
<g >
<title>std::apply&lt;table::try_flush_memtable_to_sstable (1 samples, 0.02%)</title><rect x="10.7" y="741" width="0.2" height="15.0" fill="rgb(220,88,14)" rx="2" ry="2" />
<text  x="13.68" y="751.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (39 samples, 0.75%)</title><rect x="867.7" y="677" width="8.9" height="15.0" fill="rgb(241,118,16)" rx="2" ry="2" />
<text  x="870.75" y="687.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (1 samples, 0.02%)</title><rect x="358.4" y="389" width="0.3" height="15.0" fill="rgb(252,117,13)" rx="2" ry="2" />
<text  x="361.42" y="399.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%)</title><rect x="1118.8" y="389" width="0.2" height="15.0" fill="rgb(207,35,39)" rx="2" ry="2" />
<text  x="1121.77" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="416.5" y="389" width="0.4" height="15.0" fill="rgb(251,112,8)" rx="2" ry="2" />
<text  x="419.46" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;static_row&gt;::_M_reset (2 samples, 0.04%)</title><rect x="626.1" y="629" width="0.4" height="15.0" fill="rgb(228,35,14)" rx="2" ry="2" />
<text  x="629.06" y="639.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (24 samples, 0.46%)</title><rect x="1125.8" y="549" width="5.5" height="15.0" fill="rgb(252,96,22)" rx="2" ry="2" />
<text  x="1128.82" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::release (1 samples, 0.02%)</title><rect x="51.0" y="437" width="0.2" height="15.0" fill="rgb(220,74,42)" rx="2" ry="2" />
<text  x="53.96" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (2 samples, 0.04%)</title><rect x="473.1" y="469" width="0.5" height="15.0" fill="rgb(238,224,24)" rx="2" ry="2" />
<text  x="476.12" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="54.6" y="373" width="0.2" height="15.0" fill="rgb(239,218,30)" rx="2" ry="2" />
<text  x="57.61" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="618.1" y="629" width="0.7" height="15.0" fill="rgb(228,40,7)" rx="2" ry="2" />
<text  x="621.09" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="1049.8" y="501" width="0.5" height="15.0" fill="rgb(240,123,40)" rx="2" ry="2" />
<text  x="1052.81" y="511.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="680.0" y="661" width="1.4" height="15.0" fill="rgb(213,195,29)" rx="2" ry="2" />
<text  x="682.99" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="53.7" y="421" width="0.5" height="15.0" fill="rgb(254,59,36)" rx="2" ry="2" />
<text  x="56.70" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (11 samples, 0.21%)</title><rect x="583.0" y="565" width="2.5" height="15.0" fill="rgb(241,160,32)" rx="2" ry="2" />
<text  x="586.05" y="575.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="17.3" y="453" width="0.2" height="15.0" fill="rgb(215,212,20)" rx="2" ry="2" />
<text  x="20.28" y="463.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (3 samples, 0.06%)</title><rect x="901.2" y="485" width="0.7" height="15.0" fill="rgb(249,42,10)" rx="2" ry="2" />
<text  x="904.20" y="495.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="60.5" y="453" width="0.3" height="15.0" fill="rgb(205,75,10)" rx="2" ry="2" />
<text  x="63.52" y="463.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_state (1 samples, 0.02%)</title><rect x="27.3" y="469" width="0.2" height="15.0" fill="rgb(246,132,16)" rx="2" ry="2" />
<text  x="30.30" y="479.5" ></text>
</g>
<g >
<title>compound_type&lt; (2 samples, 0.04%)</title><rect x="923.3" y="597" width="0.4" height="15.0" fill="rgb(249,146,16)" rx="2" ry="2" />
<text  x="926.28" y="607.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (1 samples, 0.02%)</title><rect x="576.9" y="517" width="0.2" height="15.0" fill="rgb(248,227,12)" rx="2" ry="2" />
<text  x="579.90" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (31 samples, 0.60%)</title><rect x="226.7" y="293" width="7.0" height="15.0" fill="rgb(251,84,26)" rx="2" ry="2" />
<text  x="229.66" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::~when_all_state (1 samples, 0.02%)</title><rect x="867.1" y="693" width="0.2" height="15.0" fill="rgb(219,209,32)" rx="2" ry="2" />
<text  x="870.06" y="703.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (2 samples, 0.04%)</title><rect x="505.4" y="533" width="0.5" height="15.0" fill="rgb(237,39,42)" rx="2" ry="2" />
<text  x="508.44" y="543.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="1104.2" y="629" width="0.5" height="15.0" fill="rgb(227,216,30)" rx="2" ry="2" />
<text  x="1107.20" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1085.8" y="565" width="0.2" height="15.0" fill="rgb(220,30,40)" rx="2" ry="2" />
<text  x="1088.77" y="575.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (12 samples, 0.23%)</title><rect x="990.2" y="501" width="2.7" height="15.0" fill="rgb(245,85,20)" rx="2" ry="2" />
<text  x="993.19" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%)</title><rect x="997.2" y="501" width="0.3" height="15.0" fill="rgb(205,193,46)" rx="2" ry="2" />
<text  x="1000.24" y="511.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (6 samples, 0.12%)</title><rect x="1128.1" y="357" width="1.4" height="15.0" fill="rgb(245,187,42)" rx="2" ry="2" />
<text  x="1131.10" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="270.6" y="453" width="0.2" height="15.0" fill="rgb(249,206,3)" rx="2" ry="2" />
<text  x="273.58" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="874.1" y="469" width="0.2" height="15.0" fill="rgb(242,85,30)" rx="2" ry="2" />
<text  x="877.12" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="1023.9" y="405" width="1.8" height="15.0" fill="rgb(213,194,11)" rx="2" ry="2" />
<text  x="1026.87" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cdc::generation_service&gt;::operator= (1 samples, 0.02%)</title><rect x="16.8" y="597" width="0.3" height="15.0" fill="rgb(209,125,11)" rx="2" ry="2" />
<text  x="19.83" y="607.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="15.9" y="741" width="0.5" height="15.0" fill="rgb(229,194,53)" rx="2" ry="2" />
<text  x="18.92" y="751.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="1132.0" y="485" width="0.2" height="15.0" fill="rgb(229,161,10)" rx="2" ry="2" />
<text  x="1134.97" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (5 samples, 0.10%)</title><rect x="1059.6" y="501" width="1.1" height="15.0" fill="rgb(245,3,41)" rx="2" ry="2" />
<text  x="1062.60" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="437.2" y="533" width="0.2" height="15.0" fill="rgb(224,133,47)" rx="2" ry="2" />
<text  x="440.17" y="543.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="866.6" y="485" width="0.2" height="15.0" fill="rgb(206,50,40)" rx="2" ry="2" />
<text  x="869.61" y="495.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="272.2" y="421" width="0.2" height="15.0" fill="rgb(206,41,15)" rx="2" ry="2" />
<text  x="275.17" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.04%)</title><rect x="1157.9" y="677" width="0.5" height="15.0" fill="rgb(239,73,54)" rx="2" ry="2" />
<text  x="1160.91" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="44.4" y="501" width="0.2" height="15.0" fill="rgb(233,153,24)" rx="2" ry="2" />
<text  x="47.36" y="511.5" ></text>
</g>
<g >
<title>cql3::prepare_context::prepare_context (1 samples, 0.02%)</title><rect x="66.0" y="661" width="0.2" height="15.0" fill="rgb(222,59,11)" rx="2" ry="2" />
<text  x="68.98" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.02%)</title><rect x="28.0" y="405" width="0.2" height="15.0" fill="rgb(249,66,36)" rx="2" ry="2" />
<text  x="30.98" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="48.2" y="517" width="0.3" height="15.0" fill="rgb(211,177,41)" rx="2" ry="2" />
<text  x="51.23" y="527.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%)</title><rect x="16.6" y="453" width="0.2" height="15.0" fill="rgb(243,119,20)" rx="2" ry="2" />
<text  x="19.60" y="463.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;cdc::generation_service&gt;::stop (1 samples, 0.02%)</title><rect x="16.8" y="613" width="0.3" height="15.0" fill="rgb(220,181,53)" rx="2" ry="2" />
<text  x="19.83" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (2 samples, 0.04%)</title><rect x="144.5" y="613" width="0.5" height="15.0" fill="rgb(210,87,15)" rx="2" ry="2" />
<text  x="147.50" y="623.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (1 samples, 0.02%)</title><rect x="918.5" y="533" width="0.2" height="15.0" fill="rgb(218,98,31)" rx="2" ry="2" />
<text  x="921.50" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (12 samples, 0.23%)</title><rect x="33.2" y="469" width="2.7" height="15.0" fill="rgb(215,118,1)" rx="2" ry="2" />
<text  x="36.21" y="479.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (2 samples, 0.04%)</title><rect x="1081.7" y="501" width="0.4" height="15.0" fill="rgb(248,97,35)" rx="2" ry="2" />
<text  x="1084.67" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="69.9" y="565" width="0.2" height="15.0" fill="rgb(234,75,5)" rx="2" ry="2" />
<text  x="72.85" y="575.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.48%)</title><rect x="1125.8" y="677" width="5.7" height="15.0" fill="rgb(242,104,15)" rx="2" ry="2" />
<text  x="1128.82" y="687.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (1 samples, 0.02%)</title><rect x="447.0" y="565" width="0.2" height="15.0" fill="rgb(242,226,12)" rx="2" ry="2" />
<text  x="449.95" y="575.5" ></text>
</g>
<g >
<title>row::row (138 samples, 2.66%)</title><rect x="210.3" y="357" width="31.4" height="15.0" fill="rgb(245,200,34)" rx="2" ry="2" />
<text  x="213.27" y="367.5" >ro..</text>
</g>
<g >
<title>service::abstract_read_executor::execute (255 samples, 4.92%)</title><rect x="983.4" y="565" width="58.0" height="15.0" fill="rgb(213,219,16)" rx="2" ry="2" />
<text  x="986.36" y="575.5" >servic..</text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (3 samples, 0.06%)</title><rect x="961.1" y="597" width="0.6" height="15.0" fill="rgb(249,193,19)" rx="2" ry="2" />
<text  x="964.05" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="576.2" y="501" width="0.2" height="15.0" fill="rgb(214,89,49)" rx="2" ry="2" />
<text  x="579.22" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (1 samples, 0.02%)</title><rect x="69.2" y="549" width="0.2" height="15.0" fill="rgb(205,113,32)" rx="2" ry="2" />
<text  x="72.17" y="559.5" ></text>
</g>
<g >
<title>sstables::sstable::seal_sstable (1 samples, 0.02%)</title><rect x="713.7" y="693" width="0.2" height="15.0" fill="rgb(226,68,45)" rx="2" ry="2" />
<text  x="716.68" y="703.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%)</title><rect x="443.1" y="629" width="0.4" height="15.0" fill="rgb(209,168,19)" rx="2" ry="2" />
<text  x="446.08" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (6 samples, 0.12%)</title><rect x="66.7" y="613" width="1.3" height="15.0" fill="rgb(226,108,11)" rx="2" ry="2" />
<text  x="69.67" y="623.5" ></text>
</g>
<g >
<title>pthread_self (1 samples, 0.02%)</title><rect x="80.3" y="789" width="0.2" height="15.0" fill="rgb(212,206,41)" rx="2" ry="2" />
<text  x="83.32" y="799.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="510.0" y="517" width="0.2" height="15.0" fill="rgb(235,34,37)" rx="2" ry="2" />
<text  x="512.99" y="527.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="419.4" y="437" width="0.2" height="15.0" fill="rgb(230,46,17)" rx="2" ry="2" />
<text  x="422.42" y="447.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (1 samples, 0.02%)</title><rect x="78.7" y="709" width="0.3" height="15.0" fill="rgb(248,20,15)" rx="2" ry="2" />
<text  x="81.73" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_deleter (1 samples, 0.02%)</title><rect x="50.7" y="437" width="0.3" height="15.0" fill="rgb(212,74,43)" rx="2" ry="2" />
<text  x="53.74" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (4 samples, 0.08%)</title><rect x="1113.8" y="629" width="0.9" height="15.0" fill="rgb(229,71,15)" rx="2" ry="2" />
<text  x="1116.76" y="639.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="278.1" y="405" width="0.4" height="15.0" fill="rgb(205,100,35)" rx="2" ry="2" />
<text  x="281.09" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="568.0" y="501" width="0.3" height="15.0" fill="rgb(215,158,43)" rx="2" ry="2" />
<text  x="571.03" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.10%)</title><rect x="1037.1" y="405" width="1.1" height="15.0" fill="rgb(246,10,54)" rx="2" ry="2" />
<text  x="1040.07" y="415.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="1054.1" y="533" width="1.4" height="15.0" fill="rgb(239,226,18)" rx="2" ry="2" />
<text  x="1057.14" y="543.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="444.9" y="581" width="0.2" height="15.0" fill="rgb(223,193,3)" rx="2" ry="2" />
<text  x="447.90" y="591.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="926.2" y="549" width="0.3" height="15.0" fill="rgb(221,115,8)" rx="2" ry="2" />
<text  x="929.24" y="559.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="32.8" y="437" width="0.2" height="15.0" fill="rgb(243,60,32)" rx="2" ry="2" />
<text  x="35.76" y="447.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="81.2" y="533" width="0.3" height="15.0" fill="rgb(210,199,32)" rx="2" ry="2" />
<text  x="84.23" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="698.4" y="661" width="0.3" height="15.0" fill="rgb(228,67,39)" rx="2" ry="2" />
<text  x="701.43" y="671.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::smp::invoke_on_all&lt;single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="17.1" y="677" width="0.2" height="15.0" fill="rgb(215,59,10)" rx="2" ry="2" />
<text  x="20.05" y="687.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (24 samples, 0.46%)</title><rect x="191.6" y="437" width="5.5" height="15.0" fill="rgb(246,138,42)" rx="2" ry="2" />
<text  x="194.61" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="817.5" y="549" width="0.2" height="15.0" fill="rgb(228,113,48)" rx="2" ry="2" />
<text  x="820.45" y="559.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (4 samples, 0.08%)</title><rect x="731.7" y="517" width="0.9" height="15.0" fill="rgb(209,153,8)" rx="2" ry="2" />
<text  x="734.65" y="527.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (567 samples, 10.94%)</title><rect x="725.1" y="661" width="129.0" height="15.0" fill="rgb(207,119,24)" rx="2" ry="2" />
<text  x="728.05" y="671.5" >single_node_cql_..</text>
</g>
<g >
<title>cql3_parser::CqlParser::selectStatement (1 samples, 0.02%)</title><rect x="80.8" y="437" width="0.2" height="15.0" fill="rgb(246,31,43)" rx="2" ry="2" />
<text  x="83.78" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_cql (1 samples, 0.02%)</title><rect x="673.4" y="709" width="0.2" height="15.0" fill="rgb(245,105,21)" rx="2" ry="2" />
<text  x="676.39" y="719.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="196.2" y="405" width="0.9" height="15.0" fill="rgb(220,115,12)" rx="2" ry="2" />
<text  x="199.16" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="80.8" y="485" width="0.2" height="15.0" fill="rgb(250,166,37)" rx="2" ry="2" />
<text  x="83.78" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (3 samples, 0.06%)</title><rect x="291.1" y="517" width="0.6" height="15.0" fill="rgb(216,39,38)" rx="2" ry="2" />
<text  x="294.06" y="527.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::work_item, 128ul&gt;::pop_front (1 samples, 0.02%)</title><rect x="1116.9" y="677" width="0.3" height="15.0" fill="rgb(233,137,13)" rx="2" ry="2" />
<text  x="1119.95" y="687.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (5 samples, 0.10%)</title><rect x="41.9" y="453" width="1.1" height="15.0" fill="rgb(216,194,23)" rx="2" ry="2" />
<text  x="44.86" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.14%)</title><rect x="415.3" y="405" width="1.6" height="15.0" fill="rgb(211,146,18)" rx="2" ry="2" />
<text  x="418.32" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="714.4" y="709" width="0.2" height="15.0" fill="rgb(235,70,34)" rx="2" ry="2" />
<text  x="717.36" y="719.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%)</title><rect x="569.4" y="501" width="0.4" height="15.0" fill="rgb(238,139,32)" rx="2" ry="2" />
<text  x="572.39" y="511.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (25 samples, 0.48%)</title><rect x="1117.4" y="485" width="5.7" height="15.0" fill="rgb(243,196,52)" rx="2" ry="2" />
<text  x="1120.40" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.10%)</title><rect x="669.5" y="693" width="1.2" height="15.0" fill="rgb(241,109,39)" rx="2" ry="2" />
<text  x="672.53" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (19 samples, 0.37%)</title><rect x="1075.1" y="485" width="4.3" height="15.0" fill="rgb(247,18,50)" rx="2" ry="2" />
<text  x="1078.07" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%)</title><rect x="971.5" y="517" width="0.3" height="15.0" fill="rgb(208,5,33)" rx="2" ry="2" />
<text  x="974.52" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (43 samples, 0.83%)</title><rect x="26.8" y="485" width="9.8" height="15.0" fill="rgb(237,139,28)" rx="2" ry="2" />
<text  x="29.84" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (1 samples, 0.02%)</title><rect x="564.6" y="517" width="0.2" height="15.0" fill="rgb(206,176,9)" rx="2" ry="2" />
<text  x="567.61" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="912.6" y="501" width="0.2" height="15.0" fill="rgb(236,104,9)" rx="2" ry="2" />
<text  x="915.58" y="511.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="80.8" y="773" width="0.2" height="15.0" fill="rgb(254,84,46)" rx="2" ry="2" />
<text  x="83.78" y="783.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (163 samples, 3.14%)</title><rect x="779.7" y="549" width="37.1" height="15.0" fill="rgb(234,5,54)" rx="2" ry="2" />
<text  x="782.67" y="559.5" >ser..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (3 samples, 0.06%)</title><rect x="119.0" y="597" width="0.7" height="15.0" fill="rgb(249,174,40)" rx="2" ry="2" />
<text  x="122.01" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="963.1" y="581" width="0.5" height="15.0" fill="rgb(246,2,48)" rx="2" ry="2" />
<text  x="966.10" y="591.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="510.4" y="517" width="0.3" height="15.0" fill="rgb(212,20,43)" rx="2" ry="2" />
<text  x="513.45" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="1038.2" y="485" width="0.7" height="15.0" fill="rgb(231,11,43)" rx="2" ry="2" />
<text  x="1041.20" y="495.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.85%)</title><rect x="1179.1" y="837" width="10.0" height="15.0" fill="rgb(236,152,17)" rx="2" ry="2" />
<text  x="1182.08" y="847.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (5 samples, 0.10%)</title><rect x="1126.3" y="453" width="1.1" height="15.0" fill="rgb(232,164,1)" rx="2" ry="2" />
<text  x="1129.28" y="463.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (1 samples, 0.02%)</title><rect x="1123.1" y="485" width="0.2" height="15.0" fill="rgb(214,129,19)" rx="2" ry="2" />
<text  x="1126.09" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="1126.3" y="341" width="0.2" height="15.0" fill="rgb(207,43,13)" rx="2" ry="2" />
<text  x="1129.28" y="351.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="655.2" y="677" width="0.2" height="15.0" fill="rgb(240,34,13)" rx="2" ry="2" />
<text  x="658.19" y="687.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (1 samples, 0.02%)</title><rect x="393.5" y="421" width="0.2" height="15.0" fill="rgb(215,85,4)" rx="2" ry="2" />
<text  x="396.47" y="431.5" ></text>
</g>
<g >
<title>validation::validate_column_family (39 samples, 0.75%)</title><rect x="823.1" y="597" width="8.9" height="15.0" fill="rgb(250,132,1)" rx="2" ry="2" />
<text  x="826.14" y="607.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (11 samples, 0.21%)</title><rect x="680.0" y="677" width="2.5" height="15.0" fill="rgb(227,69,54)" rx="2" ry="2" />
<text  x="682.99" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1096.5" y="565" width="0.2" height="15.0" fill="rgb(241,181,52)" rx="2" ry="2" />
<text  x="1099.46" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="936.7" y="597" width="0.2" height="15.0" fill="rgb(211,188,19)" rx="2" ry="2" />
<text  x="939.70" y="607.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (4 samples, 0.08%)</title><rect x="960.8" y="613" width="0.9" height="15.0" fill="rgb(218,59,2)" rx="2" ry="2" />
<text  x="963.83" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%)</title><rect x="184.3" y="469" width="0.5" height="15.0" fill="rgb(252,159,23)" rx="2" ry="2" />
<text  x="187.33" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="535.0" y="517" width="0.3" height="15.0" fill="rgb(236,25,29)" rx="2" ry="2" />
<text  x="538.03" y="527.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::delay&lt;service::abstract_write_response_handler::signal (1 samples, 0.02%)</title><rect x="713.0" y="645" width="0.2" height="15.0" fill="rgb(253,168,53)" rx="2" ry="2" />
<text  x="715.99" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::attributes::raw&gt;, void&gt; (1 samples, 0.02%)</title><rect x="61.9" y="549" width="0.2" height="15.0" fill="rgb(236,34,13)" rx="2" ry="2" />
<text  x="64.89" y="559.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="16.6" y="741" width="0.2" height="15.0" fill="rgb(237,138,44)" rx="2" ry="2" />
<text  x="19.60" y="751.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (3 samples, 0.06%)</title><rect x="864.8" y="709" width="0.7" height="15.0" fill="rgb(237,184,16)" rx="2" ry="2" />
<text  x="867.79" y="719.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (8 samples, 0.15%)</title><rect x="578.5" y="581" width="1.8" height="15.0" fill="rgb(211,20,8)" rx="2" ry="2" />
<text  x="581.49" y="591.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (13 samples, 0.25%)</title><rect x="11.1" y="821" width="3.0" height="15.0" fill="rgb(238,35,22)" rx="2" ry="2" />
<text  x="14.14" y="831.5" ></text>
</g>
<g >
<title>cdc::generation_service::make_new_generation (1 samples, 0.02%)</title><rect x="17.3" y="661" width="0.2" height="15.0" fill="rgb(207,147,32)" rx="2" ry="2" />
<text  x="20.28" y="671.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (19 samples, 0.37%)</title><rect x="926.5" y="581" width="4.3" height="15.0" fill="rgb(208,168,17)" rx="2" ry="2" />
<text  x="929.46" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (2 samples, 0.04%)</title><rect x="666.3" y="693" width="0.5" height="15.0" fill="rgb(208,80,50)" rx="2" ry="2" />
<text  x="669.34" y="703.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%)</title><rect x="439.0" y="549" width="1.6" height="15.0" fill="rgb(244,97,51)" rx="2" ry="2" />
<text  x="441.99" y="559.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (41 samples, 0.79%)</title><rect x="742.6" y="597" width="9.3" height="15.0" fill="rgb(240,4,53)" rx="2" ry="2" />
<text  x="745.58" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="906.7" y="485" width="0.4" height="15.0" fill="rgb(212,167,7)" rx="2" ry="2" />
<text  x="909.66" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (22 samples, 0.42%)</title><rect x="1105.3" y="629" width="5.0" height="15.0" fill="rgb(232,49,53)" rx="2" ry="2" />
<text  x="1108.34" y="639.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (35 samples, 0.68%)</title><rect x="116.5" y="629" width="8.0" height="15.0" fill="rgb(210,209,23)" rx="2" ry="2" />
<text  x="119.51" y="639.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous&gt; (2 samples, 0.04%)</title><rect x="812.0" y="501" width="0.4" height="15.0" fill="rgb(228,161,54)" rx="2" ry="2" />
<text  x="814.99" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="666.6" y="677" width="0.2" height="15.0" fill="rgb(253,92,9)" rx="2" ry="2" />
<text  x="669.57" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (15 samples, 0.29%)</title><rect x="679.1" y="693" width="3.4" height="15.0" fill="rgb(206,199,36)" rx="2" ry="2" />
<text  x="682.08" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1129.7" y="405" width="0.2" height="15.0" fill="rgb(210,131,25)" rx="2" ry="2" />
<text  x="1132.69" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="499.5" y="389" width="0.3" height="15.0" fill="rgb(229,108,1)" rx="2" ry="2" />
<text  x="502.52" y="399.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (6 samples, 0.12%)</title><rect x="66.7" y="597" width="1.3" height="15.0" fill="rgb(220,151,52)" rx="2" ry="2" />
<text  x="69.67" y="607.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (40 samples, 0.77%)</title><rect x="682.5" y="709" width="9.1" height="15.0" fill="rgb(235,62,1)" rx="2" ry="2" />
<text  x="685.50" y="719.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (3 samples, 0.06%)</title><rect x="336.1" y="373" width="0.7" height="15.0" fill="rgb(217,84,38)" rx="2" ry="2" />
<text  x="339.12" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="55.5" y="437" width="0.2" height="15.0" fill="rgb(214,17,31)" rx="2" ry="2" />
<text  x="58.52" y="447.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="847.7" y="565" width="0.5" height="15.0" fill="rgb(240,49,7)" rx="2" ry="2" />
<text  x="850.72" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (4 samples, 0.08%)</title><rect x="81.7" y="581" width="0.9" height="15.0" fill="rgb(251,13,3)" rx="2" ry="2" />
<text  x="84.69" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="81.5" y="613" width="0.2" height="15.0" fill="rgb(216,45,26)" rx="2" ry="2" />
<text  x="84.46" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="918.7" y="565" width="0.3" height="15.0" fill="rgb(220,107,22)" rx="2" ry="2" />
<text  x="921.73" y="575.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="59.2" y="485" width="0.2" height="15.0" fill="rgb(225,43,33)" rx="2" ry="2" />
<text  x="62.16" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (3 samples, 0.06%)</title><rect x="912.1" y="517" width="0.7" height="15.0" fill="rgb(206,152,51)" rx="2" ry="2" />
<text  x="915.13" y="527.5" ></text>
</g>
<g >
<title>ser::deserialize_array_helper&lt;false, ser::column_view&gt;::doit&lt;seastar::simple_memory_input_stream, std::vector&lt;ser::column_view, std::allocator&lt;ser::column_view&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1122.2" y="405" width="0.2" height="15.0" fill="rgb(209,208,31)" rx="2" ry="2" />
<text  x="1125.18" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="907.3" y="469" width="0.3" height="15.0" fill="rgb(244,184,41)" rx="2" ry="2" />
<text  x="910.35" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="60.5" y="485" width="0.3" height="15.0" fill="rgb(251,220,25)" rx="2" ry="2" />
<text  x="63.52" y="495.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (7 samples, 0.14%)</title><rect x="18.0" y="709" width="1.6" height="15.0" fill="rgb(224,175,23)" rx="2" ry="2" />
<text  x="20.97" y="719.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="50.5" y="453" width="0.2" height="15.0" fill="rgb(219,210,8)" rx="2" ry="2" />
<text  x="53.51" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;ser::column_view, std::allocator&lt;ser::column_view&gt; &gt;::emplace_back&lt;ser::column_view&gt; (1 samples, 0.02%)</title><rect x="1122.2" y="389" width="0.2" height="15.0" fill="rgb(237,159,37)" rx="2" ry="2" />
<text  x="1125.18" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (5 samples, 0.10%)</title><rect x="81.7" y="597" width="1.1" height="15.0" fill="rgb(219,206,52)" rx="2" ry="2" />
<text  x="84.69" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="41.2" y="437" width="0.4" height="15.0" fill="rgb(213,64,4)" rx="2" ry="2" />
<text  x="44.18" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="1118.3" y="373" width="0.2" height="15.0" fill="rgb(209,48,10)" rx="2" ry="2" />
<text  x="1121.31" y="383.5" ></text>
</g>
<g >
<title>local_schema_registry (3 samples, 0.06%)</title><rect x="975.4" y="565" width="0.7" height="15.0" fill="rgb(240,207,22)" rx="2" ry="2" />
<text  x="978.39" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::future (1 samples, 0.02%)</title><rect x="981.8" y="565" width="0.2" height="15.0" fill="rgb(236,209,12)" rx="2" ry="2" />
<text  x="984.76" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (1 samples, 0.02%)</title><rect x="692.1" y="549" width="0.2" height="15.0" fill="rgb(253,48,28)" rx="2" ry="2" />
<text  x="695.06" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="79.0" y="133" width="0.2" height="15.0" fill="rgb(216,161,46)" rx="2" ry="2" />
<text  x="81.96" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="1104.4" y="613" width="0.3" height="15.0" fill="rgb(227,9,38)" rx="2" ry="2" />
<text  x="1107.43" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="38.9" y="405" width="0.2" height="15.0" fill="rgb(246,30,42)" rx="2" ry="2" />
<text  x="41.90" y="415.5" ></text>
</g>
<g >
<title>mutation_querier::consume (187 samples, 3.61%)</title><rect x="346.8" y="405" width="42.6" height="15.0" fill="rgb(217,174,29)" rx="2" ry="2" />
<text  x="349.82" y="415.5" >muta..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (4 samples, 0.08%)</title><rect x="1037.3" y="389" width="0.9" height="15.0" fill="rgb(239,174,42)" rx="2" ry="2" />
<text  x="1040.29" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="576.4" y="501" width="0.5" height="15.0" fill="rgb(228,159,12)" rx="2" ry="2" />
<text  x="579.45" y="511.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="60.1" y="453" width="0.2" height="15.0" fill="rgb(219,67,3)" rx="2" ry="2" />
<text  x="63.07" y="463.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (2 samples, 0.04%)</title><rect x="244.4" y="325" width="0.5" height="15.0" fill="rgb(232,70,52)" rx="2" ry="2" />
<text  x="247.41" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1133.6" y="709" width="0.2" height="15.0" fill="rgb(254,207,17)" rx="2" ry="2" />
<text  x="1136.56" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="106.7" y="693" width="0.2" height="15.0" fill="rgb(250,212,3)" rx="2" ry="2" />
<text  x="109.72" y="703.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="60.3" y="309" width="0.2" height="15.0" fill="rgb(250,179,11)" rx="2" ry="2" />
<text  x="63.30" y="319.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::read&lt;seastar::simple_memory_input_stream&gt; (2 samples, 0.04%)</title><rect x="1121.3" y="421" width="0.4" height="15.0" fill="rgb(229,90,23)" rx="2" ry="2" />
<text  x="1124.27" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (7 samples, 0.14%)</title><rect x="671.6" y="661" width="1.6" height="15.0" fill="rgb(239,104,46)" rx="2" ry="2" />
<text  x="674.57" y="671.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="689.3" y="677" width="0.3" height="15.0" fill="rgb(207,172,45)" rx="2" ry="2" />
<text  x="692.32" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="460.6" y="469" width="0.5" height="15.0" fill="rgb(240,226,51)" rx="2" ry="2" />
<text  x="463.61" y="479.5" ></text>
</g>
<g >
<title>init_cpu_features.constprop.0 (1 samples, 0.02%)</title><rect x="80.5" y="821" width="0.3" height="15.0" fill="rgb(240,163,8)" rx="2" ry="2" />
<text  x="83.55" y="831.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (2 samples, 0.04%)</title><rect x="79.4" y="821" width="0.5" height="15.0" fill="rgb(235,42,27)" rx="2" ry="2" />
<text  x="82.41" y="831.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (3 samples, 0.06%)</title><rect x="1020.7" y="389" width="0.7" height="15.0" fill="rgb(230,9,24)" rx="2" ry="2" />
<text  x="1023.68" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="996.6" y="453" width="0.2" height="15.0" fill="rgb(212,31,35)" rx="2" ry="2" />
<text  x="999.56" y="463.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (5 samples, 0.10%)</title><rect x="81.7" y="661" width="1.1" height="15.0" fill="rgb(235,21,29)" rx="2" ry="2" />
<text  x="84.69" y="671.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (1 samples, 0.02%)</title><rect x="1082.4" y="501" width="0.2" height="15.0" fill="rgb(230,156,53)" rx="2" ry="2" />
<text  x="1085.35" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="91.7" y="693" width="0.2" height="15.0" fill="rgb(249,96,27)" rx="2" ry="2" />
<text  x="94.70" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="82.1" y="517" width="0.5" height="15.0" fill="rgb(210,41,22)" rx="2" ry="2" />
<text  x="85.14" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="537.1" y="533" width="0.2" height="15.0" fill="rgb(231,26,6)" rx="2" ry="2" />
<text  x="540.07" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="433.1" y="485" width="0.2" height="15.0" fill="rgb(246,155,20)" rx="2" ry="2" />
<text  x="436.07" y="495.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="44.1" y="341" width="0.3" height="15.0" fill="rgb(215,146,52)" rx="2" ry="2" />
<text  x="47.14" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="646.5" y="677" width="0.3" height="15.0" fill="rgb(247,203,8)" rx="2" ry="2" />
<text  x="649.54" y="687.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="103.3" y="533" width="0.2" height="15.0" fill="rgb(212,126,30)" rx="2" ry="2" />
<text  x="106.31" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="167.9" y="501" width="0.3" height="15.0" fill="rgb(208,43,23)" rx="2" ry="2" />
<text  x="170.94" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (10 samples, 0.19%)</title><rect x="743.0" y="581" width="2.3" height="15.0" fill="rgb(215,139,38)" rx="2" ry="2" />
<text  x="746.03" y="591.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="691.8" y="581" width="0.5" height="15.0" fill="rgb(205,184,50)" rx="2" ry="2" />
<text  x="694.83" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (12 samples, 0.23%)</title><rect x="839.5" y="597" width="2.8" height="15.0" fill="rgb(208,133,11)" rx="2" ry="2" />
<text  x="842.53" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (1 samples, 0.02%)</title><rect x="1084.9" y="549" width="0.2" height="15.0" fill="rgb(227,154,1)" rx="2" ry="2" />
<text  x="1087.86" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="60.1" y="341" width="0.2" height="15.0" fill="rgb(228,49,16)" rx="2" ry="2" />
<text  x="63.07" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="55.5" y="389" width="0.2" height="15.0" fill="rgb(238,225,52)" rx="2" ry="2" />
<text  x="58.52" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_relocate (3 samples, 0.06%)</title><rect x="49.4" y="469" width="0.7" height="15.0" fill="rgb(236,218,41)" rx="2" ry="2" />
<text  x="52.37" y="479.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="853.2" y="533" width="0.2" height="15.0" fill="rgb(249,6,43)" rx="2" ry="2" />
<text  x="856.18" y="543.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%)</title><rect x="872.8" y="469" width="0.4" height="15.0" fill="rgb(205,179,19)" rx="2" ry="2" />
<text  x="875.75" y="479.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (14 samples, 0.27%)</title><rect x="608.1" y="645" width="3.2" height="15.0" fill="rgb(241,31,32)" rx="2" ry="2" />
<text  x="611.08" y="655.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (8 samples, 0.15%)</title><rect x="799.0" y="357" width="1.8" height="15.0" fill="rgb(254,120,6)" rx="2" ry="2" />
<text  x="802.02" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="568.7" y="485" width="0.2" height="15.0" fill="rgb(241,58,8)" rx="2" ry="2" />
<text  x="571.71" y="495.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (2 samples, 0.04%)</title><rect x="800.2" y="325" width="0.4" height="15.0" fill="rgb(213,100,51)" rx="2" ry="2" />
<text  x="803.16" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (7 samples, 0.14%)</title><rect x="824.1" y="533" width="1.5" height="15.0" fill="rgb(229,146,46)" rx="2" ry="2" />
<text  x="827.05" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="299.3" y="517" width="0.2" height="15.0" fill="rgb(253,100,21)" rx="2" ry="2" />
<text  x="302.25" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (4 samples, 0.08%)</title><rect x="613.5" y="645" width="1.0" height="15.0" fill="rgb(207,165,27)" rx="2" ry="2" />
<text  x="616.54" y="655.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message::prepared&gt; &gt;  (1 samples, 0.02%)</title><rect x="79.0" y="469" width="0.2" height="15.0" fill="rgb(242,118,24)" rx="2" ry="2" />
<text  x="81.96" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="840.2" y="565" width="1.4" height="15.0" fill="rgb(229,130,30)" rx="2" ry="2" />
<text  x="843.21" y="575.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (117 samples, 2.26%)</title><rect x="892.3" y="581" width="26.7" height="15.0" fill="rgb(220,146,28)" rx="2" ry="2" />
<text  x="895.33" y="591.5" >_..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="38.0" y="453" width="0.2" height="15.0" fill="rgb(232,90,31)" rx="2" ry="2" />
<text  x="40.99" y="463.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (9 samples, 0.17%)</title><rect x="1095.6" y="581" width="2.0" height="15.0" fill="rgb(209,67,7)" rx="2" ry="2" />
<text  x="1098.55" y="591.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="664.3" y="693" width="0.7" height="15.0" fill="rgb(206,192,1)" rx="2" ry="2" />
<text  x="667.29" y="703.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (10 samples, 0.19%)</title><rect x="391.0" y="421" width="2.2" height="15.0" fill="rgb(205,179,50)" rx="2" ry="2" />
<text  x="393.97" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;true, seastar::future&lt;void&gt;, seastar::sharded&lt;cdc::generation_service&gt;::stop (1 samples, 0.02%)</title><rect x="16.8" y="725" width="0.3" height="15.0" fill="rgb(206,156,6)" rx="2" ry="2" />
<text  x="19.83" y="735.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="188.0" y="437" width="0.4" height="15.0" fill="rgb(208,204,47)" rx="2" ry="2" />
<text  x="190.97" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="77.4" y="597" width="0.2" height="15.0" fill="rgb(231,97,40)" rx="2" ry="2" />
<text  x="80.36" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (8 samples, 0.15%)</title><rect x="127.7" y="661" width="1.8" height="15.0" fill="rgb(221,208,34)" rx="2" ry="2" />
<text  x="130.66" y="671.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%)</title><rect x="1137.4" y="693" width="1.8" height="15.0" fill="rgb(227,164,1)" rx="2" ry="2" />
<text  x="1140.43" y="703.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (1 samples, 0.02%)</title><rect x="1158.4" y="677" width="0.2" height="15.0" fill="rgb(249,66,28)" rx="2" ry="2" />
<text  x="1161.37" y="687.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="909.4" y="533" width="0.2" height="15.0" fill="rgb(245,125,43)" rx="2" ry="2" />
<text  x="912.39" y="543.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="97.6" y="661" width="0.2" height="15.0" fill="rgb(222,8,13)" rx="2" ry="2" />
<text  x="100.62" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="22.5" y="485" width="0.2" height="15.0" fill="rgb(244,188,36)" rx="2" ry="2" />
<text  x="25.52" y="495.5" ></text>
</g>
<g >
<title>utils::sequenced_set&lt;gms::inet_address&gt;::insert (1 samples, 0.02%)</title><rect x="104.7" y="677" width="0.2" height="15.0" fill="rgb(228,26,30)" rx="2" ry="2" />
<text  x="107.67" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="509.1" y="485" width="0.9" height="15.0" fill="rgb(241,220,13)" rx="2" ry="2" />
<text  x="512.08" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (15 samples, 0.29%)</title><rect x="594.4" y="629" width="3.4" height="15.0" fill="rgb(224,168,35)" rx="2" ry="2" />
<text  x="597.42" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="1051.4" y="533" width="0.5" height="15.0" fill="rgb(247,116,32)" rx="2" ry="2" />
<text  x="1054.40" y="543.5" ></text>
</g>
<g >
<title>db::commitlog::segment::allocate (5 samples, 0.10%)</title><rect x="1123.5" y="485" width="1.2" height="15.0" fill="rgb(243,86,28)" rx="2" ry="2" />
<text  x="1126.55" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="324.3" y="437" width="0.2" height="15.0" fill="rgb(235,133,21)" rx="2" ry="2" />
<text  x="327.29" y="447.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (8 samples, 0.15%)</title><rect x="752.6" y="613" width="1.8" height="15.0" fill="rgb(210,47,33)" rx="2" ry="2" />
<text  x="755.59" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (1 samples, 0.02%)</title><rect x="83.1" y="565" width="0.2" height="15.0" fill="rgb(249,213,38)" rx="2" ry="2" />
<text  x="86.05" y="575.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="701.6" y="677" width="0.2" height="15.0" fill="rgb(226,84,25)" rx="2" ry="2" />
<text  x="704.61" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="977.0" y="533" width="0.2" height="15.0" fill="rgb(248,178,8)" rx="2" ry="2" />
<text  x="979.99" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="79.0" y="293" width="0.2" height="15.0" fill="rgb(250,73,34)" rx="2" ry="2" />
<text  x="81.96" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (24 samples, 0.46%)</title><rect x="1125.8" y="533" width="5.5" height="15.0" fill="rgb(252,11,39)" rx="2" ry="2" />
<text  x="1128.82" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (2 samples, 0.04%)</title><rect x="970.4" y="581" width="0.4" height="15.0" fill="rgb(224,140,24)" rx="2" ry="2" />
<text  x="973.39" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (3 samples, 0.06%)</title><rect x="1163.6" y="661" width="0.7" height="15.0" fill="rgb(215,52,40)" rx="2" ry="2" />
<text  x="1166.60" y="671.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (5 samples, 0.10%)</title><rect x="1123.5" y="501" width="1.2" height="15.0" fill="rgb(253,95,43)" rx="2" ry="2" />
<text  x="1126.55" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_type (1 samples, 0.02%)</title><rect x="21.8" y="581" width="0.3" height="15.0" fill="rgb(207,97,54)" rx="2" ry="2" />
<text  x="24.83" y="591.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="976.1" y="565" width="1.1" height="15.0" fill="rgb(217,152,48)" rx="2" ry="2" />
<text  x="979.08" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="69.9" y="597" width="0.2" height="15.0" fill="rgb(246,153,49)" rx="2" ry="2" />
<text  x="72.85" y="607.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="103.3" y="549" width="0.2" height="15.0" fill="rgb(207,114,14)" rx="2" ry="2" />
<text  x="106.31" y="559.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (2 samples, 0.04%)</title><rect x="610.4" y="613" width="0.4" height="15.0" fill="rgb(218,129,5)" rx="2" ry="2" />
<text  x="613.35" y="623.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="44.6" y="501" width="0.2" height="15.0" fill="rgb(227,79,54)" rx="2" ry="2" />
<text  x="47.59" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="41.9" y="405" width="0.4" height="15.0" fill="rgb(215,204,29)" rx="2" ry="2" />
<text  x="44.86" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="641.3" y="693" width="0.7" height="15.0" fill="rgb(238,161,18)" rx="2" ry="2" />
<text  x="644.31" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (8 samples, 0.15%)</title><rect x="949.7" y="597" width="1.8" height="15.0" fill="rgb(237,132,13)" rx="2" ry="2" />
<text  x="952.68" y="607.5" ></text>
</g>
<g >
<title>reader_permit::mark_used (1 samples, 0.02%)</title><rect x="115.6" y="661" width="0.2" height="15.0" fill="rgb(249,195,52)" rx="2" ry="2" />
<text  x="118.60" y="671.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="43.9" y="517" width="0.5" height="15.0" fill="rgb(250,122,30)" rx="2" ry="2" />
<text  x="46.91" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="546.2" y="453" width="0.4" height="15.0" fill="rgb(225,97,0)" rx="2" ry="2" />
<text  x="549.18" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (3 samples, 0.06%)</title><rect x="1165.9" y="709" width="0.7" height="15.0" fill="rgb(220,160,28)" rx="2" ry="2" />
<text  x="1168.88" y="719.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*&gt; (1 samples, 0.02%)</title><rect x="49.4" y="421" width="0.2" height="15.0" fill="rgb(212,130,39)" rx="2" ry="2" />
<text  x="52.37" y="431.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (18 samples, 0.35%)</title><rect x="1017.3" y="405" width="4.1" height="15.0" fill="rgb(215,146,44)" rx="2" ry="2" />
<text  x="1020.27" y="415.5" ></text>
</g>
<g >
<title>schema::column_at (2 samples, 0.04%)</title><rect x="414.2" y="389" width="0.4" height="15.0" fill="rgb(225,11,31)" rx="2" ry="2" />
<text  x="417.18" y="399.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="594.4" y="613" width="0.7" height="15.0" fill="rgb(253,42,17)" rx="2" ry="2" />
<text  x="597.42" y="623.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%)</title><rect x="760.8" y="613" width="0.2" height="15.0" fill="rgb(219,66,30)" rx="2" ry="2" />
<text  x="763.78" y="623.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;current_deleter&lt;range_tombstone_entry&gt; (2 samples, 0.04%)</title><rect x="575.8" y="469" width="0.4" height="15.0" fill="rgb(225,6,52)" rx="2" ry="2" />
<text  x="578.76" y="479.5" ></text>
</g>
<g >
<title>table::check_valid_rp (1 samples, 0.02%)</title><rect x="1122.9" y="469" width="0.2" height="15.0" fill="rgb(224,195,29)" rx="2" ry="2" />
<text  x="1125.86" y="479.5" ></text>
</g>
<g >
<title>set_value&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (2 samples, 0.04%)</title><rect x="1119.7" y="405" width="0.4" height="15.0" fill="rgb(218,105,51)" rx="2" ry="2" />
<text  x="1122.68" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (2 samples, 0.04%)</title><rect x="807.2" y="437" width="0.5" height="15.0" fill="rgb(212,145,39)" rx="2" ry="2" />
<text  x="810.21" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%)</title><rect x="1163.8" y="581" width="0.3" height="15.0" fill="rgb(221,51,24)" rx="2" ry="2" />
<text  x="1166.83" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="23.0" y="485" width="0.2" height="15.0" fill="rgb(228,31,38)" rx="2" ry="2" />
<text  x="25.97" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (1 samples, 0.02%)</title><rect x="592.1" y="629" width="0.3" height="15.0" fill="rgb(230,80,17)" rx="2" ry="2" />
<text  x="595.15" y="639.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="941.7" y="549" width="0.2" height="15.0" fill="rgb(210,183,27)" rx="2" ry="2" />
<text  x="944.71" y="559.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (2 samples, 0.04%)</title><rect x="453.3" y="549" width="0.5" height="15.0" fill="rgb(253,203,12)" rx="2" ry="2" />
<text  x="456.32" y="559.5" ></text>
</g>
<g >
<title>__libc_start_main (4,755 samples, 91.71%)</title><rect x="84.6" y="837" width="1082.2" height="15.0" fill="rgb(226,39,44)" rx="2" ry="2" />
<text  x="87.65" y="847.5" >__libc_start_main</text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="497.9" y="421" width="0.3" height="15.0" fill="rgb(241,32,2)" rx="2" ry="2" />
<text  x="500.93" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (10 samples, 0.19%)</title><rect x="422.6" y="405" width="2.3" height="15.0" fill="rgb(226,0,0)" rx="2" ry="2" />
<text  x="425.60" y="415.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%)</title><rect x="657.9" y="629" width="0.2" height="15.0" fill="rgb(229,15,47)" rx="2" ry="2" />
<text  x="660.92" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.25%)</title><rect x="895.7" y="501" width="3.0" height="15.0" fill="rgb(247,229,15)" rx="2" ry="2" />
<text  x="898.74" y="511.5" ></text>
</g>
<g >
<title>__start_context (12 samples, 0.23%)</title><rect x="81.0" y="805" width="2.7" height="15.0" fill="rgb(221,122,23)" rx="2" ry="2" />
<text  x="84.00" y="815.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="47.6" y="421" width="0.6" height="15.0" fill="rgb(242,141,21)" rx="2" ry="2" />
<text  x="50.55" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="948.8" y="565" width="0.2" height="15.0" fill="rgb(246,36,6)" rx="2" ry="2" />
<text  x="951.77" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="281.3" y="373" width="0.9" height="15.0" fill="rgb(243,166,54)" rx="2" ry="2" />
<text  x="284.27" y="383.5" ></text>
</g>
<g >
<title>frozen_mutation::unfreeze (1 samples, 0.02%)</title><rect x="103.3" y="629" width="0.2" height="15.0" fill="rgb(220,181,33)" rx="2" ry="2" />
<text  x="106.31" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (8 samples, 0.15%)</title><rect x="650.9" y="693" width="1.8" height="15.0" fill="rgb(212,7,29)" rx="2" ry="2" />
<text  x="653.86" y="703.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (25 samples, 0.48%)</title><rect x="1125.8" y="613" width="5.7" height="15.0" fill="rgb(251,197,30)" rx="2" ry="2" />
<text  x="1128.82" y="623.5" ></text>
</g>
<g >
<title>seastar::mmap_anonymous (1 samples, 0.02%)</title><rect x="1166.6" y="677" width="0.2" height="15.0" fill="rgb(250,177,37)" rx="2" ry="2" />
<text  x="1169.56" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="700.7" y="693" width="0.5" height="15.0" fill="rgb(245,200,6)" rx="2" ry="2" />
<text  x="703.70" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (1 samples, 0.02%)</title><rect x="548.0" y="549" width="0.2" height="15.0" fill="rgb(221,172,34)" rx="2" ry="2" />
<text  x="551.00" y="559.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="582.1" y="565" width="0.9" height="15.0" fill="rgb(252,82,29)" rx="2" ry="2" />
<text  x="585.14" y="575.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="309.0" y="485" width="2.1" height="15.0" fill="rgb(214,176,12)" rx="2" ry="2" />
<text  x="312.04" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (13 samples, 0.25%)</title><rect x="434.0" y="501" width="2.9" height="15.0" fill="rgb(235,24,47)" rx="2" ry="2" />
<text  x="436.98" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (1 samples, 0.02%)</title><rect x="1103.1" y="613" width="0.2" height="15.0" fill="rgb(229,192,32)" rx="2" ry="2" />
<text  x="1106.06" y="623.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (462 samples, 8.91%)</title><rect x="444.2" y="613" width="105.2" height="15.0" fill="rgb(231,197,36)" rx="2" ry="2" />
<text  x="447.22" y="623.5" >mutation_sou..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1166.8" y="837" width="0.2" height="15.0" fill="rgb(234,157,42)" rx="2" ry="2" />
<text  x="1169.79" y="847.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="278.5" y="421" width="0.5" height="15.0" fill="rgb(235,40,39)" rx="2" ry="2" />
<text  x="281.54" y="431.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (4 samples, 0.08%)</title><rect x="145.6" y="613" width="0.9" height="15.0" fill="rgb(248,8,26)" rx="2" ry="2" />
<text  x="148.64" y="623.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="21.8" y="597" width="0.3" height="15.0" fill="rgb(243,79,7)" rx="2" ry="2" />
<text  x="24.83" y="607.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (5 samples, 0.10%)</title><rect x="806.5" y="469" width="1.2" height="15.0" fill="rgb(229,171,36)" rx="2" ry="2" />
<text  x="809.53" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="16.6" y="549" width="0.2" height="15.0" fill="rgb(249,206,35)" rx="2" ry="2" />
<text  x="19.60" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (10 samples, 0.19%)</title><rect x="233.7" y="325" width="2.3" height="15.0" fill="rgb(239,97,13)" rx="2" ry="2" />
<text  x="236.71" y="335.5" ></text>
</g>
<g >
<title>seastar::futurize_apply&lt;single_node_cql_env::prepare (1 samples, 0.02%)</title><rect x="79.0" y="549" width="0.2" height="15.0" fill="rgb(250,116,25)" rx="2" ry="2" />
<text  x="81.96" y="559.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (1 samples, 0.02%)</title><rect x="102.6" y="629" width="0.3" height="15.0" fill="rgb(243,122,19)" rx="2" ry="2" />
<text  x="105.62" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (3 samples, 0.06%)</title><rect x="251.5" y="357" width="0.6" height="15.0" fill="rgb(213,157,27)" rx="2" ry="2" />
<text  x="254.46" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::advance (1 samples, 0.02%)</title><rect x="15.7" y="757" width="0.2" height="15.0" fill="rgb(209,115,12)" rx="2" ry="2" />
<text  x="18.69" y="767.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (112 samples, 2.16%)</title><rect x="37.8" y="581" width="25.5" height="15.0" fill="rgb(248,185,35)" rx="2" ry="2" />
<text  x="40.76" y="591.5" >c..</text>
</g>
<g >
<title>compound_type&lt; (6 samples, 0.12%)</title><rect x="553.9" y="565" width="1.4" height="15.0" fill="rgb(205,188,26)" rx="2" ry="2" />
<text  x="556.92" y="575.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (1 samples, 0.02%)</title><rect x="564.4" y="533" width="0.2" height="15.0" fill="rgb(248,63,16)" rx="2" ry="2" />
<text  x="567.38" y="543.5" ></text>
</g>
<g >
<title>database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%)</title><rect x="692.7" y="693" width="0.3" height="15.0" fill="rgb(240,210,5)" rx="2" ry="2" />
<text  x="695.74" y="703.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="15.9" y="725" width="0.2" height="15.0" fill="rgb(237,198,25)" rx="2" ry="2" />
<text  x="18.92" y="735.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.14%)</title><rect x="929.2" y="549" width="1.6" height="15.0" fill="rgb(211,33,0)" rx="2" ry="2" />
<text  x="932.19" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%)</title><rect x="81.2" y="581" width="0.3" height="15.0" fill="rgb(219,31,38)" rx="2" ry="2" />
<text  x="84.23" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="589.9" y="597" width="0.2" height="15.0" fill="rgb(236,52,11)" rx="2" ry="2" />
<text  x="592.87" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (24 samples, 0.46%)</title><rect x="285.6" y="517" width="5.5" height="15.0" fill="rgb(242,129,40)" rx="2" ry="2" />
<text  x="288.60" y="527.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (2 samples, 0.04%)</title><rect x="390.5" y="405" width="0.5" height="15.0" fill="rgb(219,199,4)" rx="2" ry="2" />
<text  x="393.51" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%)</title><rect x="453.1" y="549" width="0.2" height="15.0" fill="rgb(242,3,42)" rx="2" ry="2" />
<text  x="456.10" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (3 samples, 0.06%)</title><rect x="707.5" y="613" width="0.7" height="15.0" fill="rgb(239,125,7)" rx="2" ry="2" />
<text  x="710.53" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="60.1" y="373" width="0.2" height="15.0" fill="rgb(225,60,24)" rx="2" ry="2" />
<text  x="63.07" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%)</title><rect x="1020.7" y="357" width="0.2" height="15.0" fill="rgb(238,121,13)" rx="2" ry="2" />
<text  x="1023.68" y="367.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="108.5" y="677" width="0.3" height="15.0" fill="rgb(207,44,17)" rx="2" ry="2" />
<text  x="111.54" y="687.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="1091.5" y="597" width="0.4" height="15.0" fill="rgb(243,213,24)" rx="2" ry="2" />
<text  x="1094.46" y="607.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::StackType (1 samples, 0.02%)</title><rect x="20.0" y="533" width="0.2" height="15.0" fill="rgb(226,108,49)" rx="2" ry="2" />
<text  x="23.01" y="543.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="40.3" y="325" width="0.2" height="15.0" fill="rgb(233,173,1)" rx="2" ry="2" />
<text  x="43.27" y="335.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="311.1" y="485" width="0.2" height="15.0" fill="rgb(254,127,27)" rx="2" ry="2" />
<text  x="314.09" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;cdc::generation_service&gt;::stop (1 samples, 0.02%)</title><rect x="16.8" y="629" width="0.3" height="15.0" fill="rgb(218,121,22)" rx="2" ry="2" />
<text  x="19.83" y="639.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.12%)</title><rect x="498.4" y="405" width="1.4" height="15.0" fill="rgb(223,25,16)" rx="2" ry="2" />
<text  x="501.39" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.48%)</title><rect x="1125.8" y="661" width="5.7" height="15.0" fill="rgb(220,208,49)" rx="2" ry="2" />
<text  x="1128.82" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="35.3" y="389" width="0.2" height="15.0" fill="rgb(252,185,22)" rx="2" ry="2" />
<text  x="38.26" y="399.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (3 samples, 0.06%)</title><rect x="276.0" y="389" width="0.7" height="15.0" fill="rgb(246,171,48)" rx="2" ry="2" />
<text  x="279.04" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (1 samples, 0.02%)</title><rect x="655.9" y="677" width="0.2" height="15.0" fill="rgb(222,65,14)" rx="2" ry="2" />
<text  x="658.87" y="687.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (2 samples, 0.04%)</title><rect x="628.3" y="629" width="0.5" height="15.0" fill="rgb(244,36,25)" rx="2" ry="2" />
<text  x="631.33" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (53 samples, 1.02%)</title><rect x="270.8" y="469" width="12.1" height="15.0" fill="rgb(235,48,3)" rx="2" ry="2" />
<text  x="273.81" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="50.3" y="453" width="0.2" height="15.0" fill="rgb(210,44,36)" rx="2" ry="2" />
<text  x="53.28" y="463.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (2 samples, 0.04%)</title><rect x="1039.1" y="485" width="0.5" height="15.0" fill="rgb(243,196,26)" rx="2" ry="2" />
<text  x="1042.11" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::on_new_range (1 samples, 0.02%)</title><rect x="81.7" y="565" width="0.2" height="15.0" fill="rgb(207,37,29)" rx="2" ry="2" />
<text  x="84.69" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::end (1 samples, 0.02%)</title><rect x="36.9" y="501" width="0.2" height="15.0" fill="rgb(231,101,32)" rx="2" ry="2" />
<text  x="39.85" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (5 samples, 0.10%)</title><rect x="464.2" y="469" width="1.2" height="15.0" fill="rgb(233,84,20)" rx="2" ry="2" />
<text  x="467.25" y="479.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,755 samples, 91.71%)</title><rect x="84.6" y="805" width="1082.2" height="15.0" fill="rgb(220,224,34)" rx="2" ry="2" />
<text  x="87.65" y="815.5" >seastar::app_template::run</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="426.2" y="421" width="0.3" height="15.0" fill="rgb(230,198,4)" rx="2" ry="2" />
<text  x="429.24" y="431.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%)</title><rect x="274.2" y="373" width="0.7" height="15.0" fill="rgb(224,49,34)" rx="2" ry="2" />
<text  x="277.22" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.12%)</title><rect x="23.2" y="469" width="1.4" height="15.0" fill="rgb(209,49,41)" rx="2" ry="2" />
<text  x="26.20" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (4 samples, 0.08%)</title><rect x="47.3" y="517" width="0.9" height="15.0" fill="rgb(217,53,28)" rx="2" ry="2" />
<text  x="50.32" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="69.6" y="581" width="0.3" height="15.0" fill="rgb(220,224,0)" rx="2" ry="2" />
<text  x="72.63" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (192 samples, 3.70%)</title><rect x="1041.6" y="565" width="43.7" height="15.0" fill="rgb(240,128,37)" rx="2" ry="2" />
<text  x="1044.62" y="575.5" >serv..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (11 samples, 0.21%)</title><rect x="1044.6" y="533" width="2.5" height="15.0" fill="rgb(252,170,36)" rx="2" ry="2" />
<text  x="1047.58" y="543.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::make_temporary (2 samples, 0.04%)</title><rect x="874.3" y="501" width="0.5" height="15.0" fill="rgb(215,24,47)" rx="2" ry="2" />
<text  x="877.35" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (4 samples, 0.08%)</title><rect x="262.6" y="373" width="0.9" height="15.0" fill="rgb(232,61,20)" rx="2" ry="2" />
<text  x="265.61" y="383.5" ></text>
</g>
<g >
<title>seastar::gate::leave (2 samples, 0.04%)</title><rect x="100.6" y="693" width="0.4" height="15.0" fill="rgb(228,40,0)" rx="2" ry="2" />
<text  x="103.58" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="595.8" y="581" width="0.4" height="15.0" fill="rgb(240,114,46)" rx="2" ry="2" />
<text  x="598.79" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::then_impl&lt;service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%)</title><rect x="971.5" y="549" width="0.3" height="15.0" fill="rgb(247,110,40)" rx="2" ry="2" />
<text  x="974.52" y="559.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (4 samples, 0.08%)</title><rect x="832.9" y="629" width="0.9" height="15.0" fill="rgb(234,90,52)" rx="2" ry="2" />
<text  x="835.93" y="639.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%)</title><rect x="103.8" y="501" width="0.2" height="15.0" fill="rgb(235,21,10)" rx="2" ry="2" />
<text  x="106.76" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="864.3" y="709" width="0.3" height="15.0" fill="rgb(229,172,42)" rx="2" ry="2" />
<text  x="867.33" y="719.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (20 samples, 0.39%)</title><rect x="555.7" y="581" width="4.6" height="15.0" fill="rgb(231,46,54)" rx="2" ry="2" />
<text  x="558.74" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="463.1" y="437" width="1.1" height="15.0" fill="rgb(240,133,4)" rx="2" ry="2" />
<text  x="466.11" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="50.5" y="437" width="0.2" height="15.0" fill="rgb(210,138,33)" rx="2" ry="2" />
<text  x="53.51" y="447.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="79.0" y="581" width="0.2" height="15.0" fill="rgb(254,111,49)" rx="2" ry="2" />
<text  x="81.96" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="54.6" y="293" width="0.2" height="15.0" fill="rgb(254,130,42)" rx="2" ry="2" />
<text  x="57.61" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (8 samples, 0.15%)</title><rect x="752.6" y="597" width="1.8" height="15.0" fill="rgb(243,124,28)" rx="2" ry="2" />
<text  x="755.59" y="607.5" ></text>
</g>
<g >
<title>sstables::write (1 samples, 0.02%)</title><rect x="15.0" y="661" width="0.2" height="15.0" fill="rgb(230,222,37)" rx="2" ry="2" />
<text  x="18.01" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (5 samples, 0.10%)</title><rect x="41.9" y="421" width="1.1" height="15.0" fill="rgb(221,35,32)" rx="2" ry="2" />
<text  x="44.86" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%)</title><rect x="868.7" y="501" width="0.2" height="15.0" fill="rgb(207,181,4)" rx="2" ry="2" />
<text  x="871.66" y="511.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (1 samples, 0.02%)</title><rect x="414.6" y="421" width="0.3" height="15.0" fill="rgb(207,52,29)" rx="2" ry="2" />
<text  x="417.64" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (19 samples, 0.37%)</title><rect x="621.7" y="613" width="4.4" height="15.0" fill="rgb(214,229,8)" rx="2" ry="2" />
<text  x="624.73" y="623.5" ></text>
</g>
<g >
<title>__start_context (282 samples, 5.44%)</title><rect x="15.0" y="821" width="64.2" height="15.0" fill="rgb(221,33,51)" rx="2" ry="2" />
<text  x="18.01" y="831.5" >__start..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%)</title><rect x="77.6" y="613" width="0.2" height="15.0" fill="rgb(239,159,16)" rx="2" ry="2" />
<text  x="80.59" y="623.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (10 samples, 0.19%)</title><rect x="851.4" y="629" width="2.2" height="15.0" fill="rgb(221,198,20)" rx="2" ry="2" />
<text  x="854.36" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="1109.7" y="597" width="0.4" height="15.0" fill="rgb(226,25,9)" rx="2" ry="2" />
<text  x="1112.66" y="607.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%)</title><rect x="567.3" y="517" width="0.3" height="15.0" fill="rgb(205,223,14)" rx="2" ry="2" />
<text  x="570.34" y="527.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (47 samples, 0.91%)</title><rect x="1015.9" y="453" width="10.7" height="15.0" fill="rgb(209,111,13)" rx="2" ry="2" />
<text  x="1018.90" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="357" width="0.3" height="15.0" fill="rgb(213,197,40)" rx="2" ry="2" />
<text  x="62.84" y="367.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (3 samples, 0.06%)</title><rect x="521.6" y="389" width="0.7" height="15.0" fill="rgb(254,19,38)" rx="2" ry="2" />
<text  x="524.60" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="652.9" y="517" width="0.2" height="15.0" fill="rgb(219,137,30)" rx="2" ry="2" />
<text  x="655.91" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.10%)</title><rect x="685.9" y="661" width="1.1" height="15.0" fill="rgb(252,1,26)" rx="2" ry="2" />
<text  x="688.91" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="946.5" y="597" width="0.2" height="15.0" fill="rgb(225,73,51)" rx="2" ry="2" />
<text  x="949.49" y="607.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%)</title><rect x="103.1" y="517" width="0.2" height="15.0" fill="rgb(229,139,17)" rx="2" ry="2" />
<text  x="106.08" y="527.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1124.9" y="501" width="0.2" height="15.0" fill="rgb(233,212,47)" rx="2" ry="2" />
<text  x="1127.91" y="511.5" ></text>
</g>
<g >
<title>db::block_for (1 samples, 0.02%)</title><rect x="1052.1" y="533" width="0.2" height="15.0" fill="rgb(214,157,12)" rx="2" ry="2" />
<text  x="1055.09" y="543.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="1167.0" y="837" width="0.2" height="15.0" fill="rgb(206,152,31)" rx="2" ry="2" />
<text  x="1170.01" y="847.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, bool const&amp;&gt; (1 samples, 0.02%)</title><rect x="69.4" y="565" width="0.2" height="15.0" fill="rgb(210,88,47)" rx="2" ry="2" />
<text  x="72.40" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%)</title><rect x="24.3" y="389" width="0.3" height="15.0" fill="rgb(217,171,25)" rx="2" ry="2" />
<text  x="27.34" y="399.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (8 samples, 0.15%)</title><rect x="181.6" y="453" width="1.8" height="15.0" fill="rgb(214,21,42)" rx="2" ry="2" />
<text  x="184.59" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, false&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="78.5" y="677" width="0.2" height="15.0" fill="rgb(210,3,52)" rx="2" ry="2" />
<text  x="81.50" y="687.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="795.6" y="421" width="0.2" height="15.0" fill="rgb(243,200,43)" rx="2" ry="2" />
<text  x="798.60" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%)</title><rect x="828.1" y="485" width="0.7" height="15.0" fill="rgb(227,48,48)" rx="2" ry="2" />
<text  x="831.15" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="949.0" y="597" width="0.2" height="15.0" fill="rgb(243,130,47)" rx="2" ry="2" />
<text  x="951.99" y="607.5" ></text>
</g>
<g >
<title>database::shard_of (3 samples, 0.06%)</title><rect x="1126.3" y="389" width="0.7" height="15.0" fill="rgb(235,166,44)" rx="2" ry="2" />
<text  x="1129.28" y="399.5" ></text>
</g>
<g >
<title>virtual thunk to std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_ostringstream (1 samples, 0.02%)</title><rect x="84.2" y="821" width="0.2" height="15.0" fill="rgb(241,118,4)" rx="2" ry="2" />
<text  x="87.19" y="831.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (2 samples, 0.04%)</title><rect x="324.1" y="469" width="0.4" height="15.0" fill="rgb(220,125,49)" rx="2" ry="2" />
<text  x="327.06" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::pop_clustering_row (2 samples, 0.04%)</title><rect x="82.1" y="501" width="0.5" height="15.0" fill="rgb(236,9,17)" rx="2" ry="2" />
<text  x="85.14" y="511.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple (1 samples, 0.02%)</title><rect x="49.1" y="373" width="0.3" height="15.0" fill="rgb(239,174,25)" rx="2" ry="2" />
<text  x="52.14" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1122.6" y="421" width="0.3" height="15.0" fill="rgb(226,9,23)" rx="2" ry="2" />
<text  x="1125.64" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="59.8" y="421" width="0.3" height="15.0" fill="rgb(244,22,24)" rx="2" ry="2" />
<text  x="62.84" y="431.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%)</title><rect x="1027.7" y="437" width="0.3" height="15.0" fill="rgb(226,163,3)" rx="2" ry="2" />
<text  x="1030.74" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (1 samples, 0.02%)</title><rect x="574.2" y="485" width="0.2" height="15.0" fill="rgb(251,130,47)" rx="2" ry="2" />
<text  x="577.17" y="495.5" ></text>
</g>
<g >
<title>table::query (2,206 samples, 42.55%)</title><rect x="129.9" y="661" width="502.1" height="15.0" fill="rgb(244,29,0)" rx="2" ry="2" />
<text  x="132.93" y="671.5" >table::query</text>
</g>
<g >
<title>service::client_state::ensure_has_permission (8 samples, 0.15%)</title><rect x="75.5" y="629" width="1.9" height="15.0" fill="rgb(245,138,26)" rx="2" ry="2" />
<text  x="78.54" y="639.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (1 samples, 0.02%)</title><rect x="102.9" y="629" width="0.2" height="15.0" fill="rgb(209,191,1)" rx="2" ry="2" />
<text  x="105.85" y="639.5" ></text>
</g>
<g >
<title>free (7 samples, 0.14%)</title><rect x="423.1" y="389" width="1.5" height="15.0" fill="rgb(209,106,39)" rx="2" ry="2" />
<text  x="426.06" y="399.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%)</title><rect x="719.4" y="677" width="0.2" height="15.0" fill="rgb(248,191,43)" rx="2" ry="2" />
<text  x="722.37" y="687.5" ></text>
</g>
<g >
<title>cql3::expr::untyped_constant::untyped_constant (1 samples, 0.02%)</title><rect x="54.4" y="485" width="0.2" height="15.0" fill="rgb(252,7,30)" rx="2" ry="2" />
<text  x="57.38" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (2 samples, 0.04%)</title><rect x="747.8" y="517" width="0.5" height="15.0" fill="rgb(241,52,37)" rx="2" ry="2" />
<text  x="750.81" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1116.3" y="629" width="0.2" height="15.0" fill="rgb(205,93,35)" rx="2" ry="2" />
<text  x="1119.26" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_allocate_node (2 samples, 0.04%)</title><rect x="24.6" y="453" width="0.4" height="15.0" fill="rgb(231,95,9)" rx="2" ry="2" />
<text  x="27.57" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (4 samples, 0.08%)</title><rect x="23.7" y="405" width="0.9" height="15.0" fill="rgb(235,193,31)" rx="2" ry="2" />
<text  x="26.65" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (1 samples, 0.02%)</title><rect x="84.2" y="789" width="0.2" height="15.0" fill="rgb(248,122,20)" rx="2" ry="2" />
<text  x="87.19" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (13 samples, 0.25%)</title><rect x="817.7" y="565" width="2.9" height="15.0" fill="rgb(229,100,44)" rx="2" ry="2" />
<text  x="820.68" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="10.2" y="613" width="0.3" height="15.0" fill="rgb(208,101,40)" rx="2" ry="2" />
<text  x="13.23" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (4 samples, 0.08%)</title><rect x="714.6" y="709" width="0.9" height="15.0" fill="rgb(242,192,9)" rx="2" ry="2" />
<text  x="717.59" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="62.1" y="517" width="0.2" height="15.0" fill="rgb(217,82,20)" rx="2" ry="2" />
<text  x="65.12" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="241.0" y="325" width="0.2" height="15.0" fill="rgb(209,32,52)" rx="2" ry="2" />
<text  x="243.99" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="555.1" y="549" width="0.2" height="15.0" fill="rgb(209,158,1)" rx="2" ry="2" />
<text  x="558.05" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (1 samples, 0.02%)</title><rect x="878.4" y="661" width="0.3" height="15.0" fill="rgb(235,153,37)" rx="2" ry="2" />
<text  x="881.44" y="671.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%)</title><rect x="1004.8" y="485" width="2.5" height="15.0" fill="rgb(211,34,13)" rx="2" ry="2" />
<text  x="1007.75" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%)</title><rect x="971.5" y="533" width="0.3" height="15.0" fill="rgb(207,31,47)" rx="2" ry="2" />
<text  x="974.52" y="543.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (1 samples, 0.02%)</title><rect x="862.3" y="645" width="0.2" height="15.0" fill="rgb(249,213,35)" rx="2" ry="2" />
<text  x="865.29" y="655.5" ></text>
</g>
<g >
<title>__strlen_avx2 (9 samples, 0.17%)</title><rect x="1010.0" y="453" width="2.0" height="15.0" fill="rgb(246,151,11)" rx="2" ry="2" />
<text  x="1012.98" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::alter_service_level_statement*, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="64.2" y="533" width="0.2" height="15.0" fill="rgb(216,125,37)" rx="2" ry="2" />
<text  x="67.16" y="543.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="543.4" y="517" width="0.3" height="15.0" fill="rgb(242,138,17)" rx="2" ry="2" />
<text  x="546.45" y="527.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (3 samples, 0.06%)</title><rect x="268.3" y="437" width="0.7" height="15.0" fill="rgb(229,113,5)" rx="2" ry="2" />
<text  x="271.30" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (5 samples, 0.10%)</title><rect x="830.7" y="533" width="1.1" height="15.0" fill="rgb(242,188,32)" rx="2" ry="2" />
<text  x="833.65" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="915.8" y="565" width="0.2" height="15.0" fill="rgb(238,33,50)" rx="2" ry="2" />
<text  x="918.77" y="575.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (37 samples, 0.71%)</title><rect x="1066.7" y="453" width="8.4" height="15.0" fill="rgb(252,99,15)" rx="2" ry="2" />
<text  x="1069.65" y="463.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.08%)</title><rect x="885.0" y="629" width="1.0" height="15.0" fill="rgb(247,212,5)" rx="2" ry="2" />
<text  x="888.04" y="639.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%)</title><rect x="1019.3" y="341" width="0.5" height="15.0" fill="rgb(233,162,25)" rx="2" ry="2" />
<text  x="1022.32" y="351.5" ></text>
</g>
<g >
<title>__strchrnul_avx2 (1 samples, 0.02%)</title><rect x="79.2" y="821" width="0.2" height="15.0" fill="rgb(243,77,43)" rx="2" ry="2" />
<text  x="82.18" y="831.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="870.0" y="533" width="0.3" height="15.0" fill="rgb(236,108,52)" rx="2" ry="2" />
<text  x="873.02" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (4 samples, 0.08%)</title><rect x="591.2" y="629" width="0.9" height="15.0" fill="rgb(222,29,28)" rx="2" ry="2" />
<text  x="594.24" y="639.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (3 samples, 0.06%)</title><rect x="228.7" y="261" width="0.7" height="15.0" fill="rgb(209,106,0)" rx="2" ry="2" />
<text  x="231.70" y="271.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (4 samples, 0.08%)</title><rect x="796.7" y="421" width="1.0" height="15.0" fill="rgb(234,110,2)" rx="2" ry="2" />
<text  x="799.74" y="431.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;unsigned int*, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="1119.2" y="405" width="0.3" height="15.0" fill="rgb(220,8,2)" rx="2" ry="2" />
<text  x="1122.22" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (12 samples, 0.23%)</title><rect x="1023.9" y="437" width="2.7" height="15.0" fill="rgb(249,69,51)" rx="2" ry="2" />
<text  x="1026.87" y="447.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, seastar::smp::invoke_on_all&lt;single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="17.1" y="693" width="0.2" height="15.0" fill="rgb(229,154,32)" rx="2" ry="2" />
<text  x="20.05" y="703.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (1 samples, 0.02%)</title><rect x="393.5" y="405" width="0.2" height="15.0" fill="rgb(249,42,44)" rx="2" ry="2" />
<text  x="396.47" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="192.1" y="421" width="0.2" height="15.0" fill="rgb(212,176,28)" rx="2" ry="2" />
<text  x="195.06" y="431.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (2 samples, 0.04%)</title><rect x="1129.9" y="357" width="0.5" height="15.0" fill="rgb(220,96,48)" rx="2" ry="2" />
<text  x="1132.92" y="367.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (2 samples, 0.04%)</title><rect x="1004.3" y="469" width="0.5" height="15.0" fill="rgb(209,114,54)" rx="2" ry="2" />
<text  x="1007.30" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="44.6" y="437" width="0.2" height="15.0" fill="rgb(244,128,3)" rx="2" ry="2" />
<text  x="47.59" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="530.7" y="517" width="0.2" height="15.0" fill="rgb(242,104,0)" rx="2" ry="2" />
<text  x="533.70" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (48 samples, 0.93%)</title><rect x="46.9" y="533" width="10.9" height="15.0" fill="rgb(254,141,20)" rx="2" ry="2" />
<text  x="49.87" y="543.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (1 samples, 0.02%)</title><rect x="783.5" y="517" width="0.3" height="15.0" fill="rgb(229,180,17)" rx="2" ry="2" />
<text  x="786.54" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="96.9" y="597" width="0.5" height="15.0" fill="rgb(232,195,34)" rx="2" ry="2" />
<text  x="99.94" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (14 samples, 0.27%)</title><rect x="421.9" y="421" width="3.2" height="15.0" fill="rgb(223,221,53)" rx="2" ry="2" />
<text  x="424.92" y="431.5" ></text>
</g>
<g >
<title>operator delete (9 samples, 0.17%)</title><rect x="583.5" y="549" width="2.0" height="15.0" fill="rgb(216,217,7)" rx="2" ry="2" />
<text  x="586.50" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::relation&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="71.7" y="629" width="0.2" height="15.0" fill="rgb(205,41,26)" rx="2" ry="2" />
<text  x="74.67" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="212.1" y="341" width="0.2" height="15.0" fill="rgb(236,192,8)" rx="2" ry="2" />
<text  x="215.09" y="351.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (2 samples, 0.04%)</title><rect x="709.1" y="629" width="0.5" height="15.0" fill="rgb(212,135,22)" rx="2" ry="2" />
<text  x="712.12" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="424.6" y="389" width="0.3" height="15.0" fill="rgb(230,25,29)" rx="2" ry="2" />
<text  x="427.65" y="399.5" ></text>
</g>
<g >
<title>cql3::terminal::to_expression (1 samples, 0.02%)</title><rect x="874.1" y="485" width="0.2" height="15.0" fill="rgb(233,227,39)" rx="2" ry="2" />
<text  x="877.12" y="495.5" ></text>
</g>
<g >
<title>single_node_cql_env::prepare (1 samples, 0.02%)</title><rect x="79.0" y="741" width="0.2" height="15.0" fill="rgb(209,51,50)" rx="2" ry="2" />
<text  x="81.96" y="751.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="39.1" y="485" width="0.3" height="15.0" fill="rgb(226,116,4)" rx="2" ry="2" />
<text  x="42.13" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="46.2" y="485" width="0.2" height="15.0" fill="rgb(232,188,3)" rx="2" ry="2" />
<text  x="49.19" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (1 samples, 0.02%)</title><rect x="769.2" y="613" width="0.2" height="15.0" fill="rgb(243,48,9)" rx="2" ry="2" />
<text  x="772.21" y="623.5" ></text>
</g>
<g >
<title>sstables::sstable::write_simple&lt; (1 samples, 0.02%)</title><rect x="15.0" y="693" width="0.2" height="15.0" fill="rgb(238,176,32)" rx="2" ry="2" />
<text  x="18.01" y="703.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (1 samples, 0.02%)</title><rect x="1125.1" y="549" width="0.3" height="15.0" fill="rgb(238,2,43)" rx="2" ry="2" />
<text  x="1128.14" y="559.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (4,754 samples, 91.69%)</title><rect x="84.6" y="741" width="1082.0" height="15.0" fill="rgb(231,217,8)" rx="2" ry="2" />
<text  x="87.65" y="751.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="195.7" y="421" width="0.2" height="15.0" fill="rgb(221,105,31)" rx="2" ry="2" />
<text  x="198.70" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%)</title><rect x="866.6" y="469" width="0.2" height="15.0" fill="rgb(245,155,44)" rx="2" ry="2" />
<text  x="869.61" y="479.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="812.4" y="485" width="1.2" height="15.0" fill="rgb(239,178,35)" rx="2" ry="2" />
<text  x="815.45" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (15 samples, 0.29%)</title><rect x="838.8" y="613" width="3.5" height="15.0" fill="rgb(226,85,42)" rx="2" ry="2" />
<text  x="841.84" y="623.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="79.0" y="37" width="0.2" height="15.0" fill="rgb(215,59,30)" rx="2" ry="2" />
<text  x="81.96" y="47.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (6 samples, 0.12%)</title><rect x="273.5" y="421" width="1.4" height="15.0" fill="rgb(238,111,12)" rx="2" ry="2" />
<text  x="276.54" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="1140.4" y="693" width="0.7" height="15.0" fill="rgb(253,218,24)" rx="2" ry="2" />
<text  x="1143.39" y="703.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (5 samples, 0.10%)</title><rect x="612.4" y="645" width="1.1" height="15.0" fill="rgb(238,100,0)" rx="2" ry="2" />
<text  x="615.40" y="655.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_impl_data::_Vector_impl_data (1 samples, 0.02%)</title><rect x="52.8" y="421" width="0.2" height="15.0" fill="rgb(230,222,43)" rx="2" ry="2" />
<text  x="55.78" y="431.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (2 samples, 0.04%)</title><rect x="1163.6" y="645" width="0.5" height="15.0" fill="rgb(218,73,38)" rx="2" ry="2" />
<text  x="1166.60" y="655.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="644.3" y="677" width="0.2" height="15.0" fill="rgb(231,106,18)" rx="2" ry="2" />
<text  x="647.26" y="687.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (14 samples, 0.27%)</title><rect x="1095.1" y="597" width="3.2" height="15.0" fill="rgb(232,216,50)" rx="2" ry="2" />
<text  x="1098.10" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%)</title><rect x="691.6" y="645" width="0.9" height="15.0" fill="rgb(252,139,28)" rx="2" ry="2" />
<text  x="694.60" y="655.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (9 samples, 0.17%)</title><rect x="787.6" y="501" width="2.1" height="15.0" fill="rgb(232,41,51)" rx="2" ry="2" />
<text  x="790.64" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%)</title><rect x="39.4" y="517" width="0.4" height="15.0" fill="rgb(251,226,6)" rx="2" ry="2" />
<text  x="42.36" y="527.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (1 samples, 0.02%)</title><rect x="16.6" y="517" width="0.2" height="15.0" fill="rgb(216,173,6)" rx="2" ry="2" />
<text  x="19.60" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (3 samples, 0.06%)</title><rect x="890.3" y="613" width="0.7" height="15.0" fill="rgb(212,210,16)" rx="2" ry="2" />
<text  x="893.28" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="597.6" y="597" width="0.2" height="15.0" fill="rgb(208,107,10)" rx="2" ry="2" />
<text  x="600.61" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="585.1" y="533" width="0.4" height="15.0" fill="rgb(214,184,2)" rx="2" ry="2" />
<text  x="588.09" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (29 samples, 0.56%)</title><rect x="50.1" y="517" width="6.6" height="15.0" fill="rgb(233,58,3)" rx="2" ry="2" />
<text  x="53.05" y="527.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (5 samples, 0.10%)</title><rect x="691.6" y="709" width="1.1" height="15.0" fill="rgb(251,43,25)" rx="2" ry="2" />
<text  x="694.60" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="1114.7" y="629" width="0.4" height="15.0" fill="rgb(254,30,32)" rx="2" ry="2" />
<text  x="1117.67" y="639.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="766.7" y="517" width="0.2" height="15.0" fill="rgb(205,178,31)" rx="2" ry="2" />
<text  x="769.70" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="80.8" y="629" width="0.2" height="15.0" fill="rgb(251,139,47)" rx="2" ry="2" />
<text  x="83.78" y="639.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (15 samples, 0.29%)</title><rect x="487.7" y="469" width="3.4" height="15.0" fill="rgb(249,207,5)" rx="2" ry="2" />
<text  x="490.69" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="678.4" y="693" width="0.2" height="15.0" fill="rgb(239,71,22)" rx="2" ry="2" />
<text  x="681.40" y="703.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="954.7" y="565" width="0.2" height="15.0" fill="rgb(217,58,44)" rx="2" ry="2" />
<text  x="957.68" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%)</title><rect x="656.8" y="629" width="0.4" height="15.0" fill="rgb(206,117,21)" rx="2" ry="2" />
<text  x="659.78" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (5 samples, 0.10%)</title><rect x="81.7" y="645" width="1.1" height="15.0" fill="rgb(251,151,9)" rx="2" ry="2" />
<text  x="84.69" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (1 samples, 0.02%)</title><rect x="715.5" y="709" width="0.2" height="15.0" fill="rgb(216,75,51)" rx="2" ry="2" />
<text  x="718.50" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="147.7" y="629" width="0.2" height="15.0" fill="rgb(207,61,4)" rx="2" ry="2" />
<text  x="150.69" y="639.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%)</title><rect x="114.5" y="613" width="0.2" height="15.0" fill="rgb(243,39,28)" rx="2" ry="2" />
<text  x="117.46" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (5 samples, 0.10%)</title><rect x="527.1" y="485" width="1.1" height="15.0" fill="rgb(226,164,44)" rx="2" ry="2" />
<text  x="530.06" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="195.0" y="373" width="0.7" height="15.0" fill="rgb(231,224,28)" rx="2" ry="2" />
<text  x="198.02" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (2 samples, 0.04%)</title><rect x="642.0" y="693" width="0.4" height="15.0" fill="rgb(215,185,46)" rx="2" ry="2" />
<text  x="644.99" y="703.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::make&lt;managed_bytes&gt; (1 samples, 0.02%)</title><rect x="914.9" y="533" width="0.2" height="15.0" fill="rgb(243,144,37)" rx="2" ry="2" />
<text  x="917.86" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%)</title><rect x="1163.8" y="565" width="0.3" height="15.0" fill="rgb(215,70,53)" rx="2" ry="2" />
<text  x="1166.83" y="575.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="504.3" y="421" width="0.5" height="15.0" fill="rgb(230,45,48)" rx="2" ry="2" />
<text  x="507.30" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="861.8" y="613" width="0.5" height="15.0" fill="rgb(246,52,6)" rx="2" ry="2" />
<text  x="864.83" y="623.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (3 samples, 0.06%)</title><rect x="457.6" y="501" width="0.7" height="15.0" fill="rgb(232,85,34)" rx="2" ry="2" />
<text  x="460.65" y="511.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (3 samples, 0.06%)</title><rect x="114.7" y="629" width="0.7" height="15.0" fill="rgb(229,68,37)" rx="2" ry="2" />
<text  x="117.69" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="642.4" y="693" width="0.3" height="15.0" fill="rgb(226,127,24)" rx="2" ry="2" />
<text  x="645.44" y="703.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (432 samples, 8.33%)</title><rect x="187.3" y="501" width="98.3" height="15.0" fill="rgb(233,88,6)" rx="2" ry="2" />
<text  x="190.28" y="511.5" >seastar::do..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%)</title><rect x="848.2" y="581" width="0.2" height="15.0" fill="rgb(246,148,24)" rx="2" ry="2" />
<text  x="851.18" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="39.4" y="421" width="0.4" height="15.0" fill="rgb(237,192,33)" rx="2" ry="2" />
<text  x="42.36" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="794.5" y="341" width="0.4" height="15.0" fill="rgb(228,70,41)" rx="2" ry="2" />
<text  x="797.47" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="40.7" y="389" width="0.3" height="15.0" fill="rgb(254,99,14)" rx="2" ry="2" />
<text  x="43.72" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="56.9" y="501" width="0.2" height="15.0" fill="rgb(235,82,23)" rx="2" ry="2" />
<text  x="59.88" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;logalloc::allocating_section::operator (1 samples, 0.02%)</title><rect x="81.0" y="645" width="0.2" height="15.0" fill="rgb(252,227,47)" rx="2" ry="2" />
<text  x="84.00" y="655.5" ></text>
</g>
<g >
<title>commitlog_entry_writer::serialize&lt;seastar::memory_output_stream&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (3 samples, 0.06%)</title><rect x="1124.0" y="453" width="0.7" height="15.0" fill="rgb(241,23,8)" rx="2" ry="2" />
<text  x="1127.00" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%)</title><rect x="92.2" y="693" width="0.2" height="15.0" fill="rgb(208,189,10)" rx="2" ry="2" />
<text  x="95.16" y="703.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::then_impl&lt;service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%)</title><rect x="971.5" y="501" width="0.3" height="15.0" fill="rgb(239,111,9)" rx="2" ry="2" />
<text  x="974.52" y="511.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (37 samples, 0.71%)</title><rect x="496.6" y="453" width="8.4" height="15.0" fill="rgb(223,191,35)" rx="2" ry="2" />
<text  x="499.57" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="874.3" y="485" width="0.5" height="15.0" fill="rgb(214,184,7)" rx="2" ry="2" />
<text  x="877.35" y="495.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="38.2" y="421" width="0.5" height="15.0" fill="rgb(215,71,12)" rx="2" ry="2" />
<text  x="41.22" y="431.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (31 samples, 0.60%)</title><rect x="553.5" y="613" width="7.0" height="15.0" fill="rgb(250,195,12)" rx="2" ry="2" />
<text  x="556.46" y="623.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (97 samples, 1.87%)</title><rect x="789.7" y="501" width="22.1" height="15.0" fill="rgb(236,159,27)" rx="2" ry="2" />
<text  x="792.69" y="511.5" >s..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::term&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="653.6" y="645" width="0.2" height="15.0" fill="rgb(205,115,20)" rx="2" ry="2" />
<text  x="656.59" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (6 samples, 0.12%)</title><rect x="167.0" y="517" width="1.4" height="15.0" fill="rgb(218,31,47)" rx="2" ry="2" />
<text  x="170.03" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="322.9" y="501" width="0.2" height="15.0" fill="rgb(248,208,31)" rx="2" ry="2" />
<text  x="325.92" y="511.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.14%)</title><rect x="793.6" y="405" width="1.5" height="15.0" fill="rgb(208,132,5)" rx="2" ry="2" />
<text  x="796.56" y="415.5" ></text>
</g>
<g >
<title>LZ4_compress_fast_extState (1 samples, 0.02%)</title><rect x="10.0" y="837" width="0.2" height="15.0" fill="rgb(234,82,25)" rx="2" ry="2" />
<text  x="13.00" y="847.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (5 samples, 0.10%)</title><rect x="425.1" y="421" width="1.1" height="15.0" fill="rgb(235,122,50)" rx="2" ry="2" />
<text  x="428.11" y="431.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (6 samples, 0.12%)</title><rect x="1143.3" y="661" width="1.4" height="15.0" fill="rgb(214,138,27)" rx="2" ry="2" />
<text  x="1146.35" y="671.5" ></text>
</g>
<g >
<title>service::storage_service::join_token_ring (2 samples, 0.04%)</title><rect x="17.3" y="677" width="0.4" height="15.0" fill="rgb(246,21,44)" rx="2" ry="2" />
<text  x="20.28" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="996.8" y="469" width="0.2" height="15.0" fill="rgb(219,229,19)" rx="2" ry="2" />
<text  x="999.78" y="479.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="16.6" y="629" width="0.2" height="15.0" fill="rgb(210,224,50)" rx="2" ry="2" />
<text  x="19.60" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="1054.1" y="517" width="1.4" height="15.0" fill="rgb(218,104,7)" rx="2" ry="2" />
<text  x="1057.14" y="527.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1144.5" y="613" width="0.2" height="15.0" fill="rgb(231,103,41)" rx="2" ry="2" />
<text  x="1147.48" y="623.5" ></text>
</g>
</g>
</svg>
