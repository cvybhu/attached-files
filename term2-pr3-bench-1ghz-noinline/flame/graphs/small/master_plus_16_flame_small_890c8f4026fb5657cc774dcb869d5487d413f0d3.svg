<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="742.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="725" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="725" > </text>
<g id="frames">
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (1 samples, 0.02%)</title><rect x="281.0" y="277" width="0.2" height="15.0" fill="rgb(251,212,10)" rx="2" ry="2" />
<text  x="284.00" y="287.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%)</title><rect x="1113.5" y="165" width="0.2" height="15.0" fill="rgb(241,62,40)" rx="2" ry="2" />
<text  x="1116.51" y="175.5" ></text>
</g>
<g >
<title>table::estimate_read_memory_cost (1 samples, 0.02%)</title><rect x="1029.8" y="293" width="0.2" height="15.0" fill="rgb(239,115,50)" rx="2" ry="2" />
<text  x="1032.76" y="303.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (561 samples, 10.79%)</title><rect x="737.4" y="501" width="127.4" height="15.0" fill="rgb(243,39,6)" rx="2" ry="2" />
<text  x="740.43" y="511.5" >single_node_cql..</text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (2 samples, 0.04%)</title><rect x="811.4" y="149" width="0.5" height="15.0" fill="rgb(219,175,43)" rx="2" ry="2" />
<text  x="814.42" y="159.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (35 samples, 0.67%)</title><rect x="809.8" y="245" width="8.0" height="15.0" fill="rgb(207,89,15)" rx="2" ry="2" />
<text  x="812.83" y="255.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (544 samples, 10.46%)</title><rect x="182.0" y="357" width="123.5" height="15.0" fill="rgb(236,36,51)" rx="2" ry="2" />
<text  x="185.04" y="367.5" >mutation_reader..</text>
</g>
<g >
<title>schema::column_at (5 samples, 0.10%)</title><rect x="255.8" y="165" width="1.1" height="15.0" fill="rgb(208,93,3)" rx="2" ry="2" />
<text  x="258.80" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="72.2" y="373" width="0.2" height="15.0" fill="rgb(231,34,44)" rx="2" ry="2" />
<text  x="75.19" y="383.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (5 samples, 0.10%)</title><rect x="336.2" y="309" width="1.1" height="15.0" fill="rgb(216,175,17)" rx="2" ry="2" />
<text  x="339.15" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="705.9" y="501" width="0.2" height="15.0" fill="rgb(214,138,38)" rx="2" ry="2" />
<text  x="708.88" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="56.1" y="293" width="0.4" height="15.0" fill="rgb(249,139,53)" rx="2" ry="2" />
<text  x="59.07" y="303.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="10.7" y="485" width="0.2" height="15.0" fill="rgb(237,97,19)" rx="2" ry="2" />
<text  x="13.68" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="49.3" y="277" width="0.6" height="15.0" fill="rgb(244,85,22)" rx="2" ry="2" />
<text  x="52.27" y="287.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%)</title><rect x="626.4" y="469" width="0.3" height="15.0" fill="rgb(215,73,9)" rx="2" ry="2" />
<text  x="629.44" y="479.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (2 samples, 0.04%)</title><rect x="565.6" y="421" width="0.5" height="15.0" fill="rgb(250,40,18)" rx="2" ry="2" />
<text  x="568.61" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (12 samples, 0.23%)</title><rect x="687.9" y="501" width="2.8" height="15.0" fill="rgb(234,56,25)" rx="2" ry="2" />
<text  x="690.95" y="511.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="11.1" y="245" width="0.3" height="15.0" fill="rgb(241,42,26)" rx="2" ry="2" />
<text  x="14.13" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="669.3" y="469" width="0.7" height="15.0" fill="rgb(234,54,28)" rx="2" ry="2" />
<text  x="672.34" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="57.9" y="197" width="0.2" height="15.0" fill="rgb(208,142,0)" rx="2" ry="2" />
<text  x="60.89" y="207.5" ></text>
</g>
<g >
<title>syscall-0 (1 samples, 0.02%)</title><rect x="1189.8" y="677" width="0.2" height="15.0" fill="rgb(231,70,50)" rx="2" ry="2" />
<text  x="1192.77" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="57.7" y="245" width="0.2" height="15.0" fill="rgb(238,143,28)" rx="2" ry="2" />
<text  x="60.66" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="643.9" y="405" width="0.2" height="15.0" fill="rgb(250,126,46)" rx="2" ry="2" />
<text  x="646.92" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="49.7" y="165" width="0.2" height="15.0" fill="rgb(208,192,29)" rx="2" ry="2" />
<text  x="52.72" y="175.5" ></text>
</g>
<g >
<title>db::system_keyspace::all_tables (1 samples, 0.02%)</title><rect x="20.0" y="325" width="0.2" height="15.0" fill="rgb(232,100,43)" rx="2" ry="2" />
<text  x="22.99" y="335.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (464 samples, 8.92%)</title><rect x="337.7" y="325" width="105.4" height="15.0" fill="rgb(205,195,10)" rx="2" ry="2" />
<text  x="340.74" y="335.5" >seastar::rep..</text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="112.8" y="357" width="0.2" height="15.0" fill="rgb(251,214,5)" rx="2" ry="2" />
<text  x="115.82" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::storage_proxy::send_to_live_endpoints (1 samples, 0.02%)</title><rect x="702.9" y="533" width="0.3" height="15.0" fill="rgb(250,99,13)" rx="2" ry="2" />
<text  x="705.93" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="1126.2" y="213" width="0.2" height="15.0" fill="rgb(220,3,35)" rx="2" ry="2" />
<text  x="1129.22" y="223.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (4 samples, 0.08%)</title><rect x="1085.1" y="421" width="0.9" height="15.0" fill="rgb(219,23,43)" rx="2" ry="2" />
<text  x="1088.14" y="431.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (1 samples, 0.02%)</title><rect x="872.2" y="373" width="0.3" height="15.0" fill="rgb(225,107,27)" rx="2" ry="2" />
<text  x="875.25" y="383.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (2 samples, 0.04%)</title><rect x="562.7" y="421" width="0.4" height="15.0" fill="rgb(233,26,33)" rx="2" ry="2" />
<text  x="565.66" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (6 samples, 0.12%)</title><rect x="865.2" y="485" width="1.4" height="15.0" fill="rgb(215,173,27)" rx="2" ry="2" />
<text  x="868.21" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="724.7" y="453" width="0.5" height="15.0" fill="rgb(228,85,19)" rx="2" ry="2" />
<text  x="727.72" y="463.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="53.8" y="197" width="0.2" height="15.0" fill="rgb(253,25,5)" rx="2" ry="2" />
<text  x="56.80" y="207.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="516.8" y="293" width="0.2" height="15.0" fill="rgb(214,76,27)" rx="2" ry="2" />
<text  x="519.82" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (4 samples, 0.08%)</title><rect x="1165.0" y="533" width="0.9" height="15.0" fill="rgb(232,176,5)" rx="2" ry="2" />
<text  x="1168.03" y="543.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="860.7" y="405" width="0.4" height="15.0" fill="rgb(241,190,5)" rx="2" ry="2" />
<text  x="863.67" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="610.6" y="421" width="0.2" height="15.0" fill="rgb(224,188,46)" rx="2" ry="2" />
<text  x="613.55" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="87.4" y="405" width="0.4" height="15.0" fill="rgb(214,93,17)" rx="2" ry="2" />
<text  x="90.40" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (4 samples, 0.08%)</title><rect x="681.4" y="501" width="0.9" height="15.0" fill="rgb(219,182,2)" rx="2" ry="2" />
<text  x="684.37" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="803.0" y="261" width="0.5" height="15.0" fill="rgb(246,105,13)" rx="2" ry="2" />
<text  x="806.02" y="271.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (7 samples, 0.13%)</title><rect x="660.3" y="533" width="1.5" height="15.0" fill="rgb(206,120,30)" rx="2" ry="2" />
<text  x="663.26" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (3 samples, 0.06%)</title><rect x="1163.0" y="501" width="0.7" height="15.0" fill="rgb(254,25,4)" rx="2" ry="2" />
<text  x="1165.99" y="511.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1,235 samples, 23.75%)</title><rect x="171.6" y="453" width="280.3" height="15.0" fill="rgb(220,16,46)" rx="2" ry="2" />
<text  x="174.60" y="463.5" >query::consume_page&lt;</text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (1 samples, 0.02%)</title><rect x="130.3" y="453" width="0.2" height="15.0" fill="rgb(216,167,25)" rx="2" ry="2" />
<text  x="133.29" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="268.3" y="181" width="0.2" height="15.0" fill="rgb(216,211,53)" rx="2" ry="2" />
<text  x="271.29" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (1 samples, 0.02%)</title><rect x="142.5" y="485" width="0.3" height="15.0" fill="rgb(218,202,0)" rx="2" ry="2" />
<text  x="145.55" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="951.5" y="437" width="0.2" height="15.0" fill="rgb(224,198,48)" rx="2" ry="2" />
<text  x="954.46" y="447.5" ></text>
</g>
<g >
<title>row::external_memory_usage (1 samples, 0.02%)</title><rect x="869.7" y="309" width="0.3" height="15.0" fill="rgb(248,219,34)" rx="2" ry="2" />
<text  x="872.75" y="319.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="912.0" y="373" width="0.2" height="15.0" fill="rgb(219,45,35)" rx="2" ry="2" />
<text  x="914.97" y="383.5" ></text>
</g>
<g >
<title>auth::collect_roles (1 samples, 0.02%)</title><rect x="1164.4" y="309" width="0.2" height="15.0" fill="rgb(224,71,26)" rx="2" ry="2" />
<text  x="1167.35" y="319.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (4 samples, 0.08%)</title><rect x="483.9" y="357" width="0.9" height="15.0" fill="rgb(248,109,35)" rx="2" ry="2" />
<text  x="486.91" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (2 samples, 0.04%)</title><rect x="78.3" y="421" width="0.5" height="15.0" fill="rgb(237,173,36)" rx="2" ry="2" />
<text  x="81.32" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="105.6" y="469" width="0.2" height="15.0" fill="rgb(236,110,31)" rx="2" ry="2" />
<text  x="108.55" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (2 samples, 0.04%)</title><rect x="600.6" y="373" width="0.4" height="15.0" fill="rgb(215,55,32)" rx="2" ry="2" />
<text  x="603.57" y="383.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (4 samples, 0.08%)</title><rect x="721.3" y="453" width="0.9" height="15.0" fill="rgb(250,49,12)" rx="2" ry="2" />
<text  x="724.31" y="463.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%)</title><rect x="439.4" y="245" width="0.2" height="15.0" fill="rgb(215,218,46)" rx="2" ry="2" />
<text  x="442.42" y="255.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::reset (1 samples, 0.02%)</title><rect x="68.3" y="373" width="0.3" height="15.0" fill="rgb(207,17,19)" rx="2" ry="2" />
<text  x="71.33" y="383.5" ></text>
</g>
<g >
<title>boost::iterators::filter_iterator&lt;mutation_partition::non_dummy_rows (1 samples, 0.02%)</title><rect x="1123.7" y="149" width="0.3" height="15.0" fill="rgb(253,179,7)" rx="2" ry="2" />
<text  x="1126.73" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1109.2" y="453" width="0.2" height="15.0" fill="rgb(213,206,42)" rx="2" ry="2" />
<text  x="1112.20" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (84 samples, 1.62%)</title><rect x="1057.9" y="357" width="19.1" height="15.0" fill="rgb(247,229,29)" rx="2" ry="2" />
<text  x="1060.91" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (1 samples, 0.02%)</title><rect x="1130.3" y="245" width="0.2" height="15.0" fill="rgb(238,119,49)" rx="2" ry="2" />
<text  x="1133.31" y="255.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="638.2" y="405" width="1.2" height="15.0" fill="rgb(226,10,48)" rx="2" ry="2" />
<text  x="641.24" y="415.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (11 samples, 0.21%)</title><rect x="621.2" y="453" width="2.5" height="15.0" fill="rgb(215,182,18)" rx="2" ry="2" />
<text  x="624.22" y="463.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (16 samples, 0.31%)</title><rect x="733.6" y="501" width="3.6" height="15.0" fill="rgb(245,150,54)" rx="2" ry="2" />
<text  x="736.57" y="511.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (5 samples, 0.10%)</title><rect x="1102.6" y="421" width="1.2" height="15.0" fill="rgb(217,6,20)" rx="2" ry="2" />
<text  x="1105.62" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (4 samples, 0.08%)</title><rect x="406.5" y="197" width="0.9" height="15.0" fill="rgb(240,34,35)" rx="2" ry="2" />
<text  x="409.51" y="207.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="701.6" y="405" width="0.2" height="15.0" fill="rgb(254,96,23)" rx="2" ry="2" />
<text  x="704.57" y="415.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (9 samples, 0.17%)</title><rect x="1106.2" y="421" width="2.1" height="15.0" fill="rgb(219,33,44)" rx="2" ry="2" />
<text  x="1109.25" y="431.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (13 samples, 0.25%)</title><rect x="70.4" y="453" width="2.9" height="15.0" fill="rgb(216,9,31)" rx="2" ry="2" />
<text  x="73.37" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (1 samples, 0.02%)</title><rect x="1110.3" y="469" width="0.3" height="15.0" fill="rgb(236,44,11)" rx="2" ry="2" />
<text  x="1113.33" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="58.1" y="101" width="0.2" height="15.0" fill="rgb(233,209,8)" rx="2" ry="2" />
<text  x="61.12" y="111.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="1035.0" y="229" width="0.4" height="15.0" fill="rgb(210,157,0)" rx="2" ry="2" />
<text  x="1037.98" y="239.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="877.5" y="293" width="0.2" height="15.0" fill="rgb(229,155,52)" rx="2" ry="2" />
<text  x="880.47" y="303.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::statements::raw::update_statement, cql3::cf_name, std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;, bool&amp;&gt; (1 samples, 0.02%)</title><rect x="64.5" y="389" width="0.2" height="15.0" fill="rgb(228,209,18)" rx="2" ry="2" />
<text  x="67.47" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="48.1" y="165" width="0.3" height="15.0" fill="rgb(238,93,17)" rx="2" ry="2" />
<text  x="51.13" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="538.4" y="357" width="0.7" height="15.0" fill="rgb(235,142,3)" rx="2" ry="2" />
<text  x="541.38" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (12 samples, 0.23%)</title><rect x="85.6" y="549" width="2.7" height="15.0" fill="rgb(248,12,34)" rx="2" ry="2" />
<text  x="88.58" y="559.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="627.6" y="453" width="0.2" height="15.0" fill="rgb(244,180,1)" rx="2" ry="2" />
<text  x="630.58" y="463.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (1 samples, 0.02%)</title><rect x="788.7" y="389" width="0.2" height="15.0" fill="rgb(213,146,28)" rx="2" ry="2" />
<text  x="791.72" y="399.5" ></text>
</g>
<g >
<title>query::result_set::result_set (1 samples, 0.02%)</title><rect x="111.5" y="357" width="0.2" height="15.0" fill="rgb(235,125,0)" rx="2" ry="2" />
<text  x="114.45" y="367.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (4 samples, 0.08%)</title><rect x="643.7" y="437" width="0.9" height="15.0" fill="rgb(232,190,35)" rx="2" ry="2" />
<text  x="646.69" y="447.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (3 samples, 0.06%)</title><rect x="103.5" y="453" width="0.7" height="15.0" fill="rgb(227,134,7)" rx="2" ry="2" />
<text  x="106.51" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (10 samples, 0.19%)</title><rect x="711.3" y="517" width="2.3" height="15.0" fill="rgb(232,124,1)" rx="2" ry="2" />
<text  x="714.33" y="527.5" ></text>
</g>
<g >
<title>appending_hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="112.1" y="373" width="0.3" height="15.0" fill="rgb(250,154,19)" rx="2" ry="2" />
<text  x="115.14" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (6 samples, 0.12%)</title><rect x="808.5" y="229" width="1.3" height="15.0" fill="rgb(212,138,20)" rx="2" ry="2" />
<text  x="811.47" y="239.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::setCharStream (1 samples, 0.02%)</title><rect x="23.4" y="437" width="0.2" height="15.0" fill="rgb(241,189,19)" rx="2" ry="2" />
<text  x="26.39" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::operation::set_value&gt;, void&gt; (1 samples, 0.02%)</title><rect x="59.5" y="325" width="0.2" height="15.0" fill="rgb(247,220,39)" rx="2" ry="2" />
<text  x="62.48" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="58.3" y="181" width="0.5" height="15.0" fill="rgb(210,12,37)" rx="2" ry="2" />
<text  x="61.34" y="191.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%)</title><rect x="292.6" y="229" width="0.2" height="15.0" fill="rgb(227,26,16)" rx="2" ry="2" />
<text  x="295.57" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (5 samples, 0.10%)</title><rect x="272.8" y="197" width="1.2" height="15.0" fill="rgb(228,65,54)" rx="2" ry="2" />
<text  x="275.83" y="207.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="20.2" y="293" width="0.2" height="15.0" fill="rgb(238,181,10)" rx="2" ry="2" />
<text  x="23.21" y="303.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="865.7" y="469" width="0.4" height="15.0" fill="rgb(242,181,39)" rx="2" ry="2" />
<text  x="868.66" y="479.5" ></text>
</g>
<g >
<title>sstables::sstable_directory::commit_directory_changes (1 samples, 0.02%)</title><rect x="701.6" y="373" width="0.2" height="15.0" fill="rgb(223,52,35)" rx="2" ry="2" />
<text  x="704.57" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt; &gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="63.8" y="325" width="0.2" height="15.0" fill="rgb(248,187,36)" rx="2" ry="2" />
<text  x="66.79" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="478.5" y="309" width="0.2" height="15.0" fill="rgb(216,143,19)" rx="2" ry="2" />
<text  x="481.46" y="319.5" ></text>
</g>
<g >
<title>validation::validate_cql_key (1 samples, 0.02%)</title><rect x="875.0" y="405" width="0.2" height="15.0" fill="rgb(242,229,53)" rx="2" ry="2" />
<text  x="877.97" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="57.2" y="245" width="0.2" height="15.0" fill="rgb(253,167,2)" rx="2" ry="2" />
<text  x="60.21" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="185.9" y="325" width="0.2" height="15.0" fill="rgb(234,78,29)" rx="2" ry="2" />
<text  x="188.90" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="48.8" y="245" width="0.2" height="15.0" fill="rgb(219,115,49)" rx="2" ry="2" />
<text  x="51.81" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (5 samples, 0.10%)</title><rect x="778.5" y="357" width="1.1" height="15.0" fill="rgb(210,216,8)" rx="2" ry="2" />
<text  x="781.51" y="367.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (1 samples, 0.02%)</title><rect x="1126.2" y="229" width="0.2" height="15.0" fill="rgb(254,51,26)" rx="2" ry="2" />
<text  x="1129.22" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="557.4" y="373" width="0.5" height="15.0" fill="rgb(253,202,29)" rx="2" ry="2" />
<text  x="560.44" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1037.3" y="325" width="0.2" height="15.0" fill="rgb(245,78,37)" rx="2" ry="2" />
<text  x="1040.25" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::release (1 samples, 0.02%)</title><rect x="59.9" y="325" width="0.3" height="15.0" fill="rgb(208,58,17)" rx="2" ry="2" />
<text  x="62.93" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (12 samples, 0.23%)</title><rect x="85.6" y="533" width="2.7" height="15.0" fill="rgb(251,179,30)" rx="2" ry="2" />
<text  x="88.58" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (2 samples, 0.04%)</title><rect x="196.8" y="277" width="0.4" height="15.0" fill="rgb(236,56,27)" rx="2" ry="2" />
<text  x="199.79" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (9 samples, 0.17%)</title><rect x="846.6" y="469" width="2.0" height="15.0" fill="rgb(248,170,46)" rx="2" ry="2" />
<text  x="849.60" y="479.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_id::full_name (1 samples, 0.02%)</title><rect x="703.2" y="261" width="0.2" height="15.0" fill="rgb(215,100,27)" rx="2" ry="2" />
<text  x="706.16" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="1159.1" y="485" width="0.3" height="15.0" fill="rgb(228,199,31)" rx="2" ry="2" />
<text  x="1162.13" y="495.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="48.8" y="197" width="0.2" height="15.0" fill="rgb(229,134,18)" rx="2" ry="2" />
<text  x="51.81" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="682.0" y="485" width="0.3" height="15.0" fill="rgb(243,49,21)" rx="2" ry="2" />
<text  x="685.05" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (2 samples, 0.04%)</title><rect x="306.2" y="357" width="0.4" height="15.0" fill="rgb(230,115,48)" rx="2" ry="2" />
<text  x="309.19" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="475.1" y="325" width="0.2" height="15.0" fill="rgb(254,29,48)" rx="2" ry="2" />
<text  x="478.05" y="335.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (3 samples, 0.06%)</title><rect x="924.0" y="389" width="0.7" height="15.0" fill="rgb(217,61,43)" rx="2" ry="2" />
<text  x="926.99" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (7 samples, 0.13%)</title><rect x="696.1" y="501" width="1.6" height="15.0" fill="rgb(228,99,44)" rx="2" ry="2" />
<text  x="699.12" y="511.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%)</title><rect x="876.1" y="277" width="0.7" height="15.0" fill="rgb(230,116,15)" rx="2" ry="2" />
<text  x="879.11" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::empty (2 samples, 0.04%)</title><rect x="944.4" y="421" width="0.5" height="15.0" fill="rgb(223,153,30)" rx="2" ry="2" />
<text  x="947.42" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="816.4" y="117" width="0.2" height="15.0" fill="rgb(240,187,53)" rx="2" ry="2" />
<text  x="819.41" y="127.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (18 samples, 0.35%)</title><rect x="100.8" y="501" width="4.1" height="15.0" fill="rgb(210,136,42)" rx="2" ry="2" />
<text  x="103.79" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="64.9" y="389" width="0.3" height="15.0" fill="rgb(219,156,36)" rx="2" ry="2" />
<text  x="67.93" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%)</title><rect x="891.8" y="453" width="0.2" height="15.0" fill="rgb(247,22,4)" rx="2" ry="2" />
<text  x="894.77" y="463.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (2 samples, 0.04%)</title><rect x="57.2" y="261" width="0.5" height="15.0" fill="rgb(234,49,11)" rx="2" ry="2" />
<text  x="60.21" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="1022.3" y="229" width="0.2" height="15.0" fill="rgb(226,94,39)" rx="2" ry="2" />
<text  x="1025.27" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%)</title><rect x="804.4" y="261" width="0.4" height="15.0" fill="rgb(220,49,16)" rx="2" ry="2" />
<text  x="807.38" y="271.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::range_or_slice_eq_null (1 samples, 0.02%)</title><rect x="872.7" y="421" width="0.2" height="15.0" fill="rgb(212,84,17)" rx="2" ry="2" />
<text  x="875.70" y="431.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (2 samples, 0.04%)</title><rect x="158.7" y="453" width="0.4" height="15.0" fill="rgb(246,61,16)" rx="2" ry="2" />
<text  x="161.66" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (6 samples, 0.12%)</title><rect x="756.0" y="357" width="1.4" height="15.0" fill="rgb(233,0,45)" rx="2" ry="2" />
<text  x="759.04" y="367.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (147 samples, 2.83%)</title><rect x="223.6" y="197" width="33.3" height="15.0" fill="rgb(233,98,6)" rx="2" ry="2" />
<text  x="226.58" y="207.5" >cl..</text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (3 samples, 0.06%)</title><rect x="73.8" y="405" width="0.7" height="15.0" fill="rgb(243,160,43)" rx="2" ry="2" />
<text  x="76.78" y="415.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (13 samples, 0.25%)</title><rect x="1140.5" y="501" width="3.0" height="15.0" fill="rgb(243,187,50)" rx="2" ry="2" />
<text  x="1143.52" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (7 samples, 0.13%)</title><rect x="245.8" y="69" width="1.6" height="15.0" fill="rgb(217,81,37)" rx="2" ry="2" />
<text  x="248.82" y="79.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (4 samples, 0.08%)</title><rect x="875.9" y="309" width="0.9" height="15.0" fill="rgb(220,189,5)" rx="2" ry="2" />
<text  x="878.88" y="319.5" ></text>
</g>
<g >
<title>cql3::update_parameters::make_cell (2 samples, 0.04%)</title><rect x="875.4" y="325" width="0.5" height="15.0" fill="rgb(222,58,41)" rx="2" ry="2" />
<text  x="878.42" y="335.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="41.1" y="213" width="0.2" height="15.0" fill="rgb(206,0,35)" rx="2" ry="2" />
<text  x="44.09" y="223.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::finally_body&lt;table::stop (1 samples, 0.02%)</title><rect x="702.2" y="533" width="0.3" height="15.0" fill="rgb(250,169,3)" rx="2" ry="2" />
<text  x="705.25" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%)</title><rect x="601.7" y="405" width="0.2" height="15.0" fill="rgb(253,18,14)" rx="2" ry="2" />
<text  x="604.70" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="970.3" y="357" width="0.2" height="15.0" fill="rgb(240,123,2)" rx="2" ry="2" />
<text  x="973.30" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="575.1" y="325" width="0.3" height="15.0" fill="rgb(240,173,38)" rx="2" ry="2" />
<text  x="578.15" y="335.5" ></text>
</g>
<g >
<title>perf_simple_que (5,198 samples, 99.98%)</title><rect x="10.0" y="677" width="1179.8" height="15.0" fill="rgb(238,79,8)" rx="2" ry="2" />
<text  x="13.00" y="687.5" >perf_simple_que</text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (4 samples, 0.08%)</title><rect x="186.1" y="341" width="0.9" height="15.0" fill="rgb(240,70,37)" rx="2" ry="2" />
<text  x="189.13" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="293.5" y="245" width="0.2" height="15.0" fill="rgb(228,226,40)" rx="2" ry="2" />
<text  x="296.48" y="255.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (4 samples, 0.08%)</title><rect x="1053.4" y="325" width="0.9" height="15.0" fill="rgb(214,94,30)" rx="2" ry="2" />
<text  x="1056.37" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (1 samples, 0.02%)</title><rect x="1019.5" y="165" width="0.3" height="15.0" fill="rgb(250,127,30)" rx="2" ry="2" />
<text  x="1022.55" y="175.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (5 samples, 0.10%)</title><rect x="62.7" y="341" width="1.1" height="15.0" fill="rgb(228,201,18)" rx="2" ry="2" />
<text  x="65.66" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="700.7" y="469" width="0.2" height="15.0" fill="rgb(244,163,33)" rx="2" ry="2" />
<text  x="703.66" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="770.1" y="373" width="0.2" height="15.0" fill="rgb(236,70,1)" rx="2" ry="2" />
<text  x="773.11" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="300.5" y="293" width="0.2" height="15.0" fill="rgb(246,84,34)" rx="2" ry="2" />
<text  x="303.52" y="303.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (3 samples, 0.06%)</title><rect x="111.9" y="517" width="0.7" height="15.0" fill="rgb(246,125,12)" rx="2" ry="2" />
<text  x="114.91" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (589 samples, 11.33%)</title><rect x="178.9" y="389" width="133.6" height="15.0" fill="rgb(219,208,6)" rx="2" ry="2" />
<text  x="181.86" y="399.5" >mutation_fragmen..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="822.1" y="309" width="0.2" height="15.0" fill="rgb(252,130,23)" rx="2" ry="2" />
<text  x="825.09" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%)</title><rect x="255.1" y="165" width="0.7" height="15.0" fill="rgb(212,39,38)" rx="2" ry="2" />
<text  x="258.12" y="175.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (8 samples, 0.15%)</title><rect x="1020.5" y="197" width="1.8" height="15.0" fill="rgb(234,171,37)" rx="2" ry="2" />
<text  x="1023.46" y="207.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;boost::intrusive::detail::null_disposer, boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="581.3" y="309" width="0.4" height="15.0" fill="rgb(252,117,5)" rx="2" ry="2" />
<text  x="584.28" y="319.5" ></text>
</g>
<g >
<title>std::_Bind_front&lt;bool  (1 samples, 0.02%)</title><rect x="872.7" y="389" width="0.2" height="15.0" fill="rgb(207,152,30)" rx="2" ry="2" />
<text  x="875.70" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="869.5" y="469" width="0.7" height="15.0" fill="rgb(235,36,47)" rx="2" ry="2" />
<text  x="872.52" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="1121.5" y="341" width="2.0" height="15.0" fill="rgb(245,118,31)" rx="2" ry="2" />
<text  x="1124.46" y="351.5" ></text>
</g>
<g >
<title>distributed_loader::reshard (1 samples, 0.02%)</title><rect x="19.3" y="597" width="0.2" height="15.0" fill="rgb(219,95,31)" rx="2" ry="2" />
<text  x="22.31" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="935.3" y="421" width="0.3" height="15.0" fill="rgb(237,72,17)" rx="2" ry="2" />
<text  x="938.34" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (2 samples, 0.04%)</title><rect x="568.3" y="437" width="0.5" height="15.0" fill="rgb(233,159,0)" rx="2" ry="2" />
<text  x="571.34" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="881.6" y="469" width="0.2" height="15.0" fill="rgb(253,32,32)" rx="2" ry="2" />
<text  x="884.55" y="479.5" ></text>
</g>
<g >
<title>__start_context (288 samples, 5.54%)</title><rect x="18.4" y="645" width="65.4" height="15.0" fill="rgb(217,162,16)" rx="2" ry="2" />
<text  x="21.40" y="655.5" >__start..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (31 samples, 0.60%)</title><rect x="432.6" y="261" width="7.0" height="15.0" fill="rgb(221,132,26)" rx="2" ry="2" />
<text  x="435.61" y="271.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="267.4" y="165" width="0.2" height="15.0" fill="rgb(238,171,46)" rx="2" ry="2" />
<text  x="270.38" y="175.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (46 samples, 0.88%)</title><rect x="69.5" y="485" width="10.4" height="15.0" fill="rgb(232,134,25)" rx="2" ry="2" />
<text  x="72.47" y="495.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;char const*, char, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%)</title><rect x="703.2" y="165" width="0.2" height="15.0" fill="rgb(250,132,5)" rx="2" ry="2" />
<text  x="706.16" y="175.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (13 samples, 0.25%)</title><rect x="1105.3" y="437" width="3.0" height="15.0" fill="rgb(212,27,52)" rx="2" ry="2" />
<text  x="1108.34" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (3 samples, 0.06%)</title><rect x="799.8" y="325" width="0.7" height="15.0" fill="rgb(241,165,28)" rx="2" ry="2" />
<text  x="802.84" y="335.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="507.5" y="229" width="0.2" height="15.0" fill="rgb(231,96,1)" rx="2" ry="2" />
<text  x="510.51" y="239.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (11 samples, 0.21%)</title><rect x="1160.0" y="485" width="2.5" height="15.0" fill="rgb(229,191,5)" rx="2" ry="2" />
<text  x="1163.04" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::clear (1 samples, 0.02%)</title><rect x="753.1" y="421" width="0.2" height="15.0" fill="rgb(232,211,21)" rx="2" ry="2" />
<text  x="756.09" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (221 samples, 4.25%)</title><rect x="987.8" y="357" width="50.1" height="15.0" fill="rgb(214,166,48)" rx="2" ry="2" />
<text  x="990.77" y="367.5" >servi..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="48.8" y="181" width="0.2" height="15.0" fill="rgb(226,68,24)" rx="2" ry="2" />
<text  x="51.81" y="191.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="929.2" y="341" width="0.5" height="15.0" fill="rgb(233,173,1)" rx="2" ry="2" />
<text  x="932.22" y="351.5" ></text>
</g>
<g >
<title>ser::tombstone_view::operator tombstone (1 samples, 0.02%)</title><rect x="1118.1" y="261" width="0.2" height="15.0" fill="rgb(229,96,15)" rx="2" ry="2" />
<text  x="1121.05" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (2 samples, 0.04%)</title><rect x="306.6" y="357" width="0.5" height="15.0" fill="rgb(212,189,40)" rx="2" ry="2" />
<text  x="309.65" y="367.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::abstract_write_response_handler (1 samples, 0.02%)</title><rect x="1126.7" y="181" width="0.2" height="15.0" fill="rgb(217,115,28)" rx="2" ry="2" />
<text  x="1129.68" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (2 samples, 0.04%)</title><rect x="89.9" y="549" width="0.4" height="15.0" fill="rgb(246,149,31)" rx="2" ry="2" />
<text  x="92.89" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="971.9" y="373" width="0.2" height="15.0" fill="rgb(226,211,16)" rx="2" ry="2" />
<text  x="974.88" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="1049.1" y="341" width="1.8" height="15.0" fill="rgb(231,116,26)" rx="2" ry="2" />
<text  x="1052.05" y="351.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="57.0" y="245" width="0.2" height="15.0" fill="rgb(237,187,18)" rx="2" ry="2" />
<text  x="59.98" y="255.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (3 samples, 0.06%)</title><rect x="49.9" y="341" width="0.7" height="15.0" fill="rgb(212,158,50)" rx="2" ry="2" />
<text  x="52.95" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="11.1" y="293" width="0.3" height="15.0" fill="rgb(221,171,20)" rx="2" ry="2" />
<text  x="14.13" y="303.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_id::full_name (1 samples, 0.02%)</title><rect x="114.2" y="341" width="0.2" height="15.0" fill="rgb(247,3,49)" rx="2" ry="2" />
<text  x="117.18" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="972.8" y="389" width="0.2" height="15.0" fill="rgb(248,168,27)" rx="2" ry="2" />
<text  x="975.79" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (12 samples, 0.23%)</title><rect x="405.1" y="229" width="2.8" height="15.0" fill="rgb(213,114,30)" rx="2" ry="2" />
<text  x="408.15" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="799.2" y="277" width="0.2" height="15.0" fill="rgb(229,95,29)" rx="2" ry="2" />
<text  x="802.16" y="287.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%)</title><rect x="86.5" y="213" width="0.2" height="15.0" fill="rgb(238,12,49)" rx="2" ry="2" />
<text  x="89.49" y="223.5" ></text>
</g>
<g >
<title>row_cache::invalidate (1 samples, 0.02%)</title><rect x="702.2" y="469" width="0.3" height="15.0" fill="rgb(219,150,9)" rx="2" ry="2" />
<text  x="705.25" y="479.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (4 samples, 0.08%)</title><rect x="210.4" y="245" width="0.9" height="15.0" fill="rgb(251,189,43)" rx="2" ry="2" />
<text  x="213.41" y="255.5" ></text>
</g>
<g >
<title>cql3::expr::expression::impl::impl (1 samples, 0.02%)</title><rect x="62.7" y="293" width="0.2" height="15.0" fill="rgb(233,75,28)" rx="2" ry="2" />
<text  x="65.66" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::operator* (1 samples, 0.02%)</title><rect x="59.3" y="341" width="0.2" height="15.0" fill="rgb(218,72,15)" rx="2" ry="2" />
<text  x="62.25" y="351.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (39 samples, 0.75%)</title><rect x="1111.7" y="437" width="8.8" height="15.0" fill="rgb(234,81,26)" rx="2" ry="2" />
<text  x="1114.70" y="447.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (1 samples, 0.02%)</title><rect x="12.0" y="613" width="0.3" height="15.0" fill="rgb(237,28,52)" rx="2" ry="2" />
<text  x="15.04" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="907.4" y="405" width="0.3" height="15.0" fill="rgb(239,103,31)" rx="2" ry="2" />
<text  x="910.43" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%)</title><rect x="834.6" y="389" width="0.2" height="15.0" fill="rgb(208,42,44)" rx="2" ry="2" />
<text  x="837.57" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="49.5" y="229" width="0.4" height="15.0" fill="rgb(238,105,39)" rx="2" ry="2" />
<text  x="52.49" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (36 samples, 0.69%)</title><rect x="895.4" y="357" width="8.2" height="15.0" fill="rgb(222,65,27)" rx="2" ry="2" />
<text  x="898.40" y="367.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="853.4" y="405" width="0.2" height="15.0" fill="rgb(236,226,49)" rx="2" ry="2" />
<text  x="856.41" y="415.5" ></text>
</g>
<g >
<title>table::as_mutation_source (10 samples, 0.19%)</title><rect x="643.5" y="469" width="2.2" height="15.0" fill="rgb(253,202,7)" rx="2" ry="2" />
<text  x="646.46" y="479.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_view&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1120.3" y="309" width="0.2" height="15.0" fill="rgb(233,71,2)" rx="2" ry="2" />
<text  x="1123.32" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="632.8" y="469" width="0.2" height="15.0" fill="rgb(205,206,36)" rx="2" ry="2" />
<text  x="635.80" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="68.3" y="389" width="0.3" height="15.0" fill="rgb(251,178,45)" rx="2" ry="2" />
<text  x="71.33" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (1 samples, 0.02%)</title><rect x="662.5" y="517" width="0.3" height="15.0" fill="rgb(220,46,51)" rx="2" ry="2" />
<text  x="665.53" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (3 samples, 0.06%)</title><rect x="39.7" y="261" width="0.7" height="15.0" fill="rgb(208,10,52)" rx="2" ry="2" />
<text  x="42.73" y="271.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (1 samples, 0.02%)</title><rect x="606.5" y="437" width="0.2" height="15.0" fill="rgb(247,91,11)" rx="2" ry="2" />
<text  x="609.47" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::shared_ptr (1 samples, 0.02%)</title><rect x="47.2" y="341" width="0.2" height="15.0" fill="rgb(227,64,30)" rx="2" ry="2" />
<text  x="50.22" y="351.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="912.2" y="389" width="0.2" height="15.0" fill="rgb(219,12,17)" rx="2" ry="2" />
<text  x="915.19" y="399.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::drop_index_statement*, std::default_delete&lt;cql3::statements::drop_index_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="66.3" y="357" width="0.2" height="15.0" fill="rgb(214,196,29)" rx="2" ry="2" />
<text  x="69.29" y="367.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%)</title><rect x="10.7" y="517" width="0.2" height="15.0" fill="rgb(226,40,1)" rx="2" ry="2" />
<text  x="13.68" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mT__199 (1 samples, 0.02%)</title><rect x="34.5" y="293" width="0.2" height="15.0" fill="rgb(226,68,53)" rx="2" ry="2" />
<text  x="37.51" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1084.2" y="421" width="0.3" height="15.0" fill="rgb(205,176,19)" rx="2" ry="2" />
<text  x="1087.23" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (16 samples, 0.31%)</title><rect x="264.9" y="197" width="3.6" height="15.0" fill="rgb(251,89,28)" rx="2" ry="2" />
<text  x="267.88" y="207.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;table&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, table::config, db::commitlog&amp;, compaction_manager&amp;, cell_locker_stats&amp;, cache_tracker&amp;&gt; (1 samples, 0.02%)</title><rect x="114.0" y="501" width="0.2" height="15.0" fill="rgb(231,217,32)" rx="2" ry="2" />
<text  x="116.95" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="1094.0" y="373" width="1.4" height="15.0" fill="rgb(243,184,0)" rx="2" ry="2" />
<text  x="1096.99" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="1030.9" y="309" width="0.7" height="15.0" fill="rgb(240,104,1)" rx="2" ry="2" />
<text  x="1033.90" y="319.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="59.5" y="293" width="0.2" height="15.0" fill="rgb(206,193,6)" rx="2" ry="2" />
<text  x="62.48" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="49.9" y="293" width="0.7" height="15.0" fill="rgb(228,193,45)" rx="2" ry="2" />
<text  x="52.95" y="303.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="82.9" y="453" width="0.2" height="15.0" fill="rgb(246,186,29)" rx="2" ry="2" />
<text  x="85.86" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1127.4" y="373" width="0.2" height="15.0" fill="rgb(223,189,29)" rx="2" ry="2" />
<text  x="1130.36" y="383.5" ></text>
</g>
<g >
<title>__sigsetjmp (1 samples, 0.02%)</title><rect x="20.9" y="533" width="0.2" height="15.0" fill="rgb(229,173,37)" rx="2" ry="2" />
<text  x="23.89" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (2 samples, 0.04%)</title><rect x="278.5" y="277" width="0.5" height="15.0" fill="rgb(253,209,41)" rx="2" ry="2" />
<text  x="281.50" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1 samples, 0.02%)</title><rect x="1163.7" y="549" width="0.2" height="15.0" fill="rgb(243,28,48)" rx="2" ry="2" />
<text  x="1166.67" y="559.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (5 samples, 0.10%)</title><rect x="187.9" y="325" width="1.2" height="15.0" fill="rgb(231,151,26)" rx="2" ry="2" />
<text  x="190.94" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="478.7" y="309" width="0.7" height="15.0" fill="rgb(209,138,48)" rx="2" ry="2" />
<text  x="481.69" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (15 samples, 0.29%)</title><rect x="1123.5" y="261" width="3.4" height="15.0" fill="rgb(221,199,54)" rx="2" ry="2" />
<text  x="1126.50" y="271.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (5 samples, 0.10%)</title><rect x="769.7" y="405" width="1.1" height="15.0" fill="rgb(231,43,44)" rx="2" ry="2" />
<text  x="772.66" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="52.2" y="309" width="2.1" height="15.0" fill="rgb(229,29,31)" rx="2" ry="2" />
<text  x="55.22" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="641.0" y="469" width="0.2" height="15.0" fill="rgb(250,219,41)" rx="2" ry="2" />
<text  x="643.97" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%)</title><rect x="802.3" y="277" width="1.2" height="15.0" fill="rgb(214,173,45)" rx="2" ry="2" />
<text  x="805.34" y="287.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerType (2 samples, 0.04%)</title><rect x="23.8" y="421" width="0.5" height="15.0" fill="rgb(247,153,34)" rx="2" ry="2" />
<text  x="26.84" y="431.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedState (2 samples, 0.04%)</title><rect x="23.8" y="373" width="0.5" height="15.0" fill="rgb(221,32,25)" rx="2" ry="2" />
<text  x="26.84" y="383.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (2 samples, 0.04%)</title><rect x="286.2" y="213" width="0.5" height="15.0" fill="rgb(254,186,27)" rx="2" ry="2" />
<text  x="289.22" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (7 samples, 0.13%)</title><rect x="184.5" y="341" width="1.6" height="15.0" fill="rgb(206,210,0)" rx="2" ry="2" />
<text  x="187.54" y="351.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (1 samples, 0.02%)</title><rect x="427.8" y="261" width="0.3" height="15.0" fill="rgb(231,66,1)" rx="2" ry="2" />
<text  x="430.85" y="271.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::live_cell_view&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1116.5" y="213" width="0.2" height="15.0" fill="rgb(210,67,48)" rx="2" ry="2" />
<text  x="1119.46" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (6 samples, 0.12%)</title><rect x="756.0" y="405" width="1.4" height="15.0" fill="rgb(216,79,37)" rx="2" ry="2" />
<text  x="759.04" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="610.8" y="421" width="0.2" height="15.0" fill="rgb(217,127,4)" rx="2" ry="2" />
<text  x="613.78" y="431.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (39 samples, 0.75%)</title><rect x="485.5" y="341" width="8.8" height="15.0" fill="rgb(216,27,11)" rx="2" ry="2" />
<text  x="488.50" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.12%)</title><rect x="819.6" y="293" width="1.4" height="15.0" fill="rgb(244,1,17)" rx="2" ry="2" />
<text  x="822.59" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (8 samples, 0.15%)</title><rect x="664.8" y="485" width="1.8" height="15.0" fill="rgb(222,19,17)" rx="2" ry="2" />
<text  x="667.80" y="495.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="553.1" y="277" width="0.3" height="15.0" fill="rgb(241,161,13)" rx="2" ry="2" />
<text  x="556.13" y="287.5" ></text>
</g>
<g >
<title>free (6 samples, 0.12%)</title><rect x="437.8" y="229" width="1.4" height="15.0" fill="rgb(226,102,17)" rx="2" ry="2" />
<text  x="440.83" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (3 samples, 0.06%)</title><rect x="567.0" y="453" width="0.7" height="15.0" fill="rgb(249,74,28)" rx="2" ry="2" />
<text  x="569.98" y="463.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="689.1" y="469" width="0.2" height="15.0" fill="rgb(240,19,12)" rx="2" ry="2" />
<text  x="692.08" y="479.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="575.4" y="325" width="0.2" height="15.0" fill="rgb(234,192,47)" rx="2" ry="2" />
<text  x="578.37" y="335.5" ></text>
</g>
<g >
<title>query::querier_base::close (3 samples, 0.06%)</title><rect x="1163.0" y="517" width="0.7" height="15.0" fill="rgb(249,54,31)" rx="2" ry="2" />
<text  x="1165.99" y="527.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql3::untyped_result_set&gt; &gt;, cql3::query_processor::execute_paged_internal (1 samples, 0.02%)</title><rect x="660.0" y="533" width="0.3" height="15.0" fill="rgb(242,159,23)" rx="2" ry="2" />
<text  x="663.03" y="543.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (8 samples, 0.15%)</title><rect x="1075.2" y="341" width="1.8" height="15.0" fill="rgb(216,147,11)" rx="2" ry="2" />
<text  x="1078.15" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (4 samples, 0.08%)</title><rect x="441.9" y="309" width="0.9" height="15.0" fill="rgb(206,21,30)" rx="2" ry="2" />
<text  x="444.92" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::_M_lower_bound (1 samples, 0.02%)</title><rect x="38.1" y="309" width="0.3" height="15.0" fill="rgb(224,21,42)" rx="2" ry="2" />
<text  x="41.14" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (4 samples, 0.08%)</title><rect x="890.4" y="453" width="0.9" height="15.0" fill="rgb(225,103,36)" rx="2" ry="2" />
<text  x="893.40" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (6 samples, 0.12%)</title><rect x="808.5" y="245" width="1.3" height="15.0" fill="rgb(222,41,45)" rx="2" ry="2" />
<text  x="811.47" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (41 samples, 0.79%)</title><rect x="281.2" y="261" width="9.3" height="15.0" fill="rgb(207,216,19)" rx="2" ry="2" />
<text  x="284.23" y="271.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (10 samples, 0.19%)</title><rect x="429.0" y="261" width="2.3" height="15.0" fill="rgb(211,41,2)" rx="2" ry="2" />
<text  x="431.98" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="63.3" y="325" width="0.3" height="15.0" fill="rgb(239,0,54)" rx="2" ry="2" />
<text  x="66.34" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_range&lt;std::__detail::_Node_iterator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, false, true&gt;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="111.7" y="261" width="0.2" height="15.0" fill="rgb(248,197,26)" rx="2" ry="2" />
<text  x="114.68" y="271.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="54.9" y="309" width="0.3" height="15.0" fill="rgb(208,90,21)" rx="2" ry="2" />
<text  x="57.94" y="319.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (3 samples, 0.06%)</title><rect x="113.3" y="469" width="0.7" height="15.0" fill="rgb(229,88,1)" rx="2" ry="2" />
<text  x="116.27" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (1 samples, 0.02%)</title><rect x="1080.4" y="389" width="0.2" height="15.0" fill="rgb(210,147,21)" rx="2" ry="2" />
<text  x="1083.38" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="683.9" y="517" width="0.2" height="15.0" fill="rgb(208,169,37)" rx="2" ry="2" />
<text  x="686.86" y="527.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1116.5" y="245" width="0.2" height="15.0" fill="rgb(231,59,18)" rx="2" ry="2" />
<text  x="1119.46" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="759.0" y="405" width="0.2" height="15.0" fill="rgb(237,72,9)" rx="2" ry="2" />
<text  x="761.99" y="415.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1114.0" y="261" width="0.2" height="15.0" fill="rgb(216,227,14)" rx="2" ry="2" />
<text  x="1116.97" y="271.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::submit_item (1 samples, 0.02%)</title><rect x="701.8" y="453" width="0.2" height="15.0" fill="rgb(223,105,23)" rx="2" ry="2" />
<text  x="704.79" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="702.0" y="373" width="0.2" height="15.0" fill="rgb(228,137,5)" rx="2" ry="2" />
<text  x="705.02" y="383.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="667.7" y="501" width="0.3" height="15.0" fill="rgb(224,5,11)" rx="2" ry="2" />
<text  x="670.75" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;database&gt;::operator= (1 samples, 0.02%)</title><rect x="703.2" y="405" width="0.2" height="15.0" fill="rgb(249,87,17)" rx="2" ry="2" />
<text  x="706.16" y="415.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="52.4" y="181" width="0.3" height="15.0" fill="rgb(223,29,25)" rx="2" ry="2" />
<text  x="55.44" y="191.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="862.5" y="469" width="1.6" height="15.0" fill="rgb(211,166,43)" rx="2" ry="2" />
<text  x="865.49" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1125.3" y="133" width="0.2" height="15.0" fill="rgb(223,75,18)" rx="2" ry="2" />
<text  x="1128.31" y="143.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (34 samples, 0.65%)</title><rect x="851.1" y="469" width="7.8" height="15.0" fill="rgb(247,185,53)" rx="2" ry="2" />
<text  x="854.14" y="479.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (8 samples, 0.15%)</title><rect x="1118.5" y="325" width="1.8" height="15.0" fill="rgb(244,153,6)" rx="2" ry="2" />
<text  x="1121.51" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (3 samples, 0.06%)</title><rect x="45.9" y="309" width="0.6" height="15.0" fill="rgb(234,160,30)" rx="2" ry="2" />
<text  x="48.86" y="319.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (6 samples, 0.12%)</title><rect x="641.4" y="469" width="1.4" height="15.0" fill="rgb(210,139,23)" rx="2" ry="2" />
<text  x="644.42" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="484.6" y="325" width="0.2" height="15.0" fill="rgb(222,65,54)" rx="2" ry="2" />
<text  x="487.59" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="41.5" y="309" width="0.5" height="15.0" fill="rgb(250,217,14)" rx="2" ry="2" />
<text  x="44.55" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (5 samples, 0.10%)</title><rect x="812.1" y="165" width="1.1" height="15.0" fill="rgb(214,56,47)" rx="2" ry="2" />
<text  x="815.10" y="175.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="10.7" y="597" width="0.2" height="15.0" fill="rgb(225,25,48)" rx="2" ry="2" />
<text  x="13.68" y="607.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="520.7" y="245" width="0.2" height="15.0" fill="rgb(205,65,29)" rx="2" ry="2" />
<text  x="523.68" y="255.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (2 samples, 0.04%)</title><rect x="1076.1" y="293" width="0.4" height="15.0" fill="rgb(214,169,42)" rx="2" ry="2" />
<text  x="1079.06" y="303.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;sstables::sstable_directory&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="701.6" y="501" width="0.2" height="15.0" fill="rgb(208,104,39)" rx="2" ry="2" />
<text  x="704.57" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="96.0" y="517" width="0.2" height="15.0" fill="rgb(207,163,53)" rx="2" ry="2" />
<text  x="99.02" y="527.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="217.7" y="261" width="0.2" height="15.0" fill="rgb(244,194,28)" rx="2" ry="2" />
<text  x="220.67" y="271.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (3 samples, 0.06%)</title><rect x="81.3" y="389" width="0.6" height="15.0" fill="rgb(238,197,22)" rx="2" ry="2" />
<text  x="84.27" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (13 samples, 0.25%)</title><rect x="828.0" y="373" width="2.9" height="15.0" fill="rgb(226,184,12)" rx="2" ry="2" />
<text  x="830.99" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="61.3" y="357" width="0.2" height="15.0" fill="rgb(221,108,32)" rx="2" ry="2" />
<text  x="64.29" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (20 samples, 0.38%)</title><rect x="826.4" y="389" width="4.5" height="15.0" fill="rgb(240,209,51)" rx="2" ry="2" />
<text  x="829.40" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="41.5" y="245" width="0.3" height="15.0" fill="rgb(212,15,39)" rx="2" ry="2" />
<text  x="44.55" y="255.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%)</title><rect x="853.6" y="389" width="0.5" height="15.0" fill="rgb(225,67,27)" rx="2" ry="2" />
<text  x="856.64" y="399.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (2 samples, 0.04%)</title><rect x="1132.4" y="533" width="0.4" height="15.0" fill="rgb(237,177,9)" rx="2" ry="2" />
<text  x="1135.35" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (369 samples, 7.10%)</title><rect x="344.3" y="277" width="83.8" height="15.0" fill="rgb(250,225,24)" rx="2" ry="2" />
<text  x="347.32" y="287.5" >flat_muta..</text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_const&lt;std::unordered_map&lt;dht::token, gms::inet_address, std::hash&lt;dht::token&gt;, std::equal_to&lt;dht::token&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt; &gt; &gt;, std::__detail::_Node_const_iterator&lt;std::pair&lt;dht::token const, gms::inet_address&gt;, false, true&gt;, boost::use_default, boost::use_default&gt; &gt; (1 samples, 0.02%)</title><rect x="20.4" y="389" width="0.3" height="15.0" fill="rgb(211,18,26)" rx="2" ry="2" />
<text  x="23.44" y="399.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (27 samples, 0.52%)</title><rect x="742.2" y="453" width="6.1" height="15.0" fill="rgb(224,33,53)" rx="2" ry="2" />
<text  x="745.19" y="463.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="20.0" y="405" width="0.2" height="15.0" fill="rgb(222,198,14)" rx="2" ry="2" />
<text  x="22.99" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="480.7" y="341" width="0.7" height="15.0" fill="rgb(246,15,42)" rx="2" ry="2" />
<text  x="483.73" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (27 samples, 0.52%)</title><rect x="467.6" y="325" width="6.1" height="15.0" fill="rgb(235,115,3)" rx="2" ry="2" />
<text  x="470.56" y="335.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="1054.0" y="309" width="0.3" height="15.0" fill="rgb(249,50,39)" rx="2" ry="2" />
<text  x="1057.05" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (3 samples, 0.06%)</title><rect x="55.4" y="325" width="0.7" height="15.0" fill="rgb(214,108,49)" rx="2" ry="2" />
<text  x="58.39" y="335.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (21 samples, 0.40%)</title><rect x="1050.9" y="357" width="4.7" height="15.0" fill="rgb(219,47,18)" rx="2" ry="2" />
<text  x="1053.87" y="367.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%)</title><rect x="265.3" y="181" width="0.3" height="15.0" fill="rgb(224,107,14)" rx="2" ry="2" />
<text  x="268.34" y="191.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (22 samples, 0.42%)</title><rect x="12.5" y="613" width="5.0" height="15.0" fill="rgb(208,19,23)" rx="2" ry="2" />
<text  x="15.50" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1161.9" y="453" width="0.2" height="15.0" fill="rgb(207,185,18)" rx="2" ry="2" />
<text  x="1164.86" y="463.5" ></text>
</g>
<g >
<title>database::find_uuid (19 samples, 0.37%)</title><rect x="775.8" y="421" width="4.3" height="15.0" fill="rgb(221,180,5)" rx="2" ry="2" />
<text  x="778.79" y="431.5" ></text>
</g>
<g >
<title>query::querier&lt; (3 samples, 0.06%)</title><rect x="127.8" y="485" width="0.7" height="15.0" fill="rgb(217,37,2)" rx="2" ry="2" />
<text  x="130.80" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="325.7" y="357" width="0.2" height="15.0" fill="rgb(223,198,31)" rx="2" ry="2" />
<text  x="328.71" y="367.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="80.6" y="469" width="0.2" height="15.0" fill="rgb(217,175,44)" rx="2" ry="2" />
<text  x="83.59" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt; &gt;::emplace_back&lt;char const  (1 samples, 0.02%)</title><rect x="1123.0" y="277" width="0.3" height="15.0" fill="rgb(214,10,38)" rx="2" ry="2" />
<text  x="1126.04" y="287.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%)</title><rect x="702.2" y="133" width="0.3" height="15.0" fill="rgb(215,7,5)" rx="2" ry="2" />
<text  x="705.25" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (1 samples, 0.02%)</title><rect x="648.5" y="501" width="0.2" height="15.0" fill="rgb(223,108,38)" rx="2" ry="2" />
<text  x="651.46" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="618.0" y="405" width="0.3" height="15.0" fill="rgb(214,93,27)" rx="2" ry="2" />
<text  x="621.04" y="415.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;utils::chunked_vector&lt;ser::deletable_row_view, 131072ul&gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="111.9" y="405" width="0.2" height="15.0" fill="rgb(245,165,29)" rx="2" ry="2" />
<text  x="114.91" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%)</title><rect x="20.0" y="245" width="0.2" height="15.0" fill="rgb(239,212,51)" rx="2" ry="2" />
<text  x="22.99" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (6 samples, 0.12%)</title><rect x="104.9" y="501" width="1.3" height="15.0" fill="rgb(229,192,16)" rx="2" ry="2" />
<text  x="107.87" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="1136.9" y="501" width="0.2" height="15.0" fill="rgb(206,16,42)" rx="2" ry="2" />
<text  x="1139.89" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.17%)</title><rect x="419.0" y="181" width="2.0" height="15.0" fill="rgb(233,4,0)" rx="2" ry="2" />
<text  x="421.99" y="191.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="661.6" y="517" width="0.2" height="15.0" fill="rgb(218,59,34)" rx="2" ry="2" />
<text  x="664.62" y="527.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="1130.3" y="357" width="0.2" height="15.0" fill="rgb(241,197,24)" rx="2" ry="2" />
<text  x="1133.31" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="651.4" y="517" width="0.5" height="15.0" fill="rgb(239,106,53)" rx="2" ry="2" />
<text  x="654.41" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="689.5" y="485" width="0.7" height="15.0" fill="rgb(249,3,13)" rx="2" ry="2" />
<text  x="692.54" y="495.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="510.5" y="325" width="0.4" height="15.0" fill="rgb(244,127,32)" rx="2" ry="2" />
<text  x="513.46" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="685.0" y="517" width="0.5" height="15.0" fill="rgb(236,217,20)" rx="2" ry="2" />
<text  x="688.00" y="527.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%)</title><rect x="58.3" y="85" width="0.5" height="15.0" fill="rgb(243,79,27)" rx="2" ry="2" />
<text  x="61.34" y="95.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="566.7" y="453" width="0.3" height="15.0" fill="rgb(217,132,42)" rx="2" ry="2" />
<text  x="569.75" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="655.9" y="501" width="0.7" height="15.0" fill="rgb(248,93,42)" rx="2" ry="2" />
<text  x="658.95" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="49.3" y="181" width="0.2" height="15.0" fill="rgb(209,229,34)" rx="2" ry="2" />
<text  x="52.27" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation::data, std::default_delete&lt;mutation::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1127.6" y="357" width="0.2" height="15.0" fill="rgb(252,73,35)" rx="2" ry="2" />
<text  x="1130.58" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="902.4" y="341" width="0.3" height="15.0" fill="rgb(227,149,8)" rx="2" ry="2" />
<text  x="905.43" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="702.2" y="165" width="0.3" height="15.0" fill="rgb(223,87,37)" rx="2" ry="2" />
<text  x="705.25" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="205.0" y="293" width="0.2" height="15.0" fill="rgb(210,137,8)" rx="2" ry="2" />
<text  x="207.96" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="63.3" y="309" width="0.3" height="15.0" fill="rgb(205,147,22)" rx="2" ry="2" />
<text  x="66.34" y="319.5" ></text>
</g>
<g >
<title>reader_permit::consume (3 samples, 0.06%)</title><rect x="525.2" y="213" width="0.7" height="15.0" fill="rgb(254,143,51)" rx="2" ry="2" />
<text  x="528.21" y="223.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%)</title><rect x="323.9" y="341" width="0.2" height="15.0" fill="rgb(248,215,54)" rx="2" ry="2" />
<text  x="326.89" y="351.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="58.3" y="133" width="0.5" height="15.0" fill="rgb(238,57,1)" rx="2" ry="2" />
<text  x="61.34" y="143.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (30 samples, 0.58%)</title><rect x="487.5" y="325" width="6.8" height="15.0" fill="rgb(205,27,25)" rx="2" ry="2" />
<text  x="490.54" y="335.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="83.1" y="517" width="0.2" height="15.0" fill="rgb(218,20,1)" rx="2" ry="2" />
<text  x="86.08" y="527.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="869.5" y="453" width="0.7" height="15.0" fill="rgb(206,144,54)" rx="2" ry="2" />
<text  x="872.52" y="463.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (9 samples, 0.17%)</title><rect x="386.5" y="197" width="2.1" height="15.0" fill="rgb(250,34,7)" rx="2" ry="2" />
<text  x="389.54" y="207.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;seastar::measuring_output_stream&gt; (2 samples, 0.04%)</title><rect x="1125.1" y="149" width="0.4" height="15.0" fill="rgb(234,176,13)" rx="2" ry="2" />
<text  x="1128.09" y="159.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="57.0" y="261" width="0.2" height="15.0" fill="rgb(232,188,36)" rx="2" ry="2" />
<text  x="59.98" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (1 samples, 0.02%)</title><rect x="583.8" y="309" width="0.2" height="15.0" fill="rgb(241,11,4)" rx="2" ry="2" />
<text  x="586.77" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="820.3" y="261" width="0.7" height="15.0" fill="rgb(228,173,51)" rx="2" ry="2" />
<text  x="823.27" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (39 samples, 0.75%)</title><rect x="895.2" y="389" width="8.8" height="15.0" fill="rgb(206,138,52)" rx="2" ry="2" />
<text  x="898.17" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="825.7" y="293" width="0.2" height="15.0" fill="rgb(225,143,45)" rx="2" ry="2" />
<text  x="828.72" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (576 samples, 11.08%)</title><rect x="953.3" y="421" width="130.7" height="15.0" fill="rgb(220,88,0)" rx="2" ry="2" />
<text  x="956.27" y="431.5" >service::storage..</text>
</g>
<g >
<title>service::abstract_write_response_handler::response (2 samples, 0.04%)</title><rect x="727.0" y="501" width="0.4" height="15.0" fill="rgb(237,149,1)" rx="2" ry="2" />
<text  x="729.99" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="42.5" y="373" width="0.2" height="15.0" fill="rgb(252,74,4)" rx="2" ry="2" />
<text  x="45.46" y="383.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_890c8f4026fb5657cc774dcb869d5487d413f0d3] (1 samples, 0.02%)</title><rect x="853.2" y="373" width="0.2" height="15.0" fill="rgb(219,78,25)" rx="2" ry="2" />
<text  x="856.18" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (12 samples, 0.23%)</title><rect x="25.9" y="309" width="2.7" height="15.0" fill="rgb(224,129,20)" rx="2" ry="2" />
<text  x="28.89" y="319.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (2 samples, 0.04%)</title><rect x="745.8" y="325" width="0.5" height="15.0" fill="rgb(238,97,13)" rx="2" ry="2" />
<text  x="748.83" y="335.5" ></text>
</g>
<g >
<title>tracing::add_table_name (2 samples, 0.04%)</title><rect x="1109.4" y="453" width="0.5" height="15.0" fill="rgb(230,183,14)" rx="2" ry="2" />
<text  x="1112.43" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="674.6" y="517" width="0.2" height="15.0" fill="rgb(210,71,50)" rx="2" ry="2" />
<text  x="677.56" y="527.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="323.2" y="309" width="0.5" height="15.0" fill="rgb(226,178,42)" rx="2" ry="2" />
<text  x="326.21" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (19 samples, 0.37%)</title><rect x="443.1" y="325" width="4.3" height="15.0" fill="rgb(242,182,35)" rx="2" ry="2" />
<text  x="446.05" y="335.5" ></text>
</g>
<g >
<title>fmt::v7::detail::value&lt;fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt;::format_custom_arg&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt; &gt; (3 samples, 0.06%)</title><rect x="21.1" y="517" width="0.7" height="15.0" fill="rgb(210,195,44)" rx="2" ry="2" />
<text  x="24.12" y="527.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_groups::~metric_groups (1 samples, 0.02%)</title><rect x="703.2" y="341" width="0.2" height="15.0" fill="rgb(232,223,15)" rx="2" ry="2" />
<text  x="706.16" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="439.0" y="213" width="0.2" height="15.0" fill="rgb(250,82,26)" rx="2" ry="2" />
<text  x="441.97" y="223.5" ></text>
</g>
<g >
<title>ser::deserialize_array_helper&lt;false, ser::range_tombstone_view&gt;::doit&lt;seastar::simple_memory_input_stream, std::vector&lt;ser::range_tombstone_view, std::allocator&lt;ser::range_tombstone_view&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1117.4" y="245" width="0.2" height="15.0" fill="rgb(213,79,14)" rx="2" ry="2" />
<text  x="1120.37" y="255.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.08%)</title><rect x="48.4" y="325" width="0.9" height="15.0" fill="rgb(207,21,7)" rx="2" ry="2" />
<text  x="51.36" y="335.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="992.5" y="341" width="0.3" height="15.0" fill="rgb(225,98,31)" rx="2" ry="2" />
<text  x="995.54" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="274.9" y="213" width="0.2" height="15.0" fill="rgb(237,220,47)" rx="2" ry="2" />
<text  x="277.87" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="645.7" y="469" width="0.5" height="15.0" fill="rgb(211,126,19)" rx="2" ry="2" />
<text  x="648.73" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="1023.6" y="261" width="0.5" height="15.0" fill="rgb(247,79,50)" rx="2" ry="2" />
<text  x="1026.63" y="271.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (2 samples, 0.04%)</title><rect x="644.6" y="437" width="0.5" height="15.0" fill="rgb(230,49,34)" rx="2" ry="2" />
<text  x="647.60" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="721.1" y="437" width="0.2" height="15.0" fill="rgb(249,223,53)" rx="2" ry="2" />
<text  x="724.09" y="447.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%)</title><rect x="1026.6" y="261" width="0.2" height="15.0" fill="rgb(250,81,28)" rx="2" ry="2" />
<text  x="1029.58" y="271.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (9 samples, 0.17%)</title><rect x="129.4" y="469" width="2.0" height="15.0" fill="rgb(229,9,40)" rx="2" ry="2" />
<text  x="132.38" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="58.1" y="133" width="0.2" height="15.0" fill="rgb(227,114,30)" rx="2" ry="2" />
<text  x="61.12" y="143.5" ></text>
</g>
<g >
<title>frozen_mutation::mutation_view (1 samples, 0.02%)</title><rect x="1120.3" y="341" width="0.2" height="15.0" fill="rgb(216,33,51)" rx="2" ry="2" />
<text  x="1123.32" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="47.9" y="229" width="0.5" height="15.0" fill="rgb(228,31,29)" rx="2" ry="2" />
<text  x="50.90" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1028.2" y="293" width="0.2" height="15.0" fill="rgb(253,128,6)" rx="2" ry="2" />
<text  x="1031.17" y="303.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="45.2" y="325" width="0.4" height="15.0" fill="rgb(229,191,2)" rx="2" ry="2" />
<text  x="48.18" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;unsigned int&gt;::_Rb_tree_const_iterator (1 samples, 0.02%)</title><rect x="39.1" y="325" width="0.2" height="15.0" fill="rgb(247,64,16)" rx="2" ry="2" />
<text  x="42.05" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="112.8" y="229" width="0.2" height="15.0" fill="rgb(242,6,23)" rx="2" ry="2" />
<text  x="115.82" y="239.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (6 samples, 0.12%)</title><rect x="747.0" y="437" width="1.3" height="15.0" fill="rgb(207,20,27)" rx="2" ry="2" />
<text  x="749.96" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="69.9" y="421" width="0.2" height="15.0" fill="rgb(237,18,54)" rx="2" ry="2" />
<text  x="72.92" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="853.2" y="389" width="0.2" height="15.0" fill="rgb(210,74,29)" rx="2" ry="2" />
<text  x="856.18" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::get_value (1 samples, 0.02%)</title><rect x="673.4" y="517" width="0.3" height="15.0" fill="rgb(208,178,37)" rx="2" ry="2" />
<text  x="676.42" y="527.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="710.4" y="453" width="0.2" height="15.0" fill="rgb(216,130,51)" rx="2" ry="2" />
<text  x="713.42" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="77.6" y="325" width="0.3" height="15.0" fill="rgb(210,74,31)" rx="2" ry="2" />
<text  x="80.64" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="137.8" y="405" width="0.2" height="15.0" fill="rgb(231,130,35)" rx="2" ry="2" />
<text  x="140.78" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="62.0" y="293" width="0.2" height="15.0" fill="rgb(239,94,39)" rx="2" ry="2" />
<text  x="64.98" y="303.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;::pair (1 samples, 0.02%)</title><rect x="111.7" y="213" width="0.2" height="15.0" fill="rgb(207,25,22)" rx="2" ry="2" />
<text  x="114.68" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="49.9" y="245" width="0.7" height="15.0" fill="rgb(231,90,47)" rx="2" ry="2" />
<text  x="52.95" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="864.3" y="485" width="0.5" height="15.0" fill="rgb(220,3,33)" rx="2" ry="2" />
<text  x="867.30" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (7 samples, 0.13%)</title><rect x="1024.5" y="261" width="1.6" height="15.0" fill="rgb(220,152,18)" rx="2" ry="2" />
<text  x="1027.54" y="271.5" ></text>
</g>
<g >
<title>schema::column_at (7 samples, 0.13%)</title><rect x="366.8" y="213" width="1.6" height="15.0" fill="rgb(223,21,51)" rx="2" ry="2" />
<text  x="369.79" y="223.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="808.2" y="245" width="0.3" height="15.0" fill="rgb(232,39,53)" rx="2" ry="2" />
<text  x="811.24" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="648.2" y="501" width="0.3" height="15.0" fill="rgb(244,219,37)" rx="2" ry="2" />
<text  x="651.23" y="511.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (41 samples, 0.79%)</title><rect x="498.7" y="277" width="9.3" height="15.0" fill="rgb(223,82,49)" rx="2" ry="2" />
<text  x="501.66" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt; &gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="63.8" y="341" width="0.2" height="15.0" fill="rgb(254,192,2)" rx="2" ry="2" />
<text  x="66.79" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (18 samples, 0.35%)</title><rect x="691.8" y="517" width="4.1" height="15.0" fill="rgb(217,54,11)" rx="2" ry="2" />
<text  x="694.81" y="527.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (1 samples, 0.02%)</title><rect x="534.3" y="341" width="0.2" height="15.0" fill="rgb(252,0,16)" rx="2" ry="2" />
<text  x="537.29" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_keyspace_statement, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="65.6" y="405" width="0.2" height="15.0" fill="rgb(216,61,35)" rx="2" ry="2" />
<text  x="68.61" y="415.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="47.9" y="309" width="0.5" height="15.0" fill="rgb(236,171,53)" rx="2" ry="2" />
<text  x="50.90" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="446.2" y="293" width="0.3" height="15.0" fill="rgb(231,33,47)" rx="2" ry="2" />
<text  x="449.23" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="57.9" y="261" width="0.2" height="15.0" fill="rgb(222,149,25)" rx="2" ry="2" />
<text  x="60.89" y="271.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%)</title><rect x="268.7" y="181" width="0.7" height="15.0" fill="rgb(211,22,16)" rx="2" ry="2" />
<text  x="271.74" y="191.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (2 samples, 0.04%)</title><rect x="130.5" y="437" width="0.5" height="15.0" fill="rgb(242,6,20)" rx="2" ry="2" />
<text  x="133.52" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump (1 samples, 0.02%)</title><rect x="1189.5" y="629" width="0.3" height="15.0" fill="rgb(225,0,15)" rx="2" ry="2" />
<text  x="1192.55" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%)</title><rect x="951.2" y="389" width="0.3" height="15.0" fill="rgb(212,225,23)" rx="2" ry="2" />
<text  x="954.23" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="795.1" y="309" width="0.4" height="15.0" fill="rgb(212,43,14)" rx="2" ry="2" />
<text  x="798.08" y="319.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (3 samples, 0.06%)</title><rect x="87.2" y="437" width="0.6" height="15.0" fill="rgb(217,222,2)" rx="2" ry="2" />
<text  x="90.17" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="537.9" y="357" width="0.3" height="15.0" fill="rgb(254,160,8)" rx="2" ry="2" />
<text  x="540.92" y="367.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (1 samples, 0.02%)</title><rect x="737.0" y="485" width="0.2" height="15.0" fill="rgb(247,76,15)" rx="2" ry="2" />
<text  x="739.97" y="495.5" ></text>
</g>
<g >
<title>auth::get_permissions (120 samples, 2.31%)</title><rect x="796.2" y="341" width="27.2" height="15.0" fill="rgb(233,104,6)" rx="2" ry="2" />
<text  x="799.21" y="351.5" >a..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="47.7" y="245" width="0.2" height="15.0" fill="rgb(248,197,5)" rx="2" ry="2" />
<text  x="50.68" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="199.7" y="293" width="0.3" height="15.0" fill="rgb(249,125,27)" rx="2" ry="2" />
<text  x="202.74" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="60.8" y="341" width="0.3" height="15.0" fill="rgb(242,156,43)" rx="2" ry="2" />
<text  x="63.84" y="351.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="158.4" y="453" width="0.3" height="15.0" fill="rgb(209,62,24)" rx="2" ry="2" />
<text  x="161.44" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::shared_ptr&lt;seastar::file_impl&gt; &gt;, seastar::future&lt;void&gt; &gt;::run_and_dispose (1 samples, 0.02%)</title><rect x="867.7" y="533" width="0.2" height="15.0" fill="rgb(254,10,22)" rx="2" ry="2" />
<text  x="870.71" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="280.3" y="277" width="0.2" height="15.0" fill="rgb(214,107,31)" rx="2" ry="2" />
<text  x="283.32" y="287.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (6 samples, 0.12%)</title><rect x="585.1" y="325" width="1.4" height="15.0" fill="rgb(229,165,6)" rx="2" ry="2" />
<text  x="588.13" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="702.2" y="181" width="0.3" height="15.0" fill="rgb(229,140,25)" rx="2" ry="2" />
<text  x="705.25" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="785.1" y="405" width="0.4" height="15.0" fill="rgb(246,115,23)" rx="2" ry="2" />
<text  x="788.09" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1073.8" y="309" width="0.4" height="15.0" fill="rgb(244,54,8)" rx="2" ry="2" />
<text  x="1076.79" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (14 samples, 0.27%)</title><rect x="44.3" y="373" width="3.1" height="15.0" fill="rgb(238,90,20)" rx="2" ry="2" />
<text  x="47.27" y="383.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="11.1" y="405" width="0.3" height="15.0" fill="rgb(207,155,3)" rx="2" ry="2" />
<text  x="14.13" y="415.5" ></text>
</g>
<g >
<title>dht::i_partitioner::decorate_key (1 samples, 0.02%)</title><rect x="877.5" y="325" width="0.2" height="15.0" fill="rgb(250,145,14)" rx="2" ry="2" />
<text  x="880.47" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="45.4" y="149" width="0.2" height="15.0" fill="rgb(208,214,14)" rx="2" ry="2" />
<text  x="48.41" y="159.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="759.4" y="373" width="0.3" height="15.0" fill="rgb(229,73,2)" rx="2" ry="2" />
<text  x="762.44" y="383.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerSharedStateType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedStateType (2 samples, 0.04%)</title><rect x="23.8" y="389" width="0.5" height="15.0" fill="rgb(213,21,27)" rx="2" ry="2" />
<text  x="26.84" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="446.0" y="293" width="0.2" height="15.0" fill="rgb(234,75,19)" rx="2" ry="2" />
<text  x="449.00" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.06%)</title><rect x="1074.5" y="325" width="0.7" height="15.0" fill="rgb(221,13,53)" rx="2" ry="2" />
<text  x="1077.47" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="707.9" y="485" width="1.6" height="15.0" fill="rgb(240,103,37)" rx="2" ry="2" />
<text  x="710.92" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (2 samples, 0.04%)</title><rect x="509.3" y="357" width="0.5" height="15.0" fill="rgb(224,46,12)" rx="2" ry="2" />
<text  x="512.33" y="367.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (427 samples, 8.21%)</title><rect x="749.2" y="469" width="96.9" height="15.0" fill="rgb(252,129,38)" rx="2" ry="2" />
<text  x="752.23" y="479.5" >cql3::query..</text>
</g>
<g >
<title>schema_registry::get (18 samples, 0.35%)</title><rect x="968.0" y="389" width="4.1" height="15.0" fill="rgb(223,195,41)" rx="2" ry="2" />
<text  x="971.03" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (2 samples, 0.04%)</title><rect x="793.7" y="341" width="0.5" height="15.0" fill="rgb(208,91,45)" rx="2" ry="2" />
<text  x="796.72" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="838.2" y="325" width="0.5" height="15.0" fill="rgb(243,33,38)" rx="2" ry="2" />
<text  x="841.20" y="335.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%)</title><rect x="578.3" y="341" width="0.3" height="15.0" fill="rgb(234,23,39)" rx="2" ry="2" />
<text  x="581.32" y="351.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare_internal (1 samples, 0.02%)</title><rect x="11.1" y="389" width="0.3" height="15.0" fill="rgb(235,142,52)" rx="2" ry="2" />
<text  x="14.13" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="568.1" y="453" width="0.7" height="15.0" fill="rgb(217,201,23)" rx="2" ry="2" />
<text  x="571.11" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (4 samples, 0.08%)</title><rect x="355.7" y="229" width="0.9" height="15.0" fill="rgb(250,2,3)" rx="2" ry="2" />
<text  x="358.67" y="239.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (3 samples, 0.06%)</title><rect x="111.9" y="485" width="0.7" height="15.0" fill="rgb(229,144,3)" rx="2" ry="2" />
<text  x="114.91" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%)</title><rect x="102.8" y="453" width="0.7" height="15.0" fill="rgb(206,111,14)" rx="2" ry="2" />
<text  x="105.83" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (12 samples, 0.23%)</title><rect x="1094.0" y="405" width="2.7" height="15.0" fill="rgb(243,49,12)" rx="2" ry="2" />
<text  x="1096.99" y="415.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1164.4" y="517" width="0.2" height="15.0" fill="rgb(210,56,9)" rx="2" ry="2" />
<text  x="1167.35" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (5 samples, 0.10%)</title><rect x="263.7" y="197" width="1.2" height="15.0" fill="rgb(227,213,44)" rx="2" ry="2" />
<text  x="266.75" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6 samples, 0.12%)</title><rect x="970.5" y="357" width="1.4" height="15.0" fill="rgb(249,208,38)" rx="2" ry="2" />
<text  x="973.52" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (1 samples, 0.02%)</title><rect x="565.4" y="309" width="0.2" height="15.0" fill="rgb(228,66,7)" rx="2" ry="2" />
<text  x="568.39" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (7 samples, 0.13%)</title><rect x="1121.7" y="293" width="1.6" height="15.0" fill="rgb(233,57,46)" rx="2" ry="2" />
<text  x="1124.68" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="56.1" y="149" width="0.4" height="15.0" fill="rgb(215,189,0)" rx="2" ry="2" />
<text  x="59.07" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (1 samples, 0.02%)</title><rect x="478.2" y="309" width="0.3" height="15.0" fill="rgb(206,150,48)" rx="2" ry="2" />
<text  x="481.23" y="319.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (5 samples, 0.10%)</title><rect x="769.7" y="421" width="1.1" height="15.0" fill="rgb(254,205,46)" rx="2" ry="2" />
<text  x="772.66" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="784.9" y="373" width="0.2" height="15.0" fill="rgb(236,19,18)" rx="2" ry="2" />
<text  x="787.86" y="383.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.13%)</title><rect x="45.0" y="341" width="1.5" height="15.0" fill="rgb(249,48,4)" rx="2" ry="2" />
<text  x="47.95" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="61.1" y="309" width="0.2" height="15.0" fill="rgb(251,211,49)" rx="2" ry="2" />
<text  x="64.07" y="319.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="82.9" y="469" width="0.2" height="15.0" fill="rgb(226,182,13)" rx="2" ry="2" />
<text  x="85.86" y="479.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="927.9" y="373" width="0.4" height="15.0" fill="rgb(227,56,17)" rx="2" ry="2" />
<text  x="930.85" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (10 samples, 0.19%)</title><rect x="815.1" y="181" width="2.2" height="15.0" fill="rgb(216,65,27)" rx="2" ry="2" />
<text  x="818.05" y="191.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (5 samples, 0.10%)</title><rect x="284.4" y="229" width="1.1" height="15.0" fill="rgb(213,104,33)" rx="2" ry="2" />
<text  x="287.40" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="633.7" y="469" width="0.2" height="15.0" fill="rgb(250,110,41)" rx="2" ry="2" />
<text  x="636.70" y="479.5" ></text>
</g>
<g >
<title>db::schema_tables::feed_hash_for_schema_digest (2 samples, 0.04%)</title><rect x="112.1" y="469" width="0.5" height="15.0" fill="rgb(220,173,37)" rx="2" ry="2" />
<text  x="115.14" y="479.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%)</title><rect x="950.1" y="357" width="0.2" height="15.0" fill="rgb(213,204,21)" rx="2" ry="2" />
<text  x="953.10" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1104.0" y="421" width="0.2" height="15.0" fill="rgb(248,221,23)" rx="2" ry="2" />
<text  x="1106.98" y="431.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::create_cdc_desc (1 samples, 0.02%)</title><rect x="112.8" y="469" width="0.2" height="15.0" fill="rgb(216,200,28)" rx="2" ry="2" />
<text  x="115.82" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (1 samples, 0.02%)</title><rect x="676.8" y="485" width="0.3" height="15.0" fill="rgb(249,200,48)" rx="2" ry="2" />
<text  x="679.83" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="518.2" y="293" width="0.2" height="15.0" fill="rgb(224,134,16)" rx="2" ry="2" />
<text  x="521.18" y="303.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%)</title><rect x="55.8" y="245" width="0.3" height="15.0" fill="rgb(254,8,28)" rx="2" ry="2" />
<text  x="58.85" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="73.1" y="405" width="0.2" height="15.0" fill="rgb(220,41,46)" rx="2" ry="2" />
<text  x="76.10" y="415.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="635.5" y="453" width="1.2" height="15.0" fill="rgb(246,100,1)" rx="2" ry="2" />
<text  x="638.52" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="102.6" y="437" width="0.2" height="15.0" fill="rgb(233,146,22)" rx="2" ry="2" />
<text  x="105.60" y="447.5" ></text>
</g>
<g >
<title>sstring_hash::operator (2 samples, 0.04%)</title><rect x="853.6" y="405" width="0.5" height="15.0" fill="rgb(249,216,15)" rx="2" ry="2" />
<text  x="856.64" y="415.5" ></text>
</g>
<g >
<title>tracing::add_table_name (2 samples, 0.04%)</title><rect x="1111.0" y="469" width="0.5" height="15.0" fill="rgb(250,225,27)" rx="2" ry="2" />
<text  x="1114.02" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (34 samples, 0.65%)</title><rect x="1143.5" y="501" width="7.7" height="15.0" fill="rgb(215,219,36)" rx="2" ry="2" />
<text  x="1146.47" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (1 samples, 0.02%)</title><rect x="1109.9" y="453" width="0.2" height="15.0" fill="rgb(245,111,49)" rx="2" ry="2" />
<text  x="1112.88" y="463.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (2 samples, 0.04%)</title><rect x="722.2" y="453" width="0.5" height="15.0" fill="rgb(254,218,27)" rx="2" ry="2" />
<text  x="725.22" y="463.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (3 samples, 0.06%)</title><rect x="1045.9" y="293" width="0.7" height="15.0" fill="rgb(246,47,17)" rx="2" ry="2" />
<text  x="1048.88" y="303.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (12 samples, 0.23%)</title><rect x="476.0" y="325" width="2.7" height="15.0" fill="rgb(244,53,50)" rx="2" ry="2" />
<text  x="478.96" y="335.5" ></text>
</g>
<g >
<title>utils::chunked_vector&lt;ser::deletable_row_view, 131072ul&gt;::emplace_back&lt;ser::deletable_row_view&gt; (1 samples, 0.02%)</title><rect x="111.9" y="373" width="0.2" height="15.0" fill="rgb(232,33,19)" rx="2" ry="2" />
<text  x="114.91" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1164.4" y="389" width="0.2" height="15.0" fill="rgb(213,27,48)" rx="2" ry="2" />
<text  x="1167.35" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="447.4" y="373" width="0.2" height="15.0" fill="rgb(236,15,50)" rx="2" ry="2" />
<text  x="450.36" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%)</title><rect x="48.4" y="309" width="0.2" height="15.0" fill="rgb(233,118,42)" rx="2" ry="2" />
<text  x="51.36" y="319.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="703.2" y="453" width="0.2" height="15.0" fill="rgb(220,95,4)" rx="2" ry="2" />
<text  x="706.16" y="463.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1078.3" y="325" width="0.3" height="15.0" fill="rgb(213,137,48)" rx="2" ry="2" />
<text  x="1081.33" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;sstables::scylla_metadata_type const, boost::variant&lt;sstables::disk_tagged_union_member&lt;sstables::scylla_metadata_type,  (1 samples, 0.02%)</title><rect x="702.0" y="389" width="0.2" height="15.0" fill="rgb(220,73,49)" rx="2" ry="2" />
<text  x="705.02" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="705.0" y="501" width="0.2" height="15.0" fill="rgb(242,59,7)" rx="2" ry="2" />
<text  x="707.97" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (4 samples, 0.08%)</title><rect x="940.6" y="373" width="0.9" height="15.0" fill="rgb(217,205,27)" rx="2" ry="2" />
<text  x="943.56" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%)</title><rect x="702.2" y="149" width="0.3" height="15.0" fill="rgb(230,199,19)" rx="2" ry="2" />
<text  x="705.25" y="159.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (36 samples, 0.69%)</title><rect x="1048.4" y="373" width="8.1" height="15.0" fill="rgb(242,38,40)" rx="2" ry="2" />
<text  x="1051.37" y="383.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="1130.3" y="373" width="0.2" height="15.0" fill="rgb(214,156,52)" rx="2" ry="2" />
<text  x="1133.31" y="383.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="797.3" y="309" width="2.1" height="15.0" fill="rgb(240,0,22)" rx="2" ry="2" />
<text  x="800.35" y="319.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="858.4" y="389" width="0.2" height="15.0" fill="rgb(243,3,3)" rx="2" ry="2" />
<text  x="861.40" y="399.5" ></text>
</g>
<g >
<title>query_mutation (1 samples, 0.02%)</title><rect x="113.5" y="389" width="0.2" height="15.0" fill="rgb(244,159,0)" rx="2" ry="2" />
<text  x="116.50" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (12 samples, 0.23%)</title><rect x="85.6" y="565" width="2.7" height="15.0" fill="rgb(206,103,19)" rx="2" ry="2" />
<text  x="88.58" y="575.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (15 samples, 0.29%)</title><rect x="743.6" y="373" width="3.4" height="15.0" fill="rgb(214,196,9)" rx="2" ry="2" />
<text  x="746.56" y="383.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (2 samples, 0.04%)</title><rect x="50.6" y="341" width="0.5" height="15.0" fill="rgb(220,86,4)" rx="2" ry="2" />
<text  x="53.63" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="52.4" y="229" width="0.3" height="15.0" fill="rgb(205,171,48)" rx="2" ry="2" />
<text  x="55.44" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%)</title><rect x="20.0" y="229" width="0.2" height="15.0" fill="rgb(210,28,34)" rx="2" ry="2" />
<text  x="22.99" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (2 samples, 0.04%)</title><rect x="274.4" y="213" width="0.5" height="15.0" fill="rgb(229,189,14)" rx="2" ry="2" />
<text  x="277.42" y="223.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (2 samples, 0.04%)</title><rect x="964.2" y="389" width="0.4" height="15.0" fill="rgb(209,101,17)" rx="2" ry="2" />
<text  x="967.17" y="399.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="957.8" y="405" width="1.1" height="15.0" fill="rgb(205,133,31)" rx="2" ry="2" />
<text  x="960.81" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="19.8" y="597" width="0.2" height="15.0" fill="rgb(242,201,30)" rx="2" ry="2" />
<text  x="22.76" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (3 samples, 0.06%)</title><rect x="818.9" y="245" width="0.7" height="15.0" fill="rgb(212,125,20)" rx="2" ry="2" />
<text  x="821.91" y="255.5" ></text>
</g>
<g >
<title>database::find_schema (27 samples, 0.52%)</title><rect x="774.0" y="437" width="6.1" height="15.0" fill="rgb(213,207,41)" rx="2" ry="2" />
<text  x="776.97" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::single_column_primary_key_restrictions (2 samples, 0.04%)</title><rect x="77.4" y="373" width="0.5" height="15.0" fill="rgb(210,199,5)" rx="2" ry="2" />
<text  x="80.41" y="383.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="524.3" y="213" width="0.5" height="15.0" fill="rgb(223,170,37)" rx="2" ry="2" />
<text  x="527.31" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;unsigned int&gt;::_Rb_tree_iterator (1 samples, 0.02%)</title><rect x="38.8" y="309" width="0.3" height="15.0" fill="rgb(236,93,7)" rx="2" ry="2" />
<text  x="41.82" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (1 samples, 0.02%)</title><rect x="27.9" y="197" width="0.3" height="15.0" fill="rgb(213,95,25)" rx="2" ry="2" />
<text  x="30.93" y="207.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="67.2" y="373" width="0.2" height="15.0" fill="rgb(219,16,19)" rx="2" ry="2" />
<text  x="70.20" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="194.3" y="277" width="0.2" height="15.0" fill="rgb(251,161,14)" rx="2" ry="2" />
<text  x="197.30" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1104.2" y="437" width="0.2" height="15.0" fill="rgb(253,155,14)" rx="2" ry="2" />
<text  x="1107.21" y="447.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (3 samples, 0.06%)</title><rect x="579.7" y="325" width="0.7" height="15.0" fill="rgb(205,226,20)" rx="2" ry="2" />
<text  x="582.69" y="335.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (7 samples, 0.13%)</title><rect x="875.4" y="341" width="1.6" height="15.0" fill="rgb(247,165,5)" rx="2" ry="2" />
<text  x="878.42" y="351.5" ></text>
</g>
<g >
<title>utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::run_with_ordered_post_op&lt;db::commitlog::segment::cycle (1 samples, 0.02%)</title><rect x="727.7" y="485" width="0.2" height="15.0" fill="rgb(252,77,54)" rx="2" ry="2" />
<text  x="730.67" y="495.5" ></text>
</g>
<g >
<title>mutation_partition::accept (1 samples, 0.02%)</title><rect x="112.1" y="437" width="0.3" height="15.0" fill="rgb(213,211,48)" rx="2" ry="2" />
<text  x="115.14" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="57.4" y="245" width="0.3" height="15.0" fill="rgb(229,195,51)" rx="2" ry="2" />
<text  x="60.44" y="255.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="36.6" y="261" width="0.4" height="15.0" fill="rgb(242,56,26)" rx="2" ry="2" />
<text  x="39.56" y="271.5" ></text>
</g>
<g >
<title>schema_builder::with_column (1 samples, 0.02%)</title><rect x="113.7" y="389" width="0.3" height="15.0" fill="rgb(212,28,17)" rx="2" ry="2" />
<text  x="116.72" y="399.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%)</title><rect x="597.4" y="373" width="1.8" height="15.0" fill="rgb(216,25,11)" rx="2" ry="2" />
<text  x="600.39" y="383.5" ></text>
</g>
<g >
<title>database::find_schema (10 samples, 0.19%)</title><rect x="834.8" y="389" width="2.3" height="15.0" fill="rgb(232,12,42)" rx="2" ry="2" />
<text  x="837.80" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (195 samples, 3.75%)</title><rect x="24.5" y="453" width="44.3" height="15.0" fill="rgb(247,157,44)" rx="2" ry="2" />
<text  x="27.53" y="463.5" >seas..</text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (14 samples, 0.27%)</title><rect x="810.5" y="197" width="3.2" height="15.0" fill="rgb(219,185,49)" rx="2" ry="2" />
<text  x="813.51" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="582.4" y="309" width="0.5" height="15.0" fill="rgb(231,135,0)" rx="2" ry="2" />
<text  x="585.41" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="1110.6" y="469" width="0.4" height="15.0" fill="rgb(244,7,15)" rx="2" ry="2" />
<text  x="1113.56" y="479.5" ></text>
</g>
<g >
<title>distributed_loader::init_system_keyspace (1 samples, 0.02%)</title><rect x="20.0" y="581" width="0.2" height="15.0" fill="rgb(243,205,43)" rx="2" ry="2" />
<text  x="22.99" y="591.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (31 samples, 0.60%)</title><rect x="759.7" y="405" width="7.0" height="15.0" fill="rgb(211,229,17)" rx="2" ry="2" />
<text  x="762.67" y="415.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (1 samples, 0.02%)</title><rect x="1164.4" y="213" width="0.2" height="15.0" fill="rgb(215,125,7)" rx="2" ry="2" />
<text  x="1167.35" y="223.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (1 samples, 0.02%)</title><rect x="20.0" y="341" width="0.2" height="15.0" fill="rgb(213,47,50)" rx="2" ry="2" />
<text  x="22.99" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (37 samples, 0.71%)</title><rect x="29.1" y="309" width="8.4" height="15.0" fill="rgb(227,218,53)" rx="2" ry="2" />
<text  x="32.07" y="319.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (1 samples, 0.02%)</title><rect x="611.9" y="437" width="0.2" height="15.0" fill="rgb(242,85,32)" rx="2" ry="2" />
<text  x="614.92" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%)</title><rect x="45.9" y="213" width="0.6" height="15.0" fill="rgb(220,217,52)" rx="2" ry="2" />
<text  x="48.86" y="223.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (1 samples, 0.02%)</title><rect x="869.3" y="469" width="0.2" height="15.0" fill="rgb(247,213,40)" rx="2" ry="2" />
<text  x="872.30" y="479.5" ></text>
</g>
<g >
<title>seastar::sync_directory (1 samples, 0.02%)</title><rect x="701.8" y="517" width="0.2" height="15.0" fill="rgb(231,83,21)" rx="2" ry="2" />
<text  x="704.79" y="527.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (2 samples, 0.04%)</title><rect x="767.4" y="437" width="0.4" height="15.0" fill="rgb(225,217,6)" rx="2" ry="2" />
<text  x="770.39" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%)</title><rect x="225.6" y="165" width="0.2" height="15.0" fill="rgb(231,95,49)" rx="2" ry="2" />
<text  x="228.62" y="175.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::list_service_level_statement*, std::default_delete&lt;cql3::statements::list_service_level_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="67.0" y="373" width="0.2" height="15.0" fill="rgb(234,76,47)" rx="2" ry="2" />
<text  x="69.97" y="383.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (14 samples, 0.27%)</title><rect x="859.3" y="469" width="3.2" height="15.0" fill="rgb(244,56,30)" rx="2" ry="2" />
<text  x="862.31" y="479.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (6 samples, 0.12%)</title><rect x="343.0" y="261" width="1.3" height="15.0" fill="rgb(221,221,10)" rx="2" ry="2" />
<text  x="345.96" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (3 samples, 0.06%)</title><rect x="660.9" y="517" width="0.7" height="15.0" fill="rgb(230,85,9)" rx="2" ry="2" />
<text  x="663.94" y="527.5" ></text>
</g>
<g >
<title>schema::column_at (4 samples, 0.08%)</title><rect x="260.6" y="133" width="0.9" height="15.0" fill="rgb(233,204,49)" rx="2" ry="2" />
<text  x="263.57" y="143.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="56.1" y="309" width="0.4" height="15.0" fill="rgb(252,16,26)" rx="2" ry="2" />
<text  x="59.07" y="319.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (2 samples, 0.04%)</title><rect x="22.0" y="501" width="0.5" height="15.0" fill="rgb(218,5,53)" rx="2" ry="2" />
<text  x="25.03" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt;::operator++ (1 samples, 0.02%)</title><rect x="51.8" y="325" width="0.2" height="15.0" fill="rgb(231,197,6)" rx="2" ry="2" />
<text  x="54.76" y="335.5" ></text>
</g>
<g >
<title>deletable_row::apply_monotonically (1 samples, 0.02%)</title><rect x="1130.3" y="293" width="0.2" height="15.0" fill="rgb(211,122,45)" rx="2" ry="2" />
<text  x="1133.31" y="303.5" ></text>
</g>
<g >
<title>__strlen_avx2 (4 samples, 0.08%)</title><rect x="84.0" y="645" width="0.9" height="15.0" fill="rgb(254,91,29)" rx="2" ry="2" />
<text  x="86.99" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="39.7" y="341" width="0.7" height="15.0" fill="rgb(212,2,45)" rx="2" ry="2" />
<text  x="42.73" y="351.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%)</title><rect x="20.2" y="341" width="0.2" height="15.0" fill="rgb(224,20,21)" rx="2" ry="2" />
<text  x="23.21" y="351.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (263 samples, 5.06%)</title><rect x="22.5" y="533" width="59.7" height="15.0" fill="rgb(214,188,51)" rx="2" ry="2" />
<text  x="25.48" y="543.5" >cql3::..</text>
</g>
<g >
<title>mutation_querier::consume (202 samples, 3.89%)</title><rect x="356.8" y="229" width="45.9" height="15.0" fill="rgb(246,170,38)" rx="2" ry="2" />
<text  x="359.81" y="239.5" >muta..</text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (64 samples, 1.23%)</title><rect x="752.2" y="437" width="14.5" height="15.0" fill="rgb(244,19,39)" rx="2" ry="2" />
<text  x="755.18" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (84 samples, 1.62%)</title><rect x="572.4" y="405" width="19.1" height="15.0" fill="rgb(206,101,15)" rx="2" ry="2" />
<text  x="575.42" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%)</title><rect x="96.7" y="517" width="0.9" height="15.0" fill="rgb(243,166,23)" rx="2" ry="2" />
<text  x="99.70" y="527.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="719.5" y="469" width="0.2" height="15.0" fill="rgb(229,71,16)" rx="2" ry="2" />
<text  x="722.50" y="479.5" ></text>
</g>
<g >
<title>ser::start_frame&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1119.9" y="261" width="0.2" height="15.0" fill="rgb(223,58,1)" rx="2" ry="2" />
<text  x="1122.87" y="271.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::statements::raw::update_statement*, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="67.2" y="341" width="0.2" height="15.0" fill="rgb(254,175,30)" rx="2" ry="2" />
<text  x="70.20" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="51.3" y="293" width="0.2" height="15.0" fill="rgb(235,8,19)" rx="2" ry="2" />
<text  x="54.31" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="57.7" y="293" width="0.2" height="15.0" fill="rgb(240,152,21)" rx="2" ry="2" />
<text  x="60.66" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::_M_allocate (1 samples, 0.02%)</title><rect x="64.2" y="325" width="0.3" height="15.0" fill="rgb(243,53,26)" rx="2" ry="2" />
<text  x="67.25" y="335.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::to_expression (1 samples, 0.02%)</title><rect x="74.7" y="389" width="0.2" height="15.0" fill="rgb(220,70,41)" rx="2" ry="2" />
<text  x="77.69" y="399.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%)</title><rect x="871.6" y="357" width="0.2" height="15.0" fill="rgb(215,82,28)" rx="2" ry="2" />
<text  x="874.57" y="367.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (6 samples, 0.12%)</title><rect x="30.2" y="293" width="1.4" height="15.0" fill="rgb(254,6,45)" rx="2" ry="2" />
<text  x="33.20" y="303.5" ></text>
</g>
<g >
<title>seastar::task_quota_aio_completion::complete_with (1 samples, 0.02%)</title><rect x="1130.8" y="517" width="0.2" height="15.0" fill="rgb(251,63,40)" rx="2" ry="2" />
<text  x="1133.76" y="527.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="717.5" y="485" width="0.2" height="15.0" fill="rgb(243,94,46)" rx="2" ry="2" />
<text  x="720.46" y="495.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="936.5" y="405" width="0.9" height="15.0" fill="rgb(235,85,36)" rx="2" ry="2" />
<text  x="939.48" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="86.0" y="389" width="0.3" height="15.0" fill="rgb(210,221,34)" rx="2" ry="2" />
<text  x="89.03" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (3 samples, 0.06%)</title><rect x="23.6" y="453" width="0.7" height="15.0" fill="rgb(217,156,30)" rx="2" ry="2" />
<text  x="26.62" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1091.0" y="389" width="0.3" height="15.0" fill="rgb(227,228,25)" rx="2" ry="2" />
<text  x="1094.04" y="399.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (2 samples, 0.04%)</title><rect x="61.7" y="325" width="0.5" height="15.0" fill="rgb(237,159,20)" rx="2" ry="2" />
<text  x="64.75" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::write_stats::write_stats (1 samples, 0.02%)</title><rect x="114.0" y="437" width="0.2" height="15.0" fill="rgb(249,168,46)" rx="2" ry="2" />
<text  x="116.95" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reserve_map_at_back (1 samples, 0.02%)</title><rect x="28.2" y="277" width="0.2" height="15.0" fill="rgb(215,210,31)" rx="2" ry="2" />
<text  x="31.16" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (195 samples, 3.75%)</title><rect x="24.5" y="437" width="44.3" height="15.0" fill="rgb(226,182,7)" rx="2" ry="2" />
<text  x="27.53" y="447.5" >cql3..</text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (505 samples, 9.71%)</title><rect x="332.7" y="373" width="114.7" height="15.0" fill="rgb(243,181,8)" rx="2" ry="2" />
<text  x="335.75" y="383.5" >seastar::futur..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="321.2" y="325" width="0.2" height="15.0" fill="rgb(244,68,24)" rx="2" ry="2" />
<text  x="324.17" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;mutation_fragment*&gt;::take_value (1 samples, 0.02%)</title><rect x="451.7" y="437" width="0.2" height="15.0" fill="rgb(248,121,15)" rx="2" ry="2" />
<text  x="454.68" y="447.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (12 samples, 0.23%)</title><rect x="545.9" y="325" width="2.7" height="15.0" fill="rgb(231,180,16)" rx="2" ry="2" />
<text  x="548.87" y="335.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (1 samples, 0.02%)</title><rect x="700.7" y="293" width="0.2" height="15.0" fill="rgb(211,116,30)" rx="2" ry="2" />
<text  x="703.66" y="303.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="62.2" y="149" width="0.2" height="15.0" fill="rgb(233,216,1)" rx="2" ry="2" />
<text  x="65.20" y="159.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%)</title><rect x="1100.1" y="453" width="0.7" height="15.0" fill="rgb(236,128,19)" rx="2" ry="2" />
<text  x="1103.12" y="463.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (90 samples, 1.73%)</title><rect x="800.5" y="309" width="20.5" height="15.0" fill="rgb(211,204,50)" rx="2" ry="2" />
<text  x="803.53" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (2 samples, 0.04%)</title><rect x="441.2" y="277" width="0.5" height="15.0" fill="rgb(216,91,46)" rx="2" ry="2" />
<text  x="444.24" y="287.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (1 samples, 0.02%)</title><rect x="354.5" y="213" width="0.3" height="15.0" fill="rgb(227,56,47)" rx="2" ry="2" />
<text  x="357.54" y="223.5" ></text>
</g>
<g >
<title>db::schema_tables::diff_table_or_view (3 samples, 0.06%)</title><rect x="111.2" y="501" width="0.7" height="15.0" fill="rgb(240,223,12)" rx="2" ry="2" />
<text  x="114.23" y="511.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (6 samples, 0.12%)</title><rect x="286.2" y="229" width="1.4" height="15.0" fill="rgb(213,176,38)" rx="2" ry="2" />
<text  x="289.22" y="239.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (1 samples, 0.02%)</title><rect x="1022.7" y="245" width="0.3" height="15.0" fill="rgb(231,16,23)" rx="2" ry="2" />
<text  x="1025.73" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="52.2" y="277" width="0.2" height="15.0" fill="rgb(252,54,14)" rx="2" ry="2" />
<text  x="55.22" y="287.5" ></text>
</g>
<g >
<title>__libc_siglongjmp (1 samples, 0.02%)</title><rect x="648.7" y="517" width="0.2" height="15.0" fill="rgb(230,170,10)" rx="2" ry="2" />
<text  x="651.68" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="936.5" y="389" width="0.9" height="15.0" fill="rgb(252,15,52)" rx="2" ry="2" />
<text  x="939.48" y="399.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (2 samples, 0.04%)</title><rect x="866.6" y="501" width="0.4" height="15.0" fill="rgb(213,18,5)" rx="2" ry="2" />
<text  x="869.57" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (47 samples, 0.90%)</title><rect x="1087.9" y="453" width="10.6" height="15.0" fill="rgb(206,68,8)" rx="2" ry="2" />
<text  x="1090.86" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="60.6" y="357" width="0.2" height="15.0" fill="rgb(217,79,16)" rx="2" ry="2" />
<text  x="63.61" y="367.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (5 samples, 0.10%)</title><rect x="1090.1" y="405" width="1.2" height="15.0" fill="rgb(254,14,19)" rx="2" ry="2" />
<text  x="1093.13" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;7ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="57.4" y="85" width="0.3" height="15.0" fill="rgb(254,18,14)" rx="2" ry="2" />
<text  x="60.44" y="95.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="45.4" y="213" width="0.2" height="15.0" fill="rgb(241,156,36)" rx="2" ry="2" />
<text  x="48.41" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="336.2" y="293" width="0.2" height="15.0" fill="rgb(207,91,51)" rx="2" ry="2" />
<text  x="339.15" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="63.3" y="277" width="0.3" height="15.0" fill="rgb(219,185,8)" rx="2" ry="2" />
<text  x="66.34" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="710.9" y="517" width="0.2" height="15.0" fill="rgb(222,196,0)" rx="2" ry="2" />
<text  x="713.87" y="527.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%)</title><rect x="45.9" y="197" width="0.6" height="15.0" fill="rgb(244,92,13)" rx="2" ry="2" />
<text  x="48.86" y="207.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__variant_construct_single&lt;std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;&amp;, cql3::expr::binary_operator const&amp;&gt; (3 samples, 0.06%)</title><rect x="73.8" y="389" width="0.7" height="15.0" fill="rgb(238,125,43)" rx="2" ry="2" />
<text  x="76.78" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (11 samples, 0.21%)</title><rect x="563.1" y="405" width="2.5" height="15.0" fill="rgb(236,146,42)" rx="2" ry="2" />
<text  x="566.12" y="415.5" ></text>
</g>
<g >
<title>service::client_state::has_access (5 samples, 0.10%)</title><rect x="80.8" y="469" width="1.1" height="15.0" fill="rgb(245,137,54)" rx="2" ry="2" />
<text  x="83.81" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="833.7" y="421" width="0.2" height="15.0" fill="rgb(230,72,9)" rx="2" ry="2" />
<text  x="836.66" y="431.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="23.2" y="437" width="0.2" height="15.0" fill="rgb(227,69,50)" rx="2" ry="2" />
<text  x="26.16" y="447.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="702.2" y="389" width="0.3" height="15.0" fill="rgb(233,90,41)" rx="2" ry="2" />
<text  x="705.25" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%)</title><rect x="104.2" y="485" width="0.7" height="15.0" fill="rgb(217,207,40)" rx="2" ry="2" />
<text  x="107.19" y="495.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (6 samples, 0.12%)</title><rect x="1121.7" y="277" width="1.3" height="15.0" fill="rgb(226,186,40)" rx="2" ry="2" />
<text  x="1124.68" y="287.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (63 samples, 1.21%)</title><rect x="25.2" y="373" width="14.3" height="15.0" fill="rgb(234,38,21)" rx="2" ry="2" />
<text  x="28.21" y="383.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (1 samples, 0.02%)</title><rect x="200.0" y="293" width="0.2" height="15.0" fill="rgb(210,47,50)" rx="2" ry="2" />
<text  x="202.97" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (3 samples, 0.06%)</title><rect x="348.9" y="197" width="0.6" height="15.0" fill="rgb(221,112,50)" rx="2" ry="2" />
<text  x="351.86" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_type_statement, std::default_delete&lt;cql3::statements::alter_type_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="67.4" y="421" width="0.2" height="15.0" fill="rgb(207,9,46)" rx="2" ry="2" />
<text  x="70.42" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%)</title><rect x="1139.8" y="517" width="0.7" height="15.0" fill="rgb(238,37,33)" rx="2" ry="2" />
<text  x="1142.84" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="79.5" y="437" width="0.2" height="15.0" fill="rgb(209,8,32)" rx="2" ry="2" />
<text  x="82.45" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1080.1" y="373" width="0.3" height="15.0" fill="rgb(227,139,39)" rx="2" ry="2" />
<text  x="1083.15" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="701.6" y="485" width="0.2" height="15.0" fill="rgb(249,57,33)" rx="2" ry="2" />
<text  x="704.57" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_service_level_statement, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="65.4" y="405" width="0.2" height="15.0" fill="rgb(205,154,34)" rx="2" ry="2" />
<text  x="68.38" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="484.4" y="341" width="0.4" height="15.0" fill="rgb(221,54,47)" rx="2" ry="2" />
<text  x="487.36" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="852.0" y="437" width="2.1" height="15.0" fill="rgb(208,103,43)" rx="2" ry="2" />
<text  x="855.05" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (35 samples, 0.67%)</title><rect x="466.0" y="341" width="7.9" height="15.0" fill="rgb(237,153,21)" rx="2" ry="2" />
<text  x="468.98" y="351.5" ></text>
</g>
<g >
<title>abstract_type::is_collection (1 samples, 0.02%)</title><rect x="69.7" y="453" width="0.2" height="15.0" fill="rgb(217,3,33)" rx="2" ry="2" />
<text  x="72.69" y="463.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (5 samples, 0.10%)</title><rect x="547.0" y="309" width="1.1" height="15.0" fill="rgb(234,31,2)" rx="2" ry="2" />
<text  x="550.00" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="588.8" y="325" width="0.2" height="15.0" fill="rgb(221,20,19)" rx="2" ry="2" />
<text  x="591.77" y="335.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%)</title><rect x="217.4" y="261" width="0.3" height="15.0" fill="rgb(239,96,54)" rx="2" ry="2" />
<text  x="220.45" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (16 samples, 0.31%)</title><rect x="1123.5" y="325" width="3.6" height="15.0" fill="rgb(222,166,43)" rx="2" ry="2" />
<text  x="1126.50" y="335.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (12 samples, 0.23%)</title><rect x="349.5" y="213" width="2.8" height="15.0" fill="rgb(229,209,54)" rx="2" ry="2" />
<text  x="352.54" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (1 samples, 0.02%)</title><rect x="1028.4" y="293" width="0.2" height="15.0" fill="rgb(250,163,5)" rx="2" ry="2" />
<text  x="1031.40" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (5 samples, 0.10%)</title><rect x="940.3" y="389" width="1.2" height="15.0" fill="rgb(217,13,22)" rx="2" ry="2" />
<text  x="943.34" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (7 samples, 0.13%)</title><rect x="1077.0" y="357" width="1.6" height="15.0" fill="rgb(221,66,46)" rx="2" ry="2" />
<text  x="1079.97" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1042.9" y="325" width="0.3" height="15.0" fill="rgb(229,220,4)" rx="2" ry="2" />
<text  x="1045.93" y="335.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (3 samples, 0.06%)</title><rect x="368.4" y="213" width="0.7" height="15.0" fill="rgb(254,145,22)" rx="2" ry="2" />
<text  x="371.38" y="223.5" ></text>
</g>
<g >
<title>hwloc__add_info_nodup.isra.0 (1 samples, 0.02%)</title><rect x="85.1" y="645" width="0.3" height="15.0" fill="rgb(205,40,13)" rx="2" ry="2" />
<text  x="88.13" y="655.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (6 samples, 0.12%)</title><rect x="42.2" y="389" width="1.4" height="15.0" fill="rgb(229,170,47)" rx="2" ry="2" />
<text  x="45.23" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="601.5" y="405" width="0.2" height="15.0" fill="rgb(215,35,24)" rx="2" ry="2" />
<text  x="604.48" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_type (1 samples, 0.02%)</title><rect x="25.2" y="357" width="0.2" height="15.0" fill="rgb(219,125,5)" rx="2" ry="2" />
<text  x="28.21" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%)</title><rect x="54.5" y="325" width="0.4" height="15.0" fill="rgb(228,207,21)" rx="2" ry="2" />
<text  x="57.49" y="335.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::raw::update_statement*, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="64.5" y="309" width="0.2" height="15.0" fill="rgb(227,51,42)" rx="2" ry="2" />
<text  x="67.47" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;partition_key, clustering_key_prefix&gt;, std::pair&lt;std::pair&lt;partition_key, clustering_key_prefix&gt; const, cql3::update_parameters::prefetch_data::row&gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;partition_key, clustering_key_prefix&gt; const, cql3::update_parameters::prefetch_data::row&gt; &gt;, cql3::update_parameters::prefetch_data::key_less, std::allocator&lt;std::pair&lt;std::pair&lt;partition_key, clustering_key_prefix&gt; const, cql3::update_parameters::prefetch_data::row&gt; &gt; &gt;::~_Rb_tree (1 samples, 0.02%)</title><rect x="878.4" y="437" width="0.2" height="15.0" fill="rgb(237,48,49)" rx="2" ry="2" />
<text  x="881.37" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (1 samples, 0.02%)</title><rect x="1189.5" y="661" width="0.3" height="15.0" fill="rgb(234,224,27)" rx="2" ry="2" />
<text  x="1192.55" y="671.5" ></text>
</g>
<g >
<title>schema_builder::with_column_ordered (1 samples, 0.02%)</title><rect x="113.7" y="405" width="0.3" height="15.0" fill="rgb(246,28,12)" rx="2" ry="2" />
<text  x="116.72" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%)</title><rect x="24.8" y="373" width="0.2" height="15.0" fill="rgb(213,99,24)" rx="2" ry="2" />
<text  x="27.75" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_tokText (2 samples, 0.04%)</title><rect x="31.8" y="277" width="0.4" height="15.0" fill="rgb(216,48,12)" rx="2" ry="2" />
<text  x="34.79" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (5 samples, 0.10%)</title><rect x="832.5" y="389" width="1.2" height="15.0" fill="rgb(226,21,49)" rx="2" ry="2" />
<text  x="835.53" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="727.9" y="533" width="0.2" height="15.0" fill="rgb(235,221,10)" rx="2" ry="2" />
<text  x="730.90" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::~_Deque_base (1 samples, 0.02%)</title><rect x="24.3" y="373" width="0.2" height="15.0" fill="rgb(249,191,27)" rx="2" ry="2" />
<text  x="27.30" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (1 samples, 0.02%)</title><rect x="450.5" y="405" width="0.3" height="15.0" fill="rgb(207,3,17)" rx="2" ry="2" />
<text  x="453.54" y="415.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1130.5" y="501" width="0.3" height="15.0" fill="rgb(216,178,50)" rx="2" ry="2" />
<text  x="1133.53" y="511.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (8 samples, 0.15%)</title><rect x="394.5" y="181" width="1.8" height="15.0" fill="rgb(235,170,15)" rx="2" ry="2" />
<text  x="397.48" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (3 samples, 0.06%)</title><rect x="867.9" y="533" width="0.7" height="15.0" fill="rgb(253,210,8)" rx="2" ry="2" />
<text  x="870.93" y="543.5" ></text>
</g>
<g >
<title>cql3::relation::get_operator (1 samples, 0.02%)</title><rect x="73.3" y="437" width="0.3" height="15.0" fill="rgb(245,80,26)" rx="2" ry="2" />
<text  x="76.32" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (29 samples, 0.56%)</title><rect x="760.1" y="389" width="6.6" height="15.0" fill="rgb(233,115,0)" rx="2" ry="2" />
<text  x="763.13" y="399.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (3 samples, 0.06%)</title><rect x="369.1" y="213" width="0.6" height="15.0" fill="rgb(206,124,28)" rx="2" ry="2" />
<text  x="372.06" y="223.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="111.7" y="293" width="0.2" height="15.0" fill="rgb(213,188,8)" rx="2" ry="2" />
<text  x="114.68" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (5 samples, 0.10%)</title><rect x="163.4" y="453" width="1.2" height="15.0" fill="rgb(224,182,23)" rx="2" ry="2" />
<text  x="166.43" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="501.6" y="229" width="0.7" height="15.0" fill="rgb(250,136,23)" rx="2" ry="2" />
<text  x="504.61" y="239.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (1 samples, 0.02%)</title><rect x="1163.4" y="453" width="0.3" height="15.0" fill="rgb(252,152,4)" rx="2" ry="2" />
<text  x="1166.44" y="463.5" ></text>
</g>
<g >
<title>seastar::smp::configure (1 samples, 0.02%)</title><rect x="1165.9" y="581" width="0.3" height="15.0" fill="rgb(236,190,36)" rx="2" ry="2" />
<text  x="1168.94" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (6 samples, 0.12%)</title><rect x="352.7" y="213" width="1.4" height="15.0" fill="rgb(232,61,18)" rx="2" ry="2" />
<text  x="355.72" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="675.2" y="517" width="0.3" height="15.0" fill="rgb(234,56,26)" rx="2" ry="2" />
<text  x="678.24" y="527.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::alter_service_level_statement*, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="65.4" y="357" width="0.2" height="15.0" fill="rgb(210,60,1)" rx="2" ry="2" />
<text  x="68.38" y="367.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="892.9" y="437" width="0.2" height="15.0" fill="rgb(205,126,53)" rx="2" ry="2" />
<text  x="895.90" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="1044.5" y="309" width="0.2" height="15.0" fill="rgb(211,50,27)" rx="2" ry="2" />
<text  x="1047.51" y="319.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="724.9" y="437" width="0.3" height="15.0" fill="rgb(230,100,9)" rx="2" ry="2" />
<text  x="727.95" y="447.5" ></text>
</g>
<g >
<title>auth::resource::resource (6 samples, 0.12%)</title><rect x="783.7" y="405" width="1.4" height="15.0" fill="rgb(247,126,4)" rx="2" ry="2" />
<text  x="786.73" y="415.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="702.2" y="261" width="0.3" height="15.0" fill="rgb(238,81,25)" rx="2" ry="2" />
<text  x="705.25" y="271.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="41.5" y="229" width="0.3" height="15.0" fill="rgb(245,124,4)" rx="2" ry="2" />
<text  x="44.55" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="54.0" y="229" width="0.3" height="15.0" fill="rgb(216,91,46)" rx="2" ry="2" />
<text  x="57.03" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (2 samples, 0.04%)</title><rect x="264.4" y="165" width="0.5" height="15.0" fill="rgb(249,116,8)" rx="2" ry="2" />
<text  x="267.43" y="175.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (2 samples, 0.04%)</title><rect x="405.8" y="213" width="0.5" height="15.0" fill="rgb(254,9,27)" rx="2" ry="2" />
<text  x="408.83" y="223.5" ></text>
</g>
<g >
<title>db::schema_tables::do_merge_schema (3 samples, 0.06%)</title><rect x="111.2" y="533" width="0.7" height="15.0" fill="rgb(243,44,20)" rx="2" ry="2" />
<text  x="114.23" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="1127.8" y="517" width="0.2" height="15.0" fill="rgb(216,116,0)" rx="2" ry="2" />
<text  x="1130.81" y="527.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::standard_role_manager::query_granted (1 samples, 0.02%)</title><rect x="1164.4" y="325" width="0.2" height="15.0" fill="rgb(233,110,51)" rx="2" ry="2" />
<text  x="1167.35" y="335.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (5 samples, 0.10%)</title><rect x="80.8" y="485" width="1.1" height="15.0" fill="rgb(247,9,12)" rx="2" ry="2" />
<text  x="83.81" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="702.2" y="293" width="0.3" height="15.0" fill="rgb(221,41,10)" rx="2" ry="2" />
<text  x="705.25" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::end (1 samples, 0.02%)</title><rect x="38.6" y="309" width="0.2" height="15.0" fill="rgb(246,190,39)" rx="2" ry="2" />
<text  x="41.60" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (1 samples, 0.02%)</title><rect x="27.0" y="229" width="0.2" height="15.0" fill="rgb(240,58,4)" rx="2" ry="2" />
<text  x="30.02" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%)</title><rect x="20.2" y="517" width="0.5" height="15.0" fill="rgb(247,164,36)" rx="2" ry="2" />
<text  x="23.21" y="527.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (2 samples, 0.04%)</title><rect x="566.3" y="437" width="0.4" height="15.0" fill="rgb(241,7,52)" rx="2" ry="2" />
<text  x="569.30" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (5 samples, 0.10%)</title><rect x="861.1" y="405" width="1.2" height="15.0" fill="rgb(240,187,39)" rx="2" ry="2" />
<text  x="864.13" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (5 samples, 0.10%)</title><rect x="1138.0" y="501" width="1.2" height="15.0" fill="rgb(248,173,20)" rx="2" ry="2" />
<text  x="1141.02" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.12%)</title><rect x="25.9" y="293" width="1.3" height="15.0" fill="rgb(252,167,20)" rx="2" ry="2" />
<text  x="28.89" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (2 samples, 0.04%)</title><rect x="673.9" y="517" width="0.4" height="15.0" fill="rgb(230,170,25)" rx="2" ry="2" />
<text  x="676.88" y="527.5" ></text>
</g>
<g >
<title>query_mutation (1 samples, 0.02%)</title><rect x="111.5" y="341" width="0.2" height="15.0" fill="rgb(223,197,7)" rx="2" ry="2" />
<text  x="114.45" y="351.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="700.7" y="453" width="0.2" height="15.0" fill="rgb(222,132,7)" rx="2" ry="2" />
<text  x="703.66" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (1 samples, 0.02%)</title><rect x="101.9" y="453" width="0.2" height="15.0" fill="rgb(231,111,10)" rx="2" ry="2" />
<text  x="104.92" y="463.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (2 samples, 0.04%)</title><rect x="369.7" y="213" width="0.5" height="15.0" fill="rgb(226,116,49)" rx="2" ry="2" />
<text  x="372.74" y="223.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%)</title><rect x="40.4" y="325" width="0.2" height="15.0" fill="rgb(253,99,45)" rx="2" ry="2" />
<text  x="43.41" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_type (1 samples, 0.02%)</title><rect x="30.0" y="293" width="0.2" height="15.0" fill="rgb(237,214,22)" rx="2" ry="2" />
<text  x="32.97" y="303.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1164.4" y="485" width="0.2" height="15.0" fill="rgb(230,133,5)" rx="2" ry="2" />
<text  x="1167.35" y="495.5" ></text>
</g>
<g >
<title>__getcontext (1 samples, 0.02%)</title><rect x="1130.1" y="469" width="0.2" height="15.0" fill="rgb(233,3,41)" rx="2" ry="2" />
<text  x="1133.08" y="479.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (1 samples, 0.02%)</title><rect x="850.9" y="469" width="0.2" height="15.0" fill="rgb(232,72,42)" rx="2" ry="2" />
<text  x="853.91" y="479.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (19 samples, 0.37%)</title><rect x="403.6" y="245" width="4.3" height="15.0" fill="rgb(230,143,43)" rx="2" ry="2" />
<text  x="406.56" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="367.9" y="197" width="0.5" height="15.0" fill="rgb(231,80,46)" rx="2" ry="2" />
<text  x="370.93" y="207.5" ></text>
</g>
<g >
<title>utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::run_with_ordered_post_op&lt;db::commitlog::segment::cycle (1 samples, 0.02%)</title><rect x="727.7" y="437" width="0.2" height="15.0" fill="rgb(252,112,16)" rx="2" ry="2" />
<text  x="730.67" y="447.5" ></text>
</g>
<g >
<title>auth::standard_role_manager::query_granted (1 samples, 0.02%)</title><rect x="1164.4" y="341" width="0.2" height="15.0" fill="rgb(254,130,2)" rx="2" ry="2" />
<text  x="1167.35" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cql3::raw_value_view&gt;::allocate (1 samples, 0.02%)</title><rect x="860.4" y="405" width="0.3" height="15.0" fill="rgb(240,192,45)" rx="2" ry="2" />
<text  x="863.44" y="415.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (1 samples, 0.02%)</title><rect x="111.0" y="517" width="0.2" height="15.0" fill="rgb(216,210,27)" rx="2" ry="2" />
<text  x="114.00" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="40.9" y="245" width="0.2" height="15.0" fill="rgb(237,34,43)" rx="2" ry="2" />
<text  x="43.87" y="255.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (2 samples, 0.04%)</title><rect x="276.9" y="261" width="0.5" height="15.0" fill="rgb(250,19,18)" rx="2" ry="2" />
<text  x="279.91" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (4 samples, 0.08%)</title><rect x="268.5" y="213" width="0.9" height="15.0" fill="rgb(229,133,53)" rx="2" ry="2" />
<text  x="271.52" y="223.5" ></text>
</g>
<g >
<title>seastar::max_concurrent_for_each&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt;, db::system_distributed_keyspace::create_cdc_desc (1 samples, 0.02%)</title><rect x="112.8" y="501" width="0.2" height="15.0" fill="rgb(211,121,42)" rx="2" ry="2" />
<text  x="115.82" y="511.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (1 samples, 0.02%)</title><rect x="615.3" y="437" width="0.2" height="15.0" fill="rgb(236,205,14)" rx="2" ry="2" />
<text  x="618.32" y="447.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="943.3" y="421" width="0.2" height="15.0" fill="rgb(210,48,38)" rx="2" ry="2" />
<text  x="946.29" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%)</title><rect x="85.6" y="405" width="0.2" height="15.0" fill="rgb(233,100,4)" rx="2" ry="2" />
<text  x="88.58" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="51.3" y="341" width="0.2" height="15.0" fill="rgb(224,212,18)" rx="2" ry="2" />
<text  x="54.31" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="849.3" y="469" width="0.5" height="15.0" fill="rgb(238,120,34)" rx="2" ry="2" />
<text  x="852.32" y="479.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (5 samples, 0.10%)</title><rect x="53.1" y="261" width="1.2" height="15.0" fill="rgb(228,6,32)" rx="2" ry="2" />
<text  x="56.12" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="56.1" y="197" width="0.4" height="15.0" fill="rgb(218,218,8)" rx="2" ry="2" />
<text  x="59.07" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (65 samples, 1.25%)</title><rect x="893.8" y="437" width="14.8" height="15.0" fill="rgb(238,156,49)" rx="2" ry="2" />
<text  x="896.81" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (1 samples, 0.02%)</title><rect x="1083.8" y="405" width="0.2" height="15.0" fill="rgb(208,108,43)" rx="2" ry="2" />
<text  x="1086.78" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="803.7" y="293" width="0.2" height="15.0" fill="rgb(239,2,52)" rx="2" ry="2" />
<text  x="806.70" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (1 samples, 0.02%)</title><rect x="701.3" y="453" width="0.3" height="15.0" fill="rgb(221,159,8)" rx="2" ry="2" />
<text  x="704.34" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="74.7" y="341" width="0.2" height="15.0" fill="rgb(222,226,43)" rx="2" ry="2" />
<text  x="77.69" y="351.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="876.6" y="261" width="0.2" height="15.0" fill="rgb(231,22,10)" rx="2" ry="2" />
<text  x="879.56" y="271.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="805.1" y="261" width="0.2" height="15.0" fill="rgb(208,175,24)" rx="2" ry="2" />
<text  x="808.06" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (56 samples, 1.08%)</title><rect x="578.3" y="357" width="12.7" height="15.0" fill="rgb(237,54,51)" rx="2" ry="2" />
<text  x="581.32" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="967.8" y="325" width="0.2" height="15.0" fill="rgb(241,130,12)" rx="2" ry="2" />
<text  x="970.80" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="194.1" y="277" width="0.2" height="15.0" fill="rgb(245,161,31)" rx="2" ry="2" />
<text  x="197.07" y="287.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (2 samples, 0.04%)</title><rect x="250.4" y="133" width="0.4" height="15.0" fill="rgb(239,197,53)" rx="2" ry="2" />
<text  x="253.36" y="143.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%)</title><rect x="712.2" y="501" width="0.3" height="15.0" fill="rgb(232,165,20)" rx="2" ry="2" />
<text  x="715.24" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="903.6" y="357" width="0.4" height="15.0" fill="rgb(211,179,37)" rx="2" ry="2" />
<text  x="906.57" y="367.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1113.7" y="213" width="0.3" height="15.0" fill="rgb(220,47,22)" rx="2" ry="2" />
<text  x="1116.74" y="223.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (15 samples, 0.29%)</title><rect x="399.2" y="197" width="3.5" height="15.0" fill="rgb(230,227,53)" rx="2" ry="2" />
<text  x="402.25" y="207.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (39 samples, 0.75%)</title><rect x="1111.7" y="485" width="8.8" height="15.0" fill="rgb(237,52,25)" rx="2" ry="2" />
<text  x="1114.70" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (1 samples, 0.02%)</title><rect x="101.5" y="469" width="0.2" height="15.0" fill="rgb(215,205,8)" rx="2" ry="2" />
<text  x="104.47" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (4 samples, 0.08%)</title><rect x="1165.0" y="517" width="0.9" height="15.0" fill="rgb(205,110,0)" rx="2" ry="2" />
<text  x="1168.03" y="527.5" ></text>
</g>
<g >
<title>database::find_column_family (7 samples, 0.13%)</title><rect x="1041.6" y="373" width="1.6" height="15.0" fill="rgb(220,60,9)" rx="2" ry="2" />
<text  x="1044.56" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;true, seastar::future&lt;void&gt;, utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::run_with_ordered_post_op&lt;db::commitlog::segment::cycle (1 samples, 0.02%)</title><rect x="727.7" y="469" width="0.2" height="15.0" fill="rgb(241,14,11)" rx="2" ry="2" />
<text  x="730.67" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%)</title><rect x="729.5" y="533" width="0.2" height="15.0" fill="rgb(213,207,5)" rx="2" ry="2" />
<text  x="732.48" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="49.3" y="213" width="0.2" height="15.0" fill="rgb(214,173,6)" rx="2" ry="2" />
<text  x="52.27" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="773.1" y="437" width="0.2" height="15.0" fill="rgb(231,17,10)" rx="2" ry="2" />
<text  x="776.06" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::CqlLexer (1 samples, 0.02%)</title><rect x="68.8" y="469" width="0.2" height="15.0" fill="rgb(240,220,50)" rx="2" ry="2" />
<text  x="71.78" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="56.1" y="213" width="0.4" height="15.0" fill="rgb(243,206,48)" rx="2" ry="2" />
<text  x="59.07" y="223.5" ></text>
</g>
<g >
<title>seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt;::for_each_fragment&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt;::read (1 samples, 0.02%)</title><rect x="660.0" y="357" width="0.3" height="15.0" fill="rgb(229,171,20)" rx="2" ry="2" />
<text  x="663.03" y="367.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (4 samples, 0.08%)</title><rect x="931.5" y="437" width="0.9" height="15.0" fill="rgb(244,150,49)" rx="2" ry="2" />
<text  x="934.48" y="447.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="1189.5" y="645" width="0.3" height="15.0" fill="rgb(220,70,14)" rx="2" ry="2" />
<text  x="1192.55" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="659.4" y="517" width="0.2" height="15.0" fill="rgb(253,214,12)" rx="2" ry="2" />
<text  x="662.35" y="527.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (16 samples, 0.31%)</title><rect x="968.3" y="373" width="3.6" height="15.0" fill="rgb(224,168,21)" rx="2" ry="2" />
<text  x="971.25" y="383.5" ></text>
</g>
<g >
<title>schema_mutations::operator== (1 samples, 0.02%)</title><rect x="111.2" y="469" width="0.3" height="15.0" fill="rgb(223,95,27)" rx="2" ry="2" />
<text  x="114.23" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="449.0" y="389" width="0.2" height="15.0" fill="rgb(226,181,45)" rx="2" ry="2" />
<text  x="451.95" y="399.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (4 samples, 0.08%)</title><rect x="370.7" y="213" width="0.9" height="15.0" fill="rgb(233,131,43)" rx="2" ry="2" />
<text  x="373.65" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="729.7" y="533" width="0.2" height="15.0" fill="rgb(241,77,7)" rx="2" ry="2" />
<text  x="732.71" y="543.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="680.0" y="517" width="0.7" height="15.0" fill="rgb(249,200,18)" rx="2" ry="2" />
<text  x="683.01" y="527.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (11 samples, 0.21%)</title><rect x="563.1" y="421" width="2.5" height="15.0" fill="rgb(224,183,13)" rx="2" ry="2" />
<text  x="566.12" y="431.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%)</title><rect x="364.1" y="213" width="0.2" height="15.0" fill="rgb(223,147,39)" rx="2" ry="2" />
<text  x="367.07" y="223.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (10 samples, 0.19%)</title><rect x="875.4" y="421" width="2.3" height="15.0" fill="rgb(220,174,45)" rx="2" ry="2" />
<text  x="878.42" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="105.8" y="469" width="0.2" height="15.0" fill="rgb(248,49,15)" rx="2" ry="2" />
<text  x="108.78" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%)</title><rect x="952.8" y="421" width="0.2" height="15.0" fill="rgb(233,8,31)" rx="2" ry="2" />
<text  x="955.82" y="431.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (17 samples, 0.33%)</title><rect x="762.8" y="357" width="3.9" height="15.0" fill="rgb(235,20,4)" rx="2" ry="2" />
<text  x="765.85" y="367.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (33 samples, 0.63%)</title><rect x="741.1" y="469" width="7.4" height="15.0" fill="rgb(229,93,41)" rx="2" ry="2" />
<text  x="744.06" y="479.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="631.2" y="469" width="0.2" height="15.0" fill="rgb(233,133,12)" rx="2" ry="2" />
<text  x="634.21" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::wait_all (1 samples, 0.02%)</title><rect x="1121.0" y="373" width="0.2" height="15.0" fill="rgb(254,227,16)" rx="2" ry="2" />
<text  x="1124.00" y="383.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (1 samples, 0.02%)</title><rect x="846.1" y="469" width="0.3" height="15.0" fill="rgb(250,7,49)" rx="2" ry="2" />
<text  x="849.15" y="479.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::InputStream (1 samples, 0.02%)</title><rect x="22.9" y="453" width="0.3" height="15.0" fill="rgb(251,189,18)" rx="2" ry="2" />
<text  x="25.94" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="81.5" y="309" width="0.2" height="15.0" fill="rgb(245,216,41)" rx="2" ry="2" />
<text  x="84.49" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="47.9" y="213" width="0.2" height="15.0" fill="rgb(211,44,28)" rx="2" ry="2" />
<text  x="50.90" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (2 samples, 0.04%)</title><rect x="37.0" y="293" width="0.5" height="15.0" fill="rgb(241,80,53)" rx="2" ry="2" />
<text  x="40.01" y="303.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (1 samples, 0.02%)</title><rect x="1025.9" y="245" width="0.2" height="15.0" fill="rgb(236,155,13)" rx="2" ry="2" />
<text  x="1028.90" y="255.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="668.4" y="485" width="0.5" height="15.0" fill="rgb(251,208,53)" rx="2" ry="2" />
<text  x="671.43" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (454 samples, 8.73%)</title><rect x="454.9" y="405" width="103.0" height="15.0" fill="rgb(247,144,33)" rx="2" ry="2" />
<text  x="457.85" y="415.5" >std::_Functi..</text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="11.1" y="581" width="0.3" height="15.0" fill="rgb(245,124,38)" rx="2" ry="2" />
<text  x="14.13" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (44 samples, 0.85%)</title><rect x="518.6" y="293" width="10.0" height="15.0" fill="rgb(252,7,32)" rx="2" ry="2" />
<text  x="521.63" y="303.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (34 samples, 0.65%)</title><rect x="870.9" y="517" width="7.7" height="15.0" fill="rgb(252,17,5)" rx="2" ry="2" />
<text  x="873.88" y="527.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (9 samples, 0.17%)</title><rect x="47.9" y="357" width="2.0" height="15.0" fill="rgb(230,217,17)" rx="2" ry="2" />
<text  x="50.90" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (1 samples, 0.02%)</title><rect x="720.0" y="437" width="0.2" height="15.0" fill="rgb(248,32,7)" rx="2" ry="2" />
<text  x="722.95" y="447.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::impl::add_registration (1 samples, 0.02%)</title><rect x="114.2" y="357" width="0.2" height="15.0" fill="rgb(220,107,26)" rx="2" ry="2" />
<text  x="117.18" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="864.1" y="469" width="0.2" height="15.0" fill="rgb(232,127,46)" rx="2" ry="2" />
<text  x="867.08" y="479.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (4 samples, 0.08%)</title><rect x="813.9" y="181" width="0.9" height="15.0" fill="rgb(227,198,4)" rx="2" ry="2" />
<text  x="816.92" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (12 samples, 0.23%)</title><rect x="434.4" y="229" width="2.8" height="15.0" fill="rgb(214,194,36)" rx="2" ry="2" />
<text  x="437.43" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%)</title><rect x="32.0" y="245" width="0.2" height="15.0" fill="rgb(217,41,8)" rx="2" ry="2" />
<text  x="35.02" y="255.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (2 samples, 0.04%)</title><rect x="274.0" y="197" width="0.4" height="15.0" fill="rgb(252,180,10)" rx="2" ry="2" />
<text  x="276.96" y="207.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (4 samples, 0.08%)</title><rect x="1028.6" y="293" width="0.9" height="15.0" fill="rgb(211,218,32)" rx="2" ry="2" />
<text  x="1031.63" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%)</title><rect x="432.4" y="261" width="0.2" height="15.0" fill="rgb(229,155,38)" rx="2" ry="2" />
<text  x="435.39" y="271.5" ></text>
</g>
<g >
<title>dht::tri_compare (4 samples, 0.08%)</title><rect x="1060.2" y="277" width="0.9" height="15.0" fill="rgb(214,28,28)" rx="2" ry="2" />
<text  x="1063.18" y="287.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::~BaseRecognizer (1 samples, 0.02%)</title><rect x="24.3" y="421" width="0.2" height="15.0" fill="rgb(211,123,35)" rx="2" ry="2" />
<text  x="27.30" y="431.5" ></text>
</g>
<g >
<title>database::~database (1 samples, 0.02%)</title><rect x="703.2" y="357" width="0.2" height="15.0" fill="rgb(220,70,29)" rx="2" ry="2" />
<text  x="706.16" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="898.6" y="325" width="0.2" height="15.0" fill="rgb(245,24,50)" rx="2" ry="2" />
<text  x="901.57" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="131.4" y="469" width="0.3" height="15.0" fill="rgb(225,99,1)" rx="2" ry="2" />
<text  x="134.43" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::write_response_handler, true&gt;::make&lt;seastar::shared_ptr&lt;service::storage_proxy&gt;, keyspace&amp;, db::consistency_level&amp;, db::write_type&amp;, std::unique_ptr&lt;service::mutation_holder, std::default_delete&lt;service::mutation_holder&gt; &gt;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; const&amp;, utils::small_vector&lt;gms::inet_address, 1ul&gt;, tracing::trace_state_ptr, service::storage_proxy_stats::write_stats&amp;, service_permit&gt; (1 samples, 0.02%)</title><rect x="1126.7" y="213" width="0.2" height="15.0" fill="rgb(232,22,37)" rx="2" ry="2" />
<text  x="1129.68" y="223.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1 samples, 0.02%)</title><rect x="1084.0" y="421" width="0.2" height="15.0" fill="rgb(225,177,6)" rx="2" ry="2" />
<text  x="1087.01" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (58 samples, 1.12%)</title><rect x="47.4" y="373" width="13.2" height="15.0" fill="rgb(233,197,2)" rx="2" ry="2" />
<text  x="50.45" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (28 samples, 0.54%)</title><rect x="241.1" y="117" width="6.3" height="15.0" fill="rgb(217,171,8)" rx="2" ry="2" />
<text  x="244.05" y="127.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%)</title><rect x="45.2" y="293" width="0.2" height="15.0" fill="rgb(224,49,2)" rx="2" ry="2" />
<text  x="48.18" y="303.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (1 samples, 0.02%)</title><rect x="721.1" y="453" width="0.2" height="15.0" fill="rgb(239,30,6)" rx="2" ry="2" />
<text  x="724.09" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="305.1" y="325" width="0.2" height="15.0" fill="rgb(214,158,46)" rx="2" ry="2" />
<text  x="308.06" y="335.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%)</title><rect x="155.0" y="469" width="1.8" height="15.0" fill="rgb(233,4,50)" rx="2" ry="2" />
<text  x="158.03" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="833.4" y="357" width="0.3" height="15.0" fill="rgb(230,121,48)" rx="2" ry="2" />
<text  x="836.44" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="845.0" y="453" width="0.2" height="15.0" fill="rgb(209,49,2)" rx="2" ry="2" />
<text  x="848.01" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="820.7" y="229" width="0.3" height="15.0" fill="rgb(228,168,10)" rx="2" ry="2" />
<text  x="823.73" y="239.5" ></text>
</g>
<g >
<title>query::result::result (2 samples, 0.04%)</title><rect x="629.4" y="453" width="0.4" height="15.0" fill="rgb(210,121,18)" rx="2" ry="2" />
<text  x="632.39" y="463.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%)</title><rect x="1026.1" y="277" width="0.3" height="15.0" fill="rgb(215,119,6)" rx="2" ry="2" />
<text  x="1029.13" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (4 samples, 0.08%)</title><rect x="589.9" y="341" width="0.9" height="15.0" fill="rgb(214,85,42)" rx="2" ry="2" />
<text  x="592.90" y="351.5" ></text>
</g>
<g >
<title>auth::require_record (1 samples, 0.02%)</title><rect x="1164.4" y="293" width="0.2" height="15.0" fill="rgb(211,140,33)" rx="2" ry="2" />
<text  x="1167.35" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (5 samples, 0.10%)</title><rect x="574.5" y="341" width="1.1" height="15.0" fill="rgb(241,219,28)" rx="2" ry="2" />
<text  x="577.47" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="558.1" y="405" width="0.3" height="15.0" fill="rgb(205,98,49)" rx="2" ry="2" />
<text  x="561.12" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="40.9" y="261" width="0.4" height="15.0" fill="rgb(209,0,2)" rx="2" ry="2" />
<text  x="43.87" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (185 samples, 3.56%)</title><rect x="1038.4" y="389" width="42.0" height="15.0" fill="rgb(213,40,3)" rx="2" ry="2" />
<text  x="1041.39" y="399.5" >ser..</text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (1 samples, 0.02%)</title><rect x="305.5" y="357" width="0.2" height="15.0" fill="rgb(244,5,28)" rx="2" ry="2" />
<text  x="308.51" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="109.6" y="517" width="0.5" height="15.0" fill="rgb(251,64,34)" rx="2" ry="2" />
<text  x="112.64" y="527.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (9 samples, 0.17%)</title><rect x="1140.7" y="485" width="2.1" height="15.0" fill="rgb(206,207,43)" rx="2" ry="2" />
<text  x="1143.75" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (3 samples, 0.06%)</title><rect x="197.2" y="277" width="0.7" height="15.0" fill="rgb(212,34,50)" rx="2" ry="2" />
<text  x="200.25" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1091.5" y="405" width="0.2" height="15.0" fill="rgb(211,55,19)" rx="2" ry="2" />
<text  x="1094.50" y="415.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::create_keyspace_statement*, false&gt;::_M_head (1 samples, 0.02%)</title><rect x="65.6" y="341" width="0.2" height="15.0" fill="rgb(237,61,4)" rx="2" ry="2" />
<text  x="68.61" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (4 samples, 0.08%)</title><rect x="252.4" y="149" width="0.9" height="15.0" fill="rgb(213,174,23)" rx="2" ry="2" />
<text  x="255.40" y="159.5" ></text>
</g>
<g >
<title>secondary_index::secondary_index_manager::list_indexes (1 samples, 0.02%)</title><rect x="75.8" y="389" width="0.2" height="15.0" fill="rgb(233,205,53)" rx="2" ry="2" />
<text  x="78.82" y="399.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::optional&lt;auth::resource&gt;&amp;&amp;, service::client_state::check_has_permission (1 samples, 0.02%)</title><rect x="826.2" y="373" width="0.2" height="15.0" fill="rgb(209,159,37)" rx="2" ry="2" />
<text  x="829.17" y="383.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%)</title><rect x="592.4" y="389" width="0.2" height="15.0" fill="rgb(241,52,31)" rx="2" ry="2" />
<text  x="595.40" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (8 samples, 0.15%)</title><rect x="76.0" y="405" width="1.9" height="15.0" fill="rgb(225,191,54)" rx="2" ry="2" />
<text  x="79.05" y="415.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (530 samples, 10.19%)</title><rect x="738.8" y="485" width="120.3" height="15.0" fill="rgb(239,55,22)" rx="2" ry="2" />
<text  x="741.79" y="495.5" >single_node_cq..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_index_statement, std::default_delete&lt;cql3::statements::drop_index_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="66.3" y="389" width="0.2" height="15.0" fill="rgb(235,149,36)" rx="2" ry="2" />
<text  x="69.29" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (10 samples, 0.19%)</title><rect x="582.9" y="325" width="2.2" height="15.0" fill="rgb(254,180,14)" rx="2" ry="2" />
<text  x="585.86" y="335.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (15 samples, 0.29%)</title><rect x="523.2" y="261" width="3.4" height="15.0" fill="rgb(206,20,4)" rx="2" ry="2" />
<text  x="526.17" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (404 samples, 7.77%)</title><rect x="339.6" y="293" width="91.7" height="15.0" fill="rgb(240,83,17)" rx="2" ry="2" />
<text  x="342.56" y="303.5" >mutation_f..</text>
</g>
<g >
<title>cql3::query_options::fill_value_views (11 samples, 0.21%)</title><rect x="859.8" y="437" width="2.5" height="15.0" fill="rgb(207,180,9)" rx="2" ry="2" />
<text  x="862.76" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="302.3" y="325" width="0.3" height="15.0" fill="rgb(211,157,7)" rx="2" ry="2" />
<text  x="305.33" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (2 samples, 0.04%)</title><rect x="725.9" y="517" width="0.4" height="15.0" fill="rgb(251,111,43)" rx="2" ry="2" />
<text  x="728.85" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (627 samples, 12.06%)</title><rect x="945.6" y="453" width="142.3" height="15.0" fill="rgb(221,74,26)" rx="2" ry="2" />
<text  x="948.56" y="463.5" >cql3::statements::..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="47.7" y="277" width="0.2" height="15.0" fill="rgb(217,100,0)" rx="2" ry="2" />
<text  x="50.68" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (1 samples, 0.02%)</title><rect x="952.6" y="421" width="0.2" height="15.0" fill="rgb(236,37,0)" rx="2" ry="2" />
<text  x="955.59" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (1 samples, 0.02%)</title><rect x="1076.7" y="325" width="0.3" height="15.0" fill="rgb(232,195,46)" rx="2" ry="2" />
<text  x="1079.74" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="57.7" y="277" width="0.2" height="15.0" fill="rgb(227,58,40)" rx="2" ry="2" />
<text  x="60.66" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%)</title><rect x="647.5" y="517" width="0.7" height="15.0" fill="rgb(249,87,48)" rx="2" ry="2" />
<text  x="650.55" y="527.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (13 samples, 0.25%)</title><rect x="490.9" y="293" width="3.0" height="15.0" fill="rgb(246,9,33)" rx="2" ry="2" />
<text  x="493.94" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::delete_statement, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::delete_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="68.1" y="421" width="0.2" height="15.0" fill="rgb(227,137,28)" rx="2" ry="2" />
<text  x="71.10" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%)</title><rect x="339.3" y="293" width="0.3" height="15.0" fill="rgb(222,126,27)" rx="2" ry="2" />
<text  x="342.33" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;mutation_partition::accept (1 samples, 0.02%)</title><rect x="112.1" y="405" width="0.3" height="15.0" fill="rgb(253,133,21)" rx="2" ry="2" />
<text  x="115.14" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="57.4" y="213" width="0.3" height="15.0" fill="rgb(243,186,34)" rx="2" ry="2" />
<text  x="60.44" y="223.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt; (1 samples, 0.02%)</title><rect x="1126.0" y="229" width="0.2" height="15.0" fill="rgb(220,140,45)" rx="2" ry="2" />
<text  x="1129.00" y="239.5" ></text>
</g>
<g >
<title>cql3::statements::raw::select_statement::prepare (1 samples, 0.02%)</title><rect x="11.1" y="373" width="0.3" height="15.0" fill="rgb(240,87,35)" rx="2" ry="2" />
<text  x="14.13" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (1 samples, 0.02%)</title><rect x="164.3" y="437" width="0.3" height="15.0" fill="rgb(230,170,34)" rx="2" ry="2" />
<text  x="167.34" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (3 samples, 0.06%)</title><rect x="320.5" y="325" width="0.7" height="15.0" fill="rgb(212,5,46)" rx="2" ry="2" />
<text  x="323.49" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="644.8" y="421" width="0.3" height="15.0" fill="rgb(207,24,18)" rx="2" ry="2" />
<text  x="647.83" y="431.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="1045.2" y="325" width="0.2" height="15.0" fill="rgb(232,19,29)" rx="2" ry="2" />
<text  x="1048.20" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_index_statement, std::default_delete&lt;cql3::statements::drop_index_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.3" y="405" width="0.2" height="15.0" fill="rgb(254,33,28)" rx="2" ry="2" />
<text  x="69.29" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="48.1" y="197" width="0.3" height="15.0" fill="rgb(239,175,29)" rx="2" ry="2" />
<text  x="51.13" y="207.5" ></text>
</g>
<g >
<title>row::row (2 samples, 0.04%)</title><rect x="292.8" y="229" width="0.5" height="15.0" fill="rgb(211,210,25)" rx="2" ry="2" />
<text  x="295.80" y="239.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="439.6" y="277" width="1.0" height="15.0" fill="rgb(241,31,38)" rx="2" ry="2" />
<text  x="442.65" y="287.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="211.8" y="213" width="1.1" height="15.0" fill="rgb(205,143,18)" rx="2" ry="2" />
<text  x="214.77" y="223.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::marker (1 samples, 0.02%)</title><rect x="1116.9" y="261" width="0.2" height="15.0" fill="rgb(247,60,26)" rx="2" ry="2" />
<text  x="1119.92" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (6 samples, 0.12%)</title><rect x="1121.7" y="245" width="1.3" height="15.0" fill="rgb(248,93,42)" rx="2" ry="2" />
<text  x="1124.68" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (8 samples, 0.15%)</title><rect x="932.4" y="437" width="1.8" height="15.0" fill="rgb(250,119,6)" rx="2" ry="2" />
<text  x="935.39" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="48.8" y="261" width="0.2" height="15.0" fill="rgb(205,68,50)" rx="2" ry="2" />
<text  x="51.81" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="27.9" y="213" width="0.3" height="15.0" fill="rgb(213,169,43)" rx="2" ry="2" />
<text  x="30.93" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="88.1" y="517" width="0.2" height="15.0" fill="rgb(249,218,49)" rx="2" ry="2" />
<text  x="91.08" y="527.5" ></text>
</g>
<g >
<title>do_cql_test (278 samples, 5.35%)</title><rect x="20.7" y="581" width="63.1" height="15.0" fill="rgb(233,176,32)" rx="2" ry="2" />
<text  x="23.67" y="591.5" >do_cql..</text>
</g>
<g >
<title>std::__introsort_loop&lt;unsigned int*, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="1114.2" y="245" width="0.4" height="15.0" fill="rgb(223,53,20)" rx="2" ry="2" />
<text  x="1117.19" y="255.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%)</title><rect x="428.5" y="261" width="0.5" height="15.0" fill="rgb(247,7,6)" rx="2" ry="2" />
<text  x="431.53" y="271.5" ></text>
</g>
<g >
<title>validation::validate_column_family (3 samples, 0.06%)</title><rect x="79.9" y="485" width="0.7" height="15.0" fill="rgb(238,209,51)" rx="2" ry="2" />
<text  x="82.91" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="327.3" y="421" width="0.2" height="15.0" fill="rgb(250,51,4)" rx="2" ry="2" />
<text  x="330.30" y="431.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="11.1" y="597" width="0.3" height="15.0" fill="rgb(220,15,32)" rx="2" ry="2" />
<text  x="14.13" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="799.4" y="309" width="0.2" height="15.0" fill="rgb(252,139,37)" rx="2" ry="2" />
<text  x="802.39" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (4 samples, 0.08%)</title><rect x="584.2" y="309" width="0.9" height="15.0" fill="rgb(223,11,15)" rx="2" ry="2" />
<text  x="587.23" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (3 samples, 0.06%)</title><rect x="1165.3" y="485" width="0.6" height="15.0" fill="rgb(252,141,9)" rx="2" ry="2" />
<text  x="1168.26" y="495.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (10 samples, 0.19%)</title><rect x="1123.5" y="245" width="2.3" height="15.0" fill="rgb(229,136,17)" rx="2" ry="2" />
<text  x="1126.50" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="41.1" y="245" width="0.2" height="15.0" fill="rgb(246,213,35)" rx="2" ry="2" />
<text  x="44.09" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="47.9" y="165" width="0.2" height="15.0" fill="rgb(228,124,13)" rx="2" ry="2" />
<text  x="50.90" y="175.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (223 samples, 4.29%)</title><rect x="219.5" y="245" width="50.6" height="15.0" fill="rgb(237,117,32)" rx="2" ry="2" />
<text  x="222.49" y="255.5" >logal..</text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="333.2" y="309" width="0.2" height="15.0" fill="rgb(246,179,39)" rx="2" ry="2" />
<text  x="336.20" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (126 samples, 2.42%)</title><rect x="226.5" y="165" width="28.6" height="15.0" fill="rgb(227,145,48)" rx="2" ry="2" />
<text  x="229.53" y="175.5" >co..</text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (47 samples, 0.90%)</title><rect x="131.9" y="485" width="10.6" height="15.0" fill="rgb(252,165,6)" rx="2" ry="2" />
<text  x="134.88" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (10 samples, 0.19%)</title><rect x="291.4" y="261" width="2.3" height="15.0" fill="rgb(237,208,19)" rx="2" ry="2" />
<text  x="294.44" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (8 samples, 0.15%)</title><rect x="528.6" y="309" width="1.8" height="15.0" fill="rgb(251,217,9)" rx="2" ry="2" />
<text  x="531.62" y="319.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="19.5" y="581" width="0.3" height="15.0" fill="rgb(215,27,29)" rx="2" ry="2" />
<text  x="22.53" y="591.5" ></text>
</g>
<g >
<title>db::hints::manager::too_many_in_flight_hints_for (1 samples, 0.02%)</title><rect x="1126.4" y="165" width="0.3" height="15.0" fill="rgb(233,166,28)" rx="2" ry="2" />
<text  x="1129.45" y="175.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (2 samples, 0.04%)</title><rect x="407.9" y="245" width="0.4" height="15.0" fill="rgb(241,98,44)" rx="2" ry="2" />
<text  x="410.87" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (2 samples, 0.04%)</title><rect x="193.6" y="261" width="0.5" height="15.0" fill="rgb(250,44,51)" rx="2" ry="2" />
<text  x="196.62" y="271.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%)</title><rect x="914.5" y="357" width="0.2" height="15.0" fill="rgb(252,214,50)" rx="2" ry="2" />
<text  x="917.46" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::got_response (2 samples, 0.04%)</title><rect x="727.0" y="517" width="0.4" height="15.0" fill="rgb(242,170,41)" rx="2" ry="2" />
<text  x="729.99" y="527.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_state (1 samples, 0.02%)</title><rect x="24.5" y="421" width="0.3" height="15.0" fill="rgb(215,93,24)" rx="2" ry="2" />
<text  x="27.53" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (2 samples, 0.04%)</title><rect x="881.3" y="501" width="0.5" height="15.0" fill="rgb(232,117,44)" rx="2" ry="2" />
<text  x="884.33" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="41.1" y="229" width="0.2" height="15.0" fill="rgb(254,22,46)" rx="2" ry="2" />
<text  x="44.09" y="239.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (53 samples, 1.02%)</title><rect x="314.1" y="373" width="12.1" height="15.0" fill="rgb(231,163,13)" rx="2" ry="2" />
<text  x="317.14" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (2 samples, 0.04%)</title><rect x="833.2" y="373" width="0.5" height="15.0" fill="rgb(240,192,43)" rx="2" ry="2" />
<text  x="836.21" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (4 samples, 0.08%)</title><rect x="317.1" y="341" width="0.9" height="15.0" fill="rgb(212,194,24)" rx="2" ry="2" />
<text  x="320.09" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="45.6" y="261" width="0.3" height="15.0" fill="rgb(237,138,47)" rx="2" ry="2" />
<text  x="48.63" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;::_Vector_impl_data::_Vector_impl_data (1 samples, 0.02%)</title><rect x="64.9" y="357" width="0.3" height="15.0" fill="rgb(213,108,1)" rx="2" ry="2" />
<text  x="67.93" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_bound_terms (1 samples, 0.02%)</title><rect x="738.6" y="485" width="0.2" height="15.0" fill="rgb(208,106,48)" rx="2" ry="2" />
<text  x="741.56" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (3 samples, 0.06%)</title><rect x="570.4" y="453" width="0.7" height="15.0" fill="rgb(214,109,2)" rx="2" ry="2" />
<text  x="573.38" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (53 samples, 1.02%)</title><rect x="413.5" y="213" width="12.1" height="15.0" fill="rgb(240,35,48)" rx="2" ry="2" />
<text  x="416.55" y="223.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%)</title><rect x="111.0" y="501" width="0.2" height="15.0" fill="rgb(214,219,14)" rx="2" ry="2" />
<text  x="114.00" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (18 samples, 0.35%)</title><rect x="159.1" y="453" width="4.1" height="15.0" fill="rgb(226,90,14)" rx="2" ry="2" />
<text  x="162.12" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (6 samples, 0.12%)</title><rect x="515.5" y="309" width="1.3" height="15.0" fill="rgb(219,21,3)" rx="2" ry="2" />
<text  x="518.45" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="904.5" y="373" width="0.2" height="15.0" fill="rgb(211,133,50)" rx="2" ry="2" />
<text  x="907.48" y="383.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (1 samples, 0.02%)</title><rect x="81.5" y="357" width="0.2" height="15.0" fill="rgb(219,107,10)" rx="2" ry="2" />
<text  x="84.49" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="939.4" y="405" width="0.3" height="15.0" fill="rgb(214,174,7)" rx="2" ry="2" />
<text  x="942.43" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="77.6" y="309" width="0.3" height="15.0" fill="rgb(207,96,29)" rx="2" ry="2" />
<text  x="80.64" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (24 samples, 0.46%)</title><rect x="634.4" y="469" width="5.4" height="15.0" fill="rgb(239,125,50)" rx="2" ry="2" />
<text  x="637.39" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="566.1" y="421" width="0.2" height="15.0" fill="rgb(242,172,17)" rx="2" ry="2" />
<text  x="569.07" y="431.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (1 samples, 0.02%)</title><rect x="84.9" y="645" width="0.2" height="15.0" fill="rgb(215,184,32)" rx="2" ry="2" />
<text  x="87.90" y="655.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (15 samples, 0.29%)</title><rect x="490.5" y="309" width="3.4" height="15.0" fill="rgb(206,79,13)" rx="2" ry="2" />
<text  x="493.49" y="319.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::use_statement, std::default_delete&lt;cql3::statements::raw::use_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="65.2" y="405" width="0.2" height="15.0" fill="rgb(214,156,24)" rx="2" ry="2" />
<text  x="68.15" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="43.8" y="373" width="0.2" height="15.0" fill="rgb(236,77,3)" rx="2" ry="2" />
<text  x="46.82" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="477.1" y="293" width="0.5" height="15.0" fill="rgb(211,83,23)" rx="2" ry="2" />
<text  x="480.10" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="553.4" y="277" width="0.4" height="15.0" fill="rgb(232,177,26)" rx="2" ry="2" />
<text  x="556.36" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restriction, false&gt;::make&lt;column_definition const&amp;&gt; (3 samples, 0.06%)</title><rect x="75.1" y="389" width="0.7" height="15.0" fill="rgb(236,15,34)" rx="2" ry="2" />
<text  x="78.14" y="399.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (20 samples, 0.38%)</title><rect x="706.1" y="501" width="4.5" height="15.0" fill="rgb(218,130,27)" rx="2" ry="2" />
<text  x="709.11" y="511.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (365 samples, 7.02%)</title><rect x="344.5" y="261" width="82.9" height="15.0" fill="rgb(209,138,42)" rx="2" ry="2" />
<text  x="347.55" y="271.5" >compact_m..</text>
</g>
<g >
<title>sstables::sstables_manager::remove (1 samples, 0.02%)</title><rect x="702.0" y="517" width="0.2" height="15.0" fill="rgb(224,157,36)" rx="2" ry="2" />
<text  x="705.02" y="527.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (2 samples, 0.04%)</title><rect x="111.5" y="453" width="0.4" height="15.0" fill="rgb(249,75,2)" rx="2" ry="2" />
<text  x="114.45" y="463.5" ></text>
</g>
<g >
<title>row_cache::invalidate (1 samples, 0.02%)</title><rect x="702.2" y="453" width="0.3" height="15.0" fill="rgb(210,208,17)" rx="2" ry="2" />
<text  x="705.25" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy (1 samples, 0.02%)</title><rect x="26.6" y="229" width="0.2" height="15.0" fill="rgb(206,22,38)" rx="2" ry="2" />
<text  x="29.57" y="239.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (1 samples, 0.02%)</title><rect x="991.9" y="293" width="0.2" height="15.0" fill="rgb(250,176,10)" rx="2" ry="2" />
<text  x="994.86" y="303.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="27.5" y="245" width="0.7" height="15.0" fill="rgb(234,214,33)" rx="2" ry="2" />
<text  x="30.48" y="255.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (4,727 samples, 90.92%)</title><rect x="90.8" y="549" width="1072.9" height="15.0" fill="rgb(230,10,23)" rx="2" ry="2" />
<text  x="93.80" y="559.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (1 samples, 0.02%)</title><rect x="1129.4" y="517" width="0.2" height="15.0" fill="rgb(212,99,32)" rx="2" ry="2" />
<text  x="1132.40" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.62%)</title><rect x="1120.5" y="453" width="7.3" height="15.0" fill="rgb(218,176,48)" rx="2" ry="2" />
<text  x="1123.55" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="1103.1" y="405" width="0.7" height="15.0" fill="rgb(239,66,31)" rx="2" ry="2" />
<text  x="1106.07" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="978.0" y="309" width="0.2" height="15.0" fill="rgb(246,151,34)" rx="2" ry="2" />
<text  x="981.01" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (4 samples, 0.08%)</title><rect x="984.6" y="309" width="0.9" height="15.0" fill="rgb(252,162,24)" rx="2" ry="2" />
<text  x="987.60" y="319.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="1125.8" y="165" width="0.2" height="15.0" fill="rgb(248,106,53)" rx="2" ry="2" />
<text  x="1128.77" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="642.8" y="469" width="0.4" height="15.0" fill="rgb(233,221,34)" rx="2" ry="2" />
<text  x="645.78" y="479.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="822.5" y="309" width="0.7" height="15.0" fill="rgb(243,13,11)" rx="2" ry="2" />
<text  x="825.54" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1146.6" y="405" width="0.3" height="15.0" fill="rgb(213,131,10)" rx="2" ry="2" />
<text  x="1149.65" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (15 samples, 0.29%)</title><rect x="1123.5" y="277" width="3.4" height="15.0" fill="rgb(212,77,2)" rx="2" ry="2" />
<text  x="1126.50" y="287.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.15%)</title><rect x="806.0" y="229" width="1.8" height="15.0" fill="rgb(218,65,48)" rx="2" ry="2" />
<text  x="808.97" y="239.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="40.9" y="213" width="0.2" height="15.0" fill="rgb(244,1,27)" rx="2" ry="2" />
<text  x="43.87" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="673.2" y="469" width="0.2" height="15.0" fill="rgb(218,138,51)" rx="2" ry="2" />
<text  x="676.20" y="479.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="50.2" y="149" width="0.2" height="15.0" fill="rgb(219,21,33)" rx="2" ry="2" />
<text  x="53.17" y="159.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (6 samples, 0.12%)</title><rect x="685.5" y="517" width="1.3" height="15.0" fill="rgb(254,197,27)" rx="2" ry="2" />
<text  x="688.45" y="527.5" ></text>
</g>
<g >
<title>boost::range_detail::default_constructible_unary_fn_wrapper&lt;service::abstract_write_response_handler::max_backlog (1 samples, 0.02%)</title><rect x="727.2" y="437" width="0.2" height="15.0" fill="rgb(218,218,15)" rx="2" ry="2" />
<text  x="730.21" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="840.5" y="373" width="0.2" height="15.0" fill="rgb(210,46,20)" rx="2" ry="2" />
<text  x="843.47" y="383.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="514.1" y="325" width="0.4" height="15.0" fill="rgb(232,5,38)" rx="2" ry="2" />
<text  x="517.09" y="335.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="45.4" y="181" width="0.2" height="15.0" fill="rgb(226,115,5)" rx="2" ry="2" />
<text  x="48.41" y="191.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="89.7" y="549" width="0.2" height="15.0" fill="rgb(242,177,47)" rx="2" ry="2" />
<text  x="92.67" y="559.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_group (1 samples, 0.02%)</title><rect x="872.2" y="293" width="0.3" height="15.0" fill="rgb(221,69,35)" rx="2" ry="2" />
<text  x="875.25" y="303.5" ></text>
</g>
<g >
<title>mutation_partition::append_clustered_row (1 samples, 0.02%)</title><rect x="1116.2" y="245" width="0.3" height="15.0" fill="rgb(251,122,40)" rx="2" ry="2" />
<text  x="1119.24" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="43.8" y="325" width="0.2" height="15.0" fill="rgb(251,170,29)" rx="2" ry="2" />
<text  x="46.82" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1081.7" y="389" width="0.5" height="15.0" fill="rgb(229,188,24)" rx="2" ry="2" />
<text  x="1084.74" y="399.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, partition_key&gt; (2 samples, 0.04%)</title><rect x="1125.1" y="181" width="0.4" height="15.0" fill="rgb(211,118,52)" rx="2" ry="2" />
<text  x="1128.09" y="191.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (2 samples, 0.04%)</title><rect x="80.1" y="437" width="0.5" height="15.0" fill="rgb(239,36,45)" rx="2" ry="2" />
<text  x="83.13" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="77.2" y="373" width="0.2" height="15.0" fill="rgb(249,30,27)" rx="2" ry="2" />
<text  x="80.18" y="383.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (4 samples, 0.08%)</title><rect x="875.9" y="325" width="0.9" height="15.0" fill="rgb(223,36,12)" rx="2" ry="2" />
<text  x="878.88" y="335.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="701.6" y="421" width="0.2" height="15.0" fill="rgb(235,229,11)" rx="2" ry="2" />
<text  x="704.57" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="49.7" y="181" width="0.2" height="15.0" fill="rgb(239,82,31)" rx="2" ry="2" />
<text  x="52.72" y="191.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%)</title><rect x="451.9" y="453" width="0.2" height="15.0" fill="rgb(237,88,7)" rx="2" ry="2" />
<text  x="454.90" y="463.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (17 samples, 0.33%)</title><rect x="562.2" y="437" width="3.9" height="15.0" fill="rgb(234,99,5)" rx="2" ry="2" />
<text  x="565.21" y="447.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;cql3::result_generator::query_result_visitor&lt;cql3::untyped_result_set::visitor&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="660.0" y="437" width="0.3" height="15.0" fill="rgb(229,115,0)" rx="2" ry="2" />
<text  x="663.03" y="447.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="87.8" y="405" width="0.3" height="15.0" fill="rgb(236,124,21)" rx="2" ry="2" />
<text  x="90.85" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (11 samples, 0.21%)</title><rect x="309.6" y="357" width="2.5" height="15.0" fill="rgb(242,120,7)" rx="2" ry="2" />
<text  x="312.60" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (2 samples, 0.04%)</title><rect x="351.8" y="197" width="0.5" height="15.0" fill="rgb(237,114,35)" rx="2" ry="2" />
<text  x="354.81" y="207.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (2 samples, 0.04%)</title><rect x="81.5" y="373" width="0.4" height="15.0" fill="rgb(226,200,6)" rx="2" ry="2" />
<text  x="84.49" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1031.4" y="261" width="0.2" height="15.0" fill="rgb(231,220,16)" rx="2" ry="2" />
<text  x="1034.35" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%)</title><rect x="10.7" y="405" width="0.2" height="15.0" fill="rgb(205,114,27)" rx="2" ry="2" />
<text  x="13.68" y="415.5" ></text>
</g>
<g >
<title>db::schema_tables::compact_for_schema_digest (1 samples, 0.02%)</title><rect x="111.2" y="437" width="0.3" height="15.0" fill="rgb(239,79,16)" rx="2" ry="2" />
<text  x="114.23" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (15 samples, 0.29%)</title><rect x="938.1" y="421" width="3.4" height="15.0" fill="rgb(226,185,18)" rx="2" ry="2" />
<text  x="941.07" y="431.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (2 samples, 0.04%)</title><rect x="1113.5" y="261" width="0.5" height="15.0" fill="rgb(209,156,48)" rx="2" ry="2" />
<text  x="1116.51" y="271.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (1 samples, 0.02%)</title><rect x="467.3" y="325" width="0.3" height="15.0" fill="rgb(242,55,10)" rx="2" ry="2" />
<text  x="470.34" y="335.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;cql3::result_generator::query_result_visitor&lt;cql3::untyped_result_set::visitor&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="660.0" y="453" width="0.3" height="15.0" fill="rgb(253,28,2)" rx="2" ry="2" />
<text  x="663.03" y="463.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (1 samples, 0.02%)</title><rect x="875.7" y="293" width="0.2" height="15.0" fill="rgb(224,41,10)" rx="2" ry="2" />
<text  x="878.65" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="779.6" y="357" width="0.3" height="15.0" fill="rgb(233,140,15)" rx="2" ry="2" />
<text  x="782.64" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (6 samples, 0.12%)</title><rect x="580.4" y="325" width="1.3" height="15.0" fill="rgb(215,215,6)" rx="2" ry="2" />
<text  x="583.37" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="47.0" y="293" width="0.2" height="15.0" fill="rgb(216,189,53)" rx="2" ry="2" />
<text  x="50.00" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;sstables::shareable_components&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="702.0" y="485" width="0.2" height="15.0" fill="rgb(246,158,26)" rx="2" ry="2" />
<text  x="705.02" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="1031.1" y="277" width="0.5" height="15.0" fill="rgb(214,217,1)" rx="2" ry="2" />
<text  x="1034.12" y="287.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="81.5" y="341" width="0.2" height="15.0" fill="rgb(222,9,31)" rx="2" ry="2" />
<text  x="84.49" y="351.5" ></text>
</g>
<g >
<title>__start_context (2 samples, 0.04%)</title><rect x="20.2" y="549" width="0.5" height="15.0" fill="rgb(251,223,23)" rx="2" ry="2" />
<text  x="23.21" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="47.7" y="229" width="0.2" height="15.0" fill="rgb(227,13,28)" rx="2" ry="2" />
<text  x="50.68" y="239.5" ></text>
</g>
<g >
<title>std::__find_if&lt;char*, __gnu_cxx::__ops::_Iter_pred&lt;boost::algorithm::detail::is_any_ofF&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="703.2" y="197" width="0.2" height="15.0" fill="rgb(251,41,25)" rx="2" ry="2" />
<text  x="706.16" y="207.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (2 samples, 0.04%)</title><rect x="262.8" y="181" width="0.5" height="15.0" fill="rgb(252,50,33)" rx="2" ry="2" />
<text  x="265.84" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (1 samples, 0.02%)</title><rect x="1073.6" y="309" width="0.2" height="15.0" fill="rgb(241,39,28)" rx="2" ry="2" />
<text  x="1076.57" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (7 samples, 0.13%)</title><rect x="776.7" y="373" width="1.6" height="15.0" fill="rgb(248,154,32)" rx="2" ry="2" />
<text  x="779.69" y="383.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (3 samples, 0.06%)</title><rect x="924.0" y="405" width="0.7" height="15.0" fill="rgb(237,101,16)" rx="2" ry="2" />
<text  x="926.99" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="702.2" y="213" width="0.3" height="15.0" fill="rgb(228,5,10)" rx="2" ry="2" />
<text  x="705.25" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (3 samples, 0.06%)</title><rect x="27.5" y="229" width="0.7" height="15.0" fill="rgb(221,135,53)" rx="2" ry="2" />
<text  x="30.48" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1096.3" y="373" width="0.4" height="15.0" fill="rgb(210,114,2)" rx="2" ry="2" />
<text  x="1099.26" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="906.3" y="341" width="0.7" height="15.0" fill="rgb(219,13,43)" rx="2" ry="2" />
<text  x="909.29" y="351.5" ></text>
</g>
<g >
<title>table::stop (1 samples, 0.02%)</title><rect x="702.2" y="501" width="0.3" height="15.0" fill="rgb(227,156,11)" rx="2" ry="2" />
<text  x="705.25" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (3 samples, 0.06%)</title><rect x="210.4" y="229" width="0.7" height="15.0" fill="rgb(232,97,29)" rx="2" ry="2" />
<text  x="213.41" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (53 samples, 1.02%)</title><rect x="314.1" y="389" width="12.1" height="15.0" fill="rgb(228,209,24)" rx="2" ry="2" />
<text  x="317.14" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%)</title><rect x="1079.2" y="373" width="0.5" height="15.0" fill="rgb(245,208,37)" rx="2" ry="2" />
<text  x="1082.24" y="383.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (2 samples, 0.04%)</title><rect x="216.1" y="245" width="0.4" height="15.0" fill="rgb(234,97,20)" rx="2" ry="2" />
<text  x="219.09" y="255.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%)</title><rect x="217.0" y="261" width="0.2" height="15.0" fill="rgb(233,212,38)" rx="2" ry="2" />
<text  x="219.99" y="271.5" ></text>
</g>
<g >
<title>row::compact_and_expire (1 samples, 0.02%)</title><rect x="113.5" y="341" width="0.2" height="15.0" fill="rgb(226,171,24)" rx="2" ry="2" />
<text  x="116.50" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (4 samples, 0.08%)</title><rect x="741.3" y="453" width="0.9" height="15.0" fill="rgb(230,137,32)" rx="2" ry="2" />
<text  x="744.29" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,005 samples, 19.33%)</title><rect x="883.4" y="485" width="228.1" height="15.0" fill="rgb(248,97,54)" rx="2" ry="2" />
<text  x="886.37" y="495.5" >seastar::noncopyable_function&lt;..</text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (15 samples, 0.29%)</title><rect x="656.6" y="533" width="3.4" height="15.0" fill="rgb(223,110,41)" rx="2" ry="2" />
<text  x="659.63" y="543.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="875.0" y="341" width="0.2" height="15.0" fill="rgb(208,226,28)" rx="2" ry="2" />
<text  x="877.97" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (77 samples, 1.48%)</title><rect x="573.8" y="373" width="17.5" height="15.0" fill="rgb(234,15,32)" rx="2" ry="2" />
<text  x="576.79" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (4 samples, 0.08%)</title><rect x="708.6" y="469" width="0.9" height="15.0" fill="rgb(241,6,11)" rx="2" ry="2" />
<text  x="711.60" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (46 samples, 0.88%)</title><rect x="315.3" y="357" width="10.4" height="15.0" fill="rgb(212,90,5)" rx="2" ry="2" />
<text  x="318.27" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (1 samples, 0.02%)</title><rect x="119.2" y="517" width="0.2" height="15.0" fill="rgb(215,181,32)" rx="2" ry="2" />
<text  x="122.17" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::untyped_result_set&gt;::shared_ptr_count_for&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="660.0" y="501" width="0.3" height="15.0" fill="rgb(206,181,45)" rx="2" ry="2" />
<text  x="663.03" y="511.5" ></text>
</g>
<g >
<title>seastar::gate::leave (2 samples, 0.04%)</title><rect x="131.0" y="453" width="0.4" height="15.0" fill="rgb(253,170,14)" rx="2" ry="2" />
<text  x="133.97" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="162.5" y="421" width="0.7" height="15.0" fill="rgb(205,53,31)" rx="2" ry="2" />
<text  x="165.52" y="431.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1076.3" y="277" width="0.2" height="15.0" fill="rgb(228,15,12)" rx="2" ry="2" />
<text  x="1079.29" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (12 samples, 0.23%)</title><rect x="975.5" y="341" width="2.7" height="15.0" fill="rgb(244,2,50)" rx="2" ry="2" />
<text  x="978.52" y="351.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;, &amp;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;::_link&gt;::expire (2 samples, 0.04%)</title><rect x="1165.5" y="469" width="0.4" height="15.0" fill="rgb(239,222,50)" rx="2" ry="2" />
<text  x="1168.49" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (12 samples, 0.23%)</title><rect x="677.1" y="485" width="2.7" height="15.0" fill="rgb(231,115,19)" rx="2" ry="2" />
<text  x="680.06" y="495.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%)</title><rect x="127.3" y="485" width="0.5" height="15.0" fill="rgb(208,93,3)" rx="2" ry="2" />
<text  x="130.34" y="495.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (1 samples, 0.02%)</title><rect x="81.7" y="357" width="0.2" height="15.0" fill="rgb(235,87,14)" rx="2" ry="2" />
<text  x="84.72" y="367.5" ></text>
</g>
<g >
<title>[unknown] (343 samples, 6.60%)</title><rect x="10.7" y="661" width="77.8" height="15.0" fill="rgb(233,199,30)" rx="2" ry="2" />
<text  x="13.68" y="671.5" >[unknown]</text>
</g>
<g >
<title>mutation_fragment::destroy_data (37 samples, 0.71%)</title><rect x="431.3" y="293" width="8.3" height="15.0" fill="rgb(235,177,0)" rx="2" ry="2" />
<text  x="434.25" y="303.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (1 samples, 0.02%)</title><rect x="1077.4" y="341" width="0.3" height="15.0" fill="rgb(212,17,38)" rx="2" ry="2" />
<text  x="1080.42" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (1 samples, 0.02%)</title><rect x="302.1" y="309" width="0.2" height="15.0" fill="rgb(219,217,37)" rx="2" ry="2" />
<text  x="305.11" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="304.1" y="341" width="0.5" height="15.0" fill="rgb(240,145,52)" rx="2" ry="2" />
<text  x="307.15" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%)</title><rect x="568.8" y="453" width="0.2" height="15.0" fill="rgb(225,198,0)" rx="2" ry="2" />
<text  x="571.79" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="850.2" y="469" width="0.3" height="15.0" fill="rgb(206,118,34)" rx="2" ry="2" />
<text  x="853.23" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (38 samples, 0.73%)</title><rect x="1111.9" y="389" width="8.6" height="15.0" fill="rgb(224,148,5)" rx="2" ry="2" />
<text  x="1114.92" y="399.5" ></text>
</g>
<g >
<title>database::find_column_family (10 samples, 0.19%)</title><rect x="834.8" y="373" width="2.3" height="15.0" fill="rgb(228,211,24)" rx="2" ry="2" />
<text  x="837.80" y="383.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (4 samples, 0.08%)</title><rect x="872.9" y="373" width="0.9" height="15.0" fill="rgb(224,34,48)" rx="2" ry="2" />
<text  x="875.93" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (278 samples, 5.35%)</title><rect x="20.7" y="597" width="63.1" height="15.0" fill="rgb(232,136,10)" rx="2" ry="2" />
<text  x="23.67" y="607.5" >std::_..</text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="563.6" y="389" width="0.2" height="15.0" fill="rgb(213,159,44)" rx="2" ry="2" />
<text  x="566.57" y="399.5" ></text>
</g>
<g >
<title>std::apply&lt;row_cache::do_update (1 samples, 0.02%)</title><rect x="702.2" y="421" width="0.3" height="15.0" fill="rgb(248,119,21)" rx="2" ry="2" />
<text  x="705.25" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="437.2" y="229" width="0.2" height="15.0" fill="rgb(239,47,10)" rx="2" ry="2" />
<text  x="440.15" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="992.1" y="293" width="0.2" height="15.0" fill="rgb(249,95,25)" rx="2" ry="2" />
<text  x="995.09" y="303.5" ></text>
</g>
<g >
<title>abstract_type::decompose (1 samples, 0.02%)</title><rect x="75.1" y="341" width="0.3" height="15.0" fill="rgb(214,79,51)" rx="2" ry="2" />
<text  x="78.14" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="1030.9" y="293" width="0.7" height="15.0" fill="rgb(207,109,48)" rx="2" ry="2" />
<text  x="1033.90" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::io_queue_submission_pollfn::poll (1 samples, 0.02%)</title><rect x="1164.6" y="533" width="0.2" height="15.0" fill="rgb(243,15,49)" rx="2" ry="2" />
<text  x="1167.58" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%)</title><rect x="294.4" y="309" width="0.2" height="15.0" fill="rgb(220,218,18)" rx="2" ry="2" />
<text  x="297.39" y="319.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_890c8f4026fb5657cc774dcb869d5487d413f0d3] (1 samples, 0.02%)</title><rect x="986.6" y="357" width="0.3" height="15.0" fill="rgb(218,117,26)" rx="2" ry="2" />
<text  x="989.64" y="367.5" ></text>
</g>
<g >
<title>schema::get_column_definition (1 samples, 0.02%)</title><rect x="79.7" y="469" width="0.2" height="15.0" fill="rgb(236,81,5)" rx="2" ry="2" />
<text  x="82.68" y="479.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="11.1" y="421" width="0.3" height="15.0" fill="rgb(237,183,53)" rx="2" ry="2" />
<text  x="14.13" y="431.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::~metric_groups_impl (1 samples, 0.02%)</title><rect x="703.2" y="309" width="0.2" height="15.0" fill="rgb(234,132,32)" rx="2" ry="2" />
<text  x="706.16" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (1 samples, 0.02%)</title><rect x="337.3" y="309" width="0.2" height="15.0" fill="rgb(241,3,31)" rx="2" ry="2" />
<text  x="340.29" y="319.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::list_service_level_statement, std::default_delete&lt;cql3::statements::list_service_level_statement&gt;, true, true&gt;::__uniq_ptr_data (2 samples, 0.04%)</title><rect x="66.7" y="389" width="0.5" height="15.0" fill="rgb(232,165,28)" rx="2" ry="2" />
<text  x="69.74" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="714.1" y="501" width="0.2" height="15.0" fill="rgb(211,90,16)" rx="2" ry="2" />
<text  x="717.05" y="511.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="289.8" y="213" width="0.5" height="15.0" fill="rgb(235,222,44)" rx="2" ry="2" />
<text  x="292.85" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;sstables::scylla_metadata_type, std::pair&lt;sstables::scylla_metadata_type const, boost::variant&lt;sstables::disk_tagged_union_member&lt;sstables::scylla_metadata_type,  (1 samples, 0.02%)</title><rect x="702.0" y="421" width="0.2" height="15.0" fill="rgb(231,138,2)" rx="2" ry="2" />
<text  x="705.02" y="431.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cell (1 samples, 0.02%)</title><rect x="87.6" y="373" width="0.2" height="15.0" fill="rgb(243,70,49)" rx="2" ry="2" />
<text  x="90.62" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (1 samples, 0.02%)</title><rect x="890.2" y="453" width="0.2" height="15.0" fill="rgb(238,153,8)" rx="2" ry="2" />
<text  x="893.18" y="463.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%)</title><rect x="1068.3" y="293" width="0.3" height="15.0" fill="rgb(221,129,37)" rx="2" ry="2" />
<text  x="1071.35" y="303.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (24 samples, 0.46%)</title><rect x="381.1" y="197" width="5.4" height="15.0" fill="rgb(230,157,0)" rx="2" ry="2" />
<text  x="384.09" y="207.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="777.1" y="341" width="0.5" height="15.0" fill="rgb(227,6,29)" rx="2" ry="2" />
<text  x="780.15" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="699.3" y="485" width="0.2" height="15.0" fill="rgb(223,109,41)" rx="2" ry="2" />
<text  x="702.30" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="967.6" y="357" width="0.4" height="15.0" fill="rgb(210,85,26)" rx="2" ry="2" />
<text  x="970.57" y="367.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="46.3" y="149" width="0.2" height="15.0" fill="rgb(209,177,35)" rx="2" ry="2" />
<text  x="49.31" y="159.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (7 samples, 0.13%)</title><rect x="872.9" y="405" width="1.6" height="15.0" fill="rgb(250,27,13)" rx="2" ry="2" />
<text  x="875.93" y="415.5" ></text>
</g>
<g >
<title>frozen_mutation::partition (1 samples, 0.02%)</title><rect x="1112.8" y="277" width="0.3" height="15.0" fill="rgb(231,225,18)" rx="2" ry="2" />
<text  x="1115.83" y="287.5" ></text>
</g>
<g >
<title>std::forward&lt;cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="57.4" y="37" width="0.3" height="15.0" fill="rgb(237,144,19)" rx="2" ry="2" />
<text  x="60.44" y="47.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (5 samples, 0.10%)</title><rect x="533.4" y="357" width="1.1" height="15.0" fill="rgb(214,131,29)" rx="2" ry="2" />
<text  x="536.39" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="41.3" y="341" width="0.7" height="15.0" fill="rgb(210,202,51)" rx="2" ry="2" />
<text  x="44.32" y="351.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_890c8f4026fb5657cc774dcb869d5487d413f0d3] (1 samples, 0.02%)</title><rect x="841.2" y="309" width="0.2" height="15.0" fill="rgb(210,225,0)" rx="2" ry="2" />
<text  x="844.15" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (7 samples, 0.13%)</title><rect x="1102.6" y="437" width="1.6" height="15.0" fill="rgb(208,12,1)" rx="2" ry="2" />
<text  x="1105.62" y="447.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (3 samples, 0.06%)</title><rect x="1017.1" y="229" width="0.6" height="15.0" fill="rgb(222,201,39)" rx="2" ry="2" />
<text  x="1020.05" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (2 samples, 0.04%)</title><rect x="31.8" y="261" width="0.4" height="15.0" fill="rgb(223,181,0)" rx="2" ry="2" />
<text  x="34.79" y="271.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (7 samples, 0.13%)</title><rect x="324.1" y="341" width="1.6" height="15.0" fill="rgb(242,37,18)" rx="2" ry="2" />
<text  x="327.12" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6 samples, 0.12%)</title><rect x="774.4" y="373" width="1.4" height="15.0" fill="rgb(238,57,18)" rx="2" ry="2" />
<text  x="777.42" y="383.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (1 samples, 0.02%)</title><rect x="23.8" y="341" width="0.3" height="15.0" fill="rgb(209,175,19)" rx="2" ry="2" />
<text  x="26.84" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (2 samples, 0.04%)</title><rect x="848.6" y="469" width="0.5" height="15.0" fill="rgb(211,78,51)" rx="2" ry="2" />
<text  x="851.64" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="63.8" y="357" width="0.2" height="15.0" fill="rgb(208,34,35)" rx="2" ry="2" />
<text  x="66.79" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (5 samples, 0.10%)</title><rect x="794.4" y="325" width="1.1" height="15.0" fill="rgb(243,136,54)" rx="2" ry="2" />
<text  x="797.40" y="335.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="48.1" y="181" width="0.3" height="15.0" fill="rgb(234,147,15)" rx="2" ry="2" />
<text  x="51.13" y="191.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="354.8" y="229" width="0.4" height="15.0" fill="rgb(230,3,44)" rx="2" ry="2" />
<text  x="357.76" y="239.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="157.5" y="469" width="0.3" height="15.0" fill="rgb(215,75,20)" rx="2" ry="2" />
<text  x="160.53" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::has_supporting_index (1 samples, 0.02%)</title><rect x="75.8" y="421" width="0.2" height="15.0" fill="rgb(225,13,22)" rx="2" ry="2" />
<text  x="78.82" y="431.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (2 samples, 0.04%)</title><rect x="648.2" y="517" width="0.5" height="15.0" fill="rgb(219,45,39)" rx="2" ry="2" />
<text  x="651.23" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="736.3" y="453" width="0.2" height="15.0" fill="rgb(247,163,32)" rx="2" ry="2" />
<text  x="739.29" y="463.5" ></text>
</g>
<g >
<title>cql3::result_generator::visit&lt;cql3::untyped_result_set::visitor&gt; (1 samples, 0.02%)</title><rect x="660.0" y="469" width="0.3" height="15.0" fill="rgb(223,109,14)" rx="2" ry="2" />
<text  x="663.03" y="479.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%)</title><rect x="1130.3" y="277" width="0.2" height="15.0" fill="rgb(251,173,46)" rx="2" ry="2" />
<text  x="1133.31" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="45.9" y="277" width="0.6" height="15.0" fill="rgb(245,68,27)" rx="2" ry="2" />
<text  x="48.86" y="287.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="55.4" y="261" width="0.4" height="15.0" fill="rgb(246,177,40)" rx="2" ry="2" />
<text  x="58.39" y="271.5" ></text>
</g>
<g >
<title>data_value::~data_value (1 samples, 0.02%)</title><rect x="75.4" y="325" width="0.2" height="15.0" fill="rgb(216,54,43)" rx="2" ry="2" />
<text  x="78.37" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_recognizer (1 samples, 0.02%)</title><rect x="44.0" y="357" width="0.3" height="15.0" fill="rgb(232,4,49)" rx="2" ry="2" />
<text  x="47.05" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="441.0" y="277" width="0.2" height="15.0" fill="rgb(238,68,21)" rx="2" ry="2" />
<text  x="444.01" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="534.1" y="293" width="0.2" height="15.0" fill="rgb(219,213,30)" rx="2" ry="2" />
<text  x="537.07" y="303.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%)</title><rect x="86.5" y="261" width="0.2" height="15.0" fill="rgb(242,216,42)" rx="2" ry="2" />
<text  x="89.49" y="271.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.10%)</title><rect x="113.0" y="517" width="1.2" height="15.0" fill="rgb(230,182,37)" rx="2" ry="2" />
<text  x="116.04" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (1 samples, 0.02%)</title><rect x="1125.8" y="213" width="0.2" height="15.0" fill="rgb(253,20,28)" rx="2" ry="2" />
<text  x="1128.77" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="326.6" y="389" width="0.7" height="15.0" fill="rgb(224,86,51)" rx="2" ry="2" />
<text  x="329.62" y="399.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (1 samples, 0.02%)</title><rect x="874.5" y="405" width="0.2" height="15.0" fill="rgb(228,6,28)" rx="2" ry="2" />
<text  x="877.52" y="415.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (15 samples, 0.29%)</title><rect x="476.0" y="341" width="3.4" height="15.0" fill="rgb(227,202,17)" rx="2" ry="2" />
<text  x="478.96" y="351.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (1 samples, 0.02%)</title><rect x="813.7" y="181" width="0.2" height="15.0" fill="rgb(233,142,8)" rx="2" ry="2" />
<text  x="816.69" y="191.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="873.8" y="357" width="0.3" height="15.0" fill="rgb(246,206,15)" rx="2" ry="2" />
<text  x="876.84" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.02%)</title><rect x="32.0" y="229" width="0.2" height="15.0" fill="rgb(245,100,13)" rx="2" ry="2" />
<text  x="35.02" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="1082.9" y="405" width="0.4" height="15.0" fill="rgb(220,125,5)" rx="2" ry="2" />
<text  x="1085.87" y="415.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3 samples, 0.06%)</title><rect x="500.7" y="245" width="0.7" height="15.0" fill="rgb(244,57,26)" rx="2" ry="2" />
<text  x="503.70" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (9 samples, 0.17%)</title><rect x="846.6" y="453" width="2.0" height="15.0" fill="rgb(225,44,17)" rx="2" ry="2" />
<text  x="849.60" y="463.5" ></text>
</g>
<g >
<title>query::querier&lt; (1,782 samples, 34.28%)</title><rect x="165.7" y="469" width="404.5" height="15.0" fill="rgb(211,178,19)" rx="2" ry="2" />
<text  x="168.70" y="479.5" >query::querier&lt;</text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (203 samples, 3.90%)</title><rect x="22.7" y="469" width="46.1" height="15.0" fill="rgb(242,106,20)" rx="2" ry="2" />
<text  x="25.71" y="479.5" >cql3..</text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (10 samples, 0.19%)</title><rect x="1052.2" y="341" width="2.3" height="15.0" fill="rgb(207,146,9)" rx="2" ry="2" />
<text  x="1055.23" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (4 samples, 0.08%)</title><rect x="624.2" y="469" width="0.9" height="15.0" fill="rgb(206,99,10)" rx="2" ry="2" />
<text  x="627.17" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="64.7" y="389" width="0.2" height="15.0" fill="rgb(227,59,52)" rx="2" ry="2" />
<text  x="67.70" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="923.1" y="421" width="0.4" height="15.0" fill="rgb(206,108,27)" rx="2" ry="2" />
<text  x="926.09" y="431.5" ></text>
</g>
<g >
<title>table::try_flush_memtable_to_sstable (1 samples, 0.02%)</title><rect x="1130.3" y="517" width="0.2" height="15.0" fill="rgb(241,71,1)" rx="2" ry="2" />
<text  x="1133.31" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_service_level_statement, std::default_delete&lt;cql3::statements::list_service_level_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::list_service_level_statement&gt;, void&gt; (2 samples, 0.04%)</title><rect x="66.7" y="405" width="0.5" height="15.0" fill="rgb(220,49,46)" rx="2" ry="2" />
<text  x="69.74" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (332 samples, 6.39%)</title><rect x="205.2" y="293" width="75.3" height="15.0" fill="rgb(230,62,50)" rx="2" ry="2" />
<text  x="208.19" y="303.5" >partitio..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (3 samples, 0.06%)</title><rect x="1084.5" y="421" width="0.6" height="15.0" fill="rgb(244,36,41)" rx="2" ry="2" />
<text  x="1087.46" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="47.9" y="245" width="0.5" height="15.0" fill="rgb(216,114,2)" rx="2" ry="2" />
<text  x="50.90" y="255.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (4 samples, 0.08%)</title><rect x="87.2" y="517" width="0.9" height="15.0" fill="rgb(229,146,45)" rx="2" ry="2" />
<text  x="90.17" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%)</title><rect x="113.5" y="309" width="0.2" height="15.0" fill="rgb(252,38,46)" rx="2" ry="2" />
<text  x="116.50" y="319.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.13%)</title><rect x="422.2" y="165" width="1.6" height="15.0" fill="rgb(218,194,54)" rx="2" ry="2" />
<text  x="425.17" y="175.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="1026.8" y="293" width="0.9" height="15.0" fill="rgb(254,213,48)" rx="2" ry="2" />
<text  x="1029.81" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::process_partition_key_restrictions (1 samples, 0.02%)</title><rect x="77.9" y="421" width="0.2" height="15.0" fill="rgb(234,72,0)" rx="2" ry="2" />
<text  x="80.86" y="431.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="82.9" y="437" width="0.2" height="15.0" fill="rgb(233,76,28)" rx="2" ry="2" />
<text  x="85.86" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="1160.3" y="469" width="0.2" height="15.0" fill="rgb(234,155,12)" rx="2" ry="2" />
<text  x="1163.27" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (4 samples, 0.08%)</title><rect x="556.3" y="373" width="0.9" height="15.0" fill="rgb(242,215,54)" rx="2" ry="2" />
<text  x="559.31" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (4 samples, 0.08%)</title><rect x="273.1" y="181" width="0.9" height="15.0" fill="rgb(251,56,18)" rx="2" ry="2" />
<text  x="276.05" y="191.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="691.4" y="517" width="0.2" height="15.0" fill="rgb(225,1,10)" rx="2" ry="2" />
<text  x="694.35" y="527.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (1 samples, 0.02%)</title><rect x="1127.6" y="325" width="0.2" height="15.0" fill="rgb(226,78,18)" rx="2" ry="2" />
<text  x="1130.58" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (413 samples, 7.94%)</title><rect x="200.9" y="341" width="93.7" height="15.0" fill="rgb(248,71,19)" rx="2" ry="2" />
<text  x="203.88" y="351.5" >partition_s..</text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (4 samples, 0.08%)</title><rect x="1124.0" y="181" width="0.9" height="15.0" fill="rgb(215,77,14)" rx="2" ry="2" />
<text  x="1126.95" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::future (2 samples, 0.04%)</title><rect x="770.3" y="389" width="0.5" height="15.0" fill="rgb(254,99,30)" rx="2" ry="2" />
<text  x="773.34" y="399.5" ></text>
</g>
<g >
<title>std::optional&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="42.7" y="341" width="0.2" height="15.0" fill="rgb(233,195,31)" rx="2" ry="2" />
<text  x="45.68" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%)</title><rect x="767.4" y="421" width="0.4" height="15.0" fill="rgb(211,4,43)" rx="2" ry="2" />
<text  x="770.39" y="431.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (72 samples, 1.38%)</title><rect x="751.7" y="453" width="16.4" height="15.0" fill="rgb(211,55,40)" rx="2" ry="2" />
<text  x="754.73" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false, false, false&gt;::operator= (1 samples, 0.02%)</title><rect x="42.7" y="309" width="0.2" height="15.0" fill="rgb(213,178,19)" rx="2" ry="2" />
<text  x="45.68" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (1 samples, 0.02%)</title><rect x="1023.2" y="261" width="0.2" height="15.0" fill="rgb(230,86,35)" rx="2" ry="2" />
<text  x="1026.18" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1035.4" y="261" width="0.3" height="15.0" fill="rgb(225,65,9)" rx="2" ry="2" />
<text  x="1038.44" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (8 samples, 0.15%)</title><rect x="875.4" y="389" width="1.8" height="15.0" fill="rgb(217,36,5)" rx="2" ry="2" />
<text  x="878.42" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="869.1" y="533" width="0.2" height="15.0" fill="rgb(221,160,33)" rx="2" ry="2" />
<text  x="872.07" y="543.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (2 samples, 0.04%)</title><rect x="290.5" y="261" width="0.5" height="15.0" fill="rgb(243,168,2)" rx="2" ry="2" />
<text  x="293.53" y="271.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (26 samples, 0.50%)</title><rect x="11.6" y="645" width="5.9" height="15.0" fill="rgb(250,103,38)" rx="2" ry="2" />
<text  x="14.59" y="655.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (3 samples, 0.06%)</title><rect x="348.2" y="197" width="0.7" height="15.0" fill="rgb(229,31,53)" rx="2" ry="2" />
<text  x="351.18" y="207.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="45.4" y="245" width="0.2" height="15.0" fill="rgb(214,120,17)" rx="2" ry="2" />
<text  x="48.41" y="255.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%)</title><rect x="19.5" y="597" width="0.3" height="15.0" fill="rgb(217,108,14)" rx="2" ry="2" />
<text  x="22.53" y="607.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="512.1" y="325" width="0.4" height="15.0" fill="rgb(216,161,11)" rx="2" ry="2" />
<text  x="515.05" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="114.2" y="309" width="0.2" height="15.0" fill="rgb(254,165,48)" rx="2" ry="2" />
<text  x="117.18" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1087.6" y="421" width="0.3" height="15.0" fill="rgb(229,185,18)" rx="2" ry="2" />
<text  x="1090.64" y="431.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="532.7" y="325" width="0.2" height="15.0" fill="rgb(226,25,52)" rx="2" ry="2" />
<text  x="535.70" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%)</title><rect x="85.8" y="469" width="0.2" height="15.0" fill="rgb(239,50,36)" rx="2" ry="2" />
<text  x="88.81" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;partition_key, clustering_key_prefix&gt;, std::pair&lt;std::pair&lt;partition_key, clustering_key_prefix&gt; const, cql3::update_parameters::prefetch_data::row&gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;partition_key, clustering_key_prefix&gt; const, cql3::update_parameters::prefetch_data::row&gt; &gt;, cql3::update_parameters::prefetch_data::key_less, std::allocator&lt;std::pair&lt;std::pair&lt;partition_key, clustering_key_prefix&gt; const, cql3::update_parameters::prefetch_data::row&gt; &gt; &gt;::~_Rb_tree (1 samples, 0.02%)</title><rect x="877.9" y="421" width="0.2" height="15.0" fill="rgb(227,116,19)" rx="2" ry="2" />
<text  x="880.92" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%)</title><rect x="139.1" y="421" width="0.3" height="15.0" fill="rgb(251,149,18)" rx="2" ry="2" />
<text  x="142.14" y="431.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="713.8" y="517" width="0.5" height="15.0" fill="rgb(242,203,2)" rx="2" ry="2" />
<text  x="716.82" y="527.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="873.8" y="341" width="0.3" height="15.0" fill="rgb(208,133,38)" rx="2" ry="2" />
<text  x="876.84" y="351.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (12 samples, 0.23%)</title><rect x="859.5" y="453" width="2.8" height="15.0" fill="rgb(215,108,43)" rx="2" ry="2" />
<text  x="862.54" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1095.4" y="389" width="0.2" height="15.0" fill="rgb(207,205,6)" rx="2" ry="2" />
<text  x="1098.35" y="399.5" ></text>
</g>
<g >
<title>table::set_hit_rate (8 samples, 0.15%)</title><rect x="723.4" y="485" width="1.8" height="15.0" fill="rgb(242,200,37)" rx="2" ry="2" />
<text  x="726.36" y="495.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::run_and_dispose (1 samples, 0.02%)</title><rect x="1130.5" y="533" width="0.3" height="15.0" fill="rgb(213,64,27)" rx="2" ry="2" />
<text  x="1133.53" y="543.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (2 samples, 0.04%)</title><rect x="817.3" y="181" width="0.5" height="15.0" fill="rgb(253,196,28)" rx="2" ry="2" />
<text  x="820.32" y="191.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (2 samples, 0.04%)</title><rect x="948.3" y="437" width="0.4" height="15.0" fill="rgb(246,212,16)" rx="2" ry="2" />
<text  x="951.28" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state_base::future_state_base (1 samples, 0.02%)</title><rect x="821.4" y="309" width="0.2" height="15.0" fill="rgb(235,175,10)" rx="2" ry="2" />
<text  x="824.41" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="322.1" y="293" width="1.1" height="15.0" fill="rgb(216,123,11)" rx="2" ry="2" />
<text  x="325.08" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (7 samples, 0.13%)</title><rect x="312.5" y="389" width="1.6" height="15.0" fill="rgb(225,203,41)" rx="2" ry="2" />
<text  x="315.55" y="399.5" ></text>
</g>
<g >
<title>commitlog_entry_writer::serialize&lt;seastar::memory_output_stream&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1119.9" y="277" width="0.2" height="15.0" fill="rgb(236,55,10)" rx="2" ry="2" />
<text  x="1122.87" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="48.8" y="229" width="0.2" height="15.0" fill="rgb(222,87,22)" rx="2" ry="2" />
<text  x="51.81" y="239.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="917.2" y="389" width="0.2" height="15.0" fill="rgb(210,127,53)" rx="2" ry="2" />
<text  x="920.19" y="399.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (1 samples, 0.02%)</title><rect x="473.7" y="325" width="0.2" height="15.0" fill="rgb(241,139,41)" rx="2" ry="2" />
<text  x="476.69" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="656.4" y="485" width="0.2" height="15.0" fill="rgb(211,175,27)" rx="2" ry="2" />
<text  x="659.40" y="495.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%)</title><rect x="584.0" y="309" width="0.2" height="15.0" fill="rgb(242,202,46)" rx="2" ry="2" />
<text  x="587.00" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="759.2" y="389" width="0.2" height="15.0" fill="rgb(220,144,31)" rx="2" ry="2" />
<text  x="762.22" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::remove_response_handler_entry (1 samples, 0.02%)</title><rect x="727.4" y="517" width="0.3" height="15.0" fill="rgb(236,135,19)" rx="2" ry="2" />
<text  x="730.44" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (6 samples, 0.12%)</title><rect x="818.2" y="277" width="1.4" height="15.0" fill="rgb(218,27,49)" rx="2" ry="2" />
<text  x="821.23" y="287.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (18 samples, 0.35%)</title><rect x="918.8" y="373" width="4.1" height="15.0" fill="rgb(251,99,25)" rx="2" ry="2" />
<text  x="921.77" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (1 samples, 0.02%)</title><rect x="1113.3" y="277" width="0.2" height="15.0" fill="rgb(216,48,51)" rx="2" ry="2" />
<text  x="1116.29" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (2 samples, 0.04%)</title><rect x="78.3" y="389" width="0.5" height="15.0" fill="rgb(237,215,29)" rx="2" ry="2" />
<text  x="81.32" y="399.5" ></text>
</g>
<g >
<title>atomic_cell::atomic_cell (1 samples, 0.02%)</title><rect x="1115.3" y="261" width="0.3" height="15.0" fill="rgb(205,80,2)" rx="2" ry="2" />
<text  x="1118.33" y="271.5" ></text>
</g>
<g >
<title>cql3::terminal::to_expression (2 samples, 0.04%)</title><rect x="72.9" y="421" width="0.4" height="15.0" fill="rgb(217,219,0)" rx="2" ry="2" />
<text  x="75.87" y="431.5" ></text>
</g>
<g >
<title>validation::is_cql_key_invalid (1 samples, 0.02%)</title><rect x="875.0" y="389" width="0.2" height="15.0" fill="rgb(231,114,48)" rx="2" ry="2" />
<text  x="877.97" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="57.9" y="277" width="0.2" height="15.0" fill="rgb(234,96,15)" rx="2" ry="2" />
<text  x="60.89" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="935.6" y="437" width="0.2" height="15.0" fill="rgb(237,72,43)" rx="2" ry="2" />
<text  x="938.57" y="447.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%)</title><rect x="425.6" y="213" width="0.2" height="15.0" fill="rgb(213,211,51)" rx="2" ry="2" />
<text  x="428.58" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::parsed_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="68.6" y="421" width="0.2" height="15.0" fill="rgb(218,111,41)" rx="2" ry="2" />
<text  x="71.56" y="431.5" ></text>
</g>
<g >
<title>seastar::max_concurrent_for_each&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt;, db::system_distributed_keyspace::create_cdc_desc (1 samples, 0.02%)</title><rect x="112.8" y="485" width="0.2" height="15.0" fill="rgb(245,48,30)" rx="2" ry="2" />
<text  x="115.82" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%)</title><rect x="893.1" y="437" width="0.3" height="15.0" fill="rgb(225,126,0)" rx="2" ry="2" />
<text  x="896.13" y="447.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="47.9" y="181" width="0.2" height="15.0" fill="rgb(213,79,2)" rx="2" ry="2" />
<text  x="50.90" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="700.7" y="437" width="0.2" height="15.0" fill="rgb(209,227,21)" rx="2" ry="2" />
<text  x="703.66" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="711.1" y="517" width="0.2" height="15.0" fill="rgb(216,206,2)" rx="2" ry="2" />
<text  x="714.10" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (2 samples, 0.04%)</title><rect x="565.2" y="325" width="0.4" height="15.0" fill="rgb(220,78,13)" rx="2" ry="2" />
<text  x="568.16" y="335.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%)</title><rect x="578.8" y="325" width="0.4" height="15.0" fill="rgb(221,154,26)" rx="2" ry="2" />
<text  x="581.78" y="335.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="702.2" y="309" width="0.3" height="15.0" fill="rgb(216,127,33)" rx="2" ry="2" />
<text  x="705.25" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (14 samples, 0.27%)</title><rect x="676.6" y="517" width="3.2" height="15.0" fill="rgb(220,57,22)" rx="2" ry="2" />
<text  x="679.60" y="527.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (7 samples, 0.13%)</title><rect x="1090.1" y="421" width="1.6" height="15.0" fill="rgb(232,200,1)" rx="2" ry="2" />
<text  x="1093.13" y="431.5" ></text>
</g>
<g >
<title>service::client_state::has_access (189 samples, 3.64%)</title><rect x="788.0" y="405" width="42.9" height="15.0" fill="rgb(218,179,47)" rx="2" ry="2" />
<text  x="791.04" y="415.5" >serv..</text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::mutate_locally (1 samples, 0.02%)</title><rect x="1122.6" y="213" width="0.2" height="15.0" fill="rgb(250,184,44)" rx="2" ry="2" />
<text  x="1125.59" y="223.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (2 samples, 0.04%)</title><rect x="121.7" y="501" width="0.4" height="15.0" fill="rgb(206,204,20)" rx="2" ry="2" />
<text  x="124.67" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="52.2" y="261" width="0.2" height="15.0" fill="rgb(206,198,17)" rx="2" ry="2" />
<text  x="55.22" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (3 samples, 0.06%)</title><rect x="1142.8" y="485" width="0.7" height="15.0" fill="rgb(232,124,15)" rx="2" ry="2" />
<text  x="1145.79" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1001.6" y="277" width="0.2" height="15.0" fill="rgb(213,25,11)" rx="2" ry="2" />
<text  x="1004.62" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (1 samples, 0.02%)</title><rect x="1022.7" y="229" width="0.3" height="15.0" fill="rgb(242,25,44)" rx="2" ry="2" />
<text  x="1025.73" y="239.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="49.3" y="261" width="0.6" height="15.0" fill="rgb(211,32,30)" rx="2" ry="2" />
<text  x="52.27" y="271.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (410 samples, 7.89%)</title><rect x="201.6" y="325" width="93.0" height="15.0" fill="rgb(251,113,28)" rx="2" ry="2" />
<text  x="204.56" y="335.5" >seastar::do..</text>
</g>
<g >
<title>memtable::upgrade_entry (2 samples, 0.04%)</title><rect x="539.1" y="373" width="0.4" height="15.0" fill="rgb(224,179,21)" rx="2" ry="2" />
<text  x="542.06" y="383.5" ></text>
</g>
<g >
<title>cdc::generation_service::make_new_generation (1 samples, 0.02%)</title><rect x="20.2" y="485" width="0.2" height="15.0" fill="rgb(206,194,33)" rx="2" ry="2" />
<text  x="23.21" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::create_clustering_ranges (1 samples, 0.02%)</title><rect x="875.2" y="421" width="0.2" height="15.0" fill="rgb(239,122,37)" rx="2" ry="2" />
<text  x="878.20" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="564.0" y="357" width="1.6" height="15.0" fill="rgb(220,217,44)" rx="2" ry="2" />
<text  x="567.03" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.12%)</title><rect x="25.9" y="277" width="1.3" height="15.0" fill="rgb(222,26,27)" rx="2" ry="2" />
<text  x="28.89" y="287.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (1 samples, 0.02%)</title><rect x="700.7" y="517" width="0.2" height="15.0" fill="rgb(231,227,15)" rx="2" ry="2" />
<text  x="703.66" y="527.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (3 samples, 0.06%)</title><rect x="756.5" y="341" width="0.7" height="15.0" fill="rgb(229,41,48)" rx="2" ry="2" />
<text  x="759.49" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (21 samples, 0.40%)</title><rect x="263.7" y="213" width="4.8" height="15.0" fill="rgb(242,219,9)" rx="2" ry="2" />
<text  x="266.75" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="80.6" y="485" width="0.2" height="15.0" fill="rgb(242,130,1)" rx="2" ry="2" />
<text  x="83.59" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="101.0" y="485" width="0.2" height="15.0" fill="rgb(214,164,24)" rx="2" ry="2" />
<text  x="104.01" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.62%)</title><rect x="1120.5" y="421" width="7.3" height="15.0" fill="rgb(215,225,51)" rx="2" ry="2" />
<text  x="1123.55" y="431.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%)</title><rect x="276.7" y="245" width="0.2" height="15.0" fill="rgb(205,161,21)" rx="2" ry="2" />
<text  x="279.69" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="339.1" y="293" width="0.2" height="15.0" fill="rgb(249,14,23)" rx="2" ry="2" />
<text  x="342.10" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="441.7" y="309" width="0.2" height="15.0" fill="rgb(210,142,19)" rx="2" ry="2" />
<text  x="444.69" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="1035.7" y="309" width="0.6" height="15.0" fill="rgb(218,69,23)" rx="2" ry="2" />
<text  x="1038.66" y="319.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%)</title><rect x="307.1" y="373" width="0.2" height="15.0" fill="rgb(226,4,46)" rx="2" ry="2" />
<text  x="310.10" y="383.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="914.9" y="405" width="0.9" height="15.0" fill="rgb(218,196,33)" rx="2" ry="2" />
<text  x="917.92" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="136.0" y="421" width="0.4" height="15.0" fill="rgb(215,151,12)" rx="2" ry="2" />
<text  x="138.97" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="1022.5" y="229" width="0.2" height="15.0" fill="rgb(223,183,16)" rx="2" ry="2" />
<text  x="1025.50" y="239.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (3 samples, 0.06%)</title><rect x="692.3" y="501" width="0.6" height="15.0" fill="rgb(239,10,31)" rx="2" ry="2" />
<text  x="695.26" y="511.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1113.1" y="277" width="0.2" height="15.0" fill="rgb(215,151,4)" rx="2" ry="2" />
<text  x="1116.06" y="287.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (9 samples, 0.17%)</title><rect x="161.2" y="437" width="2.0" height="15.0" fill="rgb(217,31,48)" rx="2" ry="2" />
<text  x="164.16" y="447.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::touch (1 samples, 0.02%)</title><rect x="757.2" y="341" width="0.2" height="15.0" fill="rgb(209,67,21)" rx="2" ry="2" />
<text  x="760.17" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="54.7" y="197" width="0.2" height="15.0" fill="rgb(232,23,29)" rx="2" ry="2" />
<text  x="57.71" y="207.5" ></text>
</g>
<g >
<title>write_tombstones&lt;ser::mutation_partition__range_tombstones&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%)</title><rect x="1125.5" y="197" width="0.3" height="15.0" fill="rgb(253,134,25)" rx="2" ry="2" />
<text  x="1128.54" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="478.0" y="309" width="0.2" height="15.0" fill="rgb(231,197,37)" rx="2" ry="2" />
<text  x="481.01" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (7 samples, 0.13%)</title><rect x="948.7" y="437" width="1.6" height="15.0" fill="rgb(207,200,24)" rx="2" ry="2" />
<text  x="951.73" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (4 samples, 0.08%)</title><rect x="665.7" y="469" width="0.9" height="15.0" fill="rgb(252,63,43)" rx="2" ry="2" />
<text  x="668.71" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (179 samples, 3.44%)</title><rect x="222.9" y="213" width="40.6" height="15.0" fill="rgb(210,52,18)" rx="2" ry="2" />
<text  x="225.89" y="223.5" >mut..</text>
</g>
<g >
<title>seastar::memory::configure (1 samples, 0.02%)</title><rect x="1165.9" y="565" width="0.3" height="15.0" fill="rgb(209,86,27)" rx="2" ry="2" />
<text  x="1168.94" y="575.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (7 samples, 0.13%)</title><rect x="85.6" y="517" width="1.6" height="15.0" fill="rgb(231,65,8)" rx="2" ry="2" />
<text  x="88.58" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="1133.0" y="533" width="0.5" height="15.0" fill="rgb(222,118,0)" rx="2" ry="2" />
<text  x="1136.03" y="543.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (282 samples, 5.42%)</title><rect x="974.4" y="389" width="64.0" height="15.0" fill="rgb(225,99,28)" rx="2" ry="2" />
<text  x="977.38" y="399.5" >service..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="54.5" y="213" width="0.2" height="15.0" fill="rgb(222,49,22)" rx="2" ry="2" />
<text  x="57.49" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%)</title><rect x="142.8" y="485" width="0.2" height="15.0" fill="rgb(226,192,27)" rx="2" ry="2" />
<text  x="145.78" y="495.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (537 samples, 10.33%)</title><rect x="329.6" y="421" width="121.9" height="15.0" fill="rgb(225,120,3)" rx="2" ry="2" />
<text  x="332.57" y="431.5" >query::consume_..</text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (1 samples, 0.02%)</title><rect x="441.5" y="261" width="0.2" height="15.0" fill="rgb(245,129,33)" rx="2" ry="2" />
<text  x="444.46" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="759.4" y="389" width="0.3" height="15.0" fill="rgb(229,144,48)" rx="2" ry="2" />
<text  x="762.44" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base (1 samples, 0.02%)</title><rect x="62.7" y="261" width="0.2" height="15.0" fill="rgb(250,186,15)" rx="2" ry="2" />
<text  x="65.66" y="271.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="821.0" y="309" width="0.2" height="15.0" fill="rgb(208,198,31)" rx="2" ry="2" />
<text  x="823.95" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%)</title><rect x="100.1" y="485" width="0.7" height="15.0" fill="rgb(252,158,40)" rx="2" ry="2" />
<text  x="103.11" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (7 samples, 0.13%)</title><rect x="469.8" y="293" width="1.6" height="15.0" fill="rgb(241,67,48)" rx="2" ry="2" />
<text  x="472.83" y="303.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (5 samples, 0.10%)</title><rect x="1096.9" y="437" width="1.2" height="15.0" fill="rgb(215,26,10)" rx="2" ry="2" />
<text  x="1099.94" y="447.5" ></text>
</g>
<g >
<title>ser::mutation_partition_view::rows (1 samples, 0.02%)</title><rect x="111.9" y="421" width="0.2" height="15.0" fill="rgb(254,121,45)" rx="2" ry="2" />
<text  x="114.91" y="431.5" ></text>
</g>
<g >
<title>compound_type&lt; (19 samples, 0.37%)</title><rect x="925.8" y="405" width="4.3" height="15.0" fill="rgb(247,228,25)" rx="2" ry="2" />
<text  x="928.81" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="629.2" y="437" width="0.2" height="15.0" fill="rgb(244,113,40)" rx="2" ry="2" />
<text  x="632.17" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (11 samples, 0.21%)</title><rect x="51.8" y="341" width="2.5" height="15.0" fill="rgb(230,107,21)" rx="2" ry="2" />
<text  x="54.76" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;database&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1029.5" y="293" width="0.3" height="15.0" fill="rgb(218,203,40)" rx="2" ry="2" />
<text  x="1032.53" y="303.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%)</title><rect x="806.7" y="181" width="1.1" height="15.0" fill="rgb(215,130,7)" rx="2" ry="2" />
<text  x="809.65" y="191.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (6 samples, 0.12%)</title><rect x="62.4" y="357" width="1.4" height="15.0" fill="rgb(212,175,1)" rx="2" ry="2" />
<text  x="65.43" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (1 samples, 0.02%)</title><rect x="803.5" y="277" width="0.2" height="15.0" fill="rgb(227,113,17)" rx="2" ry="2" />
<text  x="806.48" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (4 samples, 0.08%)</title><rect x="747.4" y="421" width="0.9" height="15.0" fill="rgb(214,79,7)" rx="2" ry="2" />
<text  x="750.41" y="431.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (1 samples, 0.02%)</title><rect x="1164.4" y="181" width="0.2" height="15.0" fill="rgb(230,103,19)" rx="2" ry="2" />
<text  x="1167.35" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (7 samples, 0.13%)</title><rect x="259.9" y="149" width="1.6" height="15.0" fill="rgb(221,165,4)" rx="2" ry="2" />
<text  x="262.89" y="159.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="54.5" y="229" width="0.4" height="15.0" fill="rgb(214,133,24)" rx="2" ry="2" />
<text  x="57.49" y="239.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%)</title><rect x="869.7" y="341" width="0.3" height="15.0" fill="rgb(227,159,14)" rx="2" ry="2" />
<text  x="872.75" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="633.0" y="453" width="0.7" height="15.0" fill="rgb(208,34,30)" rx="2" ry="2" />
<text  x="636.02" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (2 samples, 0.04%)</title><rect x="967.6" y="341" width="0.4" height="15.0" fill="rgb(214,159,11)" rx="2" ry="2" />
<text  x="970.57" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (3 samples, 0.06%)</title><rect x="61.5" y="357" width="0.7" height="15.0" fill="rgb(233,57,30)" rx="2" ry="2" />
<text  x="64.52" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="1000.3" y="293" width="1.5" height="15.0" fill="rgb(235,65,10)" rx="2" ry="2" />
<text  x="1003.26" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="95.8" y="501" width="0.2" height="15.0" fill="rgb(219,26,24)" rx="2" ry="2" />
<text  x="98.79" y="511.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (3 samples, 0.06%)</title><rect x="343.4" y="245" width="0.7" height="15.0" fill="rgb(240,24,48)" rx="2" ry="2" />
<text  x="346.41" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (13 samples, 0.25%)</title><rect x="837.5" y="357" width="3.0" height="15.0" fill="rgb(227,124,18)" rx="2" ry="2" />
<text  x="840.52" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="68.3" y="405" width="0.3" height="15.0" fill="rgb(238,228,47)" rx="2" ry="2" />
<text  x="71.33" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (35 samples, 0.67%)</title><rect x="431.7" y="277" width="7.9" height="15.0" fill="rgb(237,214,28)" rx="2" ry="2" />
<text  x="434.70" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="136.4" y="421" width="0.2" height="15.0" fill="rgb(215,87,31)" rx="2" ry="2" />
<text  x="139.42" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;10ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="57.4" y="133" width="0.3" height="15.0" fill="rgb(209,86,18)" rx="2" ry="2" />
<text  x="60.44" y="143.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (112 samples, 2.15%)</title><rect x="39.7" y="405" width="25.5" height="15.0" fill="rgb(221,61,47)" rx="2" ry="2" />
<text  x="42.73" y="415.5" >c..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (2 samples, 0.04%)</title><rect x="160.3" y="437" width="0.4" height="15.0" fill="rgb(242,9,20)" rx="2" ry="2" />
<text  x="163.25" y="447.5" ></text>
</g>
<g >
<title>row::row (2 samples, 0.04%)</title><rect x="86.3" y="293" width="0.4" height="15.0" fill="rgb(230,66,37)" rx="2" ry="2" />
<text  x="89.26" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (7 samples, 0.13%)</title><rect x="757.4" y="389" width="1.6" height="15.0" fill="rgb(210,173,46)" rx="2" ry="2" />
<text  x="760.40" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%)</title><rect x="355.4" y="245" width="0.3" height="15.0" fill="rgb(205,40,27)" rx="2" ry="2" />
<text  x="358.44" y="255.5" ></text>
</g>
<g >
<title>partition_builder::accept_row (2 samples, 0.04%)</title><rect x="1116.0" y="261" width="0.5" height="15.0" fill="rgb(246,192,43)" rx="2" ry="2" />
<text  x="1119.01" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="54.5" y="197" width="0.2" height="15.0" fill="rgb(239,173,21)" rx="2" ry="2" />
<text  x="57.49" y="207.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="1158.7" y="485" width="0.4" height="15.0" fill="rgb(230,169,28)" rx="2" ry="2" />
<text  x="1161.68" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (2 samples, 0.04%)</title><rect x="456.7" y="389" width="0.4" height="15.0" fill="rgb(240,44,0)" rx="2" ry="2" />
<text  x="459.67" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="54.9" y="325" width="0.3" height="15.0" fill="rgb(208,87,10)" rx="2" ry="2" />
<text  x="57.94" y="335.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (55 samples, 1.06%)</title><rect x="910.6" y="421" width="12.5" height="15.0" fill="rgb(209,156,4)" rx="2" ry="2" />
<text  x="913.60" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="1104.4" y="453" width="0.5" height="15.0" fill="rgb(213,114,45)" rx="2" ry="2" />
<text  x="1107.43" y="463.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (9 samples, 0.17%)</title><rect x="693.9" y="485" width="2.0" height="15.0" fill="rgb(208,203,33)" rx="2" ry="2" />
<text  x="696.85" y="495.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::signal (2 samples, 0.04%)</title><rect x="727.0" y="485" width="0.4" height="15.0" fill="rgb(233,191,6)" rx="2" ry="2" />
<text  x="729.99" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1156.6" y="485" width="0.3" height="15.0" fill="rgb(236,97,26)" rx="2" ry="2" />
<text  x="1159.64" y="495.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_partition_view&gt;::read&lt;seastar::memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="1117.8" y="261" width="0.3" height="15.0" fill="rgb(238,175,28)" rx="2" ry="2" />
<text  x="1120.82" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="525.9" y="229" width="0.2" height="15.0" fill="rgb(222,147,54)" rx="2" ry="2" />
<text  x="528.90" y="239.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::run_with_ordered_post_op&lt;db::commitlog::segment::cycle (1 samples, 0.02%)</title><rect x="727.7" y="533" width="0.2" height="15.0" fill="rgb(244,128,23)" rx="2" ry="2" />
<text  x="730.67" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="536.1" y="341" width="0.5" height="15.0" fill="rgb(252,29,4)" rx="2" ry="2" />
<text  x="539.11" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="522.7" y="261" width="0.5" height="15.0" fill="rgb(235,123,19)" rx="2" ry="2" />
<text  x="525.72" y="271.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (4 samples, 0.08%)</title><rect x="81.0" y="453" width="0.9" height="15.0" fill="rgb(225,191,53)" rx="2" ry="2" />
<text  x="84.04" y="463.5" ></text>
</g>
<g >
<title>ser::serializer&lt;tombstone&gt;::read&lt;seastar::memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="1118.1" y="245" width="0.2" height="15.0" fill="rgb(237,21,49)" rx="2" ry="2" />
<text  x="1121.05" y="255.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (2 samples, 0.04%)</title><rect x="761.3" y="309" width="0.4" height="15.0" fill="rgb(246,17,38)" rx="2" ry="2" />
<text  x="764.26" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::do_expire_lowres_timers (1 samples, 0.02%)</title><rect x="1164.4" y="533" width="0.2" height="15.0" fill="rgb(241,157,50)" rx="2" ry="2" />
<text  x="1167.35" y="543.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="171.4" y="453" width="0.2" height="15.0" fill="rgb(225,137,53)" rx="2" ry="2" />
<text  x="174.37" y="463.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="45.4" y="133" width="0.2" height="15.0" fill="rgb(217,145,44)" rx="2" ry="2" />
<text  x="48.41" y="143.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="365.9" y="197" width="0.2" height="15.0" fill="rgb(219,181,11)" rx="2" ry="2" />
<text  x="368.88" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (7 samples, 0.13%)</title><rect x="935.8" y="437" width="1.6" height="15.0" fill="rgb(252,184,42)" rx="2" ry="2" />
<text  x="938.80" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="211.1" y="229" width="0.2" height="15.0" fill="rgb(218,60,46)" rx="2" ry="2" />
<text  x="214.09" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (3 samples, 0.06%)</title><rect x="560.6" y="453" width="0.7" height="15.0" fill="rgb(207,105,20)" rx="2" ry="2" />
<text  x="563.62" y="463.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="21.1" y="485" width="0.2" height="15.0" fill="rgb(234,79,38)" rx="2" ry="2" />
<text  x="24.12" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%)</title><rect x="762.6" y="341" width="0.2" height="15.0" fill="rgb(220,70,1)" rx="2" ry="2" />
<text  x="765.62" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="609.6" y="405" width="0.3" height="15.0" fill="rgb(252,156,40)" rx="2" ry="2" />
<text  x="612.65" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="713.1" y="501" width="0.5" height="15.0" fill="rgb(248,70,53)" rx="2" ry="2" />
<text  x="716.14" y="511.5" ></text>
</g>
<g >
<title>ser::writer_of_deletable_row&lt;bytes_ostream&gt;::write_key (1 samples, 0.02%)</title><rect x="1124.6" y="165" width="0.3" height="15.0" fill="rgb(240,81,12)" rx="2" ry="2" />
<text  x="1127.63" y="175.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="62.2" y="341" width="0.2" height="15.0" fill="rgb(244,49,36)" rx="2" ry="2" />
<text  x="65.20" y="351.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="895.2" y="357" width="0.2" height="15.0" fill="rgb(210,166,13)" rx="2" ry="2" />
<text  x="898.17" y="367.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (55 samples, 1.06%)</title><rect x="1167.8" y="661" width="12.4" height="15.0" fill="rgb(251,104,0)" rx="2" ry="2" />
<text  x="1170.76" y="671.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="1146.9" y="469" width="1.1" height="15.0" fill="rgb(246,137,44)" rx="2" ry="2" />
<text  x="1149.88" y="479.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="522.5" y="229" width="0.2" height="15.0" fill="rgb(240,215,31)" rx="2" ry="2" />
<text  x="525.49" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::expr::expression::impl&gt;, void&gt; (1 samples, 0.02%)</title><rect x="57.0" y="277" width="0.2" height="15.0" fill="rgb(241,107,7)" rx="2" ry="2" />
<text  x="59.98" y="287.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="99.4" y="501" width="1.4" height="15.0" fill="rgb(219,211,15)" rx="2" ry="2" />
<text  x="102.42" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="832.1" y="389" width="0.4" height="15.0" fill="rgb(214,27,45)" rx="2" ry="2" />
<text  x="835.07" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (6 samples, 0.12%)</title><rect x="1121.7" y="229" width="1.3" height="15.0" fill="rgb(250,99,28)" rx="2" ry="2" />
<text  x="1124.68" y="239.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="49.3" y="293" width="0.6" height="15.0" fill="rgb(252,24,52)" rx="2" ry="2" />
<text  x="52.27" y="303.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="607.6" y="421" width="0.9" height="15.0" fill="rgb(252,167,48)" rx="2" ry="2" />
<text  x="610.60" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="82.9" y="501" width="0.2" height="15.0" fill="rgb(249,132,11)" rx="2" ry="2" />
<text  x="85.86" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="1026.8" y="277" width="0.9" height="15.0" fill="rgb(227,47,44)" rx="2" ry="2" />
<text  x="1029.81" y="287.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::sharded&lt;database&gt;::stop (1 samples, 0.02%)</title><rect x="703.2" y="533" width="0.2" height="15.0" fill="rgb(254,77,2)" rx="2" ry="2" />
<text  x="706.16" y="543.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="11.1" y="613" width="0.3" height="15.0" fill="rgb(211,85,15)" rx="2" ry="2" />
<text  x="14.13" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, bool&gt; (1 samples, 0.02%)</title><rect x="70.1" y="421" width="0.3" height="15.0" fill="rgb(234,130,21)" rx="2" ry="2" />
<text  x="73.15" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="431.0" y="245" width="0.3" height="15.0" fill="rgb(219,40,35)" rx="2" ry="2" />
<text  x="434.02" y="255.5" ></text>
</g>
<g >
<title>database::has_keyspace (10 samples, 0.19%)</title><rect x="851.8" y="453" width="2.3" height="15.0" fill="rgb(214,91,1)" rx="2" ry="2" />
<text  x="854.82" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="690.0" y="469" width="0.2" height="15.0" fill="rgb(236,176,3)" rx="2" ry="2" />
<text  x="692.99" y="479.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (21 samples, 0.40%)</title><rect x="925.4" y="421" width="4.7" height="15.0" fill="rgb(226,212,39)" rx="2" ry="2" />
<text  x="928.36" y="431.5" ></text>
</g>
<g >
<title>frozen_mutation::column_family_id (1 samples, 0.02%)</title><rect x="1120.3" y="357" width="0.2" height="15.0" fill="rgb(212,82,14)" rx="2" ry="2" />
<text  x="1123.32" y="367.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="54.7" y="133" width="0.2" height="15.0" fill="rgb(217,78,54)" rx="2" ry="2" />
<text  x="57.71" y="143.5" ></text>
</g>
<g >
<title>std::move&lt;std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="59.7" y="341" width="0.2" height="15.0" fill="rgb(248,169,9)" rx="2" ry="2" />
<text  x="62.71" y="351.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (42 samples, 0.81%)</title><rect x="1059.0" y="309" width="9.6" height="15.0" fill="rgb(232,206,41)" rx="2" ry="2" />
<text  x="1062.04" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="156.4" y="453" width="0.4" height="15.0" fill="rgb(233,161,32)" rx="2" ry="2" />
<text  x="159.39" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relationType (1 samples, 0.02%)</title><rect x="62.2" y="357" width="0.2" height="15.0" fill="rgb(207,142,24)" rx="2" ry="2" />
<text  x="65.20" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;9ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="57.4" y="117" width="0.3" height="15.0" fill="rgb(208,71,22)" rx="2" ry="2" />
<text  x="60.44" y="127.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="507.7" y="245" width="0.3" height="15.0" fill="rgb(220,94,11)" rx="2" ry="2" />
<text  x="510.74" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="58.3" y="149" width="0.5" height="15.0" fill="rgb(227,205,43)" rx="2" ry="2" />
<text  x="61.34" y="159.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (61 samples, 1.17%)</title><rect x="494.6" y="325" width="13.8" height="15.0" fill="rgb(247,65,11)" rx="2" ry="2" />
<text  x="497.57" y="335.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="601.2" y="405" width="0.3" height="15.0" fill="rgb(227,110,15)" rx="2" ry="2" />
<text  x="604.25" y="415.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (2 samples, 0.04%)</title><rect x="50.6" y="325" width="0.5" height="15.0" fill="rgb(230,97,51)" rx="2" ry="2" />
<text  x="53.63" y="335.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="973.5" y="389" width="0.2" height="15.0" fill="rgb(245,17,44)" rx="2" ry="2" />
<text  x="976.47" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.10%)</title><rect x="586.9" y="325" width="1.2" height="15.0" fill="rgb(211,211,47)" rx="2" ry="2" />
<text  x="589.95" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="45.4" y="277" width="0.2" height="15.0" fill="rgb(208,70,53)" rx="2" ry="2" />
<text  x="48.41" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%)</title><rect x="850.5" y="453" width="0.4" height="15.0" fill="rgb(231,19,45)" rx="2" ry="2" />
<text  x="853.46" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="254.9" y="149" width="0.2" height="15.0" fill="rgb(253,106,23)" rx="2" ry="2" />
<text  x="257.90" y="159.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (5 samples, 0.10%)</title><rect x="1131.2" y="533" width="1.2" height="15.0" fill="rgb(231,65,14)" rx="2" ry="2" />
<text  x="1134.22" y="543.5" ></text>
</g>
<g >
<title>abstract_type::is_counter (1 samples, 0.02%)</title><rect x="113.7" y="341" width="0.3" height="15.0" fill="rgb(234,154,40)" rx="2" ry="2" />
<text  x="116.72" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (1 samples, 0.02%)</title><rect x="207.7" y="277" width="0.2" height="15.0" fill="rgb(250,29,43)" rx="2" ry="2" />
<text  x="210.69" y="287.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (2 samples, 0.04%)</title><rect x="1163.0" y="437" width="0.4" height="15.0" fill="rgb(208,5,40)" rx="2" ry="2" />
<text  x="1165.99" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (2 samples, 0.04%)</title><rect x="893.4" y="437" width="0.4" height="15.0" fill="rgb(249,192,32)" rx="2" ry="2" />
<text  x="896.35" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (2 samples, 0.04%)</title><rect x="78.3" y="405" width="0.5" height="15.0" fill="rgb(214,144,3)" rx="2" ry="2" />
<text  x="81.32" y="415.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (1 samples, 0.02%)</title><rect x="113.0" y="485" width="0.3" height="15.0" fill="rgb(223,23,47)" rx="2" ry="2" />
<text  x="116.04" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="468.2" y="293" width="0.3" height="15.0" fill="rgb(243,99,46)" rx="2" ry="2" />
<text  x="471.25" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (4 samples, 0.08%)</title><rect x="1044.3" y="325" width="0.9" height="15.0" fill="rgb(243,160,27)" rx="2" ry="2" />
<text  x="1047.29" y="335.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (3 samples, 0.06%)</title><rect x="594.9" y="389" width="0.7" height="15.0" fill="rgb(209,127,28)" rx="2" ry="2" />
<text  x="597.89" y="399.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (2 samples, 0.04%)</title><rect x="82.9" y="533" width="0.4" height="15.0" fill="rgb(242,138,24)" rx="2" ry="2" />
<text  x="85.86" y="543.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%)</title><rect x="216.5" y="261" width="0.3" height="15.0" fill="rgb(211,73,45)" rx="2" ry="2" />
<text  x="219.54" y="271.5" ></text>
</g>
<g >
<title>db::view::node_update_backlog::add_fetch (1 samples, 0.02%)</title><rect x="726.8" y="517" width="0.2" height="15.0" fill="rgb(241,228,30)" rx="2" ry="2" />
<text  x="729.76" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="79.9" y="389" width="0.2" height="15.0" fill="rgb(205,211,20)" rx="2" ry="2" />
<text  x="82.91" y="399.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (15 samples, 0.29%)</title><rect x="607.6" y="437" width="3.4" height="15.0" fill="rgb(213,121,10)" rx="2" ry="2" />
<text  x="610.60" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (25 samples, 0.48%)</title><rect x="872.5" y="437" width="5.6" height="15.0" fill="rgb(231,162,54)" rx="2" ry="2" />
<text  x="875.47" y="447.5" ></text>
</g>
<g >
<title>schema_mutations::partitioner (1 samples, 0.02%)</title><rect x="113.5" y="421" width="0.2" height="15.0" fill="rgb(233,57,43)" rx="2" ry="2" />
<text  x="116.50" y="431.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="873.8" y="373" width="0.3" height="15.0" fill="rgb(236,214,21)" rx="2" ry="2" />
<text  x="876.84" y="383.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="606.7" y="437" width="0.7" height="15.0" fill="rgb(207,35,10)" rx="2" ry="2" />
<text  x="609.70" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%)</title><rect x="1023.4" y="261" width="0.2" height="15.0" fill="rgb(212,12,54)" rx="2" ry="2" />
<text  x="1026.41" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="143.2" y="485" width="0.3" height="15.0" fill="rgb(241,147,52)" rx="2" ry="2" />
<text  x="146.23" y="495.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="619.0" y="469" width="0.4" height="15.0" fill="rgb(253,206,17)" rx="2" ry="2" />
<text  x="621.95" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1016.8" y="213" width="0.3" height="15.0" fill="rgb(234,126,51)" rx="2" ry="2" />
<text  x="1019.82" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (4 samples, 0.08%)</title><rect x="56.8" y="309" width="0.9" height="15.0" fill="rgb(253,27,44)" rx="2" ry="2" />
<text  x="59.76" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="41.5" y="261" width="0.3" height="15.0" fill="rgb(214,194,22)" rx="2" ry="2" />
<text  x="44.55" y="271.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::create_cdc_desc (1 samples, 0.02%)</title><rect x="112.8" y="533" width="0.2" height="15.0" fill="rgb(239,97,21)" rx="2" ry="2" />
<text  x="115.82" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="62.7" y="213" width="0.2" height="15.0" fill="rgb(207,119,54)" rx="2" ry="2" />
<text  x="65.66" y="223.5" ></text>
</g>
<g >
<title>query::result_set::result_set (1 samples, 0.02%)</title><rect x="113.5" y="405" width="0.2" height="15.0" fill="rgb(249,115,26)" rx="2" ry="2" />
<text  x="116.50" y="415.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (53 samples, 1.02%)</title><rect x="495.9" y="309" width="12.1" height="15.0" fill="rgb(251,129,27)" rx="2" ry="2" />
<text  x="498.94" y="319.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1164.4" y="405" width="0.2" height="15.0" fill="rgb(236,77,30)" rx="2" ry="2" />
<text  x="1167.35" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (16 samples, 0.31%)</title><rect x="1123.5" y="341" width="3.6" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1126.50" y="351.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="864.8" y="501" width="0.2" height="15.0" fill="rgb(239,15,25)" rx="2" ry="2" />
<text  x="867.76" y="511.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::column_identifier_raw, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (2 samples, 0.04%)</title><rect x="46.8" y="357" width="0.4" height="15.0" fill="rgb(229,95,38)" rx="2" ry="2" />
<text  x="49.77" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (2 samples, 0.04%)</title><rect x="944.0" y="389" width="0.4" height="15.0" fill="rgb(250,123,32)" rx="2" ry="2" />
<text  x="946.97" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (5 samples, 0.10%)</title><rect x="1146.9" y="485" width="1.1" height="15.0" fill="rgb(221,124,52)" rx="2" ry="2" />
<text  x="1149.88" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="924.4" y="373" width="0.3" height="15.0" fill="rgb(232,194,35)" rx="2" ry="2" />
<text  x="927.45" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="820.0" y="277" width="0.3" height="15.0" fill="rgb(219,1,13)" rx="2" ry="2" />
<text  x="823.04" y="287.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="20.0" y="213" width="0.2" height="15.0" fill="rgb(246,136,22)" rx="2" ry="2" />
<text  x="22.99" y="223.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (288 samples, 5.54%)</title><rect x="18.4" y="613" width="65.4" height="15.0" fill="rgb(225,74,47)" rx="2" ry="2" />
<text  x="21.40" y="623.5" >seastar..</text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%)</title><rect x="20.2" y="309" width="0.2" height="15.0" fill="rgb(212,226,11)" rx="2" ry="2" />
<text  x="23.21" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="61.7" y="277" width="0.3" height="15.0" fill="rgb(228,147,14)" rx="2" ry="2" />
<text  x="64.75" y="287.5" ></text>
</g>
<g >
<title>do_lookup_x (1 samples, 0.02%)</title><rect x="1180.2" y="661" width="0.3" height="15.0" fill="rgb(252,165,32)" rx="2" ry="2" />
<text  x="1183.24" y="671.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (9 samples, 0.17%)</title><rect x="574.5" y="357" width="2.0" height="15.0" fill="rgb(242,30,52)" rx="2" ry="2" />
<text  x="577.47" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (2 samples, 0.04%)</title><rect x="1128.9" y="517" width="0.5" height="15.0" fill="rgb(210,125,7)" rx="2" ry="2" />
<text  x="1131.95" y="527.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="605.8" y="437" width="0.4" height="15.0" fill="rgb(210,60,10)" rx="2" ry="2" />
<text  x="608.79" y="447.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1113.7" y="181" width="0.3" height="15.0" fill="rgb(253,33,40)" rx="2" ry="2" />
<text  x="1116.74" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (9 samples, 0.17%)</title><rect x="272.4" y="213" width="2.0" height="15.0" fill="rgb(222,170,5)" rx="2" ry="2" />
<text  x="275.37" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (1 samples, 0.02%)</title><rect x="90.3" y="549" width="0.3" height="15.0" fill="rgb(209,170,33)" rx="2" ry="2" />
<text  x="93.35" y="559.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="137.6" y="405" width="0.2" height="15.0" fill="rgb(233,78,16)" rx="2" ry="2" />
<text  x="140.56" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (13 samples, 0.25%)</title><rect x="744.0" y="341" width="3.0" height="15.0" fill="rgb(235,37,10)" rx="2" ry="2" />
<text  x="747.01" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="532.5" y="325" width="0.2" height="15.0" fill="rgb(247,78,0)" rx="2" ry="2" />
<text  x="535.48" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="937.8" y="421" width="0.3" height="15.0" fill="rgb(210,225,4)" rx="2" ry="2" />
<text  x="940.84" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.10%)</title><rect x="531.3" y="309" width="1.2" height="15.0" fill="rgb(226,151,6)" rx="2" ry="2" />
<text  x="534.34" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::shared_ptr (1 samples, 0.02%)</title><rect x="60.4" y="357" width="0.2" height="15.0" fill="rgb(243,195,38)" rx="2" ry="2" />
<text  x="63.39" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (3 samples, 0.06%)</title><rect x="729.9" y="533" width="0.7" height="15.0" fill="rgb(234,200,4)" rx="2" ry="2" />
<text  x="732.94" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="554.5" y="357" width="0.2" height="15.0" fill="rgb(214,55,38)" rx="2" ry="2" />
<text  x="557.49" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1055.2" y="341" width="0.4" height="15.0" fill="rgb(223,152,35)" rx="2" ry="2" />
<text  x="1058.18" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::emplace_back&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%)</title><rect x="1125.1" y="117" width="0.2" height="15.0" fill="rgb(217,3,23)" rx="2" ry="2" />
<text  x="1128.09" y="127.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::mhtraits&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, boost::intrusive::list_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="742.0" y="421" width="0.2" height="15.0" fill="rgb(215,165,17)" rx="2" ry="2" />
<text  x="744.97" y="431.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (2 samples, 0.04%)</title><rect x="972.1" y="389" width="0.5" height="15.0" fill="rgb(225,134,35)" rx="2" ry="2" />
<text  x="975.11" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="934.0" y="421" width="0.2" height="15.0" fill="rgb(229,145,51)" rx="2" ry="2" />
<text  x="936.98" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="558.6" y="421" width="0.2" height="15.0" fill="rgb(241,18,41)" rx="2" ry="2" />
<text  x="561.58" y="431.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (3 samples, 0.06%)</title><rect x="1166.2" y="661" width="0.6" height="15.0" fill="rgb(232,4,33)" rx="2" ry="2" />
<text  x="1169.17" y="671.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (1 samples, 0.02%)</title><rect x="344.1" y="245" width="0.2" height="15.0" fill="rgb(218,27,0)" rx="2" ry="2" />
<text  x="347.10" y="255.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="548.1" y="309" width="0.3" height="15.0" fill="rgb(211,11,35)" rx="2" ry="2" />
<text  x="551.14" y="319.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="212.9" y="229" width="0.5" height="15.0" fill="rgb(245,217,0)" rx="2" ry="2" />
<text  x="215.91" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_initial_clustering_key_restrictions (1 samples, 0.02%)</title><rect x="78.1" y="405" width="0.2" height="15.0" fill="rgb(216,19,46)" rx="2" ry="2" />
<text  x="81.09" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="852.0" y="421" width="0.3" height="15.0" fill="rgb(251,183,40)" rx="2" ry="2" />
<text  x="855.05" y="431.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (1 samples, 0.02%)</title><rect x="993.2" y="325" width="0.2" height="15.0" fill="rgb(217,130,37)" rx="2" ry="2" />
<text  x="996.22" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="840.7" y="357" width="0.2" height="15.0" fill="rgb(211,147,41)" rx="2" ry="2" />
<text  x="843.70" y="367.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%)</title><rect x="112.8" y="309" width="0.2" height="15.0" fill="rgb(223,50,19)" rx="2" ry="2" />
<text  x="115.82" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (3 samples, 0.06%)</title><rect x="843.6" y="437" width="0.7" height="15.0" fill="rgb(227,194,2)" rx="2" ry="2" />
<text  x="846.65" y="447.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (276 samples, 5.31%)</title><rect x="780.1" y="437" width="62.6" height="15.0" fill="rgb(239,87,52)" rx="2" ry="2" />
<text  x="783.10" y="447.5" >servic..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="49.9" y="229" width="0.5" height="15.0" fill="rgb(243,147,11)" rx="2" ry="2" />
<text  x="52.95" y="239.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%)</title><rect x="20.2" y="421" width="0.2" height="15.0" fill="rgb(205,126,14)" rx="2" ry="2" />
<text  x="23.21" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_Alloc_node&gt; (1 samples, 0.02%)</title><rect x="872.2" y="229" width="0.3" height="15.0" fill="rgb(207,211,32)" rx="2" ry="2" />
<text  x="875.25" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;6ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="57.4" y="69" width="0.3" height="15.0" fill="rgb(224,7,33)" rx="2" ry="2" />
<text  x="60.44" y="79.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.62%)</title><rect x="1120.5" y="485" width="7.3" height="15.0" fill="rgb(244,144,31)" rx="2" ry="2" />
<text  x="1123.55" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="782.8" y="373" width="0.2" height="15.0" fill="rgb(240,184,11)" rx="2" ry="2" />
<text  x="785.82" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (3 samples, 0.06%)</title><rect x="1150.5" y="485" width="0.7" height="15.0" fill="rgb(232,74,25)" rx="2" ry="2" />
<text  x="1153.51" y="495.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1 samples, 0.02%)</title><rect x="90.6" y="549" width="0.2" height="15.0" fill="rgb(239,76,40)" rx="2" ry="2" />
<text  x="93.57" y="559.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%)</title><rect x="20.4" y="453" width="0.3" height="15.0" fill="rgb(234,158,16)" rx="2" ry="2" />
<text  x="23.44" y="463.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="581.7" y="325" width="1.2" height="15.0" fill="rgb(222,43,18)" rx="2" ry="2" />
<text  x="584.73" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="873.2" y="341" width="0.2" height="15.0" fill="rgb(251,44,48)" rx="2" ry="2" />
<text  x="876.15" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%)</title><rect x="756.0" y="341" width="0.3" height="15.0" fill="rgb(245,201,0)" rx="2" ry="2" />
<text  x="759.04" y="351.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="269.6" y="229" width="0.3" height="15.0" fill="rgb(237,191,19)" rx="2" ry="2" />
<text  x="272.65" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="665.5" y="437" width="0.2" height="15.0" fill="rgb(207,110,39)" rx="2" ry="2" />
<text  x="668.48" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier_raw&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (2 samples, 0.04%)</title><rect x="46.8" y="325" width="0.4" height="15.0" fill="rgb(244,158,18)" rx="2" ry="2" />
<text  x="49.77" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="61.1" y="325" width="0.2" height="15.0" fill="rgb(243,102,22)" rx="2" ry="2" />
<text  x="64.07" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (3 samples, 0.06%)</title><rect x="782.8" y="405" width="0.7" height="15.0" fill="rgb(214,172,19)" rx="2" ry="2" />
<text  x="785.82" y="415.5" ></text>
</g>
<g >
<title>query::querier_base::close (143 samples, 2.75%)</title><rect x="570.2" y="469" width="32.4" height="15.0" fill="rgb(205,162,41)" rx="2" ry="2" />
<text  x="573.15" y="479.5" >qu..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (9 samples, 0.17%)</title><rect x="1144.8" y="485" width="2.1" height="15.0" fill="rgb(233,123,3)" rx="2" ry="2" />
<text  x="1147.83" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="857.0" y="405" width="1.6" height="15.0" fill="rgb(230,137,33)" rx="2" ry="2" />
<text  x="860.04" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%)</title><rect x="578.8" y="309" width="0.4" height="15.0" fill="rgb(225,23,28)" rx="2" ry="2" />
<text  x="581.78" y="319.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,748 samples, 91.33%)</title><rect x="88.5" y="613" width="1077.7" height="15.0" fill="rgb(234,132,6)" rx="2" ry="2" />
<text  x="91.53" y="623.5" >seastar::app_template::run</text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_cql (1 samples, 0.02%)</title><rect x="82.2" y="517" width="0.2" height="15.0" fill="rgb(231,223,3)" rx="2" ry="2" />
<text  x="85.18" y="527.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="770.8" y="437" width="1.8" height="15.0" fill="rgb(240,206,33)" rx="2" ry="2" />
<text  x="773.79" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;std::vector&lt;cql3::query_options, std::allocator&lt;cql3::query_options&gt; &gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="687.7" y="501" width="0.2" height="15.0" fill="rgb(213,69,4)" rx="2" ry="2" />
<text  x="690.72" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="265.6" y="181" width="0.2" height="15.0" fill="rgb(224,136,20)" rx="2" ry="2" />
<text  x="268.56" y="191.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%)</title><rect x="317.5" y="325" width="0.5" height="15.0" fill="rgb(233,133,49)" rx="2" ry="2" />
<text  x="320.54" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="1022.7" y="197" width="0.3" height="15.0" fill="rgb(235,52,43)" rx="2" ry="2" />
<text  x="1025.73" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (5 samples, 0.10%)</title><rect x="1095.6" y="389" width="1.1" height="15.0" fill="rgb(211,93,38)" rx="2" ry="2" />
<text  x="1098.58" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="597.2" y="373" width="0.2" height="15.0" fill="rgb(240,206,14)" rx="2" ry="2" />
<text  x="600.16" y="383.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (9 samples, 0.17%)</title><rect x="379.0" y="197" width="2.1" height="15.0" fill="rgb(225,27,45)" rx="2" ry="2" />
<text  x="382.05" y="207.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (3 samples, 0.06%)</title><rect x="58.1" y="277" width="0.7" height="15.0" fill="rgb(226,96,13)" rx="2" ry="2" />
<text  x="61.12" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="56.1" y="181" width="0.4" height="15.0" fill="rgb(237,139,21)" rx="2" ry="2" />
<text  x="59.07" y="191.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (6 samples, 0.12%)</title><rect x="839.1" y="341" width="1.4" height="15.0" fill="rgb(213,132,19)" rx="2" ry="2" />
<text  x="842.11" y="351.5" ></text>
</g>
<g >
<title>posix_memalign (3 samples, 0.06%)</title><rect x="251.0" y="117" width="0.7" height="15.0" fill="rgb(230,10,14)" rx="2" ry="2" />
<text  x="254.04" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.10%)</title><rect x="1006.8" y="245" width="1.2" height="15.0" fill="rgb(243,162,34)" rx="2" ry="2" />
<text  x="1009.84" y="255.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (1 samples, 0.02%)</title><rect x="906.1" y="373" width="0.2" height="15.0" fill="rgb(226,152,5)" rx="2" ry="2" />
<text  x="909.06" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (4,747 samples, 91.31%)</title><rect x="88.5" y="565" width="1077.4" height="15.0" fill="rgb(235,67,3)" rx="2" ry="2" />
<text  x="91.53" y="575.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt; &gt;  (1 samples, 0.02%)</title><rect x="76.3" y="325" width="0.2" height="15.0" fill="rgb(247,224,18)" rx="2" ry="2" />
<text  x="79.27" y="335.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (1 samples, 0.02%)</title><rect x="259.7" y="149" width="0.2" height="15.0" fill="rgb(244,54,0)" rx="2" ry="2" />
<text  x="262.66" y="159.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="953.0" y="421" width="0.3" height="15.0" fill="rgb(236,100,47)" rx="2" ry="2" />
<text  x="956.05" y="431.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_890c8f4026fb5657cc774dcb869d5487d413f0d3] (1 samples, 0.02%)</title><rect x="691.1" y="517" width="0.3" height="15.0" fill="rgb(208,178,2)" rx="2" ry="2" />
<text  x="694.13" y="527.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (5 samples, 0.10%)</title><rect x="923.5" y="421" width="1.2" height="15.0" fill="rgb(216,3,18)" rx="2" ry="2" />
<text  x="926.54" y="431.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="20.2" y="357" width="0.2" height="15.0" fill="rgb(230,140,46)" rx="2" ry="2" />
<text  x="23.21" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="63.1" y="277" width="0.2" height="15.0" fill="rgb(207,106,15)" rx="2" ry="2" />
<text  x="66.11" y="287.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (3 samples, 0.06%)</title><rect x="49.3" y="325" width="0.6" height="15.0" fill="rgb(247,90,39)" rx="2" ry="2" />
<text  x="52.27" y="335.5" ></text>
</g>
<g >
<title>dht::tri_compare (14 samples, 0.27%)</title><rect x="1065.2" y="261" width="3.1" height="15.0" fill="rgb(231,191,20)" rx="2" ry="2" />
<text  x="1068.17" y="271.5" ></text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%)</title><rect x="20.4" y="469" width="0.3" height="15.0" fill="rgb(249,60,11)" rx="2" ry="2" />
<text  x="23.44" y="479.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (37 samples, 0.71%)</title><rect x="602.6" y="469" width="8.4" height="15.0" fill="rgb(251,40,12)" rx="2" ry="2" />
<text  x="605.61" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="1054.5" y="341" width="0.7" height="15.0" fill="rgb(232,169,21)" rx="2" ry="2" />
<text  x="1057.50" y="351.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%)</title><rect x="444.2" y="293" width="1.8" height="15.0" fill="rgb(231,0,47)" rx="2" ry="2" />
<text  x="447.19" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (5 samples, 0.10%)</title><rect x="585.4" y="309" width="1.1" height="15.0" fill="rgb(252,178,51)" rx="2" ry="2" />
<text  x="588.36" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1097.9" y="421" width="0.2" height="15.0" fill="rgb(242,222,33)" rx="2" ry="2" />
<text  x="1100.85" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (1 samples, 0.02%)</title><rect x="78.3" y="341" width="0.2" height="15.0" fill="rgb(252,173,7)" rx="2" ry="2" />
<text  x="81.32" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (15 samples, 0.29%)</title><rect x="1043.6" y="357" width="3.4" height="15.0" fill="rgb(217,125,41)" rx="2" ry="2" />
<text  x="1046.61" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, auth::standard_role_manager::create (1 samples, 0.02%)</title><rect x="700.9" y="533" width="0.2" height="15.0" fill="rgb(253,44,11)" rx="2" ry="2" />
<text  x="703.89" y="543.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="701.6" y="389" width="0.2" height="15.0" fill="rgb(219,141,47)" rx="2" ry="2" />
<text  x="704.57" y="399.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_group::metric_group (1 samples, 0.02%)</title><rect x="872.2" y="325" width="0.3" height="15.0" fill="rgb(239,118,15)" rx="2" ry="2" />
<text  x="875.25" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (16 samples, 0.31%)</title><rect x="776.2" y="405" width="3.7" height="15.0" fill="rgb(207,135,34)" rx="2" ry="2" />
<text  x="779.24" y="415.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="478.7" y="325" width="0.7" height="15.0" fill="rgb(235,22,17)" rx="2" ry="2" />
<text  x="481.69" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (1 samples, 0.02%)</title><rect x="23.8" y="357" width="0.3" height="15.0" fill="rgb(219,174,33)" rx="2" ry="2" />
<text  x="26.84" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="475.3" y="325" width="0.7" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="478.28" y="335.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%)</title><rect x="217.2" y="261" width="0.2" height="15.0" fill="rgb(209,66,34)" rx="2" ry="2" />
<text  x="220.22" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (6 samples, 0.12%)</title><rect x="761.3" y="341" width="1.3" height="15.0" fill="rgb(206,83,43)" rx="2" ry="2" />
<text  x="764.26" y="351.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%)</title><rect x="29.7" y="293" width="0.3" height="15.0" fill="rgb(243,85,33)" rx="2" ry="2" />
<text  x="32.75" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;secondary_index::index, std::allocator&lt;secondary_index::index&gt; &gt;::vector&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_const&lt;std::unordered_map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, secondary_index::index, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, secondary_index::index&gt; &gt; &gt; &gt;, std::__detail::_Node_const_iterator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, secondary_index::index&gt;, false, true&gt;, boost::use_default, boost::use_default&gt;, void&gt; (1 samples, 0.02%)</title><rect x="75.8" y="373" width="0.2" height="15.0" fill="rgb(251,56,9)" rx="2" ry="2" />
<text  x="78.82" y="383.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (11 samples, 0.21%)</title><rect x="693.4" y="501" width="2.5" height="15.0" fill="rgb(239,222,42)" rx="2" ry="2" />
<text  x="696.40" y="511.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (6 samples, 0.12%)</title><rect x="412.2" y="213" width="1.3" height="15.0" fill="rgb(229,95,1)" rx="2" ry="2" />
<text  x="415.19" y="223.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (39 samples, 0.75%)</title><rect x="1111.7" y="453" width="8.8" height="15.0" fill="rgb(244,100,52)" rx="2" ry="2" />
<text  x="1114.70" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="1082.0" y="373" width="0.2" height="15.0" fill="rgb(240,158,44)" rx="2" ry="2" />
<text  x="1084.96" y="383.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (2 samples, 0.04%)</title><rect x="20.2" y="533" width="0.5" height="15.0" fill="rgb(230,153,34)" rx="2" ry="2" />
<text  x="23.21" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="253.3" y="149" width="0.2" height="15.0" fill="rgb(236,160,13)" rx="2" ry="2" />
<text  x="256.31" y="159.5" ></text>
</g>
<g >
<title>__ieee754_exp_fma (1 samples, 0.02%)</title><rect x="114.0" y="405" width="0.2" height="15.0" fill="rgb(205,73,54)" rx="2" ry="2" />
<text  x="116.95" y="415.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (12 samples, 0.23%)</title><rect x="85.6" y="645" width="2.7" height="15.0" fill="rgb(243,1,7)" rx="2" ry="2" />
<text  x="88.58" y="655.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt;::StackType (1 samples, 0.02%)</title><rect x="24.1" y="357" width="0.2" height="15.0" fill="rgb(246,127,27)" rx="2" ry="2" />
<text  x="27.07" y="367.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (137 samples, 2.64%)</title><rect x="371.6" y="213" width="31.1" height="15.0" fill="rgb(216,47,43)" rx="2" ry="2" />
<text  x="374.56" y="223.5" >wr..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="50.4" y="229" width="0.2" height="15.0" fill="rgb(217,219,23)" rx="2" ry="2" />
<text  x="53.40" y="239.5" ></text>
</g>
<g >
<title>posix_memalign (9 samples, 0.17%)</title><rect x="245.4" y="85" width="2.0" height="15.0" fill="rgb(238,209,10)" rx="2" ry="2" />
<text  x="248.36" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%)</title><rect x="689.1" y="485" width="0.4" height="15.0" fill="rgb(249,39,9)" rx="2" ry="2" />
<text  x="692.08" y="495.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::create_scheduling_group (1 samples, 0.02%)</title><rect x="114.2" y="485" width="0.2" height="15.0" fill="rgb(254,22,0)" rx="2" ry="2" />
<text  x="117.18" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="139.4" y="421" width="0.2" height="15.0" fill="rgb(243,164,7)" rx="2" ry="2" />
<text  x="142.37" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (39 samples, 0.75%)</title><rect x="98.5" y="517" width="8.9" height="15.0" fill="rgb(218,127,3)" rx="2" ry="2" />
<text  x="101.52" y="527.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.23%)</title><rect x="965.3" y="389" width="2.7" height="15.0" fill="rgb(211,199,39)" rx="2" ry="2" />
<text  x="968.30" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (505 samples, 9.71%)</title><rect x="332.7" y="357" width="114.7" height="15.0" fill="rgb(214,40,7)" rx="2" ry="2" />
<text  x="335.75" y="367.5" >seastar::inter..</text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="1122.1" y="165" width="0.3" height="15.0" fill="rgb(248,59,32)" rx="2" ry="2" />
<text  x="1125.14" y="175.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%)</title><rect x="576.1" y="341" width="0.4" height="15.0" fill="rgb(245,152,46)" rx="2" ry="2" />
<text  x="579.06" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="1159.4" y="485" width="0.6" height="15.0" fill="rgb(232,167,0)" rx="2" ry="2" />
<text  x="1162.36" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (1 samples, 0.02%)</title><rect x="44.7" y="357" width="0.3" height="15.0" fill="rgb(208,40,39)" rx="2" ry="2" />
<text  x="47.73" y="367.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (2 samples, 0.04%)</title><rect x="87.4" y="421" width="0.4" height="15.0" fill="rgb(246,200,12)" rx="2" ry="2" />
<text  x="90.40" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (2 samples, 0.04%)</title><rect x="743.1" y="357" width="0.5" height="15.0" fill="rgb(209,51,5)" rx="2" ry="2" />
<text  x="746.10" y="367.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::reset&lt;cql3_parser::CqlParser&gt; (1 samples, 0.02%)</title><rect x="23.6" y="405" width="0.2" height="15.0" fill="rgb(222,180,39)" rx="2" ry="2" />
<text  x="26.62" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (33 samples, 0.63%)</title><rect x="519.1" y="277" width="7.5" height="15.0" fill="rgb(213,162,22)" rx="2" ry="2" />
<text  x="522.09" y="287.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%)</title><rect x="250.8" y="133" width="0.2" height="15.0" fill="rgb(211,183,8)" rx="2" ry="2" />
<text  x="253.81" y="143.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="874.3" y="373" width="0.2" height="15.0" fill="rgb(228,221,43)" rx="2" ry="2" />
<text  x="877.29" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="294.2" y="293" width="0.2" height="15.0" fill="rgb(251,148,26)" rx="2" ry="2" />
<text  x="297.16" y="303.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="112.4" y="405" width="0.2" height="15.0" fill="rgb(253,12,20)" rx="2" ry="2" />
<text  x="115.36" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="707.2" y="485" width="0.3" height="15.0" fill="rgb(236,36,37)" rx="2" ry="2" />
<text  x="710.24" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1124.9" y="181" width="0.2" height="15.0" fill="rgb(232,136,25)" rx="2" ry="2" />
<text  x="1127.86" y="191.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (2 samples, 0.04%)</title><rect x="850.5" y="469" width="0.4" height="15.0" fill="rgb(214,77,2)" rx="2" ry="2" />
<text  x="853.46" y="479.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (8 samples, 0.15%)</title><rect x="764.9" y="293" width="1.8" height="15.0" fill="rgb(214,106,43)" rx="2" ry="2" />
<text  x="767.89" y="303.5" ></text>
</g>
<g >
<title>dl_main (1 samples, 0.02%)</title><rect x="84.9" y="629" width="0.2" height="15.0" fill="rgb(236,152,14)" rx="2" ry="2" />
<text  x="87.90" y="639.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%)</title><rect x="743.3" y="341" width="0.3" height="15.0" fill="rgb(224,1,22)" rx="2" ry="2" />
<text  x="746.33" y="351.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_groups::add_group (1 samples, 0.02%)</title><rect x="872.2" y="309" width="0.3" height="15.0" fill="rgb(239,31,17)" rx="2" ry="2" />
<text  x="875.25" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="312.1" y="357" width="0.4" height="15.0" fill="rgb(253,115,43)" rx="2" ry="2" />
<text  x="315.09" y="367.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_metric (1 samples, 0.02%)</title><rect x="114.2" y="373" width="0.2" height="15.0" fill="rgb(238,6,45)" rx="2" ry="2" />
<text  x="117.18" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="451.2" y="405" width="0.3" height="15.0" fill="rgb(223,144,18)" rx="2" ry="2" />
<text  x="454.22" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="1124.0" y="165" width="0.4" height="15.0" fill="rgb(229,135,49)" rx="2" ry="2" />
<text  x="1126.95" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%)</title><rect x="1112.6" y="261" width="0.2" height="15.0" fill="rgb(249,17,45)" rx="2" ry="2" />
<text  x="1115.60" y="271.5" ></text>
</g>
<g >
<title>validation::validate_column_family (39 samples, 0.75%)</title><rect x="833.9" y="421" width="8.8" height="15.0" fill="rgb(235,200,52)" rx="2" ry="2" />
<text  x="836.89" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (21 samples, 0.40%)</title><rect x="651.9" y="517" width="4.7" height="15.0" fill="rgb(234,223,19)" rx="2" ry="2" />
<text  x="654.86" y="527.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="44.7" y="341" width="0.3" height="15.0" fill="rgb(248,80,21)" rx="2" ry="2" />
<text  x="47.73" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (14 samples, 0.27%)</title><rect x="444.2" y="309" width="3.2" height="15.0" fill="rgb(251,108,30)" rx="2" ry="2" />
<text  x="447.19" y="319.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="653.7" y="501" width="1.3" height="15.0" fill="rgb(216,69,43)" rx="2" ry="2" />
<text  x="656.68" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="784.4" y="357" width="0.5" height="15.0" fill="rgb(248,164,1)" rx="2" ry="2" />
<text  x="787.41" y="367.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (51 samples, 0.98%)</title><rect x="714.3" y="517" width="11.6" height="15.0" fill="rgb(229,49,11)" rx="2" ry="2" />
<text  x="717.28" y="527.5" ></text>
</g>
<g >
<title>tombstone::apply (1 samples, 0.02%)</title><rect x="426.3" y="229" width="0.2" height="15.0" fill="rgb(218,86,16)" rx="2" ry="2" />
<text  x="429.26" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;sstables::scylla_metadata_type, std::pair&lt;sstables::scylla_metadata_type const, boost::variant&lt;sstables::disk_tagged_union_member&lt;sstables::scylla_metadata_type,  (1 samples, 0.02%)</title><rect x="702.0" y="437" width="0.2" height="15.0" fill="rgb(254,26,0)" rx="2" ry="2" />
<text  x="705.02" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (2 samples, 0.04%)</title><rect x="881.3" y="485" width="0.5" height="15.0" fill="rgb(253,100,25)" rx="2" ry="2" />
<text  x="884.33" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (1 samples, 0.02%)</title><rect x="973.2" y="389" width="0.3" height="15.0" fill="rgb(209,226,40)" rx="2" ry="2" />
<text  x="976.25" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="979.4" y="341" width="1.6" height="15.0" fill="rgb(251,128,2)" rx="2" ry="2" />
<text  x="982.37" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="110.1" y="517" width="0.2" height="15.0" fill="rgb(213,146,54)" rx="2" ry="2" />
<text  x="113.09" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="54.5" y="293" width="0.4" height="15.0" fill="rgb(218,142,34)" rx="2" ry="2" />
<text  x="57.49" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_M_get_insert_unique_pos (1 samples, 0.02%)</title><rect x="113.0" y="373" width="0.3" height="15.0" fill="rgb(229,217,17)" rx="2" ry="2" />
<text  x="116.04" y="383.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple (1 samples, 0.02%)</title><rect x="52.4" y="197" width="0.3" height="15.0" fill="rgb(205,222,44)" rx="2" ry="2" />
<text  x="55.44" y="207.5" ></text>
</g>
<g >
<title>__libc_start_main (4,748 samples, 91.33%)</title><rect x="88.5" y="661" width="1077.7" height="15.0" fill="rgb(236,173,10)" rx="2" ry="2" />
<text  x="91.53" y="671.5" >__libc_start_main</text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="24.1" y="293" width="0.2" height="15.0" fill="rgb(227,135,52)" rx="2" ry="2" />
<text  x="27.07" y="303.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (3 samples, 0.06%)</title><rect x="57.0" y="293" width="0.7" height="15.0" fill="rgb(243,79,13)" rx="2" ry="2" />
<text  x="59.98" y="303.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::raw_value_view::validate (1 samples, 0.02%)</title><rect x="901.8" y="341" width="0.2" height="15.0" fill="rgb(205,126,42)" rx="2" ry="2" />
<text  x="904.75" y="351.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="80.1" y="405" width="0.3" height="15.0" fill="rgb(211,75,38)" rx="2" ry="2" />
<text  x="83.13" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="41.3" y="357" width="0.7" height="15.0" fill="rgb(205,120,42)" rx="2" ry="2" />
<text  x="44.32" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%)</title><rect x="270.1" y="245" width="0.2" height="15.0" fill="rgb(247,98,13)" rx="2" ry="2" />
<text  x="273.10" y="255.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="286.7" y="213" width="0.4" height="15.0" fill="rgb(242,116,12)" rx="2" ry="2" />
<text  x="289.67" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="55.2" y="325" width="0.2" height="15.0" fill="rgb(217,94,43)" rx="2" ry="2" />
<text  x="58.17" y="335.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::unregister_metric (1 samples, 0.02%)</title><rect x="703.2" y="293" width="0.2" height="15.0" fill="rgb(241,23,35)" rx="2" ry="2" />
<text  x="706.16" y="303.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="49.7" y="149" width="0.2" height="15.0" fill="rgb(241,45,24)" rx="2" ry="2" />
<text  x="52.72" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (8 samples, 0.15%)</title><rect x="860.4" y="421" width="1.9" height="15.0" fill="rgb(210,185,22)" rx="2" ry="2" />
<text  x="863.44" y="431.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="423.8" y="197" width="0.6" height="15.0" fill="rgb(242,185,29)" rx="2" ry="2" />
<text  x="426.76" y="207.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (4 samples, 0.08%)</title><rect x="603.1" y="437" width="0.9" height="15.0" fill="rgb(210,70,8)" rx="2" ry="2" />
<text  x="606.06" y="447.5" ></text>
</g>
<g >
<title>db::query_context::execute_cql&lt;&gt; (1 samples, 0.02%)</title><rect x="11.1" y="437" width="0.3" height="15.0" fill="rgb(244,148,41)" rx="2" ry="2" />
<text  x="14.13" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="673.0" y="485" width="0.4" height="15.0" fill="rgb(236,90,30)" rx="2" ry="2" />
<text  x="675.97" y="495.5" ></text>
</g>
<g >
<title>schema::registry_entry (1 samples, 0.02%)</title><rect x="998.9" y="293" width="0.2" height="15.0" fill="rgb(211,129,31)" rx="2" ry="2" />
<text  x="1001.89" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;db::replay_position, std::pair&lt;db::replay_position const, utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::notifier&gt;, std::_Select1st&lt;std::pair&lt;db::replay_position const, utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::notifier&gt; &gt;, std::less&lt;db::replay_position&gt;, std::allocator&lt;std::pair&lt;db::replay_position const, utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::notifier&gt; &gt; &gt;::erase[abi:cxx11] (1 samples, 0.02%)</title><rect x="727.7" y="421" width="0.2" height="15.0" fill="rgb(246,5,49)" rx="2" ry="2" />
<text  x="730.67" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="533.2" y="341" width="0.2" height="15.0" fill="rgb(236,136,3)" rx="2" ry="2" />
<text  x="536.16" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (1 samples, 0.02%)</title><rect x="88.1" y="501" width="0.2" height="15.0" fill="rgb(227,145,3)" rx="2" ry="2" />
<text  x="91.08" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (4 samples, 0.08%)</title><rect x="668.0" y="501" width="0.9" height="15.0" fill="rgb(215,83,43)" rx="2" ry="2" />
<text  x="670.98" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="1130.3" y="325" width="0.2" height="15.0" fill="rgb(227,195,39)" rx="2" ry="2" />
<text  x="1133.31" y="335.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (2 samples, 0.04%)</title><rect x="1163.0" y="469" width="0.4" height="15.0" fill="rgb(206,177,1)" rx="2" ry="2" />
<text  x="1165.99" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="657.8" y="501" width="0.2" height="15.0" fill="rgb(235,216,49)" rx="2" ry="2" />
<text  x="660.76" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (7 samples, 0.13%)</title><rect x="208.1" y="261" width="1.6" height="15.0" fill="rgb(218,188,21)" rx="2" ry="2" />
<text  x="211.14" y="271.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;, true&gt; (1 samples, 0.02%)</title><rect x="52.4" y="261" width="0.3" height="15.0" fill="rgb(236,31,39)" rx="2" ry="2" />
<text  x="55.44" y="271.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="72.2" y="405" width="0.2" height="15.0" fill="rgb(224,163,25)" rx="2" ry="2" />
<text  x="75.19" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (13 samples, 0.25%)</title><rect x="989.4" y="309" width="2.9" height="15.0" fill="rgb(235,87,20)" rx="2" ry="2" />
<text  x="992.36" y="319.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (2 samples, 0.04%)</title><rect x="128.5" y="485" width="0.4" height="15.0" fill="rgb(233,84,44)" rx="2" ry="2" />
<text  x="131.48" y="495.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="10.7" y="613" width="0.2" height="15.0" fill="rgb(228,125,50)" rx="2" ry="2" />
<text  x="13.68" y="623.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (9 samples, 0.17%)</title><rect x="831.6" y="405" width="2.1" height="15.0" fill="rgb(252,217,19)" rx="2" ry="2" />
<text  x="834.62" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="40.9" y="293" width="0.4" height="15.0" fill="rgb(214,108,54)" rx="2" ry="2" />
<text  x="43.87" y="303.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="262.4" y="197" width="0.4" height="15.0" fill="rgb(227,77,12)" rx="2" ry="2" />
<text  x="265.39" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (2 samples, 0.04%)</title><rect x="877.2" y="389" width="0.5" height="15.0" fill="rgb(221,10,27)" rx="2" ry="2" />
<text  x="880.24" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="633.5" y="421" width="0.2" height="15.0" fill="rgb(227,128,28)" rx="2" ry="2" />
<text  x="636.48" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (9 samples, 0.17%)</title><rect x="831.6" y="421" width="2.1" height="15.0" fill="rgb(213,100,40)" rx="2" ry="2" />
<text  x="834.62" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (1 samples, 0.02%)</title><rect x="19.8" y="549" width="0.2" height="15.0" fill="rgb(249,17,37)" rx="2" ry="2" />
<text  x="22.76" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (4 samples, 0.08%)</title><rect x="584.2" y="293" width="0.9" height="15.0" fill="rgb(205,74,14)" rx="2" ry="2" />
<text  x="587.23" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (12 samples, 0.23%)</title><rect x="965.3" y="373" width="2.7" height="15.0" fill="rgb(229,108,6)" rx="2" ry="2" />
<text  x="968.30" y="383.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (4 samples, 0.08%)</title><rect x="331.4" y="405" width="0.9" height="15.0" fill="rgb(247,13,28)" rx="2" ry="2" />
<text  x="334.38" y="415.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (60 samples, 1.15%)</title><rect x="804.4" y="293" width="13.6" height="15.0" fill="rgb(245,182,40)" rx="2" ry="2" />
<text  x="807.38" y="303.5" ></text>
</g>
<g >
<title>std::forward&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="28.4" y="277" width="0.2" height="15.0" fill="rgb(214,12,32)" rx="2" ry="2" />
<text  x="31.38" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="54.9" y="261" width="0.3" height="15.0" fill="rgb(237,125,27)" rx="2" ry="2" />
<text  x="57.94" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::io_submit (1 samples, 0.02%)</title><rect x="1164.1" y="533" width="0.3" height="15.0" fill="rgb(252,135,50)" rx="2" ry="2" />
<text  x="1167.13" y="543.5" ></text>
</g>
<g >
<title>schema_registry::learn (4 samples, 0.08%)</title><rect x="113.0" y="501" width="1.0" height="15.0" fill="rgb(246,155,52)" rx="2" ry="2" />
<text  x="116.04" y="511.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::update_parameters::make_cell (1 samples, 0.02%)</title><rect x="875.7" y="309" width="0.2" height="15.0" fill="rgb(245,57,52)" rx="2" ry="2" />
<text  x="878.65" y="319.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="47.7" y="357" width="0.2" height="15.0" fill="rgb(232,173,39)" rx="2" ry="2" />
<text  x="50.68" y="367.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (4 samples, 0.08%)</title><rect x="869.3" y="517" width="0.9" height="15.0" fill="rgb(247,213,53)" rx="2" ry="2" />
<text  x="872.30" y="527.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (3 samples, 0.06%)</title><rect x="623.0" y="437" width="0.7" height="15.0" fill="rgb(206,171,10)" rx="2" ry="2" />
<text  x="626.04" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="62.2" y="309" width="0.2" height="15.0" fill="rgb(222,199,50)" rx="2" ry="2" />
<text  x="65.20" y="319.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="40.2" y="213" width="0.2" height="15.0" fill="rgb(229,2,16)" rx="2" ry="2" />
<text  x="43.19" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (19 samples, 0.37%)</title><rect x="443.1" y="341" width="4.3" height="15.0" fill="rgb(251,195,51)" rx="2" ry="2" />
<text  x="446.05" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (678 samples, 13.04%)</title><rect x="173.6" y="437" width="153.9" height="15.0" fill="rgb(247,157,23)" rx="2" ry="2" />
<text  x="176.64" y="447.5" >flat_mutation_reade..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="393.3" y="181" width="1.2" height="15.0" fill="rgb(219,77,41)" rx="2" ry="2" />
<text  x="396.35" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="849.1" y="469" width="0.2" height="15.0" fill="rgb(236,107,23)" rx="2" ry="2" />
<text  x="852.10" y="479.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (4 samples, 0.08%)</title><rect x="81.0" y="437" width="0.9" height="15.0" fill="rgb(249,189,36)" rx="2" ry="2" />
<text  x="84.04" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="477.6" y="293" width="0.2" height="15.0" fill="rgb(242,206,34)" rx="2" ry="2" />
<text  x="480.55" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (5 samples, 0.10%)</title><rect x="76.0" y="373" width="1.2" height="15.0" fill="rgb(207,114,29)" rx="2" ry="2" />
<text  x="79.05" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (4 samples, 0.08%)</title><rect x="1148.0" y="485" width="0.9" height="15.0" fill="rgb(244,206,16)" rx="2" ry="2" />
<text  x="1151.01" y="495.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (14 samples, 0.27%)</title><rect x="1177.1" y="645" width="3.1" height="15.0" fill="rgb(209,207,12)" rx="2" ry="2" />
<text  x="1180.06" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (2 samples, 0.04%)</title><rect x="87.4" y="389" width="0.4" height="15.0" fill="rgb(245,216,14)" rx="2" ry="2" />
<text  x="90.40" y="399.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (7 samples, 0.13%)</title><rect x="812.1" y="181" width="1.6" height="15.0" fill="rgb(239,111,51)" rx="2" ry="2" />
<text  x="815.10" y="191.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="981.4" y="325" width="0.2" height="15.0" fill="rgb(227,88,11)" rx="2" ry="2" />
<text  x="984.42" y="335.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="1130.3" y="437" width="0.2" height="15.0" fill="rgb(237,167,43)" rx="2" ry="2" />
<text  x="1133.31" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="215.6" y="213" width="0.5" height="15.0" fill="rgb(248,218,15)" rx="2" ry="2" />
<text  x="218.63" y="223.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (9 samples, 0.17%)</title><rect x="35.0" y="277" width="2.0" height="15.0" fill="rgb(232,52,33)" rx="2" ry="2" />
<text  x="37.97" y="287.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (1 samples, 0.02%)</title><rect x="122.1" y="501" width="0.2" height="15.0" fill="rgb(227,62,11)" rx="2" ry="2" />
<text  x="125.12" y="511.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (1 samples, 0.02%)</title><rect x="738.3" y="485" width="0.3" height="15.0" fill="rgb(215,219,43)" rx="2" ry="2" />
<text  x="741.34" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flush_reader::fill_buffer (1 samples, 0.02%)</title><rect x="85.8" y="485" width="0.2" height="15.0" fill="rgb(216,179,17)" rx="2" ry="2" />
<text  x="88.81" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (30 samples, 0.58%)</title><rect x="295.5" y="325" width="6.8" height="15.0" fill="rgb(232,85,24)" rx="2" ry="2" />
<text  x="298.52" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (5 samples, 0.10%)</title><rect x="1145.7" y="453" width="1.2" height="15.0" fill="rgb(234,181,15)" rx="2" ry="2" />
<text  x="1148.74" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (79 samples, 1.52%)</title><rect x="661.8" y="533" width="18.0" height="15.0" fill="rgb(251,158,2)" rx="2" ry="2" />
<text  x="664.85" y="543.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="712.0" y="485" width="0.2" height="15.0" fill="rgb(224,209,29)" rx="2" ry="2" />
<text  x="715.01" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (1 samples, 0.02%)</title><rect x="869.3" y="437" width="0.2" height="15.0" fill="rgb(249,40,45)" rx="2" ry="2" />
<text  x="872.30" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="10.7" y="437" width="0.2" height="15.0" fill="rgb(206,135,6)" rx="2" ry="2" />
<text  x="13.68" y="447.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::list_service_level_statement*, std::default_delete&lt;cql3::statements::list_service_level_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%)</title><rect x="66.7" y="357" width="0.3" height="15.0" fill="rgb(226,179,50)" rx="2" ry="2" />
<text  x="69.74" y="367.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="704.1" y="517" width="0.6" height="15.0" fill="rgb(220,153,6)" rx="2" ry="2" />
<text  x="707.06" y="527.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (34 samples, 0.65%)</title><rect x="648.9" y="533" width="7.7" height="15.0" fill="rgb(209,197,35)" rx="2" ry="2" />
<text  x="651.91" y="543.5" ></text>
</g>
<g >
<title>mutation_partition::apply_monotonically (1 samples, 0.02%)</title><rect x="1114.6" y="277" width="0.3" height="15.0" fill="rgb(221,95,19)" rx="2" ry="2" />
<text  x="1117.65" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="57.7" y="261" width="0.2" height="15.0" fill="rgb(253,119,26)" rx="2" ry="2" />
<text  x="60.66" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%)</title><rect x="667.3" y="453" width="0.4" height="15.0" fill="rgb(222,176,29)" rx="2" ry="2" />
<text  x="670.30" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (59 samples, 1.13%)</title><rect x="1140.5" y="517" width="13.4" height="15.0" fill="rgb(237,222,1)" rx="2" ry="2" />
<text  x="1143.52" y="527.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned int&gt;::the_value (1 samples, 0.02%)</title><rect x="1123.3" y="293" width="0.2" height="15.0" fill="rgb(229,59,21)" rx="2" ry="2" />
<text  x="1126.27" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="670.9" y="501" width="0.3" height="15.0" fill="rgb(212,66,51)" rx="2" ry="2" />
<text  x="673.93" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (218 samples, 4.19%)</title><rect x="892.0" y="453" width="49.5" height="15.0" fill="rgb(205,131,19)" rx="2" ry="2" />
<text  x="894.99" y="463.5" >cql3..</text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (1 samples, 0.02%)</title><rect x="856.1" y="453" width="0.3" height="15.0" fill="rgb(254,210,3)" rx="2" ry="2" />
<text  x="859.13" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="333.7" y="325" width="0.4" height="15.0" fill="rgb(209,124,15)" rx="2" ry="2" />
<text  x="336.65" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="277.6" y="261" width="0.4" height="15.0" fill="rgb(217,69,49)" rx="2" ry="2" />
<text  x="280.59" y="271.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="979.4" y="357" width="1.6" height="15.0" fill="rgb(211,68,7)" rx="2" ry="2" />
<text  x="982.37" y="367.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (1 samples, 0.02%)</title><rect x="111.7" y="325" width="0.2" height="15.0" fill="rgb(214,15,12)" rx="2" ry="2" />
<text  x="114.68" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="772.4" y="405" width="0.2" height="15.0" fill="rgb(235,112,22)" rx="2" ry="2" />
<text  x="775.38" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (1 samples, 0.02%)</title><rect x="63.6" y="325" width="0.2" height="15.0" fill="rgb(213,206,18)" rx="2" ry="2" />
<text  x="66.56" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (12 samples, 0.23%)</title><rect x="249.7" y="149" width="2.7" height="15.0" fill="rgb(237,212,46)" rx="2" ry="2" />
<text  x="252.68" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="1102.4" y="437" width="0.2" height="15.0" fill="rgb(210,21,29)" rx="2" ry="2" />
<text  x="1105.39" y="447.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIPFbRS7_EEES8_RKNS5_10expressionET_EUlSC_E_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_8constantEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_12column_valueEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_5tokenEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_13function_callEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_4castEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_4nullEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm12EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%)</title><rect x="73.6" y="421" width="0.2" height="15.0" fill="rgb(237,51,51)" rx="2" ry="2" />
<text  x="76.55" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (4 samples, 0.08%)</title><rect x="792.6" y="325" width="0.9" height="15.0" fill="rgb(207,175,4)" rx="2" ry="2" />
<text  x="795.58" y="335.5" ></text>
</g>
<g >
<title>table::query (2,213 samples, 42.57%)</title><rect x="144.8" y="485" width="502.3" height="15.0" fill="rgb(242,77,12)" rx="2" ry="2" />
<text  x="147.82" y="495.5" >table::query</text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="677.7" y="469" width="0.9" height="15.0" fill="rgb(206,205,44)" rx="2" ry="2" />
<text  x="680.74" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (8 samples, 0.15%)</title><rect x="604.0" y="453" width="1.8" height="15.0" fill="rgb(208,54,0)" rx="2" ry="2" />
<text  x="606.97" y="463.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="74.0" y="357" width="0.5" height="15.0" fill="rgb(244,114,5)" rx="2" ry="2" />
<text  x="77.00" y="367.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (9 samples, 0.17%)</title><rect x="47.9" y="341" width="2.0" height="15.0" fill="rgb(230,98,20)" rx="2" ry="2" />
<text  x="50.90" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (45 samples, 0.87%)</title><rect x="49.9" y="357" width="10.3" height="15.0" fill="rgb(221,121,45)" rx="2" ry="2" />
<text  x="52.95" y="367.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (3 samples, 0.06%)</title><rect x="712.5" y="501" width="0.6" height="15.0" fill="rgb(212,59,5)" rx="2" ry="2" />
<text  x="715.46" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (50 samples, 0.96%)</title><rect x="69.2" y="501" width="11.4" height="15.0" fill="rgb(244,132,12)" rx="2" ry="2" />
<text  x="72.24" y="511.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="811.2" y="149" width="0.2" height="15.0" fill="rgb(235,129,18)" rx="2" ry="2" />
<text  x="814.19" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::stats (7 samples, 0.13%)</title><rect x="203.1" y="277" width="1.6" height="15.0" fill="rgb(238,31,51)" rx="2" ry="2" />
<text  x="206.15" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (2 samples, 0.04%)</title><rect x="512.5" y="341" width="0.5" height="15.0" fill="rgb(240,173,51)" rx="2" ry="2" />
<text  x="515.50" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (13 samples, 0.25%)</title><rect x="25.7" y="325" width="2.9" height="15.0" fill="rgb(237,145,12)" rx="2" ry="2" />
<text  x="28.66" y="335.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="575.4" y="309" width="0.2" height="15.0" fill="rgb(220,110,26)" rx="2" ry="2" />
<text  x="578.37" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (12 samples, 0.23%)</title><rect x="1094.0" y="421" width="2.7" height="15.0" fill="rgb(244,226,17)" rx="2" ry="2" />
<text  x="1096.99" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%)</title><rect x="462.8" y="373" width="0.2" height="15.0" fill="rgb(232,51,51)" rx="2" ry="2" />
<text  x="465.80" y="383.5" ></text>
</g>
<g >
<title>schema_registry::get_or_load (2 samples, 0.04%)</title><rect x="111.5" y="437" width="0.4" height="15.0" fill="rgb(226,162,28)" rx="2" ry="2" />
<text  x="114.45" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="688.4" y="469" width="0.5" height="15.0" fill="rgb(232,3,21)" rx="2" ry="2" />
<text  x="691.40" y="479.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="114.4" y="533" width="0.7" height="15.0" fill="rgb(224,181,20)" rx="2" ry="2" />
<text  x="117.40" y="543.5" ></text>
</g>
<g >
<title>get_scheduling_groups (1 samples, 0.02%)</title><rect x="114.2" y="533" width="0.2" height="15.0" fill="rgb(231,24,37)" rx="2" ry="2" />
<text  x="117.18" y="543.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1,026 samples, 19.73%)</title><rect x="878.6" y="517" width="232.9" height="15.0" fill="rgb(251,218,9)" rx="2" ry="2" />
<text  x="881.60" y="527.5" >seastar::concrete_execution_st..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="930.8" y="421" width="0.7" height="15.0" fill="rgb(246,210,29)" rx="2" ry="2" />
<text  x="933.80" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="56.5" y="261" width="0.3" height="15.0" fill="rgb(214,165,12)" rx="2" ry="2" />
<text  x="59.53" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::vector (1 samples, 0.02%)</title><rect x="83.3" y="533" width="0.2" height="15.0" fill="rgb(239,168,27)" rx="2" ry="2" />
<text  x="86.31" y="543.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="428.1" y="277" width="0.2" height="15.0" fill="rgb(248,216,2)" rx="2" ry="2" />
<text  x="431.07" y="287.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="11.1" y="517" width="0.3" height="15.0" fill="rgb(231,11,24)" rx="2" ry="2" />
<text  x="14.13" y="527.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="702.2" y="357" width="0.3" height="15.0" fill="rgb(206,44,44)" rx="2" ry="2" />
<text  x="705.25" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="45.6" y="293" width="0.3" height="15.0" fill="rgb(251,4,50)" rx="2" ry="2" />
<text  x="48.63" y="303.5" ></text>
</g>
<g >
<title>db::schema_tables::read_tables_for_keyspaces (1 samples, 0.02%)</title><rect x="112.6" y="533" width="0.2" height="15.0" fill="rgb(240,210,44)" rx="2" ry="2" />
<text  x="115.59" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::list_service_level_statement, std::default_delete&lt;cql3::statements::list_service_level_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="66.7" y="373" width="0.3" height="15.0" fill="rgb(239,11,8)" rx="2" ry="2" />
<text  x="69.74" y="383.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="20.0" y="549" width="0.2" height="15.0" fill="rgb(211,227,11)" rx="2" ry="2" />
<text  x="22.99" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="42.5" y="341" width="0.2" height="15.0" fill="rgb(208,192,34)" rx="2" ry="2" />
<text  x="45.46" y="351.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::setTokenStream (1 samples, 0.02%)</title><rect x="23.6" y="421" width="0.2" height="15.0" fill="rgb(240,146,51)" rx="2" ry="2" />
<text  x="26.62" y="431.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (5 samples, 0.10%)</title><rect x="275.1" y="261" width="1.1" height="15.0" fill="rgb(210,34,27)" rx="2" ry="2" />
<text  x="278.10" y="271.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="678.9" y="453" width="0.9" height="15.0" fill="rgb(233,184,47)" rx="2" ry="2" />
<text  x="681.87" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="58.1" y="181" width="0.2" height="15.0" fill="rgb(234,121,24)" rx="2" ry="2" />
<text  x="61.12" y="191.5" ></text>
</g>
<g >
<title>schema::column_at (5 samples, 0.10%)</title><rect x="424.4" y="197" width="1.2" height="15.0" fill="rgb(211,205,2)" rx="2" ry="2" />
<text  x="427.44" y="207.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (164 samples, 3.15%)</title><rect x="789.2" y="389" width="37.2" height="15.0" fill="rgb(214,145,14)" rx="2" ry="2" />
<text  x="792.18" y="399.5" >ser..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="56.3" y="117" width="0.2" height="15.0" fill="rgb(240,160,25)" rx="2" ry="2" />
<text  x="59.30" y="127.5" ></text>
</g>
<g >
<title>utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::run_with_ordered_post_op&lt;db::commitlog::segment::cycle (1 samples, 0.02%)</title><rect x="727.7" y="501" width="0.2" height="15.0" fill="rgb(215,131,27)" rx="2" ry="2" />
<text  x="730.67" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1109.2" y="437" width="0.2" height="15.0" fill="rgb(239,171,4)" rx="2" ry="2" />
<text  x="1112.20" y="447.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.10%)</title><rect x="26.1" y="261" width="1.1" height="15.0" fill="rgb(214,66,24)" rx="2" ry="2" />
<text  x="29.11" y="271.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (37 samples, 0.71%)</title><rect x="1014.3" y="245" width="8.4" height="15.0" fill="rgb(231,155,3)" rx="2" ry="2" />
<text  x="1017.33" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (6 samples, 0.12%)</title><rect x="1006.6" y="261" width="1.4" height="15.0" fill="rgb(209,191,38)" rx="2" ry="2" />
<text  x="1009.61" y="271.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1113.5" y="213" width="0.2" height="15.0" fill="rgb(216,172,7)" rx="2" ry="2" />
<text  x="1116.51" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (4 samples, 0.08%)</title><rect x="971.0" y="341" width="0.9" height="15.0" fill="rgb(246,37,49)" rx="2" ry="2" />
<text  x="973.98" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="569.9" y="453" width="0.3" height="15.0" fill="rgb(226,41,25)" rx="2" ry="2" />
<text  x="572.93" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%)</title><rect x="699.5" y="501" width="0.3" height="15.0" fill="rgb(244,170,14)" rx="2" ry="2" />
<text  x="702.52" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="599.7" y="389" width="0.4" height="15.0" fill="rgb(215,229,32)" rx="2" ry="2" />
<text  x="602.66" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (6 samples, 0.12%)</title><rect x="794.2" y="341" width="1.3" height="15.0" fill="rgb(229,226,27)" rx="2" ry="2" />
<text  x="797.17" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1083.6" y="405" width="0.2" height="15.0" fill="rgb(217,139,39)" rx="2" ry="2" />
<text  x="1086.55" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (6 samples, 0.12%)</title><rect x="1092.6" y="421" width="1.4" height="15.0" fill="rgb(209,85,40)" rx="2" ry="2" />
<text  x="1095.63" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (2 samples, 0.04%)</title><rect x="1163.0" y="453" width="0.4" height="15.0" fill="rgb(236,50,40)" rx="2" ry="2" />
<text  x="1165.99" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="1162.8" y="533" width="0.2" height="15.0" fill="rgb(240,127,16)" rx="2" ry="2" />
<text  x="1165.76" y="543.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;char*, __gnu_cxx::__ops::_Iter_pred&lt;boost::algorithm::detail::is_any_ofF&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="703.2" y="213" width="0.2" height="15.0" fill="rgb(228,51,44)" rx="2" ry="2" />
<text  x="706.16" y="223.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (5 samples, 0.10%)</title><rect x="1125.8" y="245" width="1.1" height="15.0" fill="rgb(212,4,8)" rx="2" ry="2" />
<text  x="1128.77" y="255.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (3 samples, 0.06%)</title><rect x="782.8" y="389" width="0.7" height="15.0" fill="rgb(246,18,42)" rx="2" ry="2" />
<text  x="785.82" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="714.7" y="501" width="0.5" height="15.0" fill="rgb(213,228,28)" rx="2" ry="2" />
<text  x="717.73" y="511.5" ></text>
</g>
<g >
<title>query::result_set::result_set (1 samples, 0.02%)</title><rect x="111.7" y="341" width="0.2" height="15.0" fill="rgb(210,85,51)" rx="2" ry="2" />
<text  x="114.68" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (1 samples, 0.02%)</title><rect x="1037.0" y="325" width="0.3" height="15.0" fill="rgb(233,5,10)" rx="2" ry="2" />
<text  x="1040.02" y="335.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="989.8" y="293" width="2.1" height="15.0" fill="rgb(207,4,4)" rx="2" ry="2" />
<text  x="992.82" y="303.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (1 samples, 0.02%)</title><rect x="366.6" y="213" width="0.2" height="15.0" fill="rgb(206,100,41)" rx="2" ry="2" />
<text  x="369.56" y="223.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="47.7" y="325" width="0.2" height="15.0" fill="rgb(223,84,6)" rx="2" ry="2" />
<text  x="50.68" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (3 samples, 0.06%)</title><rect x="792.8" y="309" width="0.7" height="15.0" fill="rgb(251,229,22)" rx="2" ry="2" />
<text  x="795.81" y="319.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1165.9" y="533" width="0.3" height="15.0" fill="rgb(245,81,41)" rx="2" ry="2" />
<text  x="1168.94" y="543.5" ></text>
</g>
<g >
<title>service::storage_service::mutate_token_metadata (1 samples, 0.02%)</title><rect x="20.4" y="485" width="0.3" height="15.0" fill="rgb(236,203,22)" rx="2" ry="2" />
<text  x="23.44" y="495.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (229 samples, 4.40%)</title><rect x="986.4" y="373" width="52.0" height="15.0" fill="rgb(208,15,25)" rx="2" ry="2" />
<text  x="989.41" y="383.5" >servi..</text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (12 samples, 0.23%)</title><rect x="975.5" y="357" width="2.7" height="15.0" fill="rgb(254,46,7)" rx="2" ry="2" />
<text  x="978.52" y="367.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (52 samples, 1.00%)</title><rect x="189.1" y="325" width="11.8" height="15.0" fill="rgb(226,8,7)" rx="2" ry="2" />
<text  x="192.08" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::iterators_valid (1 samples, 0.02%)</title><rect x="19.8" y="565" width="0.2" height="15.0" fill="rgb(210,171,13)" rx="2" ry="2" />
<text  x="22.76" y="575.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="386.3" y="181" width="0.2" height="15.0" fill="rgb(230,9,25)" rx="2" ry="2" />
<text  x="389.31" y="191.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (11 samples, 0.21%)</title><rect x="615.8" y="421" width="2.5" height="15.0" fill="rgb(235,195,9)" rx="2" ry="2" />
<text  x="618.77" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (60 samples, 1.15%)</title><rect x="187.3" y="341" width="13.6" height="15.0" fill="rgb(206,148,17)" rx="2" ry="2" />
<text  x="190.26" y="351.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (17 samples, 0.33%)</title><rect x="619.9" y="469" width="3.8" height="15.0" fill="rgb(249,36,26)" rx="2" ry="2" />
<text  x="622.86" y="479.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (21 samples, 0.40%)</title><rect x="742.2" y="421" width="4.8" height="15.0" fill="rgb(205,109,36)" rx="2" ry="2" />
<text  x="745.19" y="431.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="112.8" y="341" width="0.2" height="15.0" fill="rgb(212,181,14)" rx="2" ry="2" />
<text  x="115.82" y="351.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (1 samples, 0.02%)</title><rect x="1056.5" y="373" width="0.3" height="15.0" fill="rgb(228,90,26)" rx="2" ry="2" />
<text  x="1059.54" y="383.5" ></text>
</g>
<g >
<title>cql3::prepare_context::clear_pk_function_calls_cache (1 samples, 0.02%)</title><rect x="69.2" y="485" width="0.3" height="15.0" fill="rgb(229,53,25)" rx="2" ry="2" />
<text  x="72.24" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (3 samples, 0.06%)</title><rect x="825.3" y="341" width="0.6" height="15.0" fill="rgb(239,120,11)" rx="2" ry="2" />
<text  x="828.26" y="351.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (5 samples, 0.10%)</title><rect x="486.4" y="309" width="1.1" height="15.0" fill="rgb(227,226,39)" rx="2" ry="2" />
<text  x="489.40" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%)</title><rect x="109.4" y="517" width="0.2" height="15.0" fill="rgb(240,64,53)" rx="2" ry="2" />
<text  x="112.41" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1031.6" y="309" width="0.2" height="15.0" fill="rgb(252,118,13)" rx="2" ry="2" />
<text  x="1034.58" y="319.5" ></text>
</g>
<g >
<title>sstring_hash::operator (5 samples, 0.10%)</title><rect x="841.4" y="341" width="1.1" height="15.0" fill="rgb(231,66,14)" rx="2" ry="2" />
<text  x="844.38" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="670.7" y="469" width="0.2" height="15.0" fill="rgb(215,170,21)" rx="2" ry="2" />
<text  x="673.70" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::reset_state (1 samples, 0.02%)</title><rect x="86.9" y="389" width="0.3" height="15.0" fill="rgb(227,106,1)" rx="2" ry="2" />
<text  x="89.94" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="575.8" y="341" width="0.3" height="15.0" fill="rgb(216,120,34)" rx="2" ry="2" />
<text  x="578.83" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (1 samples, 0.02%)</title><rect x="871.3" y="437" width="0.3" height="15.0" fill="rgb(209,148,5)" rx="2" ry="2" />
<text  x="874.34" y="447.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (1 samples, 0.02%)</title><rect x="770.1" y="389" width="0.2" height="15.0" fill="rgb(232,95,47)" rx="2" ry="2" />
<text  x="773.11" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_service_level_statement, std::default_delete&lt;cql3::statements::create_service_level_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.1" y="405" width="0.2" height="15.0" fill="rgb(209,70,16)" rx="2" ry="2" />
<text  x="69.06" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="52.2" y="325" width="2.1" height="15.0" fill="rgb(205,9,25)" rx="2" ry="2" />
<text  x="55.22" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="644.4" y="421" width="0.2" height="15.0" fill="rgb(237,105,54)" rx="2" ry="2" />
<text  x="647.37" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_role_statement, std::default_delete&lt;cql3::statements::create_role_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="65.8" y="405" width="0.3" height="15.0" fill="rgb(236,149,28)" rx="2" ry="2" />
<text  x="68.83" y="415.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant (1 samples, 0.02%)</title><rect x="62.7" y="277" width="0.2" height="15.0" fill="rgb(236,107,14)" rx="2" ry="2" />
<text  x="65.66" y="287.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (2 samples, 0.04%)</title><rect x="622.6" y="437" width="0.4" height="15.0" fill="rgb(231,0,29)" rx="2" ry="2" />
<text  x="625.58" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="199.5" y="293" width="0.2" height="15.0" fill="rgb(220,212,49)" rx="2" ry="2" />
<text  x="202.52" y="303.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%)</title><rect x="53.8" y="165" width="0.2" height="15.0" fill="rgb(224,75,30)" rx="2" ry="2" />
<text  x="56.80" y="175.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%)</title><rect x="711.8" y="501" width="0.4" height="15.0" fill="rgb(234,148,52)" rx="2" ry="2" />
<text  x="714.78" y="511.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%)</title><rect x="11.1" y="341" width="0.3" height="15.0" fill="rgb(253,181,45)" rx="2" ry="2" />
<text  x="14.13" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (2 samples, 0.04%)</title><rect x="761.3" y="325" width="0.4" height="15.0" fill="rgb(227,62,31)" rx="2" ry="2" />
<text  x="764.26" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (17 samples, 0.33%)</title><rect x="686.8" y="517" width="3.9" height="15.0" fill="rgb(243,148,21)" rx="2" ry="2" />
<text  x="689.81" y="527.5" ></text>
</g>
<g >
<title>utils::sequenced_set&lt;gms::inet_address&gt;::insert (1 samples, 0.02%)</title><rect x="1162.5" y="485" width="0.3" height="15.0" fill="rgb(244,89,19)" rx="2" ry="2" />
<text  x="1165.54" y="495.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (5 samples, 0.10%)</title><rect x="86.0" y="485" width="1.2" height="15.0" fill="rgb(232,135,40)" rx="2" ry="2" />
<text  x="89.03" y="495.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="874.1" y="373" width="0.2" height="15.0" fill="rgb(228,93,20)" rx="2" ry="2" />
<text  x="877.06" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="726.3" y="517" width="0.2" height="15.0" fill="rgb(232,6,53)" rx="2" ry="2" />
<text  x="729.31" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="538.2" y="357" width="0.2" height="15.0" fill="rgb(232,107,9)" rx="2" ry="2" />
<text  x="541.15" y="367.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="778.1" y="341" width="0.2" height="15.0" fill="rgb(228,196,24)" rx="2" ry="2" />
<text  x="781.06" y="351.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (5 samples, 0.10%)</title><rect x="86.0" y="437" width="1.2" height="15.0" fill="rgb(253,139,4)" rx="2" ry="2" />
<text  x="89.03" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="577.9" y="341" width="0.4" height="15.0" fill="rgb(205,139,11)" rx="2" ry="2" />
<text  x="580.87" y="351.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (5 samples, 0.10%)</title><rect x="621.4" y="437" width="1.2" height="15.0" fill="rgb(235,96,31)" rx="2" ry="2" />
<text  x="624.45" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.08%)</title><rect x="537.0" y="357" width="0.9" height="15.0" fill="rgb(219,178,2)" rx="2" ry="2" />
<text  x="540.02" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (2 samples, 0.04%)</title><rect x="846.6" y="437" width="0.5" height="15.0" fill="rgb(211,119,6)" rx="2" ry="2" />
<text  x="849.60" y="447.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (1 samples, 0.02%)</title><rect x="873.2" y="357" width="0.2" height="15.0" fill="rgb(248,43,11)" rx="2" ry="2" />
<text  x="876.15" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1110.1" y="453" width="0.2" height="15.0" fill="rgb(215,201,39)" rx="2" ry="2" />
<text  x="1113.11" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (6 samples, 0.12%)</title><rect x="76.0" y="389" width="1.4" height="15.0" fill="rgb(246,154,2)" rx="2" ry="2" />
<text  x="79.05" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (4 samples, 0.08%)</title><rect x="38.1" y="325" width="1.0" height="15.0" fill="rgb(212,135,42)" rx="2" ry="2" />
<text  x="41.14" y="335.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (3 samples, 0.06%)</title><rect x="841.4" y="309" width="0.7" height="15.0" fill="rgb(230,219,48)" rx="2" ry="2" />
<text  x="844.38" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.02%)</title><rect x="700.9" y="453" width="0.2" height="15.0" fill="rgb(236,52,41)" rx="2" ry="2" />
<text  x="703.89" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_deallocate (1 samples, 0.02%)</title><rect x="52.2" y="293" width="0.2" height="15.0" fill="rgb(244,142,18)" rx="2" ry="2" />
<text  x="55.22" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="737.2" y="501" width="0.2" height="15.0" fill="rgb(249,56,42)" rx="2" ry="2" />
<text  x="740.20" y="511.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (10 samples, 0.19%)</title><rect x="797.3" y="325" width="2.3" height="15.0" fill="rgb(247,85,44)" rx="2" ry="2" />
<text  x="800.35" y="335.5" ></text>
</g>
<g >
<title>mutation_partition::compact_for_compaction (1 samples, 0.02%)</title><rect x="112.4" y="437" width="0.2" height="15.0" fill="rgb(214,112,15)" rx="2" ry="2" />
<text  x="115.36" y="447.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="20.0" y="501" width="0.2" height="15.0" fill="rgb(220,108,54)" rx="2" ry="2" />
<text  x="22.99" y="511.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (25 samples, 0.48%)</title><rect x="917.4" y="389" width="5.7" height="15.0" fill="rgb(243,58,28)" rx="2" ry="2" />
<text  x="920.41" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (2 samples, 0.04%)</title><rect x="578.8" y="341" width="0.4" height="15.0" fill="rgb(225,21,18)" rx="2" ry="2" />
<text  x="581.78" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (27 samples, 0.52%)</title><rect x="73.3" y="453" width="6.2" height="15.0" fill="rgb(252,191,11)" rx="2" ry="2" />
<text  x="76.32" y="463.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (3 samples, 0.06%)</title><rect x="103.5" y="437" width="0.7" height="15.0" fill="rgb(234,142,34)" rx="2" ry="2" />
<text  x="106.51" y="447.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="1000.0" y="309" width="1.8" height="15.0" fill="rgb(208,129,46)" rx="2" ry="2" />
<text  x="1003.03" y="319.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (2 samples, 0.04%)</title><rect x="57.2" y="277" width="0.5" height="15.0" fill="rgb(230,155,6)" rx="2" ry="2" />
<text  x="60.21" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="71.7" y="373" width="0.3" height="15.0" fill="rgb(253,39,37)" rx="2" ry="2" />
<text  x="74.73" y="383.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="1130.3" y="341" width="0.2" height="15.0" fill="rgb(245,28,16)" rx="2" ry="2" />
<text  x="1133.31" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (5 samples, 0.10%)</title><rect x="26.1" y="245" width="1.1" height="15.0" fill="rgb(228,182,37)" rx="2" ry="2" />
<text  x="29.11" y="255.5" ></text>
</g>
<g >
<title>table::query (3 samples, 0.06%)</title><rect x="1163.0" y="533" width="0.7" height="15.0" fill="rgb(217,3,54)" rx="2" ry="2" />
<text  x="1165.99" y="543.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (1 samples, 0.02%)</title><rect x="85.6" y="485" width="0.2" height="15.0" fill="rgb(245,170,53)" rx="2" ry="2" />
<text  x="88.58" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (4 samples, 0.08%)</title><rect x="257.4" y="181" width="0.9" height="15.0" fill="rgb(235,64,17)" rx="2" ry="2" />
<text  x="260.39" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%)</title><rect x="113.5" y="325" width="0.2" height="15.0" fill="rgb(228,94,19)" rx="2" ry="2" />
<text  x="116.50" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%)</title><rect x="951.7" y="437" width="0.2" height="15.0" fill="rgb(218,135,38)" rx="2" ry="2" />
<text  x="954.68" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_M_initialize_map (1 samples, 0.02%)</title><rect x="24.1" y="309" width="0.2" height="15.0" fill="rgb(212,162,41)" rx="2" ry="2" />
<text  x="27.07" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="41.5" y="293" width="0.5" height="15.0" fill="rgb(206,126,32)" rx="2" ry="2" />
<text  x="44.55" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%)</title><rect x="365.2" y="213" width="0.5" height="15.0" fill="rgb(216,19,32)" rx="2" ry="2" />
<text  x="368.20" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="56.1" y="229" width="0.4" height="15.0" fill="rgb(218,143,9)" rx="2" ry="2" />
<text  x="59.07" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;mutation_fragment*&gt;, flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="327.3" y="389" width="0.2" height="15.0" fill="rgb(206,109,47)" rx="2" ry="2" />
<text  x="330.30" y="399.5" ></text>
</g>
<g >
<title>ser::serializer&lt;std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1118.1" y="229" width="0.2" height="15.0" fill="rgb(218,5,29)" rx="2" ry="2" />
<text  x="1121.05" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%)</title><rect x="848.2" y="389" width="0.4" height="15.0" fill="rgb(245,111,0)" rx="2" ry="2" />
<text  x="851.19" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="54.5" y="245" width="0.4" height="15.0" fill="rgb(240,43,28)" rx="2" ry="2" />
<text  x="57.49" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="200.2" y="293" width="0.5" height="15.0" fill="rgb(226,172,17)" rx="2" ry="2" />
<text  x="203.20" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (2,351 samples, 45.22%)</title><rect x="115.1" y="533" width="533.6" height="15.0" fill="rgb(245,186,18)" rx="2" ry="2" />
<text  x="118.09" y="543.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;unsigned int&gt;::_Rb_tree_const_iterator (1 samples, 0.02%)</title><rect x="37.7" y="341" width="0.2" height="15.0" fill="rgb(216,98,20)" rx="2" ry="2" />
<text  x="40.69" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="642.6" y="421" width="0.2" height="15.0" fill="rgb(214,201,6)" rx="2" ry="2" />
<text  x="645.56" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::append_clustered_row (1 samples, 0.02%)</title><rect x="1115.8" y="261" width="0.2" height="15.0" fill="rgb(231,123,39)" rx="2" ry="2" />
<text  x="1118.78" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="770.8" y="421" width="1.8" height="15.0" fill="rgb(252,191,41)" rx="2" ry="2" />
<text  x="773.79" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::~update_statement (1 samples, 0.02%)</title><rect x="80.6" y="501" width="0.2" height="15.0" fill="rgb(242,14,53)" rx="2" ry="2" />
<text  x="83.59" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (2 samples, 0.04%)</title><rect x="548.6" y="341" width="0.4" height="15.0" fill="rgb(214,48,7)" rx="2" ry="2" />
<text  x="551.59" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="58.1" y="213" width="0.2" height="15.0" fill="rgb(240,184,47)" rx="2" ry="2" />
<text  x="61.12" y="223.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%)</title><rect x="72.2" y="389" width="0.2" height="15.0" fill="rgb(218,171,21)" rx="2" ry="2" />
<text  x="75.19" y="399.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="556.8" y="357" width="0.4" height="15.0" fill="rgb(227,217,9)" rx="2" ry="2" />
<text  x="559.76" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (2 samples, 0.04%)</title><rect x="86.3" y="389" width="0.4" height="15.0" fill="rgb(242,47,41)" rx="2" ry="2" />
<text  x="89.26" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%)</title><rect x="948.7" y="421" width="0.3" height="15.0" fill="rgb(239,30,0)" rx="2" ry="2" />
<text  x="951.73" y="431.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (2 samples, 0.04%)</title><rect x="1079.7" y="373" width="0.4" height="15.0" fill="rgb(240,113,37)" rx="2" ry="2" />
<text  x="1082.69" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (1 samples, 0.02%)</title><rect x="973.0" y="389" width="0.2" height="15.0" fill="rgb(236,96,39)" rx="2" ry="2" />
<text  x="976.02" y="399.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="910.4" y="421" width="0.2" height="15.0" fill="rgb(236,214,41)" rx="2" ry="2" />
<text  x="913.38" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="143.5" y="485" width="0.2" height="15.0" fill="rgb(210,138,49)" rx="2" ry="2" />
<text  x="146.46" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (7 samples, 0.13%)</title><rect x="1041.6" y="357" width="1.6" height="15.0" fill="rgb(245,84,38)" rx="2" ry="2" />
<text  x="1044.56" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="808.0" y="245" width="0.2" height="15.0" fill="rgb(207,208,29)" rx="2" ry="2" />
<text  x="811.02" y="255.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (10 samples, 0.19%)</title><rect x="520.4" y="261" width="2.3" height="15.0" fill="rgb(247,69,27)" rx="2" ry="2" />
<text  x="523.45" y="271.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%)</title><rect x="1113.7" y="165" width="0.3" height="15.0" fill="rgb(241,199,45)" rx="2" ry="2" />
<text  x="1116.74" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="781.7" y="389" width="1.1" height="15.0" fill="rgb(214,141,49)" rx="2" ry="2" />
<text  x="784.69" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (23 samples, 0.44%)</title><rect x="981.0" y="357" width="5.2" height="15.0" fill="rgb(215,159,30)" rx="2" ry="2" />
<text  x="983.96" y="367.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (42 samples, 0.81%)</title><rect x="498.4" y="293" width="9.6" height="15.0" fill="rgb(232,25,40)" rx="2" ry="2" />
<text  x="501.43" y="303.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (3 samples, 0.06%)</title><rect x="672.3" y="485" width="0.7" height="15.0" fill="rgb(213,127,8)" rx="2" ry="2" />
<text  x="675.29" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (29 samples, 0.56%)</title><rect x="1090.1" y="437" width="6.6" height="15.0" fill="rgb(218,11,10)" rx="2" ry="2" />
<text  x="1093.13" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%)</title><rect x="665.3" y="453" width="0.4" height="15.0" fill="rgb(237,22,8)" rx="2" ry="2" />
<text  x="668.25" y="463.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::drop_index_statement*, false&gt;::_M_head (1 samples, 0.02%)</title><rect x="66.3" y="341" width="0.2" height="15.0" fill="rgb(254,200,44)" rx="2" ry="2" />
<text  x="69.29" y="351.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="702.2" y="341" width="0.3" height="15.0" fill="rgb(229,204,28)" rx="2" ry="2" />
<text  x="705.25" y="351.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (2 samples, 0.04%)</title><rect x="813.2" y="165" width="0.5" height="15.0" fill="rgb(252,207,3)" rx="2" ry="2" />
<text  x="816.24" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (6 samples, 0.12%)</title><rect x="527.3" y="277" width="1.3" height="15.0" fill="rgb(209,14,14)" rx="2" ry="2" />
<text  x="530.26" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::stats (2 samples, 0.04%)</title><rect x="517.5" y="277" width="0.5" height="15.0" fill="rgb(232,5,27)" rx="2" ry="2" />
<text  x="520.50" y="287.5" ></text>
</g>
<g >
<title>table::stop (1 samples, 0.02%)</title><rect x="702.2" y="485" width="0.3" height="15.0" fill="rgb(252,79,44)" rx="2" ry="2" />
<text  x="705.25" y="495.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%)</title><rect x="213.8" y="245" width="2.3" height="15.0" fill="rgb(237,66,26)" rx="2" ry="2" />
<text  x="216.82" y="255.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%)</title><rect x="528.4" y="261" width="0.2" height="15.0" fill="rgb(211,146,29)" rx="2" ry="2" />
<text  x="531.39" y="271.5" ></text>
</g>
<g >
<title>boost::algorithm::detail::is_any_ofF&lt;char&gt;::operator (1 samples, 0.02%)</title><rect x="703.2" y="181" width="0.2" height="15.0" fill="rgb(253,222,47)" rx="2" ry="2" />
<text  x="706.16" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (6 samples, 0.12%)</title><rect x="1086.5" y="437" width="1.4" height="15.0" fill="rgb(237,168,5)" rx="2" ry="2" />
<text  x="1089.50" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%)</title><rect x="54.5" y="309" width="0.4" height="15.0" fill="rgb(233,31,13)" rx="2" ry="2" />
<text  x="57.49" y="319.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%)</title><rect x="244.5" y="101" width="0.2" height="15.0" fill="rgb(231,135,10)" rx="2" ry="2" />
<text  x="247.46" y="111.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (9 samples, 0.17%)</title><rect x="856.8" y="453" width="2.1" height="15.0" fill="rgb(245,31,54)" rx="2" ry="2" />
<text  x="859.81" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (2 samples, 0.04%)</title><rect x="1081.3" y="373" width="0.4" height="15.0" fill="rgb(229,65,14)" rx="2" ry="2" />
<text  x="1084.28" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (1 samples, 0.02%)</title><rect x="884.5" y="469" width="0.2" height="15.0" fill="rgb(216,83,4)" rx="2" ry="2" />
<text  x="887.50" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="701.6" y="453" width="0.2" height="15.0" fill="rgb(233,208,45)" rx="2" ry="2" />
<text  x="704.57" y="463.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (1 samples, 0.02%)</title><rect x="508.2" y="309" width="0.2" height="15.0" fill="rgb(235,218,32)" rx="2" ry="2" />
<text  x="511.19" y="319.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (16 samples, 0.31%)</title><rect x="545.0" y="341" width="3.6" height="15.0" fill="rgb(208,80,10)" rx="2" ry="2" />
<text  x="547.96" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (4 samples, 0.08%)</title><rect x="843.6" y="453" width="1.0" height="15.0" fill="rgb(235,59,50)" rx="2" ry="2" />
<text  x="846.65" y="463.5" ></text>
</g>
<g >
<title>from_hex (5 samples, 0.10%)</title><rect x="70.6" y="373" width="1.1" height="15.0" fill="rgb(221,149,54)" rx="2" ry="2" />
<text  x="73.60" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="49.3" y="229" width="0.2" height="15.0" fill="rgb(239,182,12)" rx="2" ry="2" />
<text  x="52.27" y="239.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="58.3" y="229" width="0.5" height="15.0" fill="rgb(223,25,33)" rx="2" ry="2" />
<text  x="61.34" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (1 samples, 0.02%)</title><rect x="356.6" y="229" width="0.2" height="15.0" fill="rgb(227,188,14)" rx="2" ry="2" />
<text  x="359.58" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt; &gt;::deallocate (1 samples, 0.02%)</title><rect x="28.2" y="245" width="0.2" height="15.0" fill="rgb(245,17,41)" rx="2" ry="2" />
<text  x="31.16" y="255.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="858.2" y="373" width="0.2" height="15.0" fill="rgb(205,122,29)" rx="2" ry="2" />
<text  x="861.17" y="383.5" ></text>
</g>
<g >
<title>compound_type&lt; (2 samples, 0.04%)</title><rect x="562.7" y="389" width="0.4" height="15.0" fill="rgb(220,111,52)" rx="2" ry="2" />
<text  x="565.66" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (8 samples, 0.15%)</title><rect x="852.3" y="421" width="1.8" height="15.0" fill="rgb(224,139,25)" rx="2" ry="2" />
<text  x="855.27" y="431.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (57 samples, 1.10%)</title><rect x="541.6" y="357" width="12.9" height="15.0" fill="rgb(208,198,4)" rx="2" ry="2" />
<text  x="544.56" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (4 samples, 0.08%)</title><rect x="88.8" y="549" width="0.9" height="15.0" fill="rgb(218,25,24)" rx="2" ry="2" />
<text  x="91.76" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="20.0" y="421" width="0.2" height="15.0" fill="rgb(219,112,1)" rx="2" ry="2" />
<text  x="22.99" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="736.1" y="421" width="0.2" height="15.0" fill="rgb(221,176,51)" rx="2" ry="2" />
<text  x="739.07" y="431.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="688.4" y="485" width="0.5" height="15.0" fill="rgb(206,61,38)" rx="2" ry="2" />
<text  x="691.40" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="45.9" y="245" width="0.6" height="15.0" fill="rgb(218,213,23)" rx="2" ry="2" />
<text  x="48.86" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="45.6" y="213" width="0.3" height="15.0" fill="rgb(216,173,41)" rx="2" ry="2" />
<text  x="48.63" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_relocate (5 samples, 0.10%)</title><rect x="53.1" y="293" width="1.2" height="15.0" fill="rgb(240,11,38)" rx="2" ry="2" />
<text  x="56.12" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="27.5" y="261" width="0.7" height="15.0" fill="rgb(231,53,13)" rx="2" ry="2" />
<text  x="30.48" y="271.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (1 samples, 0.02%)</title><rect x="111.9" y="437" width="0.2" height="15.0" fill="rgb(215,60,29)" rx="2" ry="2" />
<text  x="114.91" y="447.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::work_item, 128ul&gt;::emplace_back&lt;service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt; (1 samples, 0.02%)</title><rect x="872.0" y="357" width="0.2" height="15.0" fill="rgb(238,136,21)" rx="2" ry="2" />
<text  x="875.02" y="367.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="943.1" y="421" width="0.2" height="15.0" fill="rgb(254,75,4)" rx="2" ry="2" />
<text  x="946.06" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state_base::complete_one (1 samples, 0.02%)</title><rect x="1121.2" y="357" width="0.3" height="15.0" fill="rgb(208,162,47)" rx="2" ry="2" />
<text  x="1124.23" y="367.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="510.9" y="357" width="0.2" height="15.0" fill="rgb(221,134,6)" rx="2" ry="2" />
<text  x="513.92" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.12%)</title><rect x="658.0" y="517" width="1.4" height="15.0" fill="rgb(217,97,41)" rx="2" ry="2" />
<text  x="660.99" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (213 samples, 4.10%)</title><rect x="221.1" y="229" width="48.3" height="15.0" fill="rgb(244,20,3)" rx="2" ry="2" />
<text  x="224.08" y="239.5" >part..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::operator= (1 samples, 0.02%)</title><rect x="60.6" y="373" width="0.2" height="15.0" fill="rgb(227,190,42)" rx="2" ry="2" />
<text  x="63.61" y="383.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;utils::chunked_vector&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1164.4" y="453" width="0.2" height="15.0" fill="rgb(250,71,46)" rx="2" ry="2" />
<text  x="1167.35" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (57 samples, 1.10%)</title><rect x="713.8" y="533" width="13.0" height="15.0" fill="rgb(248,96,36)" rx="2" ry="2" />
<text  x="716.82" y="543.5" ></text>
</g>
<g >
<title>mutation::set_cell (1 samples, 0.02%)</title><rect x="20.2" y="437" width="0.2" height="15.0" fill="rgb(223,64,40)" rx="2" ry="2" />
<text  x="23.21" y="447.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="126.2" y="485" width="1.1" height="15.0" fill="rgb(238,84,5)" rx="2" ry="2" />
<text  x="129.21" y="495.5" ></text>
</g>
<g >
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="701.8" y="437" width="0.2" height="15.0" fill="rgb(225,3,42)" rx="2" ry="2" />
<text  x="704.79" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (1 samples, 0.02%)</title><rect x="269.4" y="229" width="0.2" height="15.0" fill="rgb(233,221,16)" rx="2" ry="2" />
<text  x="272.42" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="449.6" y="389" width="0.9" height="15.0" fill="rgb(250,66,24)" rx="2" ry="2" />
<text  x="452.63" y="399.5" ></text>
</g>
<g >
<title>backlog_controller::update_controller (1 samples, 0.02%)</title><rect x="1165.0" y="485" width="0.3" height="15.0" fill="rgb(240,133,41)" rx="2" ry="2" />
<text  x="1168.03" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="507.1" y="213" width="0.4" height="15.0" fill="rgb(238,220,47)" rx="2" ry="2" />
<text  x="510.06" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="1027.9" y="293" width="0.3" height="15.0" fill="rgb(217,167,29)" rx="2" ry="2" />
<text  x="1030.95" y="303.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (12 samples, 0.23%)</title><rect x="85.6" y="613" width="2.7" height="15.0" fill="rgb(223,24,7)" rx="2" ry="2" />
<text  x="88.58" y="623.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="52.4" y="277" width="0.3" height="15.0" fill="rgb(247,5,7)" rx="2" ry="2" />
<text  x="55.44" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reallocate_map (1 samples, 0.02%)</title><rect x="28.2" y="261" width="0.2" height="15.0" fill="rgb(209,144,41)" rx="2" ry="2" />
<text  x="31.16" y="271.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (32 samples, 0.62%)</title><rect x="1120.5" y="437" width="7.3" height="15.0" fill="rgb(213,12,41)" rx="2" ry="2" />
<text  x="1123.55" y="447.5" ></text>
</g>
<g >
<title>boost::range_detail::filtered_range&lt;mutation_partition::non_dummy_rows (1 samples, 0.02%)</title><rect x="1123.7" y="165" width="0.3" height="15.0" fill="rgb(231,134,52)" rx="2" ry="2" />
<text  x="1126.73" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="1086.0" y="437" width="0.5" height="15.0" fill="rgb(212,139,7)" rx="2" ry="2" />
<text  x="1089.05" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (7 samples, 0.13%)</title><rect x="671.8" y="501" width="1.6" height="15.0" fill="rgb(253,164,17)" rx="2" ry="2" />
<text  x="674.83" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (3 samples, 0.06%)</title><rect x="906.3" y="373" width="0.7" height="15.0" fill="rgb(251,162,51)" rx="2" ry="2" />
<text  x="909.29" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (4 samples, 0.08%)</title><rect x="875.9" y="293" width="0.9" height="15.0" fill="rgb(221,209,26)" rx="2" ry="2" />
<text  x="878.88" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%)</title><rect x="530.4" y="309" width="0.3" height="15.0" fill="rgb(229,129,1)" rx="2" ry="2" />
<text  x="533.43" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::stop (1 samples, 0.02%)</title><rect x="703.2" y="437" width="0.2" height="15.0" fill="rgb(230,173,17)" rx="2" ry="2" />
<text  x="706.16" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="139.6" y="421" width="0.5" height="15.0" fill="rgb(216,171,53)" rx="2" ry="2" />
<text  x="142.60" y="431.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;bytes_ostream&gt; (3 samples, 0.06%)</title><rect x="1124.9" y="197" width="0.6" height="15.0" fill="rgb(208,190,16)" rx="2" ry="2" />
<text  x="1127.86" y="207.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (4 samples, 0.08%)</title><rect x="446.5" y="293" width="0.9" height="15.0" fill="rgb(245,89,12)" rx="2" ry="2" />
<text  x="449.46" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="776.5" y="389" width="0.2" height="15.0" fill="rgb(254,103,3)" rx="2" ry="2" />
<text  x="779.47" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt;, void&gt; (1 samples, 0.02%)</title><rect x="59.9" y="341" width="0.3" height="15.0" fill="rgb(253,123,29)" rx="2" ry="2" />
<text  x="62.93" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="823.2" y="309" width="0.2" height="15.0" fill="rgb(245,126,20)" rx="2" ry="2" />
<text  x="826.22" y="319.5" ></text>
</g>
<g >
<title>database::query (17 samples, 0.33%)</title><rect x="107.4" y="533" width="3.8" height="15.0" fill="rgb(214,12,1)" rx="2" ry="2" />
<text  x="110.37" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="617.6" y="389" width="0.4" height="15.0" fill="rgb(229,165,22)" rx="2" ry="2" />
<text  x="620.59" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (3 samples, 0.06%)</title><rect x="251.7" y="117" width="0.7" height="15.0" fill="rgb(214,3,39)" rx="2" ry="2" />
<text  x="254.72" y="127.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="801.0" y="261" width="1.3" height="15.0" fill="rgb(230,186,11)" rx="2" ry="2" />
<text  x="803.98" y="271.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="68.6" y="405" width="0.2" height="15.0" fill="rgb(246,79,3)" rx="2" ry="2" />
<text  x="71.56" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%)</title><rect x="57.7" y="309" width="0.2" height="15.0" fill="rgb(250,115,30)" rx="2" ry="2" />
<text  x="60.66" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.42%)</title><rect x="1008.0" y="261" width="5.0" height="15.0" fill="rgb(223,51,30)" rx="2" ry="2" />
<text  x="1010.97" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (5 samples, 0.10%)</title><rect x="698.4" y="501" width="1.1" height="15.0" fill="rgb(245,75,4)" rx="2" ry="2" />
<text  x="701.39" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (3 samples, 0.06%)</title><rect x="55.4" y="293" width="0.7" height="15.0" fill="rgb(239,102,18)" rx="2" ry="2" />
<text  x="58.39" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%)</title><rect x="1091.3" y="405" width="0.2" height="15.0" fill="rgb(225,60,12)" rx="2" ry="2" />
<text  x="1094.27" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;utils::UUID&gt;::allocate (1 samples, 0.02%)</title><rect x="1140.5" y="485" width="0.2" height="15.0" fill="rgb(235,207,17)" rx="2" ry="2" />
<text  x="1143.52" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (22 samples, 0.42%)</title><rect x="307.6" y="373" width="4.9" height="15.0" fill="rgb(236,171,17)" rx="2" ry="2" />
<text  x="310.55" y="383.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="518.0" y="293" width="0.2" height="15.0" fill="rgb(239,136,2)" rx="2" ry="2" />
<text  x="520.95" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="364.3" y="213" width="0.2" height="15.0" fill="rgb(209,66,41)" rx="2" ry="2" />
<text  x="367.30" y="223.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%)</title><rect x="773.7" y="437" width="0.3" height="15.0" fill="rgb(234,33,44)" rx="2" ry="2" />
<text  x="776.74" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (76 samples, 1.46%)</title><rect x="43.6" y="389" width="17.2" height="15.0" fill="rgb(252,29,18)" rx="2" ry="2" />
<text  x="46.59" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (2 samples, 0.04%)</title><rect x="856.4" y="453" width="0.4" height="15.0" fill="rgb(238,6,35)" rx="2" ry="2" />
<text  x="859.36" y="463.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%)</title><rect x="667.1" y="469" width="0.2" height="15.0" fill="rgb(246,77,39)" rx="2" ry="2" />
<text  x="670.07" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::advance (1 samples, 0.02%)</title><rect x="19.8" y="581" width="0.2" height="15.0" fill="rgb(248,204,31)" rx="2" ry="2" />
<text  x="22.76" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (8 samples, 0.15%)</title><rect x="563.8" y="389" width="1.8" height="15.0" fill="rgb(229,93,49)" rx="2" ry="2" />
<text  x="566.80" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;database&gt;::operator= (1 samples, 0.02%)</title><rect x="703.2" y="389" width="0.2" height="15.0" fill="rgb(227,107,43)" rx="2" ry="2" />
<text  x="706.16" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="1103.8" y="421" width="0.2" height="15.0" fill="rgb(219,154,41)" rx="2" ry="2" />
<text  x="1106.75" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (3 samples, 0.06%)</title><rect x="982.8" y="309" width="0.7" height="15.0" fill="rgb(216,176,13)" rx="2" ry="2" />
<text  x="985.78" y="319.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="1116.2" y="229" width="0.3" height="15.0" fill="rgb(238,119,27)" rx="2" ry="2" />
<text  x="1119.24" y="239.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="563.8" y="373" width="1.8" height="15.0" fill="rgb(238,83,14)" rx="2" ry="2" />
<text  x="566.80" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="58.1" y="149" width="0.2" height="15.0" fill="rgb(227,12,46)" rx="2" ry="2" />
<text  x="61.12" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (1 samples, 0.02%)</title><rect x="870.0" y="421" width="0.2" height="15.0" fill="rgb(221,24,42)" rx="2" ry="2" />
<text  x="872.98" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="40.9" y="197" width="0.2" height="15.0" fill="rgb(242,171,36)" rx="2" ry="2" />
<text  x="43.87" y="207.5" ></text>
</g>
<g >
<title>__strlen_avx2 (5 samples, 0.10%)</title><rect x="1005.5" y="277" width="1.1" height="15.0" fill="rgb(242,224,17)" rx="2" ry="2" />
<text  x="1008.48" y="287.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Parser (3 samples, 0.06%)</title><rect x="23.6" y="437" width="0.7" height="15.0" fill="rgb(232,71,17)" rx="2" ry="2" />
<text  x="26.62" y="447.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1116.0" y="245" width="0.2" height="15.0" fill="rgb(206,22,33)" rx="2" ry="2" />
<text  x="1119.01" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="683.6" y="517" width="0.3" height="15.0" fill="rgb(222,155,47)" rx="2" ry="2" />
<text  x="686.64" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (2 samples, 0.04%)</title><rect x="868.6" y="533" width="0.5" height="15.0" fill="rgb(218,47,27)" rx="2" ry="2" />
<text  x="871.62" y="543.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (5 samples, 0.10%)</title><rect x="552.7" y="293" width="1.1" height="15.0" fill="rgb(237,131,14)" rx="2" ry="2" />
<text  x="555.68" y="303.5" ></text>
</g>
<g >
<title>table::table (1 samples, 0.02%)</title><rect x="114.0" y="485" width="0.2" height="15.0" fill="rgb(218,71,0)" rx="2" ry="2" />
<text  x="116.95" y="495.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (6 samples, 0.12%)</title><rect x="1121.7" y="261" width="1.3" height="15.0" fill="rgb(251,188,33)" rx="2" ry="2" />
<text  x="1124.68" y="271.5" ></text>
</g>
<g >
<title>seastar::reactor::init_scheduling_group (1 samples, 0.02%)</title><rect x="114.2" y="469" width="0.2" height="15.0" fill="rgb(232,157,13)" rx="2" ry="2" />
<text  x="117.18" y="479.5" ></text>
</g>
<g >
<title>database::shard_of (2 samples, 0.04%)</title><rect x="1121.9" y="213" width="0.5" height="15.0" fill="rgb(245,181,34)" rx="2" ry="2" />
<text  x="1124.91" y="223.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (6 samples, 0.12%)</title><rect x="448.3" y="405" width="1.3" height="15.0" fill="rgb(237,79,18)" rx="2" ry="2" />
<text  x="451.27" y="415.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%)</title><rect x="627.1" y="453" width="0.2" height="15.0" fill="rgb(209,41,5)" rx="2" ry="2" />
<text  x="630.12" y="463.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (12 samples, 0.23%)</title><rect x="421.0" y="181" width="2.8" height="15.0" fill="rgb(234,9,39)" rx="2" ry="2" />
<text  x="424.04" y="191.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (44 samples, 0.85%)</title><rect x="690.7" y="533" width="10.0" height="15.0" fill="rgb(242,87,7)" rx="2" ry="2" />
<text  x="693.67" y="543.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%)</title><rect x="1124.6" y="149" width="0.3" height="15.0" fill="rgb(247,111,16)" rx="2" ry="2" />
<text  x="1127.63" y="159.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_role_statement, std::default_delete&lt;cql3::statements::drop_role_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_role_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="67.6" y="421" width="0.3" height="15.0" fill="rgb(206,195,48)" rx="2" ry="2" />
<text  x="70.65" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%)</title><rect x="45.9" y="181" width="0.6" height="15.0" fill="rgb(209,86,43)" rx="2" ry="2" />
<text  x="48.86" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%)</title><rect x="79.9" y="421" width="0.2" height="15.0" fill="rgb(243,87,1)" rx="2" ry="2" />
<text  x="82.91" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="869.7" y="293" width="0.3" height="15.0" fill="rgb(253,77,8)" rx="2" ry="2" />
<text  x="872.75" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="476.6" y="293" width="0.5" height="15.0" fill="rgb(223,199,11)" rx="2" ry="2" />
<text  x="479.64" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%)</title><rect x="456.0" y="389" width="0.7" height="15.0" fill="rgb(244,217,8)" rx="2" ry="2" />
<text  x="458.99" y="399.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="1189.8" y="661" width="0.2" height="15.0" fill="rgb(244,190,27)" rx="2" ry="2" />
<text  x="1192.77" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="804.2" y="293" width="0.2" height="15.0" fill="rgb(228,34,39)" rx="2" ry="2" />
<text  x="807.16" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (9 samples, 0.17%)</title><rect x="637.3" y="437" width="2.1" height="15.0" fill="rgb(248,56,5)" rx="2" ry="2" />
<text  x="640.34" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="329.3" y="421" width="0.3" height="15.0" fill="rgb(225,191,1)" rx="2" ry="2" />
<text  x="332.34" y="431.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (2 samples, 0.04%)</title><rect x="143.7" y="485" width="0.4" height="15.0" fill="rgb(228,30,41)" rx="2" ry="2" />
<text  x="146.68" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="1125.8" y="181" width="0.2" height="15.0" fill="rgb(235,7,39)" rx="2" ry="2" />
<text  x="1128.77" y="191.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (4 samples, 0.08%)</title><rect x="517.0" y="293" width="1.0" height="15.0" fill="rgb(251,174,47)" rx="2" ry="2" />
<text  x="520.04" y="303.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (2 samples, 0.04%)</title><rect x="351.1" y="197" width="0.5" height="15.0" fill="rgb(227,9,1)" rx="2" ry="2" />
<text  x="354.13" y="207.5" ></text>
</g>
<g >
<title>db::system_keyspace::load_host_ids (1 samples, 0.02%)</title><rect x="11.1" y="453" width="0.3" height="15.0" fill="rgb(233,146,52)" rx="2" ry="2" />
<text  x="14.13" y="463.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (96 samples, 1.85%)</title><rect x="800.5" y="325" width="21.8" height="15.0" fill="rgb(226,88,42)" rx="2" ry="2" />
<text  x="803.53" y="335.5" >s..</text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%)</title><rect x="87.6" y="357" width="0.2" height="15.0" fill="rgb(246,217,49)" rx="2" ry="2" />
<text  x="90.62" y="367.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (2 samples, 0.04%)</title><rect x="829.1" y="341" width="0.5" height="15.0" fill="rgb(228,40,0)" rx="2" ry="2" />
<text  x="832.12" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="728.3" y="533" width="0.3" height="15.0" fill="rgb(252,25,48)" rx="2" ry="2" />
<text  x="731.35" y="543.5" ></text>
</g>
<g >
<title>LZ4_compress_fast_extState (3 samples, 0.06%)</title><rect x="10.0" y="661" width="0.7" height="15.0" fill="rgb(253,122,0)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::to_expression (2 samples, 0.04%)</title><rect x="72.9" y="437" width="0.4" height="15.0" fill="rgb(237,201,12)" rx="2" ry="2" />
<text  x="75.87" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (8 samples, 0.15%)</title><rect x="840.7" y="373" width="1.8" height="15.0" fill="rgb(243,125,22)" rx="2" ry="2" />
<text  x="843.70" y="383.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (1 samples, 0.02%)</title><rect x="869.3" y="453" width="0.2" height="15.0" fill="rgb(209,118,33)" rx="2" ry="2" />
<text  x="872.30" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (2 samples, 0.04%)</title><rect x="772.6" y="437" width="0.5" height="15.0" fill="rgb(244,161,28)" rx="2" ry="2" />
<text  x="775.61" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="929.7" y="389" width="0.4" height="15.0" fill="rgb(235,38,12)" rx="2" ry="2" />
<text  x="932.67" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="858.2" y="389" width="0.2" height="15.0" fill="rgb(235,167,45)" rx="2" ry="2" />
<text  x="861.17" y="399.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="536.1" y="357" width="0.5" height="15.0" fill="rgb(248,192,13)" rx="2" ry="2" />
<text  x="539.11" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (2 samples, 0.04%)</title><rect x="803.0" y="245" width="0.5" height="15.0" fill="rgb(238,168,24)" rx="2" ry="2" />
<text  x="806.02" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="856.8" y="405" width="0.2" height="15.0" fill="rgb(213,83,1)" rx="2" ry="2" />
<text  x="859.81" y="415.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="122.3" y="501" width="0.3" height="15.0" fill="rgb(250,24,50)" rx="2" ry="2" />
<text  x="125.35" y="511.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (1 samples, 0.02%)</title><rect x="860.2" y="421" width="0.2" height="15.0" fill="rgb(242,67,34)" rx="2" ry="2" />
<text  x="863.22" y="431.5" ></text>
</g>
<g >
<title>ser::mutation_partition_view::rows (1 samples, 0.02%)</title><rect x="1117.6" y="261" width="0.2" height="15.0" fill="rgb(221,180,52)" rx="2" ry="2" />
<text  x="1120.60" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%)</title><rect x="741.3" y="421" width="0.4" height="15.0" fill="rgb(224,197,48)" rx="2" ry="2" />
<text  x="744.29" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="49.3" y="245" width="0.6" height="15.0" fill="rgb(226,209,10)" rx="2" ry="2" />
<text  x="52.27" y="255.5" ></text>
</g>
<g >
<title>partition_entry::read (2 samples, 0.04%)</title><rect x="533.8" y="341" width="0.5" height="15.0" fill="rgb(226,22,38)" rx="2" ry="2" />
<text  x="536.84" y="351.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (13 samples, 0.25%)</title><rect x="396.3" y="197" width="2.9" height="15.0" fill="rgb(218,152,4)" rx="2" ry="2" />
<text  x="399.30" y="207.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="39.7" y="309" width="0.7" height="15.0" fill="rgb(241,150,17)" rx="2" ry="2" />
<text  x="42.73" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (1 samples, 0.02%)</title><rect x="552.9" y="277" width="0.2" height="15.0" fill="rgb(206,112,53)" rx="2" ry="2" />
<text  x="555.90" y="287.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="104.9" y="485" width="0.9" height="15.0" fill="rgb(223,100,3)" rx="2" ry="2" />
<text  x="107.87" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="72.9" y="405" width="0.2" height="15.0" fill="rgb(253,24,45)" rx="2" ry="2" />
<text  x="75.87" y="415.5" ></text>
</g>
<g >
<title>_start (4 samples, 0.08%)</title><rect x="1166.8" y="661" width="1.0" height="15.0" fill="rgb(216,119,54)" rx="2" ry="2" />
<text  x="1169.85" y="671.5" ></text>
</g>
<g >
<title>tolower (2 samples, 0.04%)</title><rect x="43.1" y="341" width="0.5" height="15.0" fill="rgb(228,127,16)" rx="2" ry="2" />
<text  x="46.14" y="351.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%)</title><rect x="1111.9" y="309" width="0.3" height="15.0" fill="rgb(242,178,8)" rx="2" ry="2" />
<text  x="1114.92" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="20.4" y="373" width="0.3" height="15.0" fill="rgb(244,85,32)" rx="2" ry="2" />
<text  x="23.44" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="57.4" y="165" width="0.3" height="15.0" fill="rgb(230,227,17)" rx="2" ry="2" />
<text  x="60.44" y="175.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (14 samples, 0.27%)</title><rect x="213.4" y="261" width="3.1" height="15.0" fill="rgb(219,178,0)" rx="2" ry="2" />
<text  x="216.36" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="111.7" y="245" width="0.2" height="15.0" fill="rgb(235,61,40)" rx="2" ry="2" />
<text  x="114.68" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="440.6" y="277" width="0.4" height="15.0" fill="rgb(232,77,5)" rx="2" ry="2" />
<text  x="443.56" y="287.5" ></text>
</g>
<g >
<title>ser::column_view::c (1 samples, 0.02%)</title><rect x="1116.5" y="261" width="0.2" height="15.0" fill="rgb(226,18,10)" rx="2" ry="2" />
<text  x="1119.46" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (7 samples, 0.13%)</title><rect x="208.1" y="277" width="1.6" height="15.0" fill="rgb(230,27,31)" rx="2" ry="2" />
<text  x="211.14" y="287.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="287.4" y="197" width="0.2" height="15.0" fill="rgb(219,165,45)" rx="2" ry="2" />
<text  x="290.35" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="626.7" y="469" width="0.2" height="15.0" fill="rgb(248,225,45)" rx="2" ry="2" />
<text  x="629.67" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="754.2" y="421" width="0.3" height="15.0" fill="rgb(240,64,19)" rx="2" ry="2" />
<text  x="757.22" y="431.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (1 samples, 0.02%)</title><rect x="352.5" y="213" width="0.2" height="15.0" fill="rgb(235,1,10)" rx="2" ry="2" />
<text  x="355.49" y="223.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="1130.3" y="421" width="0.2" height="15.0" fill="rgb(229,217,17)" rx="2" ry="2" />
<text  x="1133.31" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::optional&lt;auth::resource&gt;&amp;&amp;, service::client_state::check_has_permission (1 samples, 0.02%)</title><rect x="825.9" y="373" width="0.3" height="15.0" fill="rgb(238,102,3)" rx="2" ry="2" />
<text  x="828.95" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator::operator* (1 samples, 0.02%)</title><rect x="1046.6" y="341" width="0.2" height="15.0" fill="rgb(226,109,28)" rx="2" ry="2" />
<text  x="1049.56" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="609.9" y="405" width="0.7" height="15.0" fill="rgb(226,117,41)" rx="2" ry="2" />
<text  x="612.87" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%)</title><rect x="58.3" y="245" width="0.5" height="15.0" fill="rgb(227,58,29)" rx="2" ry="2" />
<text  x="61.34" y="255.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="691.6" y="517" width="0.2" height="15.0" fill="rgb(220,58,39)" rx="2" ry="2" />
<text  x="694.58" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%)</title><rect x="52.0" y="325" width="0.2" height="15.0" fill="rgb(247,177,39)" rx="2" ry="2" />
<text  x="54.99" y="335.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (1 samples, 0.02%)</title><rect x="1122.6" y="197" width="0.2" height="15.0" fill="rgb(209,171,54)" rx="2" ry="2" />
<text  x="1125.59" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (2 samples, 0.04%)</title><rect x="561.3" y="453" width="0.5" height="15.0" fill="rgb(245,197,54)" rx="2" ry="2" />
<text  x="564.30" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (1 samples, 0.02%)</title><rect x="958.9" y="405" width="0.3" height="15.0" fill="rgb(217,225,23)" rx="2" ry="2" />
<text  x="961.95" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (2 samples, 0.04%)</title><rect x="559.3" y="421" width="0.4" height="15.0" fill="rgb(216,63,47)" rx="2" ry="2" />
<text  x="562.26" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::take_value (2 samples, 0.04%)</title><rect x="561.3" y="437" width="0.5" height="15.0" fill="rgb(215,186,45)" rx="2" ry="2" />
<text  x="564.30" y="447.5" ></text>
</g>
<g >
<title>database::find_column_family (6 samples, 0.12%)</title><rect x="1006.6" y="277" width="1.4" height="15.0" fill="rgb(236,125,35)" rx="2" ry="2" />
<text  x="1009.61" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (544 samples, 10.46%)</title><rect x="328.0" y="437" width="123.5" height="15.0" fill="rgb(221,182,30)" rx="2" ry="2" />
<text  x="330.98" y="447.5" >seastar::future..</text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="701.6" y="357" width="0.2" height="15.0" fill="rgb(242,72,42)" rx="2" ry="2" />
<text  x="704.57" y="367.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="112.1" y="357" width="0.3" height="15.0" fill="rgb(236,52,49)" rx="2" ry="2" />
<text  x="115.14" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (2 samples, 0.04%)</title><rect x="1043.2" y="357" width="0.4" height="15.0" fill="rgb(251,225,28)" rx="2" ry="2" />
<text  x="1046.15" y="367.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="392.9" y="181" width="0.4" height="15.0" fill="rgb(249,62,51)" rx="2" ry="2" />
<text  x="395.89" y="191.5" ></text>
</g>
<g >
<title>hashing_partition_visitor&lt;hasher&gt;::accept_row_cell (1 samples, 0.02%)</title><rect x="112.1" y="389" width="0.3" height="15.0" fill="rgb(215,85,5)" rx="2" ry="2" />
<text  x="115.14" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (5 samples, 0.10%)</title><rect x="288.0" y="245" width="1.2" height="15.0" fill="rgb(207,177,19)" rx="2" ry="2" />
<text  x="291.03" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (43 samples, 0.83%)</title><rect x="579.2" y="341" width="9.8" height="15.0" fill="rgb(246,177,41)" rx="2" ry="2" />
<text  x="582.23" y="351.5" ></text>
</g>
<g >
<title>seastar::(anonymous namespace)::thread_wake_task::run_and_dispose (1 samples, 0.02%)</title><rect x="648.7" y="533" width="0.2" height="15.0" fill="rgb(230,148,28)" rx="2" ry="2" />
<text  x="651.68" y="543.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (53 samples, 1.02%)</title><rect x="95.3" y="533" width="12.1" height="15.0" fill="rgb(253,35,23)" rx="2" ry="2" />
<text  x="98.34" y="543.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="85.6" y="469" width="0.2" height="15.0" fill="rgb(224,197,22)" rx="2" ry="2" />
<text  x="88.58" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="875.7" y="261" width="0.2" height="15.0" fill="rgb(215,124,16)" rx="2" ry="2" />
<text  x="878.65" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="61.3" y="341" width="0.2" height="15.0" fill="rgb(208,133,1)" rx="2" ry="2" />
<text  x="64.29" y="351.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="49.3" y="197" width="0.2" height="15.0" fill="rgb(237,48,36)" rx="2" ry="2" />
<text  x="52.27" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="992.3" y="341" width="0.2" height="15.0" fill="rgb(216,40,17)" rx="2" ry="2" />
<text  x="995.31" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (3 samples, 0.06%)</title><rect x="303.2" y="325" width="0.7" height="15.0" fill="rgb(221,198,23)" rx="2" ry="2" />
<text  x="306.24" y="335.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="854.1" y="453" width="1.6" height="15.0" fill="rgb(245,156,49)" rx="2" ry="2" />
<text  x="857.09" y="463.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="700.2" y="517" width="0.2" height="15.0" fill="rgb(207,35,31)" rx="2" ry="2" />
<text  x="703.21" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="62.0" y="309" width="0.2" height="15.0" fill="rgb(218,57,28)" rx="2" ry="2" />
<text  x="64.98" y="319.5" ></text>
</g>
<g >
<title>cql3::update_parameters::prefetch_data::prefetch_data (1 samples, 0.02%)</title><rect x="877.7" y="405" width="0.2" height="15.0" fill="rgb(209,120,42)" rx="2" ry="2" />
<text  x="880.69" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (1 samples, 0.02%)</title><rect x="1016.8" y="229" width="0.3" height="15.0" fill="rgb(239,114,45)" rx="2" ry="2" />
<text  x="1019.82" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (4 samples, 0.08%)</title><rect x="838.0" y="341" width="0.9" height="15.0" fill="rgb(215,66,45)" rx="2" ry="2" />
<text  x="840.97" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (1 samples, 0.02%)</title><rect x="163.2" y="453" width="0.2" height="15.0" fill="rgb(228,210,16)" rx="2" ry="2" />
<text  x="166.20" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="57.4" y="181" width="0.3" height="15.0" fill="rgb(210,110,30)" rx="2" ry="2" />
<text  x="60.44" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (6 samples, 0.12%)</title><rect x="476.4" y="309" width="1.4" height="15.0" fill="rgb(214,200,13)" rx="2" ry="2" />
<text  x="479.42" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="703.2" y="485" width="0.2" height="15.0" fill="rgb(237,62,43)" rx="2" ry="2" />
<text  x="706.16" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="1109.0" y="453" width="0.2" height="15.0" fill="rgb(248,163,37)" rx="2" ry="2" />
<text  x="1111.97" y="463.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (257 samples, 4.94%)</title><rect x="22.5" y="517" width="58.3" height="15.0" fill="rgb(224,66,3)" rx="2" ry="2" />
<text  x="25.48" y="527.5" >cql3::..</text>
</g>
<g >
<title>single_node_cql_env::local_qp (1 samples, 0.02%)</title><rect x="859.1" y="485" width="0.2" height="15.0" fill="rgb(233,32,54)" rx="2" ry="2" />
<text  x="862.08" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="469.6" y="293" width="0.2" height="15.0" fill="rgb(213,180,18)" rx="2" ry="2" />
<text  x="472.61" y="303.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (4 samples, 0.08%)</title><rect x="999.1" y="293" width="0.9" height="15.0" fill="rgb(217,97,0)" rx="2" ry="2" />
<text  x="1002.12" y="303.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="105.8" y="485" width="0.2" height="15.0" fill="rgb(236,220,16)" rx="2" ry="2" />
<text  x="108.78" y="495.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="62.2" y="325" width="0.2" height="15.0" fill="rgb(253,15,42)" rx="2" ry="2" />
<text  x="65.20" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (33 samples, 0.63%)</title><rect x="871.1" y="485" width="7.5" height="15.0" fill="rgb(229,170,4)" rx="2" ry="2" />
<text  x="874.11" y="495.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="934.2" y="437" width="0.5" height="15.0" fill="rgb(214,197,14)" rx="2" ry="2" />
<text  x="937.21" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (1 samples, 0.02%)</title><rect x="959.4" y="405" width="0.2" height="15.0" fill="rgb(217,56,12)" rx="2" ry="2" />
<text  x="962.40" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (2 samples, 0.04%)</title><rect x="61.7" y="341" width="0.5" height="15.0" fill="rgb(206,198,34)" rx="2" ry="2" />
<text  x="64.75" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="779.9" y="405" width="0.2" height="15.0" fill="rgb(251,62,14)" rx="2" ry="2" />
<text  x="782.87" y="415.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::run_with_ordered_post_op&lt;db::commitlog::segment::cycle (1 samples, 0.02%)</title><rect x="727.7" y="517" width="0.2" height="15.0" fill="rgb(229,94,35)" rx="2" ry="2" />
<text  x="730.67" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (19 samples, 0.37%)</title><rect x="1158.2" y="501" width="4.3" height="15.0" fill="rgb(215,229,4)" rx="2" ry="2" />
<text  x="1161.22" y="511.5" ></text>
</g>
<g >
<title>schema::get_column_definition (1 samples, 0.02%)</title><rect x="79.5" y="453" width="0.2" height="15.0" fill="rgb(231,98,47)" rx="2" ry="2" />
<text  x="82.45" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (2 samples, 0.04%)</title><rect x="1098.1" y="437" width="0.4" height="15.0" fill="rgb(206,209,48)" rx="2" ry="2" />
<text  x="1101.08" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (2 samples, 0.04%)</title><rect x="300.7" y="309" width="0.5" height="15.0" fill="rgb(218,50,36)" rx="2" ry="2" />
<text  x="303.74" y="319.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="702.2" y="229" width="0.3" height="15.0" fill="rgb(240,56,30)" rx="2" ry="2" />
<text  x="705.25" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="307.3" y="373" width="0.3" height="15.0" fill="rgb(241,93,52)" rx="2" ry="2" />
<text  x="310.33" y="383.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (1 samples, 0.02%)</title><rect x="277.4" y="261" width="0.2" height="15.0" fill="rgb(208,38,42)" rx="2" ry="2" />
<text  x="280.37" y="271.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%)</title><rect x="710.2" y="469" width="0.4" height="15.0" fill="rgb(205,185,26)" rx="2" ry="2" />
<text  x="713.19" y="479.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (2 samples, 0.04%)</title><rect x="701.1" y="533" width="0.5" height="15.0" fill="rgb(245,12,28)" rx="2" ry="2" />
<text  x="704.11" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (58 samples, 1.12%)</title><rect x="234.2" y="133" width="13.2" height="15.0" fill="rgb(247,74,31)" rx="2" ry="2" />
<text  x="237.24" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="37.5" y="309" width="0.2" height="15.0" fill="rgb(208,52,13)" rx="2" ry="2" />
<text  x="40.46" y="319.5" ></text>
</g>
<g >
<title>row_cache::update (1 samples, 0.02%)</title><rect x="1130.3" y="485" width="0.2" height="15.0" fill="rgb(234,198,42)" rx="2" ry="2" />
<text  x="1133.31" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="63.1" y="293" width="0.2" height="15.0" fill="rgb(205,55,24)" rx="2" ry="2" />
<text  x="66.11" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%)</title><rect x="261.5" y="149" width="0.2" height="15.0" fill="rgb(217,109,38)" rx="2" ry="2" />
<text  x="264.48" y="159.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (6 samples, 0.12%)</title><rect x="1034.3" y="277" width="1.4" height="15.0" fill="rgb(212,64,13)" rx="2" ry="2" />
<text  x="1037.30" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.10%)</title><rect x="675.5" y="517" width="1.1" height="15.0" fill="rgb(225,189,20)" rx="2" ry="2" />
<text  x="678.47" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::do_wait (1 samples, 0.02%)</title><rect x="20.9" y="549" width="0.2" height="15.0" fill="rgb(247,178,33)" rx="2" ry="2" />
<text  x="23.89" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (1 samples, 0.02%)</title><rect x="77.0" y="357" width="0.2" height="15.0" fill="rgb(242,198,27)" rx="2" ry="2" />
<text  x="79.96" y="367.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="160.9" y="421" width="0.3" height="15.0" fill="rgb(208,182,12)" rx="2" ry="2" />
<text  x="163.93" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (1 samples, 0.02%)</title><rect x="591.3" y="373" width="0.2" height="15.0" fill="rgb(224,171,53)" rx="2" ry="2" />
<text  x="594.26" y="383.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (270 samples, 5.19%)</title><rect x="22.5" y="549" width="61.3" height="15.0" fill="rgb(247,192,24)" rx="2" ry="2" />
<text  x="25.48" y="559.5" >single..</text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="20.0" y="453" width="0.2" height="15.0" fill="rgb(216,227,54)" rx="2" ry="2" />
<text  x="22.99" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="590.8" y="341" width="0.2" height="15.0" fill="rgb(227,93,10)" rx="2" ry="2" />
<text  x="593.81" y="351.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%)</title><rect x="697.7" y="485" width="0.5" height="15.0" fill="rgb(239,65,54)" rx="2" ry="2" />
<text  x="700.71" y="495.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (9 samples, 0.17%)</title><rect x="840.7" y="405" width="2.0" height="15.0" fill="rgb(232,20,15)" rx="2" ry="2" />
<text  x="843.70" y="415.5" ></text>
</g>
<g >
<title>table::add_coordinator_read_latency (2 samples, 0.04%)</title><rect x="1157.5" y="517" width="0.5" height="15.0" fill="rgb(249,169,15)" rx="2" ry="2" />
<text  x="1160.54" y="527.5" ></text>
</g>
<g >
<title>compound_type&lt; (8 samples, 0.15%)</title><rect x="910.6" y="405" width="1.8" height="15.0" fill="rgb(244,81,19)" rx="2" ry="2" />
<text  x="913.60" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, bool&gt; (2 samples, 0.04%)</title><rect x="69.9" y="437" width="0.5" height="15.0" fill="rgb(216,35,26)" rx="2" ry="2" />
<text  x="72.92" y="447.5" ></text>
</g>
<g >
<title>frozen_mutation::unfreeze (1 samples, 0.02%)</title><rect x="111.9" y="453" width="0.2" height="15.0" fill="rgb(219,27,24)" rx="2" ry="2" />
<text  x="114.91" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="1024.5" y="229" width="1.4" height="15.0" fill="rgb(223,20,52)" rx="2" ry="2" />
<text  x="1027.54" y="239.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="539.5" y="373" width="0.5" height="15.0" fill="rgb(207,51,46)" rx="2" ry="2" />
<text  x="542.51" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="633.0" y="437" width="0.7" height="15.0" fill="rgb(229,191,53)" rx="2" ry="2" />
<text  x="636.02" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%)</title><rect x="187.0" y="341" width="0.3" height="15.0" fill="rgb(231,33,0)" rx="2" ry="2" />
<text  x="190.03" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="51.3" y="325" width="0.2" height="15.0" fill="rgb(235,125,52)" rx="2" ry="2" />
<text  x="54.31" y="335.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (2 samples, 0.04%)</title><rect x="462.3" y="373" width="0.5" height="15.0" fill="rgb(220,21,0)" rx="2" ry="2" />
<text  x="465.34" y="383.5" ></text>
</g>
<g >
<title>db::block_for (1 samples, 0.02%)</title><rect x="1126.0" y="213" width="0.2" height="15.0" fill="rgb(212,113,2)" rx="2" ry="2" />
<text  x="1129.00" y="223.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (12 samples, 0.23%)</title><rect x="128.9" y="485" width="2.8" height="15.0" fill="rgb(218,168,31)" rx="2" ry="2" />
<text  x="131.93" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (4 samples, 0.08%)</title><rect x="728.6" y="533" width="0.9" height="15.0" fill="rgb(247,76,42)" rx="2" ry="2" />
<text  x="731.58" y="543.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (9 samples, 0.17%)</title><rect x="942.8" y="437" width="2.1" height="15.0" fill="rgb(228,199,30)" rx="2" ry="2" />
<text  x="945.83" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (22 samples, 0.42%)</title><rect x="1068.6" y="309" width="5.0" height="15.0" fill="rgb(245,95,0)" rx="2" ry="2" />
<text  x="1071.57" y="319.5" ></text>
</g>
<g >
<title>sstables::shareable_components::~shareable_components (1 samples, 0.02%)</title><rect x="702.0" y="453" width="0.2" height="15.0" fill="rgb(250,174,29)" rx="2" ry="2" />
<text  x="705.02" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%)</title><rect x="306.0" y="357" width="0.2" height="15.0" fill="rgb(240,17,39)" rx="2" ry="2" />
<text  x="308.96" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (4 samples, 0.08%)</title><rect x="792.6" y="341" width="0.9" height="15.0" fill="rgb(242,158,12)" rx="2" ry="2" />
<text  x="795.58" y="351.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::create_keyspace_statement*, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="65.6" y="357" width="0.2" height="15.0" fill="rgb(247,2,50)" rx="2" ry="2" />
<text  x="68.61" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="992.8" y="341" width="0.2" height="15.0" fill="rgb(235,217,32)" rx="2" ry="2" />
<text  x="995.77" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (10 samples, 0.19%)</title><rect x="247.4" y="149" width="2.3" height="15.0" fill="rgb(229,35,5)" rx="2" ry="2" />
<text  x="250.41" y="159.5" ></text>
</g>
<g >
<title>compound_type&lt; (22 samples, 0.42%)</title><rect x="502.7" y="245" width="5.0" height="15.0" fill="rgb(253,187,5)" rx="2" ry="2" />
<text  x="505.74" y="255.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="842.7" y="437" width="0.3" height="15.0" fill="rgb(235,42,45)" rx="2" ry="2" />
<text  x="845.74" y="447.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%)</title><rect x="204.7" y="293" width="0.3" height="15.0" fill="rgb(245,175,4)" rx="2" ry="2" />
<text  x="207.74" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::cannot_hint&lt;boost::range::joined_range&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1126.4" y="229" width="0.3" height="15.0" fill="rgb(245,113,0)" rx="2" ry="2" />
<text  x="1129.45" y="239.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (3 samples, 0.06%)</title><rect x="812.6" y="149" width="0.6" height="15.0" fill="rgb(221,106,31)" rx="2" ry="2" />
<text  x="815.55" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%)</title><rect x="700.9" y="469" width="0.2" height="15.0" fill="rgb(223,72,10)" rx="2" ry="2" />
<text  x="703.89" y="479.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="204.3" y="261" width="0.4" height="15.0" fill="rgb(215,48,38)" rx="2" ry="2" />
<text  x="207.28" y="271.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (1 samples, 0.02%)</title><rect x="34.3" y="261" width="0.2" height="15.0" fill="rgb(221,22,32)" rx="2" ry="2" />
<text  x="37.29" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="79.9" y="405" width="0.2" height="15.0" fill="rgb(214,88,45)" rx="2" ry="2" />
<text  x="82.91" y="415.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (1 samples, 0.02%)</title><rect x="408.3" y="245" width="0.3" height="15.0" fill="rgb(206,68,22)" rx="2" ry="2" />
<text  x="411.33" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;global_schema_ptr, std::allocator&lt;global_schema_ptr&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="111.5" y="485" width="0.4" height="15.0" fill="rgb(219,108,43)" rx="2" ry="2" />
<text  x="114.45" y="495.5" ></text>
</g>
<g >
<title>[unknown] (26 samples, 0.50%)</title><rect x="11.6" y="629" width="5.9" height="15.0" fill="rgb(211,139,12)" rx="2" ry="2" />
<text  x="14.59" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="265.8" y="181" width="0.2" height="15.0" fill="rgb(232,0,7)" rx="2" ry="2" />
<text  x="268.79" y="191.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (11 samples, 0.21%)</title><rect x="552.0" y="341" width="2.5" height="15.0" fill="rgb(242,50,23)" rx="2" ry="2" />
<text  x="555.00" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (4 samples, 0.08%)</title><rect x="193.2" y="277" width="0.9" height="15.0" fill="rgb(214,178,6)" rx="2" ry="2" />
<text  x="196.16" y="287.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="702.2" y="437" width="0.3" height="15.0" fill="rgb(250,177,31)" rx="2" ry="2" />
<text  x="705.25" y="447.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (1 samples, 0.02%)</title><rect x="700.7" y="309" width="0.2" height="15.0" fill="rgb(208,6,39)" rx="2" ry="2" />
<text  x="703.66" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1097.6" y="421" width="0.3" height="15.0" fill="rgb(225,45,41)" rx="2" ry="2" />
<text  x="1100.62" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::on_new_range (1 samples, 0.02%)</title><rect x="86.9" y="405" width="0.3" height="15.0" fill="rgb(254,20,53)" rx="2" ry="2" />
<text  x="89.94" y="415.5" ></text>
</g>
<g >
<title>seastar::execution_stage::execution_stage (1 samples, 0.02%)</title><rect x="872.2" y="341" width="0.3" height="15.0" fill="rgb(233,194,28)" rx="2" ry="2" />
<text  x="875.25" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (3 samples, 0.06%)</title><rect x="97.6" y="517" width="0.7" height="15.0" fill="rgb(236,208,49)" rx="2" ry="2" />
<text  x="100.61" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="54.9" y="293" width="0.3" height="15.0" fill="rgb(253,52,35)" rx="2" ry="2" />
<text  x="57.94" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="951.0" y="405" width="0.5" height="15.0" fill="rgb(245,184,37)" rx="2" ry="2" />
<text  x="954.00" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="472.1" y="293" width="0.2" height="15.0" fill="rgb(221,196,22)" rx="2" ry="2" />
<text  x="475.10" y="303.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (6 samples, 0.12%)</title><rect x="279.0" y="277" width="1.3" height="15.0" fill="rgb(253,26,34)" rx="2" ry="2" />
<text  x="281.96" y="287.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="938.1" y="405" width="1.3" height="15.0" fill="rgb(237,183,9)" rx="2" ry="2" />
<text  x="941.07" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="63.6" y="309" width="0.2" height="15.0" fill="rgb(212,40,49)" rx="2" ry="2" />
<text  x="66.56" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;mutation const*, mutation*&gt; (1 samples, 0.02%)</title><rect x="112.8" y="421" width="0.2" height="15.0" fill="rgb(243,163,25)" rx="2" ry="2" />
<text  x="115.82" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="911.5" y="389" width="0.7" height="15.0" fill="rgb(210,81,3)" rx="2" ry="2" />
<text  x="914.51" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (13 samples, 0.25%)</title><rect x="1043.6" y="341" width="3.0" height="15.0" fill="rgb(240,22,0)" rx="2" ry="2" />
<text  x="1046.61" y="351.5" ></text>
</g>
<g >
<title>mutation_partition::non_dummy_rows (1 samples, 0.02%)</title><rect x="1123.7" y="181" width="0.3" height="15.0" fill="rgb(245,155,52)" rx="2" ry="2" />
<text  x="1126.73" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="83.5" y="533" width="0.3" height="15.0" fill="rgb(241,18,41)" rx="2" ry="2" />
<text  x="86.54" y="543.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="58.1" y="117" width="0.2" height="15.0" fill="rgb(248,81,12)" rx="2" ry="2" />
<text  x="61.12" y="127.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (2 samples, 0.04%)</title><rect x="842.1" y="325" width="0.4" height="15.0" fill="rgb(215,115,3)" rx="2" ry="2" />
<text  x="845.06" y="335.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (6 samples, 0.12%)</title><rect x="756.0" y="373" width="1.4" height="15.0" fill="rgb(243,8,43)" rx="2" ry="2" />
<text  x="759.04" y="383.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="665.0" y="469" width="0.3" height="15.0" fill="rgb(213,176,10)" rx="2" ry="2" />
<text  x="668.03" y="479.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (1 samples, 0.02%)</title><rect x="113.0" y="469" width="0.3" height="15.0" fill="rgb(234,69,41)" rx="2" ry="2" />
<text  x="116.04" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="687.5" y="501" width="0.2" height="15.0" fill="rgb(207,34,6)" rx="2" ry="2" />
<text  x="690.50" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="554.3" y="325" width="0.2" height="15.0" fill="rgb(243,69,18)" rx="2" ry="2" />
<text  x="557.27" y="335.5" ></text>
</g>
<g >
<title>mutation::data::data (1 samples, 0.02%)</title><rect x="877.5" y="341" width="0.2" height="15.0" fill="rgb(241,17,52)" rx="2" ry="2" />
<text  x="880.47" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (3 samples, 0.06%)</title><rect x="665.9" y="453" width="0.7" height="15.0" fill="rgb(254,62,40)" rx="2" ry="2" />
<text  x="668.93" y="463.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="516.8" y="277" width="0.2" height="15.0" fill="rgb(242,65,30)" rx="2" ry="2" />
<text  x="519.82" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (32 samples, 0.62%)</title><rect x="810.5" y="213" width="7.3" height="15.0" fill="rgb(253,37,1)" rx="2" ry="2" />
<text  x="813.51" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="354.1" y="213" width="0.2" height="15.0" fill="rgb(218,127,3)" rx="2" ry="2" />
<text  x="357.08" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="633.9" y="469" width="0.3" height="15.0" fill="rgb(242,175,23)" rx="2" ry="2" />
<text  x="636.93" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.12%)</title><rect x="629.8" y="469" width="1.4" height="15.0" fill="rgb(219,100,25)" rx="2" ry="2" />
<text  x="632.85" y="479.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (13 samples, 0.25%)</title><rect x="719.7" y="469" width="3.0" height="15.0" fill="rgb(236,134,11)" rx="2" ry="2" />
<text  x="722.72" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr, false&gt;::uninitialized_set&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (1 samples, 0.02%)</title><rect x="756.3" y="341" width="0.2" height="15.0" fill="rgb(249,179,26)" rx="2" ry="2" />
<text  x="759.27" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="58.1" y="197" width="0.2" height="15.0" fill="rgb(234,48,16)" rx="2" ry="2" />
<text  x="61.12" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="119.6" y="517" width="0.3" height="15.0" fill="rgb(213,225,23)" rx="2" ry="2" />
<text  x="122.62" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="41.8" y="261" width="0.2" height="15.0" fill="rgb(230,19,0)" rx="2" ry="2" />
<text  x="44.78" y="271.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="816.9" y="101" width="0.2" height="15.0" fill="rgb(216,173,14)" rx="2" ry="2" />
<text  x="819.87" y="111.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%)</title><rect x="938.1" y="389" width="1.3" height="15.0" fill="rgb(217,104,26)" rx="2" ry="2" />
<text  x="941.07" y="399.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (3 samples, 0.06%)</title><rect x="113.3" y="453" width="0.7" height="15.0" fill="rgb(250,164,10)" rx="2" ry="2" />
<text  x="116.27" y="463.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%)</title><rect x="350.7" y="197" width="0.2" height="15.0" fill="rgb(232,131,6)" rx="2" ry="2" />
<text  x="353.68" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (4 samples, 0.08%)</title><rect x="940.6" y="357" width="0.9" height="15.0" fill="rgb(246,209,47)" rx="2" ry="2" />
<text  x="943.56" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="88.5" y="549" width="0.3" height="15.0" fill="rgb(235,89,5)" rx="2" ry="2" />
<text  x="91.53" y="559.5" ></text>
</g>
<g >
<title>seastar::io_queue::poll_io_queue (1 samples, 0.02%)</title><rect x="1164.6" y="517" width="0.2" height="15.0" fill="rgb(216,146,40)" rx="2" ry="2" />
<text  x="1167.58" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (1 samples, 0.02%)</title><rect x="78.5" y="373" width="0.3" height="15.0" fill="rgb(231,70,26)" rx="2" ry="2" />
<text  x="81.54" y="383.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="41.8" y="229" width="0.2" height="15.0" fill="rgb(233,90,17)" rx="2" ry="2" />
<text  x="44.78" y="239.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (3 samples, 0.06%)</title><rect x="816.6" y="133" width="0.7" height="15.0" fill="rgb(206,105,42)" rx="2" ry="2" />
<text  x="819.64" y="143.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="675.0" y="517" width="0.2" height="15.0" fill="rgb(220,212,50)" rx="2" ry="2" />
<text  x="678.01" y="527.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="443.7" y="309" width="0.5" height="15.0" fill="rgb(229,93,29)" rx="2" ry="2" />
<text  x="446.73" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%)</title><rect x="269.9" y="229" width="0.2" height="15.0" fill="rgb(216,168,47)" rx="2" ry="2" />
<text  x="272.88" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="554.0" y="293" width="0.3" height="15.0" fill="rgb(210,45,44)" rx="2" ry="2" />
<text  x="557.04" y="303.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%)</title><rect x="877.2" y="373" width="0.3" height="15.0" fill="rgb(236,60,36)" rx="2" ry="2" />
<text  x="880.24" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (9 samples, 0.17%)</title><rect x="549.5" y="341" width="2.0" height="15.0" fill="rgb(221,74,48)" rx="2" ry="2" />
<text  x="552.50" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (139 samples, 2.67%)</title><rect x="571.1" y="453" width="31.5" height="15.0" fill="rgb(245,157,43)" rx="2" ry="2" />
<text  x="574.06" y="463.5" >st..</text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::update_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="64.5" y="373" width="0.2" height="15.0" fill="rgb(232,212,28)" rx="2" ry="2" />
<text  x="67.47" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="57.9" y="229" width="0.2" height="15.0" fill="rgb(209,47,49)" rx="2" ry="2" />
<text  x="60.89" y="239.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="11.1" y="501" width="0.3" height="15.0" fill="rgb(246,139,54)" rx="2" ry="2" />
<text  x="14.13" y="511.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (7 samples, 0.13%)</title><rect x="242.9" y="101" width="1.6" height="15.0" fill="rgb(240,39,6)" rx="2" ry="2" />
<text  x="245.87" y="111.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="514.1" y="309" width="0.4" height="15.0" fill="rgb(231,172,35)" rx="2" ry="2" />
<text  x="517.09" y="319.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Lexer (2 samples, 0.04%)</title><rect x="23.2" y="453" width="0.4" height="15.0" fill="rgb(206,68,45)" rx="2" ry="2" />
<text  x="26.16" y="463.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (2 samples, 0.04%)</title><rect x="830.9" y="421" width="0.5" height="15.0" fill="rgb(212,96,13)" rx="2" ry="2" />
<text  x="833.94" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt; (1 samples, 0.02%)</title><rect x="1108.5" y="453" width="0.2" height="15.0" fill="rgb(217,108,15)" rx="2" ry="2" />
<text  x="1111.52" y="463.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%)</title><rect x="20.7" y="549" width="0.2" height="15.0" fill="rgb(230,29,26)" rx="2" ry="2" />
<text  x="23.67" y="559.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (2 samples, 0.04%)</title><rect x="763.1" y="341" width="0.4" height="15.0" fill="rgb(205,154,20)" rx="2" ry="2" />
<text  x="766.08" y="351.5" ></text>
</g>
<g >
<title>database::find_column_family (2 samples, 0.04%)</title><rect x="1003.7" y="293" width="0.4" height="15.0" fill="rgb(224,19,0)" rx="2" ry="2" />
<text  x="1006.66" y="303.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="1033.4" y="277" width="0.9" height="15.0" fill="rgb(245,195,0)" rx="2" ry="2" />
<text  x="1036.39" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="54.7" y="165" width="0.2" height="15.0" fill="rgb(229,226,17)" rx="2" ry="2" />
<text  x="57.71" y="175.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%)</title><rect x="154.8" y="469" width="0.2" height="15.0" fill="rgb(250,33,27)" rx="2" ry="2" />
<text  x="157.80" y="479.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (1 samples, 0.02%)</title><rect x="1163.4" y="469" width="0.3" height="15.0" fill="rgb(211,72,27)" rx="2" ry="2" />
<text  x="1166.44" y="479.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="745.6" y="325" width="0.2" height="15.0" fill="rgb(243,21,34)" rx="2" ry="2" />
<text  x="748.60" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="144.1" y="485" width="0.3" height="15.0" fill="rgb(230,7,17)" rx="2" ry="2" />
<text  x="147.14" y="495.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (35 samples, 0.67%)</title><rect x="346.8" y="229" width="8.0" height="15.0" fill="rgb(243,208,7)" rx="2" ry="2" />
<text  x="349.82" y="239.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="27.2" y="277" width="0.3" height="15.0" fill="rgb(216,201,31)" rx="2" ry="2" />
<text  x="30.25" y="287.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (5 samples, 0.10%)</title><rect x="164.6" y="469" width="1.1" height="15.0" fill="rgb(238,121,22)" rx="2" ry="2" />
<text  x="167.56" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.12%)</title><rect x="1135.8" y="517" width="1.3" height="15.0" fill="rgb(214,18,48)" rx="2" ry="2" />
<text  x="1138.75" y="527.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.13%)</title><rect x="40.4" y="373" width="1.6" height="15.0" fill="rgb(233,121,14)" rx="2" ry="2" />
<text  x="43.41" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (23 samples, 0.44%)</title><rect x="73.6" y="437" width="5.2" height="15.0" fill="rgb(214,141,7)" rx="2" ry="2" />
<text  x="76.55" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (5 samples, 0.10%)</title><rect x="555.2" y="373" width="1.1" height="15.0" fill="rgb(236,146,46)" rx="2" ry="2" />
<text  x="558.17" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (1 samples, 0.02%)</title><rect x="82.4" y="533" width="0.2" height="15.0" fill="rgb(248,146,21)" rx="2" ry="2" />
<text  x="85.40" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="783.0" y="373" width="0.5" height="15.0" fill="rgb(214,182,48)" rx="2" ry="2" />
<text  x="786.05" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="49.9" y="213" width="0.5" height="15.0" fill="rgb(251,155,21)" rx="2" ry="2" />
<text  x="52.95" y="223.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (18 samples, 0.35%)</title><rect x="271.0" y="229" width="4.1" height="15.0" fill="rgb(229,185,12)" rx="2" ry="2" />
<text  x="274.01" y="239.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="928.3" y="373" width="0.2" height="15.0" fill="rgb(234,21,41)" rx="2" ry="2" />
<text  x="931.31" y="383.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::drop_index_statement*, std::default_delete&lt;cql3::statements::drop_index_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="66.3" y="373" width="0.2" height="15.0" fill="rgb(228,179,18)" rx="2" ry="2" />
<text  x="69.29" y="383.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (2 samples, 0.04%)</title><rect x="1113.5" y="245" width="0.5" height="15.0" fill="rgb(205,170,54)" rx="2" ry="2" />
<text  x="1116.51" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (2 samples, 0.04%)</title><rect x="299.6" y="293" width="0.5" height="15.0" fill="rgb(208,111,22)" rx="2" ry="2" />
<text  x="302.61" y="303.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="1122.1" y="197" width="0.3" height="15.0" fill="rgb(229,183,12)" rx="2" ry="2" />
<text  x="1125.14" y="207.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%)</title><rect x="437.4" y="229" width="0.2" height="15.0" fill="rgb(220,104,44)" rx="2" ry="2" />
<text  x="440.38" y="239.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="45.6" y="325" width="0.3" height="15.0" fill="rgb(251,212,7)" rx="2" ry="2" />
<text  x="48.63" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (14 samples, 0.27%)</title><rect x="763.5" y="325" width="3.2" height="15.0" fill="rgb(213,197,9)" rx="2" ry="2" />
<text  x="766.53" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%)</title><rect x="509.8" y="357" width="0.2" height="15.0" fill="rgb(226,161,2)" rx="2" ry="2" />
<text  x="512.78" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="62.2" y="277" width="0.2" height="15.0" fill="rgb(205,56,11)" rx="2" ry="2" />
<text  x="65.20" y="287.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (2 samples, 0.04%)</title><rect x="506.1" y="213" width="0.5" height="15.0" fill="rgb(218,190,53)" rx="2" ry="2" />
<text  x="509.15" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="869.5" y="357" width="0.5" height="15.0" fill="rgb(205,18,33)" rx="2" ry="2" />
<text  x="872.52" y="367.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%)</title><rect x="213.6" y="245" width="0.2" height="15.0" fill="rgb(236,31,43)" rx="2" ry="2" />
<text  x="216.59" y="255.5" ></text>
</g>
<g >
<title>ser::serializer&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::skip&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="660.0" y="405" width="0.3" height="15.0" fill="rgb(220,48,37)" rx="2" ry="2" />
<text  x="663.03" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%)</title><rect x="1130.3" y="309" width="0.2" height="15.0" fill="rgb(216,138,1)" rx="2" ry="2" />
<text  x="1133.31" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (4 samples, 0.08%)</title><rect x="510.0" y="357" width="0.9" height="15.0" fill="rgb(247,40,28)" rx="2" ry="2" />
<text  x="513.01" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (478 samples, 9.19%)</title><rect x="334.6" y="341" width="108.5" height="15.0" fill="rgb(215,193,34)" rx="2" ry="2" />
<text  x="337.56" y="351.5" >std::__invoke..</text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_view&gt;::read&lt;seastar::memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="1120.3" y="325" width="0.2" height="15.0" fill="rgb(223,126,51)" rx="2" ry="2" />
<text  x="1123.32" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (8 samples, 0.15%)</title><rect x="1141.0" y="469" width="1.8" height="15.0" fill="rgb(212,46,43)" rx="2" ry="2" />
<text  x="1143.98" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (3 samples, 0.06%)</title><rect x="642.1" y="453" width="0.7" height="15.0" fill="rgb(239,155,30)" rx="2" ry="2" />
<text  x="645.10" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (1 samples, 0.02%)</title><rect x="1027.7" y="293" width="0.2" height="15.0" fill="rgb(227,161,21)" rx="2" ry="2" />
<text  x="1030.72" y="303.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="78.3" y="325" width="0.2" height="15.0" fill="rgb(243,222,39)" rx="2" ry="2" />
<text  x="81.32" y="335.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%)</title><rect x="692.7" y="485" width="0.2" height="15.0" fill="rgb(253,148,6)" rx="2" ry="2" />
<text  x="695.72" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="467.8" y="309" width="0.2" height="15.0" fill="rgb(212,49,9)" rx="2" ry="2" />
<text  x="470.79" y="319.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (4 samples, 0.08%)</title><rect x="40.4" y="357" width="0.9" height="15.0" fill="rgb(236,164,17)" rx="2" ry="2" />
<text  x="43.41" y="367.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="1164.4" y="261" width="0.2" height="15.0" fill="rgb(248,12,43)" rx="2" ry="2" />
<text  x="1167.35" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="907.0" y="389" width="0.4" height="15.0" fill="rgb(217,224,17)" rx="2" ry="2" />
<text  x="909.97" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="941.2" y="341" width="0.3" height="15.0" fill="rgb(243,200,42)" rx="2" ry="2" />
<text  x="944.24" y="351.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="42.0" y="373" width="0.2" height="15.0" fill="rgb(228,130,17)" rx="2" ry="2" />
<text  x="45.00" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%)</title><rect x="130.5" y="453" width="0.5" height="15.0" fill="rgb(227,32,4)" rx="2" ry="2" />
<text  x="133.52" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (2 samples, 0.04%)</title><rect x="508.9" y="357" width="0.4" height="15.0" fill="rgb(219,133,29)" rx="2" ry="2" />
<text  x="511.87" y="367.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%)</title><rect x="10.7" y="389" width="0.2" height="15.0" fill="rgb(235,12,47)" rx="2" ry="2" />
<text  x="13.68" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (1 samples, 0.02%)</title><rect x="705.4" y="501" width="0.3" height="15.0" fill="rgb(248,41,52)" rx="2" ry="2" />
<text  x="708.43" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="45.4" y="293" width="0.2" height="15.0" fill="rgb(248,220,41)" rx="2" ry="2" />
<text  x="48.41" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;cql3::update_parameters::prefetch_data&gt;::future_state&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="877.7" y="421" width="0.2" height="15.0" fill="rgb(240,138,14)" rx="2" ry="2" />
<text  x="880.69" y="431.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (62 samples, 1.19%)</title><rect x="894.5" y="421" width="14.1" height="15.0" fill="rgb(228,107,44)" rx="2" ry="2" />
<text  x="897.49" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%)</title><rect x="736.5" y="469" width="0.2" height="15.0" fill="rgb(247,118,35)" rx="2" ry="2" />
<text  x="739.52" y="479.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%)</title><rect x="843.2" y="437" width="0.2" height="15.0" fill="rgb(227,12,44)" rx="2" ry="2" />
<text  x="846.19" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (6 samples, 0.12%)</title><rect x="1153.9" y="517" width="1.4" height="15.0" fill="rgb(230,189,10)" rx="2" ry="2" />
<text  x="1156.91" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (13 samples, 0.25%)</title><rect x="1032.7" y="309" width="3.0" height="15.0" fill="rgb(235,203,20)" rx="2" ry="2" />
<text  x="1035.71" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="1055.6" y="357" width="0.5" height="15.0" fill="rgb(207,217,26)" rx="2" ry="2" />
<text  x="1058.64" y="367.5" ></text>
</g>
<g >
<title>database::find_schema (29 samples, 0.56%)</title><rect x="834.1" y="405" width="6.6" height="15.0" fill="rgb(214,73,38)" rx="2" ry="2" />
<text  x="837.12" y="415.5" ></text>
</g>
<g >
<title>table::set_hit_rate (1 samples, 0.02%)</title><rect x="725.6" y="501" width="0.3" height="15.0" fill="rgb(212,79,38)" rx="2" ry="2" />
<text  x="728.63" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="51.3" y="309" width="0.2" height="15.0" fill="rgb(230,33,13)" rx="2" ry="2" />
<text  x="54.31" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.13%)</title><rect x="840.9" y="357" width="1.6" height="15.0" fill="rgb(216,208,38)" rx="2" ry="2" />
<text  x="843.93" y="367.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="113.5" y="357" width="0.2" height="15.0" fill="rgb(228,214,4)" rx="2" ry="2" />
<text  x="116.50" y="367.5" ></text>
</g>
<g >
<title>seastar::preempt_io_context::reset_preemption_monitor (1 samples, 0.02%)</title><rect x="1130.8" y="533" width="0.2" height="15.0" fill="rgb(212,0,0)" rx="2" ry="2" />
<text  x="1133.76" y="543.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (3 samples, 0.06%)</title><rect x="1019.1" y="181" width="0.7" height="15.0" fill="rgb(215,81,12)" rx="2" ry="2" />
<text  x="1022.09" y="191.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (40 samples, 0.77%)</title><rect x="1111.5" y="501" width="9.0" height="15.0" fill="rgb(205,55,42)" rx="2" ry="2" />
<text  x="1114.47" y="511.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="824.1" y="341" width="1.2" height="15.0" fill="rgb(253,220,48)" rx="2" ry="2" />
<text  x="827.13" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (4 samples, 0.08%)</title><rect x="670.0" y="485" width="0.9" height="15.0" fill="rgb(228,15,10)" rx="2" ry="2" />
<text  x="673.02" y="495.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="1076.5" y="293" width="0.2" height="15.0" fill="rgb(214,39,25)" rx="2" ry="2" />
<text  x="1079.52" y="303.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::insert_cdc_generation (1 samples, 0.02%)</title><rect x="20.2" y="469" width="0.2" height="15.0" fill="rgb(243,147,26)" rx="2" ry="2" />
<text  x="23.21" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (2 samples, 0.04%)</title><rect x="588.1" y="325" width="0.4" height="15.0" fill="rgb(215,216,13)" rx="2" ry="2" />
<text  x="591.08" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (2 samples, 0.04%)</title><rect x="843.9" y="421" width="0.4" height="15.0" fill="rgb(251,181,7)" rx="2" ry="2" />
<text  x="846.88" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (2 samples, 0.04%)</title><rect x="262.8" y="197" width="0.5" height="15.0" fill="rgb(222,119,4)" rx="2" ry="2" />
<text  x="265.84" y="207.5" ></text>
</g>
<g >
<title>compound_type&lt; (4 samples, 0.08%)</title><rect x="498.9" y="261" width="0.9" height="15.0" fill="rgb(235,148,52)" rx="2" ry="2" />
<text  x="501.89" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%)</title><rect x="58.3" y="165" width="0.5" height="15.0" fill="rgb(217,103,41)" rx="2" ry="2" />
<text  x="61.34" y="175.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (9 samples, 0.17%)</title><rect x="1163.9" y="549" width="2.0" height="15.0" fill="rgb(211,49,0)" rx="2" ry="2" />
<text  x="1166.90" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="835.0" y="357" width="0.3" height="15.0" fill="rgb(248,39,40)" rx="2" ry="2" />
<text  x="838.02" y="367.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (12 samples, 0.23%)</title><rect x="244.7" y="101" width="2.7" height="15.0" fill="rgb(243,174,9)" rx="2" ry="2" />
<text  x="247.68" y="111.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%)</title><rect x="993.9" y="325" width="0.2" height="15.0" fill="rgb(243,37,7)" rx="2" ry="2" />
<text  x="996.90" y="335.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (254 samples, 4.89%)</title><rect x="481.4" y="373" width="57.7" height="15.0" fill="rgb(209,149,41)" rx="2" ry="2" />
<text  x="484.41" y="383.5" >memtab..</text>
</g>
<g >
<title>locator::everywhere_replication_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="20.4" y="437" width="0.3" height="15.0" fill="rgb(224,46,27)" rx="2" ry="2" />
<text  x="23.44" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (591 samples, 11.37%)</title><rect x="951.9" y="437" width="134.1" height="15.0" fill="rgb(216,180,52)" rx="2" ry="2" />
<text  x="954.91" y="447.5" >service::storage..</text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::with_scheduling_group&lt;single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="1130.1" y="533" width="0.2" height="15.0" fill="rgb(231,114,53)" rx="2" ry="2" />
<text  x="1133.08" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (2 samples, 0.04%)</title><rect x="1146.4" y="437" width="0.5" height="15.0" fill="rgb(219,64,24)" rx="2" ry="2" />
<text  x="1149.42" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%)</title><rect x="26.8" y="229" width="0.2" height="15.0" fill="rgb(227,177,10)" rx="2" ry="2" />
<text  x="29.80" y="239.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="1094.0" y="389" width="1.4" height="15.0" fill="rgb(207,142,46)" rx="2" ry="2" />
<text  x="1096.99" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="1050.4" y="325" width="0.5" height="15.0" fill="rgb(236,85,8)" rx="2" ry="2" />
<text  x="1053.42" y="335.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%)</title><rect x="1130.3" y="229" width="0.2" height="15.0" fill="rgb(254,75,3)" rx="2" ry="2" />
<text  x="1133.31" y="239.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.62%)</title><rect x="1120.5" y="501" width="7.3" height="15.0" fill="rgb(247,58,29)" rx="2" ry="2" />
<text  x="1123.55" y="511.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (460 samples, 8.85%)</title><rect x="453.5" y="437" width="104.4" height="15.0" fill="rgb(239,59,1)" rx="2" ry="2" />
<text  x="456.49" y="447.5" >mutation_sou..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="198.4" y="245" width="0.2" height="15.0" fill="rgb(225,164,42)" rx="2" ry="2" />
<text  x="201.38" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (2 samples, 0.04%)</title><rect x="690.2" y="485" width="0.5" height="15.0" fill="rgb(237,183,50)" rx="2" ry="2" />
<text  x="693.22" y="495.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (11 samples, 0.21%)</title><rect x="341.8" y="277" width="2.5" height="15.0" fill="rgb(244,136,31)" rx="2" ry="2" />
<text  x="344.83" y="287.5" ></text>
</g>
<g >
<title>auth::resource::resource (9 samples, 0.17%)</title><rect x="783.5" y="421" width="2.0" height="15.0" fill="rgb(211,12,18)" rx="2" ry="2" />
<text  x="786.50" y="431.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1022.7" y="213" width="0.3" height="15.0" fill="rgb(243,55,15)" rx="2" ry="2" />
<text  x="1025.73" y="223.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (1 samples, 0.02%)</title><rect x="700.7" y="533" width="0.2" height="15.0" fill="rgb(238,18,20)" rx="2" ry="2" />
<text  x="703.66" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="57.9" y="181" width="0.2" height="15.0" fill="rgb(240,44,42)" rx="2" ry="2" />
<text  x="60.89" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="335.0" y="325" width="0.5" height="15.0" fill="rgb(210,203,33)" rx="2" ry="2" />
<text  x="338.02" y="335.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%)</title><rect x="1030.0" y="293" width="0.2" height="15.0" fill="rgb(228,66,47)" rx="2" ry="2" />
<text  x="1032.99" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1108.3" y="453" width="0.2" height="15.0" fill="rgb(235,142,12)" rx="2" ry="2" />
<text  x="1111.29" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (2 samples, 0.04%)</title><rect x="77.4" y="341" width="0.5" height="15.0" fill="rgb(222,167,18)" rx="2" ry="2" />
<text  x="80.41" y="351.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%)</title><rect x="811.9" y="165" width="0.2" height="15.0" fill="rgb(250,188,41)" rx="2" ry="2" />
<text  x="814.87" y="175.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (1 samples, 0.02%)</title><rect x="403.3" y="245" width="0.3" height="15.0" fill="rgb(233,229,20)" rx="2" ry="2" />
<text  x="406.33" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%)</title><rect x="56.3" y="133" width="0.2" height="15.0" fill="rgb(217,26,33)" rx="2" ry="2" />
<text  x="59.30" y="143.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%)</title><rect x="199.1" y="293" width="0.4" height="15.0" fill="rgb(221,76,52)" rx="2" ry="2" />
<text  x="202.06" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr (1 samples, 0.02%)</title><rect x="52.4" y="245" width="0.3" height="15.0" fill="rgb(234,163,39)" rx="2" ry="2" />
<text  x="55.44" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1162.5" y="453" width="0.3" height="15.0" fill="rgb(244,61,13)" rx="2" ry="2" />
<text  x="1165.54" y="463.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (6 samples, 0.12%)</title><rect x="70.6" y="389" width="1.4" height="15.0" fill="rgb(208,217,22)" rx="2" ry="2" />
<text  x="73.60" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="957.8" y="389" width="1.1" height="15.0" fill="rgb(205,143,20)" rx="2" ry="2" />
<text  x="960.81" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="802.8" y="261" width="0.2" height="15.0" fill="rgb(208,229,31)" rx="2" ry="2" />
<text  x="805.79" y="271.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::skip&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="660.0" y="389" width="0.3" height="15.0" fill="rgb(232,203,41)" rx="2" ry="2" />
<text  x="663.03" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="53.8" y="213" width="0.2" height="15.0" fill="rgb(239,23,42)" rx="2" ry="2" />
<text  x="56.80" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="74.0" y="341" width="0.5" height="15.0" fill="rgb(227,107,30)" rx="2" ry="2" />
<text  x="77.00" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="799.6" y="325" width="0.2" height="15.0" fill="rgb(218,127,24)" rx="2" ry="2" />
<text  x="802.62" y="335.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="781.7" y="405" width="1.1" height="15.0" fill="rgb(244,3,28)" rx="2" ry="2" />
<text  x="784.69" y="415.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (2 samples, 0.04%)</title><rect x="1078.6" y="357" width="0.4" height="15.0" fill="rgb(231,149,43)" rx="2" ry="2" />
<text  x="1081.56" y="367.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (13 samples, 0.25%)</title><rect x="898.8" y="341" width="3.0" height="15.0" fill="rgb(248,166,7)" rx="2" ry="2" />
<text  x="901.80" y="351.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (29 samples, 0.56%)</title><rect x="1111.9" y="341" width="6.6" height="15.0" fill="rgb(207,105,4)" rx="2" ry="2" />
<text  x="1114.92" y="351.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%)</title><rect x="112.8" y="373" width="0.2" height="15.0" fill="rgb(247,87,25)" rx="2" ry="2" />
<text  x="115.82" y="383.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="58.1" y="69" width="0.2" height="15.0" fill="rgb(214,92,7)" rx="2" ry="2" />
<text  x="61.12" y="79.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (1 samples, 0.02%)</title><rect x="465.5" y="341" width="0.2" height="15.0" fill="rgb(232,156,6)" rx="2" ry="2" />
<text  x="468.52" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="47.9" y="277" width="0.5" height="15.0" fill="rgb(237,13,39)" rx="2" ry="2" />
<text  x="50.90" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="45.4" y="165" width="0.2" height="15.0" fill="rgb(244,37,4)" rx="2" ry="2" />
<text  x="48.41" y="175.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (138 samples, 2.65%)</title><rect x="571.3" y="437" width="31.3" height="15.0" fill="rgb(223,78,28)" rx="2" ry="2" />
<text  x="574.29" y="447.5" >fl..</text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="685.9" y="501" width="0.7" height="15.0" fill="rgb(224,228,51)" rx="2" ry="2" />
<text  x="688.91" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="596.0" y="373" width="0.3" height="15.0" fill="rgb(250,125,11)" rx="2" ry="2" />
<text  x="599.03" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (4 samples, 0.08%)</title><rect x="594.0" y="389" width="0.9" height="15.0" fill="rgb(238,44,42)" rx="2" ry="2" />
<text  x="596.99" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="973.9" y="389" width="0.3" height="15.0" fill="rgb(244,14,43)" rx="2" ry="2" />
<text  x="976.93" y="399.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (10 samples, 0.19%)</title><rect x="70.4" y="421" width="2.2" height="15.0" fill="rgb(221,181,53)" rx="2" ry="2" />
<text  x="73.37" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="48.1" y="213" width="0.3" height="15.0" fill="rgb(211,24,34)" rx="2" ry="2" />
<text  x="51.13" y="223.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%)</title><rect x="777.6" y="357" width="0.7" height="15.0" fill="rgb(236,116,25)" rx="2" ry="2" />
<text  x="780.60" y="367.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (62 samples, 1.19%)</title><rect x="494.3" y="341" width="14.1" height="15.0" fill="rgb(209,162,6)" rx="2" ry="2" />
<text  x="497.35" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (2 samples, 0.04%)</title><rect x="202.5" y="293" width="0.4" height="15.0" fill="rgb(235,202,54)" rx="2" ry="2" />
<text  x="205.47" y="303.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (2 samples, 0.04%)</title><rect x="816.0" y="149" width="0.4" height="15.0" fill="rgb(225,95,38)" rx="2" ry="2" />
<text  x="818.96" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%)</title><rect x="1113.3" y="261" width="0.2" height="15.0" fill="rgb(229,196,31)" rx="2" ry="2" />
<text  x="1116.29" y="271.5" ></text>
</g>
<g >
<title>validation::is_cql_key_invalid (1 samples, 0.02%)</title><rect x="874.7" y="405" width="0.3" height="15.0" fill="rgb(216,161,19)" rx="2" ry="2" />
<text  x="877.74" y="415.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="129.2" y="469" width="0.2" height="15.0" fill="rgb(206,84,12)" rx="2" ry="2" />
<text  x="132.16" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (1 samples, 0.02%)</title><rect x="476.2" y="309" width="0.2" height="15.0" fill="rgb(220,88,15)" rx="2" ry="2" />
<text  x="479.19" y="319.5" ></text>
</g>
<g >
<title>utils::chunked_vector&lt;ser::deletable_row_view, 131072ul&gt;::make_room (1 samples, 0.02%)</title><rect x="1117.6" y="229" width="0.2" height="15.0" fill="rgb(226,143,22)" rx="2" ry="2" />
<text  x="1120.60" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="64.2" y="277" width="0.3" height="15.0" fill="rgb(212,229,8)" rx="2" ry="2" />
<text  x="67.25" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%)</title><rect x="39.7" y="293" width="0.7" height="15.0" fill="rgb(206,195,2)" rx="2" ry="2" />
<text  x="42.73" y="303.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="1142.8" y="469" width="0.7" height="15.0" fill="rgb(243,226,22)" rx="2" ry="2" />
<text  x="1145.79" y="479.5" ></text>
</g>
<g >
<title>compound_type&lt; (16 samples, 0.31%)</title><rect x="926.0" y="389" width="3.7" height="15.0" fill="rgb(251,58,2)" rx="2" ry="2" />
<text  x="929.04" y="399.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="109.0" y="517" width="0.4" height="15.0" fill="rgb(254,227,2)" rx="2" ry="2" />
<text  x="111.96" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="950.3" y="421" width="1.2" height="15.0" fill="rgb(253,33,0)" rx="2" ry="2" />
<text  x="953.32" y="431.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (1 samples, 0.02%)</title><rect x="1037.7" y="325" width="0.2" height="15.0" fill="rgb(226,107,12)" rx="2" ry="2" />
<text  x="1040.71" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (1 samples, 0.02%)</title><rect x="650.0" y="517" width="0.3" height="15.0" fill="rgb(236,136,5)" rx="2" ry="2" />
<text  x="653.05" y="527.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%)</title><rect x="830.5" y="309" width="0.4" height="15.0" fill="rgb(210,142,15)" rx="2" ry="2" />
<text  x="833.48" y="319.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (125 samples, 2.40%)</title><rect x="795.5" y="357" width="28.4" height="15.0" fill="rgb(219,41,44)" rx="2" ry="2" />
<text  x="798.53" y="367.5" >st..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (4 samples, 0.08%)</title><rect x="978.2" y="373" width="0.9" height="15.0" fill="rgb(205,130,52)" rx="2" ry="2" />
<text  x="981.24" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (3 samples, 0.06%)</title><rect x="1082.2" y="389" width="0.7" height="15.0" fill="rgb(224,208,6)" rx="2" ry="2" />
<text  x="1085.19" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (4 samples, 0.08%)</title><rect x="983.7" y="293" width="0.9" height="15.0" fill="rgb(218,149,33)" rx="2" ry="2" />
<text  x="986.69" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (2 samples, 0.04%)</title><rect x="698.4" y="485" width="0.4" height="15.0" fill="rgb(224,229,43)" rx="2" ry="2" />
<text  x="701.39" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="57.9" y="245" width="0.2" height="15.0" fill="rgb(233,84,53)" rx="2" ry="2" />
<text  x="60.89" y="255.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="637.6" y="421" width="0.4" height="15.0" fill="rgb(228,173,48)" rx="2" ry="2" />
<text  x="640.56" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (1 samples, 0.02%)</title><rect x="728.1" y="533" width="0.2" height="15.0" fill="rgb(228,74,25)" rx="2" ry="2" />
<text  x="731.12" y="543.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (2 samples, 0.04%)</title><rect x="755.6" y="405" width="0.4" height="15.0" fill="rgb(238,229,44)" rx="2" ry="2" />
<text  x="758.59" y="415.5" ></text>
</g>
<g >
<title>abstract_type::from_string (6 samples, 0.12%)</title><rect x="70.6" y="405" width="1.4" height="15.0" fill="rgb(206,108,53)" rx="2" ry="2" />
<text  x="73.60" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="67.2" y="405" width="0.2" height="15.0" fill="rgb(230,96,9)" rx="2" ry="2" />
<text  x="70.20" y="415.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="20.0" y="533" width="0.2" height="15.0" fill="rgb(246,170,18)" rx="2" ry="2" />
<text  x="22.99" y="543.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_groups::add_group (1 samples, 0.02%)</title><rect x="114.2" y="405" width="0.2" height="15.0" fill="rgb(207,116,13)" rx="2" ry="2" />
<text  x="117.18" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_with_triggers (4 samples, 0.08%)</title><rect x="871.6" y="421" width="0.9" height="15.0" fill="rgb(214,189,18)" rx="2" ry="2" />
<text  x="874.57" y="431.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="47.9" y="325" width="0.5" height="15.0" fill="rgb(215,156,13)" rx="2" ry="2" />
<text  x="50.90" y="335.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (2 samples, 0.04%)</title><rect x="763.5" y="309" width="0.5" height="15.0" fill="rgb(222,217,22)" rx="2" ry="2" />
<text  x="766.53" y="319.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::raw::update_statement*, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="64.5" y="293" width="0.2" height="15.0" fill="rgb(252,48,16)" rx="2" ry="2" />
<text  x="67.47" y="303.5" ></text>
</g>
<g >
<title>sstables::sstable::~sstable (1 samples, 0.02%)</title><rect x="702.0" y="501" width="0.2" height="15.0" fill="rgb(221,123,16)" rx="2" ry="2" />
<text  x="705.02" y="511.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (2 samples, 0.04%)</title><rect x="188.6" y="309" width="0.5" height="15.0" fill="rgb(208,170,28)" rx="2" ry="2" />
<text  x="191.62" y="319.5" ></text>
</g>
<g >
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="1130.8" y="501" width="0.2" height="15.0" fill="rgb(232,76,39)" rx="2" ry="2" />
<text  x="1133.76" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%)</title><rect x="958.0" y="373" width="0.9" height="15.0" fill="rgb(226,85,29)" rx="2" ry="2" />
<text  x="961.04" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (2 samples, 0.04%)</title><rect x="1077.7" y="341" width="0.4" height="15.0" fill="rgb(229,200,36)" rx="2" ry="2" />
<text  x="1080.65" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.15%)</title><rect x="921.0" y="357" width="1.9" height="15.0" fill="rgb(217,113,20)" rx="2" ry="2" />
<text  x="924.04" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::is_counter (1 samples, 0.02%)</title><rect x="878.1" y="437" width="0.3" height="15.0" fill="rgb(232,26,13)" rx="2" ry="2" />
<text  x="881.15" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="785.3" y="389" width="0.2" height="15.0" fill="rgb(232,36,52)" rx="2" ry="2" />
<text  x="788.32" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="817.8" y="261" width="0.2" height="15.0" fill="rgb(238,133,2)" rx="2" ry="2" />
<text  x="820.77" y="271.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (5 samples, 0.10%)</title><rect x="682.3" y="501" width="1.1" height="15.0" fill="rgb(207,169,6)" rx="2" ry="2" />
<text  x="685.28" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;global_schema_ptr, std::allocator&lt;global_schema_ptr&gt; &gt;::_M_realloc_insert&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;&gt; (2 samples, 0.04%)</title><rect x="111.5" y="469" width="0.4" height="15.0" fill="rgb(252,161,54)" rx="2" ry="2" />
<text  x="114.45" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (2 samples, 0.04%)</title><rect x="619.4" y="469" width="0.5" height="15.0" fill="rgb(233,182,42)" rx="2" ry="2" />
<text  x="622.41" y="479.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (4 samples, 0.08%)</title><rect x="17.5" y="645" width="0.9" height="15.0" fill="rgb(209,35,2)" rx="2" ry="2" />
<text  x="20.49" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (2 samples, 0.04%)</title><rect x="576.5" y="357" width="0.5" height="15.0" fill="rgb(238,55,4)" rx="2" ry="2" />
<text  x="579.51" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (48 samples, 0.92%)</title><rect x="679.8" y="533" width="10.9" height="15.0" fill="rgb(206,37,23)" rx="2" ry="2" />
<text  x="682.78" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="68.3" y="421" width="0.3" height="15.0" fill="rgb(206,89,27)" rx="2" ry="2" />
<text  x="71.33" y="431.5" ></text>
</g>
<g >
<title>cql3::functions::function_name::function_name (1 samples, 0.02%)</title><rect x="51.5" y="341" width="0.3" height="15.0" fill="rgb(239,23,21)" rx="2" ry="2" />
<text  x="54.53" y="351.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_all_endpoints (1 samples, 0.02%)</title><rect x="20.4" y="421" width="0.3" height="15.0" fill="rgb(253,56,2)" rx="2" ry="2" />
<text  x="23.44" y="431.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::wait_for_one (1 samples, 0.02%)</title><rect x="1130.5" y="517" width="0.3" height="15.0" fill="rgb(249,179,18)" rx="2" ry="2" />
<text  x="1133.53" y="527.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (55 samples, 1.06%)</title><rect x="805.3" y="261" width="12.5" height="15.0" fill="rgb(253,7,38)" rx="2" ry="2" />
<text  x="808.29" y="271.5" ></text>
</g>
<g >
<title>db::filter_for_query (1 samples, 0.02%)</title><rect x="1047.5" y="373" width="0.2" height="15.0" fill="rgb(248,104,5)" rx="2" ry="2" />
<text  x="1050.46" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (1 samples, 0.02%)</title><rect x="272.1" y="213" width="0.3" height="15.0" fill="rgb(215,128,41)" rx="2" ry="2" />
<text  x="275.15" y="223.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (2 samples, 0.04%)</title><rect x="20.2" y="565" width="0.5" height="15.0" fill="rgb(231,31,2)" rx="2" ry="2" />
<text  x="23.21" y="575.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="900.4" y="309" width="1.1" height="15.0" fill="rgb(238,22,4)" rx="2" ry="2" />
<text  x="903.39" y="319.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (3 samples, 0.06%)</title><rect x="985.5" y="309" width="0.7" height="15.0" fill="rgb(231,43,52)" rx="2" ry="2" />
<text  x="988.50" y="319.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (6 samples, 0.12%)</title><rect x="21.1" y="533" width="1.4" height="15.0" fill="rgb(216,51,21)" rx="2" ry="2" />
<text  x="24.12" y="543.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="287.1" y="213" width="0.5" height="15.0" fill="rgb(245,169,31)" rx="2" ry="2" />
<text  x="290.13" y="223.5" ></text>
</g>
<g >
<title>db::schema_tables::add_table_params_to_mutations (1 samples, 0.02%)</title><rect x="113.0" y="453" width="0.3" height="15.0" fill="rgb(236,51,12)" rx="2" ry="2" />
<text  x="116.04" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="61.1" y="341" width="0.2" height="15.0" fill="rgb(216,148,23)" rx="2" ry="2" />
<text  x="64.07" y="351.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="856.6" y="437" width="0.2" height="15.0" fill="rgb(206,174,11)" rx="2" ry="2" />
<text  x="859.59" y="447.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (2 samples, 0.04%)</title><rect x="327.5" y="437" width="0.5" height="15.0" fill="rgb(205,147,1)" rx="2" ry="2" />
<text  x="330.53" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="11.1" y="277" width="0.3" height="15.0" fill="rgb(232,69,46)" rx="2" ry="2" />
<text  x="14.13" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (3 samples, 0.06%)</title><rect x="526.6" y="277" width="0.7" height="15.0" fill="rgb(253,165,47)" rx="2" ry="2" />
<text  x="529.58" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="10.7" y="565" width="0.2" height="15.0" fill="rgb(215,121,48)" rx="2" ry="2" />
<text  x="13.68" y="575.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (43 samples, 0.83%)</title><rect x="190.9" y="309" width="9.8" height="15.0" fill="rgb(239,86,7)" rx="2" ry="2" />
<text  x="193.89" y="319.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (18 samples, 0.35%)</title><rect x="813.7" y="197" width="4.1" height="15.0" fill="rgb(224,120,8)" rx="2" ry="2" />
<text  x="816.69" y="207.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%)</title><rect x="660.0" y="373" width="0.3" height="15.0" fill="rgb(212,162,12)" rx="2" ry="2" />
<text  x="663.03" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%)</title><rect x="698.8" y="485" width="0.3" height="15.0" fill="rgb(223,125,9)" rx="2" ry="2" />
<text  x="701.84" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (7 samples, 0.13%)</title><rect x="671.8" y="517" width="1.6" height="15.0" fill="rgb(220,67,24)" rx="2" ry="2" />
<text  x="674.83" y="527.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%)</title><rect x="20.0" y="293" width="0.2" height="15.0" fill="rgb(226,194,49)" rx="2" ry="2" />
<text  x="22.99" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree_rebalance_for_erase (1 samples, 0.02%)</title><rect x="727.7" y="405" width="0.2" height="15.0" fill="rgb(250,61,0)" rx="2" ry="2" />
<text  x="730.67" y="415.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%)</title><rect x="702.2" y="325" width="0.3" height="15.0" fill="rgb(211,194,22)" rx="2" ry="2" />
<text  x="705.25" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="1024.1" y="261" width="0.4" height="15.0" fill="rgb(216,84,0)" rx="2" ry="2" />
<text  x="1027.09" y="271.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (2 samples, 0.04%)</title><rect x="402.7" y="229" width="0.4" height="15.0" fill="rgb(243,109,52)" rx="2" ry="2" />
<text  x="405.65" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="1101.9" y="405" width="0.5" height="15.0" fill="rgb(238,17,44)" rx="2" ry="2" />
<text  x="1104.94" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%)</title><rect x="900.8" y="293" width="0.7" height="15.0" fill="rgb(209,189,24)" rx="2" ry="2" />
<text  x="903.84" y="303.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="657.3" y="517" width="0.7" height="15.0" fill="rgb(206,112,24)" rx="2" ry="2" />
<text  x="660.31" y="527.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (2 samples, 0.04%)</title><rect x="1114.2" y="277" width="0.4" height="15.0" fill="rgb(215,201,37)" rx="2" ry="2" />
<text  x="1117.19" y="287.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (1 samples, 0.02%)</title><rect x="465.7" y="341" width="0.3" height="15.0" fill="rgb(208,182,0)" rx="2" ry="2" />
<text  x="468.75" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::operator= (1 samples, 0.02%)</title><rect x="47.2" y="357" width="0.2" height="15.0" fill="rgb(254,151,41)" rx="2" ry="2" />
<text  x="50.22" y="367.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%)</title><rect x="816.9" y="117" width="0.4" height="15.0" fill="rgb(211,79,6)" rx="2" ry="2" />
<text  x="819.87" y="127.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="634.2" y="469" width="0.2" height="15.0" fill="rgb(233,96,10)" rx="2" ry="2" />
<text  x="637.16" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (3 samples, 0.06%)</title><rect x="55.4" y="277" width="0.7" height="15.0" fill="rgb(218,168,42)" rx="2" ry="2" />
<text  x="58.39" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="52.4" y="293" width="0.3" height="15.0" fill="rgb(244,130,8)" rx="2" ry="2" />
<text  x="55.44" y="303.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%)</title><rect x="112.8" y="245" width="0.2" height="15.0" fill="rgb(238,100,12)" rx="2" ry="2" />
<text  x="115.82" y="255.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (12 samples, 0.23%)</title><rect x="85.6" y="597" width="2.7" height="15.0" fill="rgb(243,76,44)" rx="2" ry="2" />
<text  x="88.58" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (10 samples, 0.19%)</title><rect x="291.4" y="277" width="2.3" height="15.0" fill="rgb(240,95,46)" rx="2" ry="2" />
<text  x="294.44" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (3 samples, 0.06%)</title><rect x="1156.9" y="501" width="0.6" height="15.0" fill="rgb(230,109,25)" rx="2" ry="2" />
<text  x="1159.86" y="511.5" ></text>
</g>
<g >
<title>query_state::query_state (29 samples, 0.56%)</title><rect x="612.4" y="469" width="6.6" height="15.0" fill="rgb(209,94,14)" rx="2" ry="2" />
<text  x="615.37" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="224.3" y="181" width="0.2" height="15.0" fill="rgb(238,106,5)" rx="2" ry="2" />
<text  x="227.26" y="191.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (4 samples, 0.08%)</title><rect x="839.6" y="325" width="0.9" height="15.0" fill="rgb(219,119,0)" rx="2" ry="2" />
<text  x="842.56" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="1163.4" y="437" width="0.3" height="15.0" fill="rgb(225,108,35)" rx="2" ry="2" />
<text  x="1166.44" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%)</title><rect x="58.3" y="261" width="0.5" height="15.0" fill="rgb(247,114,15)" rx="2" ry="2" />
<text  x="61.34" y="271.5" ></text>
</g>
<g >
<title>data_value::data_value (1 samples, 0.02%)</title><rect x="75.4" y="341" width="0.2" height="15.0" fill="rgb(208,99,17)" rx="2" ry="2" />
<text  x="78.37" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="49.9" y="325" width="0.7" height="15.0" fill="rgb(239,169,38)" rx="2" ry="2" />
<text  x="52.95" y="335.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="11.1" y="261" width="0.3" height="15.0" fill="rgb(214,101,47)" rx="2" ry="2" />
<text  x="14.13" y="271.5" ></text>
</g>
<g >
<title>std::apply&lt;row_cache::do_update (1 samples, 0.02%)</title><rect x="1130.3" y="453" width="0.2" height="15.0" fill="rgb(234,163,8)" rx="2" ry="2" />
<text  x="1133.31" y="463.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="950.3" y="437" width="1.2" height="15.0" fill="rgb(244,125,10)" rx="2" ry="2" />
<text  x="953.32" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (10 samples, 0.19%)</title><rect x="283.3" y="245" width="2.2" height="15.0" fill="rgb(254,67,45)" rx="2" ry="2" />
<text  x="286.27" y="255.5" ></text>
</g>
<g >
<title>schema::get_sharder (3 samples, 0.06%)</title><rect x="1001.8" y="309" width="0.7" height="15.0" fill="rgb(230,6,13)" rx="2" ry="2" />
<text  x="1004.84" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="11.1" y="469" width="0.3" height="15.0" fill="rgb(208,78,28)" rx="2" ry="2" />
<text  x="14.13" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="595.3" y="373" width="0.3" height="15.0" fill="rgb(234,36,21)" rx="2" ry="2" />
<text  x="598.35" y="383.5" ></text>
</g>
<g >
<title>std::remove_if&lt;char*, boost::algorithm::detail::is_any_ofF&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="703.2" y="229" width="0.2" height="15.0" fill="rgb(225,50,32)" rx="2" ry="2" />
<text  x="706.16" y="239.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (1 samples, 0.02%)</title><rect x="61.5" y="341" width="0.2" height="15.0" fill="rgb(236,47,10)" rx="2" ry="2" />
<text  x="64.52" y="351.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_group (1 samples, 0.02%)</title><rect x="114.2" y="389" width="0.2" height="15.0" fill="rgb(247,139,41)" rx="2" ry="2" />
<text  x="117.18" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (2 samples, 0.04%)</title><rect x="1124.0" y="149" width="0.4" height="15.0" fill="rgb(238,137,35)" rx="2" ry="2" />
<text  x="1126.95" y="159.5" ></text>
</g>
<g >
<title>seastar::reactor::smp_pollfn::poll (1 samples, 0.02%)</title><rect x="1164.8" y="533" width="0.2" height="15.0" fill="rgb(211,20,37)" rx="2" ry="2" />
<text  x="1167.81" y="543.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (4 samples, 0.08%)</title><rect x="1091.7" y="421" width="0.9" height="15.0" fill="rgb(234,198,37)" rx="2" ry="2" />
<text  x="1094.72" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="607.4" y="437" width="0.2" height="15.0" fill="rgb(226,171,4)" rx="2" ry="2" />
<text  x="610.38" y="447.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (6 samples, 0.12%)</title><rect x="900.4" y="325" width="1.4" height="15.0" fill="rgb(215,200,19)" rx="2" ry="2" />
<text  x="903.39" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="698.4" y="469" width="0.4" height="15.0" fill="rgb(233,216,15)" rx="2" ry="2" />
<text  x="701.39" y="479.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="47.9" y="149" width="0.2" height="15.0" fill="rgb(229,45,47)" rx="2" ry="2" />
<text  x="50.90" y="159.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (21 samples, 0.40%)</title><rect x="54.3" y="341" width="4.7" height="15.0" fill="rgb(220,46,14)" rx="2" ry="2" />
<text  x="57.26" y="351.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (1 samples, 0.02%)</title><rect x="134.8" y="437" width="0.3" height="15.0" fill="rgb(230,200,7)" rx="2" ry="2" />
<text  x="137.83" y="447.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (8 samples, 0.15%)</title><rect x="1118.5" y="341" width="1.8" height="15.0" fill="rgb(233,77,31)" rx="2" ry="2" />
<text  x="1121.51" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (4 samples, 0.08%)</title><rect x="299.2" y="309" width="0.9" height="15.0" fill="rgb(214,96,13)" rx="2" ry="2" />
<text  x="302.16" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="82.9" y="485" width="0.2" height="15.0" fill="rgb(231,93,29)" rx="2" ry="2" />
<text  x="85.86" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="27.2" y="261" width="0.3" height="15.0" fill="rgb(245,83,50)" rx="2" ry="2" />
<text  x="30.25" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="49.0" y="261" width="0.3" height="15.0" fill="rgb(231,164,6)" rx="2" ry="2" />
<text  x="52.04" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="1033.2" y="277" width="0.2" height="15.0" fill="rgb(213,163,13)" rx="2" ry="2" />
<text  x="1036.17" y="287.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (1 samples, 0.02%)</title><rect x="142.3" y="453" width="0.2" height="15.0" fill="rgb(214,199,12)" rx="2" ry="2" />
<text  x="145.32" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;void&gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type&gt; (1 samples, 0.02%)</title><rect x="1026.4" y="277" width="0.2" height="15.0" fill="rgb(236,189,8)" rx="2" ry="2" />
<text  x="1029.36" y="287.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (44 samples, 0.85%)</title><rect x="132.6" y="469" width="9.9" height="15.0" fill="rgb(243,117,22)" rx="2" ry="2" />
<text  x="135.56" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::destroy&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="50.6" y="309" width="0.3" height="15.0" fill="rgb(236,218,20)" rx="2" ry="2" />
<text  x="53.63" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="40.9" y="277" width="0.4" height="15.0" fill="rgb(254,160,28)" rx="2" ry="2" />
<text  x="43.87" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;::_Vector_base (1 samples, 0.02%)</title><rect x="64.9" y="373" width="0.3" height="15.0" fill="rgb(223,130,23)" rx="2" ry="2" />
<text  x="67.93" y="383.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (3 samples, 0.06%)</title><rect x="426.7" y="245" width="0.7" height="15.0" fill="rgb(208,36,32)" rx="2" ry="2" />
<text  x="429.71" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (2 samples, 0.04%)</title><rect x="139.6" y="405" width="0.5" height="15.0" fill="rgb(218,212,8)" rx="2" ry="2" />
<text  x="142.60" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%)</title><rect x="39.7" y="373" width="0.7" height="15.0" fill="rgb(220,32,22)" rx="2" ry="2" />
<text  x="42.73" y="383.5" ></text>
</g>
<g >
<title>schema_mutations::partitioner (1 samples, 0.02%)</title><rect x="111.7" y="357" width="0.2" height="15.0" fill="rgb(222,7,36)" rx="2" ry="2" />
<text  x="114.68" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair (1 samples, 0.02%)</title><rect x="53.8" y="181" width="0.2" height="15.0" fill="rgb(231,217,16)" rx="2" ry="2" />
<text  x="56.80" y="191.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="11.4" y="629" width="0.2" height="15.0" fill="rgb(211,53,53)" rx="2" ry="2" />
<text  x="14.36" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, bool const&amp;&gt; (2 samples, 0.04%)</title><rect x="77.4" y="389" width="0.5" height="15.0" fill="rgb(243,26,42)" rx="2" ry="2" />
<text  x="80.41" y="399.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::column_identifier_raw (2 samples, 0.04%)</title><rect x="46.8" y="309" width="0.4" height="15.0" fill="rgb(221,83,23)" rx="2" ry="2" />
<text  x="49.77" y="319.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (75 samples, 1.44%)</title><rect x="230.4" y="149" width="17.0" height="15.0" fill="rgb(253,134,52)" rx="2" ry="2" />
<text  x="233.38" y="159.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (3 samples, 0.06%)</title><rect x="841.4" y="325" width="0.7" height="15.0" fill="rgb(230,138,47)" rx="2" ry="2" />
<text  x="844.38" y="335.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="55.8" y="229" width="0.3" height="15.0" fill="rgb(206,50,11)" rx="2" ry="2" />
<text  x="58.85" y="239.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%)</title><rect x="111.7" y="309" width="0.2" height="15.0" fill="rgb(205,193,27)" rx="2" ry="2" />
<text  x="114.68" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.02%)</title><rect x="1144.6" y="485" width="0.2" height="15.0" fill="rgb(237,180,34)" rx="2" ry="2" />
<text  x="1147.61" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (1 samples, 0.02%)</title><rect x="1164.4" y="165" width="0.2" height="15.0" fill="rgb(207,181,52)" rx="2" ry="2" />
<text  x="1167.35" y="175.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%)</title><rect x="63.6" y="277" width="0.2" height="15.0" fill="rgb(207,178,40)" rx="2" ry="2" />
<text  x="66.56" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (1 samples, 0.02%)</title><rect x="875.2" y="405" width="0.2" height="15.0" fill="rgb(228,161,35)" rx="2" ry="2" />
<text  x="878.20" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="58.3" y="213" width="0.5" height="15.0" fill="rgb(236,217,54)" rx="2" ry="2" />
<text  x="61.34" y="223.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="700.7" y="421" width="0.2" height="15.0" fill="rgb(210,95,44)" rx="2" ry="2" />
<text  x="703.66" y="431.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (7 samples, 0.13%)</title><rect x="85.6" y="501" width="1.6" height="15.0" fill="rgb(243,55,44)" rx="2" ry="2" />
<text  x="88.58" y="511.5" ></text>
</g>
<g >
<title>row_cache::make_reader (65 samples, 1.25%)</title><rect x="540.0" y="373" width="14.7" height="15.0" fill="rgb(222,101,40)" rx="2" ry="2" />
<text  x="542.97" y="383.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::delay&lt;service::abstract_write_response_handler::signal (2 samples, 0.04%)</title><rect x="727.0" y="469" width="0.4" height="15.0" fill="rgb(222,225,25)" rx="2" ry="2" />
<text  x="729.99" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="47.9" y="261" width="0.5" height="15.0" fill="rgb(243,96,24)" rx="2" ry="2" />
<text  x="50.90" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="47.9" y="197" width="0.2" height="15.0" fill="rgb(234,80,15)" rx="2" ry="2" />
<text  x="50.90" y="207.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (3 samples, 0.06%)</title><rect x="924.7" y="421" width="0.7" height="15.0" fill="rgb(212,103,26)" rx="2" ry="2" />
<text  x="927.68" y="431.5" ></text>
</g>
<g >
<title>service::storage_service::join_token_ring (2 samples, 0.04%)</title><rect x="20.2" y="501" width="0.5" height="15.0" fill="rgb(248,204,39)" rx="2" ry="2" />
<text  x="23.21" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1155.3" y="517" width="0.2" height="15.0" fill="rgb(242,221,26)" rx="2" ry="2" />
<text  x="1158.27" y="527.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="648.9" y="517" width="0.5" height="15.0" fill="rgb(253,143,29)" rx="2" ry="2" />
<text  x="651.91" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (2 samples, 0.04%)</title><rect x="302.8" y="325" width="0.4" height="15.0" fill="rgb(208,60,47)" rx="2" ry="2" />
<text  x="305.79" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (8 samples, 0.15%)</title><rect x="76.0" y="421" width="1.9" height="15.0" fill="rgb(235,37,14)" rx="2" ry="2" />
<text  x="79.05" y="431.5" ></text>
</g>
<g >
<title>ser::read_frame_size&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1120.3" y="293" width="0.2" height="15.0" fill="rgb(245,113,18)" rx="2" ry="2" />
<text  x="1123.32" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="56.1" y="277" width="0.4" height="15.0" fill="rgb(240,173,31)" rx="2" ry="2" />
<text  x="59.07" y="287.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (1 samples, 0.02%)</title><rect x="216.3" y="229" width="0.2" height="15.0" fill="rgb(250,21,37)" rx="2" ry="2" />
<text  x="219.31" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_assign_base (1 samples, 0.02%)</title><rect x="62.7" y="245" width="0.2" height="15.0" fill="rgb(206,46,12)" rx="2" ry="2" />
<text  x="65.66" y="255.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (1 samples, 0.02%)</title><rect x="346.4" y="229" width="0.2" height="15.0" fill="rgb(235,12,39)" rx="2" ry="2" />
<text  x="349.36" y="239.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator* (1 samples, 0.02%)</title><rect x="47.7" y="213" width="0.2" height="15.0" fill="rgb(205,187,52)" rx="2" ry="2" />
<text  x="50.68" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (6 samples, 0.12%)</title><rect x="291.9" y="245" width="1.4" height="15.0" fill="rgb(243,109,19)" rx="2" ry="2" />
<text  x="294.89" y="255.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (2 samples, 0.04%)</title><rect x="111.5" y="421" width="0.4" height="15.0" fill="rgb(219,203,8)" rx="2" ry="2" />
<text  x="114.45" y="431.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="202.9" y="277" width="0.2" height="15.0" fill="rgb(251,219,36)" rx="2" ry="2" />
<text  x="205.92" y="287.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (1 samples, 0.02%)</title><rect x="534.1" y="325" width="0.2" height="15.0" fill="rgb(254,220,27)" rx="2" ry="2" />
<text  x="537.07" y="335.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%)</title><rect x="265.8" y="165" width="0.2" height="15.0" fill="rgb(205,116,28)" rx="2" ry="2" />
<text  x="268.79" y="175.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="45.4" y="229" width="0.2" height="15.0" fill="rgb(240,87,9)" rx="2" ry="2" />
<text  x="48.41" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::do_refresh_state (1 samples, 0.02%)</title><rect x="86.9" y="373" width="0.3" height="15.0" fill="rgb(226,111,19)" rx="2" ry="2" />
<text  x="89.94" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (2 samples, 0.04%)</title><rect x="905.2" y="389" width="0.4" height="15.0" fill="rgb(240,40,7)" rx="2" ry="2" />
<text  x="908.16" y="399.5" ></text>
</g>
<g >
<title>cdc::cdc_service::needs_cdc_augmentation (1 samples, 0.02%)</title><rect x="871.6" y="389" width="0.2" height="15.0" fill="rgb(237,149,47)" rx="2" ry="2" />
<text  x="874.57" y="399.5" ></text>
</g>
<g >
<title>query::result::result (5 samples, 0.10%)</title><rect x="611.0" y="453" width="1.1" height="15.0" fill="rgb(237,57,43)" rx="2" ry="2" />
<text  x="614.01" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (1 samples, 0.02%)</title><rect x="198.4" y="261" width="0.2" height="15.0" fill="rgb(235,31,20)" rx="2" ry="2" />
<text  x="201.38" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="881.8" y="501" width="0.2" height="15.0" fill="rgb(229,109,14)" rx="2" ry="2" />
<text  x="884.78" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="824.8" y="325" width="0.5" height="15.0" fill="rgb(229,175,9)" rx="2" ry="2" />
<text  x="827.81" y="335.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (2 samples, 0.04%)</title><rect x="596.3" y="389" width="0.4" height="15.0" fill="rgb(242,200,31)" rx="2" ry="2" />
<text  x="599.26" y="399.5" ></text>
</g>
<g >
<title>schema::rebuild (1 samples, 0.02%)</title><rect x="20.0" y="261" width="0.2" height="15.0" fill="rgb(252,103,2)" rx="2" ry="2" />
<text  x="22.99" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (309 samples, 5.94%)</title><rect x="773.3" y="453" width="70.1" height="15.0" fill="rgb(236,204,50)" rx="2" ry="2" />
<text  x="776.29" y="463.5" >cql3::s..</text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (42 samples, 0.81%)</title><rect x="294.6" y="341" width="9.5" height="15.0" fill="rgb(242,44,10)" rx="2" ry="2" />
<text  x="297.62" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="602.2" y="405" width="0.2" height="15.0" fill="rgb(205,110,23)" rx="2" ry="2" />
<text  x="605.16" y="415.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::touch (1 samples, 0.02%)</title><rect x="748.3" y="453" width="0.2" height="15.0" fill="rgb(208,89,20)" rx="2" ry="2" />
<text  x="751.32" y="463.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (1 samples, 0.02%)</title><rect x="1096.7" y="437" width="0.2" height="15.0" fill="rgb(223,76,9)" rx="2" ry="2" />
<text  x="1099.72" y="447.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.10%)</title><rect x="113.0" y="533" width="1.2" height="15.0" fill="rgb(216,192,0)" rx="2" ry="2" />
<text  x="116.04" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="606.2" y="437" width="0.3" height="15.0" fill="rgb(237,181,15)" rx="2" ry="2" />
<text  x="609.24" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="720.9" y="453" width="0.2" height="15.0" fill="rgb(228,199,4)" rx="2" ry="2" />
<text  x="723.86" y="463.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="849.8" y="469" width="0.2" height="15.0" fill="rgb(209,88,50)" rx="2" ry="2" />
<text  x="852.78" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%)</title><rect x="649.4" y="517" width="0.6" height="15.0" fill="rgb(253,155,22)" rx="2" ry="2" />
<text  x="652.37" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (7 samples, 0.13%)</title><rect x="847.1" y="437" width="1.5" height="15.0" fill="rgb(244,223,7)" rx="2" ry="2" />
<text  x="850.05" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (8 samples, 0.15%)</title><rect x="835.3" y="341" width="1.8" height="15.0" fill="rgb(243,5,42)" rx="2" ry="2" />
<text  x="838.25" y="351.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%)</title><rect x="1162.5" y="501" width="0.3" height="15.0" fill="rgb(241,162,40)" rx="2" ry="2" />
<text  x="1165.54" y="511.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%)</title><rect x="1122.1" y="181" width="0.3" height="15.0" fill="rgb(234,193,20)" rx="2" ry="2" />
<text  x="1125.14" y="191.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (20 samples, 0.38%)</title><rect x="981.6" y="325" width="4.6" height="15.0" fill="rgb(225,92,16)" rx="2" ry="2" />
<text  x="984.64" y="335.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="1129.9" y="517" width="0.2" height="15.0" fill="rgb(212,30,46)" rx="2" ry="2" />
<text  x="1132.85" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="56.5" y="309" width="0.3" height="15.0" fill="rgb(251,34,30)" rx="2" ry="2" />
<text  x="59.53" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::open_directory (1 samples, 0.02%)</title><rect x="701.8" y="485" width="0.2" height="15.0" fill="rgb(231,115,22)" rx="2" ry="2" />
<text  x="704.79" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (26 samples, 0.50%)</title><rect x="1121.5" y="357" width="5.9" height="15.0" fill="rgb(233,161,32)" rx="2" ry="2" />
<text  x="1124.46" y="367.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="49.9" y="197" width="0.5" height="15.0" fill="rgb(221,129,39)" rx="2" ry="2" />
<text  x="52.95" y="207.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::explode (1 samples, 0.02%)</title><rect x="1125.1" y="133" width="0.2" height="15.0" fill="rgb(217,186,47)" rx="2" ry="2" />
<text  x="1128.09" y="143.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="48.8" y="293" width="0.5" height="15.0" fill="rgb(213,65,31)" rx="2" ry="2" />
<text  x="51.81" y="303.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (1 samples, 0.02%)</title><rect x="591.5" y="405" width="0.2" height="15.0" fill="rgb(228,131,38)" rx="2" ry="2" />
<text  x="594.49" y="415.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="902.7" y="341" width="0.9" height="15.0" fill="rgb(246,114,21)" rx="2" ry="2" />
<text  x="905.66" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%)</title><rect x="959.2" y="405" width="0.2" height="15.0" fill="rgb(234,126,12)" rx="2" ry="2" />
<text  x="962.17" y="415.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (1 samples, 0.02%)</title><rect x="701.3" y="469" width="0.3" height="15.0" fill="rgb(224,187,49)" rx="2" ry="2" />
<text  x="704.34" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (2 samples, 0.04%)</title><rect x="873.8" y="389" width="0.5" height="15.0" fill="rgb(249,146,18)" rx="2" ry="2" />
<text  x="876.84" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (3 samples, 0.06%)</title><rect x="138.5" y="437" width="0.6" height="15.0" fill="rgb(211,31,26)" rx="2" ry="2" />
<text  x="141.46" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="110.3" y="517" width="0.2" height="15.0" fill="rgb(225,41,8)" rx="2" ry="2" />
<text  x="113.32" y="527.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (2 samples, 0.04%)</title><rect x="111.5" y="389" width="0.4" height="15.0" fill="rgb(213,109,15)" rx="2" ry="2" />
<text  x="114.45" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%)</title><rect x="62.2" y="213" width="0.2" height="15.0" fill="rgb(249,125,44)" rx="2" ry="2" />
<text  x="65.20" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;current_deleter&lt;range_tombstone_entry&gt; (2 samples, 0.04%)</title><rect x="586.0" y="293" width="0.5" height="15.0" fill="rgb(216,217,27)" rx="2" ry="2" />
<text  x="589.04" y="303.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (1 samples, 0.02%)</title><rect x="701.3" y="501" width="0.3" height="15.0" fill="rgb(215,188,49)" rx="2" ry="2" />
<text  x="704.34" y="511.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%)</title><rect x="830.5" y="325" width="0.4" height="15.0" fill="rgb(212,198,25)" rx="2" ry="2" />
<text  x="833.48" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%)</title><rect x="655.0" y="501" width="0.9" height="15.0" fill="rgb(246,128,52)" rx="2" ry="2" />
<text  x="658.04" y="511.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="81.5" y="325" width="0.2" height="15.0" fill="rgb(233,177,25)" rx="2" ry="2" />
<text  x="84.49" y="335.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (288 samples, 5.54%)</title><rect x="18.4" y="629" width="65.4" height="15.0" fill="rgb(251,38,4)" rx="2" ry="2" />
<text  x="21.40" y="639.5" >seastar..</text>
</g>
<g >
<title>cql3::statements::raw::select_statement::prepare (1 samples, 0.02%)</title><rect x="11.1" y="357" width="0.3" height="15.0" fill="rgb(249,1,8)" rx="2" ry="2" />
<text  x="14.13" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%)</title><rect x="110.5" y="517" width="0.5" height="15.0" fill="rgb(236,7,42)" rx="2" ry="2" />
<text  x="113.55" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="263.3" y="197" width="0.2" height="15.0" fill="rgb(225,107,36)" rx="2" ry="2" />
<text  x="266.29" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%)</title><rect x="565.2" y="309" width="0.2" height="15.0" fill="rgb(241,103,36)" rx="2" ry="2" />
<text  x="568.16" y="319.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (1 samples, 0.02%)</title><rect x="455.8" y="389" width="0.2" height="15.0" fill="rgb(211,83,38)" rx="2" ry="2" />
<text  x="458.76" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (39 samples, 0.75%)</title><rect x="895.2" y="373" width="8.8" height="15.0" fill="rgb(222,101,20)" rx="2" ry="2" />
<text  x="898.17" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="40.2" y="229" width="0.2" height="15.0" fill="rgb(219,164,31)" rx="2" ry="2" />
<text  x="43.19" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,324 samples, 44.70%)</title><rect x="119.9" y="517" width="527.4" height="15.0" fill="rgb(248,24,50)" rx="2" ry="2" />
<text  x="122.85" y="527.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="552.5" y="309" width="0.2" height="15.0" fill="rgb(220,204,38)" rx="2" ry="2" />
<text  x="555.45" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="24.8" y="389" width="0.2" height="15.0" fill="rgb(229,119,33)" rx="2" ry="2" />
<text  x="27.75" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::has_supporting_index (1 samples, 0.02%)</title><rect x="75.8" y="405" width="0.2" height="15.0" fill="rgb(241,197,14)" rx="2" ry="2" />
<text  x="78.82" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (1 samples, 0.02%)</title><rect x="82.6" y="533" width="0.3" height="15.0" fill="rgb(242,173,24)" rx="2" ry="2" />
<text  x="85.63" y="543.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::max_backlog (1 samples, 0.02%)</title><rect x="727.2" y="453" width="0.2" height="15.0" fill="rgb(252,185,53)" rx="2" ry="2" />
<text  x="730.21" y="463.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (4 samples, 0.08%)</title><rect x="390.6" y="197" width="0.9" height="15.0" fill="rgb(227,190,43)" rx="2" ry="2" />
<text  x="393.62" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt;::clear (1 samples, 0.02%)</title><rect x="1127.1" y="341" width="0.3" height="15.0" fill="rgb(212,19,12)" rx="2" ry="2" />
<text  x="1130.13" y="351.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="506.6" y="229" width="0.9" height="15.0" fill="rgb(216,121,28)" rx="2" ry="2" />
<text  x="509.60" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (3 samples, 0.06%)</title><rect x="471.4" y="293" width="0.7" height="15.0" fill="rgb(214,133,0)" rx="2" ry="2" />
<text  x="474.42" y="303.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (32 samples, 0.62%)</title><rect x="1120.5" y="517" width="7.3" height="15.0" fill="rgb(219,187,48)" rx="2" ry="2" />
<text  x="1123.55" y="527.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (1 samples, 0.02%)</title><rect x="1047.2" y="373" width="0.3" height="15.0" fill="rgb(229,112,49)" rx="2" ry="2" />
<text  x="1050.24" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (4 samples, 0.08%)</title><rect x="603.1" y="453" width="0.9" height="15.0" fill="rgb(239,183,35)" rx="2" ry="2" />
<text  x="606.06" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="1007.5" y="229" width="0.5" height="15.0" fill="rgb(210,150,1)" rx="2" ry="2" />
<text  x="1010.52" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="991.2" y="261" width="0.7" height="15.0" fill="rgb(211,15,7)" rx="2" ry="2" />
<text  x="994.18" y="271.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (83 samples, 1.60%)</title><rect x="572.7" y="389" width="18.8" height="15.0" fill="rgb(216,54,47)" rx="2" ry="2" />
<text  x="575.65" y="399.5" ></text>
</g>
<g >
<title>ser::deserialize_array_helper&lt;false, ser::deletable_row_view&gt;::doit&lt;seastar::simple_memory_input_stream, utils::chunked_vector&lt;ser::deletable_row_view, 131072ul&gt; &gt; (1 samples, 0.02%)</title><rect x="111.9" y="389" width="0.2" height="15.0" fill="rgb(224,152,8)" rx="2" ry="2" />
<text  x="114.91" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (14 samples, 0.27%)</title><rect x="1070.4" y="293" width="3.2" height="15.0" fill="rgb(234,176,6)" rx="2" ry="2" />
<text  x="1073.39" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="588.5" y="325" width="0.3" height="15.0" fill="rgb(232,159,14)" rx="2" ry="2" />
<text  x="591.54" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (3 samples, 0.06%)</title><rect x="943.7" y="421" width="0.7" height="15.0" fill="rgb(253,80,23)" rx="2" ry="2" />
<text  x="946.74" y="431.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_token_present (1 samples, 0.02%)</title><rect x="28.8" y="309" width="0.3" height="15.0" fill="rgb(239,108,30)" rx="2" ry="2" />
<text  x="31.84" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (2 samples, 0.04%)</title><rect x="260.1" y="133" width="0.5" height="15.0" fill="rgb(210,221,1)" rx="2" ry="2" />
<text  x="263.12" y="143.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="534.1" y="309" width="0.2" height="15.0" fill="rgb(210,68,37)" rx="2" ry="2" />
<text  x="537.07" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="700.7" y="357" width="0.2" height="15.0" fill="rgb(224,137,52)" rx="2" ry="2" />
<text  x="703.66" y="367.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (10 samples, 0.19%)</title><rect x="1123.5" y="213" width="2.3" height="15.0" fill="rgb(217,97,30)" rx="2" ry="2" />
<text  x="1126.50" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (11 samples, 0.21%)</title><rect x="291.2" y="293" width="2.5" height="15.0" fill="rgb(216,78,26)" rx="2" ry="2" />
<text  x="294.21" y="303.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (159 samples, 3.06%)</title><rect x="789.9" y="373" width="36.0" height="15.0" fill="rgb(215,32,38)" rx="2" ry="2" />
<text  x="792.86" y="383.5" >ser..</text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%)</title><rect x="976.2" y="309" width="1.8" height="15.0" fill="rgb(249,65,11)" rx="2" ry="2" />
<text  x="979.20" y="319.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1164.4" y="421" width="0.2" height="15.0" fill="rgb(239,58,33)" rx="2" ry="2" />
<text  x="1167.35" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (3 samples, 0.06%)</title><rect x="472.8" y="309" width="0.7" height="15.0" fill="rgb(243,181,35)" rx="2" ry="2" />
<text  x="475.79" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::task_queue::register_stats (1 samples, 0.02%)</title><rect x="114.2" y="421" width="0.2" height="15.0" fill="rgb(248,55,31)" rx="2" ry="2" />
<text  x="117.18" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%)</title><rect x="867.5" y="517" width="0.2" height="15.0" fill="rgb(225,68,13)" rx="2" ry="2" />
<text  x="870.48" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (1 samples, 0.02%)</title><rect x="625.3" y="469" width="0.2" height="15.0" fill="rgb(219,79,0)" rx="2" ry="2" />
<text  x="628.31" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="20.0" y="437" width="0.2" height="15.0" fill="rgb(241,134,5)" rx="2" ry="2" />
<text  x="22.99" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (10 samples, 0.19%)</title><rect x="32.2" y="293" width="2.3" height="15.0" fill="rgb(252,60,44)" rx="2" ry="2" />
<text  x="35.24" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (4 samples, 0.08%)</title><rect x="949.4" y="405" width="0.9" height="15.0" fill="rgb(222,138,17)" rx="2" ry="2" />
<text  x="952.42" y="415.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%)</title><rect x="753.3" y="421" width="0.9" height="15.0" fill="rgb(247,199,52)" rx="2" ry="2" />
<text  x="756.32" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="784.9" y="389" width="0.2" height="15.0" fill="rgb(205,70,17)" rx="2" ry="2" />
<text  x="787.86" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (8 samples, 0.15%)</title><rect x="769.0" y="437" width="1.8" height="15.0" fill="rgb(223,99,23)" rx="2" ry="2" />
<text  x="771.98" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_deleter (1 samples, 0.02%)</title><rect x="55.8" y="261" width="0.3" height="15.0" fill="rgb(210,196,32)" rx="2" ry="2" />
<text  x="58.85" y="271.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::serialized_size_visitor&gt; (1 samples, 0.02%)</title><rect x="75.6" y="341" width="0.2" height="15.0" fill="rgb(237,206,34)" rx="2" ry="2" />
<text  x="78.59" y="351.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="63.6" y="293" width="0.2" height="15.0" fill="rgb(211,24,22)" rx="2" ry="2" />
<text  x="66.56" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (6 samples, 0.12%)</title><rect x="289.2" y="245" width="1.3" height="15.0" fill="rgb(251,79,43)" rx="2" ry="2" />
<text  x="292.17" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (1 samples, 0.02%)</title><rect x="710.6" y="517" width="0.3" height="15.0" fill="rgb(228,110,6)" rx="2" ry="2" />
<text  x="713.65" y="527.5" ></text>
</g>
<g >
<title>all (5,199 samples, 100%)</title><rect x="10.0" y="693" width="1180.0" height="15.0" fill="rgb(227,212,15)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="861.6" y="389" width="0.7" height="15.0" fill="rgb(222,56,15)" rx="2" ry="2" />
<text  x="864.58" y="399.5" ></text>
</g>
<g >
<title>freeze (10 samples, 0.19%)</title><rect x="1123.5" y="229" width="2.3" height="15.0" fill="rgb(235,97,42)" rx="2" ry="2" />
<text  x="1126.50" y="239.5" ></text>
</g>
<g >
<title>seastar::reactor::task_queue::task_queue (1 samples, 0.02%)</title><rect x="114.2" y="437" width="0.2" height="15.0" fill="rgb(237,18,50)" rx="2" ry="2" />
<text  x="117.18" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="858.6" y="437" width="0.3" height="15.0" fill="rgb(232,31,30)" rx="2" ry="2" />
<text  x="861.63" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (5 samples, 0.10%)</title><rect x="275.1" y="245" width="1.1" height="15.0" fill="rgb(242,131,39)" rx="2" ry="2" />
<text  x="278.10" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="451.5" y="437" width="0.2" height="15.0" fill="rgb(251,141,10)" rx="2" ry="2" />
<text  x="454.45" y="447.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%)</title><rect x="763.1" y="309" width="0.4" height="15.0" fill="rgb(226,19,30)" rx="2" ry="2" />
<text  x="766.08" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (3 samples, 0.06%)</title><rect x="627.3" y="469" width="0.7" height="15.0" fill="rgb(226,179,0)" rx="2" ry="2" />
<text  x="630.35" y="479.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="901.5" y="309" width="0.3" height="15.0" fill="rgb(225,195,54)" rx="2" ry="2" />
<text  x="904.53" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::stats (5 samples, 0.10%)</title><rect x="550.4" y="325" width="1.1" height="15.0" fill="rgb(235,205,0)" rx="2" ry="2" />
<text  x="553.41" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="445.8" y="277" width="0.2" height="15.0" fill="rgb(225,158,33)" rx="2" ry="2" />
<text  x="448.78" y="287.5" ></text>
</g>
<g >
<title>seastar::create_scheduling_group (1 samples, 0.02%)</title><rect x="114.2" y="517" width="0.2" height="15.0" fill="rgb(253,188,14)" rx="2" ry="2" />
<text  x="117.18" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="674.3" y="517" width="0.3" height="15.0" fill="rgb(227,155,41)" rx="2" ry="2" />
<text  x="677.33" y="527.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="521.1" y="229" width="1.4" height="15.0" fill="rgb(245,128,28)" rx="2" ry="2" />
<text  x="524.13" y="239.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%)</title><rect x="268.7" y="197" width="0.7" height="15.0" fill="rgb(222,23,3)" rx="2" ry="2" />
<text  x="271.74" y="207.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchc (1 samples, 0.02%)</title><rect x="34.3" y="277" width="0.2" height="15.0" fill="rgb(232,127,34)" rx="2" ry="2" />
<text  x="37.29" y="287.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="64.5" y="357" width="0.2" height="15.0" fill="rgb(210,39,8)" rx="2" ry="2" />
<text  x="67.47" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::parallel_for_each_impl&lt;utils::chunked_vector&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1164.4" y="469" width="0.2" height="15.0" fill="rgb(236,223,5)" rx="2" ry="2" />
<text  x="1167.35" y="479.5" ></text>
</g>
<g >
<title>mutation::data::data (1 samples, 0.02%)</title><rect x="112.8" y="389" width="0.2" height="15.0" fill="rgb(213,123,10)" rx="2" ry="2" />
<text  x="115.82" y="399.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::BaseRecognizer (2 samples, 0.04%)</title><rect x="23.8" y="405" width="0.5" height="15.0" fill="rgb(212,183,20)" rx="2" ry="2" />
<text  x="26.84" y="415.5" ></text>
</g>
<g >
<title>database::find_schema (3 samples, 0.06%)</title><rect x="79.9" y="469" width="0.7" height="15.0" fill="rgb(207,92,23)" rx="2" ry="2" />
<text  x="82.91" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (30 samples, 0.58%)</title><rect x="1121.0" y="389" width="6.8" height="15.0" fill="rgb(241,69,9)" rx="2" ry="2" />
<text  x="1124.00" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%)</title><rect x="659.1" y="501" width="0.3" height="15.0" fill="rgb(234,78,13)" rx="2" ry="2" />
<text  x="662.12" y="511.5" ></text>
</g>
<g >
<title>_dl_relocate_object (1 samples, 0.02%)</title><rect x="84.9" y="613" width="0.2" height="15.0" fill="rgb(254,177,29)" rx="2" ry="2" />
<text  x="87.90" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (1 samples, 0.02%)</title><rect x="1002.5" y="309" width="0.3" height="15.0" fill="rgb(225,229,10)" rx="2" ry="2" />
<text  x="1005.53" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="58.1" y="229" width="0.2" height="15.0" fill="rgb(244,71,26)" rx="2" ry="2" />
<text  x="61.12" y="239.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (14 samples, 0.27%)</title><rect x="733.8" y="485" width="3.2" height="15.0" fill="rgb(242,46,43)" rx="2" ry="2" />
<text  x="736.80" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%)</title><rect x="337.5" y="325" width="0.2" height="15.0" fill="rgb(212,190,46)" rx="2" ry="2" />
<text  x="340.51" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (2 samples, 0.04%)</title><rect x="626.9" y="469" width="0.4" height="15.0" fill="rgb(220,175,45)" rx="2" ry="2" />
<text  x="629.90" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="160.9" y="405" width="0.3" height="15.0" fill="rgb(231,124,9)" rx="2" ry="2" />
<text  x="163.93" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (16 samples, 0.31%)</title><rect x="468.5" y="309" width="3.6" height="15.0" fill="rgb(236,38,1)" rx="2" ry="2" />
<text  x="471.47" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="686.4" y="485" width="0.2" height="15.0" fill="rgb(225,6,20)" rx="2" ry="2" />
<text  x="689.36" y="495.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="49.5" y="197" width="0.4" height="15.0" fill="rgb(211,59,19)" rx="2" ry="2" />
<text  x="52.49" y="207.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="59.5" y="309" width="0.2" height="15.0" fill="rgb(219,107,38)" rx="2" ry="2" />
<text  x="62.48" y="319.5" ></text>
</g>
<g >
<title>std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::map (1 samples, 0.02%)</title><rect x="113.0" y="421" width="0.3" height="15.0" fill="rgb(210,82,42)" rx="2" ry="2" />
<text  x="116.04" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (2 samples, 0.04%)</title><rect x="205.9" y="277" width="0.4" height="15.0" fill="rgb(247,205,41)" rx="2" ry="2" />
<text  x="208.87" y="287.5" ></text>
</g>
<g >
<title>cql3::selection::simple_selection::is_aggregate (3 samples, 0.06%)</title><rect x="884.7" y="469" width="0.7" height="15.0" fill="rgb(207,199,44)" rx="2" ry="2" />
<text  x="887.73" y="479.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1129.6" y="517" width="0.3" height="15.0" fill="rgb(254,202,5)" rx="2" ry="2" />
<text  x="1132.63" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (7 samples, 0.13%)</title><rect x="1145.3" y="469" width="1.6" height="15.0" fill="rgb(234,12,40)" rx="2" ry="2" />
<text  x="1148.29" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="58.1" y="245" width="0.2" height="15.0" fill="rgb(220,154,48)" rx="2" ry="2" />
<text  x="61.12" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="305.3" y="341" width="0.2" height="15.0" fill="rgb(253,56,43)" rx="2" ry="2" />
<text  x="308.28" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (2 samples, 0.04%)</title><rect x="1133.5" y="533" width="0.4" height="15.0" fill="rgb(251,19,37)" rx="2" ry="2" />
<text  x="1136.49" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (1 samples, 0.02%)</title><rect x="78.3" y="357" width="0.2" height="15.0" fill="rgb(247,161,39)" rx="2" ry="2" />
<text  x="81.32" y="367.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::~metric_groups_impl (1 samples, 0.02%)</title><rect x="703.2" y="325" width="0.2" height="15.0" fill="rgb(251,134,14)" rx="2" ry="2" />
<text  x="706.16" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="112.1" y="421" width="0.3" height="15.0" fill="rgb(249,62,12)" rx="2" ry="2" />
<text  x="115.14" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (19 samples, 0.37%)</title><rect x="606.7" y="453" width="4.3" height="15.0" fill="rgb(223,26,49)" rx="2" ry="2" />
<text  x="609.70" y="463.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::operator= (1 samples, 0.02%)</title><rect x="42.7" y="357" width="0.2" height="15.0" fill="rgb(208,5,2)" rx="2" ry="2" />
<text  x="45.68" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="42.7" y="293" width="0.2" height="15.0" fill="rgb(225,161,9)" rx="2" ry="2" />
<text  x="45.68" y="303.5" ></text>
</g>
<g >
<title>abstract_type::as_cql3_type (1 samples, 0.02%)</title><rect x="70.4" y="405" width="0.2" height="15.0" fill="rgb(213,99,12)" rx="2" ry="2" />
<text  x="73.37" y="415.5" ></text>
</g>
<g >
<title>cql3::relation::to_restriction (6 samples, 0.12%)</title><rect x="74.5" y="421" width="1.3" height="15.0" fill="rgb(206,5,22)" rx="2" ry="2" />
<text  x="77.46" y="431.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::operator (1 samples, 0.02%)</title><rect x="872.0" y="373" width="0.2" height="15.0" fill="rgb(213,90,22)" rx="2" ry="2" />
<text  x="875.02" y="383.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%)</title><rect x="1113.5" y="229" width="0.5" height="15.0" fill="rgb(241,56,51)" rx="2" ry="2" />
<text  x="1116.51" y="239.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (44 samples, 0.85%)</title><rect x="69.7" y="469" width="10.0" height="15.0" fill="rgb(253,7,40)" rx="2" ry="2" />
<text  x="72.69" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (21 samples, 0.40%)</title><rect x="270.3" y="261" width="4.8" height="15.0" fill="rgb(223,5,54)" rx="2" ry="2" />
<text  x="273.33" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="39.5" y="389" width="0.2" height="15.0" fill="rgb(210,149,34)" rx="2" ry="2" />
<text  x="42.51" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="564.9" y="341" width="0.7" height="15.0" fill="rgb(248,178,47)" rx="2" ry="2" />
<text  x="567.93" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%)</title><rect x="10.7" y="421" width="0.2" height="15.0" fill="rgb(220,3,26)" rx="2" ry="2" />
<text  x="13.68" y="431.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="700.7" y="325" width="0.2" height="15.0" fill="rgb(235,62,17)" rx="2" ry="2" />
<text  x="703.66" y="335.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (67 samples, 1.29%)</title><rect x="1059.0" y="325" width="15.2" height="15.0" fill="rgb(213,163,28)" rx="2" ry="2" />
<text  x="1062.04" y="335.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%)</title><rect x="877.5" y="357" width="0.2" height="15.0" fill="rgb(254,54,26)" rx="2" ry="2" />
<text  x="880.47" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (16 samples, 0.31%)</title><rect x="60.8" y="389" width="3.7" height="15.0" fill="rgb(254,14,23)" rx="2" ry="2" />
<text  x="63.84" y="399.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (3 samples, 0.06%)</title><rect x="111.9" y="533" width="0.7" height="15.0" fill="rgb(218,145,40)" rx="2" ry="2" />
<text  x="114.91" y="543.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (1 samples, 0.02%)</title><rect x="196.6" y="277" width="0.2" height="15.0" fill="rgb(246,87,17)" rx="2" ry="2" />
<text  x="199.57" y="287.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="647.3" y="517" width="0.2" height="15.0" fill="rgb(218,169,50)" rx="2" ry="2" />
<text  x="650.32" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="106.0" y="485" width="0.2" height="15.0" fill="rgb(222,199,15)" rx="2" ry="2" />
<text  x="109.01" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="792.1" y="325" width="0.5" height="15.0" fill="rgb(246,182,24)" rx="2" ry="2" />
<text  x="795.13" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_table_statement, std::default_delete&lt;cql3::statements::drop_table_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_table_statement&gt;, void&gt; (1 samples, 0.02%)</title><rect x="67.9" y="421" width="0.2" height="15.0" fill="rgb(245,31,23)" rx="2" ry="2" />
<text  x="70.88" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (3 samples, 0.06%)</title><rect x="519.3" y="261" width="0.7" height="15.0" fill="rgb(216,219,25)" rx="2" ry="2" />
<text  x="522.31" y="271.5" ></text>
</g>
<g >
<title>dht::shard_of (6 samples, 0.12%)</title><rect x="997.3" y="309" width="1.4" height="15.0" fill="rgb(235,162,33)" rx="2" ry="2" />
<text  x="1000.31" y="319.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%)</title><rect x="325.9" y="357" width="0.3" height="15.0" fill="rgb(224,134,41)" rx="2" ry="2" />
<text  x="328.94" y="367.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::InputStream (1 samples, 0.02%)</title><rect x="22.5" y="469" width="0.2" height="15.0" fill="rgb(224,11,34)" rx="2" ry="2" />
<text  x="25.48" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="599.4" y="389" width="0.3" height="15.0" fill="rgb(253,191,52)" rx="2" ry="2" />
<text  x="602.43" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (32 samples, 0.62%)</title><rect x="871.3" y="453" width="7.3" height="15.0" fill="rgb(222,165,25)" rx="2" ry="2" />
<text  x="874.34" y="463.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.04%)</title><rect x="617.6" y="405" width="0.4" height="15.0" fill="rgb(211,183,29)" rx="2" ry="2" />
<text  x="620.59" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="448.0" y="389" width="0.3" height="15.0" fill="rgb(253,107,52)" rx="2" ry="2" />
<text  x="451.05" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1112.6" y="245" width="0.2" height="15.0" fill="rgb(210,59,5)" rx="2" ry="2" />
<text  x="1115.60" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (74 samples, 1.42%)</title><rect x="409.0" y="229" width="16.8" height="15.0" fill="rgb(221,142,20)" rx="2" ry="2" />
<text  x="412.01" y="239.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%)</title><rect x="10.7" y="629" width="0.2" height="15.0" fill="rgb(224,90,53)" rx="2" ry="2" />
<text  x="13.68" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::~when_all_state (1 samples, 0.02%)</title><rect x="870.2" y="517" width="0.2" height="15.0" fill="rgb(241,50,47)" rx="2" ry="2" />
<text  x="873.20" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1104.9" y="453" width="0.2" height="15.0" fill="rgb(237,131,25)" rx="2" ry="2" />
<text  x="1107.89" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="69.0" y="469" width="0.2" height="15.0" fill="rgb(240,218,49)" rx="2" ry="2" />
<text  x="72.01" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (3 samples, 0.06%)</title><rect x="825.3" y="325" width="0.6" height="15.0" fill="rgb(241,1,23)" rx="2" ry="2" />
<text  x="828.26" y="335.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="776.9" y="341" width="0.2" height="15.0" fill="rgb(248,81,30)" rx="2" ry="2" />
<text  x="779.92" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (2 samples, 0.04%)</title><rect x="628.5" y="469" width="0.4" height="15.0" fill="rgb(208,40,54)" rx="2" ry="2" />
<text  x="631.48" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1034.1" y="245" width="0.2" height="15.0" fill="rgb(224,52,35)" rx="2" ry="2" />
<text  x="1037.07" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%)</title><rect x="43.8" y="341" width="0.2" height="15.0" fill="rgb(222,146,5)" rx="2" ry="2" />
<text  x="46.82" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (3 samples, 0.06%)</title><rect x="73.8" y="421" width="0.7" height="15.0" fill="rgb(224,80,43)" rx="2" ry="2" />
<text  x="76.78" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="77.4" y="325" width="0.2" height="15.0" fill="rgb(211,26,9)" rx="2" ry="2" />
<text  x="80.41" y="335.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1116.9" y="245" width="0.2" height="15.0" fill="rgb(223,94,14)" rx="2" ry="2" />
<text  x="1119.92" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (4 samples, 0.08%)</title><rect x="600.1" y="389" width="0.9" height="15.0" fill="rgb(233,105,3)" rx="2" ry="2" />
<text  x="603.11" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (32 samples, 0.62%)</title><rect x="871.3" y="469" width="7.3" height="15.0" fill="rgb(254,114,2)" rx="2" ry="2" />
<text  x="874.34" y="479.5" ></text>
</g>
<g >
<title>column_definition::operator= (1 samples, 0.02%)</title><rect x="113.3" y="389" width="0.2" height="15.0" fill="rgb(232,28,39)" rx="2" ry="2" />
<text  x="116.27" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (8 samples, 0.15%)</title><rect x="875.4" y="373" width="1.8" height="15.0" fill="rgb(242,56,38)" rx="2" ry="2" />
<text  x="878.42" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="50.2" y="165" width="0.2" height="15.0" fill="rgb(209,17,23)" rx="2" ry="2" />
<text  x="53.17" y="175.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1164.4" y="501" width="0.2" height="15.0" fill="rgb(221,6,49)" rx="2" ry="2" />
<text  x="1167.35" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (1 samples, 0.02%)</title><rect x="945.3" y="453" width="0.3" height="15.0" fill="rgb(242,229,18)" rx="2" ry="2" />
<text  x="948.33" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="705.7" y="501" width="0.2" height="15.0" fill="rgb(216,57,39)" rx="2" ry="2" />
<text  x="708.65" y="511.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (1 samples, 0.02%)</title><rect x="524.8" y="213" width="0.2" height="15.0" fill="rgb(219,36,54)" rx="2" ry="2" />
<text  x="527.76" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (1 samples, 0.02%)</title><rect x="686.6" y="501" width="0.2" height="15.0" fill="rgb(205,17,52)" rx="2" ry="2" />
<text  x="689.59" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%)</title><rect x="659.6" y="517" width="0.4" height="15.0" fill="rgb(222,72,19)" rx="2" ry="2" />
<text  x="662.58" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::partition_key_restrictions (2 samples, 0.04%)</title><rect x="77.4" y="357" width="0.5" height="15.0" fill="rgb(225,182,24)" rx="2" ry="2" />
<text  x="80.41" y="367.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (60 samples, 1.15%)</title><rect x="804.4" y="277" width="13.6" height="15.0" fill="rgb(227,138,3)" rx="2" ry="2" />
<text  x="807.38" y="287.5" ></text>
</g>
<g >
<title>ser::live_cell_view::created_at (1 samples, 0.02%)</title><rect x="1117.1" y="261" width="0.3" height="15.0" fill="rgb(254,111,5)" rx="2" ry="2" />
<text  x="1120.14" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::select_on_container_copy_construction (1 samples, 0.02%)</title><rect x="26.8" y="213" width="0.2" height="15.0" fill="rgb(250,48,12)" rx="2" ry="2" />
<text  x="29.80" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%)</title><rect x="63.1" y="325" width="0.2" height="15.0" fill="rgb(213,141,32)" rx="2" ry="2" />
<text  x="66.11" y="335.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::key (1 samples, 0.02%)</title><rect x="1116.7" y="261" width="0.2" height="15.0" fill="rgb(227,129,0)" rx="2" ry="2" />
<text  x="1119.69" y="271.5" ></text>
</g>
<g >
<title>db::rp_set::put (1 samples, 0.02%)</title><rect x="1112.6" y="277" width="0.2" height="15.0" fill="rgb(221,29,26)" rx="2" ry="2" />
<text  x="1115.60" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="618.5" y="421" width="0.2" height="15.0" fill="rgb(223,97,43)" rx="2" ry="2" />
<text  x="621.50" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="56.1" y="245" width="0.4" height="15.0" fill="rgb(221,165,35)" rx="2" ry="2" />
<text  x="59.07" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%)</title><rect x="681.1" y="501" width="0.3" height="15.0" fill="rgb(252,107,28)" rx="2" ry="2" />
<text  x="684.14" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="41.8" y="245" width="0.2" height="15.0" fill="rgb(240,223,39)" rx="2" ry="2" />
<text  x="44.78" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (542 samples, 10.43%)</title><rect x="959.9" y="405" width="123.0" height="15.0" fill="rgb(215,147,31)" rx="2" ry="2" />
<text  x="962.86" y="415.5" >service::storag..</text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (12 samples, 0.23%)</title><rect x="801.0" y="293" width="2.7" height="15.0" fill="rgb(212,151,11)" rx="2" ry="2" />
<text  x="803.98" y="303.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="320.3" y="325" width="0.2" height="15.0" fill="rgb(210,75,30)" rx="2" ry="2" />
<text  x="323.26" y="335.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="333.0" y="325" width="0.4" height="15.0" fill="rgb(231,99,31)" rx="2" ry="2" />
<text  x="335.97" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%)</title><rect x="300.1" y="309" width="0.2" height="15.0" fill="rgb(254,76,41)" rx="2" ry="2" />
<text  x="303.06" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="602.4" y="421" width="0.2" height="15.0" fill="rgb(230,221,17)" rx="2" ry="2" />
<text  x="605.38" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="713.6" y="517" width="0.2" height="15.0" fill="rgb(242,229,45)" rx="2" ry="2" />
<text  x="716.60" y="527.5" ></text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%)</title><rect x="1162.5" y="533" width="0.3" height="15.0" fill="rgb(226,53,27)" rx="2" ry="2" />
<text  x="1165.54" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;5ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="57.4" y="53" width="0.3" height="15.0" fill="rgb(219,94,33)" rx="2" ry="2" />
<text  x="60.44" y="63.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="558.8" y="437" width="0.2" height="15.0" fill="rgb(232,28,7)" rx="2" ry="2" />
<text  x="561.81" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::clear (1 samples, 0.02%)</title><rect x="767.2" y="437" width="0.2" height="15.0" fill="rgb(225,35,10)" rx="2" ry="2" />
<text  x="770.16" y="447.5" ></text>
</g>
<g >
<title>database::query (100 samples, 1.92%)</title><rect x="1004.1" y="293" width="22.7" height="15.0" fill="rgb(220,19,51)" rx="2" ry="2" />
<text  x="1007.11" y="303.5" >d..</text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="62.7" y="325" width="0.4" height="15.0" fill="rgb(237,84,2)" rx="2" ry="2" />
<text  x="65.66" y="335.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%)</title><rect x="11.1" y="325" width="0.3" height="15.0" fill="rgb(210,124,14)" rx="2" ry="2" />
<text  x="14.13" y="335.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (5 samples, 0.10%)</title><rect x="1151.9" y="485" width="1.1" height="15.0" fill="rgb(232,23,11)" rx="2" ry="2" />
<text  x="1154.87" y="495.5" ></text>
</g>
<g >
<title>partition_entry::read (1 samples, 0.02%)</title><rect x="536.6" y="357" width="0.2" height="15.0" fill="rgb(206,15,38)" rx="2" ry="2" />
<text  x="539.56" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (37 samples, 0.71%)</title><rect x="209.7" y="277" width="8.4" height="15.0" fill="rgb(238,174,2)" rx="2" ry="2" />
<text  x="212.73" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="874.3" y="389" width="0.2" height="15.0" fill="rgb(230,36,10)" rx="2" ry="2" />
<text  x="877.29" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="922.9" y="373" width="0.2" height="15.0" fill="rgb(240,145,21)" rx="2" ry="2" />
<text  x="925.86" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (3 samples, 0.06%)</title><rect x="943.7" y="405" width="0.7" height="15.0" fill="rgb(228,23,0)" rx="2" ry="2" />
<text  x="946.74" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%)</title><rect x="51.1" y="341" width="0.2" height="15.0" fill="rgb(210,57,9)" rx="2" ry="2" />
<text  x="54.08" y="351.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::explode (1 samples, 0.02%)</title><rect x="1124.6" y="133" width="0.3" height="15.0" fill="rgb(211,8,14)" rx="2" ry="2" />
<text  x="1127.63" y="143.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="86.5" y="245" width="0.2" height="15.0" fill="rgb(208,95,9)" rx="2" ry="2" />
<text  x="89.49" y="255.5" ></text>
</g>
<g >
<title>ser::mutation_partition_view::range_tombstones (1 samples, 0.02%)</title><rect x="1117.4" y="261" width="0.2" height="15.0" fill="rgb(241,3,38)" rx="2" ry="2" />
<text  x="1120.37" y="271.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="644.6" y="421" width="0.2" height="15.0" fill="rgb(233,175,27)" rx="2" ry="2" />
<text  x="647.60" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (1 samples, 0.02%)</title><rect x="265.6" y="165" width="0.2" height="15.0" fill="rgb(207,218,32)" rx="2" ry="2" />
<text  x="268.56" y="175.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="700.7" y="373" width="0.2" height="15.0" fill="rgb(214,22,0)" rx="2" ry="2" />
<text  x="703.66" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="56.1" y="261" width="0.4" height="15.0" fill="rgb(213,128,39)" rx="2" ry="2" />
<text  x="59.07" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (12 samples, 0.23%)</title><rect x="85.6" y="581" width="2.7" height="15.0" fill="rgb(234,204,44)" rx="2" ry="2" />
<text  x="88.58" y="591.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (13 samples, 0.25%)</title><rect x="828.0" y="357" width="2.9" height="15.0" fill="rgb(249,44,48)" rx="2" ry="2" />
<text  x="830.99" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (7 samples, 0.13%)</title><rect x="698.2" y="517" width="1.6" height="15.0" fill="rgb(225,141,7)" rx="2" ry="2" />
<text  x="701.16" y="527.5" ></text>
</g>
<g >
<title>local_schema_registry (1 samples, 0.02%)</title><rect x="965.1" y="389" width="0.2" height="15.0" fill="rgb(206,91,10)" rx="2" ry="2" />
<text  x="968.08" y="399.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1124.0" y="133" width="0.2" height="15.0" fill="rgb(249,147,7)" rx="2" ry="2" />
<text  x="1126.95" y="143.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (1 samples, 0.02%)</title><rect x="119.4" y="517" width="0.2" height="15.0" fill="rgb(240,226,54)" rx="2" ry="2" />
<text  x="122.40" y="527.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (2 samples, 0.04%)</title><rect x="11.6" y="613" width="0.4" height="15.0" fill="rgb(227,75,47)" rx="2" ry="2" />
<text  x="14.59" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (4 samples, 0.08%)</title><rect x="678.9" y="469" width="0.9" height="15.0" fill="rgb(247,83,30)" rx="2" ry="2" />
<text  x="681.87" y="479.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (5 samples, 0.10%)</title><rect x="547.0" y="293" width="1.1" height="15.0" fill="rgb(244,32,41)" rx="2" ry="2" />
<text  x="550.00" y="303.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (1 samples, 0.02%)</title><rect x="1122.4" y="213" width="0.2" height="15.0" fill="rgb(241,75,10)" rx="2" ry="2" />
<text  x="1125.36" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="987.3" y="357" width="0.5" height="15.0" fill="rgb(248,177,9)" rx="2" ry="2" />
<text  x="990.32" y="367.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%)</title><rect x="43.8" y="357" width="0.2" height="15.0" fill="rgb(250,101,29)" rx="2" ry="2" />
<text  x="46.82" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::single_column_relation&gt; &gt; (2 samples, 0.04%)</title><rect x="64.0" y="357" width="0.5" height="15.0" fill="rgb(207,32,4)" rx="2" ry="2" />
<text  x="67.02" y="367.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (13 samples, 0.25%)</title><rect x="680.7" y="517" width="2.9" height="15.0" fill="rgb(206,151,40)" rx="2" ry="2" />
<text  x="683.69" y="527.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="370.2" y="213" width="0.5" height="15.0" fill="rgb(205,131,19)" rx="2" ry="2" />
<text  x="373.20" y="223.5" ></text>
</g>
<g >
<title>boost::variant&lt;boost::variant&lt;ser::live_cell_view, ser::expiring_cell_view, ser::dead_cell_view, ser::counter_cell_view, ser::unknown_variant_type&gt;, ser::collection_cell_view, ser::unknown_variant_type&gt;::destroy_content (1 samples, 0.02%)</title><rect x="1115.6" y="261" width="0.2" height="15.0" fill="rgb(247,65,24)" rx="2" ry="2" />
<text  x="1118.55" y="271.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (5 samples, 0.10%)</title><rect x="38.1" y="341" width="1.2" height="15.0" fill="rgb(252,151,37)" rx="2" ry="2" />
<text  x="41.14" y="351.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (22 samples, 0.42%)</title><rect x="561.8" y="453" width="4.9" height="15.0" fill="rgb(239,9,52)" rx="2" ry="2" />
<text  x="564.76" y="463.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (23 samples, 0.44%)</title><rect x="768.1" y="453" width="5.2" height="15.0" fill="rgb(240,208,37)" rx="2" ry="2" />
<text  x="771.07" y="463.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="334.1" y="341" width="0.2" height="15.0" fill="rgb(206,210,6)" rx="2" ry="2" />
<text  x="337.11" y="351.5" ></text>
</g>
<g >
<title>auth::resource::parent (9 samples, 0.17%)</title><rect x="793.5" y="357" width="2.0" height="15.0" fill="rgb(250,9,9)" rx="2" ry="2" />
<text  x="796.49" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::vector (1 samples, 0.02%)</title><rect x="112.8" y="453" width="0.2" height="15.0" fill="rgb(236,17,38)" rx="2" ry="2" />
<text  x="115.82" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (1 samples, 0.02%)</title><rect x="986.2" y="373" width="0.2" height="15.0" fill="rgb(216,24,22)" rx="2" ry="2" />
<text  x="989.18" y="383.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (4 samples, 0.08%)</title><rect x="87.2" y="469" width="0.9" height="15.0" fill="rgb(253,224,14)" rx="2" ry="2" />
<text  x="90.17" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="156.8" y="453" width="0.7" height="15.0" fill="rgb(246,39,19)" rx="2" ry="2" />
<text  x="159.85" y="463.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%)</title><rect x="1038.2" y="357" width="0.2" height="15.0" fill="rgb(251,157,3)" rx="2" ry="2" />
<text  x="1041.16" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="1098.5" y="453" width="0.3" height="15.0" fill="rgb(228,219,25)" rx="2" ry="2" />
<text  x="1101.53" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (52 samples, 1.00%)</title><rect x="516.8" y="309" width="11.8" height="15.0" fill="rgb(220,119,35)" rx="2" ry="2" />
<text  x="519.82" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="1100.3" y="437" width="0.5" height="15.0" fill="rgb(219,228,10)" rx="2" ry="2" />
<text  x="1103.35" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (6 samples, 0.12%)</title><rect x="723.8" y="469" width="1.4" height="15.0" fill="rgb(234,176,45)" rx="2" ry="2" />
<text  x="726.81" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="702.0" y="341" width="0.2" height="15.0" fill="rgb(236,151,28)" rx="2" ry="2" />
<text  x="705.02" y="351.5" ></text>
</g>
<g >
<title>__open64 (1 samples, 0.02%)</title><rect x="1189.8" y="645" width="0.2" height="15.0" fill="rgb(219,142,36)" rx="2" ry="2" />
<text  x="1192.77" y="655.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="820.5" y="245" width="0.2" height="15.0" fill="rgb(234,186,35)" rx="2" ry="2" />
<text  x="823.50" y="255.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%)</title><rect x="61.1" y="357" width="0.2" height="15.0" fill="rgb(215,186,24)" rx="2" ry="2" />
<text  x="64.07" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (7 samples, 0.13%)</title><rect x="696.1" y="485" width="1.6" height="15.0" fill="rgb(213,90,19)" rx="2" ry="2" />
<text  x="699.12" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%)</title><rect x="845.5" y="437" width="0.6" height="15.0" fill="rgb(219,104,9)" rx="2" ry="2" />
<text  x="848.46" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (8 samples, 0.15%)</title><rect x="761.0" y="357" width="1.8" height="15.0" fill="rgb(216,92,11)" rx="2" ry="2" />
<text  x="764.03" y="367.5" ></text>
</g>
<g >
<title>std::operator- (3 samples, 0.06%)</title><rect x="39.7" y="245" width="0.7" height="15.0" fill="rgb(236,23,38)" rx="2" ry="2" />
<text  x="42.73" y="255.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="830.3" y="309" width="0.2" height="15.0" fill="rgb(219,120,50)" rx="2" ry="2" />
<text  x="833.26" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (1 samples, 0.02%)</title><rect x="142.1" y="453" width="0.2" height="15.0" fill="rgb(226,102,4)" rx="2" ry="2" />
<text  x="145.09" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (14 samples, 0.27%)</title><rect x="837.3" y="373" width="3.2" height="15.0" fill="rgb(209,95,41)" rx="2" ry="2" />
<text  x="840.29" y="383.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1,144 samples, 22.00%)</title><rect x="870.4" y="533" width="259.7" height="15.0" fill="rgb(245,160,6)" rx="2" ry="2" />
<text  x="873.43" y="543.5" >seastar::lambda_task&lt;seastar::exec..</text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1162.5" y="469" width="0.3" height="15.0" fill="rgb(228,81,30)" rx="2" ry="2" />
<text  x="1165.54" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="55.2" y="309" width="0.2" height="15.0" fill="rgb(213,214,32)" rx="2" ry="2" />
<text  x="58.17" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (27 samples, 0.52%)</title><rect x="760.6" y="373" width="6.1" height="15.0" fill="rgb(229,128,46)" rx="2" ry="2" />
<text  x="763.58" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="57.9" y="165" width="0.2" height="15.0" fill="rgb(205,227,50)" rx="2" ry="2" />
<text  x="60.89" y="175.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (2 samples, 0.04%)</title><rect x="141.6" y="453" width="0.5" height="15.0" fill="rgb(222,26,39)" rx="2" ry="2" />
<text  x="144.64" y="463.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%)</title><rect x="855.9" y="453" width="0.2" height="15.0" fill="rgb(207,148,45)" rx="2" ry="2" />
<text  x="858.90" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (11 samples, 0.21%)</title><rect x="523.6" y="245" width="2.5" height="15.0" fill="rgb(243,40,11)" rx="2" ry="2" />
<text  x="526.63" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7 samples, 0.13%)</title><rect x="1041.6" y="341" width="1.6" height="15.0" fill="rgb(242,172,36)" rx="2" ry="2" />
<text  x="1044.56" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (4 samples, 0.08%)</title><rect x="949.4" y="389" width="0.9" height="15.0" fill="rgb(205,229,19)" rx="2" ry="2" />
<text  x="952.42" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (1 samples, 0.02%)</title><rect x="1162.3" y="469" width="0.2" height="15.0" fill="rgb(242,203,49)" rx="2" ry="2" />
<text  x="1165.31" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="64.5" y="325" width="0.2" height="15.0" fill="rgb(231,200,12)" rx="2" ry="2" />
<text  x="67.47" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (1 samples, 0.02%)</title><rect x="128.9" y="469" width="0.3" height="15.0" fill="rgb(232,105,15)" rx="2" ry="2" />
<text  x="131.93" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="719.7" y="453" width="0.3" height="15.0" fill="rgb(215,152,19)" rx="2" ry="2" />
<text  x="722.72" y="463.5" ></text>
</g>
<g >
<title>row::external_memory_usage (17 samples, 0.33%)</title><rect x="258.3" y="181" width="3.9" height="15.0" fill="rgb(241,71,16)" rx="2" ry="2" />
<text  x="261.30" y="191.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (9 samples, 0.17%)</title><rect x="473.9" y="341" width="2.1" height="15.0" fill="rgb(222,134,6)" rx="2" ry="2" />
<text  x="476.92" y="351.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (5 samples, 0.10%)</title><rect x="211.8" y="229" width="1.1" height="15.0" fill="rgb(249,98,7)" rx="2" ry="2" />
<text  x="214.77" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (4 samples, 0.08%)</title><rect x="666.8" y="485" width="0.9" height="15.0" fill="rgb(207,225,47)" rx="2" ry="2" />
<text  x="669.84" y="495.5" ></text>
</g>
<g >
<title>collect_all_shared_sstables (1 samples, 0.02%)</title><rect x="19.3" y="581" width="0.2" height="15.0" fill="rgb(228,212,0)" rx="2" ry="2" />
<text  x="22.31" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (9 samples, 0.17%)</title><rect x="1137.8" y="517" width="2.0" height="15.0" fill="rgb(214,161,40)" rx="2" ry="2" />
<text  x="1140.80" y="527.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="566.1" y="437" width="0.2" height="15.0" fill="rgb(239,101,0)" rx="2" ry="2" />
<text  x="569.07" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (2 samples, 0.04%)</title><rect x="300.3" y="309" width="0.4" height="15.0" fill="rgb(215,130,19)" rx="2" ry="2" />
<text  x="303.29" y="319.5" ></text>
</g>
<g >
<title>cache_tracker::insert (1 samples, 0.02%)</title><rect x="19.1" y="597" width="0.2" height="15.0" fill="rgb(212,159,38)" rx="2" ry="2" />
<text  x="22.08" y="607.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (4 samples, 0.08%)</title><rect x="816.4" y="149" width="0.9" height="15.0" fill="rgb(229,60,27)" rx="2" ry="2" />
<text  x="819.41" y="159.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%)</title><rect x="1123.0" y="245" width="0.3" height="15.0" fill="rgb(231,212,4)" rx="2" ry="2" />
<text  x="1126.04" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::~deque (1 samples, 0.02%)</title><rect x="24.3" y="389" width="0.2" height="15.0" fill="rgb(249,143,39)" rx="2" ry="2" />
<text  x="27.30" y="399.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="20.0" y="389" width="0.2" height="15.0" fill="rgb(212,150,15)" rx="2" ry="2" />
<text  x="22.99" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="27.5" y="277" width="0.7" height="15.0" fill="rgb(227,62,28)" rx="2" ry="2" />
<text  x="30.48" y="287.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (40 samples, 0.77%)</title><rect x="1180.5" y="661" width="9.0" height="15.0" fill="rgb(229,5,8)" rx="2" ry="2" />
<text  x="1183.47" y="671.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (4 samples, 0.08%)</title><rect x="776.7" y="357" width="0.9" height="15.0" fill="rgb(243,106,40)" rx="2" ry="2" />
<text  x="779.69" y="367.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::prepare_column_identifier (2 samples, 0.04%)</title><rect x="69.9" y="453" width="0.5" height="15.0" fill="rgb(240,136,0)" rx="2" ry="2" />
<text  x="72.92" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="602.2" y="421" width="0.2" height="15.0" fill="rgb(229,203,39)" rx="2" ry="2" />
<text  x="605.16" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="933.3" y="421" width="0.7" height="15.0" fill="rgb(244,155,23)" rx="2" ry="2" />
<text  x="936.30" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%)</title><rect x="829.6" y="309" width="0.7" height="15.0" fill="rgb(237,18,28)" rx="2" ry="2" />
<text  x="832.58" y="319.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="61.7" y="309" width="0.3" height="15.0" fill="rgb(231,125,2)" rx="2" ry="2" />
<text  x="64.75" y="319.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (6 samples, 0.12%)</title><rect x="251.0" y="133" width="1.4" height="15.0" fill="rgb(241,158,41)" rx="2" ry="2" />
<text  x="254.04" y="143.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%)</title><rect x="520.0" y="261" width="0.4" height="15.0" fill="rgb(237,34,43)" rx="2" ry="2" />
<text  x="522.99" y="271.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (25 samples, 0.48%)</title><rect x="717.7" y="485" width="5.7" height="15.0" fill="rgb(225,135,8)" rx="2" ry="2" />
<text  x="720.68" y="495.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="10.9" y="629" width="0.2" height="15.0" fill="rgb(223,220,16)" rx="2" ry="2" />
<text  x="13.91" y="639.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (39 samples, 0.75%)</title><rect x="132.8" y="453" width="8.8" height="15.0" fill="rgb(216,95,11)" rx="2" ry="2" />
<text  x="135.79" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (3 samples, 0.06%)</title><rect x="1163.0" y="485" width="0.7" height="15.0" fill="rgb(211,61,27)" rx="2" ry="2" />
<text  x="1165.99" y="495.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;long, std::allocator&lt;long&gt; &gt;::push_back_impl&lt;long const&amp;&gt; (1 samples, 0.02%)</title><rect x="623.5" y="421" width="0.2" height="15.0" fill="rgb(223,52,34)" rx="2" ry="2" />
<text  x="626.49" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (1 samples, 0.02%)</title><rect x="821.6" y="309" width="0.3" height="15.0" fill="rgb(235,16,20)" rx="2" ry="2" />
<text  x="824.63" y="319.5" ></text>
</g>
<g >
<title>auth::find_record (1 samples, 0.02%)</title><rect x="1164.4" y="277" width="0.2" height="15.0" fill="rgb(244,137,0)" rx="2" ry="2" />
<text  x="1167.35" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="41.5" y="325" width="0.5" height="15.0" fill="rgb(243,128,5)" rx="2" ry="2" />
<text  x="44.55" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="639.2" y="389" width="0.2" height="15.0" fill="rgb(247,63,1)" rx="2" ry="2" />
<text  x="642.15" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::emplace_back&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;&amp;, seastar::shared_ptr&lt;abstract_type const&gt;&amp;, column_kind&amp;, unsigned int&amp;, column_view_virtual&amp;, std::unique_ptr&lt;column_computation, std::default_delete&lt;column_computation&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="113.7" y="373" width="0.3" height="15.0" fill="rgb(244,117,20)" rx="2" ry="2" />
<text  x="116.72" y="383.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (2 samples, 0.04%)</title><rect x="1057.2" y="357" width="0.5" height="15.0" fill="rgb(230,133,6)" rx="2" ry="2" />
<text  x="1060.22" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="866.3" y="453" width="0.3" height="15.0" fill="rgb(223,9,10)" rx="2" ry="2" />
<text  x="869.35" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%)</title><rect x="263.5" y="213" width="0.2" height="15.0" fill="rgb(253,114,0)" rx="2" ry="2" />
<text  x="266.52" y="223.5" ></text>
</g>
<g >
<title>v3_columns::apply_to (1 samples, 0.02%)</title><rect x="113.7" y="421" width="0.3" height="15.0" fill="rgb(249,97,24)" rx="2" ry="2" />
<text  x="116.72" y="431.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1146.2" y="437" width="0.2" height="15.0" fill="rgb(249,122,19)" rx="2" ry="2" />
<text  x="1149.20" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="865.7" y="453" width="0.4" height="15.0" fill="rgb(209,99,28)" rx="2" ry="2" />
<text  x="868.66" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.10%)</title><rect x="1080.6" y="389" width="1.1" height="15.0" fill="rgb(237,118,47)" rx="2" ry="2" />
<text  x="1083.60" y="399.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (3 samples, 0.06%)</title><rect x="113.3" y="437" width="0.7" height="15.0" fill="rgb(223,1,51)" rx="2" ry="2" />
<text  x="116.27" y="447.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (7 samples, 0.13%)</title><rect x="778.3" y="373" width="1.6" height="15.0" fill="rgb(244,166,39)" rx="2" ry="2" />
<text  x="781.28" y="383.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="645.5" y="453" width="0.2" height="15.0" fill="rgb(227,64,40)" rx="2" ry="2" />
<text  x="648.51" y="463.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%)</title><rect x="577.0" y="357" width="1.3" height="15.0" fill="rgb(251,190,41)" rx="2" ry="2" />
<text  x="579.96" y="367.5" ></text>
</g>
<g >
<title>cql3::selection::simple_selection::is_aggregate (1 samples, 0.02%)</title><rect x="945.1" y="453" width="0.2" height="15.0" fill="rgb(244,12,13)" rx="2" ry="2" />
<text  x="948.10" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (2 samples, 0.04%)</title><rect x="844.6" y="453" width="0.4" height="15.0" fill="rgb(243,158,45)" rx="2" ry="2" />
<text  x="847.56" y="463.5" ></text>
</g>
<g >
<title>schema::position (1 samples, 0.02%)</title><rect x="1100.8" y="453" width="0.2" height="15.0" fill="rgb(240,7,12)" rx="2" ry="2" />
<text  x="1103.80" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="647.1" y="501" width="0.2" height="15.0" fill="rgb(250,149,23)" rx="2" ry="2" />
<text  x="650.10" y="511.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="1101.3" y="437" width="1.1" height="15.0" fill="rgb(253,11,37)" rx="2" ry="2" />
<text  x="1104.26" y="447.5" ></text>
</g>
<g >
<title>auth::service::get_uncached_permissions (1 samples, 0.02%)</title><rect x="1164.4" y="373" width="0.2" height="15.0" fill="rgb(226,12,7)" rx="2" ry="2" />
<text  x="1167.35" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="207.9" y="277" width="0.2" height="15.0" fill="rgb(220,74,16)" rx="2" ry="2" />
<text  x="210.91" y="287.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="1113.7" y="197" width="0.3" height="15.0" fill="rgb(228,48,12)" rx="2" ry="2" />
<text  x="1116.74" y="207.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="49.9" y="181" width="0.5" height="15.0" fill="rgb(236,53,0)" rx="2" ry="2" />
<text  x="52.95" y="191.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::alter_service_level_statement, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="65.4" y="389" width="0.2" height="15.0" fill="rgb(229,175,11)" rx="2" ry="2" />
<text  x="68.38" y="399.5" ></text>
</g>
<g >
<title>db::filter_for_query (2 samples, 0.04%)</title><rect x="964.6" y="389" width="0.5" height="15.0" fill="rgb(244,8,27)" rx="2" ry="2" />
<text  x="967.62" y="399.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (6 samples, 0.12%)</title><rect x="829.6" y="341" width="1.3" height="15.0" fill="rgb(247,210,7)" rx="2" ry="2" />
<text  x="832.58" y="351.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%)</title><rect x="702.2" y="245" width="0.3" height="15.0" fill="rgb(232,74,51)" rx="2" ry="2" />
<text  x="705.25" y="255.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="703.2" y="469" width="0.2" height="15.0" fill="rgb(248,169,10)" rx="2" ry="2" />
<text  x="706.16" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="650.7" y="501" width="0.3" height="15.0" fill="rgb(237,138,32)" rx="2" ry="2" />
<text  x="653.73" y="511.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::run_with_ordered_post_op&lt;db::commitlog::segment::cycle (1 samples, 0.02%)</title><rect x="727.7" y="453" width="0.2" height="15.0" fill="rgb(213,221,27)" rx="2" ry="2" />
<text  x="730.67" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (1 samples, 0.02%)</title><rect x="788.9" y="389" width="0.3" height="15.0" fill="rgb(218,64,18)" rx="2" ry="2" />
<text  x="791.95" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="111.7" y="229" width="0.2" height="15.0" fill="rgb(223,22,13)" rx="2" ry="2" />
<text  x="114.68" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (1 samples, 0.02%)</title><rect x="518.4" y="293" width="0.2" height="15.0" fill="rgb(248,72,18)" rx="2" ry="2" />
<text  x="521.41" y="303.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (6 samples, 0.12%)</title><rect x="756.0" y="389" width="1.4" height="15.0" fill="rgb(248,80,54)" rx="2" ry="2" />
<text  x="759.04" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (32 samples, 0.62%)</title><rect x="810.5" y="229" width="7.3" height="15.0" fill="rgb(216,26,33)" rx="2" ry="2" />
<text  x="813.51" y="239.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="645.3" y="453" width="0.2" height="15.0" fill="rgb(241,91,24)" rx="2" ry="2" />
<text  x="648.28" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (10 samples, 0.19%)</title><rect x="34.7" y="293" width="2.3" height="15.0" fill="rgb(210,11,28)" rx="2" ry="2" />
<text  x="37.74" y="303.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (6 samples, 0.12%)</title><rect x="21.1" y="549" width="1.4" height="15.0" fill="rgb(249,163,38)" rx="2" ry="2" />
<text  x="24.12" y="559.5" ></text>
</g>
<g >
<title>db::view::stats::stats (1 samples, 0.02%)</title><rect x="114.0" y="453" width="0.2" height="15.0" fill="rgb(245,125,2)" rx="2" ry="2" />
<text  x="116.95" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::do_merge_with (2 samples, 0.04%)</title><rect x="76.0" y="357" width="0.5" height="15.0" fill="rgb(217,164,18)" rx="2" ry="2" />
<text  x="79.05" y="367.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (23 samples, 0.44%)</title><rect x="256.9" y="197" width="5.3" height="15.0" fill="rgb(210,7,48)" rx="2" ry="2" />
<text  x="259.94" y="207.5" ></text>
</g>
<g >
<title>serialize (1 samples, 0.02%)</title><rect x="75.1" y="325" width="0.3" height="15.0" fill="rgb(230,10,43)" rx="2" ry="2" />
<text  x="78.14" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="333.4" y="325" width="0.3" height="15.0" fill="rgb(230,67,8)" rx="2" ry="2" />
<text  x="336.43" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (13 samples, 0.25%)</title><rect x="503.7" y="229" width="2.9" height="15.0" fill="rgb(252,7,4)" rx="2" ry="2" />
<text  x="506.65" y="239.5" ></text>
</g>
<g >
<title>table::table (1 samples, 0.02%)</title><rect x="114.0" y="469" width="0.2" height="15.0" fill="rgb(254,168,44)" rx="2" ry="2" />
<text  x="116.95" y="479.5" ></text>
</g>
<g >
<title>unlink_chunk.constprop.0 (1 samples, 0.02%)</title><rect x="88.3" y="645" width="0.2" height="15.0" fill="rgb(215,121,1)" rx="2" ry="2" />
<text  x="91.30" y="655.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="719.3" y="469" width="0.2" height="15.0" fill="rgb(250,213,41)" rx="2" ry="2" />
<text  x="722.27" y="479.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (5 samples, 0.10%)</title><rect x="283.3" y="229" width="1.1" height="15.0" fill="rgb(251,91,47)" rx="2" ry="2" />
<text  x="286.27" y="239.5" ></text>
</g>
<g >
<title>ser::writer_of_column&lt;bytes_ostream&gt;::write_id (1 samples, 0.02%)</title><rect x="1124.2" y="133" width="0.2" height="15.0" fill="rgb(207,214,25)" rx="2" ry="2" />
<text  x="1127.18" y="143.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%)</title><rect x="284.9" y="197" width="0.6" height="15.0" fill="rgb(248,23,49)" rx="2" ry="2" />
<text  x="287.86" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="206.3" y="277" width="0.5" height="15.0" fill="rgb(233,56,18)" rx="2" ry="2" />
<text  x="209.33" y="287.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (8 samples, 0.15%)</title><rect x="1151.2" y="501" width="1.8" height="15.0" fill="rgb(244,195,27)" rx="2" ry="2" />
<text  x="1154.19" y="511.5" ></text>
</g>
<g >
<title>make_combined_reader (67 samples, 1.29%)</title><rect x="464.6" y="357" width="15.2" height="15.0" fill="rgb(241,27,2)" rx="2" ry="2" />
<text  x="467.61" y="367.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (32 samples, 0.62%)</title><rect x="915.8" y="405" width="7.3" height="15.0" fill="rgb(218,54,43)" rx="2" ry="2" />
<text  x="918.82" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (2 samples, 0.04%)</title><rect x="144.4" y="485" width="0.4" height="15.0" fill="rgb(211,190,19)" rx="2" ry="2" />
<text  x="147.36" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (19 samples, 0.37%)</title><rect x="270.8" y="245" width="4.3" height="15.0" fill="rgb(254,159,39)" rx="2" ry="2" />
<text  x="273.78" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%)</title><rect x="700.7" y="277" width="0.2" height="15.0" fill="rgb(250,214,53)" rx="2" ry="2" />
<text  x="703.66" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="853.2" y="405" width="0.2" height="15.0" fill="rgb(240,181,30)" rx="2" ry="2" />
<text  x="856.18" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%)</title><rect x="45.6" y="309" width="0.3" height="15.0" fill="rgb(211,50,10)" rx="2" ry="2" />
<text  x="48.63" y="319.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (6 samples, 0.12%)</title><rect x="486.2" y="325" width="1.3" height="15.0" fill="rgb(223,23,22)" rx="2" ry="2" />
<text  x="489.18" y="335.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (8 samples, 0.15%)</title><rect x="939.7" y="405" width="1.8" height="15.0" fill="rgb(205,155,12)" rx="2" ry="2" />
<text  x="942.66" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="160.7" y="437" width="0.2" height="15.0" fill="rgb(232,212,52)" rx="2" ry="2" />
<text  x="163.71" y="447.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="702.2" y="405" width="0.3" height="15.0" fill="rgb(213,91,14)" rx="2" ry="2" />
<text  x="705.25" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (2 samples, 0.04%)</title><rect x="549.0" y="341" width="0.5" height="15.0" fill="rgb(228,81,36)" rx="2" ry="2" />
<text  x="552.05" y="351.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1146.6" y="421" width="0.3" height="15.0" fill="rgb(211,199,36)" rx="2" ry="2" />
<text  x="1149.65" y="431.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (6 samples, 0.12%)</title><rect x="501.4" y="245" width="1.3" height="15.0" fill="rgb(234,146,31)" rx="2" ry="2" />
<text  x="504.38" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="41.8" y="213" width="0.2" height="15.0" fill="rgb(239,26,2)" rx="2" ry="2" />
<text  x="44.78" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="651.0" y="517" width="0.4" height="15.0" fill="rgb(252,132,15)" rx="2" ry="2" />
<text  x="653.95" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="334.3" y="341" width="0.3" height="15.0" fill="rgb(208,207,37)" rx="2" ry="2" />
<text  x="337.34" y="351.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (2 samples, 0.04%)</title><rect x="111.5" y="373" width="0.4" height="15.0" fill="rgb(230,1,14)" rx="2" ry="2" />
<text  x="114.45" y="383.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="702.0" y="325" width="0.2" height="15.0" fill="rgb(236,131,40)" rx="2" ry="2" />
<text  x="705.02" y="335.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::done (1 samples, 0.02%)</title><rect x="612.1" y="453" width="0.3" height="15.0" fill="rgb(253,143,25)" rx="2" ry="2" />
<text  x="615.14" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt;, true, true&gt;::operator= (1 samples, 0.02%)</title><rect x="67.2" y="389" width="0.2" height="15.0" fill="rgb(239,116,9)" rx="2" ry="2" />
<text  x="70.20" y="399.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (2 samples, 0.04%)</title><rect x="266.9" y="149" width="0.5" height="15.0" fill="rgb(226,180,53)" rx="2" ry="2" />
<text  x="269.93" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="54.9" y="277" width="0.3" height="15.0" fill="rgb(215,49,10)" rx="2" ry="2" />
<text  x="57.94" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="606.5" y="421" width="0.2" height="15.0" fill="rgb(240,63,52)" rx="2" ry="2" />
<text  x="609.47" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="702.0" y="357" width="0.2" height="15.0" fill="rgb(217,78,25)" rx="2" ry="2" />
<text  x="705.02" y="367.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%)</title><rect x="87.8" y="421" width="0.3" height="15.0" fill="rgb(216,227,3)" rx="2" ry="2" />
<text  x="90.85" y="431.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (21 samples, 0.40%)</title><rect x="981.4" y="341" width="4.8" height="15.0" fill="rgb(243,171,12)" rx="2" ry="2" />
<text  x="984.42" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (3 samples, 0.06%)</title><rect x="809.1" y="197" width="0.7" height="15.0" fill="rgb(218,175,16)" rx="2" ry="2" />
<text  x="812.15" y="207.5" ></text>
</g>
<g >
<title>database::find_column_family (6 samples, 0.12%)</title><rect x="774.4" y="405" width="1.4" height="15.0" fill="rgb(222,147,34)" rx="2" ry="2" />
<text  x="777.42" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (6 samples, 0.12%)</title><rect x="865.2" y="501" width="1.4" height="15.0" fill="rgb(228,222,18)" rx="2" ry="2" />
<text  x="868.21" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (3 samples, 0.06%)</title><rect x="569.2" y="453" width="0.7" height="15.0" fill="rgb(227,90,16)" rx="2" ry="2" />
<text  x="572.25" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (11 samples, 0.21%)</title><rect x="1010.5" y="245" width="2.5" height="15.0" fill="rgb(234,145,3)" rx="2" ry="2" />
<text  x="1013.47" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (2 samples, 0.04%)</title><rect x="135.5" y="421" width="0.5" height="15.0" fill="rgb(223,52,45)" rx="2" ry="2" />
<text  x="138.51" y="431.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_psrstate (1 samples, 0.02%)</title><rect x="51.1" y="325" width="0.2" height="15.0" fill="rgb(236,213,23)" rx="2" ry="2" />
<text  x="54.08" y="335.5" ></text>
</g>
<g >
<title>database::has_keyspace (8 samples, 0.15%)</title><rect x="856.8" y="437" width="1.8" height="15.0" fill="rgb(215,2,53)" rx="2" ry="2" />
<text  x="859.81" y="447.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="700.7" y="405" width="0.2" height="15.0" fill="rgb(249,11,13)" rx="2" ry="2" />
<text  x="703.66" y="415.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1130.3" y="405" width="0.2" height="15.0" fill="rgb(245,48,15)" rx="2" ry="2" />
<text  x="1133.31" y="415.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="10.7" y="549" width="0.2" height="15.0" fill="rgb(243,195,4)" rx="2" ry="2" />
<text  x="13.68" y="559.5" ></text>
</g>
<g >
<title>dht::shard_of (1 samples, 0.02%)</title><rect x="993.0" y="325" width="0.2" height="15.0" fill="rgb(245,41,20)" rx="2" ry="2" />
<text  x="995.99" y="335.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::set_latency (1 samples, 0.02%)</title><rect x="1118.3" y="293" width="0.2" height="15.0" fill="rgb(250,109,1)" rx="2" ry="2" />
<text  x="1121.28" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::make_conjunction (1 samples, 0.02%)</title><rect x="76.3" y="341" width="0.2" height="15.0" fill="rgb(248,205,39)" rx="2" ry="2" />
<text  x="79.27" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%)</title><rect x="523.4" y="245" width="0.2" height="15.0" fill="rgb(227,39,1)" rx="2" ry="2" />
<text  x="526.40" y="255.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (1 samples, 0.02%)</title><rect x="1074.2" y="325" width="0.3" height="15.0" fill="rgb(253,174,8)" rx="2" ry="2" />
<text  x="1077.25" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (79 samples, 1.52%)</title><rect x="514.5" y="325" width="18.0" height="15.0" fill="rgb(208,204,41)" rx="2" ry="2" />
<text  x="517.55" y="335.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="480.7" y="357" width="0.7" height="15.0" fill="rgb(252,21,27)" rx="2" ry="2" />
<text  x="483.73" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (3 samples, 0.06%)</title><rect x="1032.0" y="309" width="0.7" height="15.0" fill="rgb(208,225,31)" rx="2" ry="2" />
<text  x="1035.03" y="319.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (121 samples, 2.33%)</title><rect x="1002.8" y="309" width="27.4" height="15.0" fill="rgb(222,145,10)" rx="2" ry="2" />
<text  x="1005.75" y="319.5" >s..</text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%)</title><rect x="1056.1" y="357" width="0.4" height="15.0" fill="rgb(238,32,48)" rx="2" ry="2" />
<text  x="1059.09" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (3 samples, 0.06%)</title><rect x="720.2" y="453" width="0.7" height="15.0" fill="rgb(221,39,29)" rx="2" ry="2" />
<text  x="723.18" y="463.5" ></text>
</g>
<g >
<title>database::find_uuid (16 samples, 0.31%)</title><rect x="837.1" y="389" width="3.6" height="15.0" fill="rgb(211,109,5)" rx="2" ry="2" />
<text  x="840.07" y="399.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="669.3" y="485" width="0.7" height="15.0" fill="rgb(218,191,48)" rx="2" ry="2" />
<text  x="672.34" y="495.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (1 samples, 0.02%)</title><rect x="346.6" y="229" width="0.2" height="15.0" fill="rgb(207,128,17)" rx="2" ry="2" />
<text  x="349.59" y="239.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (3 samples, 0.06%)</title><rect x="930.1" y="421" width="0.7" height="15.0" fill="rgb(235,61,39)" rx="2" ry="2" />
<text  x="933.12" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.12%)</title><rect x="140.3" y="405" width="1.3" height="15.0" fill="rgb(206,200,10)" rx="2" ry="2" />
<text  x="143.28" y="415.5" ></text>
</g>
<g >
<title>ser::after_column__id&lt;bytes_ostream&gt;::after_column__id (1 samples, 0.02%)</title><rect x="1124.2" y="117" width="0.2" height="15.0" fill="rgb(242,27,49)" rx="2" ry="2" />
<text  x="1127.18" y="127.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false, false&gt;::operator= (1 samples, 0.02%)</title><rect x="42.7" y="325" width="0.2" height="15.0" fill="rgb(242,26,25)" rx="2" ry="2" />
<text  x="45.68" y="335.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="550.2" y="325" width="0.2" height="15.0" fill="rgb(252,88,26)" rx="2" ry="2" />
<text  x="553.18" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (5 samples, 0.10%)</title><rect x="86.0" y="469" width="1.2" height="15.0" fill="rgb(234,194,13)" rx="2" ry="2" />
<text  x="89.03" y="479.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (2 samples, 0.04%)</title><rect x="1078.1" y="341" width="0.5" height="15.0" fill="rgb(240,187,10)" rx="2" ry="2" />
<text  x="1081.11" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="42.5" y="357" width="0.2" height="15.0" fill="rgb(234,168,14)" rx="2" ry="2" />
<text  x="45.46" y="367.5" ></text>
</g>
<g >
<title>create_partitions (278 samples, 5.35%)</title><rect x="20.7" y="565" width="63.1" height="15.0" fill="rgb(216,141,10)" rx="2" ry="2" />
<text  x="23.67" y="575.5" >create..</text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="265.6" y="149" width="0.2" height="15.0" fill="rgb(216,179,35)" rx="2" ry="2" />
<text  x="268.56" y="159.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="831.8" y="389" width="0.3" height="15.0" fill="rgb(242,48,12)" rx="2" ry="2" />
<text  x="834.85" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1084.9" y="389" width="0.2" height="15.0" fill="rgb(235,220,46)" rx="2" ry="2" />
<text  x="1087.91" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (1 samples, 0.02%)</title><rect x="1126.7" y="229" width="0.2" height="15.0" fill="rgb(245,117,5)" rx="2" ry="2" />
<text  x="1129.68" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="54.7" y="213" width="0.2" height="15.0" fill="rgb(210,158,27)" rx="2" ry="2" />
<text  x="57.71" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%)</title><rect x="62.2" y="293" width="0.2" height="15.0" fill="rgb(235,187,49)" rx="2" ry="2" />
<text  x="65.20" y="303.5" ></text>
</g>
<g >
<title>fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt;::format&lt;fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (3 samples, 0.06%)</title><rect x="21.1" y="501" width="0.7" height="15.0" fill="rgb(231,6,2)" rx="2" ry="2" />
<text  x="24.12" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (6 samples, 0.12%)</title><rect x="638.0" y="421" width="1.4" height="15.0" fill="rgb(232,178,2)" rx="2" ry="2" />
<text  x="641.02" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1023.0" y="245" width="0.2" height="15.0" fill="rgb(209,175,30)" rx="2" ry="2" />
<text  x="1025.95" y="255.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (1 samples, 0.02%)</title><rect x="462.1" y="373" width="0.2" height="15.0" fill="rgb(211,116,35)" rx="2" ry="2" />
<text  x="465.12" y="383.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%)</title><rect x="700.7" y="341" width="0.2" height="15.0" fill="rgb(233,101,10)" rx="2" ry="2" />
<text  x="703.66" y="351.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1130.1" y="517" width="0.2" height="15.0" fill="rgb(239,101,26)" rx="2" ry="2" />
<text  x="1133.08" y="527.5" ></text>
</g>
<g >
<title>std::apply&lt;seastar::max_concurrent_for_each&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt;, db::system_distributed_keyspace::create_cdc_desc (1 samples, 0.02%)</title><rect x="112.8" y="517" width="0.2" height="15.0" fill="rgb(253,180,40)" rx="2" ry="2" />
<text  x="115.82" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (14 samples, 0.27%)</title><rect x="776.7" y="389" width="3.2" height="15.0" fill="rgb(206,3,31)" rx="2" ry="2" />
<text  x="779.69" y="399.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (13 samples, 0.25%)</title><rect x="428.3" y="277" width="3.0" height="15.0" fill="rgb(210,145,52)" rx="2" ry="2" />
<text  x="431.30" y="287.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%)</title><rect x="702.2" y="277" width="0.3" height="15.0" fill="rgb(211,179,51)" rx="2" ry="2" />
<text  x="705.25" y="287.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%)</title><rect x="734.7" y="453" width="1.6" height="15.0" fill="rgb(243,92,32)" rx="2" ry="2" />
<text  x="737.70" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%)</title><rect x="928.8" y="357" width="0.9" height="15.0" fill="rgb(223,134,24)" rx="2" ry="2" />
<text  x="931.76" y="367.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="53.6" y="229" width="0.4" height="15.0" fill="rgb(222,88,11)" rx="2" ry="2" />
<text  x="56.58" y="239.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%)</title><rect x="82.9" y="517" width="0.2" height="15.0" fill="rgb(220,64,39)" rx="2" ry="2" />
<text  x="85.86" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="904.0" y="389" width="0.7" height="15.0" fill="rgb(207,110,14)" rx="2" ry="2" />
<text  x="907.02" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (3 samples, 0.06%)</title><rect x="39.7" y="389" width="0.7" height="15.0" fill="rgb(237,84,17)" rx="2" ry="2" />
<text  x="42.73" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="869.5" y="389" width="0.5" height="15.0" fill="rgb(220,62,30)" rx="2" ry="2" />
<text  x="872.52" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="45.9" y="293" width="0.6" height="15.0" fill="rgb(254,99,33)" rx="2" ry="2" />
<text  x="48.86" y="303.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="1123.5" y="165" width="0.2" height="15.0" fill="rgb(224,33,54)" rx="2" ry="2" />
<text  x="1126.50" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (1 samples, 0.02%)</title><rect x="20.4" y="357" width="0.3" height="15.0" fill="rgb(237,128,38)" rx="2" ry="2" />
<text  x="23.44" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (2 samples, 0.04%)</title><rect x="1163.0" y="421" width="0.4" height="15.0" fill="rgb(219,12,12)" rx="2" ry="2" />
<text  x="1165.99" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (4 samples, 0.08%)</title><rect x="847.7" y="421" width="0.9" height="15.0" fill="rgb(220,173,53)" rx="2" ry="2" />
<text  x="850.73" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (511 samples, 9.83%)</title><rect x="332.3" y="405" width="116.0" height="15.0" fill="rgb(239,38,34)" rx="2" ry="2" />
<text  x="335.29" y="415.5" >flat_mutation_..</text>
</g>
<g >
<title>ser::get_sizeof&lt;partition_key&gt; (2 samples, 0.04%)</title><rect x="1125.1" y="165" width="0.4" height="15.0" fill="rgb(239,53,27)" rx="2" ry="2" />
<text  x="1128.09" y="175.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (4 samples, 0.08%)</title><rect x="87.2" y="485" width="0.9" height="15.0" fill="rgb(247,211,50)" rx="2" ry="2" />
<text  x="90.17" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="912.2" y="373" width="0.2" height="15.0" fill="rgb(209,137,49)" rx="2" ry="2" />
<text  x="915.19" y="383.5" ></text>
</g>
<g >
<title>database::apply_in_memory (29 samples, 0.56%)</title><rect x="1111.9" y="325" width="6.6" height="15.0" fill="rgb(254,178,40)" rx="2" ry="2" />
<text  x="1114.92" y="335.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="10.7" y="501" width="0.2" height="15.0" fill="rgb(237,76,2)" rx="2" ry="2" />
<text  x="13.68" y="511.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%)</title><rect x="1130.3" y="469" width="0.2" height="15.0" fill="rgb(209,165,48)" rx="2" ry="2" />
<text  x="1133.31" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (2 samples, 0.04%)</title><rect x="86.3" y="325" width="0.4" height="15.0" fill="rgb(220,189,33)" rx="2" ry="2" />
<text  x="89.26" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="57.9" y="133" width="0.2" height="15.0" fill="rgb(230,162,13)" rx="2" ry="2" />
<text  x="60.89" y="143.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="321.9" y="309" width="1.3" height="15.0" fill="rgb(226,70,48)" rx="2" ry="2" />
<text  x="324.85" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="869.5" y="373" width="0.5" height="15.0" fill="rgb(209,214,23)" rx="2" ry="2" />
<text  x="872.52" y="383.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (1 samples, 0.02%)</title><rect x="1105.1" y="453" width="0.2" height="15.0" fill="rgb(208,156,23)" rx="2" ry="2" />
<text  x="1108.11" y="463.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="20.2" y="373" width="0.2" height="15.0" fill="rgb(212,196,46)" rx="2" ry="2" />
<text  x="23.21" y="383.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (54 samples, 1.04%)</title><rect x="754.5" y="421" width="12.2" height="15.0" fill="rgb(207,111,12)" rx="2" ry="2" />
<text  x="757.45" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="62.9" y="293" width="0.2" height="15.0" fill="rgb(223,118,17)" rx="2" ry="2" />
<text  x="65.88" y="303.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%)</title><rect x="814.4" y="149" width="0.4" height="15.0" fill="rgb(240,156,1)" rx="2" ry="2" />
<text  x="817.37" y="159.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="62.4" y="341" width="0.3" height="15.0" fill="rgb(240,151,25)" rx="2" ry="2" />
<text  x="65.43" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%)</title><rect x="761.7" y="309" width="0.5" height="15.0" fill="rgb(249,0,29)" rx="2" ry="2" />
<text  x="764.71" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (6 samples, 0.12%)</title><rect x="631.4" y="469" width="1.4" height="15.0" fill="rgb(247,140,24)" rx="2" ry="2" />
<text  x="634.43" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::reset (1 samples, 0.02%)</title><rect x="618.3" y="421" width="0.2" height="15.0" fill="rgb(253,193,16)" rx="2" ry="2" />
<text  x="621.27" y="431.5" ></text>
</g>
<g >
<title>backlog_controller::adjust (1 samples, 0.02%)</title><rect x="1165.3" y="469" width="0.2" height="15.0" fill="rgb(215,14,45)" rx="2" ry="2" />
<text  x="1168.26" y="479.5" ></text>
</g>
<g >
<title>service::storage_service::init_server (1 samples, 0.02%)</title><rect x="11.1" y="533" width="0.3" height="15.0" fill="rgb(246,168,45)" rx="2" ry="2" />
<text  x="14.13" y="543.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%)</title><rect x="113.3" y="405" width="0.2" height="15.0" fill="rgb(247,160,46)" rx="2" ry="2" />
<text  x="116.27" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (10 samples, 0.19%)</title><rect x="872.9" y="421" width="2.3" height="15.0" fill="rgb(226,52,17)" rx="2" ry="2" />
<text  x="875.93" y="431.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (206 samples, 3.96%)</title><rect x="22.5" y="501" width="46.7" height="15.0" fill="rgb(208,166,13)" rx="2" ry="2" />
<text  x="25.48" y="511.5" >cql3..</text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (3 samples, 0.06%)</title><rect x="55.4" y="309" width="0.7" height="15.0" fill="rgb(246,102,39)" rx="2" ry="2" />
<text  x="58.39" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="825.3" y="309" width="0.2" height="15.0" fill="rgb(234,177,53)" rx="2" ry="2" />
<text  x="828.26" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="707.7" y="485" width="0.2" height="15.0" fill="rgb(253,92,28)" rx="2" ry="2" />
<text  x="710.70" y="495.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (6 samples, 0.12%)</title><rect x="266.0" y="165" width="1.4" height="15.0" fill="rgb(213,117,29)" rx="2" ry="2" />
<text  x="269.02" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%)</title><rect x="569.0" y="453" width="0.2" height="15.0" fill="rgb(207,35,32)" rx="2" ry="2" />
<text  x="572.02" y="463.5" ></text>
</g>
<g >
<title>seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;::check (1 samples, 0.02%)</title><rect x="846.4" y="469" width="0.2" height="15.0" fill="rgb(251,36,12)" rx="2" ry="2" />
<text  x="849.37" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%)</title><rect x="697.7" y="501" width="0.5" height="15.0" fill="rgb(254,53,44)" rx="2" ry="2" />
<text  x="700.71" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%)</title><rect x="45.6" y="229" width="0.3" height="15.0" fill="rgb(247,93,44)" rx="2" ry="2" />
<text  x="48.63" y="239.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (16 samples, 0.31%)</title><rect x="1123.5" y="309" width="3.6" height="15.0" fill="rgb(226,119,3)" rx="2" ry="2" />
<text  x="1126.50" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (4 samples, 0.08%)</title><rect x="813.9" y="165" width="0.9" height="15.0" fill="rgb(243,76,32)" rx="2" ry="2" />
<text  x="816.92" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="734.7" y="437" width="1.6" height="15.0" fill="rgb(208,45,53)" rx="2" ry="2" />
<text  x="737.70" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (3 samples, 0.06%)</title><rect x="1135.1" y="517" width="0.7" height="15.0" fill="rgb(206,188,44)" rx="2" ry="2" />
<text  x="1138.07" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="86.5" y="229" width="0.2" height="15.0" fill="rgb(233,207,53)" rx="2" ry="2" />
<text  x="89.49" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::semaphore_units&lt;db::commitlog::segment_manager::request_controller_timeout_exception_factory, seastar::lowres_clock&gt; &gt;::awaiter (1 samples, 0.02%)</title><rect x="1120.1" y="309" width="0.2" height="15.0" fill="rgb(213,16,33)" rx="2" ry="2" />
<text  x="1123.09" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (1 samples, 0.02%)</title><rect x="1146.4" y="421" width="0.2" height="15.0" fill="rgb(209,17,9)" rx="2" ry="2" />
<text  x="1149.42" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="700.7" y="389" width="0.2" height="15.0" fill="rgb(210,79,32)" rx="2" ry="2" />
<text  x="703.66" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="47.7" y="309" width="0.2" height="15.0" fill="rgb(224,185,35)" rx="2" ry="2" />
<text  x="50.68" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%)</title><rect x="78.3" y="373" width="0.2" height="15.0" fill="rgb(216,149,53)" rx="2" ry="2" />
<text  x="81.32" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (1 samples, 0.02%)</title><rect x="639.8" y="469" width="0.3" height="15.0" fill="rgb(213,111,9)" rx="2" ry="2" />
<text  x="642.83" y="479.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%)</title><rect x="1018.9" y="181" width="0.2" height="15.0" fill="rgb(206,144,44)" rx="2" ry="2" />
<text  x="1021.87" y="191.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (26 samples, 0.50%)</title><rect x="704.7" y="517" width="5.9" height="15.0" fill="rgb(242,168,50)" rx="2" ry="2" />
<text  x="707.75" y="527.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%)</title><rect x="944.2" y="373" width="0.2" height="15.0" fill="rgb(226,144,28)" rx="2" ry="2" />
<text  x="947.20" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="977.3" y="293" width="0.7" height="15.0" fill="rgb(233,43,49)" rx="2" ry="2" />
<text  x="980.33" y="303.5" ></text>
</g>
<g >
<title>ser::deletable_row__shadowable_deleted_at&lt;bytes_ostream&gt;::deletable_row__shadowable_deleted_at (1 samples, 0.02%)</title><rect x="1124.4" y="165" width="0.2" height="15.0" fill="rgb(217,0,17)" rx="2" ry="2" />
<text  x="1127.41" y="175.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;::pair&lt;char const  (1 samples, 0.02%)</title><rect x="1123.0" y="261" width="0.3" height="15.0" fill="rgb(249,10,29)" rx="2" ry="2" />
<text  x="1126.04" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%)</title><rect x="479.4" y="341" width="0.4" height="15.0" fill="rgb(206,10,24)" rx="2" ry="2" />
<text  x="482.37" y="351.5" ></text>
</g>
<g >
<title>db::commitlog::segment::allocate (5 samples, 0.10%)</title><rect x="1119.0" y="309" width="1.1" height="15.0" fill="rgb(225,33,27)" rx="2" ry="2" />
<text  x="1121.96" y="319.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (2 samples, 0.04%)</title><rect x="614.4" y="437" width="0.5" height="15.0" fill="rgb(210,122,50)" rx="2" ry="2" />
<text  x="617.41" y="447.5" ></text>
</g>
<g >
<title>compound_type&lt; (11 samples, 0.21%)</title><rect x="912.4" y="389" width="2.5" height="15.0" fill="rgb(207,156,47)" rx="2" ry="2" />
<text  x="915.42" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier_raw, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (2 samples, 0.04%)</title><rect x="46.8" y="341" width="0.4" height="15.0" fill="rgb(218,221,37)" rx="2" ry="2" />
<text  x="49.77" y="351.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (3 samples, 0.06%)</title><rect x="1047.7" y="373" width="0.7" height="15.0" fill="rgb(248,198,11)" rx="2" ry="2" />
<text  x="1050.69" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (6 samples, 0.12%)</title><rect x="133.5" y="437" width="1.3" height="15.0" fill="rgb(240,92,31)" rx="2" ry="2" />
<text  x="136.47" y="447.5" ></text>
</g>
<g >
<title>db::get_cdc_generation_mutations (1 samples, 0.02%)</title><rect x="20.2" y="453" width="0.2" height="15.0" fill="rgb(215,103,14)" rx="2" ry="2" />
<text  x="23.21" y="463.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%)</title><rect x="494.1" y="309" width="0.2" height="15.0" fill="rgb(209,198,38)" rx="2" ry="2" />
<text  x="497.12" y="319.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="914.7" y="373" width="0.2" height="15.0" fill="rgb(243,195,16)" rx="2" ry="2" />
<text  x="917.69" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="64.5" y="341" width="0.2" height="15.0" fill="rgb(227,16,23)" rx="2" ry="2" />
<text  x="67.47" y="351.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (4 samples, 0.08%)</title><rect x="243.5" y="85" width="1.0" height="15.0" fill="rgb(253,53,36)" rx="2" ry="2" />
<text  x="246.55" y="95.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (1 samples, 0.02%)</title><rect x="268.1" y="181" width="0.2" height="15.0" fill="rgb(228,158,22)" rx="2" ry="2" />
<text  x="271.06" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (8 samples, 0.15%)</title><rect x="437.6" y="245" width="1.8" height="15.0" fill="rgb(222,43,46)" rx="2" ry="2" />
<text  x="440.61" y="255.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (4 samples, 0.08%)</title><rect x="1165.0" y="501" width="0.9" height="15.0" fill="rgb(236,177,37)" rx="2" ry="2" />
<text  x="1168.03" y="511.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (56 samples, 1.08%)</title><rect x="894.7" y="405" width="12.7" height="15.0" fill="rgb(227,123,32)" rx="2" ry="2" />
<text  x="897.72" y="415.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (14 samples, 0.27%)</title><rect x="763.5" y="341" width="3.2" height="15.0" fill="rgb(248,44,48)" rx="2" ry="2" />
<text  x="766.53" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="20.2" y="277" width="0.2" height="15.0" fill="rgb(214,191,32)" rx="2" ry="2" />
<text  x="23.21" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (5 samples, 0.10%)</title><rect x="86.0" y="421" width="1.2" height="15.0" fill="rgb(233,104,20)" rx="2" ry="2" />
<text  x="89.03" y="431.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::get_all_endpoints (1 samples, 0.02%)</title><rect x="20.4" y="405" width="0.3" height="15.0" fill="rgb(220,193,21)" rx="2" ry="2" />
<text  x="23.44" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="797.3" y="293" width="2.1" height="15.0" fill="rgb(236,153,38)" rx="2" ry="2" />
<text  x="800.35" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="1031.8" y="309" width="0.2" height="15.0" fill="rgb(249,128,48)" rx="2" ry="2" />
<text  x="1034.80" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="866.1" y="453" width="0.2" height="15.0" fill="rgb(218,89,25)" rx="2" ry="2" />
<text  x="869.12" y="463.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (4 samples, 0.08%)</title><rect x="589.0" y="341" width="0.9" height="15.0" fill="rgb(206,73,31)" rx="2" ry="2" />
<text  x="591.99" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="700.0" y="517" width="0.2" height="15.0" fill="rgb(234,146,32)" rx="2" ry="2" />
<text  x="702.98" y="527.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (1 samples, 0.02%)</title><rect x="350.9" y="197" width="0.2" height="15.0" fill="rgb(208,180,12)" rx="2" ry="2" />
<text  x="353.90" y="207.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (85 samples, 1.63%)</title><rect x="572.4" y="421" width="19.3" height="15.0" fill="rgb(224,193,40)" rx="2" ry="2" />
<text  x="575.42" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%)</title><rect x="47.9" y="293" width="0.5" height="15.0" fill="rgb(224,6,40)" rx="2" ry="2" />
<text  x="50.90" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (11 samples, 0.21%)</title><rect x="596.7" y="389" width="2.5" height="15.0" fill="rgb(239,73,4)" rx="2" ry="2" />
<text  x="599.71" y="399.5" ></text>
</g>
<g >
<title>cql3::attributes::get_timestamp (1 samples, 0.02%)</title><rect x="872.5" y="421" width="0.2" height="15.0" fill="rgb(213,222,42)" rx="2" ry="2" />
<text  x="875.47" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (8 samples, 0.15%)</title><rect x="202.9" y="293" width="1.8" height="15.0" fill="rgb(226,217,52)" rx="2" ry="2" />
<text  x="205.92" y="303.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="447.8" y="389" width="0.2" height="15.0" fill="rgb(234,73,14)" rx="2" ry="2" />
<text  x="450.82" y="399.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.06%)</title><rect x="889.5" y="453" width="0.7" height="15.0" fill="rgb(224,76,11)" rx="2" ry="2" />
<text  x="892.50" y="463.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="138.2" y="437" width="0.3" height="15.0" fill="rgb(241,91,54)" rx="2" ry="2" />
<text  x="141.24" y="447.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="801.0" y="277" width="1.3" height="15.0" fill="rgb(229,215,51)" rx="2" ry="2" />
<text  x="803.98" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (10 samples, 0.19%)</title><rect x="805.7" y="245" width="2.3" height="15.0" fill="rgb(231,65,32)" rx="2" ry="2" />
<text  x="808.75" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (2 samples, 0.04%)</title><rect x="623.7" y="469" width="0.5" height="15.0" fill="rgb(248,10,42)" rx="2" ry="2" />
<text  x="626.72" y="479.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;cql3::statements::list_service_level_statement&gt;, true&gt;::_Head_base (1 samples, 0.02%)</title><rect x="66.7" y="325" width="0.3" height="15.0" fill="rgb(244,30,25)" rx="2" ry="2" />
<text  x="69.74" y="335.5" ></text>
</g>
<g >
<title>query_result_builder::consume (210 samples, 4.04%)</title><rect x="355.7" y="245" width="47.6" height="15.0" fill="rgb(240,196,42)" rx="2" ry="2" />
<text  x="358.67" y="255.5" >quer..</text>
</g>
<g >
<title>range_tombstone_list::slice (9 samples, 0.17%)</title><rect x="285.5" y="245" width="2.1" height="15.0" fill="rgb(231,140,39)" rx="2" ry="2" />
<text  x="288.54" y="255.5" ></text>
</g>
<g >
<title>service::write_response_handler::~write_response_handler (1 samples, 0.02%)</title><rect x="702.9" y="517" width="0.3" height="15.0" fill="rgb(228,217,2)" rx="2" ry="2" />
<text  x="705.93" y="527.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%)</title><rect x="52.4" y="213" width="0.3" height="15.0" fill="rgb(242,157,2)" rx="2" ry="2" />
<text  x="55.44" y="223.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::intrusive_array&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, dht::decorated_key, mutation_partition&gt; (1 samples, 0.02%)</title><rect x="1113.5" y="197" width="0.2" height="15.0" fill="rgb(254,105,36)" rx="2" ry="2" />
<text  x="1116.51" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (2 samples, 0.04%)</title><rect x="825.5" y="309" width="0.4" height="15.0" fill="rgb(218,176,16)" rx="2" ry="2" />
<text  x="828.49" y="319.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%)</title><rect x="470.3" y="277" width="1.1" height="15.0" fill="rgb(250,49,12)" rx="2" ry="2" />
<text  x="473.29" y="287.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (477 samples, 9.17%)</title><rect x="452.4" y="453" width="108.2" height="15.0" fill="rgb(237,35,45)" rx="2" ry="2" />
<text  x="455.36" y="463.5" >query::querie..</text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (32 samples, 0.62%)</title><rect x="1061.1" y="277" width="7.2" height="15.0" fill="rgb(232,118,9)" rx="2" ry="2" />
<text  x="1064.08" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_assign_base (1 samples, 0.02%)</title><rect x="62.7" y="229" width="0.2" height="15.0" fill="rgb(240,22,41)" rx="2" ry="2" />
<text  x="65.66" y="239.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (2 samples, 0.04%)</title><rect x="225.2" y="165" width="0.4" height="15.0" fill="rgb(243,100,26)" rx="2" ry="2" />
<text  x="228.16" y="175.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="24.3" y="357" width="0.2" height="15.0" fill="rgb(234,101,6)" rx="2" ry="2" />
<text  x="27.30" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="57.4" y="229" width="0.3" height="15.0" fill="rgb(251,115,14)" rx="2" ry="2" />
<text  x="60.44" y="239.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (3 samples, 0.06%)</title><rect x="1113.5" y="277" width="0.7" height="15.0" fill="rgb(237,66,35)" rx="2" ry="2" />
<text  x="1116.51" y="287.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (1 samples, 0.02%)</title><rect x="331.2" y="405" width="0.2" height="15.0" fill="rgb(217,169,49)" rx="2" ry="2" />
<text  x="334.16" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="107.1" y="501" width="0.3" height="15.0" fill="rgb(224,8,3)" rx="2" ry="2" />
<text  x="110.14" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (96 samples, 1.85%)</title><rect x="1057.2" y="373" width="21.8" height="15.0" fill="rgb(251,117,18)" rx="2" ry="2" />
<text  x="1060.22" y="383.5" >s..</text>
</g>
<g >
<title>sstring_hash::operator (5 samples, 0.10%)</title><rect x="1045.4" y="325" width="1.2" height="15.0" fill="rgb(216,109,19)" rx="2" ry="2" />
<text  x="1048.42" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="72.4" y="405" width="0.2" height="15.0" fill="rgb(240,212,3)" rx="2" ry="2" />
<text  x="75.42" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (6 samples, 0.12%)</title><rect x="818.2" y="261" width="1.4" height="15.0" fill="rgb(222,112,20)" rx="2" ry="2" />
<text  x="821.23" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%)</title><rect x="262.2" y="197" width="0.2" height="15.0" fill="rgb(226,111,42)" rx="2" ry="2" />
<text  x="265.16" y="207.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%)</title><rect x="11.1" y="549" width="0.3" height="15.0" fill="rgb(210,54,10)" rx="2" ry="2" />
<text  x="14.13" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%)</title><rect x="1163.2" y="389" width="0.2" height="15.0" fill="rgb(239,25,2)" rx="2" ry="2" />
<text  x="1166.22" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="66.5" y="389" width="0.2" height="15.0" fill="rgb(209,60,24)" rx="2" ry="2" />
<text  x="69.51" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="726.5" y="517" width="0.3" height="15.0" fill="rgb(212,202,16)" rx="2" ry="2" />
<text  x="729.53" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%)</title><rect x="45.9" y="229" width="0.6" height="15.0" fill="rgb(227,147,33)" rx="2" ry="2" />
<text  x="48.86" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (20 samples, 0.38%)</title><rect x="433.1" y="245" width="4.5" height="15.0" fill="rgb(251,87,15)" rx="2" ry="2" />
<text  x="436.07" y="255.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="660.7" y="517" width="0.2" height="15.0" fill="rgb(227,143,24)" rx="2" ry="2" />
<text  x="663.71" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (1 samples, 0.02%)</title><rect x="553.8" y="293" width="0.2" height="15.0" fill="rgb(226,105,25)" rx="2" ry="2" />
<text  x="556.81" y="303.5" ></text>
</g>
<g >
<title>rows_entry::rows_entry (1 samples, 0.02%)</title><rect x="112.8" y="293" width="0.2" height="15.0" fill="rgb(209,229,36)" rx="2" ry="2" />
<text  x="115.82" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (20 samples, 0.38%)</title><rect x="1158.0" y="517" width="4.5" height="15.0" fill="rgb(221,182,51)" rx="2" ry="2" />
<text  x="1161.00" y="527.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2 samples, 0.04%)</title><rect x="777.1" y="325" width="0.5" height="15.0" fill="rgb(247,212,21)" rx="2" ry="2" />
<text  x="780.15" y="335.5" ></text>
</g>
<g >
<title>init_cpu_features.constprop.0 (1 samples, 0.02%)</title><rect x="85.4" y="645" width="0.2" height="15.0" fill="rgb(205,59,14)" rx="2" ry="2" />
<text  x="88.35" y="655.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%)</title><rect x="700.7" y="501" width="0.2" height="15.0" fill="rgb(247,30,45)" rx="2" ry="2" />
<text  x="703.66" y="511.5" ></text>
</g>
<g >
<title>database::find_schema (7 samples, 0.13%)</title><rect x="774.2" y="421" width="1.6" height="15.0" fill="rgb(251,133,36)" rx="2" ry="2" />
<text  x="777.20" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (9 samples, 0.17%)</title><rect x="429.0" y="245" width="2.0" height="15.0" fill="rgb(253,110,42)" rx="2" ry="2" />
<text  x="431.98" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::pop_back (1 samples, 0.02%)</title><rect x="50.9" y="309" width="0.2" height="15.0" fill="rgb(224,202,26)" rx="2" ry="2" />
<text  x="53.85" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="49.9" y="277" width="0.7" height="15.0" fill="rgb(236,28,41)" rx="2" ry="2" />
<text  x="52.95" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="1083.3" y="405" width="0.3" height="15.0" fill="rgb(225,147,47)" rx="2" ry="2" />
<text  x="1086.33" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (12 samples, 0.23%)</title><rect x="975.5" y="373" width="2.7" height="15.0" fill="rgb(244,183,5)" rx="2" ry="2" />
<text  x="978.52" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="48.6" y="309" width="0.7" height="15.0" fill="rgb(210,141,47)" rx="2" ry="2" />
<text  x="51.58" y="319.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (7 samples, 0.13%)</title><rect x="140.1" y="421" width="1.5" height="15.0" fill="rgb(216,199,17)" rx="2" ry="2" />
<text  x="143.05" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (31 samples, 0.60%)</title><rect x="1120.8" y="405" width="7.0" height="15.0" fill="rgb(244,68,49)" rx="2" ry="2" />
<text  x="1123.78" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="699.1" y="485" width="0.2" height="15.0" fill="rgb(250,136,14)" rx="2" ry="2" />
<text  x="702.07" y="495.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%)</title><rect x="893.1" y="421" width="0.3" height="15.0" fill="rgb(209,183,32)" rx="2" ry="2" />
<text  x="896.13" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl_nrvo&lt;flat_mutation_reader::peek (1 samples, 0.02%)</title><rect x="327.3" y="405" width="0.2" height="15.0" fill="rgb(251,163,37)" rx="2" ry="2" />
<text  x="330.30" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (2 samples, 0.04%)</title><rect x="86.3" y="277" width="0.4" height="15.0" fill="rgb(227,103,13)" rx="2" ry="2" />
<text  x="89.26" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="902.0" y="341" width="0.2" height="15.0" fill="rgb(249,34,46)" rx="2" ry="2" />
<text  x="904.98" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="440.3" y="261" width="0.3" height="15.0" fill="rgb(245,128,8)" rx="2" ry="2" />
<text  x="443.33" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="20.0" y="517" width="0.2" height="15.0" fill="rgb(235,154,41)" rx="2" ry="2" />
<text  x="22.99" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (3 samples, 0.06%)</title><rect x="811.2" y="165" width="0.7" height="15.0" fill="rgb(246,135,28)" rx="2" ry="2" />
<text  x="814.19" y="175.5" ></text>
</g>
<g >
<title>dht::minimum_token (1 samples, 0.02%)</title><rect x="464.4" y="357" width="0.2" height="15.0" fill="rgb(231,56,30)" rx="2" ry="2" />
<text  x="467.39" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="870.0" y="405" width="0.2" height="15.0" fill="rgb(232,65,47)" rx="2" ry="2" />
<text  x="872.98" y="415.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (36 samples, 0.69%)</title><rect x="499.8" y="261" width="8.2" height="15.0" fill="rgb(246,170,23)" rx="2" ry="2" />
<text  x="502.79" y="271.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="601.0" y="405" width="0.2" height="15.0" fill="rgb(207,132,0)" rx="2" ry="2" />
<text  x="604.02" y="415.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::stop (1 samples, 0.02%)</title><rect x="703.2" y="421" width="0.2" height="15.0" fill="rgb(223,133,39)" rx="2" ry="2" />
<text  x="706.16" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="591.0" y="357" width="0.3" height="15.0" fill="rgb(243,202,45)" rx="2" ry="2" />
<text  x="594.03" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate (4 samples, 0.08%)</title><rect x="871.6" y="405" width="0.9" height="15.0" fill="rgb(220,66,22)" rx="2" ry="2" />
<text  x="874.57" y="415.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;boost::range::joined_range&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt;, std::_Bind&lt;bool  (1 samples, 0.02%)</title><rect x="1126.4" y="213" width="0.3" height="15.0" fill="rgb(224,194,38)" rx="2" ry="2" />
<text  x="1129.45" y="223.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%)</title><rect x="764.4" y="293" width="0.5" height="15.0" fill="rgb(242,168,7)" rx="2" ry="2" />
<text  x="767.44" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="39.7" y="357" width="0.7" height="15.0" fill="rgb(236,148,53)" rx="2" ry="2" />
<text  x="42.73" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;do_io_check&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%)</title><rect x="702.5" y="533" width="0.4" height="15.0" fill="rgb(238,147,47)" rx="2" ry="2" />
<text  x="705.48" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%)</title><rect x="844.3" y="437" width="0.3" height="15.0" fill="rgb(213,37,39)" rx="2" ry="2" />
<text  x="847.33" y="447.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (4 samples, 0.08%)</title><rect x="524.1" y="229" width="0.9" height="15.0" fill="rgb(245,191,40)" rx="2" ry="2" />
<text  x="527.08" y="239.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%)</title><rect x="877.5" y="309" width="0.2" height="15.0" fill="rgb(211,200,21)" rx="2" ry="2" />
<text  x="880.47" y="319.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare_internal (1 samples, 0.02%)</title><rect x="700.9" y="485" width="0.2" height="15.0" fill="rgb(217,35,2)" rx="2" ry="2" />
<text  x="703.89" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (2 samples, 0.04%)</title><rect x="934.7" y="437" width="0.4" height="15.0" fill="rgb(212,66,7)" rx="2" ry="2" />
<text  x="937.66" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (4 samples, 0.08%)</title><rect x="836.2" y="325" width="0.9" height="15.0" fill="rgb(245,196,29)" rx="2" ry="2" />
<text  x="839.16" y="335.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (10 samples, 0.19%)</title><rect x="734.3" y="469" width="2.2" height="15.0" fill="rgb(233,94,16)" rx="2" ry="2" />
<text  x="737.25" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="629.2" y="453" width="0.2" height="15.0" fill="rgb(211,23,20)" rx="2" ry="2" />
<text  x="632.17" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::take (1 samples, 0.02%)</title><rect x="1137.6" y="501" width="0.2" height="15.0" fill="rgb(235,158,36)" rx="2" ry="2" />
<text  x="1140.57" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (1 samples, 0.02%)</title><rect x="19.8" y="533" width="0.2" height="15.0" fill="rgb(244,182,2)" rx="2" ry="2" />
<text  x="22.76" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_cql (1 samples, 0.02%)</title><rect x="82.2" y="533" width="0.2" height="15.0" fill="rgb(211,86,39)" rx="2" ry="2" />
<text  x="85.18" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="470.5" y="261" width="0.9" height="15.0" fill="rgb(219,216,46)" rx="2" ry="2" />
<text  x="473.52" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (1 samples, 0.02%)</title><rect x="160.9" y="437" width="0.3" height="15.0" fill="rgb(244,125,42)" rx="2" ry="2" />
<text  x="163.93" y="447.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (2 samples, 0.04%)</title><rect x="271.7" y="213" width="0.4" height="15.0" fill="rgb(240,92,16)" rx="2" ry="2" />
<text  x="274.69" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (61 samples, 1.17%)</title><rect x="25.4" y="357" width="13.9" height="15.0" fill="rgb(248,116,26)" rx="2" ry="2" />
<text  x="28.43" y="367.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%)</title><rect x="212.9" y="245" width="0.5" height="15.0" fill="rgb(210,47,42)" rx="2" ry="2" />
<text  x="215.91" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="80.1" y="421" width="0.5" height="15.0" fill="rgb(240,30,25)" rx="2" ry="2" />
<text  x="83.13" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="20.0" y="373" width="0.2" height="15.0" fill="rgb(242,114,21)" rx="2" ry="2" />
<text  x="22.99" y="383.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%)</title><rect x="112.8" y="405" width="0.2" height="15.0" fill="rgb(212,25,27)" rx="2" ry="2" />
<text  x="115.82" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%)</title><rect x="56.5" y="293" width="0.3" height="15.0" fill="rgb(225,175,20)" rx="2" ry="2" />
<text  x="59.53" y="303.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (3 samples, 0.06%)</title><rect x="113.3" y="485" width="0.7" height="15.0" fill="rgb(211,61,17)" rx="2" ry="2" />
<text  x="116.27" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::finally_body&lt;table::stop (1 samples, 0.02%)</title><rect x="702.2" y="517" width="0.3" height="15.0" fill="rgb(254,151,4)" rx="2" ry="2" />
<text  x="705.25" y="527.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="20.0" y="565" width="0.2" height="15.0" fill="rgb(211,32,47)" rx="2" ry="2" />
<text  x="22.99" y="575.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="54.5" y="181" width="0.2" height="15.0" fill="rgb(233,225,0)" rx="2" ry="2" />
<text  x="57.49" y="191.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="49.9" y="261" width="0.7" height="15.0" fill="rgb(250,137,47)" rx="2" ry="2" />
<text  x="52.95" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="904.7" y="389" width="0.5" height="15.0" fill="rgb(245,63,37)" rx="2" ry="2" />
<text  x="907.70" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::unthrottle (1 samples, 0.02%)</title><rect x="702.9" y="501" width="0.3" height="15.0" fill="rgb(249,193,40)" rx="2" ry="2" />
<text  x="705.93" y="511.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (4,748 samples, 91.33%)</title><rect x="88.5" y="597" width="1077.7" height="15.0" fill="rgb(209,64,16)" rx="2" ry="2" />
<text  x="91.53" y="607.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>list_reader_selector::create_new_readers (2 samples, 0.04%)</title><rect x="468.0" y="309" width="0.5" height="15.0" fill="rgb(236,170,17)" rx="2" ry="2" />
<text  x="471.02" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="598.8" y="357" width="0.4" height="15.0" fill="rgb(211,152,53)" rx="2" ry="2" />
<text  x="601.75" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (2 samples, 0.04%)</title><rect x="122.6" y="501" width="0.4" height="15.0" fill="rgb(238,24,6)" rx="2" ry="2" />
<text  x="125.58" y="511.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (2 samples, 0.04%)</title><rect x="620.8" y="453" width="0.4" height="15.0" fill="rgb(231,19,20)" rx="2" ry="2" />
<text  x="623.77" y="463.5" ></text>
</g>
<g >
<title>query::digester::digester (2 samples, 0.04%)</title><rect x="614.9" y="437" width="0.4" height="15.0" fill="rgb(224,204,47)" rx="2" ry="2" />
<text  x="617.87" y="447.5" ></text>
</g>
<g >
<title>seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;::check (1 samples, 0.02%)</title><rect x="843.4" y="453" width="0.2" height="15.0" fill="rgb(245,123,30)" rx="2" ry="2" />
<text  x="846.42" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (9 samples, 0.17%)</title><rect x="668.9" y="501" width="2.0" height="15.0" fill="rgb(211,67,27)" rx="2" ry="2" />
<text  x="671.88" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="1006.6" y="245" width="0.2" height="15.0" fill="rgb(243,22,35)" rx="2" ry="2" />
<text  x="1009.61" y="255.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (557 samples, 10.71%)</title><rect x="180.7" y="373" width="126.4" height="15.0" fill="rgb(216,24,1)" rx="2" ry="2" />
<text  x="183.68" y="383.5" >mutation_fragme..</text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="426.5" y="245" width="0.2" height="15.0" fill="rgb(247,64,19)" rx="2" ry="2" />
<text  x="429.48" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.13%)</title><rect x="913.1" y="373" width="1.6" height="15.0" fill="rgb(216,228,36)" rx="2" ry="2" />
<text  x="916.10" y="383.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="875.0" y="373" width="0.2" height="15.0" fill="rgb(253,183,12)" rx="2" ry="2" />
<text  x="877.97" y="383.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%)</title><rect x="59.9" y="293" width="0.3" height="15.0" fill="rgb(242,69,54)" rx="2" ry="2" />
<text  x="62.93" y="303.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%)</title><rect x="526.1" y="245" width="0.2" height="15.0" fill="rgb(245,18,22)" rx="2" ry="2" />
<text  x="529.12" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="526.3" y="245" width="0.3" height="15.0" fill="rgb(224,104,34)" rx="2" ry="2" />
<text  x="529.35" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (10 samples, 0.19%)</title><rect x="192.3" y="293" width="2.2" height="15.0" fill="rgb(232,164,13)" rx="2" ry="2" />
<text  x="195.25" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (39 samples, 0.75%)</title><rect x="1111.7" y="421" width="8.8" height="15.0" fill="rgb(224,194,14)" rx="2" ry="2" />
<text  x="1114.70" y="431.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (8 samples, 0.15%)</title><rect x="45.0" y="357" width="1.8" height="15.0" fill="rgb(208,171,8)" rx="2" ry="2" />
<text  x="47.95" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (2 samples, 0.04%)</title><rect x="866.1" y="469" width="0.5" height="15.0" fill="rgb(224,125,39)" rx="2" ry="2" />
<text  x="869.12" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (4 samples, 0.08%)</title><rect x="784.0" y="373" width="0.9" height="15.0" fill="rgb(242,107,47)" rx="2" ry="2" />
<text  x="786.96" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="644.1" y="421" width="0.3" height="15.0" fill="rgb(207,174,40)" rx="2" ry="2" />
<text  x="647.15" y="431.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (5 samples, 0.10%)</title><rect x="808.7" y="213" width="1.1" height="15.0" fill="rgb(211,23,33)" rx="2" ry="2" />
<text  x="811.70" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%)</title><rect x="674.8" y="517" width="0.2" height="15.0" fill="rgb(220,193,15)" rx="2" ry="2" />
<text  x="677.79" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%)</title><rect x="442.8" y="309" width="0.3" height="15.0" fill="rgb(215,210,42)" rx="2" ry="2" />
<text  x="445.83" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::resize (1 samples, 0.02%)</title><rect x="1165.9" y="549" width="0.3" height="15.0" fill="rgb(250,34,46)" rx="2" ry="2" />
<text  x="1168.94" y="559.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (1 samples, 0.02%)</title><rect x="83.8" y="645" width="0.2" height="15.0" fill="rgb(228,140,36)" rx="2" ry="2" />
<text  x="86.76" y="655.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (1 samples, 0.02%)</title><rect x="818.0" y="293" width="0.2" height="15.0" fill="rgb(249,14,53)" rx="2" ry="2" />
<text  x="821.00" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="40.9" y="229" width="0.2" height="15.0" fill="rgb(221,113,38)" rx="2" ry="2" />
<text  x="43.87" y="239.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="1134.8" y="517" width="0.3" height="15.0" fill="rgb(212,72,49)" rx="2" ry="2" />
<text  x="1137.85" y="527.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (4 samples, 0.08%)</title><rect x="628.9" y="469" width="0.9" height="15.0" fill="rgb(229,81,24)" rx="2" ry="2" />
<text  x="631.94" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.12%)</title><rect x="27.2" y="293" width="1.4" height="15.0" fill="rgb(208,171,29)" rx="2" ry="2" />
<text  x="30.25" y="303.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%)</title><rect x="44.0" y="373" width="0.3" height="15.0" fill="rgb(221,155,23)" rx="2" ry="2" />
<text  x="47.05" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%)</title><rect x="822.3" y="325" width="1.1" height="15.0" fill="rgb(213,212,5)" rx="2" ry="2" />
<text  x="825.31" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (47 samples, 0.90%)</title><rect x="280.5" y="293" width="10.7" height="15.0" fill="rgb(235,136,19)" rx="2" ry="2" />
<text  x="283.54" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%)</title><rect x="838.9" y="341" width="0.2" height="15.0" fill="rgb(209,10,24)" rx="2" ry="2" />
<text  x="841.88" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="521.4" y="213" width="1.1" height="15.0" fill="rgb(252,87,37)" rx="2" ry="2" />
<text  x="524.36" y="223.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (4 samples, 0.08%)</title><rect x="40.4" y="341" width="0.9" height="15.0" fill="rgb(221,44,13)" rx="2" ry="2" />
<text  x="43.41" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (6 samples, 0.12%)</title><rect x="774.4" y="389" width="1.4" height="15.0" fill="rgb(231,29,3)" rx="2" ry="2" />
<text  x="777.42" y="399.5" ></text>
</g>
<g >
<title>row::compact_and_expire (76 samples, 1.46%)</title><rect x="408.6" y="245" width="17.2" height="15.0" fill="rgb(246,60,5)" rx="2" ry="2" />
<text  x="411.55" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (3 samples, 0.06%)</title><rect x="1137.1" y="517" width="0.7" height="15.0" fill="rgb(242,196,7)" rx="2" ry="2" />
<text  x="1140.12" y="527.5" ></text>
</g>
<g >
<title>cql3::cf_name::operator= (1 samples, 0.02%)</title><rect x="42.7" y="373" width="0.2" height="15.0" fill="rgb(226,95,21)" rx="2" ry="2" />
<text  x="45.68" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%)</title><rect x="138.0" y="405" width="0.2" height="15.0" fill="rgb(210,209,24)" rx="2" ry="2" />
<text  x="141.01" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="942.6" y="437" width="0.2" height="15.0" fill="rgb(235,149,12)" rx="2" ry="2" />
<text  x="945.61" y="447.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (2 samples, 0.04%)</title><rect x="762.2" y="309" width="0.4" height="15.0" fill="rgb(239,167,26)" rx="2" ry="2" />
<text  x="765.17" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (3 samples, 0.06%)</title><rect x="633.0" y="469" width="0.7" height="15.0" fill="rgb(208,120,18)" rx="2" ry="2" />
<text  x="636.02" y="479.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average::timed_rate_moving_average (1 samples, 0.02%)</title><rect x="114.0" y="421" width="0.2" height="15.0" fill="rgb(213,5,3)" rx="2" ry="2" />
<text  x="116.95" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%)</title><rect x="79.5" y="405" width="0.2" height="15.0" fill="rgb(234,175,54)" rx="2" ry="2" />
<text  x="82.45" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (21 samples, 0.40%)</title><rect x="742.2" y="405" width="4.8" height="15.0" fill="rgb(244,108,47)" rx="2" ry="2" />
<text  x="745.19" y="415.5" ></text>
</g>
<g >
<title>table::make_reader (444 samples, 8.54%)</title><rect x="457.1" y="389" width="100.8" height="15.0" fill="rgb(217,172,0)" rx="2" ry="2" />
<text  x="460.12" y="399.5" >table::make_..</text>
</g>
<g >
<title>service::digest_read_resolver::response_count (1 samples, 0.02%)</title><rect x="722.7" y="469" width="0.2" height="15.0" fill="rgb(224,85,23)" rx="2" ry="2" />
<text  x="725.68" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="578.6" y="341" width="0.2" height="15.0" fill="rgb(221,135,25)" rx="2" ry="2" />
<text  x="581.55" y="351.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%)</title><rect x="39.5" y="405" width="0.2" height="15.0" fill="rgb(224,211,11)" rx="2" ry="2" />
<text  x="42.51" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1047.0" y="357" width="0.2" height="15.0" fill="rgb(222,69,22)" rx="2" ry="2" />
<text  x="1050.01" y="367.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, seastar::smp::invoke_on_all&lt;seastar::create_scheduling_group (1 samples, 0.02%)</title><rect x="114.2" y="501" width="0.2" height="15.0" fill="rgb(240,126,39)" rx="2" ry="2" />
<text  x="117.18" y="511.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%)</title><rect x="876.6" y="245" width="0.2" height="15.0" fill="rgb(251,28,30)" rx="2" ry="2" />
<text  x="879.56" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (1 samples, 0.02%)</title><rect x="867.3" y="517" width="0.2" height="15.0" fill="rgb(205,4,18)" rx="2" ry="2" />
<text  x="870.25" y="527.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (6 samples, 0.12%)</title><rect x="998.7" y="309" width="1.3" height="15.0" fill="rgb(212,227,40)" rx="2" ry="2" />
<text  x="1001.67" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="47.7" y="261" width="0.2" height="15.0" fill="rgb(252,89,8)" rx="2" ry="2" />
<text  x="50.68" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="289.8" y="197" width="0.5" height="15.0" fill="rgb(231,15,12)" rx="2" ry="2" />
<text  x="292.85" y="207.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="451.0" y="405" width="0.2" height="15.0" fill="rgb(233,6,44)" rx="2" ry="2" />
<text  x="454.00" y="415.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous, auth::get_permissions (2 samples, 0.04%)</title><rect x="823.4" y="341" width="0.5" height="15.0" fill="rgb(231,64,36)" rx="2" ry="2" />
<text  x="826.45" y="351.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="875.7" y="277" width="0.2" height="15.0" fill="rgb(253,200,21)" rx="2" ry="2" />
<text  x="878.65" y="287.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (2 samples, 0.04%)</title><rect x="551.5" y="341" width="0.5" height="15.0" fill="rgb(238,143,39)" rx="2" ry="2" />
<text  x="554.54" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="86.3" y="373" width="0.4" height="15.0" fill="rgb(249,71,17)" rx="2" ry="2" />
<text  x="89.26" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (1 samples, 0.02%)</title><rect x="1130.3" y="261" width="0.2" height="15.0" fill="rgb(240,218,32)" rx="2" ry="2" />
<text  x="1133.31" y="271.5" ></text>
</g>
<g >
<title>db::schema_tables::compact_for_schema_digest (1 samples, 0.02%)</title><rect x="112.4" y="453" width="0.2" height="15.0" fill="rgb(251,172,24)" rx="2" ry="2" />
<text  x="115.36" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::partition_key_restrictions&gt;::operator= (1 samples, 0.02%)</title><rect x="78.8" y="437" width="0.2" height="15.0" fill="rgb(211,28,54)" rx="2" ry="2" />
<text  x="81.77" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (58 samples, 1.12%)</title><rect x="1013.0" y="277" width="13.1" height="15.0" fill="rgb(214,183,8)" rx="2" ry="2" />
<text  x="1015.97" y="287.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (104 samples, 2.00%)</title><rect x="484.8" y="357" width="23.6" height="15.0" fill="rgb(245,25,23)" rx="2" ry="2" />
<text  x="487.81" y="367.5" >d..</text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (4 samples, 0.08%)</title><rect x="479.8" y="357" width="0.9" height="15.0" fill="rgb(208,229,14)" rx="2" ry="2" />
<text  x="482.82" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="842.5" y="373" width="0.2" height="15.0" fill="rgb(236,118,6)" rx="2" ry="2" />
<text  x="845.51" y="383.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="45.6" y="197" width="0.3" height="15.0" fill="rgb(233,81,6)" rx="2" ry="2" />
<text  x="48.63" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (6 samples, 0.12%)</title><rect x="289.2" y="229" width="1.3" height="15.0" fill="rgb(249,117,27)" rx="2" ry="2" />
<text  x="292.17" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="635.3" y="453" width="0.2" height="15.0" fill="rgb(222,184,9)" rx="2" ry="2" />
<text  x="638.29" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_tables_and_views (3 samples, 0.06%)</title><rect x="111.2" y="517" width="0.7" height="15.0" fill="rgb(211,104,39)" rx="2" ry="2" />
<text  x="114.23" y="527.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (37 samples, 0.71%)</title><rect x="1111.9" y="357" width="8.4" height="15.0" fill="rgb(229,182,0)" rx="2" ry="2" />
<text  x="1114.92" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%)</title><rect x="62.2" y="197" width="0.2" height="15.0" fill="rgb(219,66,4)" rx="2" ry="2" />
<text  x="65.20" y="207.5" ></text>
</g>
<g >
<title>cql3::update_parameters::make_cell (1 samples, 0.02%)</title><rect x="877.0" y="341" width="0.2" height="15.0" fill="rgb(233,220,50)" rx="2" ry="2" />
<text  x="880.01" y="351.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::~RecognizerSharedState (1 samples, 0.02%)</title><rect x="24.3" y="405" width="0.2" height="15.0" fill="rgb(234,184,9)" rx="2" ry="2" />
<text  x="27.30" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%)</title><rect x="554.7" y="373" width="0.5" height="15.0" fill="rgb(233,44,26)" rx="2" ry="2" />
<text  x="557.72" y="383.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::concrete_execution_stage (1 samples, 0.02%)</title><rect x="872.2" y="357" width="0.3" height="15.0" fill="rgb(207,186,1)" rx="2" ry="2" />
<text  x="875.25" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (2 samples, 0.04%)</title><rect x="725.2" y="485" width="0.4" height="15.0" fill="rgb(252,67,18)" rx="2" ry="2" />
<text  x="728.17" y="495.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="477.8" y="309" width="0.2" height="15.0" fill="rgb(226,45,29)" rx="2" ry="2" />
<text  x="480.78" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%)</title><rect x="535.7" y="341" width="0.4" height="15.0" fill="rgb(206,127,25)" rx="2" ry="2" />
<text  x="538.65" y="351.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (2 samples, 0.04%)</title><rect x="670.2" y="469" width="0.5" height="15.0" fill="rgb(251,82,17)" rx="2" ry="2" />
<text  x="673.25" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::_M_mbegin (1 samples, 0.02%)</title><rect x="38.4" y="309" width="0.2" height="15.0" fill="rgb(228,104,12)" rx="2" ry="2" />
<text  x="41.37" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="556.8" y="341" width="0.4" height="15.0" fill="rgb(247,111,44)" rx="2" ry="2" />
<text  x="559.76" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (4 samples, 0.08%)</title><rect x="1034.5" y="245" width="0.9" height="15.0" fill="rgb(221,63,34)" rx="2" ry="2" />
<text  x="1037.53" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="40.9" y="309" width="0.4" height="15.0" fill="rgb(251,140,4)" rx="2" ry="2" />
<text  x="43.87" y="319.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (198 samples, 3.81%)</title><rect x="993.0" y="341" width="44.9" height="15.0" fill="rgb(218,219,14)" rx="2" ry="2" />
<text  x="995.99" y="351.5" >serv..</text>
</g>
<g >
<title>service::storage_proxy::response_wait (1 samples, 0.02%)</title><rect x="1121.5" y="293" width="0.2" height="15.0" fill="rgb(242,125,37)" rx="2" ry="2" />
<text  x="1124.46" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (1 samples, 0.02%)</title><rect x="712.9" y="485" width="0.2" height="15.0" fill="rgb(219,49,29)" rx="2" ry="2" />
<text  x="715.92" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;::_M_range_initialize&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; const*&gt; (1 samples, 0.02%)</title><rect x="74.9" y="373" width="0.2" height="15.0" fill="rgb(231,65,19)" rx="2" ry="2" />
<text  x="77.91" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="856.6" y="421" width="0.2" height="15.0" fill="rgb(239,116,3)" rx="2" ry="2" />
<text  x="859.59" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (5 samples, 0.10%)</title><rect x="57.9" y="309" width="1.1" height="15.0" fill="rgb(237,143,42)" rx="2" ry="2" />
<text  x="60.89" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="292.3" y="229" width="0.3" height="15.0" fill="rgb(234,137,24)" rx="2" ry="2" />
<text  x="295.35" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="1146.9" y="453" width="1.1" height="15.0" fill="rgb(237,194,11)" rx="2" ry="2" />
<text  x="1149.88" y="463.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1013.9" y="261" width="0.2" height="15.0" fill="rgb(238,73,27)" rx="2" ry="2" />
<text  x="1016.87" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%)</title><rect x="930.8" y="405" width="0.7" height="15.0" fill="rgb(223,44,10)" rx="2" ry="2" />
<text  x="933.80" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::create_keyspace_statement*, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="65.6" y="373" width="0.2" height="15.0" fill="rgb(218,69,13)" rx="2" ry="2" />
<text  x="68.61" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (9 samples, 0.17%)</title><rect x="439.6" y="293" width="2.1" height="15.0" fill="rgb(227,193,25)" rx="2" ry="2" />
<text  x="442.65" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="354.3" y="213" width="0.2" height="15.0" fill="rgb(239,166,36)" rx="2" ry="2" />
<text  x="357.31" y="223.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%)</title><rect x="86.9" y="357" width="0.3" height="15.0" fill="rgb(235,29,18)" rx="2" ry="2" />
<text  x="89.94" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="45.6" y="181" width="0.3" height="15.0" fill="rgb(249,227,18)" rx="2" ry="2" />
<text  x="48.63" y="191.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="449.2" y="389" width="0.4" height="15.0" fill="rgb(214,94,22)" rx="2" ry="2" />
<text  x="452.18" y="399.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (4 samples, 0.08%)</title><rect x="559.7" y="437" width="0.9" height="15.0" fill="rgb(244,31,30)" rx="2" ry="2" />
<text  x="562.71" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::clear (1 samples, 0.02%)</title><rect x="626.2" y="469" width="0.2" height="15.0" fill="rgb(226,157,50)" rx="2" ry="2" />
<text  x="629.21" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (1 samples, 0.02%)</title><rect x="96.5" y="501" width="0.2" height="15.0" fill="rgb(212,122,49)" rx="2" ry="2" />
<text  x="99.47" y="511.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (1 samples, 0.02%)</title><rect x="188.8" y="293" width="0.3" height="15.0" fill="rgb(210,150,9)" rx="2" ry="2" />
<text  x="191.85" y="303.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%)</title><rect x="820.3" y="277" width="0.7" height="15.0" fill="rgb(227,150,10)" rx="2" ry="2" />
<text  x="823.27" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="563.6" y="373" width="0.2" height="15.0" fill="rgb(211,210,5)" rx="2" ry="2" />
<text  x="566.57" y="383.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_with_params (1 samples, 0.02%)</title><rect x="1164.4" y="245" width="0.2" height="15.0" fill="rgb(231,33,51)" rx="2" ry="2" />
<text  x="1167.35" y="255.5" ></text>
</g>
<g >
<title>auth::service::has_superuser (1 samples, 0.02%)</title><rect x="1164.4" y="357" width="0.2" height="15.0" fill="rgb(215,74,16)" rx="2" ry="2" />
<text  x="1167.35" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="49.9" y="309" width="0.7" height="15.0" fill="rgb(212,8,39)" rx="2" ry="2" />
<text  x="52.95" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (3 samples, 0.06%)</title><rect x="73.8" y="373" width="0.7" height="15.0" fill="rgb(241,118,52)" rx="2" ry="2" />
<text  x="76.78" y="383.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="10.7" y="469" width="0.2" height="15.0" fill="rgb(253,210,10)" rx="2" ry="2" />
<text  x="13.68" y="479.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (2 samples, 0.04%)</title><rect x="472.3" y="309" width="0.5" height="15.0" fill="rgb(243,144,2)" rx="2" ry="2" />
<text  x="475.33" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (6 samples, 0.12%)</title><rect x="403.8" y="229" width="1.3" height="15.0" fill="rgb(221,153,41)" rx="2" ry="2" />
<text  x="406.79" y="239.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="819.6" y="277" width="0.4" height="15.0" fill="rgb(242,63,23)" rx="2" ry="2" />
<text  x="822.59" y="287.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (1 samples, 0.02%)</title><rect x="59.5" y="341" width="0.2" height="15.0" fill="rgb(230,83,22)" rx="2" ry="2" />
<text  x="62.48" y="351.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="49.3" y="165" width="0.2" height="15.0" fill="rgb(222,96,0)" rx="2" ry="2" />
<text  x="52.27" y="175.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%)</title><rect x="79.9" y="453" width="0.2" height="15.0" fill="rgb(247,214,52)" rx="2" ry="2" />
<text  x="82.91" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (6 samples, 0.12%)</title><rect x="905.6" y="389" width="1.4" height="15.0" fill="rgb(238,141,20)" rx="2" ry="2" />
<text  x="908.61" y="399.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (2 samples, 0.04%)</title><rect x="853.6" y="373" width="0.5" height="15.0" fill="rgb(236,57,47)" rx="2" ry="2" />
<text  x="856.64" y="383.5" ></text>
</g>
<g >
<title>mutation_partition::do_compact (1 samples, 0.02%)</title><rect x="112.4" y="421" width="0.2" height="15.0" fill="rgb(217,86,51)" rx="2" ry="2" />
<text  x="115.36" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%)</title><rect x="47.7" y="341" width="0.2" height="15.0" fill="rgb(206,175,17)" rx="2" ry="2" />
<text  x="50.68" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%)</title><rect x="705.2" y="501" width="0.2" height="15.0" fill="rgb(235,181,7)" rx="2" ry="2" />
<text  x="708.20" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%)</title><rect x="473.5" y="293" width="0.2" height="15.0" fill="rgb(249,167,2)" rx="2" ry="2" />
<text  x="476.47" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="20.0" y="197" width="0.2" height="15.0" fill="rgb(240,44,49)" rx="2" ry="2" />
<text  x="22.99" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (264 samples, 5.08%)</title><rect x="218.1" y="277" width="59.9" height="15.0" fill="rgb(208,201,26)" rx="2" ry="2" />
<text  x="221.13" y="287.5" >partit..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (4 samples, 0.08%)</title><rect x="313.2" y="373" width="0.9" height="15.0" fill="rgb(250,86,46)" rx="2" ry="2" />
<text  x="316.23" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1130.1" y="501" width="0.2" height="15.0" fill="rgb(244,217,24)" rx="2" ry="2" />
<text  x="1133.08" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (4 samples, 0.08%)</title><rect x="761.7" y="325" width="0.9" height="15.0" fill="rgb(212,156,26)" rx="2" ry="2" />
<text  x="764.71" y="335.5" ></text>
</g>
<g >
<title>std::construct_at&lt;column_definition, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;&amp;, seastar::shared_ptr&lt;abstract_type const&gt;&amp;, column_kind&amp;, unsigned int&amp;, column_view_virtual&amp;, std::unique_ptr&lt;column_computation, std::default_delete&lt;column_computation&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="113.7" y="357" width="0.3" height="15.0" fill="rgb(219,115,30)" rx="2" ry="2" />
<text  x="116.72" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::_M_deleter (1 samples, 0.02%)</title><rect x="67.2" y="357" width="0.2" height="15.0" fill="rgb(218,221,34)" rx="2" ry="2" />
<text  x="70.20" y="367.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%)</title><rect x="858.4" y="357" width="0.2" height="15.0" fill="rgb(207,93,11)" rx="2" ry="2" />
<text  x="861.40" y="367.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="595.6" y="389" width="0.7" height="15.0" fill="rgb(205,104,23)" rx="2" ry="2" />
<text  x="598.57" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (2 samples, 0.04%)</title><rect x="666.2" y="437" width="0.4" height="15.0" fill="rgb(246,199,16)" rx="2" ry="2" />
<text  x="669.16" y="447.5" ></text>
</g>
<g >
<title>ser::serializer&lt;utils::UUID&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1112.8" y="261" width="0.3" height="15.0" fill="rgb(220,168,38)" rx="2" ry="2" />
<text  x="1115.83" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::never_speculating_read_executor&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="973.7" y="389" width="0.2" height="15.0" fill="rgb(208,33,8)" rx="2" ry="2" />
<text  x="976.70" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (224 samples, 4.31%)</title><rect x="219.5" y="261" width="50.8" height="15.0" fill="rgb(248,1,33)" rx="2" ry="2" />
<text  x="222.49" y="271.5" >parti..</text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (3 samples, 0.06%)</title><rect x="45.9" y="325" width="0.6" height="15.0" fill="rgb(238,30,48)" rx="2" ry="2" />
<text  x="48.86" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (2 samples, 0.04%)</title><rect x="710.2" y="485" width="0.4" height="15.0" fill="rgb(233,214,28)" rx="2" ry="2" />
<text  x="713.19" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (27 samples, 0.52%)</title><rect x="1121.2" y="373" width="6.2" height="15.0" fill="rgb(235,151,28)" rx="2" ry="2" />
<text  x="1124.23" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (7 samples, 0.13%)</title><rect x="1160.5" y="469" width="1.6" height="15.0" fill="rgb(228,48,21)" rx="2" ry="2" />
<text  x="1163.49" y="479.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="592.4" y="373" width="0.2" height="15.0" fill="rgb(217,48,46)" rx="2" ry="2" />
<text  x="595.40" y="383.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (1 samples, 0.02%)</title><rect x="1122.8" y="213" width="0.2" height="15.0" fill="rgb(205,19,3)" rx="2" ry="2" />
<text  x="1125.82" y="223.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (11 samples, 0.21%)</title><rect x="912.4" y="405" width="2.5" height="15.0" fill="rgb(234,176,43)" rx="2" ry="2" />
<text  x="915.42" y="415.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="1098.8" y="453" width="1.1" height="15.0" fill="rgb(252,155,31)" rx="2" ry="2" />
<text  x="1101.76" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (46 samples, 0.88%)</title><rect x="715.2" y="501" width="10.4" height="15.0" fill="rgb(218,175,12)" rx="2" ry="2" />
<text  x="718.19" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::to_expression (1 samples, 0.02%)</title><rect x="74.7" y="373" width="0.2" height="15.0" fill="rgb(223,42,43)" rx="2" ry="2" />
<text  x="77.69" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (3 samples, 0.06%)</title><rect x="591.9" y="405" width="0.7" height="15.0" fill="rgb(211,158,11)" rx="2" ry="2" />
<text  x="594.94" y="415.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.08%)</title><rect x="10.7" y="645" width="0.9" height="15.0" fill="rgb(219,98,6)" rx="2" ry="2" />
<text  x="13.68" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%)</title><rect x="1142.3" y="453" width="0.5" height="15.0" fill="rgb(219,191,41)" rx="2" ry="2" />
<text  x="1145.34" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (4 samples, 0.08%)</title><rect x="1153.0" y="501" width="0.9" height="15.0" fill="rgb(236,213,52)" rx="2" ry="2" />
<text  x="1156.00" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%)</title><rect x="39.7" y="325" width="0.7" height="15.0" fill="rgb(214,45,29)" rx="2" ry="2" />
<text  x="42.73" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (4 samples, 0.08%)</title><rect x="869.3" y="533" width="0.9" height="15.0" fill="rgb(251,135,39)" rx="2" ry="2" />
<text  x="872.30" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (43 samples, 0.83%)</title><rect x="281.2" y="277" width="9.8" height="15.0" fill="rgb(230,72,12)" rx="2" ry="2" />
<text  x="284.23" y="287.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation::data&gt;::operator (1 samples, 0.02%)</title><rect x="1127.6" y="341" width="0.2" height="15.0" fill="rgb(240,224,44)" rx="2" ry="2" />
<text  x="1130.58" y="351.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="210.2" y="245" width="0.2" height="15.0" fill="rgb(233,215,39)" rx="2" ry="2" />
<text  x="213.18" y="255.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (1 samples, 0.02%)</title><rect x="78.1" y="421" width="0.2" height="15.0" fill="rgb(232,38,31)" rx="2" ry="2" />
<text  x="81.09" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%)</title><rect x="817.1" y="101" width="0.2" height="15.0" fill="rgb(249,225,46)" rx="2" ry="2" />
<text  x="820.09" y="111.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (40 samples, 0.77%)</title><rect x="1111.5" y="517" width="9.0" height="15.0" fill="rgb(236,220,20)" rx="2" ry="2" />
<text  x="1114.47" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="62.2" y="261" width="0.2" height="15.0" fill="rgb(231,155,40)" rx="2" ry="2" />
<text  x="65.20" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.73%)</title><rect x="1111.9" y="405" width="8.6" height="15.0" fill="rgb(251,9,25)" rx="2" ry="2" />
<text  x="1114.92" y="415.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (1 samples, 0.02%)</title><rect x="1058.6" y="341" width="0.2" height="15.0" fill="rgb(246,128,30)" rx="2" ry="2" />
<text  x="1061.59" y="351.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (3 samples, 0.06%)</title><rect x="276.2" y="261" width="0.7" height="15.0" fill="rgb(230,132,34)" rx="2" ry="2" />
<text  x="279.23" y="271.5" ></text>
</g>
<g >
<title>query::result::builder::build (6 samples, 0.12%)</title><rect x="611.0" y="469" width="1.4" height="15.0" fill="rgb(216,37,34)" rx="2" ry="2" />
<text  x="614.01" y="479.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (3 samples, 0.06%)</title><rect x="21.8" y="517" width="0.7" height="15.0" fill="rgb(222,27,26)" rx="2" ry="2" />
<text  x="24.80" y="527.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::finally_body&lt;sstables::sstables_manager::deactivate (1 samples, 0.02%)</title><rect x="702.0" y="533" width="0.2" height="15.0" fill="rgb(221,80,21)" rx="2" ry="2" />
<text  x="705.02" y="543.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%)</title><rect x="20.2" y="325" width="0.2" height="15.0" fill="rgb(206,43,7)" rx="2" ry="2" />
<text  x="23.21" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (1 samples, 0.02%)</title><rect x="190.7" y="309" width="0.2" height="15.0" fill="rgb(244,200,9)" rx="2" ry="2" />
<text  x="193.67" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="275.8" y="229" width="0.4" height="15.0" fill="rgb(222,155,51)" rx="2" ry="2" />
<text  x="278.78" y="239.5" ></text>
</g>
<g >
<title>cql3::cf_name::set_column_family (2 samples, 0.04%)</title><rect x="43.1" y="357" width="0.5" height="15.0" fill="rgb(212,95,27)" rx="2" ry="2" />
<text  x="46.14" y="367.5" ></text>
</g>
<g >
<title>std::operator== (1 samples, 0.02%)</title><rect x="37.9" y="341" width="0.2" height="15.0" fill="rgb(220,169,27)" rx="2" ry="2" />
<text  x="40.92" y="351.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (4 samples, 0.08%)</title><rect x="525.0" y="229" width="0.9" height="15.0" fill="rgb(245,155,0)" rx="2" ry="2" />
<text  x="527.99" y="239.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%)</title><rect x="1121.5" y="277" width="0.2" height="15.0" fill="rgb(216,121,24)" rx="2" ry="2" />
<text  x="1124.46" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,010 samples, 19.43%)</title><rect x="882.2" y="501" width="229.3" height="15.0" fill="rgb(241,208,9)" rx="2" ry="2" />
<text  x="885.23" y="511.5" >seastar::noncopyable_function&lt;..</text>
</g>
<g >
<title>database::has_keyspace (9 samples, 0.17%)</title><rect x="840.7" y="389" width="2.0" height="15.0" fill="rgb(210,57,43)" rx="2" ry="2" />
<text  x="843.70" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (1 samples, 0.02%)</title><rect x="408.8" y="229" width="0.2" height="15.0" fill="rgb(238,218,41)" rx="2" ry="2" />
<text  x="411.78" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="872.7" y="373" width="0.2" height="15.0" fill="rgb(247,125,5)" rx="2" ry="2" />
<text  x="875.70" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%)</title><rect x="253.5" y="149" width="0.5" height="15.0" fill="rgb(254,70,52)" rx="2" ry="2" />
<text  x="256.54" y="159.5" ></text>
</g>
<g >
<title>database::do_apply (38 samples, 0.73%)</title><rect x="1111.9" y="373" width="8.6" height="15.0" fill="rgb(232,229,15)" rx="2" ry="2" />
<text  x="1114.92" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="11.1" y="629" width="0.3" height="15.0" fill="rgb(236,76,31)" rx="2" ry="2" />
<text  x="14.13" y="639.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (7 samples, 0.13%)</title><rect x="266.0" y="181" width="1.6" height="15.0" fill="rgb(237,60,30)" rx="2" ry="2" />
<text  x="269.02" y="191.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (14 samples, 0.27%)</title><rect x="135.1" y="437" width="3.1" height="15.0" fill="rgb(213,220,45)" rx="2" ry="2" />
<text  x="138.06" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="833.7" y="405" width="0.2" height="15.0" fill="rgb(221,109,17)" rx="2" ry="2" />
<text  x="836.66" y="415.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_890c8f4026fb5657cc774dcb869d5487d413f0d3] (2 samples, 0.04%)</title><rect x="813.9" y="149" width="0.5" height="15.0" fill="rgb(240,63,24)" rx="2" ry="2" />
<text  x="816.92" y="159.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%)</title><rect x="24.8" y="421" width="0.2" height="15.0" fill="rgb(231,195,35)" rx="2" ry="2" />
<text  x="27.75" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (20 samples, 0.38%)</title><rect x="742.4" y="389" width="4.6" height="15.0" fill="rgb(240,3,13)" rx="2" ry="2" />
<text  x="745.42" y="399.5" ></text>
</g>
<g >
<title>boost::algorithm::replace_all_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char [2], char [2]&gt; (1 samples, 0.02%)</title><rect x="114.2" y="325" width="0.2" height="15.0" fill="rgb(245,99,35)" rx="2" ry="2" />
<text  x="117.18" y="335.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (8 samples, 0.15%)</title><rect x="875.4" y="357" width="1.8" height="15.0" fill="rgb(232,48,6)" rx="2" ry="2" />
<text  x="878.42" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (3 samples, 0.06%)</title><rect x="131.9" y="469" width="0.7" height="15.0" fill="rgb(226,206,40)" rx="2" ry="2" />
<text  x="134.88" y="479.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::drop_type_statement*, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="66.5" y="373" width="0.2" height="15.0" fill="rgb(207,62,24)" rx="2" ry="2" />
<text  x="69.51" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="854.1" y="437" width="1.6" height="15.0" fill="rgb(242,160,49)" rx="2" ry="2" />
<text  x="857.09" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="882.0" y="501" width="0.2" height="15.0" fill="rgb(223,26,49)" rx="2" ry="2" />
<text  x="885.01" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%)</title><rect x="1147.3" y="437" width="0.7" height="15.0" fill="rgb(249,225,40)" rx="2" ry="2" />
<text  x="1150.33" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (1 samples, 0.02%)</title><rect x="637.1" y="437" width="0.2" height="15.0" fill="rgb(220,25,34)" rx="2" ry="2" />
<text  x="640.11" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (4 samples, 0.08%)</title><rect x="742.6" y="373" width="1.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="745.65" y="383.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (11 samples, 0.21%)</title><rect x="139.1" y="437" width="2.5" height="15.0" fill="rgb(228,166,12)" rx="2" ry="2" />
<text  x="142.14" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="770.1" y="357" width="0.2" height="15.0" fill="rgb(210,139,32)" rx="2" ry="2" />
<text  x="773.11" y="367.5" ></text>
</g>
<g >
<title>main (4,748 samples, 91.33%)</title><rect x="88.5" y="645" width="1077.7" height="15.0" fill="rgb(248,97,17)" rx="2" ry="2" />
<text  x="91.53" y="655.5" >main</text>
</g>
<g >
<title>db::commitlog::add_entry (1 samples, 0.02%)</title><rect x="1118.7" y="309" width="0.3" height="15.0" fill="rgb(225,165,22)" rx="2" ry="2" />
<text  x="1121.73" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (1 samples, 0.02%)</title><rect x="80.8" y="453" width="0.2" height="15.0" fill="rgb(238,31,33)" rx="2" ry="2" />
<text  x="83.81" y="463.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (7 samples, 0.13%)</title><rect x="643.7" y="453" width="1.6" height="15.0" fill="rgb(229,111,22)" rx="2" ry="2" />
<text  x="646.69" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="10.7" y="453" width="0.2" height="15.0" fill="rgb(250,150,52)" rx="2" ry="2" />
<text  x="13.68" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (11 samples, 0.21%)</title><rect x="70.4" y="437" width="2.5" height="15.0" fill="rgb(211,49,41)" rx="2" ry="2" />
<text  x="73.37" y="447.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%)</title><rect x="583.3" y="309" width="0.5" height="15.0" fill="rgb(207,123,30)" rx="2" ry="2" />
<text  x="586.32" y="319.5" ></text>
</g>
<g >
<title>cql3::untyped_result_set::untyped_result_set (1 samples, 0.02%)</title><rect x="660.0" y="485" width="0.3" height="15.0" fill="rgb(233,19,28)" rx="2" ry="2" />
<text  x="663.03" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="45.6" y="277" width="0.3" height="15.0" fill="rgb(226,104,12)" rx="2" ry="2" />
<text  x="48.63" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%)</title><rect x="366.1" y="197" width="0.2" height="15.0" fill="rgb(224,151,32)" rx="2" ry="2" />
<text  x="369.11" y="207.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_id::metric_id (1 samples, 0.02%)</title><rect x="872.2" y="261" width="0.3" height="15.0" fill="rgb(231,208,26)" rx="2" ry="2" />
<text  x="875.25" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (2 samples, 0.04%)</title><rect x="869.5" y="421" width="0.5" height="15.0" fill="rgb(234,150,12)" rx="2" ry="2" />
<text  x="872.52" y="431.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%)</title><rect x="52.0" y="309" width="0.2" height="15.0" fill="rgb(208,83,7)" rx="2" ry="2" />
<text  x="54.99" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%)</title><rect x="508.4" y="357" width="0.5" height="15.0" fill="rgb(246,36,1)" rx="2" ry="2" />
<text  x="511.42" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::release (1 samples, 0.02%)</title><rect x="59.9" y="309" width="0.3" height="15.0" fill="rgb(252,4,42)" rx="2" ry="2" />
<text  x="62.93" y="319.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="58.8" y="293" width="0.2" height="15.0" fill="rgb(225,162,40)" rx="2" ry="2" />
<text  x="61.80" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (2 samples, 0.04%)</title><rect x="869.5" y="405" width="0.5" height="15.0" fill="rgb(231,115,44)" rx="2" ry="2" />
<text  x="872.52" y="415.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_metric (1 samples, 0.02%)</title><rect x="872.2" y="277" width="0.3" height="15.0" fill="rgb(228,192,39)" rx="2" ry="2" />
<text  x="875.25" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_Deque_base (1 samples, 0.02%)</title><rect x="24.1" y="325" width="0.2" height="15.0" fill="rgb(232,164,11)" rx="2" ry="2" />
<text  x="27.07" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (2 samples, 0.04%)</title><rect x="625.5" y="469" width="0.5" height="15.0" fill="rgb(253,129,12)" rx="2" ry="2" />
<text  x="628.53" y="479.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="216.1" y="229" width="0.2" height="15.0" fill="rgb(223,3,9)" rx="2" ry="2" />
<text  x="219.09" y="239.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~Parser (1 samples, 0.02%)</title><rect x="24.3" y="437" width="0.2" height="15.0" fill="rgb(232,122,15)" rx="2" ry="2" />
<text  x="27.30" y="447.5" ></text>
</g>
<g >
<title>database::find_keyspace (1 samples, 0.02%)</title><rect x="1125.8" y="229" width="0.2" height="15.0" fill="rgb(226,1,25)" rx="2" ry="2" />
<text  x="1128.77" y="239.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%)</title><rect x="113.3" y="421" width="0.2" height="15.0" fill="rgb(249,168,7)" rx="2" ry="2" />
<text  x="116.27" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="61.5" y="325" width="0.2" height="15.0" fill="rgb(205,166,41)" rx="2" ry="2" />
<text  x="64.52" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (33 samples, 0.63%)</title><rect x="871.1" y="501" width="7.5" height="15.0" fill="rgb(235,205,51)" rx="2" ry="2" />
<text  x="874.11" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="678.4" y="453" width="0.2" height="15.0" fill="rgb(239,162,17)" rx="2" ry="2" />
<text  x="681.42" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::stop (1 samples, 0.02%)</title><rect x="703.2" y="517" width="0.2" height="15.0" fill="rgb(224,198,44)" rx="2" ry="2" />
<text  x="706.16" y="527.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="20.0" y="485" width="0.2" height="15.0" fill="rgb(248,78,17)" rx="2" ry="2" />
<text  x="22.99" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::empty (1 samples, 0.02%)</title><rect x="944.9" y="437" width="0.2" height="15.0" fill="rgb(210,79,18)" rx="2" ry="2" />
<text  x="947.88" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::run (4,747 samples, 91.31%)</title><rect x="88.5" y="581" width="1077.4" height="15.0" fill="rgb(243,85,42)" rx="2" ry="2" />
<text  x="91.53" y="591.5" >seastar::reactor::run</text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (20 samples, 0.38%)</title><rect x="1017.7" y="229" width="4.6" height="15.0" fill="rgb(209,158,53)" rx="2" ry="2" />
<text  x="1020.73" y="239.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (40 samples, 0.77%)</title><rect x="1059.3" y="293" width="9.0" height="15.0" fill="rgb(219,98,40)" rx="2" ry="2" />
<text  x="1062.27" y="303.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (8 samples, 0.15%)</title><rect x="520.9" y="245" width="1.8" height="15.0" fill="rgb(229,24,2)" rx="2" ry="2" />
<text  x="523.90" y="255.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (40 samples, 0.77%)</title><rect x="1014.1" y="261" width="9.1" height="15.0" fill="rgb(212,225,48)" rx="2" ry="2" />
<text  x="1017.10" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (5 samples, 0.10%)</title><rect x="80.8" y="517" width="1.1" height="15.0" fill="rgb(227,182,13)" rx="2" ry="2" />
<text  x="83.81" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="98.3" y="517" width="0.2" height="15.0" fill="rgb(209,36,54)" rx="2" ry="2" />
<text  x="101.29" y="527.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (3 samples, 0.06%)</title><rect x="1036.3" y="309" width="0.7" height="15.0" fill="rgb(218,42,48)" rx="2" ry="2" />
<text  x="1039.34" y="319.5" ></text>
</g>
<g >
<title>memtable::apply (25 samples, 0.48%)</title><rect x="1112.6" y="293" width="5.7" height="15.0" fill="rgb(222,112,7)" rx="2" ry="2" />
<text  x="1115.60" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="940.1" y="389" width="0.2" height="15.0" fill="rgb(219,166,11)" rx="2" ry="2" />
<text  x="943.11" y="399.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (7 samples, 0.13%)</title><rect x="211.3" y="245" width="1.6" height="15.0" fill="rgb(206,224,6)" rx="2" ry="2" />
<text  x="214.32" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="1156.4" y="501" width="0.5" height="15.0" fill="rgb(206,86,29)" rx="2" ry="2" />
<text  x="1159.41" y="511.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (6 samples, 0.12%)</title><rect x="1123.5" y="197" width="1.4" height="15.0" fill="rgb(249,86,15)" rx="2" ry="2" />
<text  x="1126.50" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%)</title><rect x="645.1" y="437" width="0.2" height="15.0" fill="rgb(210,120,7)" rx="2" ry="2" />
<text  x="648.05" y="447.5" ></text>
</g>
<g >
<title>executor&lt;test_read (592 samples, 11.39%)</title><rect x="732.7" y="517" width="134.3" height="15.0" fill="rgb(245,185,10)" rx="2" ry="2" />
<text  x="735.66" y="527.5" >executor&lt;test_read</text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (5 samples, 0.10%)</title><rect x="284.4" y="213" width="1.1" height="15.0" fill="rgb(253,142,35)" rx="2" ry="2" />
<text  x="287.40" y="223.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%)</title><rect x="541.1" y="357" width="0.2" height="15.0" fill="rgb(228,175,16)" rx="2" ry="2" />
<text  x="544.10" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%)</title><rect x="58.3" y="117" width="0.5" height="15.0" fill="rgb(214,49,40)" rx="2" ry="2" />
<text  x="61.34" y="127.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (2 samples, 0.04%)</title><rect x="264.4" y="181" width="0.5" height="15.0" fill="rgb(238,91,36)" rx="2" ry="2" />
<text  x="267.43" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_M_insert_unique_&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const&amp;, std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_Alloc_node&gt; (1 samples, 0.02%)</title><rect x="113.0" y="389" width="0.3" height="15.0" fill="rgb(231,94,48)" rx="2" ry="2" />
<text  x="116.04" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::~CqlParser (1 samples, 0.02%)</title><rect x="24.3" y="453" width="0.2" height="15.0" fill="rgb(237,161,7)" rx="2" ry="2" />
<text  x="27.30" y="463.5" ></text>
</g>
<g >
<title>auth::standard_role_manager::create_or_replace (1 samples, 0.02%)</title><rect x="700.9" y="517" width="0.2" height="15.0" fill="rgb(225,98,54)" rx="2" ry="2" />
<text  x="703.89" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="707.5" y="485" width="0.2" height="15.0" fill="rgb(209,130,14)" rx="2" ry="2" />
<text  x="710.47" y="495.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="502.3" y="229" width="0.4" height="15.0" fill="rgb(238,40,54)" rx="2" ry="2" />
<text  x="505.29" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="681.1" y="485" width="0.3" height="15.0" fill="rgb(230,98,17)" rx="2" ry="2" />
<text  x="684.14" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (9 samples, 0.17%)</title><rect x="1121.5" y="325" width="2.0" height="15.0" fill="rgb(228,204,23)" rx="2" ry="2" />
<text  x="1124.46" y="335.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%)</title><rect x="831.4" y="421" width="0.2" height="15.0" fill="rgb(224,92,7)" rx="2" ry="2" />
<text  x="834.39" y="431.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_890c8f4026fb5657cc774dcb869d5487d413f0d3] (1 samples, 0.02%)</title><rect x="392.7" y="181" width="0.2" height="15.0" fill="rgb(248,202,38)" rx="2" ry="2" />
<text  x="395.67" y="191.5" ></text>
</g>
<g >
<title>db::system_keyspace::make (1 samples, 0.02%)</title><rect x="20.0" y="357" width="0.2" height="15.0" fill="rgb(210,189,30)" rx="2" ry="2" />
<text  x="22.99" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (13 samples, 0.25%)</title><rect x="25.7" y="341" width="2.9" height="15.0" fill="rgb(233,128,47)" rx="2" ry="2" />
<text  x="28.66" y="351.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%)</title><rect x="700.4" y="517" width="0.3" height="15.0" fill="rgb(218,206,33)" rx="2" ry="2" />
<text  x="703.43" y="527.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (454 samples, 8.73%)</title><rect x="454.9" y="421" width="103.0" height="15.0" fill="rgb(219,38,24)" rx="2" ry="2" />
<text  x="457.85" y="431.5" >std::functio..</text>
</g>
<g >
<title>bytes_view_hasher::update (3 samples, 0.06%)</title><rect x="746.3" y="325" width="0.7" height="15.0" fill="rgb(248,95,8)" rx="2" ry="2" />
<text  x="749.28" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (11 samples, 0.21%)</title><rect x="664.3" y="501" width="2.5" height="15.0" fill="rgb(226,70,20)" rx="2" ry="2" />
<text  x="667.35" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (5 samples, 0.10%)</title><rect x="53.1" y="277" width="1.2" height="15.0" fill="rgb(233,163,51)" rx="2" ry="2" />
<text  x="56.12" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (2 samples, 0.04%)</title><rect x="759.2" y="405" width="0.5" height="15.0" fill="rgb(249,8,49)" rx="2" ry="2" />
<text  x="762.22" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (991 samples, 19.06%)</title><rect x="885.4" y="469" width="224.9" height="15.0" fill="rgb(210,78,5)" rx="2" ry="2" />
<text  x="888.41" y="479.5" >cql3::statements::select_stat..</text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.04%)</title><rect x="663.9" y="501" width="0.4" height="15.0" fill="rgb(234,96,24)" rx="2" ry="2" />
<text  x="666.89" y="511.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%)</title><rect x="403.1" y="229" width="0.2" height="15.0" fill="rgb(220,183,25)" rx="2" ry="2" />
<text  x="406.11" y="239.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (2 samples, 0.04%)</title><rect x="111.5" y="405" width="0.4" height="15.0" fill="rgb(224,144,37)" rx="2" ry="2" />
<text  x="114.45" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (3 samples, 0.06%)</title><rect x="650.3" y="517" width="0.7" height="15.0" fill="rgb(221,102,50)" rx="2" ry="2" />
<text  x="653.27" y="527.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_4findERKNS2_10expressionENS2_6oper_tEEUlRKNS2_15binary_operatorEE_EEPS9_S6_T_EUlSA_E_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_8constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_11conjunctionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_12column_valueEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_5tokenEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13function_callEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4castEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_15field_selectionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4nullEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13bind_variableEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_16untyped_constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_17tuple_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_22collection_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSJ_S8_SN_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_SF_S1R_S1V_S1Z_EEEENSt13invoke_resultISD_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSD_DpOS29_ (1 samples, 0.02%)</title><rect x="667.5" y="437" width="0.2" height="15.0" fill="rgb(230,160,25)" rx="2" ry="2" />
<text  x="670.52" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="668.4" y="469" width="0.5" height="15.0" fill="rgb(224,66,16)" rx="2" ry="2" />
<text  x="671.43" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1146.6" y="389" width="0.3" height="15.0" fill="rgb(229,15,53)" rx="2" ry="2" />
<text  x="1149.65" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::future (1 samples, 0.02%)</title><rect x="972.6" y="389" width="0.2" height="15.0" fill="rgb(219,172,6)" rx="2" ry="2" />
<text  x="975.57" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%)</title><rect x="41.1" y="197" width="0.2" height="15.0" fill="rgb(235,192,16)" rx="2" ry="2" />
<text  x="44.09" y="207.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (2 samples, 0.04%)</title><rect x="692.9" y="501" width="0.5" height="15.0" fill="rgb(228,199,24)" rx="2" ry="2" />
<text  x="695.94" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="643.2" y="469" width="0.3" height="15.0" fill="rgb(242,106,35)" rx="2" ry="2" />
<text  x="646.24" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%)</title><rect x="943.5" y="421" width="0.2" height="15.0" fill="rgb(252,136,40)" rx="2" ry="2" />
<text  x="946.51" y="431.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (5 samples, 0.10%)</title><rect x="1045.4" y="309" width="1.2" height="15.0" fill="rgb(237,217,25)" rx="2" ry="2" />
<text  x="1048.42" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt;::operator (1 samples, 0.02%)</title><rect x="138.0" y="421" width="0.2" height="15.0" fill="rgb(236,77,5)" rx="2" ry="2" />
<text  x="141.01" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="58.3" y="197" width="0.5" height="15.0" fill="rgb(218,32,44)" rx="2" ry="2" />
<text  x="61.34" y="207.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%)</title><rect x="865.0" y="501" width="0.2" height="15.0" fill="rgb(207,188,21)" rx="2" ry="2" />
<text  x="867.98" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (15 samples, 0.29%)</title><rect x="988.9" y="325" width="3.4" height="15.0" fill="rgb(212,205,30)" rx="2" ry="2" />
<text  x="991.91" y="335.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (3 samples, 0.06%)</title><rect x="20.0" y="597" width="0.7" height="15.0" fill="rgb(223,218,12)" rx="2" ry="2" />
<text  x="22.99" y="607.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (1 samples, 0.02%)</title><rect x="366.3" y="197" width="0.3" height="15.0" fill="rgb(211,82,51)" rx="2" ry="2" />
<text  x="369.34" y="207.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%)</title><rect x="1131.0" y="533" width="0.2" height="15.0" fill="rgb(220,103,48)" rx="2" ry="2" />
<text  x="1133.99" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%)</title><rect x="1033.4" y="261" width="0.9" height="15.0" fill="rgb(232,218,52)" rx="2" ry="2" />
<text  x="1036.39" y="271.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (4 samples, 0.08%)</title><rect x="81.0" y="421" width="0.9" height="15.0" fill="rgb(249,88,24)" rx="2" ry="2" />
<text  x="84.04" y="431.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (1 samples, 0.02%)</title><rect x="1057.7" y="357" width="0.2" height="15.0" fill="rgb(237,78,5)" rx="2" ry="2" />
<text  x="1060.68" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (9 samples, 0.17%)</title><rect x="102.1" y="469" width="2.1" height="15.0" fill="rgb(207,69,25)" rx="2" ry="2" />
<text  x="105.15" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (3 samples, 0.06%)</title><rect x="559.0" y="437" width="0.7" height="15.0" fill="rgb(250,157,26)" rx="2" ry="2" />
<text  x="562.03" y="447.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="156.8" y="469" width="0.7" height="15.0" fill="rgb(240,89,49)" rx="2" ry="2" />
<text  x="159.85" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="980.7" y="325" width="0.3" height="15.0" fill="rgb(252,165,38)" rx="2" ry="2" />
<text  x="983.74" y="335.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (32 samples, 0.62%)</title><rect x="416.5" y="197" width="7.3" height="15.0" fill="rgb(206,75,29)" rx="2" ry="2" />
<text  x="419.50" y="207.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (12 samples, 0.23%)</title><rect x="764.0" y="309" width="2.7" height="15.0" fill="rgb(225,91,0)" rx="2" ry="2" />
<text  x="766.98" y="319.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%)</title><rect x="534.5" y="357" width="1.6" height="15.0" fill="rgb(248,14,30)" rx="2" ry="2" />
<text  x="537.52" y="367.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%)</title><rect x="493.9" y="309" width="0.2" height="15.0" fill="rgb(237,21,21)" rx="2" ry="2" />
<text  x="496.89" y="319.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (1 samples, 0.02%)</title><rect x="278.3" y="277" width="0.2" height="15.0" fill="rgb(238,135,38)" rx="2" ry="2" />
<text  x="281.27" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="678.6" y="469" width="0.3" height="15.0" fill="rgb(236,7,47)" rx="2" ry="2" />
<text  x="681.64" y="479.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::get_line (1 samples, 0.02%)</title><rect x="28.6" y="309" width="0.2" height="15.0" fill="rgb(206,77,12)" rx="2" ry="2" />
<text  x="31.61" y="319.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (1 samples, 0.02%)</title><rect x="483.5" y="357" width="0.2" height="15.0" fill="rgb(217,218,20)" rx="2" ry="2" />
<text  x="486.45" y="367.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;utils::chunked_vector&lt;ser::deletable_row_view, 131072ul&gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1117.6" y="245" width="0.2" height="15.0" fill="rgb(250,108,5)" rx="2" ry="2" />
<text  x="1120.60" y="255.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (1 samples, 0.02%)</title><rect x="278.0" y="277" width="0.3" height="15.0" fill="rgb(212,158,50)" rx="2" ry="2" />
<text  x="281.05" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (4 samples, 0.08%)</title><rect x="336.4" y="293" width="0.9" height="15.0" fill="rgb(221,148,4)" rx="2" ry="2" />
<text  x="339.38" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="731.1" y="533" width="0.4" height="15.0" fill="rgb(244,183,24)" rx="2" ry="2" />
<text  x="734.07" y="543.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%)</title><rect x="112.8" y="277" width="0.2" height="15.0" fill="rgb(222,153,19)" rx="2" ry="2" />
<text  x="115.82" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%)</title><rect x="430.8" y="229" width="0.2" height="15.0" fill="rgb(232,64,8)" rx="2" ry="2" />
<text  x="433.80" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (1 samples, 0.02%)</title><rect x="902.2" y="341" width="0.2" height="15.0" fill="rgb(212,113,45)" rx="2" ry="2" />
<text  x="905.21" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (2 samples, 0.04%)</title><rect x="586.5" y="325" width="0.4" height="15.0" fill="rgb(254,189,43)" rx="2" ry="2" />
<text  x="589.50" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="447.6" y="373" width="0.2" height="15.0" fill="rgb(244,209,22)" rx="2" ry="2" />
<text  x="450.59" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="900.2" y="325" width="0.2" height="15.0" fill="rgb(221,186,18)" rx="2" ry="2" />
<text  x="903.16" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (6 samples, 0.12%)</title><rect x="949.0" y="421" width="1.3" height="15.0" fill="rgb(250,117,52)" rx="2" ry="2" />
<text  x="951.96" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="62.2" y="165" width="0.2" height="15.0" fill="rgb(216,42,14)" rx="2" ry="2" />
<text  x="65.20" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="20.0" y="469" width="0.2" height="15.0" fill="rgb(208,131,29)" rx="2" ry="2" />
<text  x="22.99" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (9 samples, 0.17%)</title><rect x="815.3" y="165" width="2.0" height="15.0" fill="rgb(234,196,26)" rx="2" ry="2" />
<text  x="818.28" y="175.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (3 samples, 0.06%)</title><rect x="39.7" y="277" width="0.7" height="15.0" fill="rgb(210,6,20)" rx="2" ry="2" />
<text  x="42.73" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="47.7" y="293" width="0.2" height="15.0" fill="rgb(233,88,25)" rx="2" ry="2" />
<text  x="50.68" y="303.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%)</title><rect x="858.4" y="373" width="0.2" height="15.0" fill="rgb(236,127,43)" rx="2" ry="2" />
<text  x="861.40" y="383.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="505.7" y="213" width="0.4" height="15.0" fill="rgb(207,180,29)" rx="2" ry="2" />
<text  x="508.70" y="223.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (10 samples, 0.19%)</title><rect x="552.0" y="325" width="2.3" height="15.0" fill="rgb(238,44,38)" rx="2" ry="2" />
<text  x="555.00" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="532.9" y="325" width="0.3" height="15.0" fill="rgb(221,214,21)" rx="2" ry="2" />
<text  x="535.93" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%)</title><rect x="355.2" y="245" width="0.2" height="15.0" fill="rgb(214,200,10)" rx="2" ry="2" />
<text  x="358.22" y="255.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="56.5" y="277" width="0.3" height="15.0" fill="rgb(213,105,8)" rx="2" ry="2" />
<text  x="59.53" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="302.6" y="325" width="0.2" height="15.0" fill="rgb(249,97,34)" rx="2" ry="2" />
<text  x="305.56" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::restriction::restriction (3 samples, 0.06%)</title><rect x="75.1" y="373" width="0.7" height="15.0" fill="rgb(242,0,33)" rx="2" ry="2" />
<text  x="78.14" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (3 samples, 0.06%)</title><rect x="1139.2" y="501" width="0.6" height="15.0" fill="rgb(241,43,53)" rx="2" ry="2" />
<text  x="1142.16" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%)</title><rect x="316.9" y="341" width="0.2" height="15.0" fill="rgb(234,118,47)" rx="2" ry="2" />
<text  x="319.86" y="351.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="701.6" y="517" width="0.2" height="15.0" fill="rgb(247,146,6)" rx="2" ry="2" />
<text  x="704.57" y="527.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%)</title><rect x="111.2" y="421" width="0.3" height="15.0" fill="rgb(250,120,26)" rx="2" ry="2" />
<text  x="114.23" y="431.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%)</title><rect x="10.7" y="533" width="0.2" height="15.0" fill="rgb(218,204,20)" rx="2" ry="2" />
<text  x="13.68" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (9 samples, 0.17%)</title><rect x="823.9" y="357" width="2.0" height="15.0" fill="rgb(246,114,36)" rx="2" ry="2" />
<text  x="826.90" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%)</title><rect x="673.7" y="517" width="0.2" height="15.0" fill="rgb(220,29,1)" rx="2" ry="2" />
<text  x="676.65" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="1125.8" y="197" width="0.2" height="15.0" fill="rgb(226,127,36)" rx="2" ry="2" />
<text  x="1128.77" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (1 samples, 0.02%)</title><rect x="137.8" y="421" width="0.2" height="15.0" fill="rgb(218,120,42)" rx="2" ry="2" />
<text  x="140.78" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%)</title><rect x="81.7" y="341" width="0.2" height="15.0" fill="rgb(213,223,17)" rx="2" ry="2" />
<text  x="84.72" y="351.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (1 samples, 0.02%)</title><rect x="408.3" y="229" width="0.3" height="15.0" fill="rgb(212,184,8)" rx="2" ry="2" />
<text  x="411.33" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (4 samples, 0.08%)</title><rect x="1086.7" y="421" width="0.9" height="15.0" fill="rgb(208,216,8)" rx="2" ry="2" />
<text  x="1089.73" y="431.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%)</title><rect x="1162.5" y="517" width="0.3" height="15.0" fill="rgb(246,44,18)" rx="2" ry="2" />
<text  x="1165.54" y="527.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%)</title><rect x="976.2" y="325" width="1.8" height="15.0" fill="rgb(206,168,15)" rx="2" ry="2" />
<text  x="979.20" y="335.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::operator (3 samples, 0.06%)</title><rect x="871.8" y="389" width="0.7" height="15.0" fill="rgb(215,210,41)" rx="2" ry="2" />
<text  x="874.79" y="399.5" ></text>
</g>
<g >
<title>caching_options::to_map (1 samples, 0.02%)</title><rect x="113.0" y="437" width="0.3" height="15.0" fill="rgb(242,133,8)" rx="2" ry="2" />
<text  x="116.04" y="447.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="701.6" y="469" width="0.2" height="15.0" fill="rgb(212,218,31)" rx="2" ry="2" />
<text  x="704.57" y="479.5" ></text>
</g>
<g >
<title>query::result::builder::builder (21 samples, 0.40%)</title><rect x="614.0" y="453" width="4.7" height="15.0" fill="rgb(226,1,44)" rx="2" ry="2" />
<text  x="616.96" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (15 samples, 0.29%)</title><rect x="230.8" y="133" width="3.4" height="15.0" fill="rgb(207,129,20)" rx="2" ry="2" />
<text  x="233.84" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="557.2" y="373" width="0.2" height="15.0" fill="rgb(253,16,11)" rx="2" ry="2" />
<text  x="560.22" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="599.2" y="389" width="0.2" height="15.0" fill="rgb(205,104,8)" rx="2" ry="2" />
<text  x="602.21" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%)</title><rect x="820.7" y="245" width="0.3" height="15.0" fill="rgb(251,0,24)" rx="2" ry="2" />
<text  x="823.73" y="255.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (2 samples, 0.04%)</title><rect x="62.7" y="309" width="0.4" height="15.0" fill="rgb(226,226,27)" rx="2" ry="2" />
<text  x="65.66" y="319.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%)</title><rect x="483.7" y="357" width="0.2" height="15.0" fill="rgb(236,56,44)" rx="2" ry="2" />
<text  x="486.68" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="1025.4" y="213" width="0.5" height="15.0" fill="rgb(209,97,21)" rx="2" ry="2" />
<text  x="1028.45" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%)</title><rect x="290.3" y="213" width="0.2" height="15.0" fill="rgb(224,69,14)" rx="2" ry="2" />
<text  x="293.30" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (9 samples, 0.17%)</title><rect x="1155.5" y="517" width="2.0" height="15.0" fill="rgb(210,80,3)" rx="2" ry="2" />
<text  x="1158.50" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (2 samples, 0.04%)</title><rect x="935.1" y="437" width="0.5" height="15.0" fill="rgb(211,190,16)" rx="2" ry="2" />
<text  x="938.12" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%)</title><rect x="674.1" y="501" width="0.2" height="15.0" fill="rgb(251,11,27)" rx="2" ry="2" />
<text  x="677.10" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;database&gt;::~shared_ptr_count_for (1 samples, 0.02%)</title><rect x="703.2" y="373" width="0.2" height="15.0" fill="rgb(228,133,52)" rx="2" ry="2" />
<text  x="706.16" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (2 samples, 0.04%)</title><rect x="891.3" y="453" width="0.5" height="15.0" fill="rgb(219,153,53)" rx="2" ry="2" />
<text  x="894.31" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (6 samples, 0.12%)</title><rect x="818.2" y="293" width="1.4" height="15.0" fill="rgb(225,143,10)" rx="2" ry="2" />
<text  x="821.23" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="863.8" y="437" width="0.3" height="15.0" fill="rgb(216,7,14)" rx="2" ry="2" />
<text  x="866.85" y="447.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::impl::remove_registration (1 samples, 0.02%)</title><rect x="703.2" y="277" width="0.2" height="15.0" fill="rgb(239,153,22)" rx="2" ry="2" />
<text  x="706.16" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;current_deleter&lt;range_tombstone_entry&gt; (1 samples, 0.02%)</title><rect x="585.1" y="309" width="0.3" height="15.0" fill="rgb(212,182,54)" rx="2" ry="2" />
<text  x="588.13" y="319.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="1084.7" y="405" width="0.2" height="15.0" fill="rgb(253,32,2)" rx="2" ry="2" />
<text  x="1087.69" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (3 samples, 0.06%)</title><rect x="848.0" y="405" width="0.6" height="15.0" fill="rgb(215,195,42)" rx="2" ry="2" />
<text  x="850.96" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="54.5" y="261" width="0.4" height="15.0" fill="rgb(225,148,9)" rx="2" ry="2" />
<text  x="57.49" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (1 samples, 0.02%)</title><rect x="143.0" y="485" width="0.2" height="15.0" fill="rgb(229,165,48)" rx="2" ry="2" />
<text  x="146.00" y="495.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (5 samples, 0.10%)</title><rect x="1075.6" y="325" width="1.1" height="15.0" fill="rgb(227,88,0)" rx="2" ry="2" />
<text  x="1078.61" y="335.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (4 samples, 0.08%)</title><rect x="365.7" y="213" width="0.9" height="15.0" fill="rgb(216,213,10)" rx="2" ry="2" />
<text  x="368.66" y="223.5" ></text>
</g>
<g >
<title>service::storage_service::join_cluster (2 samples, 0.04%)</title><rect x="20.2" y="581" width="0.5" height="15.0" fill="rgb(241,43,19)" rx="2" ry="2" />
<text  x="23.21" y="591.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (3 samples, 0.06%)</title><rect x="642.1" y="437" width="0.7" height="15.0" fill="rgb(239,208,0)" rx="2" ry="2" />
<text  x="645.10" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%)</title><rect x="867.0" y="517" width="0.3" height="15.0" fill="rgb(245,150,34)" rx="2" ry="2" />
<text  x="870.03" y="527.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (2 samples, 0.04%)</title><rect x="512.1" y="341" width="0.4" height="15.0" fill="rgb(254,57,51)" rx="2" ry="2" />
<text  x="515.05" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (1 samples, 0.02%)</title><rect x="220.9" y="229" width="0.2" height="15.0" fill="rgb(241,58,31)" rx="2" ry="2" />
<text  x="223.85" y="239.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%)</title><rect x="12.3" y="613" width="0.2" height="15.0" fill="rgb(219,13,1)" rx="2" ry="2" />
<text  x="15.27" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="1142.8" y="453" width="0.7" height="15.0" fill="rgb(238,78,14)" rx="2" ry="2" />
<text  x="1145.79" y="463.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%)</title><rect x="79.9" y="437" width="0.2" height="15.0" fill="rgb(235,195,10)" rx="2" ry="2" />
<text  x="82.91" y="447.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%)</title><rect x="62.2" y="181" width="0.2" height="15.0" fill="rgb(251,129,20)" rx="2" ry="2" />
<text  x="65.20" y="191.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="592.2" y="373" width="0.2" height="15.0" fill="rgb(212,51,44)" rx="2" ry="2" />
<text  x="595.17" y="383.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (1 samples, 0.02%)</title><rect x="426.3" y="213" width="0.2" height="15.0" fill="rgb(220,187,46)" rx="2" ry="2" />
<text  x="429.26" y="223.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (2 samples, 0.04%)</title><rect x="763.1" y="325" width="0.4" height="15.0" fill="rgb(225,14,4)" rx="2" ry="2" />
<text  x="766.08" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_keyspace_statement, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt;::_M_ptr (1 samples, 0.02%)</title><rect x="65.6" y="389" width="0.2" height="15.0" fill="rgb(240,89,16)" rx="2" ry="2" />
<text  x="68.61" y="399.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%)</title><rect x="20.0" y="277" width="0.2" height="15.0" fill="rgb(213,157,11)" rx="2" ry="2" />
<text  x="22.99" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::untyped_constant_test_assignment (1 samples, 0.02%)</title><rect x="72.6" y="421" width="0.3" height="15.0" fill="rgb(233,152,39)" rx="2" ry="2" />
<text  x="75.64" y="431.5" ></text>
</g>
<g >
<title>query::digester::digester (1 samples, 0.02%)</title><rect x="613.7" y="453" width="0.3" height="15.0" fill="rgb(215,16,22)" rx="2" ry="2" />
<text  x="616.73" y="463.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (7 samples, 0.13%)</title><rect x="757.4" y="405" width="1.6" height="15.0" fill="rgb(213,144,27)" rx="2" ry="2" />
<text  x="760.40" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="689.3" y="469" width="0.2" height="15.0" fill="rgb(244,116,47)" rx="2" ry="2" />
<text  x="692.31" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (4 samples, 0.08%)</title><rect x="86.0" y="405" width="0.9" height="15.0" fill="rgb(228,127,8)" rx="2" ry="2" />
<text  x="89.03" y="415.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (1 samples, 0.02%)</title><rect x="869.7" y="325" width="0.3" height="15.0" fill="rgb(253,216,4)" rx="2" ry="2" />
<text  x="872.75" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::single_column_relation&gt; &gt; (2 samples, 0.04%)</title><rect x="64.0" y="341" width="0.5" height="15.0" fill="rgb(237,162,4)" rx="2" ry="2" />
<text  x="67.02" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (13 samples, 0.25%)</title><rect x="676.8" y="501" width="3.0" height="15.0" fill="rgb(207,91,11)" rx="2" ry="2" />
<text  x="679.83" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (1 samples, 0.02%)</title><rect x="814.8" y="181" width="0.3" height="15.0" fill="rgb(205,112,49)" rx="2" ry="2" />
<text  x="817.82" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%)</title><rect x="213.8" y="229" width="2.3" height="15.0" fill="rgb(253,122,19)" rx="2" ry="2" />
<text  x="216.82" y="239.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="57.9" y="213" width="0.2" height="15.0" fill="rgb(223,219,35)" rx="2" ry="2" />
<text  x="60.89" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="700.7" y="485" width="0.2" height="15.0" fill="rgb(214,98,5)" rx="2" ry="2" />
<text  x="703.66" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::allocate (1 samples, 0.02%)</title><rect x="64.2" y="309" width="0.3" height="15.0" fill="rgb(219,11,44)" rx="2" ry="2" />
<text  x="67.25" y="319.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::decorated_key, long, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%)</title><rect x="19.5" y="565" width="0.3" height="15.0" fill="rgb(222,227,31)" rx="2" ry="2" />
<text  x="22.53" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="1127.6" y="373" width="0.2" height="15.0" fill="rgb(246,223,4)" rx="2" ry="2" />
<text  x="1130.58" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (2 samples, 0.04%)</title><rect x="175.9" y="405" width="0.5" height="15.0" fill="rgb(219,195,24)" rx="2" ry="2" />
<text  x="178.91" y="415.5" ></text>
</g>
<g >
<title>emptyable&lt;bool&gt;::verify (1 samples, 0.02%)</title><rect x="75.1" y="309" width="0.3" height="15.0" fill="rgb(217,192,33)" rx="2" ry="2" />
<text  x="78.14" y="319.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (1 samples, 0.02%)</title><rect x="850.0" y="469" width="0.2" height="15.0" fill="rgb(237,13,4)" rx="2" ry="2" />
<text  x="853.00" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (3 samples, 0.06%)</title><rect x="937.4" y="437" width="0.7" height="15.0" fill="rgb(245,54,41)" rx="2" ry="2" />
<text  x="940.39" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (187 samples, 3.60%)</title><rect x="25.0" y="421" width="42.4" height="15.0" fill="rgb(254,169,21)" rx="2" ry="2" />
<text  x="27.98" y="431.5" >cql..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%)</title><rect x="442.6" y="293" width="0.2" height="15.0" fill="rgb(224,108,52)" rx="2" ry="2" />
<text  x="445.60" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (2 samples, 0.04%)</title><rect x="1056.8" y="373" width="0.4" height="15.0" fill="rgb(218,158,52)" rx="2" ry="2" />
<text  x="1059.77" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (4 samples, 0.08%)</title><rect x="726.8" y="533" width="0.9" height="15.0" fill="rgb(215,90,44)" rx="2" ry="2" />
<text  x="729.76" y="543.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%)</title><rect x="815.1" y="165" width="0.2" height="15.0" fill="rgb(239,37,5)" rx="2" ry="2" />
<text  x="818.05" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="931.3" y="389" width="0.2" height="15.0" fill="rgb(236,49,38)" rx="2" ry="2" />
<text  x="934.26" y="399.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (2 samples, 0.04%)</title><rect x="741.3" y="437" width="0.4" height="15.0" fill="rgb(232,195,11)" rx="2" ry="2" />
<text  x="744.29" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="914.7" y="357" width="0.2" height="15.0" fill="rgb(240,87,27)" rx="2" ry="2" />
<text  x="917.69" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (5 samples, 0.10%)</title><rect x="86.0" y="453" width="1.2" height="15.0" fill="rgb(233,44,40)" rx="2" ry="2" />
<text  x="89.03" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%)</title><rect x="766.9" y="437" width="0.3" height="15.0" fill="rgb(225,122,24)" rx="2" ry="2" />
<text  x="769.93" y="447.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%)</title><rect x="1046.8" y="341" width="0.2" height="15.0" fill="rgb(205,178,35)" rx="2" ry="2" />
<text  x="1049.78" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%)</title><rect x="753.3" y="405" width="0.9" height="15.0" fill="rgb(216,154,32)" rx="2" ry="2" />
<text  x="756.32" y="415.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%)</title><rect x="699.3" y="469" width="0.2" height="15.0" fill="rgb(227,38,40)" rx="2" ry="2" />
<text  x="702.30" y="479.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;boost::range_detail::join_iterator&lt;gms::inet_address*, gms::inet_address*, gms::inet_address, gms::inet_address&amp;, boost::iterators::random_access_traversal_tag&gt;, std::_Bind&lt;bool  (1 samples, 0.02%)</title><rect x="1126.4" y="197" width="0.3" height="15.0" fill="rgb(235,65,35)" rx="2" ry="2" />
<text  x="1129.45" y="207.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (8 samples, 0.15%)</title><rect x="856.8" y="421" width="1.8" height="15.0" fill="rgb(209,229,11)" rx="2" ry="2" />
<text  x="859.81" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="311.9" y="341" width="0.2" height="15.0" fill="rgb(221,27,37)" rx="2" ry="2" />
<text  x="314.87" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%)</title><rect x="861.6" y="373" width="0.7" height="15.0" fill="rgb(253,150,54)" rx="2" ry="2" />
<text  x="864.58" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (3 samples, 0.06%)</title><rect x="709.5" y="485" width="0.7" height="15.0" fill="rgb(206,156,11)" rx="2" ry="2" />
<text  x="712.51" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="701.3" y="485" width="0.3" height="15.0" fill="rgb(227,107,18)" rx="2" ry="2" />
<text  x="704.34" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="217.9" y="261" width="0.2" height="15.0" fill="rgb(241,226,27)" rx="2" ry="2" />
<text  x="220.90" y="271.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="428.3" y="261" width="0.2" height="15.0" fill="rgb(241,25,15)" rx="2" ry="2" />
<text  x="431.30" y="271.5" ></text>
</g>
<g >
<title>table::update_cache (1 samples, 0.02%)</title><rect x="1130.3" y="501" width="0.2" height="15.0" fill="rgb(232,8,52)" rx="2" ry="2" />
<text  x="1133.31" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_mutable&lt;std::unordered_map&lt;column_definition const*, cql3::expr::expression, std::hash&lt;column_definition const*&gt;, std::equal_to&lt;column_definition const*&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt; &gt; &gt;, std::__detail::_Node_iterator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, false, false&gt;, boost::use_default, boost::use_default&gt;, void&gt; (1 samples, 0.02%)</title><rect x="79.2" y="437" width="0.3" height="15.0" fill="rgb(251,133,41)" rx="2" ry="2" />
<text  x="82.22" y="447.5" ></text>
</g>
<g >
<title>database::find_keyspace (18 samples, 0.35%)</title><rect x="1043.2" y="373" width="4.0" height="15.0" fill="rgb(248,90,46)" rx="2" ry="2" />
<text  x="1046.15" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (1 samples, 0.02%)</title><rect x="1018.6" y="181" width="0.3" height="15.0" fill="rgb(216,57,46)" rx="2" ry="2" />
<text  x="1021.64" y="191.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (2 samples, 0.04%)</title><rect x="562.7" y="405" width="0.4" height="15.0" fill="rgb(241,113,40)" rx="2" ry="2" />
<text  x="565.66" y="415.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%)</title><rect x="267.2" y="133" width="0.2" height="15.0" fill="rgb(217,108,12)" rx="2" ry="2" />
<text  x="270.15" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="449.2" y="357" width="0.4" height="15.0" fill="rgb(231,189,53)" rx="2" ry="2" />
<text  x="452.18" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="1108.7" y="453" width="0.3" height="15.0" fill="rgb(248,81,48)" rx="2" ry="2" />
<text  x="1111.75" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="736.7" y="469" width="0.3" height="15.0" fill="rgb(252,145,25)" rx="2" ry="2" />
<text  x="739.75" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (126 samples, 2.42%)</title><rect x="1133.9" y="533" width="28.6" height="15.0" fill="rgb(221,189,18)" rx="2" ry="2" />
<text  x="1136.94" y="543.5" >se..</text>
</g>
<g >
<title>__start_context (12 samples, 0.23%)</title><rect x="85.6" y="629" width="2.7" height="15.0" fill="rgb(206,189,41)" rx="2" ry="2" />
<text  x="88.58" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="803.9" y="293" width="0.3" height="15.0" fill="rgb(237,172,29)" rx="2" ry="2" />
<text  x="806.93" y="303.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="769.9" y="389" width="0.2" height="15.0" fill="rgb(221,115,18)" rx="2" ry="2" />
<text  x="772.88" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="59.0" y="341" width="0.3" height="15.0" fill="rgb(206,124,33)" rx="2" ry="2" />
<text  x="62.02" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%)</title><rect x="806.7" y="197" width="1.1" height="15.0" fill="rgb(250,74,20)" rx="2" ry="2" />
<text  x="809.65" y="207.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::do_recursive_touch_directory (1 samples, 0.02%)</title><rect x="701.8" y="533" width="0.2" height="15.0" fill="rgb(234,45,8)" rx="2" ry="2" />
<text  x="704.79" y="543.5" ></text>
</g>
<g >
<title>crc32_nbo::process_fragmented&lt;ser::buffer_view&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (4 samples, 0.08%)</title><rect x="1119.0" y="293" width="0.9" height="15.0" fill="rgb(220,203,49)" rx="2" ry="2" />
<text  x="1121.96" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (1 samples, 0.02%)</title><rect x="85.6" y="421" width="0.2" height="15.0" fill="rgb(209,20,39)" rx="2" ry="2" />
<text  x="88.58" y="431.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="906.3" y="357" width="0.7" height="15.0" fill="rgb(252,69,53)" rx="2" ry="2" />
<text  x="909.29" y="367.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (89 samples, 1.71%)</title><rect x="513.0" y="341" width="20.2" height="15.0" fill="rgb(226,158,23)" rx="2" ry="2" />
<text  x="515.96" y="351.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%)</title><rect x="293.3" y="245" width="0.2" height="15.0" fill="rgb(240,0,10)" rx="2" ry="2" />
<text  x="296.25" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%)</title><rect x="501.8" y="213" width="0.5" height="15.0" fill="rgb(211,106,15)" rx="2" ry="2" />
<text  x="504.84" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="767.8" y="437" width="0.3" height="15.0" fill="rgb(249,129,43)" rx="2" ry="2" />
<text  x="770.84" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (1 samples, 0.02%)</title><rect x="1146.0" y="437" width="0.2" height="15.0" fill="rgb(210,184,10)" rx="2" ry="2" />
<text  x="1148.97" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="872.2" y="213" width="0.3" height="15.0" fill="rgb(239,128,42)" rx="2" ry="2" />
<text  x="875.25" y="223.5" ></text>
</g>
<g >
<title>free (7 samples, 0.13%)</title><rect x="435.3" y="213" width="1.6" height="15.0" fill="rgb(228,185,22)" rx="2" ry="2" />
<text  x="438.34" y="223.5" ></text>
</g>
<g >
<title>mutation::consume&lt;compact_for_query&lt; (1 samples, 0.02%)</title><rect x="113.5" y="373" width="0.2" height="15.0" fill="rgb(245,182,26)" rx="2" ry="2" />
<text  x="116.50" y="383.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (1 samples, 0.02%)</title><rect x="858.9" y="469" width="0.2" height="15.0" fill="rgb(225,205,18)" rx="2" ry="2" />
<text  x="861.86" y="479.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (72 samples, 1.38%)</title><rect x="1058.8" y="341" width="16.4" height="15.0" fill="rgb(236,204,54)" rx="2" ry="2" />
<text  x="1061.81" y="351.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%)</title><rect x="838.4" y="293" width="0.3" height="15.0" fill="rgb(231,115,47)" rx="2" ry="2" />
<text  x="841.43" y="303.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (7 samples, 0.13%)</title><rect x="791.9" y="357" width="1.6" height="15.0" fill="rgb(243,30,21)" rx="2" ry="2" />
<text  x="794.90" y="367.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%)</title><rect x="80.4" y="405" width="0.2" height="15.0" fill="rgb(241,143,45)" rx="2" ry="2" />
<text  x="83.36" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="216.8" y="261" width="0.2" height="15.0" fill="rgb(251,110,24)" rx="2" ry="2" />
<text  x="219.77" y="271.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="61.1" y="293" width="0.2" height="15.0" fill="rgb(253,41,37)" rx="2" ry="2" />
<text  x="64.07" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state_component&lt;seastar::future&lt;void&gt; &gt;::run_and_dispose (1 samples, 0.02%)</title><rect x="870.2" y="533" width="0.2" height="15.0" fill="rgb(246,129,20)" rx="2" ry="2" />
<text  x="873.20" y="543.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (3 samples, 0.06%)</title><rect x="748.5" y="469" width="0.7" height="15.0" fill="rgb(230,115,2)" rx="2" ry="2" />
<text  x="751.55" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="61.7" y="293" width="0.3" height="15.0" fill="rgb(246,119,8)" rx="2" ry="2" />
<text  x="64.75" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (1 samples, 0.02%)</title><rect x="96.2" y="517" width="0.3" height="15.0" fill="rgb(233,160,2)" rx="2" ry="2" />
<text  x="99.25" y="527.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (63 samples, 1.21%)</title><rect x="25.2" y="405" width="14.3" height="15.0" fill="rgb(220,106,13)" rx="2" ry="2" />
<text  x="28.21" y="415.5" ></text>
</g>
<g >
<title>cql3::cf_name::set_column_family (1 samples, 0.02%)</title><rect x="42.9" y="373" width="0.2" height="15.0" fill="rgb(219,96,44)" rx="2" ry="2" />
<text  x="45.91" y="383.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%)</title><rect x="80.4" y="389" width="0.2" height="15.0" fill="rgb(249,12,21)" rx="2" ry="2" />
<text  x="83.36" y="399.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_4findERKNS2_10expressionENS2_6oper_tEEUlRKNS2_15binary_operatorEE_EEPS9_S6_T_EUlSA_E_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_8constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_11conjunctionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_12column_valueEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_5tokenEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13function_callEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4castEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_15field_selectionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4nullEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13bind_variableEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_16untyped_constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_17tuple_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_22collection_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSJ_S8_SN_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_SF_S1R_S1V_S1Z_EEEENSt13invoke_resultISD_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSD_DpOS29_ (1 samples, 0.02%)</title><rect x="949.2" y="405" width="0.2" height="15.0" fill="rgb(205,72,45)" rx="2" ry="2" />
<text  x="952.19" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;std::vector&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::allocator&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="862.3" y="453" width="0.2" height="15.0" fill="rgb(247,31,38)" rx="2" ry="2" />
<text  x="865.26" y="463.5" ></text>
</g>
<g >
<title>row::row (143 samples, 2.75%)</title><rect x="224.5" y="181" width="32.4" height="15.0" fill="rgb(242,114,33)" rx="2" ry="2" />
<text  x="227.48" y="191.5" >ro..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="62.2" y="229" width="0.2" height="15.0" fill="rgb(249,161,2)" rx="2" ry="2" />
<text  x="65.20" y="239.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%)</title><rect x="701.6" y="437" width="0.2" height="15.0" fill="rgb(233,216,30)" rx="2" ry="2" />
<text  x="704.57" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="86.3" y="341" width="0.4" height="15.0" fill="rgb(219,63,16)" rx="2" ry="2" />
<text  x="89.26" y="351.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (2 samples, 0.04%)</title><rect x="86.3" y="309" width="0.4" height="15.0" fill="rgb(230,124,36)" rx="2" ry="2" />
<text  x="89.26" y="319.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="95.3" y="517" width="0.7" height="15.0" fill="rgb(227,93,26)" rx="2" ry="2" />
<text  x="98.34" y="527.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, distributed_loader::process_sstable_dir (1 samples, 0.02%)</title><rect x="701.6" y="533" width="0.2" height="15.0" fill="rgb(242,120,18)" rx="2" ry="2" />
<text  x="704.57" y="543.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%)</title><rect x="666.6" y="485" width="0.2" height="15.0" fill="rgb(235,148,9)" rx="2" ry="2" />
<text  x="669.61" y="495.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%)</title><rect x="816.4" y="133" width="0.2" height="15.0" fill="rgb(209,53,9)" rx="2" ry="2" />
<text  x="819.41" y="143.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::untyped_result_set, false&gt;::make&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="660.0" y="517" width="0.3" height="15.0" fill="rgb(243,163,16)" rx="2" ry="2" />
<text  x="663.03" y="527.5" ></text>
</g>
<g >
<title>reader_permit::mark_unused (1 samples, 0.02%)</title><rect x="131.7" y="485" width="0.2" height="15.0" fill="rgb(245,173,25)" rx="2" ry="2" />
<text  x="134.65" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;8ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="57.4" y="101" width="0.3" height="15.0" fill="rgb(211,215,54)" rx="2" ry="2" />
<text  x="60.44" y="111.5" ></text>
</g>
<g >
<title>std::ostream::write (2 samples, 0.04%)</title><rect x="21.3" y="485" width="0.5" height="15.0" fill="rgb(205,139,28)" rx="2" ry="2" />
<text  x="24.35" y="495.5" ></text>
</g>
<g >
<title>row_tombstone::apply (3 samples, 0.06%)</title><rect x="425.8" y="245" width="0.7" height="15.0" fill="rgb(207,170,29)" rx="2" ry="2" />
<text  x="428.80" y="255.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%)</title><rect x="517.3" y="277" width="0.2" height="15.0" fill="rgb(224,189,5)" rx="2" ry="2" />
<text  x="520.27" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="1128.5" y="517" width="0.4" height="15.0" fill="rgb(246,139,41)" rx="2" ry="2" />
<text  x="1131.49" y="527.5" ></text>
</g>
<g >
<title>dht::tri_compare (9 samples, 0.17%)</title><rect x="496.4" y="293" width="2.0" height="15.0" fill="rgb(230,78,24)" rx="2" ry="2" />
<text  x="499.39" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="291.0" y="277" width="0.2" height="15.0" fill="rgb(246,199,3)" rx="2" ry="2" />
<text  x="293.98" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::add_restriction (2 samples, 0.04%)</title><rect x="76.5" y="357" width="0.5" height="15.0" fill="rgb(232,111,33)" rx="2" ry="2" />
<text  x="79.50" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%)</title><rect x="86.7" y="389" width="0.2" height="15.0" fill="rgb(246,142,47)" rx="2" ry="2" />
<text  x="89.71" y="399.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (4 samples, 0.08%)</title><rect x="646.2" y="469" width="0.9" height="15.0" fill="rgb(243,44,24)" rx="2" ry="2" />
<text  x="649.19" y="479.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (5 samples, 0.10%)</title><rect x="197.9" y="277" width="1.2" height="15.0" fill="rgb(231,142,39)" rx="2" ry="2" />
<text  x="200.93" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%)</title><rect x="106.2" y="501" width="0.9" height="15.0" fill="rgb(243,57,13)" rx="2" ry="2" />
<text  x="109.23" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (10 samples, 0.19%)</title><rect x="695.9" y="517" width="2.3" height="15.0" fill="rgb(233,107,16)" rx="2" ry="2" />
<text  x="698.89" y="527.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (9 samples, 0.17%)</title><rect x="388.6" y="197" width="2.0" height="15.0" fill="rgb(248,155,1)" rx="2" ry="2" />
<text  x="391.58" y="207.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%)</title><rect x="1037.5" y="325" width="0.2" height="15.0" fill="rgb(221,181,2)" rx="2" ry="2" />
<text  x="1040.48" y="335.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.08%)</title><rect x="899.3" y="325" width="0.9" height="15.0" fill="rgb(251,29,3)" rx="2" ry="2" />
<text  x="902.26" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%)</title><rect x="63.6" y="261" width="0.2" height="15.0" fill="rgb(220,145,22)" rx="2" ry="2" />
<text  x="66.56" y="271.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (4 samples, 0.08%)</title><rect x="829.6" y="325" width="0.9" height="15.0" fill="rgb(248,182,31)" rx="2" ry="2" />
<text  x="832.58" y="335.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_row (1 samples, 0.02%)</title><rect x="111.7" y="277" width="0.2" height="15.0" fill="rgb(210,22,52)" rx="2" ry="2" />
<text  x="114.68" y="287.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (5 samples, 0.10%)</title><rect x="928.5" y="373" width="1.2" height="15.0" fill="rgb(245,58,25)" rx="2" ry="2" />
<text  x="931.53" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%)</title><rect x="837.1" y="373" width="0.2" height="15.0" fill="rgb(254,25,10)" rx="2" ry="2" />
<text  x="840.07" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::deque (1 samples, 0.02%)</title><rect x="24.1" y="341" width="0.2" height="15.0" fill="rgb(218,191,39)" rx="2" ry="2" />
<text  x="27.07" y="351.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%)</title><rect x="11.1" y="309" width="0.3" height="15.0" fill="rgb(220,176,42)" rx="2" ry="2" />
<text  x="14.13" y="319.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt; (1 samples, 0.02%)</title><rect x="641.2" y="469" width="0.2" height="15.0" fill="rgb(224,56,15)" rx="2" ry="2" />
<text  x="644.19" y="479.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="11.1" y="485" width="0.3" height="15.0" fill="rgb(242,182,25)" rx="2" ry="2" />
<text  x="14.13" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (4 samples, 0.08%)</title><rect x="871.6" y="437" width="0.9" height="15.0" fill="rgb(237,104,37)" rx="2" ry="2" />
<text  x="874.57" y="447.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="714.5" y="501" width="0.2" height="15.0" fill="rgb(238,85,40)" rx="2" ry="2" />
<text  x="717.50" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%)</title><rect x="684.1" y="517" width="0.9" height="15.0" fill="rgb(236,105,31)" rx="2" ry="2" />
<text  x="687.09" y="527.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (1 samples, 0.02%)</title><rect x="866.8" y="485" width="0.2" height="15.0" fill="rgb(213,182,39)" rx="2" ry="2" />
<text  x="869.80" y="495.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%)</title><rect x="548.4" y="309" width="0.2" height="15.0" fill="rgb(250,28,41)" rx="2" ry="2" />
<text  x="551.37" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%)</title><rect x="96.5" y="517" width="0.2" height="15.0" fill="rgb(253,200,27)" rx="2" ry="2" />
<text  x="99.47" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (1 samples, 0.02%)</title><rect x="720.0" y="453" width="0.2" height="15.0" fill="rgb(222,84,53)" rx="2" ry="2" />
<text  x="722.95" y="463.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row_view::cells (1 samples, 0.02%)</title><rect x="660.0" y="421" width="0.3" height="15.0" fill="rgb(234,41,21)" rx="2" ry="2" />
<text  x="663.03" y="431.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (4 samples, 0.08%)</title><rect x="53.4" y="245" width="0.9" height="15.0" fill="rgb(224,33,38)" rx="2" ry="2" />
<text  x="56.35" y="255.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="838.7" y="325" width="0.2" height="15.0" fill="rgb(209,132,11)" rx="2" ry="2" />
<text  x="841.66" y="335.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (9 samples, 0.17%)</title><rect x="608.5" y="421" width="2.1" height="15.0" fill="rgb(221,47,18)" rx="2" ry="2" />
<text  x="611.51" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.08%)</title><rect x="510.0" y="341" width="0.9" height="15.0" fill="rgb(234,29,36)" rx="2" ry="2" />
<text  x="513.01" y="351.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%)</title><rect x="10.7" y="581" width="0.2" height="15.0" fill="rgb(244,128,27)" rx="2" ry="2" />
<text  x="13.68" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::_M_range_initialize&lt;mutation const*&gt; (1 samples, 0.02%)</title><rect x="112.8" y="437" width="0.2" height="15.0" fill="rgb(215,122,32)" rx="2" ry="2" />
<text  x="115.82" y="447.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (3 samples, 0.06%)</title><rect x="220.2" y="229" width="0.7" height="15.0" fill="rgb(221,204,39)" rx="2" ry="2" />
<text  x="223.17" y="239.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="112.8" y="325" width="0.2" height="15.0" fill="rgb(216,87,15)" rx="2" ry="2" />
<text  x="115.82" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (101 samples, 1.94%)</title><rect x="908.6" y="437" width="22.9" height="15.0" fill="rgb(251,41,36)" rx="2" ry="2" />
<text  x="911.56" y="447.5" >c..</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="688.9" y="485" width="0.2" height="15.0" fill="rgb(207,153,42)" rx="2" ry="2" />
<text  x="691.86" y="495.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (2 samples, 0.04%)</title><rect x="1036.6" y="293" width="0.4" height="15.0" fill="rgb(208,177,8)" rx="2" ry="2" />
<text  x="1039.57" y="303.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (2 samples, 0.04%)</title><rect x="1114.2" y="261" width="0.4" height="15.0" fill="rgb(241,36,0)" rx="2" ry="2" />
<text  x="1117.19" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%)</title><rect x="473.5" y="309" width="0.2" height="15.0" fill="rgb(221,143,35)" rx="2" ry="2" />
<text  x="476.47" y="319.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="52.2" y="245" width="0.2" height="15.0" fill="rgb(241,36,10)" rx="2" ry="2" />
<text  x="55.22" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%)</title><rect x="426.9" y="229" width="0.5" height="15.0" fill="rgb(252,219,10)" rx="2" ry="2" />
<text  x="429.94" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (508 samples, 9.77%)</title><rect x="332.5" y="389" width="115.3" height="15.0" fill="rgb(231,5,41)" rx="2" ry="2" />
<text  x="335.52" y="399.5" >flat_mutation_..</text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (1 samples, 0.02%)</title><rect x="978.0" y="325" width="0.2" height="15.0" fill="rgb(206,80,44)" rx="2" ry="2" />
<text  x="981.01" y="335.5" ></text>
</g>
<g >
<title>dht::tri_compare (1 samples, 0.02%)</title><rect x="508.0" y="309" width="0.2" height="15.0" fill="rgb(250,15,20)" rx="2" ry="2" />
<text  x="510.96" y="319.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (5 samples, 0.10%)</title><rect x="136.6" y="421" width="1.2" height="15.0" fill="rgb(239,147,26)" rx="2" ry="2" />
<text  x="139.65" y="431.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (2 samples, 0.04%)</title><rect x="741.7" y="437" width="0.5" height="15.0" fill="rgb(210,200,14)" rx="2" ry="2" />
<text  x="744.74" y="447.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (21 samples, 0.40%)</title><rect x="742.2" y="437" width="4.8" height="15.0" fill="rgb(225,109,12)" rx="2" ry="2" />
<text  x="745.19" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="79.5" y="421" width="0.2" height="15.0" fill="rgb(222,22,18)" rx="2" ry="2" />
<text  x="82.45" y="431.5" ></text>
</g>
<g >
<title>appending_hash&lt;mutation&gt;::operator (1 samples, 0.02%)</title><rect x="112.1" y="453" width="0.3" height="15.0" fill="rgb(232,186,3)" rx="2" ry="2" />
<text  x="115.14" y="463.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%)</title><rect x="875.7" y="245" width="0.2" height="15.0" fill="rgb(245,74,5)" rx="2" ry="2" />
<text  x="878.65" y="255.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%)</title><rect x="536.8" y="357" width="0.2" height="15.0" fill="rgb(225,174,35)" rx="2" ry="2" />
<text  x="539.79" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%)</title><rect x="62.2" y="245" width="0.2" height="15.0" fill="rgb(208,185,29)" rx="2" ry="2" />
<text  x="65.20" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_Alloc_node&gt; (1 samples, 0.02%)</title><rect x="872.2" y="245" width="0.3" height="15.0" fill="rgb(230,42,19)" rx="2" ry="2" />
<text  x="875.25" y="255.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="1130.3" y="389" width="0.2" height="15.0" fill="rgb(223,51,10)" rx="2" ry="2" />
<text  x="1133.31" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%)</title><rect x="592.2" y="389" width="0.2" height="15.0" fill="rgb(229,31,18)" rx="2" ry="2" />
<text  x="595.17" y="399.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%)</title><rect x="56.1" y="165" width="0.4" height="15.0" fill="rgb(209,208,38)" rx="2" ry="2" />
<text  x="59.07" y="175.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="575.6" y="341" width="0.2" height="15.0" fill="rgb(233,225,9)" rx="2" ry="2" />
<text  x="578.60" y="351.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%)</title><rect x="993.7" y="325" width="0.2" height="15.0" fill="rgb(242,43,13)" rx="2" ry="2" />
<text  x="996.67" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (454 samples, 8.73%)</title><rect x="338.6" y="309" width="103.1" height="15.0" fill="rgb(208,150,39)" rx="2" ry="2" />
<text  x="341.65" y="319.5" >flat_mutatio..</text>
</g>
<g >
<title>_ZN7seastar8futurizeINS_6futureIvEEE22satisfy_with_result_ofIZZNS2_17then_wrapped_nrvoIS2_ZNS2_16handle_exceptionIZ11do_io_checkIRDoFS2_St17basic_string_viewIcSt11char_traitsIcEESB_EJRNS_13basic_sstringIcjLj15ELb1EEESG_EEDaRKSt8functionIFvNSt15__exception_ptr13exception_ptrEEEOT_DpOT0_EUlSO_E_EES2_SP_EUlSP_E_EENS0_ISO_E4typeEOT0_ENKUlONS_8internal22promise_base_with_typeIvEERSU_ONS_12future_stateINSZ_9monostateEEEE_clES12_S13_S17_EUlvE_EEvS12_SP_ (1 samples, 0.02%)</title><rect x="702.5" y="517" width="0.2" height="15.0" fill="rgb(254,34,42)" rx="2" ry="2" />
<text  x="705.48" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::_M_check_len (1 samples, 0.02%)</title><rect x="1125.1" y="101" width="0.2" height="15.0" fill="rgb(205,8,21)" rx="2" ry="2" />
<text  x="1128.09" y="111.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="43.8" y="309" width="0.2" height="15.0" fill="rgb(234,21,43)" rx="2" ry="2" />
<text  x="46.82" y="319.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (15 samples, 0.29%)</title><rect x="1101.0" y="453" width="3.4" height="15.0" fill="rgb(250,20,13)" rx="2" ry="2" />
<text  x="1104.03" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (15 samples, 0.29%)</title><rect x="988.9" y="341" width="3.4" height="15.0" fill="rgb(234,35,19)" rx="2" ry="2" />
<text  x="991.91" y="351.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (1 samples, 0.02%)</title><rect x="1119.9" y="293" width="0.2" height="15.0" fill="rgb(224,43,49)" rx="2" ry="2" />
<text  x="1122.87" y="303.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (2 samples, 0.04%)</title><rect x="198.6" y="261" width="0.5" height="15.0" fill="rgb(247,143,1)" rx="2" ry="2" />
<text  x="201.61" y="271.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="841.2" y="325" width="0.2" height="15.0" fill="rgb(234,164,44)" rx="2" ry="2" />
<text  x="844.15" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (1 samples, 0.02%)</title><rect x="936.0" y="421" width="0.3" height="15.0" fill="rgb(254,139,41)" rx="2" ry="2" />
<text  x="939.02" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%)</title><rect x="665.3" y="469" width="0.4" height="15.0" fill="rgb(226,183,39)" rx="2" ry="2" />
<text  x="668.25" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (4 samples, 0.08%)</title><rect x="869.3" y="501" width="0.9" height="15.0" fill="rgb(231,140,40)" rx="2" ry="2" />
<text  x="872.30" y="511.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%)</title><rect x="875.7" y="229" width="0.2" height="15.0" fill="rgb(214,160,27)" rx="2" ry="2" />
<text  x="878.65" y="239.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (22 samples, 0.42%)</title><rect x="859.3" y="485" width="5.0" height="15.0" fill="rgb(205,107,35)" rx="2" ry="2" />
<text  x="862.31" y="495.5" ></text>
</g>
<g >
<title>service::write_response_handler::write_response_handler (1 samples, 0.02%)</title><rect x="1126.7" y="197" width="0.2" height="15.0" fill="rgb(240,17,8)" rx="2" ry="2" />
<text  x="1129.68" y="207.5" ></text>
</g>
<g >
<title>abstract_type::is_collection (1 samples, 0.02%)</title><rect x="72.0" y="405" width="0.2" height="15.0" fill="rgb(208,46,17)" rx="2" ry="2" />
<text  x="74.96" y="415.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (1 samples, 0.02%)</title><rect x="352.3" y="213" width="0.2" height="15.0" fill="rgb(205,127,10)" rx="2" ry="2" />
<text  x="355.27" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (15 samples, 0.29%)</title><rect x="938.1" y="437" width="3.4" height="15.0" fill="rgb(206,13,25)" rx="2" ry="2" />
<text  x="941.07" y="447.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::with_scheduling_group&lt;table::try_flush_memtable_to_sstable (1 samples, 0.02%)</title><rect x="1130.3" y="533" width="0.2" height="15.0" fill="rgb(233,36,0)" rx="2" ry="2" />
<text  x="1133.31" y="543.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (5 samples, 0.10%)</title><rect x="189.5" y="309" width="1.2" height="15.0" fill="rgb(248,182,9)" rx="2" ry="2" />
<text  x="192.53" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (4 samples, 0.08%)</title><rect x="640.1" y="469" width="0.9" height="15.0" fill="rgb(214,93,43)" rx="2" ry="2" />
<text  x="643.06" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (16 samples, 0.31%)</title><rect x="258.5" y="165" width="3.7" height="15.0" fill="rgb(237,93,48)" rx="2" ry="2" />
<text  x="261.53" y="175.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (20 samples, 0.38%)</title><rect x="1017.7" y="213" width="4.6" height="15.0" fill="rgb(224,214,54)" rx="2" ry="2" />
<text  x="1020.73" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="804.8" y="261" width="0.3" height="15.0" fill="rgb(251,136,24)" rx="2" ry="2" />
<text  x="807.84" y="271.5" ></text>
</g>
<g >
<title>boost::range_detail::default_constructible_unary_fn_wrapper&lt;service::abstract_write_response_handler::max_backlog (1 samples, 0.02%)</title><rect x="727.0" y="453" width="0.2" height="15.0" fill="rgb(248,85,3)" rx="2" ry="2" />
<text  x="729.99" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%)</title><rect x="23.4" y="421" width="0.2" height="15.0" fill="rgb(233,82,28)" rx="2" ry="2" />
<text  x="26.39" y="431.5" ></text>
</g>
<g >
<title>cql3::query_processor::make_internal_options (1 samples, 0.02%)</title><rect x="1164.4" y="229" width="0.2" height="15.0" fill="rgb(212,55,34)" rx="2" ry="2" />
<text  x="1167.35" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="323.7" y="309" width="0.2" height="15.0" fill="rgb(219,140,4)" rx="2" ry="2" />
<text  x="326.67" y="319.5" ></text>
</g>
<g >
<title>utils::crc32::process (4 samples, 0.08%)</title><rect x="1119.0" y="277" width="0.9" height="15.0" fill="rgb(229,206,23)" rx="2" ry="2" />
<text  x="1121.96" y="287.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (4 samples, 0.08%)</title><rect x="87.2" y="453" width="0.9" height="15.0" fill="rgb(248,211,0)" rx="2" ry="2" />
<text  x="90.17" y="463.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%)</title><rect x="120.8" y="501" width="0.9" height="15.0" fill="rgb(235,34,2)" rx="2" ry="2" />
<text  x="123.76" y="511.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="472.1" y="309" width="0.2" height="15.0" fill="rgb(238,131,31)" rx="2" ry="2" />
<text  x="475.10" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (189 samples, 3.64%)</title><rect x="994.1" y="325" width="42.9" height="15.0" fill="rgb(231,173,41)" rx="2" ry="2" />
<text  x="997.13" y="335.5" >serv..</text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%)</title><rect x="20.2" y="405" width="0.2" height="15.0" fill="rgb(243,87,44)" rx="2" ry="2" />
<text  x="23.21" y="415.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.13%)</title><rect x="806.2" y="213" width="1.6" height="15.0" fill="rgb(225,205,7)" rx="2" ry="2" />
<text  x="809.20" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%)</title><rect x="989.8" y="277" width="2.1" height="15.0" fill="rgb(231,76,25)" rx="2" ry="2" />
<text  x="992.82" y="287.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%)</title><rect x="541.3" y="357" width="0.3" height="15.0" fill="rgb(242,137,22)" rx="2" ry="2" />
<text  x="544.33" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (40 samples, 0.77%)</title><rect x="28.6" y="325" width="9.1" height="15.0" fill="rgb(244,175,35)" rx="2" ry="2" />
<text  x="31.61" y="335.5" ></text>
</g>
<g >
<title>auth::get_permissions (3 samples, 0.06%)</title><rect x="81.3" y="405" width="0.6" height="15.0" fill="rgb(212,158,41)" rx="2" ry="2" />
<text  x="84.27" y="415.5" ></text>
</g>
<g >
<title>memtable_entry::memtable_entry (1 samples, 0.02%)</title><rect x="1113.5" y="181" width="0.2" height="15.0" fill="rgb(254,45,45)" rx="2" ry="2" />
<text  x="1116.51" y="191.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (3 samples, 0.06%)</title><rect x="530.7" y="309" width="0.6" height="15.0" fill="rgb(213,200,44)" rx="2" ry="2" />
<text  x="533.66" y="319.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%)</title><rect x="1130.1" y="485" width="0.2" height="15.0" fill="rgb(221,138,27)" rx="2" ry="2" />
<text  x="1133.08" y="495.5" ></text>
</g>
<g >
<title>schema::cdc_options (1 samples, 0.02%)</title><rect x="871.6" y="373" width="0.2" height="15.0" fill="rgb(215,190,11)" rx="2" ry="2" />
<text  x="874.57" y="383.5" ></text>
</g>
<g >
<title>compact (1 samples, 0.02%)</title><rect x="111.2" y="453" width="0.3" height="15.0" fill="rgb(208,83,0)" rx="2" ry="2" />
<text  x="114.23" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (3 samples, 0.06%)</title><rect x="58.1" y="293" width="0.7" height="15.0" fill="rgb(212,64,8)" rx="2" ry="2" />
<text  x="61.12" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1162.1" y="469" width="0.2" height="15.0" fill="rgb(228,8,42)" rx="2" ry="2" />
<text  x="1165.08" y="479.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%)</title><rect x="324.6" y="325" width="1.1" height="15.0" fill="rgb(228,192,39)" rx="2" ry="2" />
<text  x="327.58" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%)</title><rect x="959.6" y="405" width="0.3" height="15.0" fill="rgb(247,108,15)" rx="2" ry="2" />
<text  x="962.63" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (13 samples, 0.25%)</title><rect x="1105.3" y="453" width="3.0" height="15.0" fill="rgb(209,78,23)" rx="2" ry="2" />
<text  x="1108.34" y="463.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (1 samples, 0.02%)</title><rect x="821.9" y="309" width="0.2" height="15.0" fill="rgb(249,190,15)" rx="2" ry="2" />
<text  x="824.86" y="319.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (2 samples, 0.04%)</title><rect x="328.9" y="421" width="0.4" height="15.0" fill="rgb(214,187,39)" rx="2" ry="2" />
<text  x="331.89" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (4 samples, 0.08%)</title><rect x="1034.5" y="261" width="0.9" height="15.0" fill="rgb(211,149,3)" rx="2" ry="2" />
<text  x="1037.53" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%)</title><rect x="628.0" y="469" width="0.5" height="15.0" fill="rgb(251,135,22)" rx="2" ry="2" />
<text  x="631.03" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%)</title><rect x="1035.2" y="213" width="0.2" height="15.0" fill="rgb(212,81,22)" rx="2" ry="2" />
<text  x="1038.21" y="223.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (16 samples, 0.31%)</title><rect x="941.5" y="453" width="3.6" height="15.0" fill="rgb(215,116,47)" rx="2" ry="2" />
<text  x="944.47" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (63 samples, 1.21%)</title><rect x="25.2" y="389" width="14.3" height="15.0" fill="rgb(236,75,40)" rx="2" ry="2" />
<text  x="28.21" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%)</title><rect x="40.6" y="325" width="0.7" height="15.0" fill="rgb(226,8,22)" rx="2" ry="2" />
<text  x="43.64" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;managed_bytes&gt;::_M_reset (4 samples, 0.08%)</title><rect x="907.7" y="405" width="0.9" height="15.0" fill="rgb(242,67,38)" rx="2" ry="2" />
<text  x="910.65" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="644.6" y="405" width="0.2" height="15.0" fill="rgb(245,180,9)" rx="2" ry="2" />
<text  x="647.60" y="415.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="875.0" y="357" width="0.2" height="15.0" fill="rgb(227,83,45)" rx="2" ry="2" />
<text  x="877.97" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (2 samples, 0.04%)</title><rect x="261.0" y="117" width="0.5" height="15.0" fill="rgb(249,115,31)" rx="2" ry="2" />
<text  x="264.03" y="127.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%)</title><rect x="1163.2" y="405" width="0.2" height="15.0" fill="rgb(213,142,52)" rx="2" ry="2" />
<text  x="1166.22" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="64.2" y="293" width="0.3" height="15.0" fill="rgb(217,180,54)" rx="2" ry="2" />
<text  x="67.25" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%)</title><rect x="427.4" y="261" width="0.4" height="15.0" fill="rgb(226,130,16)" rx="2" ry="2" />
<text  x="430.39" y="271.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%)</title><rect x="58.1" y="261" width="0.2" height="15.0" fill="rgb(207,72,9)" rx="2" ry="2" />
<text  x="61.12" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="841.2" y="341" width="0.2" height="15.0" fill="rgb(210,155,54)" rx="2" ry="2" />
<text  x="844.15" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%)</title><rect x="667.3" y="469" width="0.4" height="15.0" fill="rgb(238,100,14)" rx="2" ry="2" />
<text  x="670.30" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%)</title><rect x="1054.3" y="325" width="0.2" height="15.0" fill="rgb(231,130,45)" rx="2" ry="2" />
<text  x="1057.27" y="335.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (200 samples, 3.85%)</title><rect x="785.5" y="421" width="45.4" height="15.0" fill="rgb(213,11,51)" rx="2" ry="2" />
<text  x="788.55" y="431.5" >std:..</text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::get_value (2 samples, 0.04%)</title><rect x="730.6" y="533" width="0.5" height="15.0" fill="rgb(221,106,30)" rx="2" ry="2" />
<text  x="733.62" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="1132.8" y="533" width="0.2" height="15.0" fill="rgb(252,189,16)" rx="2" ry="2" />
<text  x="1135.80" y="543.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%)</title><rect x="845.2" y="453" width="0.9" height="15.0" fill="rgb(207,229,22)" rx="2" ry="2" />
<text  x="848.24" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (3 samples, 0.06%)</title><rect x="75.1" y="357" width="0.7" height="15.0" fill="rgb(238,205,41)" rx="2" ry="2" />
<text  x="78.14" y="367.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="57.9" y="149" width="0.2" height="15.0" fill="rgb(247,214,12)" rx="2" ry="2" />
<text  x="60.89" y="159.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="45.6" y="245" width="0.3" height="15.0" fill="rgb(208,12,28)" rx="2" ry="2" />
<text  x="48.63" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%)</title><rect x="48.8" y="277" width="0.5" height="15.0" fill="rgb(227,90,1)" rx="2" ry="2" />
<text  x="51.81" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (2 samples, 0.04%)</title><rect x="689.5" y="469" width="0.5" height="15.0" fill="rgb(244,76,21)" rx="2" ry="2" />
<text  x="692.54" y="479.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="986.9" y="357" width="0.2" height="15.0" fill="rgb(240,96,45)" rx="2" ry="2" />
<text  x="989.86" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%)</title><rect x="1094.9" y="357" width="0.5" height="15.0" fill="rgb(251,22,35)" rx="2" ry="2" />
<text  x="1097.90" y="367.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="838.2" y="309" width="0.5" height="15.0" fill="rgb(251,38,36)" rx="2" ry="2" />
<text  x="841.20" y="319.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="61.3" y="325" width="0.2" height="15.0" fill="rgb(234,195,35)" rx="2" ry="2" />
<text  x="64.29" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%)</title><rect x="45.9" y="261" width="0.6" height="15.0" fill="rgb(222,144,8)" rx="2" ry="2" />
<text  x="48.86" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (10 samples, 0.19%)</title><rect x="875.4" y="405" width="2.3" height="15.0" fill="rgb(245,72,48)" rx="2" ry="2" />
<text  x="878.42" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (3 samples, 0.06%)</title><rect x="364.5" y="213" width="0.7" height="15.0" fill="rgb(237,103,24)" rx="2" ry="2" />
<text  x="367.52" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (1 samples, 0.02%)</title><rect x="200.7" y="309" width="0.2" height="15.0" fill="rgb(211,115,22)" rx="2" ry="2" />
<text  x="203.65" y="319.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%)</title><rect x="700.9" y="501" width="0.2" height="15.0" fill="rgb(233,196,33)" rx="2" ry="2" />
<text  x="703.89" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%)</title><rect x="1122.1" y="149" width="0.3" height="15.0" fill="rgb(230,187,1)" rx="2" ry="2" />
<text  x="1125.14" y="159.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasReachedFillbufferTarget (1 samples, 0.02%)</title><rect x="39.3" y="357" width="0.2" height="15.0" fill="rgb(217,177,20)" rx="2" ry="2" />
<text  x="42.28" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%)</title><rect x="830.5" y="293" width="0.4" height="15.0" fill="rgb(219,198,7)" rx="2" ry="2" />
<text  x="833.48" y="303.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="807.8" y="229" width="0.2" height="15.0" fill="rgb(240,170,13)" rx="2" ry="2" />
<text  x="810.79" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (31 samples, 0.60%)</title><rect x="979.1" y="373" width="7.1" height="15.0" fill="rgb(242,129,12)" rx="2" ry="2" />
<text  x="982.15" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (3 samples, 0.06%)</title><rect x="869.5" y="437" width="0.7" height="15.0" fill="rgb(214,53,9)" rx="2" ry="2" />
<text  x="872.52" y="447.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%)</title><rect x="57.9" y="293" width="0.2" height="15.0" fill="rgb(238,191,46)" rx="2" ry="2" />
<text  x="60.89" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (3 samples, 0.06%)</title><rect x="304.6" y="341" width="0.7" height="15.0" fill="rgb(225,53,51)" rx="2" ry="2" />
<text  x="307.60" y="351.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%)</title><rect x="111.9" y="469" width="0.2" height="15.0" fill="rgb(250,152,18)" rx="2" ry="2" />
<text  x="114.91" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="48.8" y="213" width="0.2" height="15.0" fill="rgb(234,22,13)" rx="2" ry="2" />
<text  x="51.81" y="223.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (14 samples, 0.27%)</title><rect x="743.8" y="357" width="3.2" height="15.0" fill="rgb(239,226,40)" rx="2" ry="2" />
<text  x="746.78" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (4 samples, 0.08%)</title><rect x="1075.8" y="309" width="0.9" height="15.0" fill="rgb(225,63,12)" rx="2" ry="2" />
<text  x="1078.84" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="557.9" y="421" width="0.5" height="15.0" fill="rgb(216,103,33)" rx="2" ry="2" />
<text  x="560.90" y="431.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (1 samples, 0.02%)</title><rect x="1026.6" y="277" width="0.2" height="15.0" fill="rgb(215,142,16)" rx="2" ry="2" />
<text  x="1029.58" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (9 samples, 0.17%)</title><rect x="335.5" y="325" width="2.0" height="15.0" fill="rgb(250,114,48)" rx="2" ry="2" />
<text  x="338.47" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_recognizer (1 samples, 0.02%)</title><rect x="51.1" y="309" width="0.2" height="15.0" fill="rgb(241,9,11)" rx="2" ry="2" />
<text  x="54.08" y="319.5" ></text>
</g>
<g >
<title>seastar::fair_queue::dispatch_requests (1 samples, 0.02%)</title><rect x="1164.6" y="501" width="0.2" height="15.0" fill="rgb(219,80,39)" rx="2" ry="2" />
<text  x="1167.58" y="511.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (4 samples, 0.08%)</title><rect x="869.3" y="485" width="0.9" height="15.0" fill="rgb(245,226,45)" rx="2" ry="2" />
<text  x="872.30" y="495.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::submit&lt;seastar::syscall_result&lt;int&gt; &gt; (1 samples, 0.02%)</title><rect x="701.8" y="469" width="0.2" height="15.0" fill="rgb(252,207,27)" rx="2" ry="2" />
<text  x="704.79" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (2 samples, 0.04%)</title><rect x="722.9" y="469" width="0.5" height="15.0" fill="rgb(250,219,11)" rx="2" ry="2" />
<text  x="725.90" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (4 samples, 0.08%)</title><rect x="301.2" y="309" width="0.9" height="15.0" fill="rgb(244,216,14)" rx="2" ry="2" />
<text  x="304.20" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="843.0" y="437" width="0.2" height="15.0" fill="rgb(252,177,51)" rx="2" ry="2" />
<text  x="845.97" y="447.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (98 samples, 1.88%)</title><rect x="511.1" y="357" width="22.3" height="15.0" fill="rgb(214,77,32)" rx="2" ry="2" />
<text  x="514.14" y="367.5" >m..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="648.5" y="485" width="0.2" height="15.0" fill="rgb(241,194,2)" rx="2" ry="2" />
<text  x="651.46" y="495.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (1 samples, 0.02%)</title><rect x="1158.0" y="501" width="0.2" height="15.0" fill="rgb(226,22,3)" rx="2" ry="2" />
<text  x="1161.00" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (3 samples, 0.06%)</title><rect x="406.7" y="181" width="0.7" height="15.0" fill="rgb(233,214,29)" rx="2" ry="2" />
<text  x="409.74" y="191.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="57.4" y="197" width="0.3" height="15.0" fill="rgb(228,138,41)" rx="2" ry="2" />
<text  x="60.44" y="207.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (26 samples, 0.50%)</title><rect x="318.0" y="341" width="5.9" height="15.0" fill="rgb(231,91,11)" rx="2" ry="2" />
<text  x="320.99" y="351.5" ></text>
</g>
<g >
<title>seastar::aio_storage_context::submit_work (1 samples, 0.02%)</title><rect x="1163.9" y="533" width="0.2" height="15.0" fill="rgb(239,153,21)" rx="2" ry="2" />
<text  x="1166.90" y="543.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%)</title><rect x="665.7" y="453" width="0.2" height="15.0" fill="rgb(247,84,27)" rx="2" ry="2" />
<text  x="668.71" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::list_service_level_statement*, std::default_delete&lt;cql3::statements::list_service_level_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%)</title><rect x="66.7" y="341" width="0.3" height="15.0" fill="rgb(216,14,20)" rx="2" ry="2" />
<text  x="69.74" y="351.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (28 samples, 0.54%)</title><rect x="1112.2" y="309" width="6.3" height="15.0" fill="rgb(244,99,18)" rx="2" ry="2" />
<text  x="1115.15" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="211.8" y="197" width="1.1" height="15.0" fill="rgb(211,4,0)" rx="2" ry="2" />
<text  x="214.77" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="262.4" y="181" width="0.4" height="15.0" fill="rgb(208,120,23)" rx="2" ry="2" />
<text  x="265.39" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (4 samples, 0.08%)</title><rect x="515.9" y="293" width="0.9" height="15.0" fill="rgb(218,27,46)" rx="2" ry="2" />
<text  x="518.91" y="303.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (2 samples, 0.04%)</title><rect x="101.7" y="469" width="0.4" height="15.0" fill="rgb(213,176,46)" rx="2" ry="2" />
<text  x="104.69" y="479.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (6 samples, 0.12%)</title><rect x="332.7" y="341" width="1.4" height="15.0" fill="rgb(207,5,32)" rx="2" ry="2" />
<text  x="335.75" y="351.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (8 samples, 0.15%)</title><rect x="40.4" y="389" width="1.8" height="15.0" fill="rgb(206,84,29)" rx="2" ry="2" />
<text  x="43.41" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (2 samples, 0.04%)</title><rect x="847.3" y="421" width="0.4" height="15.0" fill="rgb(212,8,11)" rx="2" ry="2" />
<text  x="850.28" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="821.2" y="309" width="0.2" height="15.0" fill="rgb(231,204,8)" rx="2" ry="2" />
<text  x="824.18" y="319.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (3 samples, 0.06%)</title><rect x="1030.2" y="309" width="0.7" height="15.0" fill="rgb(215,123,45)" rx="2" ry="2" />
<text  x="1033.22" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="25.7" y="309" width="0.2" height="15.0" fill="rgb(217,134,24)" rx="2" ry="2" />
<text  x="28.66" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%)</title><rect x="827.8" y="373" width="0.2" height="15.0" fill="rgb(214,198,30)" rx="2" ry="2" />
<text  x="830.76" y="383.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%)</title><rect x="1116.5" y="229" width="0.2" height="15.0" fill="rgb(245,163,33)" rx="2" ry="2" />
<text  x="1119.46" y="239.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (6 samples, 0.12%)</title><rect x="897.4" y="341" width="1.4" height="15.0" fill="rgb(236,205,16)" rx="2" ry="2" />
<text  x="900.44" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (1 samples, 0.02%)</title><rect x="303.9" y="325" width="0.2" height="15.0" fill="rgb(251,101,47)" rx="2" ry="2" />
<text  x="306.92" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (1 samples, 0.02%)</title><rect x="987.1" y="357" width="0.2" height="15.0" fill="rgb(253,219,1)" rx="2" ry="2" />
<text  x="990.09" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%)</title><rect x="45.4" y="261" width="0.2" height="15.0" fill="rgb(237,109,16)" rx="2" ry="2" />
<text  x="48.41" y="271.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (30 samples, 0.58%)</title><rect x="157.8" y="469" width="6.8" height="15.0" fill="rgb(242,1,10)" rx="2" ry="2" />
<text  x="160.76" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%)</title><rect x="699.8" y="517" width="0.2" height="15.0" fill="rgb(238,52,7)" rx="2" ry="2" />
<text  x="702.75" y="527.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%)</title><rect x="703.2" y="501" width="0.2" height="15.0" fill="rgb(254,150,3)" rx="2" ry="2" />
<text  x="706.16" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="687.0" y="501" width="0.5" height="15.0" fill="rgb(223,141,38)" rx="2" ry="2" />
<text  x="690.04" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (46 samples, 0.88%)</title><rect x="703.4" y="533" width="10.4" height="15.0" fill="rgb(238,165,6)" rx="2" ry="2" />
<text  x="706.38" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%)</title><rect x="974.2" y="389" width="0.2" height="15.0" fill="rgb(249,125,5)" rx="2" ry="2" />
<text  x="977.15" y="399.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%)</title><rect x="671.2" y="517" width="0.6" height="15.0" fill="rgb(254,59,12)" rx="2" ry="2" />
<text  x="674.15" y="527.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (9 samples, 0.17%)</title><rect x="1121.5" y="309" width="2.0" height="15.0" fill="rgb(216,205,12)" rx="2" ry="2" />
<text  x="1124.46" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (1 samples, 0.02%)</title><rect x="601.9" y="421" width="0.3" height="15.0" fill="rgb(252,140,25)" rx="2" ry="2" />
<text  x="604.93" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%)</title><rect x="11.1" y="565" width="0.3" height="15.0" fill="rgb(240,83,19)" rx="2" ry="2" />
<text  x="14.13" y="575.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="67.2" y="325" width="0.2" height="15.0" fill="rgb(242,122,25)" rx="2" ry="2" />
<text  x="70.20" y="335.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (1 samples, 0.02%)</title><rect x="701.3" y="517" width="0.3" height="15.0" fill="rgb(219,205,9)" rx="2" ry="2" />
<text  x="704.34" y="527.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%)</title><rect x="263.1" y="165" width="0.2" height="15.0" fill="rgb(213,126,21)" rx="2" ry="2" />
<text  x="266.07" y="175.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (4 samples, 0.08%)</title><rect x="33.4" y="277" width="0.9" height="15.0" fill="rgb(251,69,4)" rx="2" ry="2" />
<text  x="36.38" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (1 samples, 0.02%)</title><rect x="625.1" y="469" width="0.2" height="15.0" fill="rgb(235,73,53)" rx="2" ry="2" />
<text  x="628.08" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::operator bool (1 samples, 0.02%)</title><rect x="60.2" y="357" width="0.2" height="15.0" fill="rgb(220,44,9)" rx="2" ry="2" />
<text  x="63.16" y="367.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (8 samples, 0.15%)</title><rect x="1018.6" y="197" width="1.9" height="15.0" fill="rgb(240,188,15)" rx="2" ry="2" />
<text  x="1021.64" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="567.9" y="453" width="0.2" height="15.0" fill="rgb(252,46,6)" rx="2" ry="2" />
<text  x="570.88" y="463.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%)</title><rect x="562.9" y="373" width="0.2" height="15.0" fill="rgb(227,187,30)" rx="2" ry="2" />
<text  x="565.89" y="383.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (1 samples, 0.02%)</title><rect x="618.7" y="453" width="0.3" height="15.0" fill="rgb(243,161,3)" rx="2" ry="2" />
<text  x="621.72" y="463.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (1 samples, 0.02%)</title><rect x="81.9" y="517" width="0.3" height="15.0" fill="rgb(228,2,27)" rx="2" ry="2" />
<text  x="84.95" y="527.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (7 samples, 0.13%)</title><rect x="552.7" y="309" width="1.6" height="15.0" fill="rgb(228,95,41)" rx="2" ry="2" />
<text  x="555.68" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt;::emplace_back&lt;service::storage_proxy&amp;, unsigned long&gt; (1 samples, 0.02%)</title><rect x="1126.9" y="277" width="0.2" height="15.0" fill="rgb(236,184,36)" rx="2" ry="2" />
<text  x="1129.90" y="287.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;, std::_Bind_front&lt;bool  (1 samples, 0.02%)</title><rect x="872.7" y="405" width="0.2" height="15.0" fill="rgb(206,220,24)" rx="2" ry="2" />
<text  x="875.70" y="415.5" ></text>
</g>
<g >
<title>db::system_keyspace::large_cells (1 samples, 0.02%)</title><rect x="20.0" y="309" width="0.2" height="15.0" fill="rgb(206,48,36)" rx="2" ry="2" />
<text  x="22.99" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%)</title><rect x="63.1" y="309" width="0.2" height="15.0" fill="rgb(212,206,18)" rx="2" ry="2" />
<text  x="66.11" y="319.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="557.9" y="437" width="0.5" height="15.0" fill="rgb(243,180,22)" rx="2" ry="2" />
<text  x="560.90" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (7 samples, 0.13%)</title><rect x="406.3" y="213" width="1.6" height="15.0" fill="rgb(225,219,1)" rx="2" ry="2" />
<text  x="409.28" y="223.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.62%)</title><rect x="1120.5" y="469" width="7.3" height="15.0" fill="rgb(244,101,2)" rx="2" ry="2" />
<text  x="1123.55" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (33 samples, 0.63%)</title><rect x="593.5" y="405" width="7.5" height="15.0" fill="rgb(254,137,25)" rx="2" ry="2" />
<text  x="596.53" y="415.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (665 samples, 12.79%)</title><rect x="176.4" y="405" width="150.9" height="15.0" fill="rgb(219,192,2)" rx="2" ry="2" />
<text  x="179.37" y="415.5" >seastar::repeat&lt;mer..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::alter_service_level_statement*, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt; &gt;::_M_head (1 samples, 0.02%)</title><rect x="65.4" y="341" width="0.2" height="15.0" fill="rgb(246,172,30)" rx="2" ry="2" />
<text  x="68.38" y="351.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%)</title><rect x="702.2" y="197" width="0.3" height="15.0" fill="rgb(207,12,49)" rx="2" ry="2" />
<text  x="705.25" y="207.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (206 samples, 3.96%)</title><rect x="22.5" y="485" width="46.7" height="15.0" fill="rgb(216,127,37)" rx="2" ry="2" />
<text  x="25.48" y="495.5" >cql3..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="54.7" y="149" width="0.2" height="15.0" fill="rgb(237,185,43)" rx="2" ry="2" />
<text  x="57.71" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (5 samples, 0.10%)</title><rect x="527.3" y="261" width="1.1" height="15.0" fill="rgb(223,1,36)" rx="2" ry="2" />
<text  x="530.26" y="271.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%)</title><rect x="1024.5" y="245" width="1.4" height="15.0" fill="rgb(251,44,33)" rx="2" ry="2" />
<text  x="1027.54" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%)</title><rect x="49.5" y="213" width="0.4" height="15.0" fill="rgb(239,90,13)" rx="2" ry="2" />
<text  x="52.49" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (4 samples, 0.08%)</title><rect x="872.9" y="389" width="0.9" height="15.0" fill="rgb(219,210,12)" rx="2" ry="2" />
<text  x="875.93" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (3 samples, 0.06%)</title><rect x="175.2" y="405" width="0.7" height="15.0" fill="rgb(244,210,48)" rx="2" ry="2" />
<text  x="178.23" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%)</title><rect x="45.4" y="197" width="0.2" height="15.0" fill="rgb(205,211,5)" rx="2" ry="2" />
<text  x="48.41" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%)</title><rect x="1079.0" y="373" width="0.2" height="15.0" fill="rgb(213,155,46)" rx="2" ry="2" />
<text  x="1082.01" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (2 samples, 0.04%)</title><rect x="407.4" y="197" width="0.5" height="15.0" fill="rgb(221,102,6)" rx="2" ry="2" />
<text  x="410.42" y="207.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,748 samples, 91.33%)</title><rect x="88.5" y="629" width="1077.7" height="15.0" fill="rgb(239,55,0)" rx="2" ry="2" />
<text  x="91.53" y="639.5" >seastar::app_template::run</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="436.7" y="197" width="0.2" height="15.0" fill="rgb(247,206,37)" rx="2" ry="2" />
<text  x="439.70" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%)</title><rect x="783.7" y="389" width="0.3" height="15.0" fill="rgb(225,136,35)" rx="2" ry="2" />
<text  x="786.73" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (40 samples, 0.77%)</title><rect x="28.6" y="341" width="9.1" height="15.0" fill="rgb(236,115,45)" rx="2" ry="2" />
<text  x="31.61" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="552.9" y="261" width="0.2" height="15.0" fill="rgb(241,206,38)" rx="2" ry="2" />
<text  x="555.90" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%)</title><rect x="567.7" y="453" width="0.2" height="15.0" fill="rgb(223,180,34)" rx="2" ry="2" />
<text  x="570.66" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (4 samples, 0.08%)</title><rect x="605.8" y="453" width="0.9" height="15.0" fill="rgb(223,95,51)" rx="2" ry="2" />
<text  x="608.79" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (37 samples, 0.71%)</title><rect x="662.8" y="517" width="8.4" height="15.0" fill="rgb(254,119,5)" rx="2" ry="2" />
<text  x="665.76" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%)</title><rect x="1027.5" y="261" width="0.2" height="15.0" fill="rgb(232,56,20)" rx="2" ry="2" />
<text  x="1030.49" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (15 samples, 0.29%)</title><rect x="210.0" y="261" width="3.4" height="15.0" fill="rgb(229,138,42)" rx="2" ry="2" />
<text  x="212.96" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (4 samples, 0.08%)</title><rect x="206.8" y="277" width="0.9" height="15.0" fill="rgb(235,21,37)" rx="2" ry="2" />
<text  x="209.78" y="287.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="1099.9" y="453" width="0.2" height="15.0" fill="rgb(236,170,6)" rx="2" ry="2" />
<text  x="1102.89" y="463.5" ></text>
</g>
<g >
<title>seastar::open_directory (1 samples, 0.02%)</title><rect x="701.8" y="501" width="0.2" height="15.0" fill="rgb(247,205,48)" rx="2" ry="2" />
<text  x="704.79" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%)</title><rect x="1101.3" y="421" width="1.1" height="15.0" fill="rgb(218,59,31)" rx="2" ry="2" />
<text  x="1104.26" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (13 samples, 0.25%)</title><rect x="101.2" y="485" width="3.0" height="15.0" fill="rgb(233,4,21)" rx="2" ry="2" />
<text  x="104.24" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%)</title><rect x="626.0" y="469" width="0.2" height="15.0" fill="rgb(205,181,32)" rx="2" ry="2" />
<text  x="628.99" y="479.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (15 samples, 0.29%)</title><rect x="1114.9" y="277" width="3.4" height="15.0" fill="rgb(222,167,24)" rx="2" ry="2" />
<text  x="1117.87" y="287.5" ></text>
</g>
<g >
<title>schema::column_at (2 samples, 0.04%)</title><rect x="261.7" y="149" width="0.5" height="15.0" fill="rgb(244,0,12)" rx="2" ry="2" />
<text  x="264.71" y="159.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (2 samples, 0.04%)</title><rect x="639.4" y="453" width="0.4" height="15.0" fill="rgb(250,128,25)" rx="2" ry="2" />
<text  x="642.38" y="463.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%)</title><rect x="876.8" y="325" width="0.2" height="15.0" fill="rgb(244,113,33)" rx="2" ry="2" />
<text  x="879.79" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (3 samples, 0.06%)</title><rect x="251.0" y="101" width="0.7" height="15.0" fill="rgb(234,121,36)" rx="2" ry="2" />
<text  x="254.04" y="111.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%)</title><rect x="123.0" y="501" width="0.5" height="15.0" fill="rgb(205,59,16)" rx="2" ry="2" />
<text  x="126.03" y="511.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%)</title><rect x="702.2" y="373" width="0.3" height="15.0" fill="rgb(253,50,37)" rx="2" ry="2" />
<text  x="705.25" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%)</title><rect x="1087.4" y="405" width="0.2" height="15.0" fill="rgb(234,45,37)" rx="2" ry="2" />
<text  x="1090.41" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%)</title><rect x="60.8" y="325" width="0.3" height="15.0" fill="rgb(217,94,52)" rx="2" ry="2" />
<text  x="63.84" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (5 samples, 0.10%)</title><rect x="983.5" y="309" width="1.1" height="15.0" fill="rgb(253,103,8)" rx="2" ry="2" />
<text  x="986.46" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (1 samples, 0.02%)</title><rect x="1126.4" y="181" width="0.3" height="15.0" fill="rgb(231,118,25)" rx="2" ry="2" />
<text  x="1129.45" y="191.5" ></text>
</g>
<g >
<title>difference&lt;std::map, utils::UUID, schema_mutations, std::equal_to&lt;schema_mutations&gt;, std::less&lt;utils::UUID&gt;, std::allocator&lt;std::pair&lt;utils::UUID const, schema_mutations&gt; &gt; &gt; (1 samples, 0.02%)</title><rect x="111.2" y="485" width="0.3" height="15.0" fill="rgb(223,76,36)" rx="2" ry="2" />
<text  x="114.23" y="495.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%)</title><rect x="54.7" y="181" width="0.2" height="15.0" fill="rgb(234,146,45)" rx="2" ry="2" />
<text  x="57.71" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%)</title><rect x="66.5" y="405" width="0.2" height="15.0" fill="rgb(218,17,8)" rx="2" ry="2" />
<text  x="69.51" y="415.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%)</title><rect x="449.2" y="373" width="0.4" height="15.0" fill="rgb(220,172,10)" rx="2" ry="2" />
<text  x="452.18" y="383.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%)</title><rect x="436.9" y="213" width="0.3" height="15.0" fill="rgb(247,76,6)" rx="2" ry="2" />
<text  x="439.92" y="223.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%)</title><rect x="1164.4" y="437" width="0.2" height="15.0" fill="rgb(253,80,27)" rx="2" ry="2" />
<text  x="1167.35" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (13 samples, 0.25%)</title><rect x="56.1" y="325" width="2.9" height="15.0" fill="rgb(212,51,40)" rx="2" ry="2" />
<text  x="59.07" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%)</title><rect x="57.4" y="149" width="0.3" height="15.0" fill="rgb(243,72,46)" rx="2" ry="2" />
<text  x="60.44" y="159.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (1 samples, 0.02%)</title><rect x="766.7" y="437" width="0.2" height="15.0" fill="rgb(248,211,12)" rx="2" ry="2" />
<text  x="769.71" y="447.5" ></text>
</g>
<g >
<title>boost::iterators::filter_iterator&lt;mutation_partition::non_dummy_rows (1 samples, 0.02%)</title><rect x="1123.5" y="181" width="0.2" height="15.0" fill="rgb(208,139,46)" rx="2" ry="2" />
<text  x="1126.50" y="191.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (20 samples, 0.38%)</title><rect x="194.5" y="293" width="4.6" height="15.0" fill="rgb(236,202,44)" rx="2" ry="2" />
<text  x="197.52" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%)</title><rect x="58.3" y="101" width="0.5" height="15.0" fill="rgb(210,128,31)" rx="2" ry="2" />
<text  x="61.34" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (13 samples, 0.25%)</title><rect x="1032.7" y="293" width="3.0" height="15.0" fill="rgb(248,227,34)" rx="2" ry="2" />
<text  x="1035.71" y="303.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%)</title><rect x="791.9" y="341" width="0.7" height="15.0" fill="rgb(237,208,16)" rx="2" ry="2" />
<text  x="794.90" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (2 samples, 0.04%)</title><rect x="717.0" y="485" width="0.5" height="15.0" fill="rgb(230,121,1)" rx="2" ry="2" />
<text  x="720.00" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%)</title><rect x="58.1" y="165" width="0.2" height="15.0" fill="rgb(218,184,24)" rx="2" ry="2" />
<text  x="61.12" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (8 samples, 0.15%)</title><rect x="835.3" y="357" width="1.8" height="15.0" fill="rgb(233,128,20)" rx="2" ry="2" />
<text  x="838.25" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cfName (2 samples, 0.04%)</title><rect x="43.1" y="373" width="0.5" height="15.0" fill="rgb(208,1,1)" rx="2" ry="2" />
<text  x="46.14" y="383.5" ></text>
</g>
<g >
<title>operator new (22 samples, 0.42%)</title><rect x="1008.0" y="277" width="5.0" height="15.0" fill="rgb(208,169,20)" rx="2" ry="2" />
<text  x="1010.97" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (16 samples, 0.31%)</title><rect x="60.8" y="373" width="3.7" height="15.0" fill="rgb(210,207,29)" rx="2" ry="2" />
<text  x="63.84" y="383.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (2 samples, 0.04%)</title><rect x="287.6" y="245" width="0.4" height="15.0" fill="rgb(225,50,16)" rx="2" ry="2" />
<text  x="290.58" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="326.4" y="389" width="0.2" height="15.0" fill="rgb(217,106,52)" rx="2" ry="2" />
<text  x="329.39" y="399.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_890c8f4026fb5657cc774dcb869d5487d413f0d3] (1 samples, 0.02%)</title><rect x="1125.8" y="149" width="0.2" height="15.0" fill="rgb(216,167,6)" rx="2" ry="2" />
<text  x="1128.77" y="159.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (39 samples, 0.75%)</title><rect x="1111.7" y="469" width="8.8" height="15.0" fill="rgb(238,97,12)" rx="2" ry="2" />
<text  x="1114.70" y="479.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (3 samples, 0.06%)</title><rect x="1155.7" y="501" width="0.7" height="15.0" fill="rgb(250,71,51)" rx="2" ry="2" />
<text  x="1158.73" y="511.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (1 samples, 0.02%)</title><rect x="344.1" y="229" width="0.2" height="15.0" fill="rgb(223,45,0)" rx="2" ry="2" />
<text  x="347.10" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%)</title><rect x="450.8" y="405" width="0.2" height="15.0" fill="rgb(226,188,17)" rx="2" ry="2" />
<text  x="453.77" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%)</title><rect x="54.5" y="277" width="0.4" height="15.0" fill="rgb(227,42,33)" rx="2" ry="2" />
<text  x="57.49" y="287.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (4 samples, 0.08%)</title><rect x="592.6" y="405" width="0.9" height="15.0" fill="rgb(235,151,14)" rx="2" ry="2" />
<text  x="595.62" y="415.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%)</title><rect x="509.3" y="341" width="0.5" height="15.0" fill="rgb(207,101,9)" rx="2" ry="2" />
<text  x="512.33" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%)</title><rect x="112.8" y="261" width="0.2" height="15.0" fill="rgb(239,204,32)" rx="2" ry="2" />
<text  x="115.82" y="271.5" ></text>
</g>
<g >
<title>boost::range::remove_erase_if&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, boost::algorithm::detail::is_any_ofF&lt;char&gt; &gt; (1 samples, 0.02%)</title><rect x="703.2" y="245" width="0.2" height="15.0" fill="rgb(215,70,18)" rx="2" ry="2" />
<text  x="706.16" y="255.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%)</title><rect x="591.9" y="389" width="0.3" height="15.0" fill="rgb(205,123,15)" rx="2" ry="2" />
<text  x="594.94" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%)</title><rect x="86.3" y="357" width="0.4" height="15.0" fill="rgb(248,117,25)" rx="2" ry="2" />
<text  x="89.26" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_check_len (2 samples, 0.04%)</title><rect x="52.7" y="293" width="0.4" height="15.0" fill="rgb(212,221,5)" rx="2" ry="2" />
<text  x="55.67" y="303.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%)</title><rect x="45.2" y="309" width="0.4" height="15.0" fill="rgb(231,37,33)" rx="2" ry="2" />
<text  x="48.18" y="319.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;partition_version&gt; (1 samples, 0.02%)</title><rect x="1113.5" y="149" width="0.2" height="15.0" fill="rgb(249,31,22)" rx="2" ry="2" />
<text  x="1116.51" y="159.5" ></text>
</g>
<g >
<title>cql3::terminal::to_expression (1 samples, 0.02%)</title><rect x="74.7" y="357" width="0.2" height="15.0" fill="rgb(245,182,46)" rx="2" ry="2" />
<text  x="77.69" y="367.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (3 samples, 0.06%)</title><rect x="1019.8" y="181" width="0.7" height="15.0" fill="rgb(253,46,35)" rx="2" ry="2" />
<text  x="1022.77" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (1 samples, 0.02%)</title><rect x="905.8" y="373" width="0.3" height="15.0" fill="rgb(227,176,6)" rx="2" ry="2" />
<text  x="908.84" y="383.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (674 samples, 12.96%)</title><rect x="174.3" y="421" width="153.0" height="15.0" fill="rgb(222,37,45)" rx="2" ry="2" />
<text  x="177.32" y="431.5" >merging_reader&lt;muta..</text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (9 samples, 0.17%)</title><rect x="781.5" y="421" width="2.0" height="15.0" fill="rgb(224,105,50)" rx="2" ry="2" />
<text  x="784.46" y="431.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (21 samples, 0.40%)</title><rect x="391.5" y="197" width="4.8" height="15.0" fill="rgb(225,145,39)" rx="2" ry="2" />
<text  x="394.53" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (5 samples, 0.10%)</title><rect x="936.3" y="421" width="1.1" height="15.0" fill="rgb(215,208,29)" rx="2" ry="2" />
<text  x="939.25" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="46.3" y="165" width="0.2" height="15.0" fill="rgb(248,4,18)" rx="2" ry="2" />
<text  x="49.31" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;sstables::scylla_metadata_type const, boost::variant&lt;sstables::disk_tagged_union_member&lt;sstables::scylla_metadata_type,  (1 samples, 0.02%)</title><rect x="702.0" y="405" width="0.2" height="15.0" fill="rgb(212,37,53)" rx="2" ry="2" />
<text  x="705.02" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="85.6" y="437" width="0.2" height="15.0" fill="rgb(207,168,51)" rx="2" ry="2" />
<text  x="88.58" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (1 samples, 0.02%)</title><rect x="106.9" y="485" width="0.2" height="15.0" fill="rgb(252,159,17)" rx="2" ry="2" />
<text  x="109.91" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="702.7" y="517" width="0.2" height="15.0" fill="rgb(207,85,25)" rx="2" ry="2" />
<text  x="705.70" y="527.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%)</title><rect x="443.5" y="309" width="0.2" height="15.0" fill="rgb(231,177,7)" rx="2" ry="2" />
<text  x="446.51" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,307 samples, 44.37%)</title><rect x="123.5" y="501" width="523.6" height="15.0" fill="rgb(243,104,34)" rx="2" ry="2" />
<text  x="126.48" y="511.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (12 samples, 0.23%)</title><rect x="636.7" y="453" width="2.7" height="15.0" fill="rgb(211,2,47)" rx="2" ry="2" />
<text  x="639.66" y="463.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%)</title><rect x="439.2" y="229" width="0.2" height="15.0" fill="rgb(213,216,27)" rx="2" ry="2" />
<text  x="442.19" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%)</title><rect x="337.1" y="277" width="0.2" height="15.0" fill="rgb(223,93,29)" rx="2" ry="2" />
<text  x="340.06" y="287.5" ></text>
</g>
<g >
<title>sstables::metadata_collector::update_min_max_components (1 samples, 0.02%)</title><rect x="87.8" y="437" width="0.3" height="15.0" fill="rgb(208,2,52)" rx="2" ry="2" />
<text  x="90.85" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::alter_service_level_statement*, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt; &gt; (1 samples, 0.02%)</title><rect x="65.4" y="373" width="0.2" height="15.0" fill="rgb(210,111,29)" rx="2" ry="2" />
<text  x="68.38" y="383.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (5 samples, 0.10%)</title><rect x="80.8" y="501" width="1.1" height="15.0" fill="rgb(219,209,11)" rx="2" ry="2" />
<text  x="83.81" y="511.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (1 samples, 0.02%)</title><rect x="595.1" y="373" width="0.2" height="15.0" fill="rgb(241,164,45)" rx="2" ry="2" />
<text  x="598.12" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%)</title><rect x="20.2" y="389" width="0.2" height="15.0" fill="rgb(252,161,0)" rx="2" ry="2" />
<text  x="23.21" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (600 samples, 11.54%)</title><rect x="731.5" y="533" width="136.2" height="15.0" fill="rgb(220,102,38)" rx="2" ry="2" />
<text  x="734.53" y="543.5" >seastar::internal..</text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (11 samples, 0.21%)</title><rect x="321.4" y="325" width="2.5" height="15.0" fill="rgb(214,188,35)" rx="2" ry="2" />
<text  x="324.40" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_digest_requests (1 samples, 0.02%)</title><rect x="1037.9" y="357" width="0.3" height="15.0" fill="rgb(220,155,1)" rx="2" ry="2" />
<text  x="1040.93" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%)</title><rect x="58.1" y="85" width="0.2" height="15.0" fill="rgb(225,38,44)" rx="2" ry="2" />
<text  x="61.12" y="95.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%)</title><rect x="475.7" y="309" width="0.3" height="15.0" fill="rgb(237,58,40)" rx="2" ry="2" />
<text  x="478.74" y="319.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%)</title><rect x="452.1" y="453" width="0.3" height="15.0" fill="rgb(234,76,13)" rx="2" ry="2" />
<text  x="455.13" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%)</title><rect x="24.1" y="277" width="0.2" height="15.0" fill="rgb(242,68,13)" rx="2" ry="2" />
<text  x="27.07" y="287.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%)</title><rect x="643.9" y="421" width="0.2" height="15.0" fill="rgb(208,151,54)" rx="2" ry="2" />
<text  x="646.92" y="431.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%)</title><rect x="993.4" y="325" width="0.3" height="15.0" fill="rgb(207,143,10)" rx="2" ry="2" />
<text  x="996.45" y="335.5" ></text>
</g>
<g >
<title>make_combined_reader (81 samples, 1.56%)</title><rect x="463.0" y="373" width="18.4" height="15.0" fill="rgb(210,75,20)" rx="2" ry="2" />
<text  x="466.03" y="383.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (1 samples, 0.02%)</title><rect x="877.5" y="373" width="0.2" height="15.0" fill="rgb(248,127,9)" rx="2" ry="2" />
<text  x="880.47" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%)</title><rect x="683.4" y="501" width="0.2" height="15.0" fill="rgb(246,219,29)" rx="2" ry="2" />
<text  x="686.41" y="511.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_890c8f4026fb5657cc774dcb869d5487d413f0d3] (1 samples, 0.02%)</title><rect x="1045.0" y="293" width="0.2" height="15.0" fill="rgb(210,118,41)" rx="2" ry="2" />
<text  x="1047.97" y="303.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (14 samples, 0.27%)</title><rect x="615.5" y="437" width="3.2" height="15.0" fill="rgb(207,33,12)" rx="2" ry="2" />
<text  x="618.55" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%)</title><rect x="1139.4" y="485" width="0.4" height="15.0" fill="rgb(210,6,42)" rx="2" ry="2" />
<text  x="1142.39" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (4 samples, 0.08%)</title><rect x="666.8" y="501" width="0.9" height="15.0" fill="rgb(224,116,43)" rx="2" ry="2" />
<text  x="669.84" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%)</title><rect x="305.7" y="357" width="0.3" height="15.0" fill="rgb(232,126,26)" rx="2" ry="2" />
<text  x="308.74" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%)</title><rect x="41.5" y="277" width="0.5" height="15.0" fill="rgb(224,27,12)" rx="2" ry="2" />
<text  x="44.55" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%)</title><rect x="326.2" y="389" width="0.2" height="15.0" fill="rgb(210,221,51)" rx="2" ry="2" />
<text  x="329.16" y="399.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (8 samples, 0.15%)</title><rect x="347.7" y="213" width="1.8" height="15.0" fill="rgb(226,123,36)" rx="2" ry="2" />
<text  x="350.73" y="223.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (6 samples, 0.12%)</title><rect x="74.5" y="405" width="1.3" height="15.0" fill="rgb(219,180,14)" rx="2" ry="2" />
<text  x="77.46" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%)</title><rect x="1128.0" y="517" width="0.5" height="15.0" fill="rgb(223,181,16)" rx="2" ry="2" />
<text  x="1131.04" y="527.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1119.9" y="245" width="0.2" height="15.0" fill="rgb(225,5,0)" rx="2" ry="2" />
<text  x="1122.87" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (4 samples, 0.08%)</title><rect x="784.0" y="389" width="0.9" height="15.0" fill="rgb(216,71,44)" rx="2" ry="2" />
<text  x="786.96" y="399.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%)</title><rect x="1044.7" y="309" width="0.5" height="15.0" fill="rgb(223,16,23)" rx="2" ry="2" />
<text  x="1047.74" y="319.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::to_receivers (1 samples, 0.02%)</title><rect x="74.9" y="389" width="0.2" height="15.0" fill="rgb(233,58,13)" rx="2" ry="2" />
<text  x="77.91" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%)</title><rect x="225.8" y="165" width="0.7" height="15.0" fill="rgb(213,98,24)" rx="2" ry="2" />
<text  x="228.85" y="175.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (1 samples, 0.02%)</title><rect x="1164.4" y="197" width="0.2" height="15.0" fill="rgb(251,225,2)" rx="2" ry="2" />
<text  x="1167.35" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_M_insert_range_unique&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const*&gt; (1 samples, 0.02%)</title><rect x="113.0" y="405" width="0.3" height="15.0" fill="rgb(217,44,17)" rx="2" ry="2" />
<text  x="116.04" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (7 samples, 0.13%)</title><rect x="1148.9" y="485" width="1.6" height="15.0" fill="rgb(253,213,28)" rx="2" ry="2" />
<text  x="1151.92" y="495.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%)</title><rect x="1048.8" y="357" width="2.1" height="15.0" fill="rgb(220,197,15)" rx="2" ry="2" />
<text  x="1051.83" y="367.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%)</title><rect x="24.8" y="405" width="0.2" height="15.0" fill="rgb(205,204,3)" rx="2" ry="2" />
<text  x="27.75" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, column_definition const*, std::allocator&lt;column_definition const*&gt;, std::__detail::_Identity, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (1 samples, 0.02%)</title><rect x="79.0" y="437" width="0.2" height="15.0" fill="rgb(248,207,12)" rx="2" ry="2" />
<text  x="82.00" y="447.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%)</title><rect x="267.6" y="181" width="0.5" height="15.0" fill="rgb(227,110,11)" rx="2" ry="2" />
<text  x="270.61" y="191.5" ></text>
</g>
<g >
<title>database::find_uuid (2 samples, 0.04%)</title><rect x="80.1" y="453" width="0.5" height="15.0" fill="rgb(234,78,18)" rx="2" ry="2" />
<text  x="83.13" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%)</title><rect x="63.3" y="293" width="0.3" height="15.0" fill="rgb(252,107,4)" rx="2" ry="2" />
<text  x="66.34" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%)</title><rect x="85.6" y="453" width="0.2" height="15.0" fill="rgb(233,138,45)" rx="2" ry="2" />
<text  x="88.58" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (16 samples, 0.31%)</title><rect x="1123.5" y="293" width="3.6" height="15.0" fill="rgb(207,117,47)" rx="2" ry="2" />
<text  x="1126.50" y="303.5" ></text>
</g>
<g >
<title>free (3 samples, 0.06%)</title><rect x="102.1" y="453" width="0.7" height="15.0" fill="rgb(208,78,8)" rx="2" ry="2" />
<text  x="105.15" y="463.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%)</title><rect x="27.2" y="245" width="0.3" height="15.0" fill="rgb(241,140,49)" rx="2" ry="2" />
<text  x="30.25" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (3 samples, 0.06%)</title><rect x="49.3" y="309" width="0.6" height="15.0" fill="rgb(237,87,14)" rx="2" ry="2" />
<text  x="52.27" y="319.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%)</title><rect x="449.6" y="405" width="0.9" height="15.0" fill="rgb(245,225,41)" rx="2" ry="2" />
<text  x="452.63" y="415.5" ></text>
</g>
<g >
<title>[[vdso]] (31 samples, 0.60%)</title><rect x="1170.0" y="645" width="7.1" height="15.0" fill="rgb(236,50,0)" rx="2" ry="2" />
<text  x="1173.03" y="655.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (3 samples, 0.06%)</title><rect x="31.6" y="293" width="0.6" height="15.0" fill="rgb(212,140,49)" rx="2" ry="2" />
<text  x="34.56" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%)</title><rect x="862.5" y="453" width="1.6" height="15.0" fill="rgb(220,148,14)" rx="2" ry="2" />
<text  x="865.49" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;sstables::shareable_components&gt;::dispose (1 samples, 0.02%)</title><rect x="702.0" y="469" width="0.2" height="15.0" fill="rgb(221,116,35)" rx="2" ry="2" />
<text  x="705.02" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%)</title><rect x="811.0" y="181" width="1.1" height="15.0" fill="rgb(231,178,37)" rx="2" ry="2" />
<text  x="813.97" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%)</title><rect x="512.1" y="309" width="0.4" height="15.0" fill="rgb(225,215,5)" rx="2" ry="2" />
<text  x="515.05" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (2 samples, 0.04%)</title><rect x="293.7" y="293" width="0.5" height="15.0" fill="rgb(243,142,19)" rx="2" ry="2" />
<text  x="296.71" y="303.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%)</title><rect x="627.8" y="453" width="0.2" height="15.0" fill="rgb(231,94,1)" rx="2" ry="2" />
<text  x="630.80" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%)</title><rect x="60.8" y="357" width="0.3" height="15.0" fill="rgb(250,221,27)" rx="2" ry="2" />
<text  x="63.84" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%)</title><rect x="46.5" y="341" width="0.3" height="15.0" fill="rgb(212,205,20)" rx="2" ry="2" />
<text  x="49.54" y="351.5" ></text>
</g>
<g >
<title>query::result::builder::build (1 samples, 0.02%)</title><rect x="111.5" y="325" width="0.2" height="15.0" fill="rgb(218,131,17)" rx="2" ry="2" />
<text  x="114.45" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (4 samples, 0.08%)</title><rect x="87.2" y="501" width="0.9" height="15.0" fill="rgb(247,33,39)" rx="2" ry="2" />
<text  x="90.17" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%)</title><rect x="855.7" y="453" width="0.2" height="15.0" fill="rgb(228,165,30)" rx="2" ry="2" />
<text  x="858.68" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%)</title><rect x="950.1" y="373" width="0.2" height="15.0" fill="rgb(205,40,30)" rx="2" ry="2" />
<text  x="953.10" y="383.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::reactor::task_queue, unsigned int&amp;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;, float&amp;&gt; (1 samples, 0.02%)</title><rect x="114.2" y="453" width="0.2" height="15.0" fill="rgb(208,108,8)" rx="2" ry="2" />
<text  x="117.18" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%)</title><rect x="1084.9" y="405" width="0.2" height="15.0" fill="rgb(232,210,34)" rx="2" ry="2" />
<text  x="1087.91" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (2 samples, 0.04%)</title><rect x="873.4" y="357" width="0.4" height="15.0" fill="rgb(235,219,21)" rx="2" ry="2" />
<text  x="876.38" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (1 samples, 0.02%)</title><rect x="351.6" y="197" width="0.2" height="15.0" fill="rgb(207,222,45)" rx="2" ry="2" />
<text  x="354.58" y="207.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (408 samples, 7.85%)</title><rect x="201.8" y="309" width="92.6" height="15.0" fill="rgb(240,0,13)" rx="2" ry="2" />
<text  x="204.79" y="319.5" >logalloc::a..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%)</title><rect x="607.1" y="421" width="0.3" height="15.0" fill="rgb(252,197,40)" rx="2" ry="2" />
<text  x="610.15" y="431.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (3 samples, 0.06%)</title><rect x="111.9" y="501" width="0.7" height="15.0" fill="rgb(231,62,46)" rx="2" ry="2" />
<text  x="114.91" y="511.5" ></text>
</g>
<g >
<title>schema::column_at (4 samples, 0.08%)</title><rect x="254.0" y="149" width="0.9" height="15.0" fill="rgb(226,20,45)" rx="2" ry="2" />
<text  x="256.99" y="159.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (45 samples, 0.87%)</title><rect x="591.7" y="421" width="10.2" height="15.0" fill="rgb(238,81,7)" rx="2" ry="2" />
<text  x="594.72" y="431.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (39 samples, 0.75%)</title><rect x="346.4" y="245" width="8.8" height="15.0" fill="rgb(215,218,19)" rx="2" ry="2" />
<text  x="349.36" y="255.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (2 samples, 0.04%)</title><rect x="558.4" y="437" width="0.4" height="15.0" fill="rgb(210,119,29)" rx="2" ry="2" />
<text  x="561.35" y="447.5" ></text>
</g>
</g>
</svg>
