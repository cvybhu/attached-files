<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>query::result_memory_accounter::result_memory_accounter (10 samples, 0.02%; +0.01%)</title><rect x="597.8" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="600.76" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (5 samples, 0.01%; +0.01%)</title><rect x="987.3" y="325" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="990.31" y="335.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (406 samples, 0.86%; +0.08%)</title><rect x="63.0" y="437" width="10.2" height="15.0" fill="rgb(255,73,73)" rx="2" ry="2" />
<text  x="66.02" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (6 samples, 0.01%; -0.00%)</title><rect x="121.2" y="293" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="124.19" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (18 samples, 0.04%; -0.00%)</title><rect x="767.0" y="357" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="769.98" y="367.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (54 samples, 0.11%; -0.01%)</title><rect x="592.3" y="389" width="1.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="595.33" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (40 samples, 0.08%; +0.02%)</title><rect x="493.0" y="277" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="496.05" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (117 samples, 0.25%; +0.04%)</title><rect x="837.4" y="389" width="3.0" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="840.44" y="399.5" ></text>
</g>
<g >
<title>schema::column_at (19 samples, 0.04%; +0.00%)</title><rect x="389.9" y="181" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="392.92" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (4 samples, 0.01%; -0.00%)</title><rect x="1141.3" y="133" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1144.34" y="143.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (4 samples, 0.01%; +0.00%)</title><rect x="682.1" y="485" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="685.09" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (345 samples, 0.73%; +0.04%)</title><rect x="64.2" y="421" width="8.6" height="15.0" fill="rgb(255,143,143)" rx="2" ry="2" />
<text  x="67.17" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (7 samples, 0.01%; -0.00%)</title><rect x="25.6" y="517" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="28.57" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (17 samples, 0.04%; -0.01%)</title><rect x="112.2" y="373" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="115.18" y="383.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (31 samples, 0.07%; +0.00%)</title><rect x="824.6" y="293" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="827.58" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (12 samples, 0.03%; +0.01%)</title><rect x="139.3" y="213" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="142.29" y="223.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (38 samples, 0.08%; +0.02%)</title><rect x="418.0" y="261" width="0.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="420.98" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (10 samples, 0.02%; +0.01%)</title><rect x="303.7" y="245" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="306.70" y="255.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (7 samples, 0.01%; +0.01%)</title><rect x="692.7" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="695.73" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (7 samples, 0.01%; 0.00%)</title><rect x="896.0" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="899.02" y="335.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (27 samples, 0.06%; -0.01%)</title><rect x="1059.7" y="277" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1062.71" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (4 samples, 0.01%; +0.00%)</title><rect x="134.4" y="245" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="137.41" y="255.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (179 samples, 0.38%; -0.00%)</title><rect x="848.9" y="437" width="4.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="851.91" y="447.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (307 samples, 0.65%; 0.00%)</title><rect x="475.9" y="245" width="7.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="478.85" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (6 samples, 0.01%; +0.00%)</title><rect x="624.4" y="453" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="627.44" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (10 samples, 0.02%; -0.02%)</title><rect x="321.8" y="197" width="0.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="324.80" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="1039.4" y="261" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1042.36" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (246 samples, 0.52%; +0.01%)</title><rect x="255.6" y="293" width="6.1" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="258.57" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (12 samples, 0.03%; +0.01%)</title><rect x="414.8" y="277" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="417.77" y="287.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (29 samples, 0.06%; +0.02%)</title><rect x="596.8" y="405" width="0.8" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="599.83" y="415.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (4 samples, 0.01%; +0.01%)</title><rect x="321.4" y="213" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="324.35" y="223.5" ></text>
</g>
<g >
<title>operator new (81 samples, 0.17%; +0.00%)</title><rect x="980.5" y="325" width="2.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="983.48" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.01%; 0.00%)</title><rect x="17.4" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.43" y="255.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (60 samples, 0.13%; -0.02%)</title><rect x="396.8" y="213" width="1.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="399.77" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; +0.02%)</title><rect x="565.9" y="309" width="0.2" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="568.87" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5,088 samples, 10.79%; -0.00%)</title><rect x="292.3" y="373" width="127.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="295.34" y="383.5" >flat_mutation_r..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.00%)</title><rect x="611.2" y="373" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="614.18" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (28 samples, 0.06%; -0.00%)</title><rect x="679.3" y="437" width="0.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="682.32" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (147 samples, 0.31%; -0.04%)</title><rect x="1015.7" y="229" width="3.7" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="1018.75" y="239.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (18 samples, 0.04%; -0.01%)</title><rect x="1120.5" y="389" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1123.51" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (14 samples, 0.03%; +0.03%)</title><rect x="136.4" y="245" width="0.4" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="139.44" y="255.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (9 samples, 0.02%; +0.01%)</title><rect x="947.1" y="405" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="950.14" y="415.5" ></text>
</g>
<g >
<title>__tls_init (4 samples, 0.01%; +0.01%)</title><rect x="484.8" y="309" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="487.76" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.08%; 0.00%)</title><rect x="1140.0" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.96" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::stats (42 samples, 0.09%; -0.01%)</title><rect x="146.9" y="245" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="149.93" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (11 samples, 0.02%; 0.00%)</title><rect x="782.9" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="785.95" y="303.5" ></text>
</g>
<g >
<title>free (17 samples, 0.04%; 0.00%)</title><rect x="38.5" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.54" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (8 samples, 0.02%; -0.00%)</title><rect x="808.2" y="261" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="811.18" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (11 samples, 0.02%; 0.00%)</title><rect x="17.4" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.36" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (5 samples, 0.01%; -0.01%)</title><rect x="664.8" y="469" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="667.80" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (20 samples, 0.04%; +0.03%)</title><rect x="728.2" y="389" width="0.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="731.20" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (6 samples, 0.01%; -0.01%)</title><rect x="812.8" y="277" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="815.81" y="287.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (58 samples, 0.12%; -0.00%)</title><rect x="293.3" y="309" width="1.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="296.34" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (4 samples, 0.01%; +0.00%)</title><rect x="645.1" y="437" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="648.15" y="447.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (25 samples, 0.05%; +0.00%)</title><rect x="291.7" y="373" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="294.71" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (187 samples, 0.40%; 0.00%)</title><rect x="17.2" y="405" width="4.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.23" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (33 samples, 0.07%; +0.02%)</title><rect x="985.4" y="277" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="988.44" y="287.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.01%; +0.00%)</title><rect x="616.6" y="405" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="619.58" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (5 samples, 0.01%; 0.00%)</title><rect x="111.8" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.81" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (413 samples, 0.88%; +0.00%)</title><rect x="273.9" y="325" width="10.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="276.89" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (24 samples, 0.05%; +0.05%)</title><rect x="68.3" y="389" width="0.6" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="71.25" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.00%)</title><rect x="691.3" y="485" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="694.28" y="495.5" ></text>
</g>
<g >
<title>operator delete (58 samples, 0.12%; -0.02%)</title><rect x="559.6" y="293" width="1.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="562.59" y="303.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (4 samples, 0.01%; -0.00%)</title><rect x="284.4" y="325" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="287.38" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (13 samples, 0.03%; -0.00%)</title><rect x="25.7" y="517" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="28.75" y="527.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (5 samples, 0.01%; -0.01%)</title><rect x="813.3" y="341" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="816.31" y="351.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.07%; +0.00%)</title><rect x="775.2" y="309" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="778.19" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (23 samples, 0.05%; +0.01%)</title><rect x="1136.3" y="421" width="0.6" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="1139.33" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (133 samples, 0.28%; +0.00%)</title><rect x="844.4" y="389" width="3.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="847.40" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (53 samples, 0.11%; 0.00%)</title><rect x="17.3" y="357" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.31" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (25 samples, 0.05%; +0.01%)</title><rect x="142.6" y="261" width="0.6" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="145.62" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (18 samples, 0.04%; +0.00%)</title><rect x="642.8" y="389" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="645.79" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::mhtraits&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, boost::intrusive::list_member_hook&lt;boost::intrusive::link_mode&lt; (4 samples, 0.01%; -0.00%)</title><rect x="721.9" y="389" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="724.87" y="399.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (21 samples, 0.04%; +0.01%)</title><rect x="219.1" y="133" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="222.15" y="143.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (8 samples, 0.02%; +0.00%)</title><rect x="429.2" y="357" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="432.17" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (8 samples, 0.02%; 0.00%)</title><rect x="20.5" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.49" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (34 samples, 0.07%; -0.01%)</title><rect x="293.6" y="277" width="0.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="296.59" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (26 samples, 0.06%; +0.01%)</title><rect x="778.6" y="277" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="781.57" y="287.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.02%; +0.01%)</title><rect x="803.1" y="197" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="806.10" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (25 samples, 0.05%; -0.00%)</title><rect x="805.3" y="229" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="808.30" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (17 samples, 0.04%; 0.00%)</title><rect x="221.6" y="149" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="224.65" y="159.5" ></text>
</g>
<g >
<title>service::client_state::validate_login (4 samples, 0.01%; +0.00%)</title><rect x="813.6" y="357" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="816.64" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.02%; +0.01%)</title><rect x="782.6" y="277" width="0.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="785.65" y="287.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (6 samples, 0.01%; +0.00%)</title><rect x="1040.3" y="261" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1043.28" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (4 samples, 0.01%; +0.00%)</title><rect x="448.8" y="277" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="451.82" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (12 samples, 0.03%; +0.00%)</title><rect x="688.1" y="453" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="691.05" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (9 samples, 0.02%; +0.00%)</title><rect x="718.4" y="453" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="721.42" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (4 samples, 0.01%; +0.00%)</title><rect x="1141.3" y="117" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1144.34" y="127.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (21 samples, 0.04%; +0.01%)</title><rect x="579.7" y="421" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="582.71" y="431.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (19 samples, 0.04%; -0.03%)</title><rect x="241.6" y="181" width="0.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="244.65" y="191.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (64 samples, 0.14%; -0.01%)</title><rect x="1119.9" y="405" width="1.6" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="1122.86" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (31 samples, 0.07%; -0.00%)</title><rect x="1038.6" y="261" width="0.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1041.58" y="271.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (38 samples, 0.08%; +0.01%)</title><rect x="488.6" y="309" width="1.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="491.64" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (8 samples, 0.02%; +0.01%)</title><rect x="578.3" y="373" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="581.28" y="383.5" ></text>
</g>
<g >
<title>database::find_keyspace (217 samples, 0.46%; +0.01%)</title><rect x="1056.9" y="341" width="5.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1059.88" y="351.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (4 samples, 0.01%; -0.00%)</title><rect x="518.0" y="325" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="520.98" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="408.0" y="181" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="411.01" y="191.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (10 samples, 0.02%; -0.02%)</title><rect x="1034.2" y="197" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1037.20" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (12 samples, 0.03%; -0.00%)</title><rect x="677.9" y="453" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="680.94" y="463.5" ></text>
</g>
<g >
<title>memtable::apply (21 samples, 0.04%; 0.00%)</title><rect x="1140.0" y="261" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.04" y="271.5" ></text>
</g>
<g >
<title>tombstone::apply (17 samples, 0.04%; +0.01%)</title><rect x="390.9" y="197" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="393.87" y="207.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.01%; +0.01%)</title><rect x="278.1" y="293" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="281.10" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (7 samples, 0.01%; +0.00%)</title><rect x="1007.3" y="277" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1010.31" y="287.5" ></text>
</g>
<g >
<title>database::has_keyspace (147 samples, 0.31%; +0.00%)</title><rect x="837.0" y="421" width="3.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="839.99" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (14 samples, 0.03%; -0.00%)</title><rect x="862.8" y="389" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="865.83" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (5 samples, 0.01%; +0.01%)</title><rect x="595.8" y="405" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="598.76" y="415.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (504 samples, 1.07%; +0.02%)</title><rect x="695.2" y="485" width="12.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="698.24" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (9 samples, 0.02%; +0.02%)</title><rect x="840.4" y="405" width="0.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="843.45" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (34 samples, 0.07%; -0.00%)</title><rect x="798.9" y="133" width="0.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="801.94" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::stats (19 samples, 0.04%; -0.03%)</title><rect x="527.0" y="293" width="0.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="530.02" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (4 samples, 0.01%; 0.00%)</title><rect x="18.8" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.76" y="287.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (13 samples, 0.03%; -0.01%)</title><rect x="1064.9" y="341" width="0.4" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="1067.94" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (10 samples, 0.02%; -0.00%)</title><rect x="20.4" y="277" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="23.44" y="287.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (6 samples, 0.01%; -0.00%)</title><rect x="703.6" y="421" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="706.62" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (7 samples, 0.01%; +0.01%)</title><rect x="1097.1" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1100.08" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (6 samples, 0.01%; +0.01%)</title><rect x="259.1" y="261" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="262.15" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (6 samples, 0.01%; 0.00%)</title><rect x="23.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="383.5" ></text>
</g>
<g >
<title>make_combined_reader (739 samples, 1.57%; +0.01%)</title><rect x="436.8" y="325" width="18.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="439.75" y="335.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; +0.01%)</title><rect x="629.4" y="469" width="0.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="632.40" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (517 samples, 1.10%; +0.02%)</title><rect x="185.1" y="101" width="13.0" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="188.13" y="111.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (13 samples, 0.03%; 0.00%)</title><rect x="23.7" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.69" y="527.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (7 samples, 0.01%; +0.00%)</title><rect x="588.8" y="437" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="591.85" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (6 samples, 0.01%; +0.00%)</title><rect x="422.9" y="373" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="425.91" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (63 samples, 0.13%; +0.01%)</title><rect x="1151.9" y="437" width="1.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1154.90" y="447.5" ></text>
</g>
<g >
<title>operator new (27 samples, 0.06%; +0.00%)</title><rect x="246.1" y="181" width="0.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="249.11" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::reserve (10 samples, 0.02%; +0.01%)</title><rect x="1105.2" y="373" width="0.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="1108.19" y="383.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (27 samples, 0.06%; 0.00%)</title><rect x="862.5" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.53" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="557.7" y="293" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="560.66" y="303.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (8 samples, 0.02%; -0.02%)</title><rect x="367.1" y="213" width="0.2" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="370.11" y="223.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (7 samples, 0.01%; 0.00%)</title><rect x="847.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="850.83" y="415.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (6 samples, 0.01%; +0.01%)</title><rect x="1150.6" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1153.65" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (5 samples, 0.01%; -0.01%)</title><rect x="1121.6" y="405" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1124.64" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (21 samples, 0.04%; +0.01%)</title><rect x="568.0" y="341" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="571.05" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (397 samples, 0.84%; -0.00%)</title><rect x="399.0" y="245" width="9.9" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="401.98" y="255.5" ></text>
</g>
<g >
<title>auth::resource::resource (116 samples, 0.25%; +0.01%)</title><rect x="765.6" y="389" width="2.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="768.55" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (17 samples, 0.04%; +0.01%)</title><rect x="702.9" y="405" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="705.95" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; -0.00%)</title><rect x="693.0" y="469" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="696.01" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (171 samples, 0.36%; -0.03%)</title><rect x="217.8" y="165" width="4.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="220.79" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (24 samples, 0.05%; +0.00%)</title><rect x="140.6" y="245" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="143.62" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (4 samples, 0.01%; +0.00%)</title><rect x="259.3" y="261" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="262.30" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (9 samples, 0.02%; 0.00%)</title><rect x="399.1" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="402.13" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (20 samples, 0.04%; -0.03%)</title><rect x="598.6" y="437" width="0.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="601.59" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (19 samples, 0.04%; +0.01%)</title><rect x="585.2" y="389" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="588.19" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (34 samples, 0.07%; 0.00%)</title><rect x="899.1" y="309" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="902.07" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (128 samples, 0.27%; -0.01%)</title><rect x="799.8" y="149" width="3.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="802.82" y="159.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (385 samples, 0.82%; -0.01%)</title><rect x="461.8" y="309" width="9.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="464.83" y="319.5" ></text>
</g>
<g >
<title>operator delete (67 samples, 0.14%; -0.01%)</title><rect x="573.8" y="341" width="1.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="576.83" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (9 samples, 0.02%; +0.01%)</title><rect x="822.2" y="325" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="825.17" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state_base::future_state_base (6 samples, 0.01%; +0.01%)</title><rect x="808.5" y="277" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="811.46" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (4 samples, 0.01%; +0.00%)</title><rect x="868.0" y="469" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="870.98" y="479.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (76 samples, 0.16%; -0.02%)</title><rect x="60.2" y="453" width="1.9" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="63.19" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (5 samples, 0.01%; 0.00%)</title><rect x="391.4" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="394.39" y="223.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (8 samples, 0.02%; +0.01%)</title><rect x="219.5" y="117" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="222.47" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (26 samples, 0.06%; +0.02%)</title><rect x="532.1" y="341" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="535.12" y="351.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c84e941df99b64f17e27a2bbf8172d805023c352] (6 samples, 0.01%; +0.01%)</title><rect x="346.3" y="165" width="0.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="349.26" y="175.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1,394 samples, 2.96%; +0.02%)</title><rect x="172.3" y="165" width="34.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="175.28" y="175.5" >cl..</text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (4 samples, 0.01%; +0.00%)</title><rect x="954.8" y="389" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="957.77" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (4 samples, 0.01%; +0.00%)</title><rect x="250.3" y="213" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="253.31" y="223.5" ></text>
</g>
<g >
<title>database::has_keyspace (4 samples, 0.01%; +0.01%)</title><rect x="832.0" y="437" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="835.04" y="447.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (17 samples, 0.04%; +0.01%)</title><rect x="1048.3" y="277" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1051.34" y="287.5" ></text>
</g>
<g >
<title>operator delete (20 samples, 0.04%; -0.01%)</title><rect x="421.9" y="373" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="424.93" y="383.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (297 samples, 0.63%; -0.02%)</title><rect x="1077.6" y="261" width="7.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1080.60" y="271.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (104 samples, 0.22%; +0.02%)</title><rect x="363.7" y="165" width="2.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="366.68" y="175.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (6 samples, 0.01%; -0.00%)</title><rect x="739.1" y="357" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="742.09" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (27 samples, 0.06%; -0.00%)</title><rect x="682.4" y="389" width="0.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="685.39" y="399.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (6 samples, 0.01%; 0.00%)</title><rect x="827.6" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="830.58" y="287.5" ></text>
</g>
<g >
<title>service::client_state::has_access (10 samples, 0.02%; 0.00%)</title><rect x="23.1" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.14" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (10 samples, 0.02%; +0.01%)</title><rect x="111.9" y="373" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="114.93" y="383.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (6 samples, 0.01%; +0.01%)</title><rect x="1061.4" y="277" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1064.36" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.01%; +0.01%)</title><rect x="765.4" y="357" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="768.40" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (36 samples, 0.08%; +0.00%)</title><rect x="1014.7" y="213" width="0.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1017.72" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (4 samples, 0.01%; +0.00%)</title><rect x="786.9" y="245" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="789.88" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (18 samples, 0.04%; -0.00%)</title><rect x="1125.2" y="405" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1128.17" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (5 samples, 0.01%; -0.04%)</title><rect x="1135.8" y="421" width="0.1" height="15.0" fill="rgb(136,136,255)" rx="2" ry="2" />
<text  x="1138.75" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::reserve (4 samples, 0.01%; +0.00%)</title><rect x="804.9" y="245" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="807.90" y="255.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (34 samples, 0.07%; 0.00%)</title><rect x="682.3" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.34" y="495.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (9 samples, 0.02%; -0.01%)</title><rect x="519.6" y="341" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="522.63" y="351.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c84e941df99b64f17e27a2bbf8172d805023c352] (6 samples, 0.01%; +0.01%)</title><rect x="802.5" y="69" width="0.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="805.50" y="79.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.01%; -0.01%)</title><rect x="792.6" y="181" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="795.56" y="191.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (7 samples, 0.01%; 0.00%)</title><rect x="1140.1" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.11" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (7 samples, 0.01%; -0.01%)</title><rect x="330.4" y="165" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="333.41" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (5 samples, 0.01%; -0.01%)</title><rect x="537.8" y="405" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="540.76" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (27 samples, 0.06%; 0.00%)</title><rect x="862.5" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.53" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.01%; +0.00%)</title><rect x="52.0" y="453" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="55.03" y="463.5" ></text>
</g>
<g >
<title>operator new (88 samples, 0.19%; 0.00%)</title><rect x="990.7" y="261" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="993.67" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (103 samples, 0.22%; +0.03%)</title><rect x="966.5" y="341" width="2.5" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="969.46" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (12 samples, 0.03%; +0.00%)</title><rect x="36.9" y="453" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="39.91" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (8 samples, 0.02%; +0.00%)</title><rect x="234.9" y="245" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="237.89" y="255.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (38 samples, 0.08%; 0.00%)</title><rect x="373.3" y="181" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="376.27" y="191.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (6 samples, 0.01%; +0.01%)</title><rect x="1054.8" y="341" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1057.78" y="351.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (142 samples, 0.30%; -0.06%)</title><rect x="467.3" y="261" width="3.5" height="15.0" fill="rgb(115,115,255)" rx="2" ry="2" />
<text  x="470.27" y="271.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (4 samples, 0.01%; 0.00%)</title><rect x="18.6" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.64" y="367.5" ></text>
</g>
<g >
<title>local_schema_registry (6 samples, 0.01%; +0.01%)</title><rect x="958.3" y="373" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="961.25" y="383.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (27 samples, 0.06%; -0.00%)</title><rect x="214.4" y="165" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="217.39" y="175.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (76 samples, 0.16%; +0.00%)</title><rect x="419.9" y="373" width="1.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="422.90" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (27 samples, 0.06%; 0.00%)</title><rect x="862.5" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.53" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (43 samples, 0.09%; -0.01%)</title><rect x="741.1" y="309" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="744.09" y="319.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (4 samples, 0.01%; +0.01%)</title><rect x="1030.4" y="197" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1033.44" y="207.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (5 samples, 0.01%; +0.00%)</title><rect x="670.4" y="437" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="673.40" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (4 samples, 0.01%; -0.00%)</title><rect x="609.1" y="421" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="612.15" y="431.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (10 samples, 0.02%; -0.01%)</title><rect x="336.4" y="181" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="339.45" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (8 samples, 0.02%; +0.01%)</title><rect x="600.3" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="603.34" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (80 samples, 0.17%; -0.01%)</title><rect x="645.9" y="469" width="2.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="648.95" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (9 samples, 0.02%; 0.00%)</title><rect x="1118.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.76" y="367.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1,177 samples, 2.50%; +0.09%)</title><rect x="336.8" y="181" width="29.5" height="15.0" fill="rgb(255,56,56)" rx="2" ry="2" />
<text  x="339.82" y="191.5" >wr..</text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (29 samples, 0.06%; -0.01%)</title><rect x="270.7" y="357" width="0.8" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="273.74" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (79 samples, 0.17%; -0.01%)</title><rect x="567.5" y="373" width="1.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="570.47" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.06%; +0.02%)</title><rect x="763.8" y="357" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="766.80" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (24 samples, 0.05%; +0.00%)</title><rect x="69.8" y="389" width="0.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="72.80" y="399.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (13 samples, 0.03%; 0.00%)</title><rect x="23.7" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.69" y="623.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (12 samples, 0.03%; 0.00%)</title><rect x="220.9" y="117" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="223.92" y="127.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (12 samples, 0.03%; +0.02%)</title><rect x="73.4" y="453" width="0.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="76.41" y="463.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (80 samples, 0.17%; -0.02%)</title><rect x="396.4" y="229" width="2.0" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="399.37" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (4 samples, 0.01%; +0.01%)</title><rect x="318.1" y="181" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="321.15" y="191.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (11 samples, 0.02%; -0.01%)</title><rect x="1119.6" y="405" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1122.58" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (8 samples, 0.02%; +0.01%)</title><rect x="1030.8" y="213" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1033.84" y="223.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (16 samples, 0.03%; 0.00%)</title><rect x="816.6" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="819.62" y="287.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (5 samples, 0.01%; +0.01%)</title><rect x="233.0" y="229" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="235.99" y="239.5" ></text>
</g>
<g >
<title>operator delete (66 samples, 0.14%; +0.04%)</title><rect x="282.5" y="293" width="1.7" height="15.0" fill="rgb(255,143,143)" rx="2" ry="2" />
<text  x="285.50" y="303.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (40 samples, 0.08%; +0.01%)</title><rect x="807.0" y="245" width="1.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="810.03" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.00%)</title><rect x="694.9" y="469" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="697.86" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::stats (36 samples, 0.08%; +0.00%)</title><rect x="485.9" y="309" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="488.92" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (533 samples, 1.13%; -0.00%)</title><rect x="1150.8" y="485" width="13.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1153.80" y="495.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (51 samples, 0.11%; +0.02%)</title><rect x="1129.7" y="389" width="1.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1132.72" y="399.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (12 samples, 0.03%; 0.00%)</title><rect x="839.1" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="842.12" y="367.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (5,492 samples, 11.65%; -0.01%)</title><rect x="717.4" y="469" width="137.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="720.44" y="479.5" >single_node_cql_e..</text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (17 samples, 0.04%; +0.01%)</title><rect x="139.6" y="229" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="142.59" y="239.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (5 samples, 0.01%; -0.01%)</title><rect x="717.2" y="469" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="720.21" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (234 samples, 0.50%; -0.01%)</title><rect x="740.1" y="357" width="5.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="743.14" y="367.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (10 samples, 0.02%; +0.00%)</title><rect x="591.3" y="389" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="594.28" y="399.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (13 samples, 0.03%; +0.01%)</title><rect x="295.4" y="293" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="298.39" y="303.5" ></text>
</g>
<g >
<title>row::compact_and_expire (796 samples, 1.69%; +0.01%)</title><rect x="370.5" y="213" width="19.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="373.47" y="223.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (8 samples, 0.02%; 0.00%)</title><rect x="484.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="487.86" y="335.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (7 samples, 0.01%; +0.00%)</title><rect x="908.7" y="341" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="911.74" y="351.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (6 samples, 0.01%; -0.03%)</title><rect x="965.7" y="357" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="968.71" y="367.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (39 samples, 0.08%; +0.00%)</title><rect x="232.0" y="229" width="1.0" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="235.01" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (6 samples, 0.01%; -0.01%)</title><rect x="1172.8" y="421" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1175.80" y="431.5" ></text>
</g>
<g >
<title>database::find_column_family (46 samples, 0.10%; +0.01%)</title><rect x="1014.5" y="245" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1017.47" y="255.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (9 samples, 0.02%; 0.00%)</title><rect x="38.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.06" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (4 samples, 0.01%; +0.00%)</title><rect x="216.0" y="181" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="218.97" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (4 samples, 0.01%; -0.01%)</title><rect x="1155.4" y="453" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1158.43" y="463.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (25 samples, 0.05%; +0.01%)</title><rect x="1095.5" y="309" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1098.53" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (9 samples, 0.02%; +0.00%)</title><rect x="930.2" y="405" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="933.21" y="415.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (26 samples, 0.06%; +0.00%)</title><rect x="620.2" y="485" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="623.16" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (17 samples, 0.04%; 0.00%)</title><rect x="681.3" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="684.27" y="495.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (11 samples, 0.02%; +0.02%)</title><rect x="366.5" y="197" width="0.3" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="369.54" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (10 samples, 0.02%; +0.01%)</title><rect x="974.0" y="357" width="0.3" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="977.02" y="367.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (79 samples, 0.17%; +0.02%)</title><rect x="789.3" y="197" width="2.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="792.33" y="207.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (9 samples, 0.02%; -0.01%)</title><rect x="45.9" y="485" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="48.92" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (4 samples, 0.01%; +0.00%)</title><rect x="455.6" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="458.60" y="335.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (14 samples, 0.03%; -0.00%)</title><rect x="816.1" y="293" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="819.12" y="303.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (5 samples, 0.01%; -0.01%)</title><rect x="507.5" y="229" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="510.47" y="239.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (6 samples, 0.01%; +0.00%)</title><rect x="221.5" y="149" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="224.47" y="159.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (21 samples, 0.04%; +0.03%)</title><rect x="844.5" y="373" width="0.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="847.53" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,411 samples, 9.36%; -0.02%)</title><rect x="144.0" y="309" width="110.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="146.97" y="319.5" >partition_sna..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (4 samples, 0.01%; 0.00%)</title><rect x="19.3" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.34" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (417 samples, 0.88%; -0.02%)</title><rect x="398.5" y="261" width="10.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="401.53" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_S_do_relocate (6 samples, 0.01%; +0.00%)</title><rect x="534.1" y="325" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="537.13" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (27 samples, 0.06%; +0.01%)</title><rect x="968.4" y="325" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="971.36" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (14 samples, 0.03%; -0.01%)</title><rect x="92.6" y="421" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="95.63" y="431.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (5 samples, 0.01%; 0.00%)</title><rect x="1141.3" y="181" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.31" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (34 samples, 0.07%; -0.02%)</title><rect x="925.6" y="405" width="0.9" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="928.63" y="415.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (19 samples, 0.04%; -0.05%)</title><rect x="242.1" y="181" width="0.5" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="245.12" y="191.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (665 samples, 1.41%; -0.03%)</title><rect x="1077.1" y="309" width="16.6" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="1080.05" y="319.5" ></text>
</g>
<g >
<title>operator delete (56 samples, 0.12%; -0.03%)</title><rect x="927.3" y="405" width="1.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="930.29" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (19 samples, 0.04%; +0.03%)</title><rect x="617.5" y="389" width="0.5" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="620.51" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (72 samples, 0.15%; -0.01%)</title><rect x="815.2" y="325" width="1.8" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="818.22" y="335.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (5 samples, 0.01%; -0.01%)</title><rect x="24.4" y="517" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="27.44" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (5 samples, 0.01%; +0.01%)</title><rect x="1030.7" y="197" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1033.67" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (4 samples, 0.01%; -0.00%)</title><rect x="229.6" y="117" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="232.58" y="127.5" ></text>
</g>
<g >
<title>all (47,139 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (9 samples, 0.02%; +0.00%)</title><rect x="1043.7" y="277" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1046.74" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (21 samples, 0.04%; +0.01%)</title><rect x="776.2" y="277" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="779.22" y="287.5" ></text>
</g>
<g >
<title>partition_entry::read (74 samples, 0.16%; -0.01%)</title><rect x="513.4" y="309" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="516.35" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (7 samples, 0.01%; +0.01%)</title><rect x="645.5" y="453" width="0.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="648.52" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (15 samples, 0.03%; -0.02%)</title><rect x="1156.9" y="357" width="0.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1159.86" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (4 samples, 0.01%; 0.00%)</title><rect x="499.5" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="502.48" y="271.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (111 samples, 0.24%; -0.03%)</title><rect x="384.0" y="149" width="2.8" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="387.01" y="159.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (15 samples, 0.03%; -0.00%)</title><rect x="288.1" y="373" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="291.11" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (59 samples, 0.13%; -0.00%)</title><rect x="641.9" y="437" width="1.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="644.94" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (22 samples, 0.05%; -0.00%)</title><rect x="160.4" y="181" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="163.42" y="191.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.01%; 0.00%)</title><rect x="687.4" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.40" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (8 samples, 0.02%; +0.00%)</title><rect x="813.1" y="325" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="816.11" y="335.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (10 samples, 0.02%; +0.01%)</title><rect x="46.2" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="49.20" y="495.5" ></text>
</g>
<g >
<title>operator delete (27 samples, 0.06%; -0.00%)</title><rect x="668.0" y="453" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="670.95" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (74 samples, 0.16%; +0.01%)</title><rect x="705.1" y="437" width="1.9" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="708.12" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (116 samples, 0.25%; +0.01%)</title><rect x="200.2" y="117" width="2.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="203.17" y="127.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (10 samples, 0.02%; -0.01%)</title><rect x="52.6" y="469" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="55.61" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (33 samples, 0.07%; 0.00%)</title><rect x="1140.9" y="453" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.89" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (196 samples, 0.42%; +0.01%)</title><rect x="1168.3" y="485" width="4.9" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="1171.30" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (4 samples, 0.01%; -0.00%)</title><rect x="635.3" y="485" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="638.31" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_range_check (7 samples, 0.01%; +0.00%)</title><rect x="895.2" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="898.19" y="319.5" ></text>
</g>
<g >
<title>compound_type&lt; (80 samples, 0.17%; +0.03%)</title><rect x="904.1" y="373" width="2.0" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="907.08" y="383.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (4 samples, 0.01%; -0.02%)</title><rect x="248.1" y="229" width="0.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="251.08" y="239.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (4 samples, 0.01%; -0.01%)</title><rect x="238.7" y="197" width="0.1" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="241.70" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (20 samples, 0.04%; -0.01%)</title><rect x="446.7" y="277" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="449.74" y="287.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (25 samples, 0.05%; +0.02%)</title><rect x="416.3" y="277" width="0.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="419.25" y="287.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (2,241 samples, 4.75%; +0.03%)</title><rect x="994.0" y="309" width="56.1" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="996.97" y="319.5" >servi..</text>
</g>
<g >
<title>seastar::memory::allocate (87 samples, 0.18%; +0.02%)</title><rect x="158.8" y="197" width="2.2" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="161.79" y="207.5" ></text>
</g>
<g >
<title>dht::shard_of (15 samples, 0.03%; +0.01%)</title><rect x="995.4" y="293" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="998.42" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (33 samples, 0.07%; +0.00%)</title><rect x="502.1" y="181" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="505.14" y="191.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (11 samples, 0.02%; +0.01%)</title><rect x="947.8" y="389" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="950.81" y="399.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (6 samples, 0.01%; -0.01%)</title><rect x="986.3" y="277" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="989.26" y="287.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (666 samples, 1.41%; +0.00%)</title><rect x="787.4" y="261" width="16.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="790.38" y="271.5" ></text>
</g>
<g >
<title>database::find_schema (75 samples, 0.16%; -0.00%)</title><rect x="753.7" y="389" width="1.9" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="756.74" y="399.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (27 samples, 0.06%; +0.00%)</title><rect x="215.1" y="165" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="218.07" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (90 samples, 0.19%; +0.00%)</title><rect x="675.1" y="469" width="2.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="678.11" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.01%; 0.00%)</title><rect x="518.4" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="521.38" y="335.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (7 samples, 0.01%; -0.00%)</title><rect x="1029.2" y="165" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1032.24" y="175.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (4 samples, 0.01%; -0.02%)</title><rect x="891.9" y="293" width="0.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="894.89" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; -0.00%)</title><rect x="684.5" y="469" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="687.47" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (4 samples, 0.01%; -0.01%)</title><rect x="421.7" y="357" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="424.71" y="367.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (4 samples, 0.01%; -0.00%)</title><rect x="831.7" y="421" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="834.69" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (15 samples, 0.03%; +0.00%)</title><rect x="687.7" y="453" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="690.68" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (19 samples, 0.04%; -0.00%)</title><rect x="738.9" y="373" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="741.92" y="383.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (5 samples, 0.01%; +0.01%)</title><rect x="771.6" y="357" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="774.58" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (32 samples, 0.07%; +0.01%)</title><rect x="660.1" y="437" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="663.07" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (29 samples, 0.06%; 0.00%)</title><rect x="682.4" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.37" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (4 samples, 0.01%; 0.00%)</title><rect x="396.7" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="399.67" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (7 samples, 0.01%; +0.01%)</title><rect x="1060.5" y="293" width="0.1" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="1063.46" y="303.5" ></text>
</g>
<g >
<title>operator delete (10 samples, 0.02%; -0.01%)</title><rect x="46.8" y="501" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="49.82" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (46 samples, 0.10%; -0.00%)</title><rect x="818.6" y="373" width="1.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="821.60" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.00%)</title><rect x="572.7" y="341" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="575.73" y="351.5" ></text>
</g>
<g >
<title>database::find_schema (293 samples, 0.62%; -0.01%)</title><rect x="753.4" y="405" width="7.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="756.44" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (110 samples, 0.23%; +0.01%)</title><rect x="976.9" y="325" width="2.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="979.90" y="335.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (9 samples, 0.02%; -0.01%)</title><rect x="412.1" y="229" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="415.12" y="239.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::reset (4 samples, 0.01%; +0.01%)</title><rect x="593.8" y="389" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="596.75" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (142 samples, 0.30%; -0.00%)</title><rect x="822.0" y="341" width="3.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="825.02" y="351.5" ></text>
</g>
<g >
<title>query::result::builder::build (76 samples, 0.16%; +0.00%)</title><rect x="586.7" y="437" width="1.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="589.67" y="447.5" ></text>
</g>
<g >
<title>partition_entry::read (22 samples, 0.05%; -0.08%)</title><rect x="516.9" y="325" width="0.5" height="15.0" fill="rgb(73,73,255)" rx="2" ry="2" />
<text  x="519.86" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.01%; -0.01%)</title><rect x="478.5" y="181" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="481.48" y="191.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (12 samples, 0.03%; +0.00%)</title><rect x="791.9" y="213" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="794.91" y="223.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (7 samples, 0.01%; -0.01%)</title><rect x="648.9" y="453" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="651.90" y="463.5" ></text>
</g>
<g >
<title>operator new (18 samples, 0.04%; 0.00%)</title><rect x="454.5" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="457.55" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (36 samples, 0.08%; +0.01%)</title><rect x="778.3" y="293" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="781.32" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (10 samples, 0.02%; +0.01%)</title><rect x="1131.9" y="421" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1134.90" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (31 samples, 0.07%; -0.01%)</title><rect x="477.8" y="197" width="0.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="480.83" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (73 samples, 0.15%; -0.01%)</title><rect x="1066.8" y="309" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1069.79" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (9 samples, 0.02%; +0.01%)</title><rect x="818.8" y="357" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="821.82" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (17 samples, 0.04%; +0.00%)</title><rect x="1119.0" y="357" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1121.98" y="367.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (35 samples, 0.07%; -0.02%)</title><rect x="673.8" y="453" width="0.8" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="676.76" y="463.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (18 samples, 0.04%; +0.01%)</title><rect x="886.7" y="309" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="889.68" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (7 samples, 0.01%; +0.01%)</title><rect x="1135.9" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1138.88" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (210 samples, 0.45%; +0.03%)</title><rect x="225.1" y="197" width="5.3" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="228.13" y="207.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (269 samples, 0.57%; +0.00%)</title><rect x="739.4" y="373" width="6.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="742.39" y="383.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (11 samples, 0.02%; -0.03%)</title><rect x="234.3" y="245" width="0.2" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="237.26" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (23 samples, 0.05%; +0.02%)</title><rect x="1098.0" y="341" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1101.01" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (40 samples, 0.08%; +0.01%)</title><rect x="1122.0" y="405" width="1.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1125.01" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (17 samples, 0.04%; +0.00%)</title><rect x="766.6" y="325" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="769.55" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.01%; -0.00%)</title><rect x="289.8" y="389" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="292.84" y="399.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (116 samples, 0.25%; +0.01%)</title><rect x="1170.3" y="453" width="2.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1173.30" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.01%; +0.00%)</title><rect x="566.5" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="569.52" y="335.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (56 samples, 0.12%; +0.00%)</title><rect x="420.3" y="357" width="1.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="423.31" y="367.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (35 samples, 0.07%; +0.04%)</title><rect x="712.5" y="485" width="0.8" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="715.46" y="495.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (56 samples, 0.12%; +0.00%)</title><rect x="501.8" y="213" width="1.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="504.81" y="223.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (4 samples, 0.01%; +0.01%)</title><rect x="645.2" y="437" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="648.25" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (4 samples, 0.01%; +0.00%)</title><rect x="230.5" y="197" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="233.48" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (8 samples, 0.02%; -0.03%)</title><rect x="449.3" y="277" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="452.34" y="287.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt;::operator (8 samples, 0.02%; 0.00%)</title><rect x="70.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.43" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (154 samples, 0.33%; +0.01%)</title><rect x="1044.0" y="277" width="3.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1046.99" y="287.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (11 samples, 0.02%; -0.00%)</title><rect x="1076.8" y="309" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1079.78" y="319.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (18 samples, 0.04%; -0.00%)</title><rect x="564.3" y="293" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="567.32" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (7 samples, 0.01%; +0.01%)</title><rect x="846.1" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="849.11" y="351.5" ></text>
</g>
<g >
<title>query::querier_base::close (1,212 samples, 2.57%; +0.01%)</title><rect x="549.0" y="437" width="30.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="551.97" y="447.5" >qu..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (4 samples, 0.01%; 0.00%)</title><rect x="792.9" y="181" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="795.89" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (51 samples, 0.11%; -0.00%)</title><rect x="930.6" y="405" width="1.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="933.56" y="415.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; -0.01%)</title><rect x="584.4" y="389" width="0.8" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="587.44" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (9 samples, 0.02%; +0.00%)</title><rect x="61.7" y="405" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="64.67" y="415.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (6 samples, 0.01%; 0.00%)</title><rect x="928.7" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="931.69" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (3,047 samples, 6.46%; -0.02%)</title><rect x="752.7" y="421" width="76.3" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="755.73" y="431.5" >cql3::st..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (40 samples, 0.08%; +0.00%)</title><rect x="805.0" y="245" width="1.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="808.00" y="255.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (19 samples, 0.04%; -0.01%)</title><rect x="685.2" y="469" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="688.17" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (14 samples, 0.03%; -0.00%)</title><rect x="862.0" y="453" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="864.98" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (13 samples, 0.03%; +0.00%)</title><rect x="905.7" y="341" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="908.71" y="351.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (5 samples, 0.01%; 0.00%)</title><rect x="392.8" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="395.79" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,433 samples, 7.28%; +0.00%)</title><rect x="308.1" y="245" width="85.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="311.09" y="255.5" >flat_mutat..</text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (5 samples, 0.01%; +0.01%)</title><rect x="859.6" y="469" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="862.60" y="479.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (223 samples, 0.47%; -0.01%)</title><rect x="1069.0" y="325" width="5.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1072.04" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (7 samples, 0.01%; -0.00%)</title><rect x="41.7" y="437" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="44.69" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (10 samples, 0.02%; +0.00%)</title><rect x="701.1" y="421" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="704.14" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (13 samples, 0.03%; +0.00%)</title><rect x="701.7" y="405" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="704.67" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (11 samples, 0.02%; -0.00%)</title><rect x="414.3" y="261" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="417.35" y="271.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (9 samples, 0.02%; +0.01%)</title><rect x="997.0" y="293" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="999.95" y="303.5" ></text>
</g>
<g >
<title>reader_permit::set_max_result_size (6 samples, 0.01%; 0.00%)</title><rect x="62.2" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.19" y="463.5" ></text>
</g>
<g >
<title>query::querier&lt; (17,853 samples, 37.87%; +0.02%)</title><rect x="102.1" y="437" width="446.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="105.07" y="447.5" >query::querier&lt;</text>
</g>
<g >
<title>operator new (16 samples, 0.03%; +0.00%)</title><rect x="650.8" y="453" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="653.80" y="463.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.01%; 0.00%)</title><rect x="441.7" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="444.71" y="271.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; -0.02%)</title><rect x="294.8" y="309" width="0.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="297.82" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (53 samples, 0.11%; +0.02%)</title><rect x="937.1" y="357" width="1.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="940.07" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (42 samples, 0.09%; +0.00%)</title><rect x="1014.6" y="229" width="1.0" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1017.57" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (17 samples, 0.04%; +0.00%)</title><rect x="861.9" y="501" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="864.93" y="511.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (148 samples, 0.31%; +0.00%)</title><rect x="742.2" y="325" width="3.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="745.22" y="335.5" ></text>
</g>
<g >
<title>seastar::schedule (4 samples, 0.01%; 0.00%)</title><rect x="1143.1" y="501" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.09" y="511.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (13 samples, 0.03%; -0.00%)</title><rect x="862.0" y="421" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="864.98" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (13 samples, 0.03%; -0.00%)</title><rect x="278.3" y="293" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="281.35" y="303.5" ></text>
</g>
<g >
<title>std::type_info::operator== (7 samples, 0.01%; +0.00%)</title><rect x="998.0" y="277" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1000.98" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (9 samples, 0.02%; -0.03%)</title><rect x="985.2" y="261" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="988.21" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (45 samples, 0.10%; +0.08%)</title><rect x="298.8" y="293" width="1.1" height="15.0" fill="rgb(255,77,77)" rx="2" ry="2" />
<text  x="301.77" y="303.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (20 samples, 0.04%; +0.02%)</title><rect x="919.1" y="389" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="922.07" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (15 samples, 0.03%; -0.04%)</title><rect x="877.5" y="421" width="0.4" height="15.0" fill="rgb(136,136,255)" rx="2" ry="2" />
<text  x="880.52" y="431.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (9 samples, 0.02%; +0.00%)</title><rect x="242.4" y="165" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="245.38" y="175.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (579 samples, 1.23%; -0.01%)</title><rect x="694.2" y="501" width="14.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="697.21" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="1143.8" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1146.79" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (5 samples, 0.01%; -0.01%)</title><rect x="585.8" y="389" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="588.84" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (40 samples, 0.08%; -0.01%)</title><rect x="120.6" y="309" width="1.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="123.59" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (8 samples, 0.02%; +0.00%)</title><rect x="1022.9" y="197" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1025.91" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (17 samples, 0.04%; +0.02%)</title><rect x="90.6" y="437" width="0.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="93.55" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (49 samples, 0.10%; +0.07%)</title><rect x="318.2" y="181" width="1.3" height="15.0" fill="rgb(255,101,101)" rx="2" ry="2" />
<text  x="321.25" y="191.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (8 samples, 0.02%; +0.01%)</title><rect x="923.7" y="325" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="926.68" y="335.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (47 samples, 0.10%; +0.01%)</title><rect x="157.0" y="213" width="1.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="160.04" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (10 samples, 0.02%; +0.01%)</title><rect x="507.7" y="245" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="510.74" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (160 samples, 0.34%; +0.02%)</title><rect x="756.4" y="357" width="4.0" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="759.36" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (9 samples, 0.02%; -0.00%)</title><rect x="423.9" y="405" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="426.86" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.00%)</title><rect x="554.2" y="309" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="557.15" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (10 samples, 0.02%; +0.01%)</title><rect x="1139.7" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1142.68" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (25 samples, 0.05%; -0.04%)</title><rect x="688.8" y="437" width="0.7" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="691.83" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (21 samples, 0.04%; +0.01%)</title><rect x="369.2" y="149" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="372.24" y="159.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (7 samples, 0.01%; +0.01%)</title><rect x="255.4" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="258.39" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (4 samples, 0.01%; 0.00%)</title><rect x="19.2" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.16" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (15 samples, 0.03%; 0.00%)</title><rect x="900.2" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="903.20" y="319.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (25 samples, 0.05%; +0.01%)</title><rect x="214.4" y="149" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="217.44" y="159.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (5 samples, 0.01%; +0.00%)</title><rect x="606.3" y="437" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="609.30" y="447.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (6 samples, 0.01%; 0.00%)</title><rect x="683.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.32" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (64 samples, 0.14%; -0.01%)</title><rect x="1166.3" y="485" width="1.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1169.32" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (13 samples, 0.03%; -0.05%)</title><rect x="893.4" y="261" width="0.4" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="896.44" y="271.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (3,010 samples, 6.39%; -0.04%)</title><rect x="975.3" y="357" width="75.4" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="978.35" y="367.5" >service:..</text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%; -0.02%)</title><rect x="454.1" y="277" width="0.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="457.07" y="287.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (4 samples, 0.01%; +0.00%)</title><rect x="221.1" y="101" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="224.12" y="111.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (5 samples, 0.01%; +0.00%)</title><rect x="735.3" y="373" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="738.29" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (15 samples, 0.03%; +0.00%)</title><rect x="1064.2" y="325" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1067.16" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; 0.00%)</title><rect x="1124.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.72" y="415.5" ></text>
</g>
<g >
<title>database::find_schema (57 samples, 0.12%; -0.01%)</title><rect x="820.4" y="357" width="1.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="823.45" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; 0.00%)</title><rect x="427.9" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="430.87" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (7 samples, 0.01%; +0.01%)</title><rect x="1119.4" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1122.41" y="415.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c84e941df99b64f17e27a2bbf8172d805023c352] (4 samples, 0.01%; +0.01%)</title><rect x="1166.5" y="469" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1169.54" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (6 samples, 0.01%; +0.00%)</title><rect x="1049.0" y="293" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1051.97" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (75 samples, 0.16%; -0.02%)</title><rect x="970.5" y="325" width="1.9" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="973.52" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (5 samples, 0.01%; +0.00%)</title><rect x="833.1" y="389" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="836.14" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (12 samples, 0.03%; +0.00%)</title><rect x="642.9" y="373" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="645.94" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (14 samples, 0.03%; +0.00%)</title><rect x="455.3" y="325" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="458.25" y="335.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (309 samples, 0.66%; -0.00%)</title><rect x="439.5" y="293" width="7.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="442.53" y="303.5" ></text>
</g>
<g >
<title>tombstone::apply (6 samples, 0.01%; +0.01%)</title><rect x="392.2" y="213" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="395.19" y="223.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (34 samples, 0.07%; +0.01%)</title><rect x="319.8" y="181" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="322.83" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="564.9" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="567.92" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (6 samples, 0.01%; +0.01%)</title><rect x="894.8" y="309" width="0.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="897.77" y="319.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.04%; 0.00%)</title><rect x="649.8" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="652.83" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; +0.01%)</title><rect x="626.9" y="469" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="629.92" y="479.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (4 samples, 0.01%; -0.02%)</title><rect x="579.1" y="405" width="0.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="582.11" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (330 samples, 0.70%; -0.01%)</title><rect x="794.8" y="181" width="8.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="797.81" y="191.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.09%; 0.00%)</title><rect x="1188.8" y="629" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1191.77" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (163 samples, 0.35%; -0.02%)</title><rect x="266.1" y="341" width="4.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="269.13" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (5 samples, 0.01%; +0.00%)</title><rect x="1135.4" y="421" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1138.35" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (143 samples, 0.30%; +0.00%)</title><rect x="1044.3" y="261" width="3.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1047.26" y="271.5" ></text>
</g>
<g >
<title>cql3::selection::simple_selection::is_aggregate (7 samples, 0.01%; +0.01%)</title><rect x="871.6" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="874.64" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (10 samples, 0.02%; +0.00%)</title><rect x="145.5" y="261" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="148.48" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (5 samples, 0.01%; 0.00%)</title><rect x="419.1" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="422.10" y="351.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (47 samples, 0.10%; +0.04%)</title><rect x="100.9" y="437" width="1.2" height="15.0" fill="rgb(255,143,143)" rx="2" ry="2" />
<text  x="103.89" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (25 samples, 0.05%; +0.03%)</title><rect x="251.4" y="197" width="0.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="254.39" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; -0.00%)</title><rect x="577.4" y="373" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="580.41" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (95 samples, 0.20%; +0.01%)</title><rect x="678.3" y="485" width="2.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="681.34" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, auth::role_or_anonymous&amp;&amp;, auth::get_permissions (6 samples, 0.01%; +0.00%)</title><rect x="810.8" y="309" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="813.76" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (4 samples, 0.01%; -0.03%)</title><rect x="314.0" y="165" width="0.1" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="316.97" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (27 samples, 0.06%; +0.01%)</title><rect x="1136.9" y="421" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1139.91" y="431.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (5 samples, 0.01%; +0.01%)</title><rect x="772.9" y="341" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="775.86" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (5 samples, 0.01%; -0.01%)</title><rect x="1142.0" y="485" width="0.2" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="1145.04" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (16 samples, 0.03%; 0.00%)</title><rect x="233.9" y="229" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="236.86" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (4 samples, 0.01%; -0.01%)</title><rect x="549.1" y="421" width="0.1" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="552.15" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (4 samples, 0.01%; +0.00%)</title><rect x="615.8" y="437" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="618.83" y="447.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_digest_requests (14 samples, 0.03%; +0.00%)</title><rect x="1050.2" y="325" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1053.19" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (6 samples, 0.01%; +0.00%)</title><rect x="616.1" y="437" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="619.08" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (5 samples, 0.01%; +0.00%)</title><rect x="1139.4" y="437" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1142.41" y="447.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (58 samples, 0.12%; +0.01%)</title><rect x="749.4" y="389" width="1.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="752.43" y="399.5" ></text>
</g>
<g >
<title>schema::column_at (54 samples, 0.11%; +0.00%)</title><rect x="332.6" y="181" width="1.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="335.57" y="191.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (16 samples, 0.03%; 0.00%)</title><rect x="591.7" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="594.73" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (28 samples, 0.06%; 0.00%)</title><rect x="488.8" y="277" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="491.84" y="287.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (106 samples, 0.22%; +0.01%)</title><rect x="594.9" y="437" width="2.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="597.91" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (25 samples, 0.05%; +0.02%)</title><rect x="655.2" y="485" width="0.6" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="658.16" y="495.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (5 samples, 0.01%; +0.00%)</title><rect x="328.5" y="181" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="331.51" y="191.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (9 samples, 0.02%; +0.00%)</title><rect x="22.0" y="421" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="25.04" y="431.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (7 samples, 0.01%; +0.01%)</title><rect x="1106.8" y="389" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1109.77" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (5 samples, 0.01%; 0.00%)</title><rect x="23.8" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (7 samples, 0.01%; 0.00%)</title><rect x="708.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.53" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (19 samples, 0.04%; -0.01%)</title><rect x="812.5" y="309" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="815.49" y="319.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (14 samples, 0.03%; 0.00%)</title><rect x="240.6" y="197" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="243.62" y="207.5" ></text>
</g>
<g >
<title>operator new (33 samples, 0.07%; -0.00%)</title><rect x="855.9" y="437" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="858.89" y="447.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (40 samples, 0.08%; +0.01%)</title><rect x="736.3" y="309" width="1.0" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="739.26" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.01%; +0.01%)</title><rect x="1085.9" y="277" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1088.94" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (4 samples, 0.01%; -0.01%)</title><rect x="100.8" y="405" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="103.79" y="415.5" ></text>
</g>
<g >
<title>operator new (39 samples, 0.08%; +0.01%)</title><rect x="542.1" y="357" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="545.06" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.01%; +0.01%)</title><rect x="1158.6" y="437" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1161.63" y="447.5" ></text>
</g>
<g >
<title>__dynamic_cast (48 samples, 0.10%; +0.03%)</title><rect x="875.3" y="421" width="1.2" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="878.27" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (15 samples, 0.03%; +0.01%)</title><rect x="270.2" y="341" width="0.4" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="273.21" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (43 samples, 0.09%; +0.01%)</title><rect x="563.2" y="277" width="1.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="566.19" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; -0.00%)</title><rect x="894.1" y="309" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="897.14" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; -0.01%)</title><rect x="623.7" y="485" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="626.69" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (9 samples, 0.02%; -0.00%)</title><rect x="614.9" y="389" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="617.86" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (10 samples, 0.02%; -0.04%)</title><rect x="294.4" y="293" width="0.3" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="297.44" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (4 samples, 0.01%; -0.02%)</title><rect x="1031.4" y="229" width="0.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1034.45" y="239.5" ></text>
</g>
<g >
<title>database::find_schema (218 samples, 0.46%; -0.01%)</title><rect x="820.2" y="373" width="5.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="823.20" y="383.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (15 samples, 0.03%; +0.02%)</title><rect x="331.6" y="181" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="334.62" y="191.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (12 samples, 0.03%; -0.00%)</title><rect x="940.3" y="325" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="943.28" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (43 samples, 0.09%; +0.00%)</title><rect x="411.8" y="245" width="1.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="414.82" y="255.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (36 samples, 0.08%; +0.06%)</title><rect x="150.1" y="245" width="0.9" height="15.0" fill="rgb(255,119,119)" rx="2" ry="2" />
<text  x="153.11" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (13 samples, 0.03%; +0.02%)</title><rect x="575.2" y="325" width="0.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="578.18" y="335.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (13 samples, 0.03%; 0.00%)</title><rect x="743.7" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="746.75" y="271.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (16 samples, 0.03%; +0.01%)</title><rect x="847.2" y="325" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="850.18" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (4 samples, 0.01%; +0.00%)</title><rect x="549.5" y="389" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="552.52" y="399.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (4 samples, 0.01%; 0.00%)</title><rect x="1140.6" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.56" y="271.5" ></text>
</g>
<g >
<title>reader_permit::consume (10 samples, 0.02%; -0.00%)</title><rect x="161.4" y="197" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="164.37" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (9 samples, 0.02%; -0.01%)</title><rect x="618.7" y="389" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="621.71" y="399.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (4 samples, 0.01%; -0.00%)</title><rect x="703.4" y="421" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="706.37" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (5 samples, 0.01%; 0.00%)</title><rect x="1167.8" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.80" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (15 samples, 0.03%; +0.00%)</title><rect x="647.2" y="389" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="650.22" y="399.5" ></text>
</g>
<g >
<title>validation::validate_column_family (7 samples, 0.01%; -0.03%)</title><rect x="828.8" y="405" width="0.2" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="831.83" y="415.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (190 samples, 0.40%; +0.01%)</title><rect x="919.6" y="389" width="4.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="922.58" y="399.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (11 samples, 0.02%; +0.01%)</title><rect x="1059.8" y="261" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1062.83" y="271.5" ></text>
</g>
<g >
<title>__tls_init (6 samples, 0.01%; +0.00%)</title><rect x="527.3" y="277" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="530.34" y="287.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (15 samples, 0.03%; +0.01%)</title><rect x="200.7" y="101" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="203.67" y="111.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous, auth::get_permissions (4 samples, 0.01%; +0.01%)</title><rect x="810.6" y="309" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="813.63" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (14 samples, 0.03%; 0.00%)</title><rect x="1141.3" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.29" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (13 samples, 0.03%; -0.00%)</title><rect x="484.5" y="325" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="487.54" y="335.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (22 samples, 0.05%; +0.00%)</title><rect x="1174.9" y="469" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1177.86" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (18 samples, 0.04%; -0.01%)</title><rect x="856.8" y="437" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="859.77" y="447.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (37 samples, 0.08%; +0.00%)</title><rect x="614.4" y="405" width="0.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="617.36" y="415.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (4 samples, 0.01%; -0.01%)</title><rect x="307.9" y="213" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="310.91" y="223.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (7 samples, 0.01%; 0.00%)</title><rect x="834.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="837.94" y="447.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (4 samples, 0.01%; 0.00%)</title><rect x="46.5" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.50" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::empty (22 samples, 0.05%; +0.03%)</title><rect x="941.7" y="405" width="0.5" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="944.65" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (12 samples, 0.03%; +0.00%)</title><rect x="938.0" y="325" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="941.00" y="335.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (222 samples, 0.47%; +0.04%)</title><rect x="1023.3" y="181" width="5.6" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="1026.33" y="191.5" ></text>
</g>
<g >
<title>TLS init function for cql3::statements::select_statement::_default_parameters (7 samples, 0.01%; +0.00%)</title><rect x="749.2" y="389" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="752.23" y="399.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (5 samples, 0.01%; -0.00%)</title><rect x="830.5" y="421" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="833.49" y="431.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (7 samples, 0.01%; -0.00%)</title><rect x="23.2" y="341" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="26.19" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (15 samples, 0.03%; +0.02%)</title><rect x="854.5" y="453" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="857.52" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; 0.00%)</title><rect x="819.2" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="822.22" y="351.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (18 samples, 0.04%; +0.02%)</title><rect x="841.9" y="421" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="844.90" y="431.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::set_latency (5 samples, 0.01%; +0.01%)</title><rect x="619.8" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="622.84" y="463.5" ></text>
</g>
<g >
<title>dht::tri_compare (7 samples, 0.01%; -0.01%)</title><rect x="1092.3" y="245" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1095.32" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (4 samples, 0.01%; -0.01%)</title><rect x="979.9" y="341" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="982.85" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (4 samples, 0.01%; -0.01%)</title><rect x="984.3" y="277" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="987.28" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (11 samples, 0.02%; -0.00%)</title><rect x="1150.4" y="485" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1153.37" y="495.5" ></text>
</g>
<g >
<title>query_state::query_state (199 samples, 0.42%; +0.02%)</title><rect x="589.0" y="437" width="5.0" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="592.05" y="447.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (22 samples, 0.05%; -0.02%)</title><rect x="317.4" y="181" width="0.6" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="320.42" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (14 samples, 0.03%; -0.01%)</title><rect x="788.1" y="229" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="791.08" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (21 samples, 0.04%; +0.03%)</title><rect x="1138.5" y="421" width="0.5" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1141.46" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (4 samples, 0.01%; +0.00%)</title><rect x="727.6" y="357" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="730.55" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (9 samples, 0.02%; -0.00%)</title><rect x="76.1" y="453" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="79.14" y="463.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (11 samples, 0.02%; +0.01%)</title><rect x="732.9" y="389" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="735.93" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (4 samples, 0.01%; +0.00%)</title><rect x="993.6" y="309" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="996.62" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (558 samples, 1.18%; +0.07%)</title><rect x="1109.1" y="421" width="14.0" height="15.0" fill="rgb(255,87,87)" rx="2" ry="2" />
<text  x="1112.15" y="431.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (6 samples, 0.01%; +0.00%)</title><rect x="1102.0" y="357" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1105.01" y="367.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (241 samples, 0.51%; -0.00%)</title><rect x="207.2" y="165" width="6.0" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="210.18" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (8 samples, 0.02%; -0.01%)</title><rect x="867.6" y="469" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="870.58" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (148 samples, 0.31%; +0.00%)</title><rect x="1115.7" y="389" width="3.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1118.70" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (130 samples, 0.28%; +0.00%)</title><rect x="561.1" y="293" width="3.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="564.06" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (22,602 samples, 47.95%; +0.01%)</title><rect x="54.2" y="469" width="565.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="57.18" y="479.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>seastar::memory::allocate (140 samples, 0.30%; +0.03%)</title><rect x="1003.7" y="261" width="3.5" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="1006.73" y="271.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (4 samples, 0.01%; +0.00%)</title><rect x="106.3" y="421" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="109.30" y="431.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (10 samples, 0.02%; +0.01%)</title><rect x="902.3" y="389" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="905.30" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (5,947 samples, 12.62%; -0.01%)</title><rect x="116.7" y="341" width="148.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="119.74" y="351.5" >mutation_fragment_m..</text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (38 samples, 0.08%; +0.01%)</title><rect x="71.8" y="373" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="74.78" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (16 samples, 0.03%; -0.00%)</title><rect x="454.6" y="277" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="457.60" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (87 samples, 0.18%; +0.00%)</title><rect x="1116.5" y="341" width="2.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1119.53" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (9 samples, 0.02%; -0.01%)</title><rect x="423.4" y="373" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="426.38" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%; 0.00%)</title><rect x="1131.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.35" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (20 samples, 0.04%; -0.01%)</title><rect x="742.4" y="293" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="745.40" y="303.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (14 samples, 0.03%; 0.00%)</title><rect x="997.8" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1000.80" y="303.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (109 samples, 0.23%; -0.01%)</title><rect x="916.3" y="389" width="2.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="919.35" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (18 samples, 0.04%; +0.00%)</title><rect x="992.9" y="261" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="995.87" y="271.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.00%)</title><rect x="807.5" y="213" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="810.51" y="223.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (29 samples, 0.06%; 0.00%)</title><rect x="462.9" y="277" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="465.89" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="891.4" y="293" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="894.36" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (29 samples, 0.06%; +0.01%)</title><rect x="413.9" y="277" width="0.7" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="416.90" y="287.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (38 samples, 0.08%; +0.04%)</title><rect x="1103.4" y="357" width="0.9" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="1106.36" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (4 samples, 0.01%; +0.00%)</title><rect x="288.5" y="389" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="291.51" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (13 samples, 0.03%; 0.00%)</title><rect x="862.0" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.98" y="415.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (266 samples, 0.56%; -0.01%)</title><rect x="722.0" y="421" width="6.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="725.05" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (4 samples, 0.01%; 0.00%)</title><rect x="389.8" y="165" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="392.82" y="175.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::got_cl (11 samples, 0.02%; +0.00%)</title><rect x="690.9" y="469" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="693.90" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (63 samples, 0.13%; -0.00%)</title><rect x="1094.7" y="325" width="1.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1097.68" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (4 samples, 0.01%; -0.00%)</title><rect x="613.6" y="437" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="616.63" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (138 samples, 0.29%; -0.01%)</title><rect x="609.8" y="421" width="3.4" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="612.75" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (4 samples, 0.01%; +0.01%)</title><rect x="758.6" y="341" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="761.62" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (19 samples, 0.04%; -0.01%)</title><rect x="460.7" y="309" width="0.4" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="463.66" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (5 samples, 0.01%; -0.00%)</title><rect x="142.3" y="261" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="145.27" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (6 samples, 0.01%; +0.00%)</title><rect x="637.5" y="485" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="640.49" y="495.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (5 samples, 0.01%; -0.00%)</title><rect x="947.0" y="405" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="950.01" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume (54 samples, 0.11%; +0.06%)</title><rect x="395.0" y="229" width="1.4" height="15.0" fill="rgb(255,115,115)" rx="2" ry="2" />
<text  x="398.02" y="239.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (4 samples, 0.01%; +0.00%)</title><rect x="429.0" y="357" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="432.04" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (130 samples, 0.28%; -0.02%)</title><rect x="634.5" y="501" width="3.3" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="637.53" y="511.5" ></text>
</g>
<g >
<title>sstring_hash::operator (13 samples, 0.03%; -0.00%)</title><rect x="827.8" y="309" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="830.83" y="319.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (14 samples, 0.03%; +0.01%)</title><rect x="583.9" y="405" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="586.94" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (11 samples, 0.02%; 0.00%)</title><rect x="862.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.85" y="367.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (43 samples, 0.09%; 0.00%)</title><rect x="737.8" y="373" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="740.79" y="383.5" ></text>
</g>
<g >
<title>operator new (42 samples, 0.09%; +0.00%)</title><rect x="1157.6" y="437" width="1.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1160.58" y="447.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (10 samples, 0.02%; 0.00%)</title><rect x="1140.1" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.09" y="255.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.01%; 0.00%)</title><rect x="18.6" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.64" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.01%)</title><rect x="1148.3" y="485" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1151.32" y="495.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt; &gt; (7 samples, 0.01%; +0.00%)</title><rect x="811.0" y="325" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="814.01" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (83 samples, 0.18%; -0.02%)</title><rect x="675.3" y="453" width="2.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="678.28" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (5 samples, 0.01%; +0.00%)</title><rect x="701.4" y="421" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="704.44" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (58 samples, 0.12%; -0.00%)</title><rect x="19.5" y="341" width="1.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="22.46" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (7 samples, 0.01%; +0.00%)</title><rect x="758.3" y="309" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="761.27" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (4 samples, 0.01%; +0.01%)</title><rect x="550.5" y="357" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="553.50" y="367.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (13 samples, 0.03%; -0.00%)</title><rect x="727.2" y="293" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="730.20" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (14 samples, 0.03%; 0.00%)</title><rect x="862.8" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.83" y="383.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (6 samples, 0.01%; 0.00%)</title><rect x="1141.0" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.04" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (4 samples, 0.01%; -0.01%)</title><rect x="448.9" y="293" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="451.92" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (27 samples, 0.06%; +0.01%)</title><rect x="819.1" y="357" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="822.07" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (5 samples, 0.01%; 0.00%)</title><rect x="657.0" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="659.96" y="495.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (5 samples, 0.01%; 0.00%)</title><rect x="20.8" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.76" y="319.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (11,187 samples, 23.73%; -0.01%)</title><rect x="862.4" y="501" width="280.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="865.40" y="511.5" >seastar::lambda_task&lt;seastar::executi..</text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (18 samples, 0.04%; -0.02%)</title><rect x="53.7" y="469" width="0.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="56.73" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (104 samples, 0.22%; +0.02%)</title><rect x="845.1" y="373" width="2.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="848.05" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (6 samples, 0.01%; +0.00%)</title><rect x="21.2" y="325" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="24.24" y="335.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (1,588 samples, 3.37%; +0.01%)</title><rect x="773.6" y="341" width="39.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="776.56" y="351.5" >ser..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (34 samples, 0.07%; -0.01%)</title><rect x="203.1" y="117" width="0.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="206.07" y="127.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (246 samples, 0.52%; -0.01%)</title><rect x="980.3" y="341" width="6.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="983.30" y="351.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (12 samples, 0.03%; +0.01%)</title><rect x="248.2" y="229" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="251.18" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (4 samples, 0.01%; +0.01%)</title><rect x="666.8" y="469" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="669.82" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (6 samples, 0.01%; 0.00%)</title><rect x="1146.6" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.59" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (10 samples, 0.02%; +0.00%)</title><rect x="972.8" y="357" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="975.84" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (27 samples, 0.06%; 0.00%)</title><rect x="1174.8" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1177.83" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (19 samples, 0.04%; 0.00%)</title><rect x="22.3" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.32" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (110 samples, 0.23%; +0.01%)</title><rect x="724.8" y="341" width="2.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="727.80" y="351.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (4,430 samples, 9.40%; -0.05%)</title><rect x="425.8" y="421" width="110.9" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="428.79" y="431.5" >query::querie..</text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (525 samples, 1.11%; +0.01%)</title><rect x="130.1" y="277" width="13.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="133.13" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (4 samples, 0.01%; -0.01%)</title><rect x="510.7" y="277" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="513.72" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (11 samples, 0.02%; +0.01%)</title><rect x="389.5" y="149" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="392.54" y="159.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (8 samples, 0.02%; +0.01%)</title><rect x="760.5" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="763.47" y="383.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (116 samples, 0.25%; 0.00%)</title><rect x="1024.7" y="165" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1027.74" y="175.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (191 samples, 0.41%; +0.00%)</title><rect x="755.7" y="373" width="4.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="758.69" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (4 samples, 0.01%; +0.00%)</title><rect x="847.7" y="389" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="850.73" y="399.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (4 samples, 0.01%; +0.00%)</title><rect x="941.6" y="389" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="944.55" y="399.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (78 samples, 0.17%; -0.00%)</title><rect x="539.1" y="389" width="2.0" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="542.13" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (25 samples, 0.05%; -0.01%)</title><rect x="764.8" y="341" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="767.78" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (750 samples, 1.59%; -0.06%)</title><rect x="371.6" y="197" width="18.8" height="15.0" fill="rgb(112,112,255)" rx="2" ry="2" />
<text  x="374.62" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::take (4 samples, 0.01%; +0.01%)</title><rect x="688.4" y="453" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="691.43" y="463.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (16 samples, 0.03%; +0.01%)</title><rect x="507.0" y="213" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="510.04" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (12 samples, 0.03%; -0.00%)</title><rect x="829.9" y="405" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="832.86" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (21 samples, 0.04%; +0.00%)</title><rect x="1047.3" y="213" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1050.32" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (39 samples, 0.08%; +0.00%)</title><rect x="202.0" y="69" width="1.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="205.02" y="79.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (8 samples, 0.02%; -0.00%)</title><rect x="726.5" y="293" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="729.50" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (4 samples, 0.01%; +0.00%)</title><rect x="989.9" y="277" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="992.92" y="287.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (10 samples, 0.02%; +0.00%)</title><rect x="122.0" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="124.97" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (6 samples, 0.01%; 0.00%)</title><rect x="19.8" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.76" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.01%; +0.00%)</title><rect x="789.1" y="213" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="792.08" y="223.5" ></text>
</g>
<g >
<title>query_result_builder::query_result_builder (4 samples, 0.01%; +0.00%)</title><rect x="59.7" y="453" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="62.71" y="463.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (43 samples, 0.09%; +0.02%)</title><rect x="65.4" y="405" width="1.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="68.45" y="415.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_c84e941df99b64f17e27a2bbf8172d805023c352] (4 samples, 0.01%; +0.01%)</title><rect x="987.4" y="325" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="990.44" y="335.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (5 samples, 0.01%; -0.03%)</title><rect x="200.9" y="85" width="0.1" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="203.92" y="95.5" ></text>
</g>
<g >
<title>operator delete (41 samples, 0.09%; -0.01%)</title><rect x="611.7" y="373" width="1.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="614.70" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (7 samples, 0.01%; +0.00%)</title><rect x="321.0" y="213" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="323.95" y="223.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.01%; +0.00%)</title><rect x="908.5" y="325" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="911.51" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (4 samples, 0.01%; +0.01%)</title><rect x="213.2" y="165" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="216.21" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (7 samples, 0.01%; -0.01%)</title><rect x="1043.5" y="277" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1046.46" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (325 samples, 0.69%; +0.00%)</title><rect x="934.8" y="421" width="8.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="937.80" y="431.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (5 samples, 0.01%; -0.01%)</title><rect x="880.4" y="405" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="883.42" y="415.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (4 samples, 0.01%; +0.00%)</title><rect x="1023.1" y="197" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1026.11" y="207.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (752 samples, 1.60%; +0.12%)</title><rect x="125.1" y="293" width="18.9" height="15.0" fill="rgb(255,14,14)" rx="2" ry="2" />
<text  x="128.15" y="303.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (147 samples, 0.31%; -0.01%)</title><rect x="467.1" y="277" width="3.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="470.14" y="287.5" ></text>
</g>
<g >
<title>operator new (49 samples, 0.10%; 0.00%)</title><rect x="715.4" y="421" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.41" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (10 samples, 0.02%; +0.01%)</title><rect x="1041.0" y="277" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1044.03" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (750 samples, 1.59%; -0.02%)</title><rect x="1075.9" y="325" width="18.8" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1078.90" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,796 samples, 10.17%; -0.01%)</title><rect x="295.0" y="309" width="120.1" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="298.02" y="319.5" >std::__invoke_..</text>
</g>
<g >
<title>seastar::thread_context::main (284 samples, 0.60%; 0.00%)</title><rect x="16.4" y="597" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.43" y="607.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (5 samples, 0.01%; -0.00%)</title><rect x="1173.8" y="405" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1176.80" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (5 samples, 0.01%; -0.00%)</title><rect x="1141.1" y="197" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1144.06" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::clear (7 samples, 0.01%; +0.00%)</title><rect x="600.6" y="437" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="603.59" y="447.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (18 samples, 0.04%; +0.00%)</title><rect x="594.1" y="437" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="597.08" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; 0.00%)</title><rect x="583.8" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="586.82" y="399.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (24 samples, 0.05%; +0.00%)</title><rect x="1022.3" y="181" width="0.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1025.31" y="191.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (57 samples, 0.12%; -0.01%)</title><rect x="758.9" y="341" width="1.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="761.94" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (4 samples, 0.01%; +0.00%)</title><rect x="224.8" y="213" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="227.75" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (4 samples, 0.01%; 0.00%)</title><rect x="862.1" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.05" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::take_value (5 samples, 0.01%; +0.00%)</title><rect x="537.6" y="405" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="540.63" y="415.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (203 samples, 0.43%; -0.01%)</title><rect x="450.0" y="309" width="5.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="452.97" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (9 samples, 0.02%; +0.00%)</title><rect x="18.3" y="261" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="21.34" y="271.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (26 samples, 0.06%; +0.01%)</title><rect x="1171.9" y="421" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1174.88" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (11 samples, 0.02%; -0.01%)</title><rect x="600.0" y="437" width="0.3" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="603.01" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (5 samples, 0.01%; +0.00%)</title><rect x="1105.4" y="389" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1108.44" y="399.5" ></text>
</g>
<g >
<title>reader_permit::consume (10 samples, 0.02%; +0.00%)</title><rect x="503.0" y="197" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="505.96" y="207.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (6 samples, 0.01%; 0.00%)</title><rect x="23.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (30 samples, 0.06%; -0.02%)</title><rect x="952.0" y="373" width="0.7" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="954.97" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (64 samples, 0.14%; -0.01%)</title><rect x="508.0" y="245" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="510.99" y="255.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (4 samples, 0.01%; -0.01%)</title><rect x="1030.3" y="197" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1033.32" y="207.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (6 samples, 0.01%; 0.00%)</title><rect x="683.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.32" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (15 samples, 0.03%; +0.01%)</title><rect x="482.9" y="213" width="0.4" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="485.94" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (9 samples, 0.02%; 0.00%)</title><rect x="1092.5" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1095.50" y="287.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (35 samples, 0.07%; +0.01%)</title><rect x="129.1" y="277" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="132.13" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (90 samples, 0.19%; +0.06%)</title><rect x="725.3" y="309" width="2.2" height="15.0" fill="rgb(255,115,115)" rx="2" ry="2" />
<text  x="728.27" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (55 samples, 0.12%; +0.11%)</title><rect x="77.6" y="453" width="1.4" height="15.0" fill="rgb(255,35,35)" rx="2" ry="2" />
<text  x="80.64" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (27 samples, 0.06%; -0.01%)</title><rect x="34.7" y="485" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="37.68" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (257 samples, 0.55%; -0.00%)</title><rect x="1086.1" y="277" width="6.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1089.07" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (4 samples, 0.01%; -0.03%)</title><rect x="895.9" y="325" width="0.1" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="898.87" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (4 samples, 0.01%; +0.00%)</title><rect x="610.5" y="405" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="613.48" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.01%; +0.00%)</title><rect x="585.7" y="389" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="588.67" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (6 samples, 0.01%; -0.01%)</title><rect x="263.1" y="309" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="266.08" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (65 samples, 0.14%; -0.02%)</title><rect x="643.4" y="437" width="1.6" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="646.42" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,252 samples, 4.78%; +0.03%)</title><rect x="167.4" y="213" width="56.4" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="170.38" y="223.5" >logal..</text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (75 samples, 0.16%; +0.00%)</title><rect x="775.0" y="325" width="1.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="778.01" y="335.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (14 samples, 0.03%; +0.02%)</title><rect x="848.2" y="453" width="0.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="851.18" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (9 samples, 0.02%; +0.01%)</title><rect x="642.4" y="389" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="645.44" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.07%; 0.00%)</title><rect x="1140.9" y="389" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.89" y="399.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (21 samples, 0.04%; 0.00%)</title><rect x="1140.0" y="277" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.04" y="287.5" ></text>
</g>
<g >
<title>sstring_hash::operator (24 samples, 0.05%; 0.00%)</title><rect x="847.0" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="850.03" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (22 samples, 0.05%; 0.00%)</title><rect x="1130.4" y="373" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.45" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (27 samples, 0.06%; -0.02%)</title><rect x="508.3" y="229" width="0.7" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="511.34" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (18 samples, 0.04%; +0.01%)</title><rect x="391.7" y="197" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="394.74" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (4 samples, 0.01%; +0.00%)</title><rect x="423.7" y="389" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="426.66" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (22 samples, 0.05%; -0.01%)</title><rect x="1158.0" y="405" width="0.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1161.03" y="415.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (11 samples, 0.02%; +0.01%)</title><rect x="405.4" y="197" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="408.39" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (10 samples, 0.02%; 0.00%)</title><rect x="862.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.98" y="399.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (10 samples, 0.02%; -0.00%)</title><rect x="169.3" y="197" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="172.28" y="207.5" ></text>
</g>
<g >
<title>db::filter_for_query (60 samples, 0.13%; +0.04%)</title><rect x="1063.0" y="341" width="1.5" height="15.0" fill="rgb(255,143,143)" rx="2" ry="2" />
<text  x="1066.04" y="351.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (72 samples, 0.15%; -0.00%)</title><rect x="1113.5" y="389" width="1.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1116.48" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (33 samples, 0.07%; +0.00%)</title><rect x="677.4" y="469" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="680.41" y="479.5" ></text>
</g>
<g >
<title>db::commitlog::segment::allocate (4 samples, 0.01%; 0.00%)</title><rect x="1140.6" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.56" y="287.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.06%; 0.00%)</title><rect x="671.7" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="674.71" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (24 samples, 0.05%; -0.00%)</title><rect x="328.7" y="181" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="331.69" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (4 samples, 0.01%; +0.01%)</title><rect x="1172.7" y="421" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1175.65" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (16 samples, 0.03%; +0.01%)</title><rect x="259.4" y="277" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="262.40" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (10 samples, 0.02%; +0.01%)</title><rect x="73.7" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="76.71" y="463.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (5,339 samples, 11.33%; +0.01%)</title><rect x="290.0" y="389" width="133.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="292.96" y="399.5" >query::consume_p..</text>
</g>
<g >
<title>__start_context (284 samples, 0.60%; 0.00%)</title><rect x="16.4" y="613" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.43" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (9 samples, 0.02%; +0.01%)</title><rect x="512.0" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="514.97" y="303.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (256 samples, 0.54%; +0.01%)</title><rect x="684.9" y="485" width="6.4" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="687.87" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (126 samples, 0.27%; -0.03%)</title><rect x="415.8" y="293" width="3.1" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="418.77" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="810.0" y="261" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="813.03" y="271.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;, &amp;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;::_link&gt;::expire (10 samples, 0.02%; +0.01%)</title><rect x="1175.1" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1178.06" y="447.5" ></text>
</g>
<g >
<title>mutation_querier::consume (1,729 samples, 3.67%; -0.05%)</title><rect x="323.0" y="197" width="43.3" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="326.00" y="207.5" >muta..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (4 samples, 0.01%; 0.00%)</title><rect x="18.8" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.76" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (179 samples, 0.38%; +0.01%)</title><rect x="1168.7" y="469" width="4.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1171.72" y="479.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (387 samples, 0.82%; +0.02%)</title><rect x="793.6" y="213" width="9.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="796.64" y="223.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%; -0.00%)</title><rect x="667.0" y="469" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="670.05" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (8 samples, 0.02%; +0.01%)</title><rect x="1131.1" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1134.10" y="383.5" ></text>
</g>
<g >
<title>operator delete (19 samples, 0.04%; -0.00%)</title><rect x="581.8" y="405" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="584.76" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (11 samples, 0.02%; +0.02%)</title><rect x="894.9" y="309" width="0.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="897.92" y="319.5" ></text>
</g>
<g >
<title>sstring_hash::operator (34 samples, 0.07%; 0.00%)</title><rect x="839.5" y="373" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="842.52" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (4 samples, 0.01%; -0.01%)</title><rect x="42.4" y="469" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="45.42" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (54 samples, 0.11%; +0.02%)</title><rect x="754.2" y="341" width="1.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="757.21" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (38 samples, 0.08%; +0.02%)</title><rect x="297.4" y="245" width="0.9" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="300.40" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (9 samples, 0.02%; +0.01%)</title><rect x="854.9" y="469" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="857.94" y="479.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10 samples, 0.02%; +0.01%)</title><rect x="658.3" y="469" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="661.31" y="479.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (13 samples, 0.03%; -0.01%)</title><rect x="512.5" y="325" width="0.3" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="515.50" y="335.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (5,167 samples, 10.96%; +0.01%)</title><rect x="718.8" y="453" width="129.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="721.84" y="463.5" >single_node_cql_..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (225 samples, 0.48%; +0.00%)</title><rect x="607.9" y="437" width="5.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="610.90" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; -0.00%)</title><rect x="926.3" y="373" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="929.28" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (114 samples, 0.24%; +0.07%)</title><rect x="620.8" y="485" width="2.9" height="15.0" fill="rgb(255,91,91)" rx="2" ry="2" />
<text  x="623.81" y="495.5" ></text>
</g>
<g >
<title>operator new (33 samples, 0.07%; +0.00%)</title><rect x="784.7" y="245" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="787.70" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (86 samples, 0.18%; +0.02%)</title><rect x="381.9" y="149" width="2.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="384.86" y="159.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (17 samples, 0.04%; +0.01%)</title><rect x="74.7" y="453" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="77.68" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (74 samples, 0.16%; 0.00%)</title><rect x="692.3" y="485" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="695.33" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_range_check (4 samples, 0.01%; +0.00%)</title><rect x="887.9" y="293" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="890.91" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (58 samples, 0.12%; +0.03%)</title><rect x="1160.0" y="453" width="1.4" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="1162.99" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (6 samples, 0.01%; -0.01%)</title><rect x="739.2" y="357" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="742.24" y="367.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (22 samples, 0.05%; 0.00%)</title><rect x="847.0" y="341" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="850.03" y="351.5" ></text>
</g>
<g >
<title>query_result_builder::consume (8 samples, 0.02%; 0.00%)</title><rect x="682.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.57" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (10 samples, 0.02%; +0.01%)</title><rect x="231.8" y="181" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="234.76" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (5 samples, 0.01%; +0.00%)</title><rect x="336.7" y="181" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="339.70" y="191.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (70 samples, 0.15%; +0.01%)</title><rect x="936.8" y="373" width="1.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="939.82" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (256 samples, 0.54%; +0.00%)</title><rect x="624.9" y="501" width="6.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="627.89" y="511.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (47 samples, 0.10%; +0.01%)</title><rect x="514.0" y="293" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="517.03" y="303.5" ></text>
</g>
<g >
<title>reader_permit::consume (9 samples, 0.02%; -0.01%)</title><rect x="505.6" y="165" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="508.64" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (8 samples, 0.02%; -0.00%)</title><rect x="261.5" y="277" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="264.53" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (132 samples, 0.28%; +0.02%)</title><rect x="990.0" y="277" width="3.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="993.02" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (86 samples, 0.18%; +0.00%)</title><rect x="658.7" y="453" width="2.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="661.71" y="463.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (210 samples, 0.45%; +0.01%)</title><rect x="1126.5" y="421" width="5.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1129.47" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (6 samples, 0.01%; 0.00%)</title><rect x="145.7" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.73" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (14 samples, 0.03%; -0.01%)</title><rect x="422.5" y="357" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="425.46" y="367.5" ></text>
</g>
<g >
<title>operator new (64 samples, 0.14%; +0.00%)</title><rect x="1032.3" y="213" width="1.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1035.30" y="223.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (13 samples, 0.03%; +0.00%)</title><rect x="625.6" y="485" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="628.57" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (5 samples, 0.01%; -0.00%)</title><rect x="814.8" y="341" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="817.77" y="351.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (116 samples, 0.25%; +0.00%)</title><rect x="241.1" y="213" width="2.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="244.07" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (5 samples, 0.01%; +0.01%)</title><rect x="880.6" y="405" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="883.55" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (30 samples, 0.06%; +0.00%)</title><rect x="846.1" y="357" width="0.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="849.06" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (6 samples, 0.01%; -0.01%)</title><rect x="987.8" y="325" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="990.81" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (29 samples, 0.06%; -0.02%)</title><rect x="404.0" y="165" width="0.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="406.98" y="175.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (8 samples, 0.02%; +0.01%)</title><rect x="645.7" y="453" width="0.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="648.72" y="463.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10 samples, 0.02%; +0.01%)</title><rect x="1156.1" y="405" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1159.13" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (10 samples, 0.02%; +0.01%)</title><rect x="897.6" y="357" width="0.3" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="900.65" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (51 samples, 0.11%; -0.01%)</title><rect x="1018.2" y="213" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1021.15" y="223.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (192 samples, 0.41%; -0.02%)</title><rect x="641.1" y="469" width="4.8" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="644.14" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (5 samples, 0.01%; -0.08%)</title><rect x="1114.2" y="357" width="0.1" height="15.0" fill="rgb(70,70,255)" rx="2" ry="2" />
<text  x="1117.18" y="367.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (176 samples, 0.37%; 0.00%)</title><rect x="798.7" y="165" width="4.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="801.67" y="175.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; -0.01%)</title><rect x="106.6" y="421" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="109.60" y="431.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (9 samples, 0.02%; +0.01%)</title><rect x="288.6" y="405" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="291.64" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (35 samples, 0.07%; +0.01%)</title><rect x="992.0" y="229" width="0.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="994.97" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (4 samples, 0.01%; 0.00%)</title><rect x="968.9" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="971.94" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="654.3" y="485" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="657.33" y="495.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (12 samples, 0.03%; +0.01%)</title><rect x="306.4" y="229" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="309.36" y="239.5" ></text>
</g>
<g >
<title>perf_simple_que (47,137 samples, 100.00%; 0.00%)</title><rect x="10.0" y="645" width="1179.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >perf_simple_que</text>
</g>
<g >
<title>query::querier_base::close (11 samples, 0.02%; 0.00%)</title><rect x="1173.8" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1176.78" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (27 samples, 0.06%; -0.00%)</title><rect x="1033.9" y="213" width="0.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1036.90" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (14 samples, 0.03%; -0.00%)</title><rect x="433.8" y="341" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="436.85" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (154 samples, 0.33%; -0.00%)</title><rect x="982.6" y="325" width="3.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="985.56" y="335.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (5 samples, 0.01%; -0.00%)</title><rect x="725.1" y="309" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="728.15" y="319.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (32 samples, 0.07%; +0.00%)</title><rect x="839.5" y="357" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="842.55" y="367.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (4 samples, 0.01%; +0.00%)</title><rect x="391.3" y="197" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="394.29" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (7 samples, 0.01%; -0.01%)</title><rect x="830.7" y="421" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="833.71" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (21 samples, 0.04%; +0.00%)</title><rect x="702.1" y="421" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="705.09" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (8 samples, 0.02%; -0.02%)</title><rect x="615.1" y="389" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="618.08" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (15 samples, 0.03%; -0.00%)</title><rect x="819.4" y="341" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="822.37" y="351.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (42 samples, 0.09%; -0.01%)</title><rect x="673.6" y="469" width="1.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="676.58" y="479.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (434 samples, 0.92%; -0.01%)</title><rect x="62.3" y="453" width="10.9" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="65.34" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (27 samples, 0.06%; 0.00%)</title><rect x="862.5" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.53" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (23,073 samples, 48.95%; -0.05%)</title><rect x="47.1" y="501" width="577.5" height="15.0" fill="rgb(133,133,255)" rx="2" ry="2" />
<text  x="50.07" y="511.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>operator delete (35 samples, 0.07%; -0.02%)</title><rect x="561.4" y="277" width="0.9" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="564.39" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (72 samples, 0.15%; -0.01%)</title><rect x="826.4" y="325" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="829.38" y="335.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (43 samples, 0.09%; +0.06%)</title><rect x="879.3" y="405" width="1.1" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="882.35" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="894.0" y="309" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="897.02" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.01%)</title><rect x="260.4" y="261" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="263.37" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.01%; 0.00%)</title><rect x="632.2" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="635.15" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (30 samples, 0.06%; -0.00%)</title><rect x="926.5" y="405" width="0.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="929.48" y="415.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (5 samples, 0.01%; -0.03%)</title><rect x="915.6" y="389" width="0.1" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="918.57" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (12 samples, 0.03%; +0.00%)</title><rect x="440.6" y="261" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="443.63" y="271.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.01%; 0.00%)</title><rect x="19.2" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.16" y="319.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (34 samples, 0.07%; +0.00%)</title><rect x="156.2" y="197" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="159.19" y="207.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.02%; +0.01%)</title><rect x="161.8" y="229" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="164.80" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.07%; 0.00%)</title><rect x="1140.9" y="373" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.89" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (5 samples, 0.01%; +0.01%)</title><rect x="830.2" y="405" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="833.16" y="415.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (74 samples, 0.16%; +0.00%)</title><rect x="501.4" y="229" width="1.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="504.36" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (627 samples, 1.33%; -0.06%)</title><rect x="374.2" y="181" width="15.7" height="15.0" fill="rgb(119,119,255)" rx="2" ry="2" />
<text  x="377.22" y="191.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (23 samples, 0.05%; -0.00%)</title><rect x="801.6" y="85" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="804.57" y="95.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (7 samples, 0.01%; 0.00%)</title><rect x="1140.6" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.56" y="303.5" ></text>
</g>
<g >
<title>operator new (85 samples, 0.18%; +0.02%)</title><rect x="958.5" y="373" width="2.1" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="961.45" y="383.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (6 samples, 0.01%; -0.00%)</title><rect x="219.7" y="133" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="222.75" y="143.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (78 samples, 0.17%; +0.01%)</title><rect x="153.5" y="197" width="1.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="156.46" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.01%)</title><rect x="540.5" y="341" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="543.54" y="351.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (23 samples, 0.05%; 0.00%)</title><rect x="682.5" y="373" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.49" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (7 samples, 0.01%; +0.01%)</title><rect x="696.3" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="699.31" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (4 samples, 0.01%; -0.00%)</title><rect x="986.5" y="341" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="989.46" y="351.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (4,278 samples, 9.08%; +0.00%)</title><rect x="427.4" y="389" width="107.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="430.44" y="399.5" >std::function..</text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (5 samples, 0.01%; 0.00%)</title><rect x="46.5" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.50" y="447.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (9 samples, 0.02%; +0.01%)</title><rect x="553.9" y="309" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="556.93" y="319.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (5 samples, 0.01%; +0.01%)</title><rect x="804.3" y="261" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="807.30" y="271.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (4 samples, 0.01%; -0.01%)</title><rect x="739.3" y="341" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="742.29" y="351.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (4 samples, 0.01%; -0.01%)</title><rect x="1106.3" y="373" width="0.1" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="1109.29" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (4 samples, 0.01%; 0.00%)</title><rect x="776.8" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="779.79" y="319.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (6 samples, 0.01%; 0.00%)</title><rect x="1141.0" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.04" y="255.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (15 samples, 0.03%; -0.00%)</title><rect x="370.1" y="213" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="373.09" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (19 samples, 0.04%; +0.00%)</title><rect x="440.2" y="261" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="443.16" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (15 samples, 0.03%; +0.01%)</title><rect x="314.1" y="165" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="317.07" y="175.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (9 samples, 0.02%; -0.01%)</title><rect x="670.2" y="437" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="673.18" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (255 samples, 0.54%; +0.04%)</title><rect x="94.5" y="437" width="6.4" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="97.51" y="447.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (71 samples, 0.15%; +0.00%)</title><rect x="857.3" y="469" width="1.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="860.32" y="479.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (47 samples, 0.10%; -0.05%)</title><rect x="439.8" y="277" width="1.1" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="442.76" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (7 samples, 0.01%; 0.00%)</title><rect x="710.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="713.93" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (5 samples, 0.01%; +0.01%)</title><rect x="752.2" y="405" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="755.16" y="415.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (104 samples, 0.22%; -0.01%)</title><rect x="825.7" y="373" width="2.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="828.73" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (25 samples, 0.05%; -0.01%)</title><rect x="247.0" y="229" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="250.03" y="239.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.01%; +0.01%)</title><rect x="716.8" y="437" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="719.81" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (7 samples, 0.01%; +0.01%)</title><rect x="985.3" y="245" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="988.26" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (5 samples, 0.01%; +0.01%)</title><rect x="1114.7" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1117.73" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (5,937 samples, 12.59%; 0.00%)</title><rect x="711.5" y="501" width="148.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="714.53" y="511.5" >seastar::internal:..</text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (37 samples, 0.08%; 0.00%)</title><rect x="1139.9" y="485" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.94" y="495.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (57 samples, 0.12%; 0.00%)</title><rect x="614.0" y="437" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="616.96" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (408 samples, 0.87%; -0.00%)</title><rect x="885.4" y="325" width="10.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="888.43" y="335.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (6 samples, 0.01%; +0.01%)</title><rect x="483.8" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="486.81" y="303.5" ></text>
</g>
<g >
<title>mutation_querier::consume (6 samples, 0.01%; +0.00%)</title><rect x="682.6" y="277" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="685.57" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (66 samples, 0.14%; +0.01%)</title><rect x="977.7" y="277" width="1.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="980.73" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (50 samples, 0.11%; +0.02%)</title><rect x="1158.7" y="453" width="1.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1161.73" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.01%; +0.00%)</title><rect x="767.0" y="341" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="770.03" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (6 samples, 0.01%; 0.00%)</title><rect x="857.0" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.97" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (5 samples, 0.01%; +0.01%)</title><rect x="709.6" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="712.63" y="511.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (4 samples, 0.01%; -0.00%)</title><rect x="1064.8" y="341" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1067.84" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.01%)</title><rect x="624.0" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="627.02" y="479.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (6 samples, 0.01%; -0.02%)</title><rect x="567.1" y="373" width="0.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="570.09" y="383.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (5 samples, 0.01%; +0.01%)</title><rect x="681.7" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="684.74" y="495.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (93 samples, 0.20%; +0.00%)</title><rect x="528.1" y="277" width="2.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="531.09" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (41 samples, 0.09%; -0.01%)</title><rect x="764.5" y="373" width="1.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="767.48" y="383.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (6 samples, 0.01%; -0.01%)</title><rect x="243.1" y="165" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="246.05" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (7 samples, 0.01%; -0.01%)</title><rect x="333.7" y="165" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="336.74" y="175.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (4 samples, 0.01%; 0.00%)</title><rect x="46.6" y="421" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.65" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (11 samples, 0.02%; +0.00%)</title><rect x="161.0" y="213" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="163.97" y="223.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (23 samples, 0.05%; +0.00%)</title><rect x="742.3" y="309" width="0.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="745.35" y="319.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (33 samples, 0.07%; 0.00%)</title><rect x="1140.9" y="469" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.89" y="479.5" ></text>
</g>
<g >
<title>operator new (42 samples, 0.09%; +0.00%)</title><rect x="493.0" y="293" width="1.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="496.00" y="303.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (12 samples, 0.03%; -0.01%)</title><rect x="124.6" y="261" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="127.65" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (20 samples, 0.04%; -0.00%)</title><rect x="1073.1" y="293" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1076.10" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (8 samples, 0.02%; -0.01%)</title><rect x="262.0" y="293" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="265.00" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (21 samples, 0.04%; -0.02%)</title><rect x="653.8" y="485" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="656.76" y="495.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (266 samples, 0.56%; -0.00%)</title><rect x="16.9" y="517" width="6.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="19.86" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (188 samples, 0.40%; -0.03%)</title><rect x="248.9" y="261" width="4.7" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="251.93" y="271.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::done (5 samples, 0.01%; -0.01%)</title><rect x="588.4" y="421" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="591.45" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (10 samples, 0.02%; +0.01%)</title><rect x="652.2" y="437" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="655.23" y="447.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (8 samples, 0.02%; 0.00%)</title><rect x="862.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.88" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (13 samples, 0.03%; +0.00%)</title><rect x="23.7" y="485" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="26.69" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (8 samples, 0.02%; +0.01%)</title><rect x="495.9" y="261" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="498.93" y="271.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (2,562 samples, 5.43%; +0.03%)</title><rect x="986.6" y="341" width="64.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="989.56" y="351.5" >service..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (4 samples, 0.01%; +0.01%)</title><rect x="669.8" y="421" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="672.78" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (5 samples, 0.01%; -0.07%)</title><rect x="501.2" y="229" width="0.1" height="15.0" fill="rgb(94,94,255)" rx="2" ry="2" />
<text  x="504.21" y="239.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (6 samples, 0.01%; 0.00%)</title><rect x="46.5" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.50" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (288 samples, 0.61%; -0.01%)</title><rect x="558.5" y="309" width="7.2" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="561.46" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (4 samples, 0.01%; 0.00%)</title><rect x="979.5" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="982.53" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (13 samples, 0.03%; +0.01%)</title><rect x="285.0" y="357" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="287.96" y="367.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (2,493 samples, 5.29%; -0.01%)</title><rect x="456.9" y="341" width="62.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="459.88" y="351.5" >memtab..</text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (42 samples, 0.09%; -0.05%)</title><rect x="665.9" y="485" width="1.1" height="15.0" fill="rgb(133,133,255)" rx="2" ry="2" />
<text  x="668.92" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (14 samples, 0.03%; -0.01%)</title><rect x="284.5" y="325" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="287.48" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="445.5" y="261" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="448.51" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="961.6" y="373" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="964.60" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (6 samples, 0.01%; +0.00%)</title><rect x="983.5" y="293" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="986.48" y="303.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (4 samples, 0.01%; 0.00%)</title><rect x="950.8" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="953.79" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (102 samples, 0.22%; +0.11%)</title><rect x="405.7" y="213" width="2.5" height="15.0" fill="rgb(255,31,31)" rx="2" ry="2" />
<text  x="408.66" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (9 samples, 0.02%; +0.01%)</title><rect x="419.5" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="422.48" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (11 samples, 0.02%; +0.02%)</title><rect x="949.9" y="341" width="0.2" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="952.86" y="351.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (55 samples, 0.12%; -0.04%)</title><rect x="355.2" y="165" width="1.4" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="358.20" y="175.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator::operator* (4 samples, 0.01%; +0.01%)</title><rect x="760.7" y="373" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="763.67" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (5 samples, 0.01%; -0.00%)</title><rect x="710.7" y="501" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="713.73" y="511.5" ></text>
</g>
<g >
<title>validation::validate_column_family (330 samples, 0.70%; -0.00%)</title><rect x="820.1" y="389" width="8.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="823.07" y="399.5" ></text>
</g>
<g >
<title>operator delete (25 samples, 0.05%; -0.01%)</title><rect x="817.9" y="373" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="820.89" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (13 samples, 0.03%; 0.00%)</title><rect x="1141.3" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.29" y="255.5" ></text>
</g>
<g >
<title>operator delete (39 samples, 0.08%; -0.04%)</title><rect x="554.8" y="325" width="1.0" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="557.83" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (83 samples, 0.18%; 0.00%)</title><rect x="806.0" y="261" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="809.00" y="271.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (105 samples, 0.22%; +0.02%)</title><rect x="512.8" y="325" width="2.7" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="515.82" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (8 samples, 0.02%; +0.00%)</title><rect x="948.9" y="325" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="951.86" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (34 samples, 0.07%; -0.01%)</title><rect x="829.4" y="421" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="832.43" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (6 samples, 0.01%; -0.01%)</title><rect x="949.7" y="341" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="952.71" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (869 samples, 1.84%; -0.01%)</title><rect x="122.2" y="309" width="21.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="125.22" y="319.5" >m..</text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (60 samples, 0.13%; -0.02%)</title><rect x="524.1" y="293" width="1.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="527.11" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (5 samples, 0.01%; -0.00%)</title><rect x="1141.5" y="213" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1144.46" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (5,386 samples, 11.43%; 0.00%)</title><rect x="289.0" y="405" width="134.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="292.04" y="415.5" >seastar::future&lt;m..</text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (42 samples, 0.09%; +0.01%)</title><rect x="727.7" y="405" width="1.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="730.65" y="415.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.06%; 0.00%)</title><rect x="763.7" y="373" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="766.75" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (20 samples, 0.04%; +0.01%)</title><rect x="708.0" y="485" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="711.03" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (8 samples, 0.02%; +0.01%)</title><rect x="976.5" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="979.47" y="351.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (8 samples, 0.02%; +0.00%)</title><rect x="335.7" y="181" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="338.75" y="191.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (16 samples, 0.03%; -0.02%)</title><rect x="656.4" y="485" width="0.4" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="659.41" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (8 samples, 0.02%; +0.01%)</title><rect x="654.9" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="657.86" y="463.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (10 samples, 0.02%; -0.02%)</title><rect x="1132.2" y="421" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1135.18" y="431.5" ></text>
</g>
<g >
<title>query::result::result (44 samples, 0.09%; +0.00%)</title><rect x="587.3" y="421" width="1.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="590.35" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (14 samples, 0.03%; -0.01%)</title><rect x="1033.5" y="181" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1036.55" y="191.5" ></text>
</g>
<g >
<title>table::query (19 samples, 0.04%; -0.00%)</title><rect x="1173.7" y="501" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1176.68" y="511.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (398 samples, 0.84%; +0.01%)</title><rect x="32.8" y="501" width="10.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="35.83" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (8 samples, 0.02%; -0.01%)</title><rect x="782.4" y="245" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="785.45" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (21 samples, 0.04%; -0.04%)</title><rect x="75.3" y="453" width="0.6" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="78.33" y="463.5" ></text>
</g>
<g >
<title>utils::array_search_gt (10 samples, 0.02%; +0.01%)</title><rect x="525.3" y="277" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="528.34" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (4 samples, 0.01%; -0.01%)</title><rect x="429.4" y="357" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="432.37" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (21 samples, 0.04%; +0.01%)</title><rect x="449.0" y="293" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="452.02" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; +0.00%)</title><rect x="490.5" y="309" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="493.52" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (4 samples, 0.01%; +0.00%)</title><rect x="613.5" y="437" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="616.53" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (4 samples, 0.01%; -0.00%)</title><rect x="702.0" y="421" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="704.99" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.02%; +0.01%)</title><rect x="791.7" y="213" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="794.66" y="223.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (13 samples, 0.03%; -0.00%)</title><rect x="436.4" y="325" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="439.43" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (10 samples, 0.02%; -0.00%)</title><rect x="1075.1" y="325" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1078.10" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (244 samples, 0.52%; +0.01%)</title><rect x="216.2" y="181" width="6.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="219.19" y="191.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (224 samples, 0.48%; -0.02%)</title><rect x="276.5" y="309" width="5.7" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="279.54" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (4 samples, 0.01%; -0.01%)</title><rect x="398.3" y="213" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="401.28" y="223.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (23 samples, 0.05%; +0.01%)</title><rect x="552.0" y="341" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="555.03" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (21 samples, 0.04%; +0.02%)</title><rect x="140.0" y="229" width="0.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="143.02" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (36 samples, 0.08%; +0.04%)</title><rect x="213.5" y="149" width="0.9" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="216.49" y="159.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (5 samples, 0.01%; -0.01%)</title><rect x="908.6" y="325" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="911.61" y="335.5" ></text>
</g>
<g >
<title>operator new (53 samples, 0.11%; +0.00%)</title><rect x="851.7" y="357" width="1.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="854.66" y="367.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (4 samples, 0.01%; +0.01%)</title><rect x="1064.7" y="341" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1067.74" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (30 samples, 0.06%; -0.02%)</title><rect x="981.8" y="293" width="0.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="984.76" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (4 samples, 0.01%; +0.00%)</title><rect x="41.5" y="453" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="44.47" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (20 samples, 0.04%; -0.00%)</title><rect x="1094.2" y="277" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1097.15" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (4 samples, 0.01%; +0.01%)</title><rect x="1050.7" y="357" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1053.75" y="367.5" ></text>
</g>
<g >
<title>operator new (87 samples, 0.18%; -0.00%)</title><rect x="158.8" y="213" width="2.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="161.79" y="223.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (14 samples, 0.03%; 0.00%)</title><rect x="1141.3" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.29" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (14 samples, 0.03%; +0.01%)</title><rect x="452.4" y="261" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="455.37" y="271.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (17 samples, 0.04%; -0.01%)</title><rect x="386.8" y="165" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="389.79" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (20 samples, 0.04%; +0.03%)</title><rect x="984.7" y="261" width="0.5" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="987.71" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (296 samples, 0.63%; +0.02%)</title><rect x="190.6" y="85" width="7.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="193.58" y="95.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (5 samples, 0.01%; -0.01%)</title><rect x="25.3" y="517" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="28.29" y="527.5" ></text>
</g>
<g >
<title>query::querier_base::close (7 samples, 0.01%; +0.01%)</title><rect x="59.4" y="453" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="62.36" y="463.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (76 samples, 0.16%; -0.02%)</title><rect x="1132.7" y="405" width="1.9" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="1135.70" y="415.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (4 samples, 0.01%; +0.00%)</title><rect x="682.6" y="261" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="685.62" y="271.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (215 samples, 0.46%; 0.00%)</title><rect x="722.3" y="405" width="5.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="725.27" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (52 samples, 0.11%; -0.03%)</title><rect x="892.5" y="277" width="1.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="895.47" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; +0.01%)</title><rect x="516.0" y="309" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="519.00" y="319.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (95 samples, 0.20%; -0.01%)</title><rect x="305.7" y="245" width="2.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="308.71" y="255.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (438 samples, 0.93%; +0.00%)</title><rect x="696.6" y="469" width="11.0" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="699.61" y="479.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (58 samples, 0.12%; -0.07%)</title><rect x="346.4" y="165" width="1.5" height="15.0" fill="rgb(91,91,255)" rx="2" ry="2" />
<text  x="349.41" y="175.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (19 samples, 0.04%; +0.03%)</title><rect x="201.0" y="101" width="0.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="204.05" y="111.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (7 samples, 0.01%; +0.00%)</title><rect x="896.8" y="357" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="899.85" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (7 samples, 0.01%; +0.00%)</title><rect x="853.1" y="357" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="856.06" y="367.5" ></text>
</g>
<g >
<title>reader_permit::consume (4 samples, 0.01%; -0.01%)</title><rect x="278.2" y="293" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="281.25" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (122 samples, 0.26%; -0.01%)</title><rect x="37.2" y="469" width="3.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="40.24" y="479.5" ></text>
</g>
<g >
<title>__tls_init (15 samples, 0.03%; +0.01%)</title><rect x="485.5" y="309" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="488.51" y="319.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (140 samples, 0.30%; -0.01%)</title><rect x="849.7" y="405" width="3.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="852.74" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (4 samples, 0.01%; -0.00%)</title><rect x="974.9" y="357" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="977.92" y="367.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (60 samples, 0.13%; -0.00%)</title><rect x="857.6" y="453" width="1.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="860.60" y="463.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.01%; +0.01%)</title><rect x="97.7" y="405" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="100.74" y="415.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (10 samples, 0.02%; +0.01%)</title><rect x="974.4" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="977.40" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (148 samples, 0.31%; +0.04%)</title><rect x="1057.8" y="309" width="3.7" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="1060.83" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (4 samples, 0.01%; 0.00%)</title><rect x="1108.9" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1111.87" y="383.5" ></text>
</g>
<g >
<title>row::external_memory_usage (220 samples, 0.47%; +0.01%)</title><rect x="207.7" y="149" width="5.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="210.71" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (9 samples, 0.02%; +0.01%)</title><rect x="834.3" y="357" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="837.27" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (16 samples, 0.03%; +0.01%)</title><rect x="973.1" y="357" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="976.14" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (15 samples, 0.03%; +0.00%)</title><rect x="594.5" y="437" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="597.53" y="447.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.05%; -0.02%)</title><rect x="568.9" y="341" width="0.5" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="571.87" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (9 samples, 0.02%; +0.01%)</title><rect x="489.8" y="309" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="492.77" y="319.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (17 samples, 0.04%; +0.01%)</title><rect x="900.7" y="357" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="903.70" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (9 samples, 0.02%; -0.02%)</title><rect x="631.1" y="453" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="634.05" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (14 samples, 0.03%; +0.00%)</title><rect x="859.2" y="485" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="862.17" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (36 samples, 0.08%; +0.00%)</title><rect x="657.3" y="485" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="660.26" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (83 samples, 0.18%; +0.01%)</title><rect x="898.5" y="341" width="2.1" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="901.50" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (4 samples, 0.01%; -0.01%)</title><rect x="38.2" y="421" width="0.1" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="41.19" y="431.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (242 samples, 0.51%; +0.01%)</title><rect x="909.5" y="373" width="6.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="912.51" y="383.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (145 samples, 0.31%; 0.00%)</title><rect x="982.8" y="309" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="985.78" y="319.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (18 samples, 0.04%; +0.00%)</title><rect x="359.3" y="149" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="362.30" y="159.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (84 samples, 0.18%; +0.01%)</title><rect x="145.9" y="261" width="2.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="148.88" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (4 samples, 0.01%; -0.00%)</title><rect x="1096.9" y="341" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1099.93" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (9 samples, 0.02%; -0.03%)</title><rect x="261.3" y="277" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="264.30" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (14 samples, 0.03%; 0.00%)</title><rect x="862.0" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.98" y="495.5" ></text>
</g>
<g >
<title>operator delete (78 samples, 0.17%; -0.03%)</title><rect x="91.0" y="437" width="2.0" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="94.03" y="447.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (69 samples, 0.15%; +0.01%)</title><rect x="592.1" y="405" width="1.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="595.13" y="415.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (19 samples, 0.04%; -0.00%)</title><rect x="823.5" y="277" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="826.53" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (5 samples, 0.01%; +0.00%)</title><rect x="973.6" y="357" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="976.62" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (10 samples, 0.02%; +0.00%)</title><rect x="226.2" y="181" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="229.20" y="191.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (95 samples, 0.20%; +0.04%)</title><rect x="447.4" y="309" width="2.4" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="450.39" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (7 samples, 0.01%; -0.01%)</title><rect x="319.6" y="181" width="0.1" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="322.55" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (60 samples, 0.13%; +0.01%)</title><rect x="228.3" y="165" width="1.5" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="231.31" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (4 samples, 0.01%; +0.00%)</title><rect x="812.6" y="293" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="815.61" y="303.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.01%; 0.00%)</title><rect x="23.2" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.19" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (10 samples, 0.02%; +0.01%)</title><rect x="922.6" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="925.55" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (16 samples, 0.03%; +0.02%)</title><rect x="303.3" y="245" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="306.30" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (21 samples, 0.04%; +0.02%)</title><rect x="576.4" y="341" width="0.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="579.43" y="351.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (34 samples, 0.07%; 0.00%)</title><rect x="733.5" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="736.51" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (15 samples, 0.03%; -0.01%)</title><rect x="1149.8" y="485" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1152.80" y="495.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (264 samples, 0.56%; 0.00%)</title><rect x="16.9" y="501" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.86" y="511.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (12 samples, 0.03%; -0.01%)</title><rect x="1143.2" y="501" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1146.19" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (38 samples, 0.08%; +0.00%)</title><rect x="22.0" y="453" width="0.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="24.99" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (4 samples, 0.01%; -0.01%)</title><rect x="319.7" y="181" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="322.73" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_S_do_relocate (4 samples, 0.01%; +0.00%)</title><rect x="532.0" y="341" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="535.02" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (190 samples, 0.40%; -0.00%)</title><rect x="208.2" y="133" width="4.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="211.23" y="143.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (10,787 samples, 22.88%; -0.04%)</title><rect x="869.5" y="453" width="270.1" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="872.54" y="463.5" >seastar::noncopyable_function&lt;seasta..</text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (40 samples, 0.08%; -0.01%)</title><rect x="239.4" y="165" width="1.0" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="242.45" y="175.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (19 samples, 0.04%; -0.01%)</title><rect x="664.3" y="469" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="667.27" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (4 samples, 0.01%; +0.01%)</title><rect x="846.9" y="357" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="849.93" y="367.5" ></text>
</g>
<g >
<title>seastar::gate::enter (13 samples, 0.03%; +0.02%)</title><rect x="1035.2" y="229" width="0.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1038.20" y="239.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (19 samples, 0.04%; -0.01%)</title><rect x="708.8" y="501" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="711.83" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (29 samples, 0.06%; -0.03%)</title><rect x="570.4" y="357" width="0.7" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="573.37" y="367.5" ></text>
</g>
<g >
<title>operator delete (21 samples, 0.04%; -0.02%)</title><rect x="1146.1" y="485" width="0.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1149.07" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (30 samples, 0.06%; +0.01%)</title><rect x="605.5" y="437" width="0.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="608.54" y="447.5" ></text>
</g>
<g >
<title>cql3::relation::to_restriction (5 samples, 0.01%; 0.00%)</title><rect x="22.4" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.39" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (7 samples, 0.01%; +0.01%)</title><rect x="394.8" y="229" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="397.85" y="239.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (14 samples, 0.03%; -0.02%)</title><rect x="644.6" y="389" width="0.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="647.57" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (6 samples, 0.01%; 0.00%)</title><rect x="637.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="640.64" y="495.5" ></text>
</g>
<g >
<title>operator delete (24 samples, 0.05%; +0.00%)</title><rect x="610.7" y="389" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="613.73" y="399.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (18 samples, 0.04%; +0.03%)</title><rect x="459.3" y="325" width="0.5" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="462.33" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (11 samples, 0.02%; -0.01%)</title><rect x="931.8" y="405" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="934.84" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; -0.01%)</title><rect x="33.7" y="469" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="36.68" y="479.5" ></text>
</g>
<g >
<title>table::set_hit_rate (83 samples, 0.18%; 0.00%)</title><rect x="705.0" y="453" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="707.97" y="463.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (353 samples, 0.75%; +0.02%)</title><rect x="538.0" y="421" width="8.8" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="540.96" y="431.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (19 samples, 0.04%; -0.06%)</title><rect x="569.4" y="373" width="0.5" height="15.0" fill="rgb(115,115,255)" rx="2" ry="2" />
<text  x="572.45" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (5 samples, 0.01%; +0.01%)</title><rect x="1025.2" y="149" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1028.21" y="159.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (13 samples, 0.03%; -0.01%)</title><rect x="627.7" y="485" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="630.75" y="495.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (167 samples, 0.35%; +0.03%)</title><rect x="911.4" y="357" width="4.2" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="914.39" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (4 samples, 0.01%; -0.00%)</title><rect x="833.0" y="389" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="836.04" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (107 samples, 0.23%; -0.00%)</title><rect x="743.2" y="293" width="2.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="746.20" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (5 samples, 0.01%; +0.01%)</title><rect x="929.9" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="932.94" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (35 samples, 0.07%; -0.03%)</title><rect x="781.8" y="261" width="0.8" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="784.77" y="271.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (62 samples, 0.13%; -0.03%)</title><rect x="715.3" y="437" width="1.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="718.26" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (18 samples, 0.04%; +0.01%)</title><rect x="706.4" y="421" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="709.40" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (19 samples, 0.04%; +0.00%)</title><rect x="172.8" y="149" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="175.81" y="159.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (13 samples, 0.03%; 0.00%)</title><rect x="23.7" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.69" y="607.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; -0.01%)</title><rect x="519.4" y="341" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="522.43" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (37 samples, 0.08%; +0.01%)</title><rect x="124.0" y="277" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="127.02" y="287.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (7 samples, 0.01%; +0.00%)</title><rect x="26.5" y="517" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="29.55" y="527.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,393 samples, 9.32%; +0.00%)</title><rect x="144.4" y="293" width="110.0" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="147.42" y="303.5" >seastar::do_u..</text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (6 samples, 0.01%; +0.00%)</title><rect x="485.1" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="488.06" y="335.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (8 samples, 0.02%; -0.00%)</title><rect x="605.2" y="437" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="608.19" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.01%; 0.00%)</title><rect x="18.8" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.76" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (189 samples, 0.40%; +0.01%)</title><rect x="722.9" y="373" width="4.8" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="725.92" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (92 samples, 0.20%; +0.00%)</title><rect x="658.6" y="469" width="2.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="661.56" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; +0.00%)</title><rect x="785.7" y="229" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="788.68" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (4 samples, 0.01%; -0.00%)</title><rect x="531.1" y="325" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="534.07" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (13 samples, 0.03%; +0.00%)</title><rect x="803.6" y="197" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="806.58" y="207.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (7 samples, 0.01%; -0.01%)</title><rect x="943.0" y="421" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="945.96" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (18 samples, 0.04%; -0.00%)</title><rect x="757.6" y="309" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="760.64" y="319.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (99 samples, 0.21%; -0.02%)</title><rect x="714.7" y="469" width="2.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="717.66" y="479.5" ></text>
</g>
<g >
<title>schema::column_at (63 samples, 0.13%; +0.00%)</title><rect x="211.0" y="101" width="1.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="214.03" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (13 samples, 0.03%; +0.00%)</title><rect x="571.4" y="341" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="574.35" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (18 samples, 0.04%; +0.00%)</title><rect x="695.8" y="469" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="698.79" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="261.8" y="293" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="264.83" y="303.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (59 samples, 0.13%; -0.01%)</title><rect x="313.0" y="181" width="1.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="315.97" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (137 samples, 0.29%; +0.08%)</title><rect x="226.7" y="181" width="3.4" height="15.0" fill="rgb(255,73,73)" rx="2" ry="2" />
<text  x="229.68" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (39 samples, 0.08%; 0.00%)</title><rect x="222.3" y="181" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="225.30" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (10 samples, 0.02%; -0.01%)</title><rect x="392.3" y="229" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="395.34" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (6 samples, 0.01%; +0.00%)</title><rect x="217.6" y="149" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="220.62" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (24 samples, 0.05%; -0.01%)</title><rect x="670.5" y="453" width="0.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="673.53" y="463.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (12 samples, 0.03%; +0.00%)</title><rect x="1035.5" y="261" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1038.53" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (144 samples, 0.31%; +0.01%)</title><rect x="401.4" y="197" width="3.6" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="404.38" y="207.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (17 samples, 0.04%; +0.01%)</title><rect x="1003.3" y="261" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1006.26" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (4 samples, 0.01%; 0.00%)</title><rect x="862.1" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.05" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (10 samples, 0.02%; +0.00%)</title><rect x="581.3" y="421" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="584.26" y="431.5" ></text>
</g>
<g >
<title>__tls_init (7 samples, 0.01%; +0.01%)</title><rect x="523.6" y="309" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="526.61" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (30 samples, 0.06%; -0.01%)</title><rect x="98.0" y="405" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="100.99" y="415.5" ></text>
</g>
<g >
<title>service::client_state::has_access (1,882 samples, 3.99%; +0.00%)</title><rect x="769.9" y="373" width="47.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="772.93" y="383.5" >serv..</text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (5 samples, 0.01%; +0.00%)</title><rect x="518.8" y="325" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="521.83" y="335.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (13 samples, 0.03%; 0.00%)</title><rect x="23.7" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.69" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (4 samples, 0.01%; 0.00%)</title><rect x="18.8" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.76" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (4 samples, 0.01%; +0.00%)</title><rect x="1135.0" y="421" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1137.95" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (22 samples, 0.05%; +0.02%)</title><rect x="210.5" y="101" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="213.48" y="111.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (113 samples, 0.24%; +0.00%)</title><rect x="295.9" y="293" width="2.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="298.94" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (5 samples, 0.01%; +0.01%)</title><rect x="882.4" y="357" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="885.38" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (39 samples, 0.08%; +0.00%)</title><rect x="98.7" y="405" width="1.0" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="101.74" y="415.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (10 samples, 0.02%; +0.01%)</title><rect x="508.1" y="229" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="511.09" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (16 samples, 0.03%; +0.01%)</title><rect x="915.9" y="389" width="0.4" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="918.95" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (45,838 samples, 97.24%; +0.04%)</title><rect x="26.8" y="517" width="1147.4" height="15.0" fill="rgb(255,143,143)" rx="2" ry="2" />
<text  x="29.77" y="527.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (7 samples, 0.01%; -0.00%)</title><rect x="266.0" y="341" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="268.96" y="351.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (167 samples, 0.35%; +0.01%)</title><rect x="193.8" y="69" width="4.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="196.81" y="79.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (16 samples, 0.03%; -0.00%)</title><rect x="271.1" y="341" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="274.06" y="351.5" ></text>
</g>
<g >
<title>abstract_type::bound_value_needs_to_be_reserialized (5 samples, 0.01%; +0.01%)</title><rect x="885.2" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="888.23" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (21 samples, 0.04%; -0.03%)</title><rect x="554.3" y="325" width="0.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="557.30" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (43 samples, 0.09%; 0.00%)</title><rect x="21.9" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.94" y="479.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (11 samples, 0.02%; +0.01%)</title><rect x="817.2" y="389" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="820.24" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (23 samples, 0.05%; +0.01%)</title><rect x="39.0" y="421" width="0.6" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="41.99" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (4 samples, 0.01%; -0.00%)</title><rect x="213.1" y="133" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="216.11" y="143.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (31 samples, 0.07%; +0.06%)</title><rect x="1092.7" y="293" width="0.8" height="15.0" fill="rgb(255,108,108)" rx="2" ry="2" />
<text  x="1095.72" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (6 samples, 0.01%; +0.01%)</title><rect x="1144.1" y="501" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1147.09" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (12 samples, 0.03%; +0.01%)</title><rect x="283.9" y="277" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="286.85" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (4 samples, 0.01%; +0.01%)</title><rect x="767.4" y="373" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="770.43" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (414 samples, 0.88%; +0.02%)</title><rect x="499.6" y="261" width="10.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="502.58" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (81 samples, 0.17%; +0.04%)</title><rect x="1044.5" y="229" width="2.0" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="1047.51" y="239.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (13 samples, 0.03%; 0.00%)</title><rect x="19.1" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.14" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (7 samples, 0.01%; -0.00%)</title><rect x="777.2" y="309" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="780.17" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (55 samples, 0.12%; -0.00%)</title><rect x="642.0" y="421" width="1.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="645.04" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (13 samples, 0.03%; 0.00%)</title><rect x="862.0" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.98" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (5 samples, 0.01%; -0.00%)</title><rect x="213.0" y="133" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="215.99" y="143.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (4 samples, 0.01%; -0.00%)</title><rect x="1075.0" y="325" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1078.00" y="335.5" ></text>
</g>
<g >
<title>table::add_coordinator_read_latency (5 samples, 0.01%; +0.00%)</title><rect x="1167.9" y="485" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1170.92" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (4 samples, 0.01%; +0.01%)</title><rect x="696.5" y="469" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="699.49" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (21 samples, 0.04%; +0.01%)</title><rect x="949.1" y="325" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="952.14" y="335.5" ></text>
</g>
<g >
<title>query_result_builder::consume (1,816 samples, 3.85%; 0.00%)</title><rect x="321.7" y="213" width="45.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="324.65" y="223.5" >quer..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (6 samples, 0.01%; -0.00%)</title><rect x="1101.1" y="341" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1104.09" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (22 samples, 0.05%; +0.03%)</title><rect x="1108.4" y="389" width="0.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1111.42" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (5 samples, 0.01%; +0.00%)</title><rect x="825.4" y="293" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="828.35" y="303.5" ></text>
</g>
<g >
<title>operator delete (20 samples, 0.04%; -0.00%)</title><rect x="609.2" y="421" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="612.25" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (7 samples, 0.01%; -0.01%)</title><rect x="1135.1" y="421" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1138.10" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (8 samples, 0.02%; +0.01%)</title><rect x="582.6" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="585.56" y="399.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (18 samples, 0.04%; -0.02%)</title><rect x="313.5" y="165" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="316.52" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.01%; -0.01%)</title><rect x="419.0" y="325" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="421.98" y="335.5" ></text>
</g>
<g >
<title>schema::partition_key_size (4 samples, 0.01%; -0.01%)</title><rect x="1125.7" y="421" width="0.1" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="1128.74" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (7 samples, 0.01%; +0.00%)</title><rect x="922.4" y="341" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="925.38" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (5 samples, 0.01%; +0.00%)</title><rect x="862.0" y="357" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="865.03" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (6 samples, 0.01%; 0.00%)</title><rect x="1141.0" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.04" y="223.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (14 samples, 0.03%; -0.06%)</title><rect x="471.1" y="277" width="0.3" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="474.07" y="287.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,601 samples, 9.76%; +0.01%)</title><rect x="299.9" y="293" width="115.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="302.90" y="303.5" >seastar::repea..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (24 samples, 0.05%; -0.01%)</title><rect x="1167.2" y="469" width="0.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1170.20" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (10 samples, 0.02%; -0.00%)</title><rect x="261.0" y="277" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="264.05" y="287.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (5 samples, 0.01%; +0.01%)</title><rect x="1075.7" y="325" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1078.65" y="335.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (12 samples, 0.03%; +0.02%)</title><rect x="619.0" y="421" width="0.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="622.04" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (5 samples, 0.01%; -0.01%)</title><rect x="1065.3" y="341" width="0.2" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="1068.34" y="351.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (21 samples, 0.04%; +0.03%)</title><rect x="62.5" y="437" width="0.5" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="65.49" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (4 samples, 0.01%; 0.00%)</title><rect x="894.3" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="897.29" y="319.5" ></text>
</g>
<g >
<title>auth::get_permissions (7 samples, 0.01%; 0.00%)</title><rect x="23.2" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.19" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (6 samples, 0.01%; -0.01%)</title><rect x="97.8" y="405" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="100.84" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (16 samples, 0.03%; +0.01%)</title><rect x="405.0" y="197" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="407.99" y="207.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (138 samples, 0.29%; -0.04%)</title><rect x="12.7" y="581" width="3.4" height="15.0" fill="rgb(136,136,255)" rx="2" ry="2" />
<text  x="15.68" y="591.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (30 samples, 0.06%; -0.00%)</title><rect x="799.0" y="117" width="0.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="802.04" y="127.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (6 samples, 0.01%; -0.01%)</title><rect x="213.3" y="165" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="216.34" y="175.5" ></text>
</g>
<g >
<title>row::row (25 samples, 0.05%; +0.02%)</title><rect x="252.5" y="197" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="255.46" y="207.5" ></text>
</g>
<g >
<title>reader_permit::consume (30 samples, 0.06%; -0.05%)</title><rect x="281.3" y="277" width="0.7" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="284.25" y="287.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%; +0.00%)</title><rect x="659.4" y="437" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="662.39" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,775 samples, 8.01%; +0.01%)</title><rect x="304.0" y="261" width="94.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="307.03" y="271.5" >mutation_fr..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (22 samples, 0.05%; +0.03%)</title><rect x="1061.8" y="325" width="0.5" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1064.76" y="335.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (13 samples, 0.03%; +0.02%)</title><rect x="393.1" y="229" width="0.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="396.12" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="421.8" y="373" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="424.81" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (7 samples, 0.01%; +0.01%)</title><rect x="418.7" y="245" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="421.70" y="255.5" ></text>
</g>
<g >
<title>query_state::query_state (6 samples, 0.01%; +0.01%)</title><rect x="59.8" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="62.81" y="463.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (10 samples, 0.02%; +0.00%)</title><rect x="757.8" y="293" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="760.77" y="303.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.06%; 0.00%)</title><rect x="488.8" y="293" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="491.82" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (17 samples, 0.04%; -0.02%)</title><rect x="205.8" y="117" width="0.4" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="208.80" y="127.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (546 samples, 1.16%; -0.04%)</title><rect x="639.1" y="485" width="13.7" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="642.11" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (9 samples, 0.02%; -0.00%)</title><rect x="70.1" y="373" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="73.10" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.01%)</title><rect x="166.9" y="213" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="169.88" y="223.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (4 samples, 0.01%; +0.01%)</title><rect x="830.6" y="421" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="833.61" y="431.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (5 samples, 0.01%; -0.00%)</title><rect x="601.1" y="421" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="604.06" y="431.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (7 samples, 0.01%; +0.01%)</title><rect x="1049.9" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1052.89" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (4 samples, 0.01%; +0.00%)</title><rect x="830.3" y="421" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="833.29" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (8 samples, 0.02%; +0.01%)</title><rect x="262.9" y="309" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="265.88" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (10 samples, 0.02%; +0.01%)</title><rect x="896.5" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="899.47" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (215 samples, 0.46%; +0.09%)</title><rect x="1087.1" y="261" width="5.4" height="15.0" fill="rgb(255,66,66)" rx="2" ry="2" />
<text  x="1090.12" y="271.5" ></text>
</g>
<g >
<title>query::digester::digester (20 samples, 0.04%; +0.00%)</title><rect x="591.0" y="405" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="594.03" y="415.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (4 samples, 0.01%; +0.00%)</title><rect x="593.9" y="405" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="596.85" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (25 samples, 0.05%; -0.00%)</title><rect x="862.6" y="405" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="865.58" y="415.5" ></text>
</g>
<g >
<title>operator new (35 samples, 0.07%; +0.01%)</title><rect x="93.0" y="437" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="95.98" y="447.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (37 samples, 0.08%; -0.02%)</title><rect x="387.2" y="165" width="0.9" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="390.21" y="175.5" ></text>
</g>
<g >
<title>seastar::gate::leave (8 samples, 0.02%; +0.01%)</title><rect x="61.3" y="405" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="64.29" y="415.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (25 samples, 0.05%; -0.00%)</title><rect x="1060.7" y="277" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1063.73" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (281 samples, 0.60%; -0.00%)</title><rect x="1154.5" y="469" width="7.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1157.48" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (539 samples, 1.14%; +0.00%)</title><rect x="271.5" y="357" width="13.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="274.46" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.05%; -0.05%)</title><rect x="593.0" y="357" width="0.5" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="595.95" y="367.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (11 samples, 0.02%; +0.00%)</title><rect x="1029.2" y="181" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1032.22" y="191.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (230 samples, 0.49%; +0.01%)</title><rect x="740.2" y="341" width="5.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="743.24" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (47 samples, 0.10%; +0.00%)</title><rect x="820.7" y="325" width="1.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="823.70" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (6 samples, 0.01%; 0.00%)</title><rect x="566.7" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="569.74" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (5 samples, 0.01%; +0.01%)</title><rect x="989.1" y="293" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="992.12" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="993.4" y="277" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="996.45" y="287.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (11 samples, 0.02%; +0.01%)</title><rect x="690.5" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="693.45" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (155 samples, 0.33%; +0.01%)</title><rect x="641.6" y="453" width="3.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="644.57" y="463.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.01%)</title><rect x="792.1" y="197" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="795.09" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (16 samples, 0.03%; +0.01%)</title><rect x="1027.2" y="117" width="0.4" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="1030.24" y="127.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (7 samples, 0.01%; -0.00%)</title><rect x="288.9" y="405" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="291.86" y="415.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (4 samples, 0.01%; +0.00%)</title><rect x="483.5" y="261" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="486.54" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (4 samples, 0.01%; -0.01%)</title><rect x="249.1" y="245" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="252.08" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (4 samples, 0.01%; +0.01%)</title><rect x="254.2" y="277" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="257.17" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (187 samples, 0.40%; 0.00%)</title><rect x="17.2" y="421" width="4.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.23" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (10 samples, 0.02%; +0.01%)</title><rect x="577.0" y="357" width="0.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="579.96" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (14 samples, 0.03%; -0.00%)</title><rect x="1141.3" y="309" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1144.29" y="319.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.05%; +0.00%)</title><rect x="557.8" y="277" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="560.83" y="287.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (691 samples, 1.47%; -0.04%)</title><rect x="180.8" y="117" width="17.3" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="183.85" y="127.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (70 samples, 0.15%; +0.00%)</title><rect x="735.7" y="341" width="1.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="738.71" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (54 samples, 0.11%; +0.01%)</title><rect x="123.7" y="293" width="1.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="126.67" y="303.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (464 samples, 0.98%; -0.01%)</title><rect x="904.0" y="389" width="11.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="906.96" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.01%; -0.00%)</title><rect x="818.4" y="357" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="821.42" y="367.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (36 samples, 0.08%; +0.00%)</title><rect x="1140.0" y="405" width="0.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1142.96" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (9 samples, 0.02%; 0.00%)</title><rect x="585.4" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="588.44" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (350 samples, 0.74%; +0.00%)</title><rect x="400.1" y="229" width="8.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="403.13" y="239.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (4 samples, 0.01%; 0.00%)</title><rect x="862.9" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.88" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (27 samples, 0.06%; -0.00%)</title><rect x="219.0" y="149" width="0.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="222.00" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (4 samples, 0.01%; +0.00%)</title><rect x="71.3" y="389" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="74.25" y="399.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (10 samples, 0.02%; -0.00%)</title><rect x="827.9" y="293" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="830.88" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (73 samples, 0.15%; -0.02%)</title><rect x="749.1" y="405" width="1.8" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="752.06" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (33 samples, 0.07%; 0.00%)</title><rect x="933.9" y="341" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="936.94" y="351.5" ></text>
</g>
<g >
<title>reader_permit::signal (4 samples, 0.01%; +0.00%)</title><rect x="284.3" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="287.28" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (8 samples, 0.02%; -0.02%)</title><rect x="860.7" y="501" width="0.2" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="863.67" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.06%; -0.00%)</title><rect x="1156.6" y="373" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1159.56" y="383.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10 samples, 0.02%; +0.00%)</title><rect x="668.8" y="437" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="671.83" y="447.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (49 samples, 0.10%; +0.00%)</title><rect x="230.8" y="229" width="1.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="233.79" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (19 samples, 0.04%; -0.01%)</title><rect x="74.0" y="453" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="76.98" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (20 samples, 0.04%; +0.01%)</title><rect x="137.0" y="245" width="0.5" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="139.99" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (9 samples, 0.02%; +0.01%)</title><rect x="586.2" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="589.22" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (5 samples, 0.01%; -0.00%)</title><rect x="566.2" y="309" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="569.17" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (14 samples, 0.03%; -0.00%)</title><rect x="867.2" y="453" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="870.23" y="463.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (179 samples, 0.38%; +0.00%)</title><rect x="843.5" y="421" width="4.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="846.53" y="431.5" ></text>
</g>
<g >
<title>make_combined_reader (868 samples, 1.84%; -0.07%)</title><rect x="435.0" y="341" width="21.8" height="15.0" fill="rgb(98,98,255)" rx="2" ry="2" />
<text  x="438.02" y="351.5" >m..</text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (704 samples, 1.49%; -0.01%)</title><rect x="549.6" y="389" width="17.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="552.62" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (4 samples, 0.01%; +0.00%)</title><rect x="633.0" y="485" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="635.96" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (18 samples, 0.04%; +0.02%)</title><rect x="1059.2" y="277" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1062.23" y="287.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (13 samples, 0.03%; +0.02%)</title><rect x="243.2" y="197" width="0.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="246.20" y="207.5" ></text>
</g>
<g >
<title>seastar::gate::enter (5 samples, 0.01%; +0.00%)</title><rect x="1034.4" y="197" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1037.45" y="207.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (5 samples, 0.01%; +0.00%)</title><rect x="799.9" y="133" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="802.95" y="143.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (122 samples, 0.26%; -0.00%)</title><rect x="822.4" y="325" width="3.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="825.42" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (11 samples, 0.02%; 0.00%)</title><rect x="856.8" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.84" y="431.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (9 samples, 0.02%; -0.02%)</title><rect x="972.6" y="357" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="975.59" y="367.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (4 samples, 0.01%; +0.00%)</title><rect x="700.2" y="421" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="703.22" y="431.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (8 samples, 0.02%; +0.01%)</title><rect x="333.9" y="181" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="336.94" y="191.5" ></text>
</g>
<g >
<title>database::find_uuid (206 samples, 0.44%; -0.01%)</title><rect x="755.6" y="389" width="5.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="758.61" y="399.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (66 samples, 0.14%; +0.00%)</title><rect x="238.8" y="197" width="1.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="241.80" y="207.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (102 samples, 0.22%; +0.01%)</title><rect x="725.0" y="325" width="2.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="727.97" y="335.5" ></text>
</g>
<g >
<title>local_schema_registry (21 samples, 0.04%; +0.03%)</title><rect x="965.9" y="357" width="0.6" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="968.94" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (11 samples, 0.02%; 0.00%)</title><rect x="1141.0" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.99" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (5 samples, 0.01%; -0.01%)</title><rect x="940.0" y="341" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="942.98" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (36 samples, 0.08%; +0.01%)</title><rect x="860.9" y="501" width="1.0" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="863.95" y="511.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (23 samples, 0.05%; +0.03%)</title><rect x="332.0" y="181" width="0.6" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="334.99" y="191.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.07%; -0.01%)</title><rect x="534.5" y="405" width="0.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="537.53" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (32 samples, 0.07%; +0.04%)</title><rect x="443.9" y="261" width="0.8" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="446.89" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (6 samples, 0.01%; -0.01%)</title><rect x="129.9" y="261" width="0.1" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="132.85" y="271.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (6 samples, 0.01%; +0.00%)</title><rect x="59.6" y="453" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="62.56" y="463.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (5 samples, 0.01%; +0.00%)</title><rect x="70.5" y="373" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="73.50" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::shared_ptr_count_for&lt;cql3::metadata&amp;&gt; (6 samples, 0.01%; -0.00%)</title><rect x="650.3" y="453" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="653.33" y="463.5" ></text>
</g>
<g >
<title>tracing::add_table_name (11 samples, 0.02%; -0.00%)</title><rect x="1137.6" y="421" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1140.58" y="431.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (907 samples, 1.92%; -0.03%)</title><rect x="461.3" y="325" width="22.7" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="464.26" y="335.5" >d..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,272 samples, 4.82%; -0.01%)</title><rect x="167.2" y="229" width="56.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="170.18" y="239.5" >partit..</text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (7 samples, 0.01%; +0.00%)</title><rect x="1168.1" y="485" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1171.12" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (30 samples, 0.06%; +0.02%)</title><rect x="775.2" y="293" width="0.8" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="778.24" y="303.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (10 samples, 0.02%; +0.01%)</title><rect x="238.3" y="213" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="241.35" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (17 samples, 0.04%; +0.00%)</title><rect x="598.2" y="437" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="601.16" y="447.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (449 samples, 0.95%; +0.00%)</title><rect x="567.2" y="389" width="11.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="570.25" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (9 samples, 0.02%; +0.00%)</title><rect x="760.8" y="405" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="763.80" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (797 samples, 1.69%; +0.02%)</title><rect x="882.6" y="405" width="20.0" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="885.60" y="415.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (32 samples, 0.07%; -0.02%)</title><rect x="95.5" y="421" width="0.8" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="98.49" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (11 samples, 0.02%; +0.01%)</title><rect x="298.1" y="229" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="301.07" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (14 samples, 0.03%; -0.00%)</title><rect x="544.9" y="309" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="547.92" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (10 samples, 0.02%; 0.00%)</title><rect x="1173.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1176.78" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (60 samples, 0.13%; +0.01%)</title><rect x="532.8" y="341" width="1.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="535.78" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (6 samples, 0.01%; +0.00%)</title><rect x="71.4" y="389" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="74.43" y="399.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (9 samples, 0.02%; -0.00%)</title><rect x="529.3" y="245" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="532.27" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (51 samples, 0.11%; +0.02%)</title><rect x="833.3" y="389" width="1.2" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="836.26" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (14 samples, 0.03%; 0.00%)</title><rect x="862.0" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.98" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (8 samples, 0.02%; 0.00%)</title><rect x="20.5" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.49" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (41 samples, 0.09%; 0.00%)</title><rect x="626.3" y="485" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.32" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (32 samples, 0.07%; +0.01%)</title><rect x="679.2" y="453" width="0.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="682.21" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1,201 samples, 2.55%; -0.01%)</title><rect x="549.2" y="421" width="30.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="552.25" y="431.5" >st..</text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (28 samples, 0.06%; -0.00%)</title><rect x="1094.0" y="293" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1096.95" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (22 samples, 0.05%; +0.02%)</title><rect x="286.2" y="357" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="289.21" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (10 samples, 0.02%; +0.00%)</title><rect x="99.7" y="421" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="102.72" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="649.3" y="469" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="652.30" y="479.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (23 samples, 0.05%; +0.04%)</title><rect x="244.3" y="213" width="0.5" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="247.25" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;static_row&gt;::_M_reset (4 samples, 0.01%; +0.01%)</title><rect x="398.4" y="245" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="401.38" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; 0.00%)</title><rect x="665.0" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="667.97" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (23 samples, 0.05%; +0.03%)</title><rect x="517.4" y="325" width="0.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="520.41" y="335.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (4 samples, 0.01%; -0.01%)</title><rect x="1161.7" y="469" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1164.66" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (4 samples, 0.01%; +0.00%)</title><rect x="752.6" y="405" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="755.63" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (47 samples, 0.10%; -0.00%)</title><rect x="823.2" y="309" width="1.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="826.15" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="527.9" y="277" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="530.94" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (11 samples, 0.02%; +0.02%)</title><rect x="663.3" y="469" width="0.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="666.34" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (39 samples, 0.08%; -0.00%)</title><rect x="17.6" y="309" width="1.0" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="20.63" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (15 samples, 0.03%; +0.02%)</title><rect x="773.2" y="341" width="0.4" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="776.19" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (8 samples, 0.02%; +0.00%)</title><rect x="565.1" y="293" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="568.09" y="303.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (452 samples, 0.96%; -0.00%)</title><rect x="836.7" y="437" width="11.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="839.69" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt; (5 samples, 0.01%; +0.00%)</title><rect x="850.3" y="389" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="853.29" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (31 samples, 0.07%; +0.01%)</title><rect x="904.9" y="357" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="907.86" y="367.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.01%; +0.01%)</title><rect x="791.3" y="197" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="794.31" y="207.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (6 samples, 0.01%; -0.00%)</title><rect x="808.8" y="261" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="811.78" y="271.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (6 samples, 0.01%; 0.00%)</title><rect x="1140.1" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.14" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (10 samples, 0.02%; -0.00%)</title><rect x="565.4" y="293" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="568.42" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (8 samples, 0.02%; -0.01%)</title><rect x="1048.8" y="293" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1051.77" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (5,625 samples, 11.93%; -0.01%)</title><rect x="962.0" y="373" width="140.8" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="964.98" y="383.5" >service::storage_..</text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (13 samples, 0.03%; +0.01%)</title><rect x="881.2" y="389" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="884.23" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (90 samples, 0.19%; +0.00%)</title><rect x="789.2" y="213" width="2.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="792.21" y="223.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (6 samples, 0.01%; -0.00%)</title><rect x="654.1" y="469" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="657.13" y="479.5" ></text>
</g>
<g >
<title>operator new (18 samples, 0.04%; -0.00%)</title><rect x="98.2" y="389" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="101.24" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (28 samples, 0.06%; +0.03%)</title><rect x="93.2" y="421" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="96.16" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="819.7" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="822.75" y="399.5" ></text>
</g>
<g >
<title>operator new (142 samples, 0.30%; -0.01%)</title><rect x="1003.7" y="277" width="3.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1006.71" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (27 samples, 0.06%; 0.00%)</title><rect x="1141.0" y="325" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.96" y="335.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (8 samples, 0.02%; -0.01%)</title><rect x="321.5" y="213" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="324.45" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (4 samples, 0.01%; -0.01%)</title><rect x="613.8" y="437" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="616.81" y="447.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (29 samples, 0.06%; +0.00%)</title><rect x="568.7" y="357" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="571.72" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (33 samples, 0.07%; +0.01%)</title><rect x="533.3" y="309" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="536.25" y="319.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (36 samples, 0.08%; -0.02%)</title><rect x="1002.8" y="277" width="0.9" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1005.78" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,486 samples, 9.52%; +0.01%)</title><rect x="300.6" y="277" width="112.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="303.60" y="287.5" >flat_mutation..</text>
</g>
<g >
<title>seastar::memory::allocate (60 samples, 0.13%; +0.01%)</title><rect x="442.4" y="229" width="1.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="445.36" y="239.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (1,041 samples, 2.21%; +0.00%)</title><rect x="783.2" y="293" width="26.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="786.22" y="303.5" >s..</text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (13 samples, 0.03%; -0.00%)</title><rect x="947.4" y="405" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="950.36" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (16 samples, 0.03%; -0.00%)</title><rect x="606.9" y="421" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="609.90" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (40 samples, 0.08%; +0.00%)</title><rect x="816.0" y="309" width="1.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="819.02" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (33 samples, 0.07%; +0.00%)</title><rect x="823.2" y="293" width="0.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="826.18" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (10 samples, 0.02%; 0.00%)</title><rect x="45.6" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.65" y="495.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (42 samples, 0.09%; -0.05%)</title><rect x="359.8" y="149" width="1.0" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="362.75" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (87 samples, 0.18%; +0.02%)</title><rect x="990.7" y="245" width="2.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="993.67" y="255.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (22 samples, 0.05%; +0.00%)</title><rect x="40.7" y="453" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="43.69" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (5 samples, 0.01%; 0.00%)</title><rect x="1171.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1174.73" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (9 samples, 0.02%; +0.01%)</title><rect x="1029.8" y="197" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1032.82" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (12 samples, 0.03%; +0.01%)</title><rect x="1123.3" y="421" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1126.29" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (16 samples, 0.03%; -0.00%)</title><rect x="34.3" y="485" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="37.26" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (12 samples, 0.03%; -0.00%)</title><rect x="683.2" y="501" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="686.20" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::run (46,005 samples, 97.59%; 0.00%)</title><rect x="24.1" y="549" width="1151.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.07" y="559.5" >seastar::reactor::run</text>
</g>
<g >
<title>utils::array_search_gt_impl (28 samples, 0.06%; +0.00%)</title><rect x="524.5" y="261" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="527.54" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (83 samples, 0.18%; -0.01%)</title><rect x="948.2" y="373" width="2.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="951.21" y="383.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (66 samples, 0.14%; -0.01%)</title><rect x="789.7" y="181" width="1.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="792.66" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (7 samples, 0.01%; -0.01%)</title><rect x="685.8" y="469" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="688.80" y="479.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (4 samples, 0.01%; 0.00%)</title><rect x="1096.1" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1099.05" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="896.7" y="357" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="899.72" y="367.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (12 samples, 0.03%; -0.04%)</title><rect x="229.8" y="165" width="0.3" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="232.81" y="175.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (6 samples, 0.01%; +0.00%)</title><rect x="320.5" y="149" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="323.45" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (7 samples, 0.01%; 0.00%)</title><rect x="41.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.29" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (5 samples, 0.01%; 0.00%)</title><rect x="101.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="104.94" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (84 samples, 0.18%; -0.01%)</title><rect x="735.4" y="373" width="2.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="738.41" y="383.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (39 samples, 0.08%; -0.02%)</title><rect x="1162.2" y="453" width="1.0" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="1165.21" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (234 samples, 0.50%; -0.01%)</title><rect x="224.9" y="213" width="5.8" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="227.85" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (19 samples, 0.04%; +0.00%)</title><rect x="531.5" y="341" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="534.47" y="351.5" ></text>
</g>
<g >
<title>__dynamic_cast (20 samples, 0.04%; +0.01%)</title><rect x="12.2" y="581" width="0.5" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="15.18" y="591.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; +0.02%)</title><rect x="44.2" y="485" width="0.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="47.24" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; +0.00%)</title><rect x="993.2" y="245" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="996.20" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (31 samples, 0.07%; -0.00%)</title><rect x="757.3" y="325" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="760.32" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (15 samples, 0.03%; -0.01%)</title><rect x="536.1" y="405" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="539.05" y="415.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (6 samples, 0.01%; +0.00%)</title><rect x="223.8" y="213" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="226.75" y="223.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (5 samples, 0.01%; +0.00%)</title><rect x="983.4" y="293" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="986.36" y="303.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (5 samples, 0.01%; 0.00%)</title><rect x="804.1" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="807.13" y="271.5" ></text>
</g>
<g >
<title>operator new (18 samples, 0.04%; -0.00%)</title><rect x="546.2" y="405" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="549.24" y="415.5" ></text>
</g>
<g >
<title>__libc_start_main (46,006 samples, 97.60%; 0.00%)</title><rect x="24.1" y="629" width="1151.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.07" y="639.5" >__libc_start_main</text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (185 samples, 0.39%; +0.01%)</title><rect x="989.0" y="309" width="4.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="991.99" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (36 samples, 0.08%; -0.01%)</title><rect x="933.9" y="357" width="0.9" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="936.87" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (69 samples, 0.15%; -0.02%)</title><rect x="296.8" y="261" width="1.7" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="299.77" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (293 samples, 0.62%; +0.00%)</title><rect x="500.3" y="245" width="7.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="503.26" y="255.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (4 samples, 0.01%; 0.00%)</title><rect x="565.8" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="568.77" y="319.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (7 samples, 0.01%; 0.00%)</title><rect x="972.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="975.39" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (6 samples, 0.01%; -0.00%)</title><rect x="877.4" y="421" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="880.37" y="431.5" ></text>
</g>
<g >
<title>operator delete (38 samples, 0.08%; +0.00%)</title><rect x="57.9" y="453" width="0.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="60.86" y="463.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (41 samples, 0.09%; -0.01%)</title><rect x="720.7" y="405" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="723.74" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (9 samples, 0.02%; 0.00%)</title><rect x="949.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="952.29" y="319.5" ></text>
</g>
<g >
<title>operator new (67 samples, 0.14%; 0.00%)</title><rect x="977.7" y="293" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="980.70" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (5 samples, 0.01%; -0.00%)</title><rect x="680.5" y="437" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="683.47" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (30 samples, 0.06%; +0.06%)</title><rect x="497.0" y="261" width="0.8" height="15.0" fill="rgb(255,115,115)" rx="2" ry="2" />
<text  x="500.00" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::clear (4 samples, 0.01%; -0.00%)</title><rect x="733.3" y="389" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="736.31" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (48 samples, 0.10%; +0.00%)</title><rect x="614.2" y="421" width="1.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="617.18" y="431.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (9 samples, 0.02%; -0.00%)</title><rect x="673.2" y="469" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="676.18" y="479.5" ></text>
</g>
<g >
<title>dht::sharder::shard_of (46 samples, 0.10%; +0.08%)</title><rect x="995.8" y="293" width="1.2" height="15.0" fill="rgb(255,70,70)" rx="2" ry="2" />
<text  x="998.80" y="303.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (35 samples, 0.07%; -0.01%)</title><rect x="462.7" y="293" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="465.74" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (4 samples, 0.01%; +0.00%)</title><rect x="932.5" y="389" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="935.49" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (9 samples, 0.02%; -0.01%)</title><rect x="60.0" y="453" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="62.96" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (73 samples, 0.15%; +0.02%)</title><rect x="556.6" y="309" width="1.8" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="559.58" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::needs_filtering (4 samples, 0.01%; -0.01%)</title><rect x="877.3" y="421" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="880.27" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (12 samples, 0.03%; -0.01%)</title><rect x="700.0" y="437" width="0.3" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="703.02" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (35 samples, 0.07%; +0.00%)</title><rect x="1147.1" y="485" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1150.12" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.01%; -0.01%)</title><rect x="560.9" y="277" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="563.94" y="287.5" ></text>
</g>
<g >
<title>reader_permit::consume (16 samples, 0.03%; +0.00%)</title><rect x="215.3" y="149" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="218.34" y="159.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (4 samples, 0.01%; 0.00%)</title><rect x="46.5" y="421" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.50" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (82 samples, 0.17%; +0.02%)</title><rect x="543.2" y="325" width="2.1" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="546.21" y="335.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (22 samples, 0.05%; +0.00%)</title><rect x="797.3" y="117" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="800.29" y="127.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (294 samples, 0.62%; -0.00%)</title><rect x="476.2" y="229" width="7.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="479.18" y="239.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.01%; +0.01%)</title><rect x="989.8" y="277" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="992.77" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (6 samples, 0.01%; -0.01%)</title><rect x="876.6" y="421" width="0.2" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="879.65" y="431.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (10 samples, 0.02%; 0.00%)</title><rect x="862.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.88" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (13 samples, 0.03%; 0.00%)</title><rect x="23.7" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.69" y="511.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (4 samples, 0.01%; +0.01%)</title><rect x="950.1" y="341" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="953.14" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (9 samples, 0.02%; +0.00%)</title><rect x="143.7" y="277" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="146.75" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (857 samples, 1.82%; 0.00%)</title><rect x="1075.4" y="341" width="21.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1078.43" y="351.5" >s..</text>
</g>
<g >
<title>compact_mutation_state&lt; (315 samples, 0.67%; -0.03%)</title><rect x="538.3" y="405" width="7.9" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="541.31" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (102 samples, 0.22%; -0.01%)</title><rect x="1032.1" y="229" width="2.5" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="1035.07" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (258 samples, 0.55%; +0.01%)</title><rect x="1113.0" y="405" width="6.4" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="1115.95" y="415.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (5 samples, 0.01%; -0.01%)</title><rect x="75.9" y="453" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="78.89" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (82 samples, 0.17%; +0.01%)</title><rect x="416.9" y="277" width="2.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="419.88" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (4 samples, 0.01%; 0.00%)</title><rect x="22.5" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.54" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (4 samples, 0.01%; +0.01%)</title><rect x="827.7" y="309" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="830.73" y="319.5" ></text>
</g>
<g >
<title>database::find_column_family (78 samples, 0.17%; -0.01%)</title><rect x="1054.9" y="341" width="2.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1057.93" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (4 samples, 0.01%; +0.01%)</title><rect x="640.9" y="469" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="643.89" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (22 samples, 0.05%; 0.00%)</title><rect x="682.5" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.49" y="367.5" ></text>
</g>
<g >
<title>operator delete (34 samples, 0.07%; -0.02%)</title><rect x="583.1" y="405" width="0.8" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="586.09" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt;::allocate (4 samples, 0.01%; +0.00%)</title><rect x="246.0" y="181" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="249.01" y="191.5" ></text>
</g>
<g >
<title>dht::tri_compare (84 samples, 0.18%; +0.02%)</title><rect x="473.1" y="261" width="2.1" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="476.10" y="271.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%; +0.00%)</title><rect x="37.6" y="453" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="40.64" y="463.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (57 samples, 0.12%; +0.02%)</title><rect x="1175.7" y="629" width="1.5" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="1178.73" y="639.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (483 samples, 1.02%; -0.05%)</title><rect x="272.8" y="341" width="12.1" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="275.81" y="351.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (36 samples, 0.08%; -0.01%)</title><rect x="835.6" y="437" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="838.64" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%; 0.00%)</title><rect x="661.7" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="664.74" y="479.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::touch (4 samples, 0.01%; -0.01%)</title><rect x="728.7" y="421" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="731.73" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (8 samples, 0.02%; -0.02%)</title><rect x="843.3" y="373" width="0.2" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="846.33" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (126 samples, 0.27%; -0.01%)</title><rect x="1128.5" y="405" width="3.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1131.55" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (96 samples, 0.20%; +0.01%)</title><rect x="850.8" y="373" width="2.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="853.84" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (22,767 samples, 48.30%; -0.02%)</title><rect x="50.3" y="485" width="569.9" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="53.25" y="495.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (31 samples, 0.07%; -0.00%)</title><rect x="231.2" y="213" width="0.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="234.24" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (9 samples, 0.02%; -0.01%)</title><rect x="1121.2" y="389" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1124.24" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (35 samples, 0.07%; -0.03%)</title><rect x="1163.3" y="469" width="0.8" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="1166.27" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (4 samples, 0.01%; 0.00%)</title><rect x="45.1" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.15" y="495.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%; -0.01%)</title><rect x="516.2" y="325" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="519.23" y="335.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (7 samples, 0.01%; -0.01%)</title><rect x="1028.5" y="165" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1031.54" y="175.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (64 samples, 0.14%; -0.01%)</title><rect x="485.2" y="325" width="1.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="488.21" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (51 samples, 0.11%; -0.01%)</title><rect x="750.9" y="389" width="1.3" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="753.88" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (11 samples, 0.02%; +0.00%)</title><rect x="747.6" y="405" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="750.63" y="415.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (7 samples, 0.01%; +0.00%)</title><rect x="743.4" y="277" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="746.37" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (23 samples, 0.05%; -0.04%)</title><rect x="553.4" y="309" width="0.5" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="556.35" y="319.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (6 samples, 0.01%; -0.01%)</title><rect x="392.6" y="229" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="395.59" y="239.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (5 samples, 0.01%; -0.00%)</title><rect x="366.8" y="197" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="369.81" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::take (4 samples, 0.01%; +0.01%)</title><rect x="698.7" y="437" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="701.67" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (11 samples, 0.02%; 0.00%)</title><rect x="547.2" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="550.17" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (20 samples, 0.04%; -0.03%)</title><rect x="53.0" y="469" width="0.5" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="55.96" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (7 samples, 0.01%; -0.01%)</title><rect x="265.4" y="325" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="268.41" y="335.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (4 samples, 0.01%; +0.00%)</title><rect x="815.0" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="818.02" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (72 samples, 0.15%; -0.01%)</title><rect x="238.6" y="213" width="1.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="241.65" y="223.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (39 samples, 0.08%; -0.02%)</title><rect x="1113.8" y="373" width="0.9" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="1116.75" y="383.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (4 samples, 0.01%; -0.01%)</title><rect x="724.6" y="293" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="727.57" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.07%; 0.00%)</title><rect x="1140.0" y="373" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.99" y="383.5" ></text>
</g>
<g >
<title>auth::resource::resource (60 samples, 0.13%; -0.01%)</title><rect x="765.9" y="373" width="1.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="768.93" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (8 samples, 0.02%; +0.01%)</title><rect x="40.0" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="43.04" y="399.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (9 samples, 0.02%; +0.01%)</title><rect x="419.2" y="357" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="422.23" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (4 samples, 0.01%; 0.00%)</title><rect x="174.1" y="133" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="177.14" y="143.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (22 samples, 0.05%; 0.00%)</title><rect x="1042.9" y="245" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1045.91" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (21 samples, 0.04%; -0.01%)</title><rect x="896.2" y="357" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="899.20" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (4 samples, 0.01%; -0.00%)</title><rect x="692.9" y="469" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="695.91" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (4 samples, 0.01%; +0.01%)</title><rect x="455.1" y="309" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="458.08" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (7 samples, 0.01%; +0.00%)</title><rect x="612.9" y="373" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="615.93" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (39 samples, 0.08%; 0.00%)</title><rect x="682.2" y="501" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.22" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.01%; 0.00%)</title><rect x="19.3" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.34" y="239.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (199 samples, 0.42%; +0.01%)</title><rect x="699.3" y="453" width="5.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="702.34" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (12 samples, 0.03%; +0.01%)</title><rect x="221.8" y="133" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="224.77" y="143.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (5 samples, 0.01%; +0.01%)</title><rect x="1105.1" y="373" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1108.07" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (16 samples, 0.03%; 0.00%)</title><rect x="601.2" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="604.19" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (10 samples, 0.02%; +0.02%)</title><rect x="197.7" y="53" width="0.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="200.74" y="63.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (5 samples, 0.01%; -0.01%)</title><rect x="332.4" y="165" width="0.2" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="335.44" y="175.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (6 samples, 0.01%; -0.02%)</title><rect x="909.1" y="373" width="0.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="912.06" y="383.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (5 samples, 0.01%; +0.01%)</title><rect x="1095.1" y="309" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1098.13" y="319.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (14 samples, 0.03%; -0.01%)</title><rect x="316.2" y="165" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="319.20" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (15 samples, 0.03%; 0.00%)</title><rect x="1114.9" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.85" y="383.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (15 samples, 0.03%; -0.01%)</title><rect x="445.6" y="277" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="448.64" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (4 samples, 0.01%; 0.00%)</title><rect x="23.8" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (4 samples, 0.01%; 0.00%)</title><rect x="19.3" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.34" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (17 samples, 0.04%; +0.01%)</title><rect x="371.2" y="197" width="0.4" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="374.19" y="207.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%; +0.01%)</title><rect x="1154.0" y="437" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1156.95" y="447.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (8 samples, 0.02%; +0.01%)</title><rect x="827.4" y="277" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="830.38" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (155 samples, 0.33%; +0.01%)</title><rect x="582.8" y="421" width="3.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="585.79" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.00%)</title><rect x="653.5" y="469" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="656.48" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (30 samples, 0.06%; -0.01%)</title><rect x="455.7" y="309" width="0.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="458.73" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (12 samples, 0.03%; 0.00%)</title><rect x="602.4" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="605.37" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (16 samples, 0.03%; -0.00%)</title><rect x="807.6" y="213" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="810.63" y="223.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (40 samples, 0.08%; +0.03%)</title><rect x="306.9" y="213" width="1.0" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="309.88" y="223.5" ></text>
</g>
<g >
<title>database::find_column_family (4 samples, 0.01%; -0.02%)</title><rect x="965.6" y="357" width="0.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="968.56" y="367.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (5 samples, 0.01%; -0.00%)</title><rect x="841.8" y="421" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="844.77" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (8 samples, 0.02%; +0.00%)</title><rect x="1098.6" y="357" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1101.58" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::take_value (4 samples, 0.01%; +0.01%)</title><rect x="733.1" y="373" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="736.11" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (18 samples, 0.04%; +0.01%)</title><rect x="649.9" y="437" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="652.85" y="447.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (12 samples, 0.03%; 0.00%)</title><rect x="23.1" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.09" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (565 samples, 1.20%; +0.01%)</title><rect x="552.6" y="341" width="14.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="555.60" y="351.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (14 samples, 0.03%; -0.00%)</title><rect x="161.3" y="213" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="164.27" y="223.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (7 samples, 0.01%; 0.00%)</title><rect x="23.2" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.19" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (8 samples, 0.02%; -0.00%)</title><rect x="1150.2" y="485" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1153.17" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (5 samples, 0.01%; -0.00%)</title><rect x="541.0" y="373" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="543.96" y="383.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (17 samples, 0.04%; +0.00%)</title><rect x="1114.3" y="357" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1117.30" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (6 samples, 0.01%; -0.00%)</title><rect x="233.7" y="213" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="236.71" y="223.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (10 samples, 0.02%; -0.01%)</title><rect x="515.2" y="309" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="518.20" y="319.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (259 samples, 0.55%; +0.01%)</title><rect x="1078.6" y="245" width="6.4" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="1081.56" y="255.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (11 samples, 0.02%; +0.01%)</title><rect x="70.7" y="405" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="73.65" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (38 samples, 0.08%; +0.03%)</title><rect x="287.6" y="389" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="290.56" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (34 samples, 0.07%; -0.01%)</title><rect x="1153.6" y="453" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1156.63" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (132 samples, 0.28%; +0.00%)</title><rect x="813.7" y="357" width="3.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="816.74" y="367.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (6 samples, 0.01%; 0.00%)</title><rect x="46.5" y="501" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.50" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; -0.01%)</title><rect x="408.6" y="213" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="411.64" y="223.5" ></text>
</g>
<g >
<title>row_cache::make_reader (460 samples, 0.98%; +0.04%)</title><rect x="519.9" y="341" width="11.5" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="522.86" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (59 samples, 0.13%; +0.00%)</title><rect x="679.1" y="469" width="1.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="682.14" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.01%; 0.00%)</title><rect x="19.3" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.26" y="335.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (46 samples, 0.10%; +0.01%)</title><rect x="71.6" y="389" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="74.58" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (32 samples, 0.07%; -0.00%)</title><rect x="542.2" y="341" width="0.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="545.24" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (28 samples, 0.06%; +0.01%)</title><rect x="959.9" y="341" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="962.88" y="351.5" ></text>
</g>
<g >
<title>database::find_column_family (61 samples, 0.13%; +0.01%)</title><rect x="754.0" y="373" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="757.04" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; -0.01%)</title><rect x="928.5" y="389" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="931.46" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (103 samples, 0.22%; +0.01%)</title><rect x="932.2" y="405" width="2.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="935.19" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (6 samples, 0.01%; +0.01%)</title><rect x="877.9" y="421" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="880.90" y="431.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (56 samples, 0.12%; +0.01%)</title><rect x="1133.2" y="389" width="1.4" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="1136.20" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (61 samples, 0.13%; 0.00%)</title><rect x="368.4" y="181" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="371.41" y="191.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (6 samples, 0.01%; +0.01%)</title><rect x="398.1" y="197" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="401.13" y="207.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (16 samples, 0.03%; +0.00%)</title><rect x="168.9" y="197" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="171.88" y="207.5" ></text>
</g>
<g >
<title>__strlen_avx2 (118 samples, 0.25%; +0.06%)</title><rect x="1011.5" y="245" width="3.0" height="15.0" fill="rgb(255,108,108)" rx="2" ry="2" />
<text  x="1014.52" y="255.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (5 samples, 0.01%; 0.00%)</title><rect x="18.9" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.89" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (5 samples, 0.01%; +0.01%)</title><rect x="642.7" y="389" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="645.67" y="399.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.01%; -0.01%)</title><rect x="796.0" y="117" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="798.97" y="127.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (17 samples, 0.04%; +0.02%)</title><rect x="1096.3" y="325" width="0.4" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="1099.25" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (83 samples, 0.18%; +0.00%)</title><rect x="441.8" y="261" width="2.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="444.81" y="271.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (26 samples, 0.06%; +0.02%)</title><rect x="1062.3" y="341" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1065.31" y="351.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (23 samples, 0.05%; +0.00%)</title><rect x="505.3" y="197" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="508.32" y="207.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (13 samples, 0.03%; 0.00%)</title><rect x="23.7" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.69" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (7 samples, 0.01%; +0.01%)</title><rect x="247.9" y="229" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="250.91" y="239.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (127 samples, 0.27%; +0.01%)</title><rect x="279.0" y="293" width="3.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="281.97" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (77 samples, 0.16%; +0.01%)</title><rect x="832.7" y="405" width="1.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="835.69" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (45 samples, 0.10%; -0.01%)</title><rect x="668.8" y="453" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="671.75" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.03%; +0.00%)</title><rect x="650.9" y="437" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="653.88" y="447.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (73 samples, 0.15%; -0.00%)</title><rect x="523.8" y="309" width="1.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="526.79" y="319.5" ></text>
</g>
<g >
<title>schema::get_partitioner (6 samples, 0.01%; +0.01%)</title><rect x="924.4" y="389" width="0.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="927.38" y="399.5" ></text>
</g>
<g >
<title>__tls_init (4 samples, 0.01%; -0.01%)</title><rect x="145.3" y="261" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="148.30" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (135 samples, 0.29%; +0.00%)</title><rect x="837.1" y="405" width="3.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="840.07" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (64 samples, 0.14%; -0.01%)</title><rect x="855.6" y="453" width="1.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="858.62" y="463.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (12 samples, 0.03%; -0.02%)</title><rect x="313.2" y="165" width="0.3" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="316.22" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (41 samples, 0.09%; +0.01%)</title><rect x="216.7" y="165" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="219.74" y="175.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (24 samples, 0.05%; 0.00%)</title><rect x="1041.3" y="277" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1044.28" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (17 samples, 0.04%; -0.00%)</title><rect x="1047.4" y="197" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1050.42" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (24 samples, 0.05%; +0.00%)</title><rect x="654.5" y="485" width="0.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="657.46" y="495.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (10 samples, 0.02%; -0.02%)</title><rect x="911.1" y="357" width="0.3" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="914.14" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (262 samples, 0.56%; -0.01%)</title><rect x="134.7" y="261" width="6.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="137.66" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (6 samples, 0.01%; +0.00%)</title><rect x="207.4" y="149" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="210.36" y="159.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.01%; 0.00%)</title><rect x="46.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.65" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (29 samples, 0.06%; 0.00%)</title><rect x="682.4" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.37" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (14 samples, 0.03%; -0.01%)</title><rect x="834.1" y="373" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="837.14" y="383.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (15 samples, 0.03%; +0.00%)</title><rect x="1139.6" y="469" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1142.56" y="479.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (67 samples, 0.14%; +0.00%)</title><rect x="71.1" y="405" width="1.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="74.05" y="415.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (4 samples, 0.01%; 0.00%)</title><rect x="46.6" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.65" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.02%; +0.00%)</title><rect x="352.1" y="165" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="355.07" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; +0.01%)</title><rect x="1022.2" y="181" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1025.18" y="191.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10 samples, 0.02%; +0.01%)</title><rect x="816.7" y="261" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="819.74" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; -0.01%)</title><rect x="1104.7" y="373" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1107.66" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (89 samples, 0.19%; 0.00%)</title><rect x="38.0" y="453" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.04" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (41 samples, 0.09%; -0.01%)</title><rect x="580.2" y="421" width="1.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="583.24" y="431.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (19 samples, 0.04%; -0.05%)</title><rect x="901.8" y="389" width="0.5" height="15.0" fill="rgb(133,133,255)" rx="2" ry="2" />
<text  x="904.83" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (5 samples, 0.01%; +0.01%)</title><rect x="1029.2" y="149" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1032.24" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (106 samples, 0.22%; -0.01%)</title><rect x="1098.9" y="357" width="2.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1101.91" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (12 samples, 0.03%; +0.00%)</title><rect x="217.3" y="149" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="220.32" y="159.5" ></text>
</g>
<g >
<title>operator new (22 samples, 0.05%; +0.00%)</title><rect x="156.3" y="181" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="159.29" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (10 samples, 0.02%; 0.00%)</title><rect x="709.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="712.85" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (5 samples, 0.01%; +0.00%)</title><rect x="230.2" y="181" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="233.18" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (38 samples, 0.08%; +0.01%)</title><rect x="1157.6" y="421" width="1.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1160.63" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (63 samples, 0.13%; +0.01%)</title><rect x="720.4" y="421" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="723.39" y="431.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (49 samples, 0.10%; -0.02%)</title><rect x="933.5" y="373" width="1.3" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="936.54" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (37 samples, 0.08%; +0.01%)</title><rect x="688.5" y="453" width="1.0" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="691.53" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (5 samples, 0.01%; -0.01%)</title><rect x="70.9" y="405" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="73.93" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (93 samples, 0.20%; -0.01%)</title><rect x="1170.6" y="437" width="2.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1173.62" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (691 samples, 1.47%; -0.03%)</title><rect x="549.7" y="373" width="17.3" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="552.67" y="383.5" ></text>
</g>
<g >
<title>table::as_mutation_source (130 samples, 0.28%; -0.00%)</title><rect x="616.2" y="437" width="3.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="619.23" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (7 samples, 0.01%; -0.05%)</title><rect x="877.1" y="421" width="0.2" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="880.10" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; 0.00%)</title><rect x="923.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="926.88" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type&gt; (12 samples, 0.03%; +0.02%)</title><rect x="961.0" y="373" width="0.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="964.00" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (42 samples, 0.09%; -0.00%)</title><rect x="820.8" y="309" width="1.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="823.82" y="319.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (28 samples, 0.06%; -0.01%)</title><rect x="797.8" y="117" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="800.84" y="127.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (13 samples, 0.03%; -0.00%)</title><rect x="736.9" y="293" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="739.94" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.07%; 0.00%)</title><rect x="1140.0" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.99" y="399.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (108 samples, 0.23%; +0.00%)</title><rect x="983.7" y="293" width="2.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="986.71" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (11 samples, 0.02%; -0.01%)</title><rect x="535.6" y="389" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="538.58" y="399.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.01%; 0.00%)</title><rect x="19.3" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.26" y="319.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (12 samples, 0.03%; +0.01%)</title><rect x="234.5" y="245" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="237.54" y="255.5" ></text>
</g>
<g >
<title>dht::tri_compare (23 samples, 0.05%; -0.03%)</title><rect x="1078.0" y="245" width="0.6" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="1080.98" y="255.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (6 samples, 0.01%; +0.01%)</title><rect x="289.7" y="389" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="292.69" y="399.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (62 samples, 0.13%; -0.01%)</title><rect x="804.5" y="261" width="1.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="807.45" y="271.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (54 samples, 0.11%; -0.01%)</title><rect x="1161.9" y="469" width="1.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1164.91" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (71 samples, 0.15%; +0.01%)</title><rect x="646.0" y="437" width="1.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="649.02" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (4 samples, 0.01%; +0.00%)</title><rect x="1128.4" y="405" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1131.40" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (38 samples, 0.08%; +0.00%)</title><rect x="1105.8" y="389" width="1.0" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1108.82" y="399.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (6 samples, 0.01%; +0.00%)</title><rect x="221.3" y="149" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="224.32" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (8 samples, 0.02%; +0.00%)</title><rect x="67.6" y="389" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="70.57" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="461.1" y="309" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="464.13" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.01%; +0.00%)</title><rect x="764.6" y="341" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="767.63" y="351.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (206 samples, 0.44%; +0.01%)</title><rect x="722.5" y="389" width="5.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="725.50" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (14 samples, 0.03%; -0.00%)</title><rect x="682.5" y="325" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="685.54" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (10 samples, 0.02%; +0.01%)</title><rect x="937.5" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="940.50" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (5 samples, 0.01%; 0.00%)</title><rect x="246.9" y="181" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="249.91" y="191.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (10 samples, 0.02%; 0.00%)</title><rect x="17.4" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.38" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (15 samples, 0.03%; +0.01%)</title><rect x="1057.5" y="309" width="0.3" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="1060.45" y="319.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (138 samples, 0.29%; +0.04%)</title><rect x="1185.3" y="613" width="3.4" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="1188.29" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (17 samples, 0.04%; +0.03%)</title><rect x="97.3" y="405" width="0.4" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="100.31" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.01%; 0.00%)</title><rect x="684.7" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.70" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (169 samples, 0.36%; +0.01%)</title><rect x="440.9" y="277" width="4.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="443.93" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (10 samples, 0.02%; 0.00%)</title><rect x="586.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="588.97" y="399.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (5 samples, 0.01%; 0.00%)</title><rect x="16.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.73" y="527.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (5 samples, 0.01%; +0.00%)</title><rect x="707.7" y="469" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="710.65" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (36 samples, 0.08%; +0.02%)</title><rect x="648.2" y="469" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="651.17" y="479.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.03%; -0.00%)</title><rect x="422.4" y="373" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="425.43" y="383.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (6 samples, 0.01%; 0.00%)</title><rect x="1141.3" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.31" y="223.5" ></text>
</g>
<g >
<title>table::query (21,603 samples, 45.83%; +0.01%)</title><rect x="79.1" y="453" width="540.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="82.06" y="463.5" >table::query</text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (437 samples, 0.93%; -0.02%)</title><rect x="671.3" y="501" width="10.9" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="674.25" y="511.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (8 samples, 0.02%; +0.00%)</title><rect x="96.3" y="421" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="99.29" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (26 samples, 0.06%; +0.01%)</title><rect x="1152.7" y="421" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1155.73" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::~node_head (4 samples, 0.01%; -0.00%)</title><rect x="408.3" y="213" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="411.31" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (8 samples, 0.02%; +0.01%)</title><rect x="1121.0" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1124.04" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (15 samples, 0.03%; -0.00%)</title><rect x="34.3" y="469" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="37.28" y="479.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (12 samples, 0.03%; -0.13%)</title><rect x="1085.6" y="277" width="0.3" height="15.0" fill="rgb(0,0,255)" rx="2" ry="2" />
<text  x="1088.64" y="287.5" ></text>
</g>
<g >
<title>db::block_for (5 samples, 0.01%; +0.00%)</title><rect x="1062.8" y="325" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1065.84" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (4 samples, 0.01%; +0.01%)</title><rect x="547.1" y="421" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="550.07" y="431.5" ></text>
</g>
<g >
<title>compound_type&lt; (9 samples, 0.02%; +0.01%)</title><rect x="540.3" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="543.31" y="351.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (4 samples, 0.01%; 0.00%)</title><rect x="146.8" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.83" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (7 samples, 0.01%; 0.00%)</title><rect x="710.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="713.13" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (924 samples, 1.96%; -0.00%)</title><rect x="637.8" y="501" width="23.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="640.79" y="511.5" >s..</text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (67 samples, 0.14%; -0.00%)</title><rect x="1151.8" y="453" width="1.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1154.80" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (10 samples, 0.02%; -0.00%)</title><rect x="935.9" y="405" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="938.92" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (4 samples, 0.01%; +0.00%)</title><rect x="678.2" y="485" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="681.24" y="495.5" ></text>
</g>
<g >
<title>operator delete (19 samples, 0.04%; -0.01%)</title><rect x="415.2" y="293" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="418.20" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (5 samples, 0.01%; +0.01%)</title><rect x="724.7" y="341" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="727.67" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5,061 samples, 10.74%; -0.00%)</title><rect x="292.5" y="357" width="126.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="295.54" y="367.5" >flat_mutation_r..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (4 samples, 0.01%; 0.00%)</title><rect x="19.3" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.34" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (28 samples, 0.06%; +0.00%)</title><rect x="827.0" y="309" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="830.03" y="319.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (4 samples, 0.01%; -0.01%)</title><rect x="77.5" y="453" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="80.54" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (6 samples, 0.01%; 0.00%)</title><rect x="161.1" y="197" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="164.07" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (16 samples, 0.03%; -0.01%)</title><rect x="1022.5" y="165" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1025.51" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (20 samples, 0.04%; +0.00%)</title><rect x="803.4" y="213" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="806.40" y="223.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (5 samples, 0.01%; +0.01%)</title><rect x="408.8" y="213" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="411.77" y="223.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (4 samples, 0.01%; -0.01%)</title><rect x="905.5" y="341" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="908.53" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (9 samples, 0.02%; +0.01%)</title><rect x="644.6" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="647.62" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (4 samples, 0.01%; +0.00%)</title><rect x="38.3" y="437" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="41.29" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (4 samples, 0.01%; -0.00%)</title><rect x="1167.7" y="453" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1170.70" y="463.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (16 samples, 0.03%; -0.01%)</title><rect x="905.6" y="357" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="908.63" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (25 samples, 0.05%; -0.00%)</title><rect x="1042.8" y="261" width="0.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1045.83" y="271.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (8 samples, 0.02%; +0.00%)</title><rect x="1048.1" y="277" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1051.14" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (70 samples, 0.15%; +0.02%)</title><rect x="302.2" y="261" width="1.8" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="305.20" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (314 samples, 0.67%; -0.00%)</title><rect x="254.4" y="309" width="7.9" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="257.42" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (46,003 samples, 97.59%; +0.01%)</title><rect x="24.1" y="533" width="1151.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="27.07" y="543.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (25 samples, 0.05%; -0.04%)</title><rect x="1039.6" y="261" width="0.6" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="1042.56" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (8 samples, 0.02%; +0.01%)</title><rect x="635.4" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="638.41" y="495.5" ></text>
</g>
<g >
<title>row::compact_and_expire (6 samples, 0.01%; +0.01%)</title><rect x="393.0" y="229" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="395.97" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (11 samples, 0.02%; -0.01%)</title><rect x="490.2" y="309" width="0.3" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="493.25" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (26 samples, 0.06%; +0.01%)</title><rect x="924.8" y="389" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="927.78" y="399.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (10 samples, 0.02%; +0.01%)</title><rect x="391.0" y="181" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="394.04" y="191.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (76 samples, 0.16%; -0.02%)</title><rect x="282.3" y="309" width="1.9" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="285.33" y="319.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (12 samples, 0.03%; +0.01%)</title><rect x="824.0" y="293" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="827.03" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (40 samples, 0.08%; -0.01%)</title><rect x="809.4" y="293" width="1.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="812.43" y="303.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (121 samples, 0.26%; +0.02%)</title><rect x="912.3" y="341" width="3.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="915.34" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (5 samples, 0.01%; -0.00%)</title><rect x="693.5" y="453" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="696.53" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (6 samples, 0.01%; -0.00%)</title><rect x="607.6" y="437" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="610.60" y="447.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (9 samples, 0.02%; -0.01%)</title><rect x="1094.3" y="261" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1097.30" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.00%)</title><rect x="411.7" y="245" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="414.67" y="255.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (33 samples, 0.07%; 0.00%)</title><rect x="1140.9" y="437" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.89" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (16 samples, 0.03%; -0.00%)</title><rect x="680.2" y="453" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="683.22" y="463.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (85 samples, 0.18%; +0.01%)</title><rect x="595.4" y="421" width="2.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="598.43" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (27 samples, 0.06%; +0.03%)</title><rect x="49.6" y="485" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="52.58" y="495.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (292 samples, 0.62%; -0.02%)</title><rect x="579.4" y="437" width="7.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="582.36" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (8 samples, 0.02%; -0.01%)</title><rect x="1074.8" y="325" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1077.80" y="335.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (6 samples, 0.01%; 0.00%)</title><rect x="33.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.13" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.01%; 0.00%)</title><rect x="23.3" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.27" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (25 samples, 0.05%; +0.01%)</title><rect x="329.3" y="181" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="332.29" y="191.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (23 samples, 0.05%; -0.01%)</title><rect x="571.1" y="357" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="574.10" y="367.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (11 samples, 0.02%; +0.00%)</title><rect x="23.1" y="453" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="26.12" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (35 samples, 0.07%; 0.00%)</title><rect x="576.1" y="357" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="579.08" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (42 samples, 0.09%; -0.01%)</title><rect x="842.5" y="389" width="1.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="845.48" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (6 samples, 0.01%; +0.01%)</title><rect x="736.1" y="309" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="739.09" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (76 samples, 0.16%; 0.00%)</title><rect x="672.7" y="485" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="675.73" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (507 samples, 1.08%; -0.02%)</title><rect x="236.2" y="261" width="12.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="239.24" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (54 samples, 0.11%; -0.00%)</title><rect x="646.4" y="421" width="1.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="649.40" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (5 samples, 0.01%; +0.00%)</title><rect x="233.2" y="229" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="236.16" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (4 samples, 0.01%; 0.00%)</title><rect x="18.8" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.76" y="239.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (4 samples, 0.01%; 0.00%)</title><rect x="46.5" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.50" y="335.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (246 samples, 0.52%; 0.00%)</title><rect x="16.9" y="485" width="6.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.91" y="495.5" ></text>
</g>
<g >
<title>operator new (73 samples, 0.15%; 0.00%)</title><rect x="950.9" y="405" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="953.89" y="415.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.06%; +0.00%)</title><rect x="420.9" y="341" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="423.91" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (6,139 samples, 13.02%; -0.01%)</title><rect x="953.3" y="405" width="153.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="956.27" y="415.5" >service::storage_pr..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (10 samples, 0.02%; +0.01%)</title><rect x="540.7" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="543.69" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (19 samples, 0.04%; +0.01%)</title><rect x="536.7" y="421" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="539.73" y="431.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (20 samples, 0.04%; -0.03%)</title><rect x="726.7" y="293" width="0.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="729.70" y="303.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (8 samples, 0.02%; -0.00%)</title><rect x="483.3" y="213" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="486.31" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (12 samples, 0.03%; 0.00%)</title><rect x="1047.8" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1050.84" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; +0.00%)</title><rect x="49.3" y="485" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="52.33" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (4 samples, 0.01%; +0.00%)</title><rect x="805.2" y="229" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="808.20" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (16 samples, 0.03%; -0.01%)</title><rect x="562.3" y="277" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="565.26" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.00%)</title><rect x="569.2" y="325" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="572.25" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (8 samples, 0.02%; -0.00%)</title><rect x="1166.1" y="485" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1169.12" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (13 samples, 0.03%; +0.01%)</title><rect x="24.8" y="517" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="27.84" y="527.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (6 samples, 0.01%; -0.00%)</title><rect x="979.4" y="293" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="982.38" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (82 samples, 0.17%; 0.00%)</title><rect x="245.0" y="213" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="247.98" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (4 samples, 0.01%; +0.00%)</title><rect x="556.5" y="309" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="559.48" y="319.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (14 samples, 0.03%; -0.00%)</title><rect x="745.5" y="261" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="748.53" y="271.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (8 samples, 0.02%; 0.00%)</title><rect x="247.7" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="250.71" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (75 samples, 0.16%; +0.00%)</title><rect x="38.4" y="437" width="1.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="41.39" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (4 samples, 0.01%; 0.00%)</title><rect x="806.9" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="809.85" y="255.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (312 samples, 0.66%; -0.05%)</title><rect x="463.6" y="293" width="7.8" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="466.61" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (10,843 samples, 23.00%; -0.04%)</title><rect x="868.1" y="469" width="271.5" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="871.13" y="479.5" >seastar::noncopyable_function&lt;seasta..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (4 samples, 0.01%; +0.00%)</title><rect x="76.9" y="453" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="79.94" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (15 samples, 0.03%; +0.00%)</title><rect x="582.4" y="405" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="585.41" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (16 samples, 0.03%; -0.01%)</title><rect x="1118.3" y="325" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1121.31" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (4 samples, 0.01%; 0.00%)</title><rect x="18.8" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.76" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (73 samples, 0.15%; -0.01%)</title><rect x="950.9" y="389" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="953.89" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state_base::future_state_base (5 samples, 0.01%; +0.01%)</title><rect x="787.2" y="261" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="790.15" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (20 samples, 0.04%; -0.00%)</title><rect x="703.8" y="437" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="706.82" y="447.5" ></text>
</g>
<g >
<title>operator delete (68 samples, 0.14%; -0.03%)</title><rect x="409.7" y="245" width="1.7" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="412.69" y="255.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.08%; 0.00%)</title><rect x="1140.0" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.96" y="447.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (5 samples, 0.01%; 0.00%)</title><rect x="654.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="657.73" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (442 samples, 0.94%; +0.00%)</title><rect x="885.1" y="341" width="11.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="888.13" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (4 samples, 0.01%; +0.00%)</title><rect x="261.2" y="261" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="264.20" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (27 samples, 0.06%; +0.03%)</title><rect x="137.5" y="245" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="140.49" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (16 samples, 0.03%; +0.02%)</title><rect x="322.6" y="197" width="0.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="325.60" y="207.5" ></text>
</g>
<g >
<title>reader_permit::consume (22 samples, 0.05%; +0.01%)</title><rect x="506.2" y="181" width="0.6" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="509.24" y="191.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (53 samples, 0.11%; 0.00%)</title><rect x="17.3" y="325" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.31" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (8 samples, 0.02%; -0.00%)</title><rect x="235.1" y="245" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="238.14" y="255.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (86 samples, 0.18%; +0.01%)</title><rect x="138.4" y="245" width="2.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="141.39" y="255.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (36 samples, 0.08%; +0.01%)</title><rect x="746.7" y="389" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="749.68" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (38 samples, 0.08%; -0.02%)</title><rect x="971.4" y="309" width="1.0" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="974.44" y="319.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (1,233 samples, 2.62%; 0.00%)</title><rect x="780.1" y="325" width="30.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="783.12" y="335.5" >st..</text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (8 samples, 0.02%; +0.01%)</title><rect x="248.5" y="229" width="0.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="251.48" y="239.5" ></text>
</g>
<g >
<title>schema::column_at (67 samples, 0.14%; +0.03%)</title><rect x="388.1" y="165" width="1.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="391.14" y="175.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (15 samples, 0.03%; -0.00%)</title><rect x="768.1" y="357" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="771.08" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (12 samples, 0.03%; +0.00%)</title><rect x="929.3" y="405" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="932.29" y="415.5" ></text>
</g>
<g >
<title>posix_memalign (8 samples, 0.02%; +0.00%)</title><rect x="193.6" y="69" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="196.61" y="79.5" ></text>
</g>
<g >
<title>do_cql_test (275 samples, 0.58%; 0.00%)</title><rect x="16.7" y="549" width="6.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.66" y="559.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (119 samples, 0.25%; -0.05%)</title><rect x="314.4" y="181" width="3.0" height="15.0" fill="rgb(133,133,255)" rx="2" ry="2" />
<text  x="317.44" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (15 samples, 0.03%; -0.02%)</title><rect x="287.2" y="357" width="0.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="290.18" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (21 samples, 0.04%; +0.00%)</title><rect x="149.3" y="245" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="152.31" y="255.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (33 samples, 0.07%; +0.01%)</title><rect x="802.2" y="101" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="805.20" y="111.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1,240 samples, 2.63%; +0.07%)</title><rect x="175.2" y="133" width="31.0" height="15.0" fill="rgb(255,91,91)" rx="2" ry="2" />
<text  x="178.19" y="143.5" >co..</text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (6 samples, 0.01%; +0.00%)</title><rect x="1131.5" y="389" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1134.55" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (20 samples, 0.04%; -0.02%)</title><rect x="452.9" y="261" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="455.92" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (98 samples, 0.21%; +0.02%)</title><rect x="250.6" y="213" width="2.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="253.64" y="223.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (398 samples, 0.84%; -0.02%)</title><rect x="1020.6" y="213" width="10.0" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1023.61" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (25 samples, 0.05%; -0.01%)</title><rect x="1073.7" y="309" width="0.6" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="1076.67" y="319.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; -0.00%)</title><rect x="791.2" y="165" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="794.18" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (21 samples, 0.04%; -0.00%)</title><rect x="1169.2" y="453" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1172.25" y="463.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (18 samples, 0.04%; -0.01%)</title><rect x="243.5" y="197" width="0.5" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="246.53" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (4 samples, 0.01%; -0.01%)</title><rect x="663.0" y="453" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="666.02" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (100 samples, 0.21%; +0.00%)</title><rect x="898.1" y="357" width="2.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="901.07" y="367.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (188 samples, 0.40%; -0.01%)</title><rect x="686.2" y="469" width="4.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="689.20" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (8 samples, 0.02%; +0.01%)</title><rect x="871.4" y="437" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="874.44" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (8 samples, 0.02%; +0.00%)</title><rect x="136.8" y="245" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="139.79" y="255.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (10 samples, 0.02%; +0.01%)</title><rect x="370.2" y="197" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="373.22" y="207.5" ></text>
</g>
<g >
<title>query::result::result (9 samples, 0.02%; -0.00%)</title><rect x="603.8" y="421" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="606.79" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (4 samples, 0.01%; 0.00%)</title><rect x="18.8" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.76" y="223.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (115 samples, 0.24%; -0.03%)</title><rect x="360.8" y="165" width="2.9" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="363.80" y="175.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (24 samples, 0.05%; +0.00%)</title><rect x="66.5" y="405" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="69.52" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (12 samples, 0.03%; +0.01%)</title><rect x="771.3" y="357" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="774.28" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (13 samples, 0.03%; +0.01%)</title><rect x="1015.3" y="197" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1018.30" y="207.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (50 samples, 0.11%; -0.01%)</title><rect x="1174.3" y="517" width="1.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1177.33" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (7 samples, 0.01%; +0.01%)</title><rect x="808.2" y="245" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="811.21" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (4 samples, 0.01%; +0.00%)</title><rect x="1119.3" y="341" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1122.31" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (18 samples, 0.04%; +0.01%)</title><rect x="229.4" y="133" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="232.36" y="143.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (5 samples, 0.01%; +0.00%)</title><rect x="895.7" y="325" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="898.74" y="335.5" ></text>
</g>
<g >
<title>query::result::builder::builder (139 samples, 0.29%; +0.03%)</title><rect x="590.5" y="421" width="3.5" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="593.48" y="431.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (5 samples, 0.01%; -0.01%)</title><rect x="1140.4" y="245" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1143.41" y="255.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (24 samples, 0.05%; +0.03%)</title><rect x="1085.0" y="261" width="0.6" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="1088.04" y="271.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (5 samples, 0.01%; -0.00%)</title><rect x="619.4" y="421" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="622.36" y="431.5" ></text>
</g>
<g >
<title>posix_memalign (137 samples, 0.29%; -0.01%)</title><rect x="194.3" y="53" width="3.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="197.31" y="63.5" ></text>
</g>
<g >
<title>schema::column_at (12 samples, 0.03%; 0.00%)</title><rect x="212.7" y="117" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="215.69" y="127.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::validate (5 samples, 0.01%; 0.00%)</title><rect x="829.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="832.03" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.01%; -0.00%)</title><rect x="282.0" y="277" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="285.00" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (30 samples, 0.06%; -0.03%)</title><rect x="733.6" y="373" width="0.8" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="736.61" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; 0.00%)</title><rect x="1028.1" y="165" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1031.09" y="175.5" ></text>
</g>
<g >
<title>__tls_init (13 samples, 0.03%; +0.01%)</title><rect x="498.4" y="245" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="501.43" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (8 samples, 0.02%; -0.01%)</title><rect x="1137.4" y="405" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1140.36" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (9 samples, 0.02%; +0.01%)</title><rect x="449.5" y="293" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="452.54" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (4 samples, 0.01%; +0.01%)</title><rect x="692.1" y="485" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="695.11" y="495.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (12,686 samples, 26.91%; -0.01%)</title><rect x="106.7" y="421" width="317.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="109.73" y="431.5" >query::consume_page&lt;</text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (64 samples, 0.14%; +0.00%)</title><rect x="40.3" y="469" width="1.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="43.29" y="479.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (6 samples, 0.01%; +0.01%)</title><rect x="1050.5" y="325" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1053.54" y="335.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (168 samples, 0.36%; -0.01%)</title><rect x="541.1" y="389" width="4.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="544.11" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_M_reset (4 samples, 0.01%; +0.01%)</title><rect x="393.5" y="229" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="396.50" y="239.5" ></text>
</g>
<g >
<title>schema::column_at (7 samples, 0.01%; -0.01%)</title><rect x="366.4" y="197" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="369.36" y="207.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (6 samples, 0.01%; 0.00%)</title><rect x="23.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="447.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (126 samples, 0.27%; -0.00%)</title><rect x="700.6" y="437" width="3.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="703.62" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (32 samples, 0.07%; +0.01%)</title><rect x="855.9" y="421" width="0.8" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="858.92" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (4 samples, 0.01%; -0.01%)</title><rect x="262.8" y="309" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="265.78" y="319.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (377 samples, 0.80%; -0.03%)</title><rect x="521.6" y="325" width="9.4" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="524.61" y="335.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (5 samples, 0.01%; 0.00%)</title><rect x="987.5" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="990.54" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; +0.00%)</title><rect x="1043.3" y="229" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1046.29" y="239.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (4 samples, 0.01%; 0.00%)</title><rect x="46.5" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.50" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (73 samples, 0.15%; 0.00%)</title><rect x="1055.1" y="325" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1058.05" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (24 samples, 0.05%; -0.03%)</title><rect x="691.5" y="485" width="0.6" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="694.51" y="495.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (35 samples, 0.07%; +0.00%)</title><rect x="505.9" y="197" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="508.92" y="207.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (91 samples, 0.19%; +0.04%)</title><rect x="267.3" y="325" width="2.2" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="270.26" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (4 samples, 0.01%; -0.00%)</title><rect x="949.5" y="309" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="952.51" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (4 samples, 0.01%; +0.00%)</title><rect x="422.8" y="373" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="425.81" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (17 samples, 0.04%; +0.00%)</title><rect x="329.9" y="181" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="332.91" y="191.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (18 samples, 0.04%; -0.00%)</title><rect x="690.3" y="453" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="693.30" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (407 samples, 0.86%; -0.04%)</title><rect x="236.8" y="229" width="10.2" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="239.84" y="239.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (40 samples, 0.08%; +0.04%)</title><rect x="330.6" y="165" width="1.0" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="333.61" y="175.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (28 samples, 0.06%; 0.00%)</title><rect x="1174.8" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1177.81" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (12 samples, 0.03%; +0.02%)</title><rect x="1029.5" y="197" width="0.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1032.49" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (5 samples, 0.01%; -0.00%)</title><rect x="1173.5" y="501" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1176.53" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%; +0.00%)</title><rect x="917.5" y="357" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="920.52" y="367.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (19 samples, 0.04%; -0.00%)</title><rect x="758.1" y="325" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="761.14" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (13 samples, 0.03%; +0.00%)</title><rect x="547.7" y="405" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="550.72" y="415.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (8 samples, 0.02%; -0.00%)</title><rect x="844.2" y="405" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="847.15" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (47 samples, 0.10%; 0.00%)</title><rect x="842.4" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="845.35" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (6 samples, 0.01%; +0.01%)</title><rect x="685.5" y="453" width="0.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="688.50" y="463.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (15 samples, 0.03%; +0.00%)</title><rect x="651.8" y="437" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="654.83" y="447.5" ></text>
</g>
<g >
<title>operator delete (15 samples, 0.03%; -0.01%)</title><rect x="625.2" y="485" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="628.20" y="495.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (19 samples, 0.04%; -0.01%)</title><rect x="439.0" y="293" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="442.00" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (8 samples, 0.02%; -0.01%)</title><rect x="322.1" y="197" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="325.05" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (8 samples, 0.02%; +0.01%)</title><rect x="578.1" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="581.08" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::clear (4 samples, 0.01%; +0.01%)</title><rect x="746.5" y="405" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="749.53" y="415.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (25 samples, 0.05%; -0.00%)</title><rect x="557.8" y="293" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="560.78" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (43 samples, 0.09%; +0.02%)</title><rect x="646.5" y="405" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="649.55" y="415.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (12 samples, 0.03%; -0.01%)</title><rect x="262.4" y="309" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="265.40" y="319.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (6 samples, 0.01%; +0.01%)</title><rect x="287.0" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="290.03" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.01%)</title><rect x="666.7" y="453" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="669.70" y="463.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (239 samples, 0.51%; +0.00%)</title><rect x="848.5" y="453" width="6.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="851.53" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (129 samples, 0.27%; 0.00%)</title><rect x="675.0" y="485" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.01" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (39 samples, 0.08%; 0.00%)</title><rect x="17.6" y="293" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.63" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (4 samples, 0.01%; 0.00%)</title><rect x="1028.4" y="165" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1031.44" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (9 samples, 0.02%; 0.00%)</title><rect x="269.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="272.31" y="319.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (21 samples, 0.04%; -0.00%)</title><rect x="535.3" y="405" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="538.33" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (6 samples, 0.01%; -0.00%)</title><rect x="602.5" y="421" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="605.52" y="431.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (11 samples, 0.02%; 0.00%)</title><rect x="1141.0" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.99" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (21 samples, 0.04%; -0.01%)</title><rect x="1068.1" y="293" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1071.09" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (15 samples, 0.03%; -0.00%)</title><rect x="121.6" y="309" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="124.59" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (605 samples, 1.28%; +0.01%)</title><rect x="1019.5" y="245" width="15.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1022.48" y="255.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (4 samples, 0.01%; -0.00%)</title><rect x="171.6" y="181" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="174.56" y="191.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (389 samples, 0.83%; +0.01%)</title><rect x="437.7" y="309" width="9.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="440.65" y="319.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (6 samples, 0.01%; +0.00%)</title><rect x="771.1" y="357" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="774.13" y="367.5" ></text>
</g>
<g >
<title>[unknown] (6 samples, 0.01%; 0.00%)</title><rect x="10.0" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.03" y="623.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (14 samples, 0.03%; -0.01%)</title><rect x="220.6" y="117" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="223.57" y="127.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (59 samples, 0.13%; +0.02%)</title><rect x="643.6" y="421" width="1.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="646.57" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (88 samples, 0.19%; -0.00%)</title><rect x="650.5" y="469" width="2.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="653.48" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (105 samples, 0.22%; 0.00%)</title><rect x="610.6" y="405" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="613.58" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (13 samples, 0.03%; +0.01%)</title><rect x="1134.6" y="405" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1137.60" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;utils::UUID&gt;::allocate (4 samples, 0.01%; +0.01%)</title><rect x="1153.9" y="437" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1156.85" y="447.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (4 samples, 0.01%; +0.00%)</title><rect x="1131.8" y="421" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1134.80" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (53 samples, 0.11%; 0.00%)</title><rect x="757.3" y="341" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="760.29" y="351.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (53 samples, 0.11%; 0.00%)</title><rect x="17.3" y="373" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.31" y="383.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (5 samples, 0.01%; 0.00%)</title><rect x="282.2" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="285.20" y="319.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (14 samples, 0.03%; +0.02%)</title><rect x="459.9" y="325" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="462.91" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (9 samples, 0.02%; +0.00%)</title><rect x="835.2" y="437" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="838.17" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (27 samples, 0.06%; -0.01%)</title><rect x="630.2" y="469" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="633.20" y="479.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (5 samples, 0.01%; -0.00%)</title><rect x="746.0" y="357" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="749.00" y="367.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (7 samples, 0.01%; +0.01%)</title><rect x="750.4" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="753.38" y="367.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (22 samples, 0.05%; -0.01%)</title><rect x="1166.6" y="469" width="0.6" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="1169.64" y="479.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (11 samples, 0.02%; 0.00%)</title><rect x="682.5" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.54" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (4 samples, 0.01%; -0.01%)</title><rect x="1098.8" y="357" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1101.78" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; +0.01%)</title><rect x="231.0" y="213" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="234.01" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (4 samples, 0.01%; +0.00%)</title><rect x="156.0" y="197" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="159.04" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (125 samples, 0.27%; -0.05%)</title><rect x="194.6" y="37" width="3.1" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="197.61" y="47.5" ></text>
</g>
<g >
<title>__tls_init (14 samples, 0.03%; 0.00%)</title><rect x="146.5" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.48" y="255.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.01%; +0.00%)</title><rect x="633.4" y="469" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="636.36" y="479.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (6 samples, 0.01%; 0.00%)</title><rect x="828.4" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="831.36" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (19 samples, 0.04%; +0.01%)</title><rect x="511.1" y="277" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="514.15" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (35 samples, 0.07%; +0.00%)</title><rect x="1156.4" y="405" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1159.38" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (8 samples, 0.02%; +0.01%)</title><rect x="1049.3" y="293" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1052.29" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (20 samples, 0.04%; +0.00%)</title><rect x="529.9" y="245" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="532.87" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.01%; 0.00%)</title><rect x="625.5" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="628.47" y="479.5" ></text>
</g>
<g >
<title>reader_permit::consume (8 samples, 0.02%; +0.01%)</title><rect x="156.8" y="181" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="159.84" y="191.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (6 samples, 0.01%; +0.01%)</title><rect x="404.8" y="181" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="407.84" y="191.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (10 samples, 0.02%; +0.01%)</title><rect x="1153.1" y="405" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1156.13" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (21 samples, 0.04%; +0.01%)</title><rect x="260.5" y="277" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="263.52" y="287.5" ></text>
</g>
<g >
<title>operator delete (28 samples, 0.06%; -0.01%)</title><rect x="806.1" y="245" width="0.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="809.13" y="255.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (4 samples, 0.01%; +0.01%)</title><rect x="567.8" y="357" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="570.77" y="367.5" ></text>
</g>
<g >
<title>row::~row (4 samples, 0.01%; +0.00%)</title><rect x="253.2" y="213" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="256.24" y="223.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (10 samples, 0.02%; -0.01%)</title><rect x="909.2" y="373" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="912.21" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1,191 samples, 2.53%; -0.03%)</title><rect x="549.3" y="405" width="29.8" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="552.30" y="415.5" >fl..</text>
</g>
<g >
<title>reader_permit::~reader_permit (13 samples, 0.03%; +0.00%)</title><rect x="510.8" y="277" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="513.82" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (12 samples, 0.03%; +0.01%)</title><rect x="573.5" y="341" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="576.53" y="351.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (36 samples, 0.08%; -0.01%)</title><rect x="798.9" y="149" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="801.92" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (87 samples, 0.18%; -0.00%)</title><rect x="932.6" y="389" width="2.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="935.59" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (4 samples, 0.01%; -0.01%)</title><rect x="576.0" y="357" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="578.98" y="367.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (38 samples, 0.08%; -0.01%)</title><rect x="220.3" y="133" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="223.27" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (9 samples, 0.02%; +0.02%)</title><rect x="586.4" y="405" width="0.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="589.44" y="415.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (54 samples, 0.11%; -0.00%)</title><rect x="201.7" y="101" width="1.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="204.72" y="111.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (30 samples, 0.06%; +0.00%)</title><rect x="601.6" y="437" width="0.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="604.59" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (16 samples, 0.03%; +0.01%)</title><rect x="610.0" y="405" width="0.4" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="612.95" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (37 samples, 0.08%; +0.01%)</title><rect x="100.0" y="421" width="0.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="102.97" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (4 samples, 0.01%; +0.01%)</title><rect x="98.1" y="389" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="101.14" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (263 samples, 0.56%; 0.00%)</title><rect x="36.1" y="485" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.13" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (141 samples, 0.30%; +0.01%)</title><rect x="158.2" y="229" width="3.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="161.22" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (18 samples, 0.04%; -0.00%)</title><rect x="1154.0" y="421" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1157.03" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (71 samples, 0.15%; 0.00%)</title><rect x="796.8" y="133" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="799.77" y="143.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (7 samples, 0.01%; +0.00%)</title><rect x="960.8" y="373" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="963.75" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (10 samples, 0.02%; 0.00%)</title><rect x="973.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="976.77" y="367.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (9 samples, 0.02%; +0.00%)</title><rect x="223.1" y="149" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="226.05" y="159.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (9 samples, 0.02%; +0.01%)</title><rect x="478.6" y="197" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="481.61" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (12 samples, 0.03%; +0.01%)</title><rect x="253.6" y="261" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="256.64" y="271.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (200 samples, 0.42%; 0.00%)</title><rect x="16.9" y="453" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.91" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::~vector (5 samples, 0.01%; -0.01%)</title><rect x="42.6" y="469" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="45.59" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (5 samples, 0.01%; -0.02%)</title><rect x="663.2" y="469" width="0.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="666.22" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (5 samples, 0.01%; -0.00%)</title><rect x="598.0" y="421" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="601.01" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (31 samples, 0.07%; 0.00%)</title><rect x="934.0" y="325" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="936.99" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (73 samples, 0.15%; +0.03%)</title><rect x="777.4" y="309" width="1.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="780.44" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (4 samples, 0.01%; +0.01%)</title><rect x="1029.1" y="181" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1032.07" y="191.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (2,484 samples, 5.27%; 0.00%)</title><rect x="988.0" y="325" width="62.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="991.01" y="335.5" >servic..</text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (4 samples, 0.01%; +0.00%)</title><rect x="742.1" y="293" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="745.07" y="303.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (19 samples, 0.04%; +0.01%)</title><rect x="556.0" y="309" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="559.01" y="319.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (106 samples, 0.22%; +0.02%)</title><rect x="662.3" y="485" width="2.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="665.27" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (4 samples, 0.01%; +0.00%)</title><rect x="643.3" y="405" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="646.27" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (36 samples, 0.08%; 0.00%)</title><rect x="151.2" y="245" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="154.18" y="255.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (4 samples, 0.01%; +0.01%)</title><rect x="700.4" y="437" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="703.42" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (62 samples, 0.13%; -0.00%)</title><rect x="1126.8" y="389" width="1.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1129.84" y="399.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (6 samples, 0.01%; 0.00%)</title><rect x="1173.8" y="421" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1176.78" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (129 samples, 0.27%; +0.01%)</title><rect x="631.3" y="501" width="3.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="634.30" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (4 samples, 0.01%; 0.00%)</title><rect x="19.2" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.16" y="335.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (140 samples, 0.30%; -0.02%)</title><rect x="67.1" y="405" width="3.5" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="70.12" y="415.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (4 samples, 0.01%; +0.00%)</title><rect x="241.0" y="213" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="243.97" y="223.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (80 samples, 0.17%; +0.03%)</title><rect x="916.9" y="373" width="2.0" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="919.90" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (39 samples, 0.08%; +0.03%)</title><rect x="737.9" y="357" width="1.0" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="740.89" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (48 samples, 0.10%; +0.01%)</title><rect x="1046.6" y="245" width="1.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1049.64" y="255.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (26 samples, 0.06%; +0.01%)</title><rect x="724.0" y="325" width="0.7" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="727.02" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (32 samples, 0.07%; -0.01%)</title><rect x="776.0" y="309" width="0.8" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="778.99" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (15 samples, 0.03%; +0.00%)</title><rect x="751.8" y="373" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="754.78" y="383.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (21 samples, 0.04%; +0.03%)</title><rect x="1040.4" y="261" width="0.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1043.43" y="271.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (4 samples, 0.01%; -0.01%)</title><rect x="817.5" y="389" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="820.52" y="399.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (128 samples, 0.27%; -0.01%)</title><rect x="969.2" y="341" width="3.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="972.19" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (5 samples, 0.01%; +0.00%)</title><rect x="567.0" y="373" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="569.97" y="383.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (25 samples, 0.05%; +0.02%)</title><rect x="476.8" y="213" width="0.6" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="479.80" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (52 samples, 0.11%; -0.00%)</title><rect x="851.7" y="341" width="1.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="854.69" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (18 samples, 0.04%; -0.01%)</title><rect x="633.1" y="485" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="636.08" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::optional&lt;auth::resource&gt;&amp;&amp;, service::client_state::check_has_permission (5 samples, 0.01%; +0.00%)</title><rect x="811.2" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="814.21" y="335.5" ></text>
</g>
<g >
<title>dht::tri_compare (4 samples, 0.01%; +0.01%)</title><rect x="483.6" y="277" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="486.64" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (134 samples, 0.28%; +0.02%)</title><rect x="1116.1" y="373" width="3.3" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="1119.05" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (38 samples, 0.08%; -0.01%)</title><rect x="840.7" y="405" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="843.70" y="415.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (643 samples, 1.36%; -0.02%)</title><rect x="731.8" y="421" width="16.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="734.81" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (4,253 samples, 9.02%; +0.00%)</title><rect x="428.0" y="373" width="106.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="430.99" y="383.5" >std::_Functio..</text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (9 samples, 0.02%; -0.03%)</title><rect x="123.4" y="293" width="0.2" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="126.37" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="298.3" y="245" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="301.35" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (22 samples, 0.05%; -0.00%)</title><rect x="755.0" y="325" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="758.01" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (12 samples, 0.03%; +0.01%)</title><rect x="668.3" y="437" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="671.33" y="447.5" ></text>
</g>
<g >
<title>std::operator+ (4 samples, 0.01%; 0.00%)</title><rect x="18.8" y="197" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.76" y="207.5" ></text>
</g>
<g >
<title>database::query (142 samples, 0.30%; -0.04%)</title><rect x="42.9" y="501" width="3.5" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="45.89" y="511.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (4 samples, 0.01%; +0.01%)</title><rect x="222.2" y="165" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="225.17" y="175.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (18 samples, 0.04%; +0.01%)</title><rect x="704.4" y="453" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="707.37" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (11 samples, 0.02%; +0.01%)</title><rect x="548.7" y="421" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="551.70" y="431.5" ></text>
</g>
<g >
<title>operator new (73 samples, 0.15%; -0.00%)</title><rect x="1066.8" y="325" width="1.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1069.79" y="335.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (474 samples, 1.01%; -0.00%)</title><rect x="471.9" y="293" width="11.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="474.95" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (5 samples, 0.01%; -0.00%)</title><rect x="692.2" y="485" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="695.21" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (93 samples, 0.20%; -0.00%)</title><rect x="938.6" y="389" width="2.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="941.58" y="399.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (46,006 samples, 97.60%; 0.00%)</title><rect x="24.1" y="565" width="1151.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.07" y="575.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>seastar::memory::allocate (91 samples, 0.19%; +0.06%)</title><rect x="1036.0" y="245" width="2.3" height="15.0" fill="rgb(255,119,119)" rx="2" ry="2" />
<text  x="1039.00" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; +0.01%)</title><rect x="929.1" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="932.14" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (13 samples, 0.03%; -0.01%)</title><rect x="1141.7" y="485" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1144.71" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (44 samples, 0.09%; +0.01%)</title><rect x="643.8" y="405" width="1.1" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="646.84" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (4 samples, 0.01%; -0.02%)</title><rect x="857.2" y="469" width="0.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="860.22" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (13 samples, 0.03%; -0.00%)</title><rect x="411.1" y="229" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="414.07" y="239.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (4 samples, 0.01%; +0.00%)</title><rect x="809.0" y="277" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="811.98" y="287.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (20 samples, 0.04%; +0.02%)</title><rect x="335.2" y="181" width="0.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="338.25" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (14 samples, 0.03%; +0.02%)</title><rect x="518.5" y="325" width="0.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="521.48" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (11 samples, 0.02%; +0.01%)</title><rect x="952.7" y="405" width="0.3" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="955.72" y="415.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (4 samples, 0.01%; +0.01%)</title><rect x="1060.6" y="293" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1063.63" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="637.3" y="485" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="640.31" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (35 samples, 0.07%; -0.00%)</title><rect x="1022.0" y="197" width="0.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1025.03" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="662.0" y="485" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="665.04" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (16 samples, 0.03%; +0.01%)</title><rect x="484.1" y="325" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="487.14" y="335.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (330 samples, 0.70%; +0.01%)</title><rect x="1077.4" y="277" width="8.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1080.38" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (117 samples, 0.25%; -0.01%)</title><rect x="976.7" y="341" width="3.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="979.75" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (7 samples, 0.01%; +0.01%)</title><rect x="894.6" y="309" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="897.59" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (4 samples, 0.01%; -0.01%)</title><rect x="1038.4" y="261" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1041.38" y="271.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.02%; +0.01%)</title><rect x="58.8" y="453" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="61.81" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (30 samples, 0.06%; -0.03%)</title><rect x="166.3" y="229" width="0.7" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="169.28" y="239.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (166 samples, 0.35%; -0.03%)</title><rect x="356.6" y="165" width="4.2" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="359.65" y="175.5" ></text>
</g>
<g >
<title>operator new (35 samples, 0.07%; 0.00%)</title><rect x="781.8" y="277" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="784.77" y="287.5" ></text>
</g>
<g >
<title>mutation_querier::consume (6 samples, 0.01%; -0.00%)</title><rect x="321.2" y="213" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="324.20" y="223.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (5 samples, 0.01%; -0.01%)</title><rect x="1075.8" y="325" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1078.78" y="335.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (8 samples, 0.02%; -0.00%)</title><rect x="721.8" y="405" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="724.77" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (5 samples, 0.01%; +0.01%)</title><rect x="434.9" y="341" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="437.90" y="351.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (57 samples, 0.12%; +0.02%)</title><rect x="781.4" y="293" width="1.4" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="784.42" y="303.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (20 samples, 0.04%; +0.02%)</title><rect x="316.5" y="165" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="319.55" y="175.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (201 samples, 0.43%; 0.00%)</title><rect x="16.9" y="469" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.91" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (4 samples, 0.01%; +0.00%)</title><rect x="39.5" y="405" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="42.46" y="415.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (116 samples, 0.25%; 0.00%)</title><rect x="906.1" y="373" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="909.08" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (8 samples, 0.02%; +0.00%)</title><rect x="894.4" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="897.39" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (5 samples, 0.01%; -0.00%)</title><rect x="900.6" y="357" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="903.58" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (23 samples, 0.05%; 0.00%)</title><rect x="20.9" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.91" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; 0.00%)</title><rect x="1028.6" y="149" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1031.59" y="159.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (7 samples, 0.01%; -0.02%)</title><rect x="546.9" y="421" width="0.1" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="549.87" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (8 samples, 0.02%; +0.01%)</title><rect x="419.7" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="422.70" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (52 samples, 0.11%; +0.00%)</title><rect x="526.2" y="309" width="1.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="529.19" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (5 samples, 0.01%; +0.01%)</title><rect x="987.7" y="325" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="990.66" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (78 samples, 0.17%; -0.06%)</title><rect x="980.6" y="309" width="1.9" height="15.0" fill="rgb(119,119,255)" rx="2" ry="2" />
<text  x="983.55" y="319.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (27 samples, 0.06%; +0.03%)</title><rect x="551.3" y="341" width="0.7" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="554.35" y="351.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%; -0.00%)</title><rect x="631.9" y="485" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="634.85" y="495.5" ></text>
</g>
<g >
<title>operator new (35 samples, 0.07%; +0.00%)</title><rect x="533.2" y="325" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="536.20" y="335.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (4 samples, 0.01%; 0.00%)</title><rect x="46.5" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.50" y="383.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (7 samples, 0.01%; +0.01%)</title><rect x="509.4" y="229" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="512.42" y="239.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (8 samples, 0.02%; -0.00%)</title><rect x="591.5" y="405" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="594.53" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (4 samples, 0.01%; +0.01%)</title><rect x="931.0" y="373" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="934.04" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (4 samples, 0.01%; +0.01%)</title><rect x="155.3" y="181" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="158.31" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (46 samples, 0.10%; +0.00%)</title><rect x="1148.5" y="485" width="1.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1151.52" y="495.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (997 samples, 2.12%; +0.04%)</title><rect x="783.4" y="277" width="25.0" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="786.42" y="287.5" >a..</text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (5 samples, 0.01%; -0.00%)</title><rect x="1125.6" y="405" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1128.62" y="415.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (45 samples, 0.10%; +0.00%)</title><rect x="917.8" y="357" width="1.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="920.77" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (10 samples, 0.02%; -0.00%)</title><rect x="667.5" y="469" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="670.47" y="479.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (28 samples, 0.06%; -0.00%)</title><rect x="334.5" y="181" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="337.54" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (30 samples, 0.06%; +0.01%)</title><rect x="784.8" y="229" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="787.78" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (4 samples, 0.01%; +0.00%)</title><rect x="19.8" y="277" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="22.79" y="287.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (8 samples, 0.02%; +0.01%)</title><rect x="265.8" y="341" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="268.76" y="351.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (6 samples, 0.01%; +0.01%)</title><rect x="411.4" y="245" width="0.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="414.39" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (9 samples, 0.02%; -0.01%)</title><rect x="792.5" y="197" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="795.46" y="207.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (193 samples, 0.41%; +0.00%)</title><rect x="747.9" y="421" width="4.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="750.90" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (6 samples, 0.01%; +0.01%)</title><rect x="1020.5" y="213" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1023.46" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (16 samples, 0.03%; +0.01%)</title><rect x="599.1" y="437" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="602.09" y="447.5" ></text>
</g>
<g >
<title>operator new (39 samples, 0.08%; -0.00%)</title><rect x="840.7" y="421" width="0.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="843.67" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (4 samples, 0.01%; 0.00%)</title><rect x="18.8" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.76" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (13 samples, 0.03%; +0.00%)</title><rect x="1101.2" y="341" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1104.24" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (13 samples, 0.03%; 0.00%)</title><rect x="23.7" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.69" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (18 samples, 0.04%; -0.02%)</title><rect x="156.4" y="165" width="0.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="159.39" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (34 samples, 0.07%; +0.01%)</title><rect x="635.8" y="485" width="0.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="638.76" y="495.5" ></text>
</g>
<g >
<title>auth::resource::parent (113 samples, 0.24%; -0.00%)</title><rect x="776.9" y="325" width="2.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="779.89" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.00%)</title><rect x="652.5" y="437" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="655.53" y="447.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (8 samples, 0.02%; 0.00%)</title><rect x="23.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.77" y="479.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (56 samples, 0.12%; +0.00%)</title><rect x="306.7" y="229" width="1.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="309.68" y="239.5" ></text>
</g>
<g >
<title>operator new (51 samples, 0.11%; -0.01%)</title><rect x="750.9" y="405" width="1.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="753.88" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (22 samples, 0.05%; +0.00%)</title><rect x="577.5" y="373" width="0.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="580.53" y="383.5" ></text>
</g>
<g >
<title>database::query (7 samples, 0.01%; +0.01%)</title><rect x="1001.7" y="277" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1004.68" y="287.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%; +0.00%)</title><rect x="932.9" y="373" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="935.92" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (915 samples, 1.94%; -0.03%)</title><rect x="902.6" y="405" width="22.9" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="905.55" y="415.5" >c..</text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (14 samples, 0.03%; -0.00%)</title><rect x="612.8" y="389" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="615.75" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="454.2" y="277" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="457.20" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (174 samples, 0.37%; +0.02%)</title><rect x="723.2" y="357" width="4.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="726.20" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (67 samples, 0.14%; +0.04%)</title><rect x="939.1" y="357" width="1.6" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="942.05" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (12 samples, 0.03%; -0.01%)</title><rect x="415.9" y="277" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="418.95" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (19 samples, 0.04%; -0.00%)</title><rect x="67.8" y="389" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="70.77" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (20 samples, 0.04%; +0.01%)</title><rect x="599.5" y="437" width="0.5" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="602.49" y="447.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (69 samples, 0.15%; 0.00%)</title><rect x="241.5" y="197" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="244.47" y="207.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.01%; 0.00%)</title><rect x="19.3" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.34" y="271.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (64 samples, 0.14%; +0.01%)</title><rect x="155.4" y="213" width="1.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="158.44" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%; -0.01%)</title><rect x="961.4" y="373" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="964.40" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (4 samples, 0.01%; +0.00%)</title><rect x="18.8" y="181" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="21.76" y="191.5" ></text>
</g>
<g >
<title>operator new (31 samples, 0.07%; -0.00%)</title><rect x="603.0" y="421" width="0.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="606.02" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (10 samples, 0.02%; 0.00%)</title><rect x="45.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.35" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (4 samples, 0.01%; -0.00%)</title><rect x="758.8" y="341" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="761.82" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (33 samples, 0.07%; +0.02%)</title><rect x="881.7" y="373" width="0.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="884.73" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (174 samples, 0.37%; +0.00%)</title><rect x="249.3" y="245" width="4.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="252.26" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (12 samples, 0.03%; -0.00%)</title><rect x="1101.6" y="357" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1104.64" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="1049.1" y="293" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1052.12" y="303.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (4 samples, 0.01%; -0.01%)</title><rect x="1096.2" y="309" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1099.15" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (11 samples, 0.02%; -0.02%)</title><rect x="1136.1" y="421" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1139.06" y="431.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (7 samples, 0.01%; +0.01%)</title><rect x="521.4" y="325" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="524.39" y="335.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (4,312 samples, 9.15%; -0.03%)</title><rect x="426.6" y="405" width="107.9" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="429.59" y="415.5" >mutation_sour..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.01%; +0.00%)</title><rect x="635.2" y="469" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="638.18" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.01%)</title><rect x="75.2" y="453" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="78.21" y="463.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (19 samples, 0.04%; +0.00%)</title><rect x="1027.2" y="133" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1030.16" y="143.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (52 samples, 0.11%; -0.00%)</title><rect x="736.0" y="325" width="1.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="738.99" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (170 samples, 0.36%; -0.01%)</title><rect x="667.0" y="485" width="4.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="670.00" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (12 samples, 0.03%; +0.01%)</title><rect x="1142.5" y="501" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1145.49" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (41 samples, 0.09%; +0.00%)</title><rect x="881.6" y="389" width="1.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="884.58" y="399.5" ></text>
</g>
<g >
<title>seastar::app_template::run (46,006 samples, 97.60%; 0.00%)</title><rect x="24.1" y="581" width="1151.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.07" y="591.5" >seastar::app_template::run</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="672.2" y="469" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="675.23" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (38 samples, 0.08%; -0.01%)</title><rect x="495.2" y="277" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="498.18" y="287.5" ></text>
</g>
<g >
<title>operator delete (28 samples, 0.06%; 0.00%)</title><rect x="694.4" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.36" y="495.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (198 samples, 0.42%; +0.00%)</title><rect x="17.0" y="437" width="4.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="19.96" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (14 samples, 0.03%; +0.01%)</title><rect x="1074.0" y="293" width="0.3" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="1076.95" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (6 samples, 0.01%; -0.01%)</title><rect x="265.6" y="341" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="268.61" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (8 samples, 0.02%; -0.01%)</title><rect x="837.2" y="389" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="840.19" y="399.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (5 samples, 0.01%; -0.00%)</title><rect x="18.4" y="245" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="21.41" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (68 samples, 0.14%; +0.02%)</title><rect x="245.3" y="197" width="1.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="248.33" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="680.1" y="453" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="683.09" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="503.2" y="229" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="506.21" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (11 samples, 0.02%; 0.00%)</title><rect x="934.5" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="937.49" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (104 samples, 0.22%; -0.01%)</title><rect x="850.6" y="389" width="2.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="853.64" y="399.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (32 samples, 0.07%; -0.00%)</title><rect x="1140.9" y="357" width="0.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1143.89" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (11 samples, 0.02%; +0.01%)</title><rect x="633.5" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="636.53" y="495.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (59 samples, 0.13%; -0.01%)</title><rect x="10.3" y="581" width="1.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="13.28" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.01%)</title><rect x="411.5" y="245" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="414.54" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (9 samples, 0.02%; +0.02%)</title><rect x="950.6" y="373" width="0.2" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="953.57" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (53 samples, 0.11%; 0.00%)</title><rect x="17.3" y="341" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.31" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.01%; +0.01%)</title><rect x="613.2" y="421" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="616.20" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (19 samples, 0.04%; +0.01%)</title><rect x="301.7" y="261" width="0.5" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="304.73" y="271.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (3,344 samples, 7.09%; +0.04%)</title><rect x="308.6" y="229" width="83.7" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="311.64" y="239.5" >compact_m..</text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (27 samples, 0.06%; 0.00%)</title><rect x="1097.3" y="341" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1100.26" y="351.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (23 samples, 0.05%; -0.00%)</title><rect x="425.2" y="421" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="428.21" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (27 samples, 0.06%; +0.00%)</title><rect x="138.9" y="229" width="0.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="141.92" y="239.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (7 samples, 0.01%; +0.00%)</title><rect x="18.1" y="245" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="21.09" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (9 samples, 0.02%; -0.00%)</title><rect x="219.7" y="149" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="222.67" y="159.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (15 samples, 0.03%; +0.02%)</title><rect x="503.5" y="213" width="0.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="506.46" y="223.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (7 samples, 0.01%; 0.00%)</title><rect x="1173.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1176.78" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.01%; 0.00%)</title><rect x="446.0" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="449.01" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (6 samples, 0.01%; +0.01%)</title><rect x="937.7" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="940.75" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; +0.01%)</title><rect x="1047.6" y="181" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1050.62" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.01%; +0.00%)</title><rect x="295.7" y="293" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="298.72" y="303.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (40 samples, 0.08%; -0.01%)</title><rect x="824.5" y="309" width="1.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="827.48" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (704 samples, 1.49%; +0.04%)</title><rect x="494.1" y="293" width="17.6" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="497.08" y="303.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (8 samples, 0.02%; +0.00%)</title><rect x="311.9" y="197" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="314.87" y="207.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (14 samples, 0.03%; 0.00%)</title><rect x="525.8" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="528.77" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (9 samples, 0.02%; -0.01%)</title><rect x="263.2" y="325" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="266.23" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (9 samples, 0.02%; 0.00%)</title><rect x="942.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="945.66" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (14 samples, 0.03%; +0.02%)</title><rect x="322.3" y="197" width="0.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="325.25" y="207.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (101 samples, 0.21%; +0.01%)</title><rect x="1132.4" y="421" width="2.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1135.43" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (29 samples, 0.06%; +0.06%)</title><rect x="413.1" y="277" width="0.7" height="15.0" fill="rgb(255,108,108)" rx="2" ry="2" />
<text  x="416.12" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (16 samples, 0.03%; +0.03%)</title><rect x="1027.6" y="165" width="0.4" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="1030.64" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (7 samples, 0.01%; 0.00%)</title><rect x="687.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.50" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.01%; -0.01%)</title><rect x="422.3" y="357" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="425.33" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (5 samples, 0.01%; +0.00%)</title><rect x="641.0" y="469" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="643.99" y="479.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; +0.01%)</title><rect x="666.2" y="469" width="0.6" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="669.25" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (15 samples, 0.03%; +0.00%)</title><rect x="742.5" y="277" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="745.52" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (10 samples, 0.02%; 0.00%)</title><rect x="143.4" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="146.40" y="287.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (165 samples, 0.35%; -0.01%)</title><rect x="503.3" y="229" width="4.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="506.34" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; 0.00%)</title><rect x="1074.7" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1077.65" y="335.5" ></text>
</g>
<g >
<title>operator delete (49 samples, 0.10%; +0.03%)</title><rect x="571.7" y="357" width="1.2" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="574.68" y="367.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (6 samples, 0.01%; 0.00%)</title><rect x="46.5" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.50" y="463.5" ></text>
</g>
<g >
<title>reader_permit::signal (5 samples, 0.01%; +0.00%)</title><rect x="162.1" y="229" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="165.15" y="239.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (7 samples, 0.01%; -0.01%)</title><rect x="893.8" y="277" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="896.77" y="287.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (859 samples, 1.82%; +0.05%)</title><rect x="490.7" y="309" width="21.5" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="493.70" y="319.5" >s..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (15 samples, 0.03%; +0.03%)</title><rect x="252.0" y="197" width="0.4" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="255.01" y="207.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (33 samples, 0.07%; -0.01%)</title><rect x="764.6" y="357" width="0.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="767.58" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (13 samples, 0.03%; +0.00%)</title><rect x="18.0" y="261" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="20.96" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%; +0.00%)</title><rect x="1123.6" y="421" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1126.59" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (4 samples, 0.01%; +0.00%)</title><rect x="169.5" y="197" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="172.53" y="207.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (4 samples, 0.01%; +0.01%)</title><rect x="579.2" y="405" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="582.21" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (22 samples, 0.05%; +0.01%)</title><rect x="412.3" y="229" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="415.34" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (14 samples, 0.03%; +0.01%)</title><rect x="1106.4" y="373" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1109.39" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (5 samples, 0.01%; -0.02%)</title><rect x="1042.5" y="277" width="0.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1045.46" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (5 samples, 0.01%; +0.00%)</title><rect x="1034.8" y="245" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1037.80" y="255.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.01%; -0.01%)</title><rect x="490.0" y="309" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="493.00" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (269 samples, 0.57%; +0.00%)</title><rect x="224.1" y="229" width="6.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="227.05" y="239.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (39 samples, 0.08%; -0.01%)</title><rect x="749.8" y="373" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="752.76" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (4 samples, 0.01%; +0.00%)</title><rect x="412.9" y="277" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="415.90" y="287.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (13 samples, 0.03%; +0.01%)</title><rect x="672.4" y="485" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="675.41" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (24 samples, 0.05%; 0.00%)</title><rect x="741.4" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="744.45" y="303.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (20 samples, 0.04%; -0.04%)</title><rect x="235.3" y="245" width="0.5" height="15.0" fill="rgb(143,143,255)" rx="2" ry="2" />
<text  x="238.34" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (10 samples, 0.02%; -0.00%)</title><rect x="40.8" y="437" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="43.84" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (11 samples, 0.02%; +0.02%)</title><rect x="149.8" y="245" width="0.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="152.83" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (6 samples, 0.01%; -0.00%)</title><rect x="918.7" y="341" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="921.75" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.01%; -0.00%)</title><rect x="741.3" y="277" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="744.30" y="287.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (5 samples, 0.01%; 0.00%)</title><rect x="1094.5" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1097.53" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (32 samples, 0.07%; +0.04%)</title><rect x="151.3" y="229" width="0.8" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="154.28" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (5 samples, 0.01%; +0.00%)</title><rect x="143.3" y="277" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="146.27" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (111 samples, 0.24%; +0.03%)</title><rect x="800.2" y="133" width="2.8" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="803.25" y="143.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (2,865 samples, 6.08%; -0.02%)</title><rect x="162.5" y="245" width="71.8" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="165.55" y="255.5" >partitio..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (9 samples, 0.02%; +0.01%)</title><rect x="74.5" y="453" width="0.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="77.46" y="463.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (548 samples, 1.16%; -0.01%)</title><rect x="732.4" y="405" width="13.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="735.41" y="415.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (12 samples, 0.03%; -0.01%)</title><rect x="1115.3" y="389" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1118.28" y="399.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.01%; 0.00%)</title><rect x="23.2" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.19" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (7 samples, 0.01%; +0.01%)</title><rect x="550.3" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="553.32" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (14 samples, 0.03%; +0.00%)</title><rect x="235.8" y="245" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="238.84" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (5 samples, 0.01%; -0.01%)</title><rect x="262.3" y="309" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="265.28" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (18 samples, 0.04%; -0.01%)</title><rect x="978.9" y="261" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="981.93" y="271.5" ></text>
</g>
<g >
<title>operator new (88 samples, 0.19%; -0.00%)</title><rect x="1116.5" y="357" width="2.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1119.51" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (4 samples, 0.01%; +0.00%)</title><rect x="901.2" y="373" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="904.15" y="383.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (5 samples, 0.01%; +0.01%)</title><rect x="1135.6" y="421" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1138.55" y="431.5" ></text>
</g>
<g >
<title>operator new (37 samples, 0.08%; +0.00%)</title><rect x="899.0" y="325" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="902.00" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (8 samples, 0.02%; +0.01%)</title><rect x="955.2" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="958.25" y="399.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (9 samples, 0.02%; +0.01%)</title><rect x="409.2" y="261" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="412.19" y="271.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (10 samples, 0.02%; +0.01%)</title><rect x="886.9" y="293" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="889.88" y="303.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;dht::token const&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, db::read_repair_decision&amp;&gt; (5 samples, 0.01%; +0.00%)</title><rect x="1064.6" y="341" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1067.61" y="351.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (25 samples, 0.05%; +0.01%)</title><rect x="702.7" y="421" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="705.75" y="431.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (123 samples, 0.26%; +0.01%)</title><rect x="527.7" y="293" width="3.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="530.69" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (119 samples, 0.25%; +0.05%)</title><rect x="451.1" y="277" width="3.0" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="454.10" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (38 samples, 0.08%; +0.01%)</title><rect x="930.9" y="389" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="933.89" y="399.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (27 samples, 0.06%; -0.00%)</title><rect x="801.5" y="101" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="804.52" y="111.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (24 samples, 0.05%; -0.02%)</title><rect x="831.1" y="405" width="0.6" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="834.09" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (4 samples, 0.01%; 0.00%)</title><rect x="23.8" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="335.5" ></text>
</g>
<g >
<title>operator delete (44 samples, 0.09%; +0.05%)</title><rect x="1123.8" y="421" width="1.1" height="15.0" fill="rgb(255,133,133)" rx="2" ry="2" />
<text  x="1126.76" y="431.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (7 samples, 0.01%; +0.01%)</title><rect x="1096.7" y="325" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1099.70" y="335.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (12 samples, 0.03%; 0.00%)</title><rect x="16.1" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.13" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.01%)</title><rect x="404.7" y="181" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="407.71" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (12 samples, 0.03%; +0.02%)</title><rect x="1068.7" y="325" width="0.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1071.67" y="335.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; -0.00%)</title><rect x="618.1" y="389" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="621.09" y="399.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (9 samples, 0.02%; -0.01%)</title><rect x="1095.3" y="309" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1098.30" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (10 samples, 0.02%; -0.00%)</title><rect x="448.4" y="293" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="451.42" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (29 samples, 0.06%; -0.01%)</title><rect x="689.5" y="453" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="692.45" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (9 samples, 0.02%; -0.01%)</title><rect x="1031.8" y="229" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1034.80" y="239.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (6 samples, 0.01%; 0.00%)</title><rect x="17.1" y="421" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.06" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (6 samples, 0.01%; -0.00%)</title><rect x="24.6" y="517" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="27.57" y="527.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (54 samples, 0.11%; -0.01%)</title><rect x="528.5" y="261" width="1.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="531.47" y="271.5" ></text>
</g>
<g >
<title>schema_registry::get (141 samples, 0.30%; -0.01%)</title><rect x="969.1" y="357" width="3.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="972.06" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (4 samples, 0.01%; +0.01%)</title><rect x="857.1" y="421" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="860.12" y="431.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%; 0.00%)</title><rect x="1156.5" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1159.53" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (76 samples, 0.16%; -0.00%)</title><rect x="19.0" y="357" width="1.9" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="22.01" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (10 samples, 0.02%; 0.00%)</title><rect x="804.6" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="807.63" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (10 samples, 0.02%; 0.00%)</title><rect x="812.7" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="815.71" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (14 samples, 0.03%; -0.01%)</title><rect x="891.5" y="293" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="894.54" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (4 samples, 0.01%; +0.01%)</title><rect x="829.2" y="421" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="832.23" y="431.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (12 samples, 0.03%; -0.01%)</title><rect x="800.9" y="117" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="803.95" y="127.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (20 samples, 0.04%; 0.00%)</title><rect x="846.3" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="849.31" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (6 samples, 0.01%; 0.00%)</title><rect x="862.7" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.65" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::take (4 samples, 0.01%; +0.01%)</title><rect x="698.8" y="453" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="701.77" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="1137.2" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1140.23" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (23 samples, 0.05%; +0.00%)</title><rect x="793.0" y="165" width="0.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="796.04" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (91 samples, 0.19%; +0.01%)</title><rect x="977.3" y="309" width="2.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="980.25" y="319.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::touch (4 samples, 0.01%; +0.00%)</title><rect x="737.4" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="740.37" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (32 samples, 0.07%; -0.01%)</title><rect x="669.1" y="437" width="0.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="672.08" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (35 samples, 0.07%; 0.00%)</title><rect x="767.6" y="373" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="770.58" y="383.5" ></text>
</g>
<g >
<title>create_partitions (275 samples, 0.58%; 0.00%)</title><rect x="16.7" y="533" width="6.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.66" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5,029 samples, 10.67%; -0.01%)</title><rect x="293.1" y="325" width="125.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="296.07" y="335.5" >seastar::intern..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (71 samples, 0.15%; -0.02%)</title><rect x="1155.5" y="453" width="1.8" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="1158.53" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (208 samples, 0.44%; -0.03%)</title><rect x="153.0" y="229" width="5.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="156.01" y="239.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (4 samples, 0.01%; +0.00%)</title><rect x="568.6" y="341" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="571.57" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (34 samples, 0.07%; +0.01%)</title><rect x="649.6" y="469" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="652.63" y="479.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (616 samples, 1.31%; 0.00%)</title><rect x="1077.3" y="293" width="15.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1080.30" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (51 samples, 0.11%; -0.00%)</title><rect x="581.5" y="421" width="1.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="584.51" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (4 samples, 0.01%; +0.00%)</title><rect x="683.3" y="453" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="686.32" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (81 samples, 0.17%; -0.00%)</title><rect x="198.1" y="117" width="2.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="201.14" y="127.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (6 samples, 0.01%; -0.02%)</title><rect x="546.0" y="389" width="0.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="548.99" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (16 samples, 0.03%; 0.00%)</title><rect x="450.7" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="453.69" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (153 samples, 0.32%; -0.00%)</title><rect x="415.1" y="309" width="3.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="418.12" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (21 samples, 0.04%; -0.00%)</title><rect x="632.3" y="485" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="635.28" y="495.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (4 samples, 0.01%; +0.01%)</title><rect x="682.0" y="485" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="684.99" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (10 samples, 0.02%; +0.00%)</title><rect x="580.0" y="405" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="582.99" y="415.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (8 samples, 0.02%; -0.00%)</title><rect x="724.4" y="293" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="727.37" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (12 samples, 0.03%; -0.01%)</title><rect x="76.4" y="453" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="79.36" y="463.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (6 samples, 0.01%; +0.00%)</title><rect x="193.5" y="69" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="196.46" y="79.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (22 samples, 0.05%; +0.00%)</title><rect x="816.5" y="293" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="819.47" y="303.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (13 samples, 0.03%; +0.01%)</title><rect x="802.6" y="69" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="805.65" y="79.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (5 samples, 0.01%; -0.00%)</title><rect x="151.1" y="245" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="154.06" y="255.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (4 samples, 0.01%; 0.00%)</title><rect x="993.8" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="996.80" y="319.5" ></text>
</g>
<g >
<title>operator new (43 samples, 0.09%; -0.00%)</title><rect x="853.4" y="437" width="1.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="856.39" y="447.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (22 samples, 0.05%; +0.02%)</title><rect x="587.8" y="405" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="590.82" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (4 samples, 0.01%; 0.00%)</title><rect x="1139.0" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.03" y="447.5" ></text>
</g>
<g >
<title>operator new (36 samples, 0.08%; -0.00%)</title><rect x="213.5" y="165" width="0.9" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="216.49" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (4 samples, 0.01%; 0.00%)</title><rect x="162.4" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="165.45" y="239.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (99 samples, 0.21%; -0.00%)</title><rect x="784.5" y="261" width="2.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="787.53" y="271.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (8 samples, 0.02%; 0.00%)</title><rect x="1030.6" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1033.59" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (6 samples, 0.01%; -0.01%)</title><rect x="984.6" y="261" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="987.56" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (18 samples, 0.04%; +0.02%)</title><rect x="897.2" y="357" width="0.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="900.20" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (5 samples, 0.01%; -0.00%)</title><rect x="250.2" y="213" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="253.19" y="223.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (71 samples, 0.15%; +0.00%)</title><rect x="948.5" y="357" width="1.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="951.46" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (10,673 samples, 22.64%; -0.05%)</title><rect x="871.8" y="437" width="267.2" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="874.81" y="447.5" >cql3::statements::select_statement:..</text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (33 samples, 0.07%; +0.00%)</title><rect x="524.4" y="277" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="527.41" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (5 samples, 0.01%; -0.00%)</title><rect x="425.5" y="405" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="428.46" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (6 samples, 0.01%; +0.01%)</title><rect x="408.5" y="213" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="411.49" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (15 samples, 0.03%; -0.00%)</title><rect x="77.1" y="453" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="80.11" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (13 samples, 0.03%; +0.00%)</title><rect x="779.4" y="293" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="782.39" y="303.5" ></text>
</g>
<g >
<title>compound_type&lt; (53 samples, 0.11%; -0.06%)</title><rect x="539.4" y="357" width="1.3" height="15.0" fill="rgb(112,112,255)" rx="2" ry="2" />
<text  x="542.36" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (16 samples, 0.03%; +0.01%)</title><rect x="795.8" y="133" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="798.82" y="143.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.00%)</title><rect x="828.7" y="405" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="831.71" y="415.5" ></text>
</g>
<g >
<title>database::has_keyspace (101 samples, 0.21%; 0.00%)</title><rect x="825.8" y="357" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="828.80" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (4 samples, 0.01%; +0.00%)</title><rect x="975.2" y="357" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="978.25" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (90 samples, 0.19%; +0.01%)</title><rect x="543.1" y="357" width="2.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="546.06" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; 0.00%)</title><rect x="413.0" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="416.00" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (9 samples, 0.02%; +0.00%)</title><rect x="636.6" y="485" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="639.63" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (12 samples, 0.03%; -0.00%)</title><rect x="1021.7" y="197" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1024.73" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (29 samples, 0.06%; 0.00%)</title><rect x="682.4" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.37" y="415.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.01%; -0.01%)</title><rect x="525.2" y="277" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="528.24" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (76 samples, 0.16%; -0.03%)</title><rect x="958.7" y="357" width="1.9" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="961.68" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (179 samples, 0.38%; 0.00%)</title><rect x="17.3" y="389" width="4.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.31" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (4 samples, 0.01%; 0.00%)</title><rect x="423.8" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="426.76" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (6 samples, 0.01%; -0.00%)</title><rect x="974.8" y="357" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="977.77" y="367.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (9 samples, 0.02%; +0.01%)</title><rect x="859.8" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="862.80" y="495.5" ></text>
</g>
<g >
<title>__tls_init (11 samples, 0.02%; +0.01%)</title><rect x="147.7" y="229" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="150.70" y="239.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (9 samples, 0.02%; +0.01%)</title><rect x="767.9" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="770.85" y="367.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (4 samples, 0.01%; -0.01%)</title><rect x="673.5" y="469" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="676.46" y="479.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; +0.01%)</title><rect x="823.6" y="261" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="826.63" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (4 samples, 0.01%; +0.00%)</title><rect x="707.9" y="485" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="710.85" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (12 samples, 0.03%; +0.02%)</title><rect x="767.1" y="341" width="0.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="770.13" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.01%)</title><rect x="58.7" y="437" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="61.69" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.01%; +0.01%)</title><rect x="535.9" y="405" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="538.85" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (9 samples, 0.02%; -0.00%)</title><rect x="1148.0" y="485" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1151.00" y="495.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (9 samples, 0.02%; -0.01%)</title><rect x="209.8" y="117" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="212.76" y="127.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (58 samples, 0.12%; +0.00%)</title><rect x="239.0" y="181" width="1.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="242.00" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (19 samples, 0.04%; +0.01%)</title><rect x="707.1" y="453" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="710.08" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (291 samples, 0.62%; -0.01%)</title><rect x="569.9" y="373" width="7.3" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="572.92" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;range_tombstone*&gt;::allocate (4 samples, 0.01%; +0.00%)</title><rect x="541.4" y="373" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="544.39" y="383.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::update_parameters::make_cell (4 samples, 0.01%; 0.00%)</title><rect x="862.9" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.88" y="287.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::set_latency (4 samples, 0.01%; -0.01%)</title><rect x="619.5" y="437" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="622.49" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (6 samples, 0.01%; +0.01%)</title><rect x="747.8" y="389" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="750.75" y="399.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (6 samples, 0.01%; -0.00%)</title><rect x="839.3" y="341" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="842.27" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (6 samples, 0.01%; 0.00%)</title><rect x="23.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (18 samples, 0.04%; -0.01%)</title><rect x="42.0" y="469" width="0.4" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="44.97" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (21 samples, 0.04%; +0.01%)</title><rect x="557.1" y="277" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="560.08" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (85 samples, 0.18%; -0.00%)</title><rect x="817.6" y="389" width="2.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="820.62" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%; -0.02%)</title><rect x="134.5" y="245" width="0.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="137.51" y="255.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (27 samples, 0.06%; +0.01%)</title><rect x="222.6" y="165" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="225.60" y="175.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (31 samples, 0.07%; +0.00%)</title><rect x="1140.9" y="341" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1143.89" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (8 samples, 0.02%; -0.00%)</title><rect x="212.4" y="85" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="215.41" y="95.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (9 samples, 0.02%; -0.01%)</title><rect x="698.2" y="453" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="701.16" y="463.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (27 samples, 0.06%; 0.00%)</title><rect x="391.5" y="213" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="394.52" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (5 samples, 0.01%; +0.01%)</title><rect x="1106.6" y="357" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1109.62" y="367.5" ></text>
</g>
<g >
<title>database::find_uuid (151 samples, 0.32%; -0.00%)</title><rect x="821.9" y="357" width="3.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="824.87" y="367.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (4 samples, 0.01%; 0.00%)</title><rect x="1141.3" y="149" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.34" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="562.1" y="261" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="565.14" y="271.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; +0.00%)</title><rect x="786.7" y="213" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="789.73" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (23 samples, 0.05%; -0.01%)</title><rect x="670.0" y="453" width="0.5" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="672.95" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (34 samples, 0.07%; -0.00%)</title><rect x="766.1" y="341" width="0.9" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="769.13" y="351.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (7 samples, 0.01%; +0.01%)</title><rect x="687.9" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="690.88" y="447.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (19 samples, 0.04%; +0.01%)</title><rect x="336.0" y="181" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="338.97" y="191.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (8 samples, 0.02%; -0.02%)</title><rect x="142.4" y="261" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="145.42" y="271.5" ></text>
</g>
<g >
<title>operator new (36 samples, 0.08%; +0.00%)</title><rect x="293.5" y="293" width="0.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="296.54" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (35 samples, 0.07%; +0.00%)</title><rect x="792.8" y="197" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="795.76" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (18 samples, 0.04%; -0.00%)</title><rect x="779.3" y="309" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="782.27" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (160 samples, 0.34%; -0.00%)</title><rect x="249.4" y="229" width="4.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="252.43" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (64 samples, 0.14%; -0.00%)</title><rect x="811.4" y="325" width="1.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="814.41" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (5 samples, 0.01%; 0.00%)</title><rect x="23.8" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="367.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (7 samples, 0.01%; +0.01%)</title><rect x="704.6" y="437" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="707.57" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,148 samples, 4.56%; -0.05%)</title><rect x="169.7" y="197" width="53.8" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="172.68" y="207.5" >parti..</text>
</g>
<g >
<title>service::storage_proxy::do_query (5,992 samples, 12.71%; -0.07%)</title><rect x="955.4" y="389" width="150.0" height="15.0" fill="rgb(91,91,255)" rx="2" ry="2" />
<text  x="958.45" y="399.5" >service::storage_pr..</text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (8 samples, 0.02%; +0.00%)</title><rect x="45.4" y="469" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="48.40" y="479.5" ></text>
</g>
<g >
<title>database::has_keyspace (139 samples, 0.29%; -0.00%)</title><rect x="844.4" y="405" width="3.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="847.35" y="415.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (83 samples, 0.18%; 0.00%)</title><rect x="153.4" y="213" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="156.36" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.01%; +0.00%)</title><rect x="604.0" y="421" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="607.02" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (9 samples, 0.02%; +0.01%)</title><rect x="548.5" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="551.47" y="431.5" ></text>
</g>
<g >
<title>compound_type&lt; (171 samples, 0.36%; +0.02%)</title><rect x="920.0" y="373" width="4.3" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="922.98" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (6 samples, 0.01%; +0.00%)</title><rect x="862.7" y="357" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="865.65" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (25 samples, 0.05%; -0.00%)</title><rect x="606.7" y="437" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="609.67" y="447.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (9 samples, 0.02%; -0.00%)</title><rect x="53.5" y="469" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="56.46" y="479.5" ></text>
</g>
<g >
<title>malloc (22 samples, 0.05%; 0.00%)</title><rect x="593.0" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="595.95" y="383.5" ></text>
</g>
<g >
<title>operator delete (14 samples, 0.03%; -0.01%)</title><rect x="40.3" y="453" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="43.34" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (11 samples, 0.02%; -0.00%)</title><rect x="264.7" y="309" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="267.73" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (7 samples, 0.01%; +0.00%)</title><rect x="1142.3" y="485" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1145.26" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (14 samples, 0.03%; -0.00%)</title><rect x="627.4" y="485" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="630.40" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (13 samples, 0.03%; -0.01%)</title><rect x="529.5" y="245" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="532.50" y="255.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (16 samples, 0.03%; +0.02%)</title><rect x="636.9" y="485" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="639.86" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (7 samples, 0.01%; +0.01%)</title><rect x="484.0" y="325" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="486.96" y="335.5" ></text>
</g>
<g >
<title>std::type_info::operator== (7 samples, 0.01%; +0.01%)</title><rect x="1042.3" y="261" width="0.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="1045.28" y="271.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (11 samples, 0.02%; -0.00%)</title><rect x="850.0" y="389" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="853.01" y="399.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (25 samples, 0.05%; +0.00%)</title><rect x="802.4" y="85" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="805.37" y="95.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (8 samples, 0.02%; 0.00%)</title><rect x="1140.6" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.56" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (22 samples, 0.05%; -0.01%)</title><rect x="1025.4" y="149" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1028.36" y="159.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (38 samples, 0.08%; -0.00%)</title><rect x="618.0" y="405" width="0.9" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="620.99" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (41 samples, 0.09%; +0.00%)</title><rect x="790.1" y="165" width="1.0" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="793.11" y="175.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (9 samples, 0.02%; +0.01%)</title><rect x="250.4" y="213" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="253.41" y="223.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (25 samples, 0.05%; -0.01%)</title><rect x="793.0" y="181" width="0.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="795.99" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (8 samples, 0.02%; +0.01%)</title><rect x="553.7" y="293" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="556.65" y="303.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (4 samples, 0.01%; +0.01%)</title><rect x="895.6" y="325" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="898.64" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (28 samples, 0.06%; +0.00%)</title><rect x="20.0" y="293" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="23.04" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (5 samples, 0.01%; +0.01%)</title><rect x="1109.0" y="421" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1112.02" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,360 samples, 9.25%; -0.01%)</title><rect x="145.0" y="277" width="109.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="148.02" y="287.5" >logalloc::all..</text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (28 samples, 0.06%; -0.01%)</title><rect x="1026.9" y="149" width="0.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1029.94" y="159.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="173.1" y="133" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="176.14" y="143.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::take_value (5 samples, 0.01%; +0.00%)</title><rect x="737.6" y="373" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="740.59" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (5 samples, 0.01%; +0.01%)</title><rect x="399.4" y="229" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="402.35" y="239.5" ></text>
</g>
<g >
<title>[unknown] (561 samples, 1.19%; 0.00%)</title><rect x="10.0" y="629" width="14.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.03" y="639.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (11 samples, 0.02%; -0.00%)</title><rect x="1060.1" y="261" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1063.11" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (20 samples, 0.04%; +0.01%)</title><rect x="616.9" y="373" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="619.93" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (57 samples, 0.12%; -0.00%)</title><rect x="275.1" y="309" width="1.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="278.09" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::forward_to (4 samples, 0.01%; 0.00%)</title><rect x="674.6" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="677.63" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (4 samples, 0.01%; -0.01%)</title><rect x="716.9" y="437" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="719.91" y="447.5" ></text>
</g>
<g >
<title>operator delete (21 samples, 0.04%; 0.00%)</title><rect x="51.6" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.60" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (4 samples, 0.01%; 0.00%)</title><rect x="408.2" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="411.21" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (4 samples, 0.01%; 0.00%)</title><rect x="34.0" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.01" y="495.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (333 samples, 0.71%; +0.00%)</title><rect x="475.2" y="261" width="8.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="478.20" y="271.5" ></text>
</g>
<g >
<title>posix_memalign (8 samples, 0.02%; +0.01%)</title><rect x="201.5" y="101" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="204.52" y="111.5" ></text>
</g>
<g >
<title>std::type_info::operator== (5 samples, 0.01%; +0.00%)</title><rect x="1172.4" y="405" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1175.40" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (4 samples, 0.01%; +0.00%)</title><rect x="778.2" y="293" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="781.22" y="303.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (22 samples, 0.05%; 0.00%)</title><rect x="1140.0" y="309" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.01" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (7 samples, 0.01%; 0.00%)</title><rect x="648.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="651.00" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (36 samples, 0.08%; -0.01%)</title><rect x="766.1" y="357" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="769.08" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (10 samples, 0.02%; -0.00%)</title><rect x="876.8" y="421" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="879.85" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="417.8" y="245" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="420.75" y="255.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (12 samples, 0.03%; +0.01%)</title><rect x="393.7" y="229" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="396.72" y="239.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (57 samples, 0.12%; -0.00%)</title><rect x="792.2" y="213" width="1.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="795.21" y="223.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (33 samples, 0.07%; 0.00%)</title><rect x="1140.9" y="421" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.89" y="431.5" ></text>
</g>
<g >
<title>seastar::app_template::run (46,006 samples, 97.60%; 0.00%)</title><rect x="24.1" y="597" width="1151.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.07" y="607.5" >seastar::app_template::run</text>
</g>
<g >
<title>seastar::internal::promise_base::clear (18 samples, 0.04%; +0.02%)</title><rect x="860.2" y="501" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="863.22" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (42 samples, 0.09%; -0.02%)</title><rect x="228.8" y="149" width="1.0" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="231.76" y="159.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (19 samples, 0.04%; +0.00%)</title><rect x="21.0" y="341" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="23.99" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (139 samples, 0.29%; -0.02%)</title><rect x="409.4" y="261" width="3.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="412.42" y="271.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (5,042 samples, 10.70%; +0.01%)</title><rect x="292.9" y="341" width="126.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="295.87" y="351.5" >seastar::futuri..</text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (4 samples, 0.01%; +0.00%)</title><rect x="230.4" y="197" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="233.38" y="207.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (19 samples, 0.04%; +0.02%)</title><rect x="698.9" y="453" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="701.87" y="463.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (9 samples, 0.02%; -0.01%)</title><rect x="233.3" y="229" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="236.31" y="239.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (6 samples, 0.01%; -0.01%)</title><rect x="497.8" y="261" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="500.76" y="271.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%; +0.00%)</title><rect x="529.8" y="261" width="0.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="532.85" y="271.5" ></text>
</g>
<g >
<title>schema::column_at (26 samples, 0.06%; -0.01%)</title><rect x="206.5" y="133" width="0.7" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="209.53" y="143.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (425 samples, 0.90%; -0.01%)</title><rect x="683.6" y="501" width="10.6" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="686.57" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (7 samples, 0.01%; -0.01%)</title><rect x="448.7" y="293" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="451.74" y="303.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (4 samples, 0.01%; +0.00%)</title><rect x="588.7" y="437" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="591.75" y="447.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (47 samples, 0.10%; 0.00%)</title><rect x="192.3" y="69" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="195.29" y="79.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (8 samples, 0.02%; +0.00%)</title><rect x="531.2" y="325" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="534.17" y="335.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (4 samples, 0.01%; +0.00%)</title><rect x="800.1" y="133" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="803.15" y="143.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (17 samples, 0.04%; +0.00%)</title><rect x="505.5" y="181" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="508.47" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (14 samples, 0.03%; +0.00%)</title><rect x="734.4" y="389" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="737.39" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.01%; +0.01%)</title><rect x="924.1" y="357" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="927.08" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (21 samples, 0.04%; -0.01%)</title><rect x="528.7" y="245" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="531.75" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.00%)</title><rect x="900.4" y="293" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="903.43" y="303.5" ></text>
</g>
<g >
<title>posix_memalign (48 samples, 0.10%; +0.00%)</title><rect x="201.8" y="85" width="1.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="204.80" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (4 samples, 0.01%; 0.00%)</title><rect x="19.8" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.79" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="651.3" y="453" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="654.25" y="463.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (34 samples, 0.07%; -0.03%)</title><rect x="290.9" y="373" width="0.8" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="293.86" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (54 samples, 0.11%; +0.00%)</title><rect x="785.5" y="245" width="1.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="788.53" y="255.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (4 samples, 0.01%; -0.02%)</title><rect x="427.8" y="373" width="0.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="430.76" y="383.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (90 samples, 0.19%; -0.02%)</title><rect x="889.1" y="293" width="2.3" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="892.11" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (32 samples, 0.07%; -0.00%)</title><rect x="1042.7" y="277" width="0.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1045.66" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (7 samples, 0.01%; -0.00%)</title><rect x="862.0" y="373" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="865.03" y="383.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (12 samples, 0.03%; +0.00%)</title><rect x="1131.0" y="389" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1134.00" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (8 samples, 0.02%; -0.00%)</title><rect x="859.5" y="485" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="862.52" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (13 samples, 0.03%; +0.01%)</title><rect x="756.0" y="357" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="759.04" y="367.5" ></text>
</g>
<g >
<title>operator new (83 samples, 0.18%; -0.00%)</title><rect x="543.2" y="341" width="2.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="546.21" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (4 samples, 0.01%; -0.00%)</title><rect x="449.9" y="309" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="452.87" y="319.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (56 samples, 0.12%; -0.01%)</title><rect x="477.4" y="213" width="1.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="480.43" y="223.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (63 samples, 0.13%; +0.00%)</title><rect x="385.2" y="133" width="1.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="388.21" y="143.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.01%; +0.01%)</title><rect x="804.8" y="229" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="807.75" y="239.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (4 samples, 0.01%; -0.00%)</title><rect x="785.8" y="229" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="788.83" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (19 samples, 0.04%; +0.01%)</title><rect x="680.8" y="485" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="683.79" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (19 samples, 0.04%; +0.01%)</title><rect x="1102.3" y="357" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1105.26" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (7 samples, 0.01%; 0.00%)</title><rect x="897.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="900.02" y="367.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (17 samples, 0.04%; 0.00%)</title><rect x="682.5" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.52" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (12 samples, 0.03%; 0.00%)</title><rect x="607.0" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="610.00" y="415.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (78 samples, 0.17%; -0.02%)</title><rect x="892.0" y="293" width="1.9" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="894.99" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (5 samples, 0.01%; +0.01%)</title><rect x="897.9" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="900.95" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (6 samples, 0.01%; -0.00%)</title><rect x="525.6" y="309" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="528.62" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (37 samples, 0.08%; +0.03%)</title><rect x="285.3" y="357" width="0.9" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="288.28" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.00%)</title><rect x="40.5" y="437" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="43.51" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::to_expression (4 samples, 0.01%; 0.00%)</title><rect x="22.1" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.14" y="415.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (1,675 samples, 3.55%; +0.01%)</title><rect x="771.7" y="357" width="41.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="774.71" y="367.5" >ser..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (12 samples, 0.03%; +0.01%)</title><rect x="157.9" y="181" width="0.3" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="160.92" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; +0.01%)</title><rect x="925.2" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="928.21" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="1104.9" y="373" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1107.94" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (79 samples, 0.17%; +0.08%)</title><rect x="1164.1" y="485" width="2.0" height="15.0" fill="rgb(255,84,84)" rx="2" ry="2" />
<text  x="1167.14" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; 0.00%)</title><rect x="653.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="656.63" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (84 samples, 0.18%; -0.01%)</title><rect x="832.5" y="421" width="2.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="835.51" y="431.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::find_bucket_index (4 samples, 0.01%; +0.01%)</title><rect x="595.3" y="421" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="598.28" y="431.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (6 samples, 0.01%; +0.00%)</title><rect x="1048.6" y="261" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1051.62" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (82 samples, 0.17%; +0.04%)</title><rect x="132.6" y="261" width="2.0" height="15.0" fill="rgb(255,143,143)" rx="2" ry="2" />
<text  x="135.58" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (4 samples, 0.01%; +0.00%)</title><rect x="652.7" y="469" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="655.68" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (12 samples, 0.03%; +0.01%)</title><rect x="278.7" y="293" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="281.67" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (38 samples, 0.08%; +0.00%)</title><rect x="785.9" y="229" width="1.0" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="788.93" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="867.5" y="437" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="870.46" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (54 samples, 0.11%; -0.00%)</title><rect x="1155.9" y="437" width="1.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1158.91" y="447.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (34 samples, 0.07%; +0.00%)</title><rect x="1140.9" y="485" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1143.86" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (20 samples, 0.04%; -0.01%)</title><rect x="35.4" y="485" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="38.36" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (25 samples, 0.05%; -0.01%)</title><rect x="1072.4" y="293" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1075.45" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (12 samples, 0.03%; +0.01%)</title><rect x="808.6" y="277" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="811.63" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (123 samples, 0.26%; -0.02%)</title><rect x="503.8" y="213" width="3.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="506.84" y="223.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (458 samples, 0.97%; -0.02%)</title><rect x="1020.0" y="229" width="11.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1022.98" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (25 samples, 0.05%; +0.01%)</title><rect x="1037.7" y="229" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1040.65" y="239.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (35 samples, 0.07%; -0.03%)</title><rect x="914.5" y="325" width="0.9" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="917.49" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (6 samples, 0.01%; +0.00%)</title><rect x="1121.5" y="405" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1124.46" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (35 samples, 0.07%; 0.00%)</title><rect x="1140.0" y="357" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.99" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (84 samples, 0.18%; +0.02%)</title><rect x="480.2" y="197" width="2.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="483.21" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (17 samples, 0.04%; -0.03%)</title><rect x="98.3" y="373" width="0.4" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="101.26" y="383.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (68 samples, 0.14%; -0.00%)</title><rect x="539.3" y="373" width="1.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="542.26" y="383.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (41 samples, 0.09%; +0.00%)</title><rect x="922.9" y="341" width="1.0" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="925.85" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (45 samples, 0.10%; +0.00%)</title><rect x="642.1" y="405" width="1.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="645.14" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (6 samples, 0.01%; 0.00%)</title><rect x="848.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="851.01" y="447.5" ></text>
</g>
<g >
<title>operator new (44 samples, 0.09%; +0.00%)</title><rect x="842.4" y="405" width="1.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="845.43" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (10 samples, 0.02%; +0.02%)</title><rect x="121.3" y="293" width="0.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="124.34" y="303.5" ></text>
</g>
<g >
<title>operator delete (31 samples, 0.07%; -0.06%)</title><rect x="515.5" y="325" width="0.7" height="15.0" fill="rgb(115,115,255)" rx="2" ry="2" />
<text  x="518.45" y="335.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (162 samples, 0.34%; +0.01%)</title><rect x="849.2" y="421" width="4.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="852.23" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (22 samples, 0.05%; +0.01%)</title><rect x="1127.8" y="373" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1130.84" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (5 samples, 0.01%; 0.00%)</title><rect x="497.9" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="500.91" y="271.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::work_item, 128ul&gt;::back_chunk_new (4 samples, 0.01%; +0.01%)</title><rect x="749.7" y="373" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="752.66" y="383.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (33 samples, 0.07%; 0.00%)</title><rect x="790.3" y="149" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="793.31" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (4 samples, 0.01%; +0.00%)</title><rect x="23.8" y="293" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="26.82" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (484 samples, 1.03%; -0.01%)</title><rect x="236.6" y="245" width="12.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="239.57" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (21 samples, 0.04%; -0.01%)</title><rect x="1169.8" y="453" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1172.77" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;flat_mutation_reader&gt;::allocate (9 samples, 0.02%; +0.01%)</title><rect x="433.0" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="436.00" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (14 samples, 0.03%; -0.01%)</title><rect x="942.2" y="405" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="945.23" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (7 samples, 0.01%; +0.01%)</title><rect x="369.8" y="165" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="372.76" y="175.5" ></text>
</g>
<g >
<title>[unknown] (237 samples, 0.50%; 0.00%)</title><rect x="10.2" y="597" width="5.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.20" y="607.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (112 samples, 0.24%; +0.00%)</title><rect x="948.1" y="389" width="2.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="951.09" y="399.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (13 samples, 0.03%; +0.00%)</title><rect x="233.5" y="229" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="236.54" y="239.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (20 samples, 0.04%; -0.00%)</title><rect x="61.5" y="421" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="64.52" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (10 samples, 0.02%; -0.00%)</title><rect x="941.2" y="389" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="944.15" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="932.0" y="389" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="934.99" y="399.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (92 samples, 0.20%; -0.02%)</title><rect x="296.4" y="277" width="2.3" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="299.37" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (12 samples, 0.03%; -0.02%)</title><rect x="1104.3" y="357" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1107.31" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (127 samples, 0.27%; -0.00%)</title><rect x="628.1" y="485" width="3.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="631.10" y="495.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (56 samples, 0.12%; +0.01%)</title><rect x="219.9" y="149" width="1.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="222.92" y="159.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (4 samples, 0.01%; -0.01%)</title><rect x="626.1" y="485" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="629.15" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (13 samples, 0.03%; -0.02%)</title><rect x="52.2" y="469" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="55.15" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (21 samples, 0.04%; 0.00%)</title><rect x="867.1" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.06" y="479.5" ></text>
</g>
<g >
<title>db::block_for (6 samples, 0.01%; +0.01%)</title><rect x="1064.0" y="325" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1067.01" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (12 samples, 0.03%; -0.00%)</title><rect x="41.6" y="453" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="44.57" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (5 samples, 0.01%; -0.01%)</title><rect x="1031.7" y="229" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1034.67" y="239.5" ></text>
</g>
<g >
<title>operator new (83 samples, 0.18%; 0.00%)</title><rect x="1044.5" y="245" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1047.46" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (8 samples, 0.02%; -0.01%)</title><rect x="856.5" y="405" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="859.52" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (60 samples, 0.13%; +0.01%)</title><rect x="740.7" y="325" width="1.5" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="743.72" y="335.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (608 samples, 1.29%; -0.01%)</title><rect x="788.7" y="229" width="15.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="791.68" y="239.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (25 samples, 0.05%; -0.01%)</title><rect x="482.3" y="197" width="0.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="485.31" y="207.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (41 samples, 0.09%; +0.00%)</title><rect x="553.3" y="325" width="1.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="556.28" y="335.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.01%; 0.00%)</title><rect x="46.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.65" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (60 samples, 0.13%; -0.11%)</title><rect x="279.7" y="261" width="1.6" height="15.0" fill="rgb(31,31,255)" rx="2" ry="2" />
<text  x="282.75" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (452 samples, 0.96%; -0.00%)</title><rect x="884.9" y="357" width="11.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="887.88" y="367.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (22 samples, 0.05%; +0.01%)</title><rect x="693.2" y="469" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="696.18" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (28 samples, 0.06%; -0.02%)</title><rect x="369.1" y="165" width="0.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="372.06" y="175.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (127 samples, 0.27%; +0.01%)</title><rect x="1151.3" y="469" width="3.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1154.30" y="479.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (25 samples, 0.05%; -0.02%)</title><rect x="39.6" y="405" width="0.6" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="42.61" y="415.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (12 samples, 0.03%; 0.00%)</title><rect x="901.5" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="904.53" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (14 samples, 0.03%; +0.00%)</title><rect x="826.0" y="325" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="829.03" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (4 samples, 0.01%; 0.00%)</title><rect x="46.5" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.50" y="399.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (738 samples, 1.57%; -0.01%)</title><rect x="883.4" y="389" width="18.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="886.35" y="399.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (4 samples, 0.01%; 0.00%)</title><rect x="46.6" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.65" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="423.1" y="373" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="426.13" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (2,267 samples, 4.81%; +0.01%)</title><rect x="878.0" y="421" width="56.8" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="881.05" y="431.5" >cql3::..</text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (149 samples, 0.32%; +0.03%)</title><rect x="1069.9" y="309" width="3.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1072.87" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (16 samples, 0.03%; -0.01%)</title><rect x="940.3" y="341" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="943.25" y="351.5" ></text>
</g>
<g >
<title>free (95 samples, 0.20%; -0.02%)</title><rect x="402.3" y="181" width="2.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="405.33" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (9 samples, 0.02%; -0.00%)</title><rect x="575.8" y="357" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="578.76" y="367.5" ></text>
</g>
<g >
<title>operator delete (17 samples, 0.04%; -0.07%)</title><rect x="578.6" y="389" width="0.4" height="15.0" fill="rgb(94,94,255)" rx="2" ry="2" />
<text  x="581.61" y="399.5" ></text>
</g>
<g >
<title>operator new (62 samples, 0.13%; -0.00%)</title><rect x="442.3" y="245" width="1.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="445.31" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.01%; -0.00%)</title><rect x="659.7" y="421" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="662.69" y="431.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (8 samples, 0.02%; +0.00%)</title><rect x="76.7" y="453" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="79.66" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (32 samples, 0.07%; -0.06%)</title><rect x="174.4" y="133" width="0.8" height="15.0" fill="rgb(108,108,255)" rx="2" ry="2" />
<text  x="177.39" y="143.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (63 samples, 0.13%; 0.00%)</title><rect x="801.4" y="117" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="804.45" y="127.5" ></text>
</g>
<g >
<title>__tls_init (15 samples, 0.03%; +0.02%)</title><rect x="526.6" y="293" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="529.64" y="303.5" ></text>
</g>
<g >
<title>row::external_memory_usage (5 samples, 0.01%; +0.00%)</title><rect x="215.7" y="165" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="218.74" y="175.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (21 samples, 0.04%; +0.04%)</title><rect x="596.2" y="405" width="0.5" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="599.18" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (16 samples, 0.03%; -0.00%)</title><rect x="624.2" y="469" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="627.24" y="479.5" ></text>
</g>
<g >
<title>operator new (98 samples, 0.21%; +0.00%)</title><rect x="1035.8" y="261" width="2.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1038.83" y="271.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (6 samples, 0.01%; +0.00%)</title><rect x="394.1" y="245" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="397.12" y="255.5" ></text>
</g>
<g >
<title>operator delete (31 samples, 0.07%; -0.00%)</title><rect x="811.6" y="309" width="0.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="814.56" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (26 samples, 0.06%; 0.00%)</title><rect x="776.1" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="779.09" y="303.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (8 samples, 0.02%; +0.01%)</title><rect x="390.4" y="213" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="393.39" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; -0.01%)</title><rect x="953.1" y="405" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="956.12" y="415.5" ></text>
</g>
<g >
<title>operator delete (19 samples, 0.04%; -0.06%)</title><rect x="445.2" y="277" width="0.4" height="15.0" fill="rgb(119,119,255)" rx="2" ry="2" />
<text  x="448.16" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (11 samples, 0.02%; +0.00%)</title><rect x="317.1" y="165" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="320.15" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (24 samples, 0.05%; +0.01%)</title><rect x="655.8" y="485" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="658.81" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (14 samples, 0.03%; 0.00%)</title><rect x="530.4" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="533.42" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (26 samples, 0.06%; +0.03%)</title><rect x="545.3" y="389" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="548.32" y="399.5" ></text>
</g>
<g >
<title>__tls_init (5 samples, 0.01%; -0.01%)</title><rect x="499.4" y="229" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="502.36" y="239.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (85 samples, 0.18%; -0.00%)</title><rect x="814.9" y="341" width="2.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="817.92" y="351.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (7 samples, 0.01%; 0.00%)</title><rect x="23.2" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.19" y="335.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (33 samples, 0.07%; -0.03%)</title><rect x="887.2" y="309" width="0.8" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="890.18" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (26 samples, 0.06%; -0.01%)</title><rect x="320.0" y="165" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="322.98" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (6 samples, 0.01%; -0.00%)</title><rect x="414.6" y="277" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="417.62" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (18 samples, 0.04%; +0.00%)</title><rect x="925.0" y="373" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="927.98" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (5 samples, 0.01%; +0.00%)</title><rect x="49.2" y="485" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="52.20" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (11 samples, 0.02%; +0.00%)</title><rect x="17.4" y="293" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="20.36" y="303.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (52 samples, 0.11%; +0.00%)</title><rect x="616.7" y="405" width="1.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="619.68" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (13 samples, 0.03%; +0.02%)</title><rect x="1126.0" y="421" width="0.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1128.97" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (8 samples, 0.02%; +0.01%)</title><rect x="425.6" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="428.59" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (2,022 samples, 4.29%; +0.03%)</title><rect x="998.2" y="293" width="50.6" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="1001.15" y="303.5" >servi..</text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (12 samples, 0.03%; -0.04%)</title><rect x="1148.6" y="469" width="0.3" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="1151.62" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (6 samples, 0.01%; 0.00%)</title><rect x="930.1" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="933.06" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (10 samples, 0.02%; +0.01%)</title><rect x="915.7" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="918.70" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (109 samples, 0.23%; +0.02%)</title><rect x="572.9" y="357" width="2.8" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="575.93" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (25 samples, 0.05%; +0.02%)</title><rect x="1149.0" y="453" width="0.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1152.02" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (26 samples, 0.06%; +0.00%)</title><rect x="453.4" y="261" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="456.42" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.01%; 0.00%)</title><rect x="18.8" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.76" y="303.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (10 samples, 0.02%; +0.00%)</title><rect x="895.4" y="309" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="898.39" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (58 samples, 0.12%; -0.01%)</title><rect x="498.0" y="261" width="1.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="501.03" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.01%; 0.00%)</title><rect x="578.9" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="581.94" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (12 samples, 0.03%; +0.01%)</title><rect x="1031.1" y="213" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1034.12" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (14 samples, 0.03%; +0.00%)</title><rect x="205.5" y="101" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="208.45" y="111.5" ></text>
</g>
<g >
<title>cql3::update_parameters::make_cell (4 samples, 0.01%; 0.00%)</title><rect x="862.9" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.88" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (6 samples, 0.01%; -0.00%)</title><rect x="269.5" y="325" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="272.54" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (4 samples, 0.01%; -0.01%)</title><rect x="1153.4" y="421" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1156.38" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; +0.01%)</title><rect x="460.9" y="293" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="463.91" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (4 samples, 0.01%; 0.00%)</title><rect x="876.5" y="421" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="879.49" y="431.5" ></text>
</g>
<g >
<title>table::make_reader (4,192 samples, 8.89%; -0.01%)</title><rect x="429.5" y="357" width="105.0" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="432.52" y="367.5" >table::make_..</text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (115 samples, 0.24%; 0.00%)</title><rect x="18.6" y="373" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.64" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (410 samples, 0.87%; -0.00%)</title><rect x="661.0" y="501" width="10.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="663.99" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (20 samples, 0.04%; -0.01%)</title><rect x="61.0" y="421" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="63.99" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (14 samples, 0.03%; +0.01%)</title><rect x="929.7" y="405" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="932.71" y="415.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (20 samples, 0.04%; -0.01%)</title><rect x="1035.0" y="245" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1038.02" y="255.5" ></text>
</g>
<g >
<title>operator delete (33 samples, 0.07%; -0.01%)</title><rect x="36.4" y="469" width="0.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="39.38" y="479.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (13 samples, 0.03%; 0.00%)</title><rect x="677.6" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="680.61" y="463.5" ></text>
</g>
<g >
<title>utils::array_search_gt (10 samples, 0.02%; -0.01%)</title><rect x="470.8" y="277" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="473.82" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (21 samples, 0.04%; +0.00%)</title><rect x="923.2" y="325" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="926.16" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (9 samples, 0.02%; -0.01%)</title><rect x="649.1" y="469" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="652.08" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator::operator* (6 samples, 0.01%; +0.00%)</title><rect x="1061.5" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1064.53" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (5 samples, 0.01%; +0.00%)</title><rect x="901.0" y="341" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="904.00" y="351.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (7 samples, 0.01%; -0.02%)</title><rect x="232.6" y="213" width="0.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="235.56" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (21 samples, 0.04%; -0.01%)</title><rect x="141.7" y="261" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="144.75" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (25 samples, 0.05%; +0.00%)</title><rect x="358.7" y="149" width="0.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="361.68" y="159.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (11 samples, 0.02%; 0.00%)</title><rect x="286.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="289.76" y="367.5" ></text>
</g>
<g >
<title>operator new (31 samples, 0.07%; +0.00%)</title><rect x="455.7" y="325" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="458.70" y="335.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (4 samples, 0.01%; -0.01%)</title><rect x="595.2" y="421" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="598.18" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (6,627 samples, 14.06%; +0.04%)</title><rect x="943.1" y="421" width="165.9" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="946.13" y="431.5" >cql3::statements::sel..</text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (17 samples, 0.04%; +0.01%)</title><rect x="433.3" y="341" width="0.4" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="436.27" y="351.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (24 samples, 0.05%; +0.01%)</title><rect x="839.7" y="341" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="842.75" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (26 samples, 0.06%; +0.04%)</title><rect x="367.6" y="197" width="0.7" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="370.61" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (49 samples, 0.10%; -0.01%)</title><rect x="1006.0" y="245" width="1.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1009.01" y="255.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (91 samples, 0.19%; +0.02%)</title><rect x="714.8" y="453" width="2.2" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="717.76" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (7 samples, 0.01%; 0.00%)</title><rect x="536.3" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="539.26" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (30 samples, 0.06%; -0.05%)</title><rect x="534.6" y="389" width="0.7" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="537.58" y="399.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (19 samples, 0.04%; +0.00%)</title><rect x="937.9" y="341" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="940.90" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (1,907 samples, 4.05%; +0.05%)</title><rect x="1050.8" y="357" width="47.8" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="1053.85" y="367.5" >serv..</text>
</g>
<g >
<title>query_result_builder::consume_new_partition (342 samples, 0.73%; +0.03%)</title><rect x="312.1" y="197" width="8.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="315.12" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (11 samples, 0.02%; -0.01%)</title><rect x="659.8" y="437" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="662.79" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (13 samples, 0.03%; -0.01%)</title><rect x="204.0" y="117" width="0.3" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="207.00" y="127.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (67 samples, 0.14%; -0.01%)</title><rect x="368.3" y="197" width="1.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="371.26" y="207.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (19 samples, 0.04%; -0.01%)</title><rect x="1060.9" y="261" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1063.88" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.01%)</title><rect x="270.6" y="341" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="273.59" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (21 samples, 0.04%; +0.00%)</title><rect x="141.2" y="261" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="144.22" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (26 samples, 0.06%; +0.01%)</title><rect x="899.9" y="325" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="902.93" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (7 samples, 0.01%; -0.02%)</title><rect x="511.7" y="293" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="514.70" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (173 samples, 0.37%; +0.02%)</title><rect x="989.2" y="293" width="4.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="992.24" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (10 samples, 0.02%; +0.00%)</title><rect x="248.7" y="245" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="251.68" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (12 samples, 0.03%; 0.00%)</title><rect x="1141.0" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.99" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="575.5" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="578.51" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (5 samples, 0.01%; +0.00%)</title><rect x="664.1" y="453" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="667.07" y="463.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.08%; 0.00%)</title><rect x="1140.0" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.96" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (13 samples, 0.03%; +0.01%)</title><rect x="519.0" y="325" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="521.96" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (77 samples, 0.16%; -0.05%)</title><rect x="880.7" y="405" width="1.9" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="883.68" y="415.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (5 samples, 0.01%; -0.01%)</title><rect x="796.1" y="117" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="799.09" y="127.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (16 samples, 0.03%; +0.00%)</title><rect x="1175.0" y="453" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1177.98" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (211 samples, 0.45%; -0.03%)</title><rect x="400.4" y="213" width="5.3" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="403.38" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (4 samples, 0.01%; -0.00%)</title><rect x="1142.2" y="485" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1145.16" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (18 samples, 0.04%; -0.00%)</title><rect x="693.7" y="469" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="696.73" y="479.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.01%; +0.00%)</title><rect x="832.9" y="389" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="835.94" y="399.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (275 samples, 0.58%; 0.00%)</title><rect x="16.7" y="565" width="6.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.66" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (11 samples, 0.02%; +0.01%)</title><rect x="950.3" y="373" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="953.29" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (27 samples, 0.06%; +0.02%)</title><rect x="537.2" y="421" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="540.21" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (19 samples, 0.04%; 0.00%)</title><rect x="22.3" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.32" y="415.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (8 samples, 0.02%; 0.00%)</title><rect x="23.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.77" y="463.5" ></text>
</g>
<g >
<title>operator delete (38 samples, 0.08%; -0.04%)</title><rect x="683.7" y="485" width="1.0" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="686.75" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (3,519 samples, 7.47%; +0.01%)</title><rect x="148.1" y="261" width="88.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="151.10" y="271.5" >partition_..</text>
</g>
<g >
<title>query::partition_slice::partition_slice (37 samples, 0.08%; -0.00%)</title><rect x="424.3" y="421" width="0.9" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="427.29" y="431.5" ></text>
</g>
<g >
<title>database::apply_in_memory (22 samples, 0.05%; -0.00%)</title><rect x="1140.0" y="293" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1143.01" y="303.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (50 samples, 0.11%; -0.01%)</title><rect x="759.1" y="325" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="762.07" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (12 samples, 0.03%; +0.00%)</title><rect x="1141.3" y="229" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1144.29" y="239.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (13 samples, 0.03%; +0.01%)</title><rect x="1108.1" y="389" width="0.3" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="1111.09" y="399.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::done (6 samples, 0.01%; 0.00%)</title><rect x="690.8" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="693.75" y="463.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; -0.01%)</title><rect x="33.3" y="485" width="0.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="36.28" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (30 samples, 0.06%; +0.01%)</title><rect x="835.8" y="421" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="838.79" y="431.5" ></text>
</g>
<g >
<title>row::row (1,354 samples, 2.87%; -0.01%)</title><rect x="173.3" y="149" width="33.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="176.29" y="159.5" >ro..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (17 samples, 0.04%; -0.01%)</title><rect x="926.0" y="389" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="928.98" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (6 samples, 0.01%; -0.00%)</title><rect x="940.1" y="341" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="943.10" y="351.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (7 samples, 0.01%; +0.01%)</title><rect x="680.3" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="683.29" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="1169.0" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1172.02" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (50 samples, 0.11%; +0.00%)</title><rect x="1059.1" y="293" width="1.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1062.13" y="303.5" ></text>
</g>
<g >
<title>dht::tri_compare (120 samples, 0.25%; -0.01%)</title><rect x="1082.0" y="229" width="3.0" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="1085.04" y="239.5" ></text>
</g>
<g >
<title>operator new (65 samples, 0.14%; +0.00%)</title><rect x="279.6" y="277" width="1.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="282.62" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (5 samples, 0.01%; +0.00%)</title><rect x="504.4" y="197" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="507.36" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;void&gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;void&gt;::promise_type&gt; (5 samples, 0.01%; +0.01%)</title><rect x="711.4" y="501" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="714.38" y="511.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (31 samples, 0.07%; +0.00%)</title><rect x="1140.0" y="325" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1142.99" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (4 samples, 0.01%; +0.00%)</title><rect x="223.7" y="197" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="226.65" y="207.5" ></text>
</g>
<g >
<title>schema::position (5 samples, 0.01%; -0.01%)</title><rect x="1125.8" y="421" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1128.84" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (25 samples, 0.05%; +0.01%)</title><rect x="351.4" y="149" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="354.44" y="159.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (4 samples, 0.01%; -0.00%)</title><rect x="636.5" y="469" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="639.48" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (7 samples, 0.01%; +0.00%)</title><rect x="710.5" y="501" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="713.53" y="511.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; -0.00%)</title><rect x="661.3" y="485" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="664.27" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.03%; -0.04%)</title><rect x="833.8" y="357" width="0.3" height="15.0" fill="rgb(143,143,255)" rx="2" ry="2" />
<text  x="836.81" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (10 samples, 0.02%; -0.01%)</title><rect x="855.3" y="469" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="858.27" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (40 samples, 0.08%; +0.03%)</title><rect x="604.2" y="437" width="1.0" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="607.19" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (22 samples, 0.05%; -0.03%)</title><rect x="1137.9" y="421" width="0.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="1140.86" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (10 samples, 0.02%; -0.00%)</title><rect x="1121.8" y="405" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1124.76" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (18 samples, 0.04%; +0.00%)</title><rect x="1026.5" y="133" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1029.49" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (53 samples, 0.11%; +0.01%)</title><rect x="1157.4" y="453" width="1.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1160.41" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (5 samples, 0.01%; +0.01%)</title><rect x="993.3" y="277" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="996.32" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (27 samples, 0.06%; 0.00%)</title><rect x="807.4" y="229" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="810.36" y="239.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (5 samples, 0.01%; 0.00%)</title><rect x="521.3" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="524.26" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (7 samples, 0.01%; +0.01%)</title><rect x="489.6" y="309" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="492.59" y="319.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (32 samples, 0.07%; 0.00%)</title><rect x="830.9" y="421" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="833.89" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (17 samples, 0.04%; -0.02%)</title><rect x="805.5" y="213" width="0.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="808.50" y="223.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (5 samples, 0.01%; +0.01%)</title><rect x="831.8" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="834.84" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.01%)</title><rect x="134.3" y="229" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="137.26" y="239.5" ></text>
</g>
<g >
<title>reader_permit::consume (12 samples, 0.03%; +0.00%)</title><rect x="214.7" y="133" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="217.69" y="143.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (42 samples, 0.09%; -0.01%)</title><rect x="948.7" y="341" width="1.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="951.66" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (4 samples, 0.01%; -0.01%)</title><rect x="317.0" y="165" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="320.05" y="175.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%; +0.00%)</title><rect x="931.1" y="373" width="0.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="934.14" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (32 samples, 0.07%; +0.01%)</title><rect x="563.5" y="261" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="566.47" y="271.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (11,055 samples, 23.45%; +0.03%)</title><rect x="863.2" y="485" width="276.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="866.20" y="495.5" >seastar::concrete_execution_stage&lt;sea..</text>
</g>
<g >
<title>service::client_state::check_has_permission (9 samples, 0.02%; 0.00%)</title><rect x="23.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.17" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (11 samples, 0.02%; 0.00%)</title><rect x="674.7" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="677.73" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (57 samples, 0.12%; +0.01%)</title><rect x="611.3" y="389" width="1.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="614.33" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (7 samples, 0.01%; -0.00%)</title><rect x="830.0" y="389" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="832.98" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (68 samples, 0.14%; 0.00%)</title><rect x="855.5" y="469" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="858.52" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (10 samples, 0.02%; +0.01%)</title><rect x="606.4" y="437" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="609.42" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (33 samples, 0.07%; -0.00%)</title><rect x="19.9" y="309" width="0.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="22.91" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (7 samples, 0.01%; +0.01%)</title><rect x="807.9" y="197" width="0.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="810.86" y="207.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (551 samples, 1.17%; +0.02%)</title><rect x="496.2" y="277" width="13.7" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="499.15" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%; +0.00%)</title><rect x="716.6" y="421" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="719.64" y="431.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (4 samples, 0.01%; 0.00%)</title><rect x="22.4" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.42" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (49 samples, 0.10%; -0.01%)</title><rect x="715.4" y="405" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="718.41" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="566.6" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="569.62" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (17 samples, 0.04%; +0.00%)</title><rect x="654.6" y="469" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="657.63" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (150 samples, 0.32%; -0.01%)</title><rect x="541.6" y="373" width="3.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="544.56" y="383.5" ></text>
</g>
<g >
<title>operator new (63 samples, 0.13%; 0.00%)</title><rect x="1126.8" y="405" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.82" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (14 samples, 0.03%; -0.01%)</title><rect x="854.1" y="405" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="857.12" y="415.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (6 samples, 0.01%; -0.01%)</title><rect x="703.5" y="421" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="706.47" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (9 samples, 0.02%; +0.01%)</title><rect x="548.1" y="421" width="0.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="551.12" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (6 samples, 0.01%; +0.01%)</title><rect x="207.5" y="149" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="210.51" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (12 samples, 0.03%; 0.00%)</title><rect x="562.7" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="565.66" y="287.5" ></text>
</g>
<g >
<title>_start (4 samples, 0.01%; 0.00%)</title><rect x="1177.2" y="629" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1180.16" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.06%; -0.01%)</title><rect x="514.5" y="261" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="517.48" y="271.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (30 samples, 0.06%; -0.00%)</title><rect x="1125.0" y="421" width="0.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1127.99" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (109 samples, 0.23%; +0.01%)</title><rect x="658.2" y="485" width="2.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="661.16" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (4 samples, 0.01%; +0.00%)</title><rect x="813.4" y="341" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="816.44" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (4 samples, 0.01%; +0.01%)</title><rect x="1123.1" y="421" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1126.11" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (73 samples, 0.15%; -0.02%)</title><rect x="936.7" y="389" width="1.9" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="939.75" y="399.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.01%)</title><rect x="803.9" y="229" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="806.90" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (30 samples, 0.06%; +0.03%)</title><rect x="603.0" y="405" width="0.8" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="606.04" y="415.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (4 samples, 0.01%; -0.01%)</title><rect x="447.3" y="293" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="450.27" y="303.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (29 samples, 0.06%; 0.00%)</title><rect x="682.4" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.37" y="431.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (8 samples, 0.02%; -0.02%)</title><rect x="599.8" y="421" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="602.79" y="431.5" ></text>
</g>
<g >
<title>operator delete (10 samples, 0.02%; -0.02%)</title><rect x="1168.9" y="453" width="0.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1171.92" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; -0.00%)</title><rect x="629.9" y="453" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="632.93" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.01%)</title><rect x="612.6" y="357" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="615.58" y="367.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (132 samples, 0.28%; -0.00%)</title><rect x="527.5" y="309" width="3.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="530.54" y="319.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; 0.00%)</title><rect x="504.6" y="197" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="507.64" y="207.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (4 samples, 0.01%; -0.01%)</title><rect x="115.0" y="357" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="117.99" y="367.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (41 samples, 0.09%; +0.00%)</title><rect x="1071.4" y="293" width="1.0" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1074.42" y="303.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (4 samples, 0.01%; -0.01%)</title><rect x="801.2" y="117" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="804.25" y="127.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (26 samples, 0.06%; +0.00%)</title><rect x="93.9" y="437" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="96.86" y="447.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (6 samples, 0.01%; 0.00%)</title><rect x="791.5" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="794.51" y="223.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (9 samples, 0.02%; 0.00%)</title><rect x="226.5" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="229.45" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (4 samples, 0.01%; +0.00%)</title><rect x="1173.0" y="437" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1176.03" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (25 samples, 0.05%; +0.00%)</title><rect x="516.2" y="309" width="0.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="519.23" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (10 samples, 0.02%; +0.01%)</title><rect x="1120.7" y="373" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1123.71" y="383.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (237 samples, 0.50%; +0.02%)</title><rect x="888.0" y="309" width="5.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="891.01" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (7,153 samples, 15.17%; -0.05%)</title><rect x="109.6" y="405" width="179.0" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="112.58" y="415.5" >flat_mutation_reader::p..</text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (84 samples, 0.18%; -0.01%)</title><rect x="584.3" y="405" width="2.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="587.34" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (29 samples, 0.06%; +0.01%)</title><rect x="259.8" y="277" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="262.80" y="287.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (7 samples, 0.01%; +0.00%)</title><rect x="758.4" y="309" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="761.44" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (5 samples, 0.01%; 0.00%)</title><rect x="61.9" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.89" y="415.5" ></text>
</g>
<g >
<title>operator new (22 samples, 0.05%; +0.00%)</title><rect x="616.9" y="389" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="619.88" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (34 samples, 0.07%; +0.00%)</title><rect x="17.7" y="277" width="0.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="20.73" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (6 samples, 0.01%; -0.01%)</title><rect x="174.2" y="133" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="177.24" y="143.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (38 samples, 0.08%; +0.00%)</title><rect x="258.4" y="277" width="1.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="261.45" y="287.5" ></text>
</g>
<g >
<title>database::do_apply (33 samples, 0.07%; 0.00%)</title><rect x="1140.0" y="341" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.99" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (7 samples, 0.01%; -0.03%)</title><rect x="534.3" y="341" width="0.2" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="537.28" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (5 samples, 0.01%; -0.00%)</title><rect x="130.0" y="277" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="133.01" y="287.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (438 samples, 0.93%; +0.02%)</title><rect x="472.7" y="277" width="10.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="475.67" y="287.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (132 samples, 0.28%; -0.02%)</title><rect x="667.8" y="469" width="3.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="670.83" y="479.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (6 samples, 0.01%; 0.00%)</title><rect x="601.3" y="421" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="604.26" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (143 samples, 0.30%; -0.03%)</title><rect x="795.1" y="165" width="3.5" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="798.06" y="175.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (27 samples, 0.06%; 0.00%)</title><rect x="862.5" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.53" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (79 samples, 0.17%; -0.00%)</title><rect x="646.0" y="453" width="1.9" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="648.97" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; +0.01%)</title><rect x="296.6" y="261" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="299.57" y="271.5" ></text>
</g>
<g >
<title>operator new (104 samples, 0.22%; 0.00%)</title><rect x="966.5" y="357" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="969.46" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (9 samples, 0.02%; +0.01%)</title><rect x="850.4" y="389" width="0.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="853.41" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (340 samples, 0.72%; -0.00%)</title><rect x="794.6" y="197" width="8.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="797.59" y="207.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (237 samples, 0.50%; 0.00%)</title><rect x="10.2" y="613" width="5.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.20" y="623.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (5 samples, 0.01%; -0.00%)</title><rect x="596.7" y="405" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="599.71" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (11 samples, 0.02%; 0.00%)</title><rect x="1173.8" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1176.78" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (12 samples, 0.03%; 0.00%)</title><rect x="1141.0" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.99" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::~modification_statement (6 samples, 0.01%; 0.00%)</title><rect x="637.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="640.64" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (4 samples, 0.01%; +0.00%)</title><rect x="1046.5" y="245" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1049.54" y="255.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (4 samples, 0.01%; 0.00%)</title><rect x="1141.3" y="165" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.34" y="175.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (4 samples, 0.01%; 0.00%)</title><rect x="22.5" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.54" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.01%)</title><rect x="518.2" y="325" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="521.18" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (17 samples, 0.04%; +0.01%)</title><rect x="662.7" y="469" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="665.72" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (20 samples, 0.04%; +0.02%)</title><rect x="620.3" y="469" width="0.5" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="623.31" y="479.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (20 samples, 0.04%; +0.01%)</title><rect x="827.2" y="293" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="830.23" y="303.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (8 samples, 0.02%; -0.01%)</title><rect x="482.1" y="181" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="485.11" y="191.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (6 samples, 0.01%; -0.01%)</title><rect x="613.3" y="421" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="616.30" y="431.5" ></text>
</g>
<g >
<title>__start_context (13 samples, 0.03%; 0.00%)</title><rect x="23.7" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.69" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (24 samples, 0.05%; -0.01%)</title><rect x="547.4" y="421" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="550.44" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; +0.01%)</title><rect x="618.1" y="373" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="621.09" y="383.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (130 samples, 0.28%; 0.00%)</title><rect x="181.9" y="101" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="184.87" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%; 0.00%)</title><rect x="548.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="551.35" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (395 samples, 0.84%; +0.02%)</title><rect x="1065.5" y="341" width="9.9" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="1068.46" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (218 samples, 0.46%; -0.05%)</title><rect x="936.2" y="405" width="5.5" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="939.20" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (14 samples, 0.03%; +0.02%)</title><rect x="26.1" y="517" width="0.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="29.15" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (4 samples, 0.01%; -0.00%)</title><rect x="490.1" y="309" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="493.15" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (5 samples, 0.01%; -0.00%)</title><rect x="134.1" y="229" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="137.14" y="239.5" ></text>
</g>
<g >
<title>__dynamic_cast (14 samples, 0.03%; +0.01%)</title><rect x="640.5" y="469" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="643.46" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (52 samples, 0.11%; 0.00%)</title><rect x="651.4" y="453" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="654.38" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;current_deleter&lt;range_tombstone_entry&gt; (7 samples, 0.01%; +0.01%)</title><rect x="564.6" y="261" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="567.59" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (7 samples, 0.01%; 0.00%)</title><rect x="647.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="650.32" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (15 samples, 0.03%; -0.01%)</title><rect x="1146.7" y="485" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1149.74" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.01%; +0.00%)</title><rect x="17.4" y="261" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="20.41" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (24 samples, 0.05%; +0.01%)</title><rect x="663.7" y="469" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="666.67" y="479.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (16 samples, 0.03%; +0.01%)</title><rect x="334.1" y="181" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="337.14" y="191.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (6 samples, 0.01%; +0.01%)</title><rect x="238.2" y="213" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="241.19" y="223.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (6 samples, 0.01%; 0.00%)</title><rect x="1147.0" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.97" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (128 samples, 0.27%; +0.01%)</title><rect x="96.5" y="421" width="3.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="99.51" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (6 samples, 0.01%; -0.00%)</title><rect x="504.5" y="197" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="507.49" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (19 samples, 0.04%; -0.00%)</title><rect x="444.7" y="261" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="447.69" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (284 samples, 0.60%; 0.00%)</title><rect x="16.4" y="581" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.43" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (21 samples, 0.04%; -0.02%)</title><rect x="269.7" y="325" width="0.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="272.69" y="335.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (103 samples, 0.22%; +0.01%)</title><rect x="616.5" y="421" width="2.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="619.46" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (6 samples, 0.01%; 0.00%)</title><rect x="862.7" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.65" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (66 samples, 0.14%; -0.01%)</title><rect x="60.4" y="437" width="1.7" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="63.42" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (9 samples, 0.02%; -0.00%)</title><rect x="644.2" y="389" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="647.22" y="399.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (118 samples, 0.25%; +0.01%)</title><rect x="743.0" y="309" width="2.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="745.97" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (20 samples, 0.04%; -0.04%)</title><rect x="932.9" y="357" width="0.5" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="935.94" y="367.5" ></text>
</g>
<g >
<title>executor&lt;test_read (5,823 samples, 12.35%; +0.05%)</title><rect x="713.3" y="485" width="145.8" height="15.0" fill="rgb(255,133,133)" rx="2" ry="2" />
<text  x="716.33" y="495.5" >executor&lt;test_read</text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (5 samples, 0.01%; -0.01%)</title><rect x="427.3" y="389" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="430.31" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (10 samples, 0.02%; -0.03%)</title><rect x="67.3" y="389" width="0.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="70.32" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (16 samples, 0.03%; -0.01%)</title><rect x="546.3" y="389" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="549.29" y="399.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (164 samples, 0.35%; -0.02%)</title><rect x="394.3" y="245" width="4.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="397.27" y="255.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (10 samples, 0.02%; 0.00%)</title><rect x="23.1" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.14" y="431.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (5 samples, 0.01%; +0.01%)</title><rect x="1075.5" y="325" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1078.53" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (5 samples, 0.01%; -0.01%)</title><rect x="626.0" y="485" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="629.02" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (107 samples, 0.23%; -0.04%)</title><rect x="210.0" y="117" width="2.7" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="212.98" y="127.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (8 samples, 0.02%; -0.00%)</title><rect x="867.8" y="469" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="870.78" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (9 samples, 0.02%; +0.01%)</title><rect x="320.7" y="197" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="323.70" y="207.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (26 samples, 0.06%; +0.01%)</title><rect x="633.8" y="485" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="636.81" y="495.5" ></text>
</g>
<g >
<title>compound_type&lt; (81 samples, 0.17%; +0.03%)</title><rect x="906.9" y="357" width="2.0" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="909.88" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; 0.00%)</title><rect x="620.0" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="622.96" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (29 samples, 0.06%; -0.01%)</title><rect x="509.9" y="277" width="0.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="512.95" y="287.5" ></text>
</g>
<g >
<title>database::query (1,027 samples, 2.18%; -0.04%)</title><rect x="1009.8" y="261" width="25.7" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="1012.82" y="271.5" >d..</text>
</g>
<g >
<title>seastar::memory::allocate (25 samples, 0.05%; +0.00%)</title><rect x="421.0" y="325" width="0.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="424.01" y="335.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (32 samples, 0.07%; 0.00%)</title><rect x="682.3" y="469" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.34" y="479.5" ></text>
</g>
<g >
<title>query::result::result (4 samples, 0.01%; -0.00%)</title><rect x="588.6" y="437" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="591.62" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (36 samples, 0.08%; 0.00%)</title><rect x="22.0" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.02" y="447.5" ></text>
</g>
<g >
<title>dht::shard_of (33 samples, 0.07%; +0.02%)</title><rect x="1001.9" y="277" width="0.8" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1004.86" y="287.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (37 samples, 0.08%; +0.01%)</title><rect x="1093.8" y="309" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1096.75" y="319.5" ></text>
</g>
<g >
<title>free (30 samples, 0.06%; -0.00%)</title><rect x="407.4" y="197" width="0.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="410.41" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (29 samples, 0.06%; 0.00%)</title><rect x="1148.9" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1151.92" y="479.5" ></text>
</g>
<g >
<title>[[vdso]] (276 samples, 0.59%; +0.01%)</title><rect x="1178.4" y="613" width="6.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1181.38" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (8 samples, 0.02%; +0.00%)</title><rect x="1147.8" y="469" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1150.80" y="479.5" ></text>
</g>
<g >
<title>compound_type&lt; (164 samples, 0.35%; -0.01%)</title><rect x="478.8" y="213" width="4.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="481.83" y="223.5" ></text>
</g>
<g >
<title>operator delete (28 samples, 0.06%; 0.00%)</title><rect x="809.5" y="277" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="812.46" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (11 samples, 0.02%; 0.00%)</title><rect x="746.2" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="749.23" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::stats (29 samples, 0.06%; -0.00%)</title><rect x="498.8" y="245" width="0.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="501.76" y="255.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (80 samples, 0.17%; -0.01%)</title><rect x="763.5" y="389" width="2.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="766.55" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (42 samples, 0.09%; -0.01%)</title><rect x="984.4" y="277" width="1.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="987.38" y="287.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (9 samples, 0.02%; +0.01%)</title><rect x="138.2" y="245" width="0.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="141.17" y="255.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (6 samples, 0.01%; 0.00%)</title><rect x="23.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (8 samples, 0.02%; -0.01%)</title><rect x="741.2" y="293" width="0.2" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="744.25" y="303.5" ></text>
</g>
<g >
<title>__tls_init (8 samples, 0.02%; +0.01%)</title><rect x="459.1" y="325" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="462.13" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (62 samples, 0.13%; +0.01%)</title><rect x="263.5" y="325" width="1.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="266.45" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (15 samples, 0.03%; -0.01%)</title><rect x="630.9" y="469" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="633.90" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.01%; 0.00%)</title><rect x="23.3" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.27" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="975.0" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="978.02" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (93 samples, 0.20%; -0.01%)</title><rect x="743.5" y="277" width="2.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="746.55" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (12 samples, 0.03%; +0.01%)</title><rect x="206.2" y="133" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="209.23" y="143.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (40 samples, 0.08%; +0.03%)</title><rect x="1025.9" y="149" width="1.0" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="1028.94" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (9 samples, 0.02%; +0.01%)</title><rect x="1049.6" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1052.57" y="303.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;long, std::allocator&lt;long&gt; &gt;::push_back_impl&lt;long const&amp;&gt; (5 samples, 0.01%; +0.01%)</title><rect x="674.5" y="437" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="677.51" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (26 samples, 0.06%; +0.05%)</title><rect x="399.5" y="229" width="0.6" height="15.0" fill="rgb(255,126,126)" rx="2" ry="2" />
<text  x="402.48" y="239.5" ></text>
</g>
<g >
<title>compound_type&lt; (8 samples, 0.02%; -0.05%)</title><rect x="903.8" y="389" width="0.2" height="15.0" fill="rgb(133,133,255)" rx="2" ry="2" />
<text  x="906.76" y="399.5" ></text>
</g>
<g >
<title>row::row (6 samples, 0.01%; +0.00%)</title><rect x="253.1" y="213" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="256.09" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (4 samples, 0.01%; 0.00%)</title><rect x="143.6" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="146.65" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (7 samples, 0.01%; -0.02%)</title><rect x="1105.6" y="389" width="0.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1108.57" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (4 samples, 0.01%; +0.00%)</title><rect x="106.5" y="421" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="109.47" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (6 samples, 0.01%; +0.00%)</title><rect x="41.1" y="437" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="44.09" y="447.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (25 samples, 0.05%; +0.00%)</title><rect x="557.0" y="293" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="560.01" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (23 samples, 0.05%; -0.01%)</title><rect x="597.6" y="437" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="600.56" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.06%; -0.01%)</title><rect x="931.2" y="357" width="0.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="934.19" y="367.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (7 samples, 0.01%; 0.00%)</title><rect x="23.2" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.19" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (12 samples, 0.03%; +0.01%)</title><rect x="1024.9" y="149" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1027.91" y="159.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (11 samples, 0.02%; +0.00%)</title><rect x="862.9" y="341" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="865.85" y="351.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (4 samples, 0.01%; +0.00%)</title><rect x="17.4" y="229" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="20.43" y="239.5" ></text>
</g>
<g >
<title>compound_type&lt; (104 samples, 0.22%; 0.00%)</title><rect x="921.3" y="357" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="924.28" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (13 samples, 0.03%; +0.01%)</title><rect x="821.5" y="293" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="824.55" y="303.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (6 samples, 0.01%; 0.00%)</title><rect x="46.5" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.50" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (4 samples, 0.01%; -0.00%)</title><rect x="424.2" y="405" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="427.16" y="415.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (7 samples, 0.01%; 0.00%)</title><rect x="366.9" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="369.94" y="207.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (20 samples, 0.04%; +0.04%)</title><rect x="434.2" y="341" width="0.5" height="15.0" fill="rgb(255,143,143)" rx="2" ry="2" />
<text  x="437.25" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (6 samples, 0.01%; -0.01%)</title><rect x="99.6" y="389" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="102.57" y="399.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (459 samples, 0.97%; +0.01%)</title><rect x="1177.3" y="629" width="11.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1180.26" y="639.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.01%; 0.00%)</title><rect x="788.6" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="791.58" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (10 samples, 0.02%; +0.01%)</title><rect x="835.4" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="838.39" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (11 samples, 0.02%; -0.00%)</title><rect x="716.4" y="389" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="719.36" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (9 samples, 0.02%; +0.01%)</title><rect x="272.4" y="341" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="275.39" y="351.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (77 samples, 0.16%; +0.00%)</title><rect x="735.5" y="357" width="2.0" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="738.54" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.08%; 0.00%)</title><rect x="1140.0" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.96" y="463.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (8 samples, 0.02%; -0.01%)</title><rect x="559.0" y="293" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="562.03" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (52 samples, 0.11%; -0.01%)</title><rect x="1156.0" y="421" width="1.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1158.96" y="431.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (371 samples, 0.79%; +0.00%)</title><rect x="311.7" y="213" width="9.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="314.66" y="223.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (5,793 samples, 12.29%; +0.03%)</title><rect x="118.2" y="325" width="145.0" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="121.21" y="335.5" >mutation_reader_me..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (27 samples, 0.06%; 0.00%)</title><rect x="1106.9" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1109.94" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (11 samples, 0.02%; +0.00%)</title><rect x="559.2" y="293" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="562.23" y="303.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (51 samples, 0.11%; -0.01%)</title><rect x="330.3" y="181" width="1.3" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="333.34" y="191.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1,157 samples, 2.45%; 0.00%)</title><rect x="1144.2" y="501" width="29.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.24" y="511.5" >se..</text>
</g>
<g >
<title>partition_version_ref::operator* (9 samples, 0.02%; +0.00%)</title><rect x="563.0" y="277" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="565.96" y="287.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.02%; -0.01%)</title><rect x="810.2" y="277" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="813.21" y="287.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (4,112 samples, 8.72%; +0.03%)</title><rect x="728.9" y="437" width="102.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="731.90" y="447.5" >cql3::query_..</text>
</g>
<g >
<title>flat_mutation_reader::close (5 samples, 0.01%; 0.00%)</title><rect x="1173.8" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1176.80" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;void&gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type&gt; (7 samples, 0.01%; +0.01%)</title><rect x="1034.6" y="245" width="0.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="1037.62" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (10 samples, 0.02%; +0.02%)</title><rect x="924.5" y="389" width="0.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="927.53" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (12 samples, 0.03%; +0.01%)</title><rect x="607.3" y="437" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="610.30" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (4 samples, 0.01%; +0.00%)</title><rect x="918.9" y="373" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="921.90" y="383.5" ></text>
</g>
<g >
<title>sstring_hash::operator (31 samples, 0.07%; 0.00%)</title><rect x="1060.7" y="293" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1063.73" y="303.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (32 samples, 0.07%; 0.00%)</title><rect x="1140.9" y="405" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.89" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (39 samples, 0.08%; +0.01%)</title><rect x="907.8" y="341" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="910.76" y="351.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (40 samples, 0.08%; -0.00%)</title><rect x="460.3" y="325" width="1.0" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="463.26" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (6,218 samples, 13.19%; -0.01%)</title><rect x="115.1" y="357" width="155.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="118.09" y="367.5" >mutation_fragment_m..</text>
</g>
<g >
<title>schema::column_at (59 samples, 0.13%; -0.02%)</title><rect x="204.3" y="117" width="1.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="207.33" y="127.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (8 samples, 0.02%; 0.00%)</title><rect x="272.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="275.61" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (11 samples, 0.02%; +0.00%)</title><rect x="1030.0" y="197" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1033.04" y="207.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (2,685 samples, 5.70%; +0.01%)</title><rect x="761.1" y="405" width="67.3" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="764.15" y="415.5" >service..</text>
</g>
<g >
<title>__tls_init (7 samples, 0.01%; +0.01%)</title><rect x="486.6" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="489.64" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (7 samples, 0.01%; +0.01%)</title><rect x="112.6" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="115.61" y="383.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (5 samples, 0.01%; -0.01%)</title><rect x="420.8" y="341" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="423.78" y="351.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (167 samples, 0.35%; -0.00%)</title><rect x="450.3" y="293" width="4.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="453.34" y="303.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::function&lt;partition_presence_checker_result  (7 samples, 0.01%; +0.01%)</title><rect x="601.4" y="421" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="604.41" y="431.5" ></text>
</g>
<g >
<title>freeze (6 samples, 0.01%; 0.00%)</title><rect x="1141.3" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.31" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (8 samples, 0.02%; +0.01%)</title><rect x="440.4" y="245" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="443.43" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (78 samples, 0.17%; -0.01%)</title><rect x="938.9" y="373" width="2.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="941.90" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (54 samples, 0.11%; -0.03%)</title><rect x="1107.7" y="405" width="1.3" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="1110.67" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (25 samples, 0.05%; +0.02%)</title><rect x="424.6" y="405" width="0.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="427.59" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (4 samples, 0.01%; +0.01%)</title><rect x="1038.3" y="261" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1041.28" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (6 samples, 0.01%; +0.01%)</title><rect x="167.0" y="229" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="170.03" y="239.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%; -0.00%)</title><rect x="514.5" y="277" width="0.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="517.45" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="579.6" y="421" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="582.59" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (19 samples, 0.04%; 0.00%)</title><rect x="838.9" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="841.95" y="383.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.03%; -0.00%)</title><rect x="833.8" y="373" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="836.76" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (46 samples, 0.10%; +0.01%)</title><rect x="723.5" y="341" width="1.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="726.52" y="351.5" ></text>
</g>
<g >
<title>operator delete (25 samples, 0.05%; +0.00%)</title><rect x="660.2" y="421" width="0.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="663.22" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (4 samples, 0.01%; +0.01%)</title><rect x="1029.0" y="181" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1031.97" y="191.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (7 samples, 0.01%; -0.01%)</title><rect x="647.0" y="389" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="650.00" y="399.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (11 samples, 0.02%; +0.02%)</title><rect x="509.6" y="245" width="0.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="512.65" y="255.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (50 samples, 0.11%; -0.00%)</title><rect x="19.7" y="325" width="1.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="22.66" y="335.5" ></text>
</g>
<g >
<title>row_tombstone::apply (32 samples, 0.07%; +0.01%)</title><rect x="390.6" y="213" width="0.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="393.59" y="223.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (5 samples, 0.01%; +0.00%)</title><rect x="796.2" y="133" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="799.24" y="143.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (1,017 samples, 2.16%; +0.01%)</title><rect x="486.9" y="325" width="25.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="489.92" y="335.5" >m..</text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (7 samples, 0.01%; +0.00%)</title><rect x="1140.1" y="213" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1143.11" y="223.5" ></text>
</g>
<g >
<title>query::querier&lt; (7 samples, 0.01%; -0.03%)</title><rect x="59.2" y="453" width="0.2" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="62.19" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (5 samples, 0.01%; +0.00%)</title><rect x="1104.8" y="373" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1107.81" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (4 samples, 0.01%; +0.00%)</title><rect x="236.5" y="245" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="239.47" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (14 samples, 0.03%; -0.01%)</title><rect x="980.0" y="341" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="982.95" y="351.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (6 samples, 0.01%; -0.01%)</title><rect x="369.9" y="213" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="372.94" y="223.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (499 samples, 1.06%; -0.00%)</title><rect x="471.5" y="309" width="12.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="474.47" y="319.5" ></text>
</g>
<g >
<title>operator delete (31 samples, 0.07%; -0.01%)</title><rect x="417.1" y="261" width="0.8" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="420.10" y="271.5" ></text>
</g>
<g >
<title>schema::get_partitioner (10 samples, 0.02%; -0.01%)</title><rect x="928.8" y="405" width="0.3" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="931.84" y="415.5" ></text>
</g>
<g >
<title>operator delete (42 samples, 0.09%; +0.01%)</title><rect x="157.2" y="197" width="1.0" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="160.17" y="207.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (4 samples, 0.01%; +0.01%)</title><rect x="702.6" y="421" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="705.62" y="431.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (4 samples, 0.01%; -0.00%)</title><rect x="73.0" y="421" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="76.01" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (11 samples, 0.02%; +0.01%)</title><rect x="627.0" y="469" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="630.05" y="479.5" ></text>
</g>
<g >
<title>auth::get_permissions (1,180 samples, 2.50%; 0.00%)</title><rect x="780.9" y="309" width="29.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="783.90" y="319.5" >au..</text>
</g>
<g >
<title>std::type_info::operator== (6 samples, 0.01%; -0.01%)</title><rect x="1072.3" y="277" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1075.30" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (5 samples, 0.01%; 0.00%)</title><rect x="619.7" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="622.66" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (24 samples, 0.05%; -0.00%)</title><rect x="1056.3" y="293" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1059.28" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (13 samples, 0.03%; -0.01%)</title><rect x="564.4" y="277" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="567.44" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (5 samples, 0.01%; 0.00%)</title><rect x="492.8" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="495.77" y="303.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (343 samples, 0.73%; -0.00%)</title><rect x="378.2" y="165" width="8.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="381.20" y="175.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (38 samples, 0.08%; -0.01%)</title><rect x="68.9" y="389" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="71.85" y="399.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (6,982 samples, 14.81%; +0.02%)</title><rect x="112.8" y="373" width="174.8" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="115.78" y="383.5" >seastar::repeat&lt;mergin..</text>
</g>
<g >
<title>schema_registry::learn (5 samples, 0.01%; 0.00%)</title><rect x="46.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.65" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (413 samples, 0.88%; +0.03%)</title><rect x="152.2" y="245" width="10.3" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="155.21" y="255.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (25 samples, 0.05%; 0.00%)</title><rect x="192.8" y="53" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="195.84" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (4 samples, 0.01%; +0.01%)</title><rect x="704.8" y="453" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="707.82" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (5 samples, 0.01%; -0.00%)</title><rect x="1101.8" y="341" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1104.81" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (15 samples, 0.03%; -0.01%)</title><rect x="615.4" y="437" width="0.4" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="618.38" y="447.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (455 samples, 0.97%; -0.01%)</title><rect x="734.7" y="389" width="11.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="737.74" y="399.5" ></text>
</g>
<g >
<title>operator delete (17 samples, 0.04%; -0.01%)</title><rect x="634.9" y="485" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="637.86" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (14 samples, 0.03%; +0.00%)</title><rect x="482.6" y="181" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="485.59" y="191.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (13 samples, 0.03%; +0.02%)</title><rect x="846.5" y="325" width="0.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="849.48" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1,770 samples, 3.75%; +0.02%)</title><rect x="171.7" y="181" width="44.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="174.66" y="191.5" >muta..</text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (6 samples, 0.01%; -0.02%)</title><rect x="828.0" y="277" width="0.1" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="830.98" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (7 samples, 0.01%; -0.01%)</title><rect x="961.7" y="373" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="964.73" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; -0.01%)</title><rect x="246.2" y="165" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="249.18" y="175.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (4 samples, 0.01%; -0.01%)</title><rect x="613.1" y="389" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="616.10" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (8 samples, 0.02%; +0.01%)</title><rect x="752.4" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="755.43" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (25 samples, 0.05%; -0.01%)</title><rect x="231.4" y="197" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="234.39" y="207.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (29 samples, 0.06%; -0.02%)</title><rect x="623.9" y="485" width="0.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="626.92" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (4 samples, 0.01%; 0.00%)</title><rect x="46.5" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.50" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (62 samples, 0.13%; -0.03%)</title><rect x="1032.3" y="197" width="1.6" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="1035.35" y="207.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (339 samples, 0.72%; -0.00%)</title><rect x="720.3" y="437" width="8.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="723.34" y="447.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.01%; +0.00%)</title><rect x="862.4" y="485" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="865.43" y="495.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (7,052 samples, 14.96%; +0.01%)</title><rect x="111.0" y="389" width="176.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="114.03" y="399.5" >merging_reader&lt;mutatio..</text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (12 samples, 0.03%; -0.02%)</title><rect x="595.9" y="405" width="0.3" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="598.88" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.01%; -0.00%)</title><rect x="1173.3" y="501" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1176.25" y="511.5" ></text>
</g>
<g >
<title>database::find_column_family (50 samples, 0.11%; -0.00%)</title><rect x="820.6" y="341" width="1.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="823.62" y="351.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.01%; 0.00%)</title><rect x="23.3" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.27" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="1007.5" y="277" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1010.49" y="287.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (1,941 samples, 4.12%; +0.02%)</title><rect x="768.6" y="389" width="48.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="771.56" y="399.5" >std:..</text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (13 samples, 0.03%; +0.00%)</title><rect x="1074.3" y="309" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1077.30" y="319.5" ></text>
</g>
<g >
<title>operator delete (34 samples, 0.07%; -0.02%)</title><rect x="652.8" y="485" width="0.8" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="655.78" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.00%)</title><rect x="415.5" y="277" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="418.50" y="287.5" ></text>
</g>
<g >
<title>seastar::gate::enter (7 samples, 0.01%; +0.00%)</title><rect x="1034.3" y="181" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1037.27" y="191.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10 samples, 0.02%; -0.01%)</title><rect x="816.1" y="277" width="0.3" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="819.14" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (30 samples, 0.06%; +0.00%)</title><rect x="795.6" y="149" width="0.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="798.62" y="159.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (10 samples, 0.02%; -0.06%)</title><rect x="536.4" y="405" width="0.3" height="15.0" fill="rgb(119,119,255)" rx="2" ry="2" />
<text  x="539.43" y="415.5" ></text>
</g>
<g >
<title>locator::token_metadata::is_any_node_being_replaced (4 samples, 0.01%; +0.01%)</title><rect x="1093.5" y="293" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1096.50" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (128 samples, 0.27%; +0.00%)</title><rect x="947.7" y="405" width="3.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="950.69" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::move_it (6 samples, 0.01%; +0.01%)</title><rect x="779.7" y="325" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="782.74" y="335.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (11 samples, 0.02%; 0.00%)</title><rect x="244.0" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="246.98" y="223.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (14 samples, 0.03%; 0.00%)</title><rect x="1141.3" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.29" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (7 samples, 0.01%; -0.01%)</title><rect x="456.6" y="325" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="459.58" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (16 samples, 0.03%; -0.01%)</title><rect x="265.0" y="325" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="268.00" y="335.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (4 samples, 0.01%; +0.01%)</title><rect x="849.1" y="421" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="852.13" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (10 samples, 0.02%; -0.01%)</title><rect x="1102.8" y="373" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1105.79" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (8 samples, 0.02%; -0.01%)</title><rect x="452.7" y="261" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="455.72" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (5 samples, 0.01%; +0.01%)</title><rect x="819.9" y="389" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="822.87" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.01%; 0.00%)</title><rect x="679.0" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="681.99" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (7 samples, 0.01%; 0.00%)</title><rect x="447.1" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="450.06" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (17 samples, 0.04%; -0.00%)</title><rect x="701.6" y="421" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="704.57" y="431.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1,330 samples, 2.82%; +0.05%)</title><rect x="1007.7" y="277" width="33.3" height="15.0" fill="rgb(255,126,126)" rx="2" ry="2" />
<text  x="1010.66" y="287.5" >se..</text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (693 samples, 1.47%; +0.01%)</title><rect x="883.8" y="373" width="17.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="886.78" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (21 samples, 0.04%; -0.01%)</title><rect x="504.7" y="181" width="0.5" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="507.71" y="191.5" ></text>
</g>
<g >
<title>operator new (152 samples, 0.32%; +0.00%)</title><rect x="1015.7" y="245" width="3.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1018.67" y="255.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (5 samples, 0.01%; -0.02%)</title><rect x="459.8" y="325" width="0.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="462.78" y="335.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (9 samples, 0.02%; +0.01%)</title><rect x="1168.5" y="469" width="0.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="1171.50" y="479.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (58 samples, 0.12%; +0.04%)</title><rect x="744.1" y="261" width="1.4" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="747.07" y="271.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (17 samples, 0.04%; +0.01%)</title><rect x="11.8" y="581" width="0.4" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="14.75" y="591.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (14 samples, 0.03%; +0.00%)</title><rect x="741.5" y="277" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="744.55" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (6 samples, 0.01%; +0.01%)</title><rect x="72.8" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="75.81" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (69 samples, 0.15%; +0.01%)</title><rect x="1055.2" y="309" width="1.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1058.15" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (21 samples, 0.04%; -0.01%)</title><rect x="240.4" y="213" width="0.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="243.45" y="223.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (86 samples, 0.18%; +0.01%)</title><rect x="796.4" y="149" width="2.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="799.44" y="159.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (8 samples, 0.02%; +0.01%)</title><rect x="1028.2" y="165" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1031.24" y="175.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (11 samples, 0.02%; 0.00%)</title><rect x="997.4" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1000.38" y="303.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (658 samples, 1.40%; -0.01%)</title><rect x="787.6" y="245" width="16.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="790.58" y="255.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (168 samples, 0.36%; +0.01%)</title><rect x="347.9" y="165" width="4.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="350.86" y="175.5" ></text>
</g>
<g >
<title>__tls_init (7 samples, 0.01%; 0.00%)</title><rect x="496.8" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="499.83" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (43 samples, 0.09%; -0.01%)</title><rect x="853.4" y="421" width="1.1" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="856.39" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (98 samples, 0.21%; +0.01%)</title><rect x="832.2" y="437" width="2.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="835.21" y="447.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (6 samples, 0.01%; +0.00%)</title><rect x="605.4" y="437" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="608.39" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (18 samples, 0.04%; -0.00%)</title><rect x="790.7" y="133" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="793.68" y="143.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (654 samples, 1.39%; +0.00%)</title><rect x="550.6" y="357" width="16.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="553.60" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (9 samples, 0.02%; +0.01%)</title><rect x="1072.8" y="277" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1075.85" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (40 samples, 0.08%; +0.02%)</title><rect x="275.3" y="293" width="1.0" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="278.34" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (7 samples, 0.01%; -0.01%)</title><rect x="512.2" y="309" width="0.2" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="515.20" y="319.5" ></text>
</g>
<g >
<title>main (46,006 samples, 97.60%; 0.00%)</title><rect x="24.1" y="613" width="1151.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.07" y="623.5" >main</text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (10 samples, 0.02%; +0.01%)</title><rect x="232.7" y="213" width="0.3" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="235.74" y="223.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (28 samples, 0.06%; -0.00%)</title><rect x="39.6" y="421" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="42.56" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.01%; -0.00%)</title><rect x="585.1" y="373" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="588.09" y="383.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (6 samples, 0.01%; -0.01%)</title><rect x="741.9" y="277" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="744.90" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (23 samples, 0.05%; +0.00%)</title><rect x="665.2" y="485" width="0.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="668.20" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (13 samples, 0.03%; -0.01%)</title><rect x="724.3" y="309" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="727.35" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (5 samples, 0.01%; -0.01%)</title><rect x="1114.0" y="357" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1116.95" y="367.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (116 samples, 0.25%; +0.01%)</title><rect x="352.3" y="165" width="2.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="355.29" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (62 samples, 0.13%; -0.00%)</title><rect x="1103.1" y="373" width="1.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1106.11" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (26 samples, 0.06%; +0.02%)</title><rect x="69.2" y="373" width="0.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="72.15" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (9 samples, 0.02%; -0.02%)</title><rect x="1046.3" y="213" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1049.31" y="223.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (19 samples, 0.04%; -0.06%)</title><rect x="173.7" y="133" width="0.4" height="15.0" fill="rgb(115,115,255)" rx="2" ry="2" />
<text  x="176.66" y="143.5" ></text>
</g>
<g >
<title>operator new (36 samples, 0.08%; +0.01%)</title><rect x="502.1" y="197" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="505.06" y="207.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (5 samples, 0.01%; 0.00%)</title><rect x="18.8" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.76" y="367.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (57 samples, 0.12%; -0.01%)</title><rect x="602.7" y="437" width="1.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="605.69" y="447.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (16 samples, 0.03%; +0.00%)</title><rect x="509.0" y="229" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="512.02" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (30 samples, 0.06%; -0.00%)</title><rect x="1047.1" y="229" width="0.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1050.09" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (6 samples, 0.01%; +0.01%)</title><rect x="244.8" y="213" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="247.83" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (12 samples, 0.03%; +0.01%)</title><rect x="600.9" y="437" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="603.89" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (189 samples, 0.40%; +0.01%)</title><rect x="1057.0" y="325" width="4.8" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="1060.03" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (7 samples, 0.01%; +0.00%)</title><rect x="276.3" y="293" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="279.34" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (37 samples, 0.08%; +0.02%)</title><rect x="133.5" y="245" width="0.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="136.48" y="255.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (251 samples, 0.53%; -0.02%)</title><rect x="1023.2" y="197" width="6.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1026.21" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (15 samples, 0.03%; +0.01%)</title><rect x="698.4" y="453" width="0.4" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="701.39" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (6 samples, 0.01%; +0.00%)</title><rect x="1142.9" y="501" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1145.94" y="511.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (9 samples, 0.02%; -0.01%)</title><rect x="823.8" y="261" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="826.78" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (4 samples, 0.01%; 0.00%)</title><rect x="1114.1" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.08" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (7 samples, 0.01%; +0.01%)</title><rect x="44.9" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="47.90" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (55 samples, 0.12%; 0.00%)</title><rect x="754.2" y="357" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="757.19" y="367.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (5 samples, 0.01%; +0.01%)</title><rect x="229.7" y="117" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="232.68" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (22 samples, 0.05%; +0.00%)</title><rect x="446.2" y="277" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="449.19" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.01%; +0.00%)</title><rect x="481.9" y="181" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="484.93" y="191.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (105 samples, 0.22%; +0.01%)</title><rect x="367.3" y="213" width="2.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="370.31" y="223.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (13 samples, 0.03%; 0.00%)</title><rect x="23.1" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.07" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (6 samples, 0.01%; +0.00%)</title><rect x="279.5" y="277" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="282.47" y="287.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (4 samples, 0.01%; -0.01%)</title><rect x="1094.4" y="245" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1097.43" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (425 samples, 0.90%; +0.01%)</title><rect x="555.8" y="325" width="10.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="558.83" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (39 samples, 0.08%; -0.00%)</title><rect x="720.8" y="389" width="1.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="723.79" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%; -0.01%)</title><rect x="298.5" y="261" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="301.50" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (5 samples, 0.01%; +0.01%)</title><rect x="644.4" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="647.44" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; -0.01%)</title><rect x="925.5" y="405" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="928.46" y="415.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (5 samples, 0.01%; +0.01%)</title><rect x="16.7" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="19.73" y="511.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (20 samples, 0.04%; +0.01%)</title><rect x="1042.0" y="277" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1044.96" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.01%; 0.00%)</title><rect x="609.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="612.65" y="415.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (38 samples, 0.08%; -0.01%)</title><rect x="746.6" y="405" width="1.0" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="749.63" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (4 samples, 0.01%; 0.00%)</title><rect x="19.3" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.34" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (4 samples, 0.01%; +0.00%)</title><rect x="641.4" y="453" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="644.44" y="463.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (24 samples, 0.05%; -0.02%)</title><rect x="242.6" y="181" width="0.6" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="245.60" y="191.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.02%; 0.00%)</title><rect x="915.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="918.37" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (91 samples, 0.19%; -0.01%)</title><rect x="826.0" y="341" width="2.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="828.98" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (7 samples, 0.01%; +0.00%)</title><rect x="709.5" y="501" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="712.45" y="511.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (30 samples, 0.06%; +0.00%)</title><rect x="567.9" y="357" width="0.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="570.92" y="367.5" ></text>
</g>
</g>
</svg>
