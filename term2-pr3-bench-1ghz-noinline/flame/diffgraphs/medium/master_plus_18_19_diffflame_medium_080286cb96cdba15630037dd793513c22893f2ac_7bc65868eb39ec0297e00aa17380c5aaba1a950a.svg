<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>service::storage_proxy::get_read_executor (1,856 samples, 3.86%; -0.03%)</title><rect x="1053.3" y="357" width="45.6" height="15.0" fill="rgb(159,159,255)" rx="2" ry="2" />
<text  x="1056.30" y="367.5" >serv..</text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.06%; +0.01%)</title><rect x="782.1" y="229" width="0.7" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="785.13" y="239.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (242 samples, 0.50%; 0.00%)</title><rect x="17.7" y="485" width="6.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.74" y="495.5" ></text>
</g>
<g >
<title>query_result_builder::consume (1,843 samples, 3.84%; -0.01%)</title><rect x="318.1" y="213" width="45.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="321.10" y="223.5" >quer..</text>
</g>
<g >
<title>operator new (30 samples, 0.06%; +0.00%)</title><rect x="501.5" y="197" width="0.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="504.49" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (16 samples, 0.03%; -0.01%)</title><rect x="763.2" y="357" width="0.4" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="766.21" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (6 samples, 0.01%; +0.01%)</title><rect x="933.0" y="405" width="0.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="935.97" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (20 samples, 0.04%; +0.02%)</title><rect x="1124.1" y="405" width="0.5" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="1127.10" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.04%; +0.01%)</title><rect x="1154.6" y="421" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1157.58" y="431.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (39 samples, 0.08%; +0.01%)</title><rect x="746.6" y="405" width="1.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="749.63" y="415.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (24 samples, 0.05%; 0.00%)</title><rect x="568.9" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="571.89" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (10 samples, 0.02%; +0.01%)</title><rect x="494.1" y="261" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="497.12" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (14 samples, 0.03%; +0.01%)</title><rect x="867.5" y="469" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="870.53" y="479.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (434 samples, 0.90%; -0.03%)</title><rect x="472.1" y="277" width="10.7" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="475.14" y="287.5" ></text>
</g>
<g >
<title>operator new (31 samples, 0.06%; +0.00%)</title><rect x="242.6" y="181" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="245.62" y="191.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (13 samples, 0.03%; -0.03%)</title><rect x="244.7" y="229" width="0.3" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="247.70" y="239.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (13 samples, 0.03%; +0.01%)</title><rect x="1003.4" y="293" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1006.39" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (21 samples, 0.04%; -0.00%)</title><rect x="600.9" y="437" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="603.95" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; -0.00%)</title><rect x="535.1" y="405" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="538.07" y="415.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (17 samples, 0.04%; -0.00%)</title><rect x="704.7" y="421" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="707.68" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="408.0" y="277" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="411.05" y="287.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (43 samples, 0.09%; +0.00%)</title><rect x="99.3" y="405" width="1.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="102.31" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (16 samples, 0.03%; -0.00%)</title><rect x="1030.3" y="133" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1033.29" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (5 samples, 0.01%; +0.00%)</title><rect x="218.4" y="197" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="221.44" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (53 samples, 0.11%; -0.01%)</title><rect x="853.2" y="421" width="1.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="856.21" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (9 samples, 0.02%; -0.01%)</title><rect x="18.6" y="261" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="21.62" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.02%; -0.03%)</title><rect x="821.5" y="293" width="0.2" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="824.48" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; +0.00%)</title><rect x="654.4" y="485" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="657.40" y="495.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (18 samples, 0.04%; +0.00%)</title><rect x="847.5" y="341" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="850.51" y="351.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (48 samples, 0.10%; -0.01%)</title><rect x="1093.9" y="309" width="1.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1096.86" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (5 samples, 0.01%; +0.01%)</title><rect x="1154.1" y="421" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1157.06" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (41 samples, 0.09%; 0.00%)</title><rect x="841.6" y="405" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="844.62" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; -0.00%)</title><rect x="654.2" y="469" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="657.20" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (90 samples, 0.19%; 0.00%)</title><rect x="1116.1" y="341" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.06" y="351.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (16 samples, 0.03%; +0.00%)</title><rect x="593.4" y="405" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="596.40" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (31 samples, 0.06%; +0.00%)</title><rect x="34.4" y="485" width="0.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="37.37" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (224 samples, 0.47%; +0.02%)</title><rect x="219.6" y="213" width="5.6" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="222.65" y="223.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (8 samples, 0.02%; +0.01%)</title><rect x="840.3" y="341" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="843.34" y="351.5" ></text>
</g>
<g >
<title>operator delete (21 samples, 0.04%; -0.00%)</title><rect x="610.0" y="421" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="613.01" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (80 samples, 0.17%; +0.01%)</title><rect x="438.4" y="261" width="2.0" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="441.41" y="271.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (27 samples, 0.06%; -0.01%)</title><rect x="728.3" y="405" width="0.7" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="731.33" y="415.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (12 samples, 0.02%; +0.00%)</title><rect x="742.0" y="277" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="744.99" y="287.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (21 samples, 0.04%; +0.02%)</title><rect x="308.8" y="165" width="0.5" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="311.79" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (11 samples, 0.02%; -0.01%)</title><rect x="547.6" y="421" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="550.59" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (123 samples, 0.26%; -0.01%)</title><rect x="1115.8" y="373" width="3.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1118.84" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (6 samples, 0.01%; -0.01%)</title><rect x="294.3" y="293" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="297.27" y="303.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.01%; +0.01%)</title><rect x="581.8" y="405" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="584.76" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (8 samples, 0.02%; +0.01%)</title><rect x="775.8" y="309" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="778.79" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (18 samples, 0.04%; -0.02%)</title><rect x="537.1" y="421" width="0.4" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="540.06" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (42 samples, 0.09%; +0.01%)</title><rect x="1159.8" y="453" width="1.0" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1162.81" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (5 samples, 0.01%; -0.01%)</title><rect x="26.4" y="517" width="0.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="29.36" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (469 samples, 0.98%; -0.00%)</title><rect x="270.9" y="325" width="11.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="273.91" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (40 samples, 0.08%; -0.00%)</title><rect x="1158.8" y="421" width="1.0" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1161.80" y="431.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (5 samples, 0.01%; -0.01%)</title><rect x="280.9" y="309" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="283.88" y="319.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (16 samples, 0.03%; -0.00%)</title><rect x="209.9" y="149" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="212.92" y="159.5" ></text>
</g>
<g >
<title>operator delete (31 samples, 0.06%; +0.01%)</title><rect x="1146.3" y="485" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1149.25" y="495.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (47 samples, 0.10%; -0.00%)</title><rect x="499.0" y="213" width="1.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="502.01" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (527 samples, 1.10%; +0.01%)</title><rect x="886.2" y="357" width="12.9" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="889.18" y="367.5" ></text>
</g>
<g >
<title>database::find_schema (218 samples, 0.45%; +0.01%)</title><rect x="819.8" y="373" width="5.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="822.83" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.00%)</title><rect x="818.7" y="357" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="821.68" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (423 samples, 0.88%; -0.05%)</title><rect x="496.2" y="261" width="10.4" height="15.0" fill="rgb(141,141,255)" rx="2" ry="2" />
<text  x="499.23" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (208 samples, 0.43%; +0.02%)</title><rect x="147.6" y="229" width="5.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="150.58" y="239.5" ></text>
</g>
<g >
<title>compound_type&lt; (143 samples, 0.30%; -0.01%)</title><rect x="922.5" y="373" width="3.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="925.46" y="383.5" ></text>
</g>
<g >
<title>operator delete (17 samples, 0.04%; +0.01%)</title><rect x="668.2" y="469" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="671.22" y="479.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (6 samples, 0.01%; 0.00%)</title><rect x="23.8" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.78" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (40 samples, 0.08%; +0.00%)</title><rect x="476.9" y="197" width="1.0" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="479.88" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (13 samples, 0.03%; -0.01%)</title><rect x="76.4" y="453" width="0.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="79.42" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="192.9" y="101" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="195.95" y="111.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (7 samples, 0.01%; -0.01%)</title><rect x="879.2" y="421" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="882.22" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (28 samples, 0.06%; -0.01%)</title><rect x="741.9" y="293" width="0.7" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="744.89" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (24 samples, 0.05%; +0.01%)</title><rect x="354.4" y="149" width="0.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="357.43" y="159.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (286 samples, 0.60%; +0.00%)</title><rect x="988.4" y="341" width="7.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="991.41" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (5 samples, 0.01%; +0.01%)</title><rect x="490.6" y="293" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="493.61" y="303.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1,220 samples, 2.54%; -0.06%)</title><rect x="332.6" y="181" width="29.9" height="15.0" fill="rgb(112,112,255)" rx="2" ry="2" />
<text  x="335.57" y="191.5" >wr..</text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (15 samples, 0.03%; -0.01%)</title><rect x="599.5" y="437" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="602.55" y="447.5" ></text>
</g>
<g >
<title>std::type_info::operator== (6 samples, 0.01%; +0.00%)</title><rect x="1003.6" y="277" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1006.56" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (19 samples, 0.04%; -0.02%)</title><rect x="250.0" y="277" width="0.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="253.01" y="287.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (6 samples, 0.01%; +0.00%)</title><rect x="719.6" y="453" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="722.59" y="463.5" ></text>
</g>
<g >
<title>compound_type&lt; (171 samples, 0.36%; +0.02%)</title><rect x="478.0" y="213" width="4.2" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="481.01" y="223.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (43 samples, 0.09%; +0.02%)</title><rect x="1070.8" y="293" width="1.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1073.77" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (20 samples, 0.04%; 0.00%)</title><rect x="704.2" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="707.16" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (20 samples, 0.04%; +0.02%)</title><rect x="445.9" y="277" width="0.4" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="448.85" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (11 samples, 0.02%; +0.01%)</title><rect x="142.2" y="261" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="145.22" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (29 samples, 0.06%; +0.01%)</title><rect x="243.6" y="229" width="0.7" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="246.62" y="239.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (11 samples, 0.02%; +0.01%)</title><rect x="317.8" y="213" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="320.83" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="40.9" y="437" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="43.85" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (7 samples, 0.01%; -0.02%)</title><rect x="770.4" y="357" width="0.1" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="773.36" y="367.5" ></text>
</g>
<g >
<title>sstring_hash::operator (26 samples, 0.05%; +0.00%)</title><rect x="827.4" y="309" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="830.40" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (32 samples, 0.07%; +0.04%)</title><rect x="834.4" y="357" width="0.8" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="837.37" y="367.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (30 samples, 0.06%; -0.00%)</title><rect x="223.4" y="165" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="226.43" y="175.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.01%; +0.00%)</title><rect x="155.7" y="229" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="158.71" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; -0.00%)</title><rect x="527.7" y="229" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="530.70" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (22 samples, 0.05%; +0.02%)</title><rect x="75.8" y="453" width="0.6" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="78.83" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (21 samples, 0.04%; +0.01%)</title><rect x="1072.5" y="293" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1075.46" y="303.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (8 samples, 0.02%; -0.03%)</title><rect x="615.3" y="421" width="0.2" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="618.29" y="431.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (267 samples, 0.56%; +0.00%)</title><rect x="739.6" y="373" width="6.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="742.63" y="383.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (323 samples, 0.67%; +0.01%)</title><rect x="1077.7" y="261" width="7.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1080.67" y="271.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (122 samples, 0.25%; +0.01%)</title><rect x="381.1" y="149" width="3.0" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="384.08" y="159.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (74 samples, 0.15%; +0.01%)</title><rect x="644.5" y="437" width="1.9" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="647.55" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (25 samples, 0.05%; 0.00%)</title><rect x="325.3" y="181" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="328.32" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (7 samples, 0.01%; 0.00%)</title><rect x="501.3" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="504.32" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (10 samples, 0.02%; +0.01%)</title><rect x="257.5" y="293" width="0.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="260.45" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (16 samples, 0.03%; +0.00%)</title><rect x="663.3" y="469" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="666.34" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (76 samples, 0.16%; +0.00%)</title><rect x="543.6" y="325" width="1.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="546.59" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (6 samples, 0.01%; 0.00%)</title><rect x="23.2" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.19" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (10 samples, 0.02%; +0.01%)</title><rect x="297.0" y="261" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="299.97" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5,065 samples, 10.54%; +0.01%)</title><rect x="289.9" y="373" width="124.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="292.92" y="383.5" >flat_mutation_r..</text>
</g>
<g >
<title>db::commitlog::add_entry (6 samples, 0.01%; 0.00%)</title><rect x="1140.6" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.58" y="319.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (19 samples, 0.04%; +0.00%)</title><rect x="846.8" y="341" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="849.83" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (15 samples, 0.03%; +0.00%)</title><rect x="1105.3" y="389" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1108.28" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (23 samples, 0.05%; -0.04%)</title><rect x="283.5" y="357" width="0.6" height="15.0" fill="rgb(153,153,255)" rx="2" ry="2" />
<text  x="286.49" y="367.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (5 samples, 0.01%; +0.01%)</title><rect x="995.4" y="341" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="998.43" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (23 samples, 0.05%; +0.02%)</title><rect x="755.0" y="325" width="0.5" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="757.98" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (9 samples, 0.02%; +0.01%)</title><rect x="169.1" y="133" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="172.12" y="143.5" ></text>
</g>
<g >
<title>operator new (60 samples, 0.12%; 0.00%)</title><rect x="750.8" y="405" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="753.83" y="415.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (22 samples, 0.05%; +0.01%)</title><rect x="420.0" y="421" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="423.01" y="431.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.01%; +0.00%)</title><rect x="789.3" y="213" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="792.30" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (9 samples, 0.02%; +0.01%)</title><rect x="1112.6" y="357" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1115.55" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (7 samples, 0.01%; 0.00%)</title><rect x="863.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.31" y="367.5" ></text>
</g>
<g >
<title>table::query (22,018 samples, 45.83%; +0.09%)</title><rect x="80.5" y="453" width="540.8" height="15.0" fill="rgb(255,81,81)" rx="2" ry="2" />
<text  x="83.50" y="463.5" >table::query</text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (12 samples, 0.02%; +0.00%)</title><rect x="452.1" y="325" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="455.14" y="335.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (14 samples, 0.03%; +0.02%)</title><rect x="423.5" y="373" width="0.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="426.52" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (67 samples, 0.14%; -0.04%)</title><rect x="393.4" y="213" width="1.7" height="15.0" fill="rgb(153,153,255)" rx="2" ry="2" />
<text  x="396.43" y="223.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (30 samples, 0.06%; 0.00%)</title><rect x="683.9" y="485" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.92" y="495.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (46 samples, 0.10%; -0.00%)</title><rect x="722.2" y="405" width="1.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="725.17" y="415.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; +0.00%)</title><rect x="741.5" y="277" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="744.50" y="287.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (112 samples, 0.23%; -0.01%)</title><rect x="992.7" y="293" width="2.7" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="995.66" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (66 samples, 0.14%; -0.01%)</title><rect x="504.8" y="245" width="1.6" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="507.80" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1,295 samples, 2.70%; +0.02%)</title><rect x="549.6" y="405" width="31.8" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="552.61" y="415.5" >fl..</text>
</g>
<g >
<title>partition_snapshot::versions (5 samples, 0.01%; +0.00%)</title><rect x="232.3" y="229" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="235.30" y="239.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (352 samples, 0.73%; +0.02%)</title><rect x="395.4" y="261" width="8.6" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="398.37" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.04%; 0.00%)</title><rect x="528.5" y="245" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="531.53" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (25 samples, 0.05%; +0.02%)</title><rect x="802.8" y="213" width="0.6" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="805.83" y="223.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (14 samples, 0.03%; -0.00%)</title><rect x="136.3" y="229" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="139.26" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (46 samples, 0.10%; -0.00%)</title><rect x="757.0" y="341" width="1.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="760.00" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (32 samples, 0.07%; -0.00%)</title><rect x="643.6" y="389" width="0.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="646.59" y="399.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (5 samples, 0.01%; 0.00%)</title><rect x="1095.5" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1098.53" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (65 samples, 0.14%; +0.00%)</title><rect x="647.1" y="437" width="1.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="650.12" y="447.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (4,729 samples, 9.84%; +0.01%)</title><rect x="420.6" y="421" width="116.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="423.55" y="431.5" >query::querier..</text>
</g>
<g >
<title>operator delete (83 samples, 0.17%; -0.02%)</title><rect x="404.8" y="245" width="2.0" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="407.78" y="255.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (7 samples, 0.01%; -0.00%)</title><rect x="847.0" y="325" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="850.00" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.00%)</title><rect x="586.6" y="389" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="589.65" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (12 samples, 0.02%; -0.01%)</title><rect x="811.6" y="293" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="814.58" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;query::result_memory_accounter&gt;::awaiter (6 samples, 0.01%; +0.01%)</title><rect x="602.6" y="437" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="605.59" y="447.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.03%; -0.00%)</title><rect x="651.3" y="453" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="654.30" y="463.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (72 samples, 0.15%; +0.12%)</title><rect x="1085.9" y="277" width="1.7" height="15.0" fill="rgb(255,31,31)" rx="2" ry="2" />
<text  x="1088.88" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (60 samples, 0.12%; -0.01%)</title><rect x="259.9" y="325" width="1.5" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="262.93" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (7 samples, 0.01%; +0.00%)</title><rect x="1102.2" y="341" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1105.24" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (30 samples, 0.06%; +0.02%)</title><rect x="266.1" y="325" width="0.7" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="269.07" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (12 samples, 0.02%; 0.00%)</title><rect x="825.7" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="828.73" y="335.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (97 samples, 0.20%; +0.00%)</title><rect x="663.1" y="485" width="2.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="666.09" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (45 samples, 0.09%; +0.09%)</title><rect x="960.6" y="389" width="1.1" height="15.0" fill="rgb(255,72,72)" rx="2" ry="2" />
<text  x="963.60" y="399.5" ></text>
</g>
<g >
<title>mutation_querier::consume (5 samples, 0.01%; -0.00%)</title><rect x="684.2" y="277" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="687.19" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (46,929 samples, 97.69%; -0.00%)</title><rect x="24.3" y="533" width="1152.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="27.35" y="543.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>query::partition_slice::row_ranges (5 samples, 0.01%; +0.00%)</title><rect x="312.9" y="165" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="315.89" y="175.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (30 samples, 0.06%; -0.01%)</title><rect x="1061.4" y="277" width="0.7" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1064.36" y="287.5" ></text>
</g>
<g >
<title>operator delete (38 samples, 0.08%; 0.00%)</title><rect x="587.1" y="389" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="590.14" y="399.5" ></text>
</g>
<g >
<title>operator delete (14 samples, 0.03%; 0.00%)</title><rect x="45.5" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.52" y="495.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%; +0.00%)</title><rect x="773.9" y="309" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="776.87" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (93 samples, 0.19%; +0.02%)</title><rect x="674.5" y="485" width="2.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="677.54" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (88 samples, 0.18%; +0.03%)</title><rect x="659.4" y="453" width="2.1" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="662.38" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (5 samples, 0.01%; +0.01%)</title><rect x="493.4" y="277" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="496.36" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (86 samples, 0.18%; -0.01%)</title><rect x="234.5" y="213" width="2.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="237.53" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (11 samples, 0.02%; +0.02%)</title><rect x="1047.3" y="277" width="0.2" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1050.26" y="287.5" ></text>
</g>
<g >
<title>validation::validate_column_family (349 samples, 0.73%; -0.01%)</title><rect x="819.7" y="389" width="8.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="822.66" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (6 samples, 0.01%; +0.00%)</title><rect x="859.8" y="485" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="862.79" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (25 samples, 0.05%; 0.00%)</title><rect x="862.9" y="437" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.89" y="447.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (5 samples, 0.01%; -0.01%)</title><rect x="743.8" y="277" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="746.81" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (30 samples, 0.06%; -0.01%)</title><rect x="272.4" y="293" width="0.7" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="275.39" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (7 samples, 0.01%; +0.00%)</title><rect x="1098.9" y="357" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1101.89" y="367.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (21 samples, 0.04%; +0.01%)</title><rect x="1103.6" y="357" width="0.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1106.64" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (8 samples, 0.02%; 0.00%)</title><rect x="258.2" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="261.19" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (9 samples, 0.02%; +0.01%)</title><rect x="267.0" y="341" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="270.01" y="351.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (7 samples, 0.01%; +0.01%)</title><rect x="1033.1" y="197" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1036.09" y="207.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (359 samples, 0.75%; +0.01%)</title><rect x="66.3" y="453" width="8.9" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="69.35" y="463.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (7,011 samples, 14.59%; -0.04%)</title><rect x="113.0" y="373" width="172.3" height="15.0" fill="rgb(156,156,255)" rx="2" ry="2" />
<text  x="116.04" y="383.5" >seastar::repeat&lt;mergin..</text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (33 samples, 0.07%; 0.00%)</title><rect x="1140.8" y="469" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.75" y="479.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (8 samples, 0.02%; +0.01%)</title><rect x="504.4" y="229" width="0.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="507.36" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (6 samples, 0.01%; +0.00%)</title><rect x="1115.6" y="373" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1118.57" y="383.5" ></text>
</g>
<g >
<title>operator new (82 samples, 0.17%; +0.00%)</title><rect x="1066.4" y="325" width="2.0" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1069.40" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="1173.3" y="421" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1176.30" y="431.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (16 samples, 0.03%; +0.00%)</title><rect x="745.5" y="261" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="748.45" y="271.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::touch (7 samples, 0.01%; -0.00%)</title><rect x="729.1" y="421" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="732.14" y="431.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (1,054 samples, 2.19%; -0.00%)</title><rect x="781.1" y="293" width="25.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="784.12" y="303.5" >s..</text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (46 samples, 0.10%; +0.00%)</title><rect x="18.1" y="309" width="1.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="21.13" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (5 samples, 0.01%; -0.03%)</title><rect x="97.8" y="405" width="0.2" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="100.84" y="415.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (58 samples, 0.12%; +0.01%)</title><rect x="215.0" y="149" width="1.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="217.98" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (28 samples, 0.06%; +0.00%)</title><rect x="660.9" y="437" width="0.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="663.86" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::execution_stage_manager::flush (5 samples, 0.01%; +0.00%)</title><rect x="1175.6" y="501" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1178.63" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (52 samples, 0.11%; +0.01%)</title><rect x="643.1" y="405" width="1.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="646.10" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (23 samples, 0.05%; -0.00%)</title><rect x="1158.0" y="357" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1160.97" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (8 samples, 0.02%; +0.01%)</title><rect x="249.8" y="277" width="0.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="252.81" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (85 samples, 0.18%; -0.01%)</title><rect x="575.0" y="357" width="2.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="578.01" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (8 samples, 0.02%; 0.00%)</title><rect x="25.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.75" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,401 samples, 9.16%; -0.01%)</title><rect x="141.7" y="277" width="108.1" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="144.68" y="287.5" >logalloc::all..</text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (99 samples, 0.21%; -0.01%)</title><rect x="952.7" y="389" width="2.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="955.74" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (45 samples, 0.09%; 0.00%)</title><rect x="1160.8" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1163.84" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (7 samples, 0.01%; +0.01%)</title><rect x="987.1" y="277" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="990.13" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (9 samples, 0.02%; -0.01%)</title><rect x="425.3" y="357" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="428.32" y="367.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (22 samples, 0.05%; +0.01%)</title><rect x="1172.8" y="421" width="0.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1175.76" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (43 samples, 0.09%; +0.01%)</title><rect x="95.9" y="421" width="1.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="98.90" y="431.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (65 samples, 0.14%; +0.03%)</title><rect x="10.7" y="581" width="1.6" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="13.74" y="591.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (31 samples, 0.06%; +0.00%)</title><rect x="799.4" y="101" width="0.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="802.39" y="111.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (164 samples, 0.34%; -0.00%)</title><rect x="447.4" y="293" width="4.0" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="450.35" y="303.5" ></text>
</g>
<g >
<title>table::as_mutation_source (123 samples, 0.26%; +0.00%)</title><rect x="617.8" y="437" width="3.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="620.82" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (52 samples, 0.11%; -0.00%)</title><rect x="1164.4" y="469" width="1.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1167.38" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (7 samples, 0.01%; +0.01%)</title><rect x="776.0" y="309" width="0.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="778.98" y="319.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (53 samples, 0.11%; +0.00%)</title><rect x="799.3" y="117" width="1.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="802.32" y="127.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (219 samples, 0.46%; +0.01%)</title><rect x="1068.6" y="325" width="5.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1071.58" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (32 samples, 0.07%; -0.03%)</title><rect x="1147.7" y="485" width="0.8" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="1150.70" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (10 samples, 0.02%; -0.00%)</title><rect x="437.5" y="261" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="440.50" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (19 samples, 0.04%; +0.03%)</title><rect x="579.5" y="389" width="0.5" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="582.53" y="399.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (94 samples, 0.20%; -0.01%)</title><rect x="587.0" y="405" width="2.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="589.97" y="415.5" ></text>
</g>
<g >
<title>validation::validate_column_family (21 samples, 0.04%; +0.02%)</title><rect x="828.8" y="405" width="0.5" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="831.80" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (20 samples, 0.04%; +0.02%)</title><rect x="532.2" y="341" width="0.5" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="535.24" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (12 samples, 0.02%; +0.01%)</title><rect x="948.2" y="421" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="951.22" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (83 samples, 0.17%; -0.01%)</title><rect x="1167.0" y="485" width="2.0" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="1170.01" y="495.5" ></text>
</g>
<g >
<title>operator delete (19 samples, 0.04%; -0.01%)</title><rect x="667.4" y="469" width="0.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="670.39" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (44 samples, 0.09%; -0.02%)</title><rect x="776.2" y="309" width="1.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="779.23" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (16 samples, 0.03%; -0.01%)</title><rect x="228.3" y="229" width="0.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="231.32" y="239.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (15 samples, 0.03%; +0.01%)</title><rect x="1000.2" y="261" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1003.25" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (30 samples, 0.06%; +0.02%)</title><rect x="1149.2" y="469" width="0.8" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1152.22" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (7 samples, 0.01%; 0.00%)</title><rect x="899.9" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="902.86" y="367.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (5 samples, 0.01%; -0.01%)</title><rect x="659.1" y="469" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="662.11" y="479.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (5,541 samples, 11.53%; -0.01%)</title><rect x="718.8" y="469" width="136.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="721.75" y="479.5" >single_node_cql_e..</text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (5 samples, 0.01%; -0.00%)</title><rect x="897.5" y="309" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="900.50" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (5 samples, 0.01%; 0.00%)</title><rect x="884.0" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.99" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (31 samples, 0.06%; +0.00%)</title><rect x="1140.8" y="325" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1143.80" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (57 samples, 0.12%; +0.03%)</title><rect x="750.9" y="389" width="1.4" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="753.91" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (30 samples, 0.06%; +0.01%)</title><rect x="491.0" y="277" width="0.7" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="494.00" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (5 samples, 0.01%; 0.00%)</title><rect x="23.4" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.36" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (383 samples, 0.80%; -0.01%)</title><rect x="537.5" y="421" width="9.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="540.55" y="431.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (7 samples, 0.01%; -0.00%)</title><rect x="816.9" y="389" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="819.93" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (7 samples, 0.01%; +0.00%)</title><rect x="1027.2" y="197" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1030.19" y="207.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (13 samples, 0.03%; +0.00%)</title><rect x="19.9" y="341" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="22.92" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (857 samples, 1.78%; -0.01%)</title><rect x="884.3" y="405" width="21.0" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="887.26" y="415.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (7 samples, 0.01%; +0.00%)</title><rect x="597.1" y="421" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="600.06" y="431.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (5 samples, 0.01%; 0.00%)</title><rect x="241.6" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="244.58" y="223.5" ></text>
</g>
<g >
<title>operator delete (34 samples, 0.07%; +0.01%)</title><rect x="810.1" y="309" width="0.8" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="813.08" y="319.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.09%; 0.00%)</title><rect x="1139.7" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.74" y="479.5" ></text>
</g>
<g >
<title>operator delete (32 samples, 0.07%; +0.00%)</title><rect x="662.0" y="485" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="665.03" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="718.6" y="469" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="721.63" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (19 samples, 0.04%; +0.03%)</title><rect x="844.2" y="373" width="0.4" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="847.17" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::done (6 samples, 0.01%; -0.01%)</title><rect x="693.2" y="453" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="696.18" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (7 samples, 0.01%; +0.01%)</title><rect x="115.0" y="357" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="117.98" y="367.5" ></text>
</g>
<g >
<title>operator delete (15 samples, 0.03%; -0.00%)</title><rect x="37.7" y="453" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="40.66" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (16 samples, 0.03%; -0.01%)</title><rect x="902.2" y="309" width="0.4" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="905.22" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (30 samples, 0.06%; -0.00%)</title><rect x="22.8" y="437" width="0.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="25.77" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (11 samples, 0.02%; +0.00%)</title><rect x="38.3" y="421" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="41.35" y="431.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (15 samples, 0.03%; +0.01%)</title><rect x="849.9" y="389" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="852.87" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (46 samples, 0.10%; -0.00%)</title><rect x="754.4" y="357" width="1.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="757.42" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (6 samples, 0.01%; +0.01%)</title><rect x="601.5" y="437" width="0.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="604.46" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (17 samples, 0.04%; +0.01%)</title><rect x="683.3" y="485" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="686.33" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (65 samples, 0.14%; -0.00%)</title><rect x="942.0" y="373" width="1.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="944.96" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (17 samples, 0.04%; -0.01%)</title><rect x="942.6" y="325" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="945.62" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (6 samples, 0.01%; +0.00%)</title><rect x="404.1" y="261" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="407.14" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (9 samples, 0.02%; 0.00%)</title><rect x="265.7" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="268.66" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (19 samples, 0.04%; -0.02%)</title><rect x="1041.3" y="229" width="0.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1044.27" y="239.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (20 samples, 0.04%; -0.01%)</title><rect x="598.4" y="405" width="0.5" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="601.39" y="415.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (14 samples, 0.03%; +0.02%)</title><rect x="573.5" y="341" width="0.3" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="576.46" y="351.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (26 samples, 0.05%; +0.01%)</title><rect x="502.3" y="197" width="0.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="505.27" y="207.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (21 samples, 0.04%; -0.02%)</title><rect x="502.4" y="181" width="0.5" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="505.37" y="191.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (73 samples, 0.15%; -0.02%)</title><rect x="642.8" y="437" width="1.7" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="645.75" y="447.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (14 samples, 0.03%; -0.01%)</title><rect x="727.9" y="293" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="730.89" y="303.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (11 samples, 0.02%; 0.00%)</title><rect x="552.2" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="555.21" y="351.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (5 samples, 0.01%; -0.00%)</title><rect x="328.0" y="181" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="330.97" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (24 samples, 0.05%; +0.00%)</title><rect x="1046.7" y="261" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1049.67" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (150 samples, 0.31%; -0.01%)</title><rect x="935.4" y="405" width="3.7" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="938.38" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (36 samples, 0.07%; +0.00%)</title><rect x="1018.2" y="229" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1021.18" y="239.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (34 samples, 0.07%; -0.00%)</title><rect x="926.1" y="389" width="0.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="929.07" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (77 samples, 0.16%; -0.03%)</title><rect x="479.5" y="197" width="1.9" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="482.50" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (5 samples, 0.01%; 0.00%)</title><rect x="700.9" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.89" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (24 samples, 0.05%; -0.01%)</title><rect x="866.9" y="469" width="0.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="869.94" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (7 samples, 0.01%; -0.01%)</title><rect x="408.9" y="277" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="411.91" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (114 samples, 0.24%; 0.00%)</title><rect x="19.4" y="373" width="2.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.38" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (15 samples, 0.03%; +0.00%)</title><rect x="1114.3" y="373" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1117.34" y="383.5" ></text>
</g>
<g >
<title>operator new (44 samples, 0.09%; -0.01%)</title><rect x="841.5" y="421" width="1.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="844.54" y="431.5" ></text>
</g>
<g >
<title>database::do_apply (40 samples, 0.08%; -0.00%)</title><rect x="1139.7" y="341" width="1.0" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1142.74" y="351.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (16 samples, 0.03%; +0.03%)</title><rect x="557.5" y="309" width="0.4" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="560.54" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="570.2" y="325" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="573.24" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (7 samples, 0.01%; +0.01%)</title><rect x="733.4" y="389" width="0.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="736.37" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (10 samples, 0.02%; +0.01%)</title><rect x="55.6" y="469" width="0.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="58.59" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="982.5" y="357" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="985.51" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (174 samples, 0.36%; +0.04%)</title><rect x="212.7" y="165" width="4.2" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="215.67" y="175.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (20 samples, 0.04%; -0.00%)</title><rect x="947.1" y="405" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="950.14" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (8 samples, 0.02%; -0.00%)</title><rect x="403.7" y="213" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="406.70" y="223.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (33 samples, 0.07%; 0.00%)</title><rect x="1140.8" y="373" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.75" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (10 samples, 0.02%; 0.00%)</title><rect x="1093.3" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1096.29" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (10 samples, 0.02%; +0.01%)</title><rect x="831.0" y="421" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="834.03" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (12 samples, 0.02%; -0.01%)</title><rect x="401.9" y="197" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="404.86" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (19 samples, 0.04%; -0.01%)</title><rect x="545.0" y="309" width="0.5" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="547.99" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (95 samples, 0.20%; -0.03%)</title><rect x="798.3" y="133" width="2.3" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="801.29" y="143.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (22 samples, 0.05%; 0.00%)</title><rect x="827.5" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="830.47" y="303.5" ></text>
</g>
<g >
<title>operator new (14 samples, 0.03%; -0.00%)</title><rect x="293.0" y="309" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="296.02" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (21 samples, 0.04%; -0.01%)</title><rect x="412.9" y="261" width="0.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="415.89" y="271.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (18 samples, 0.04%; +0.01%)</title><rect x="808.6" y="277" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="811.63" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (11 samples, 0.02%; +0.01%)</title><rect x="909.3" y="341" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="912.34" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,326 samples, 4.84%; +0.02%)</title><rect x="161.6" y="213" width="57.1" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="164.58" y="223.5" >logall..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (398 samples, 0.83%; -0.06%)</title><rect x="557.5" y="325" width="9.8" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="560.52" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.02%; -0.00%)</title><rect x="918.7" y="341" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="921.72" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (20 samples, 0.04%; +0.02%)</title><rect x="1037.4" y="181" width="0.5" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1040.41" y="191.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (7 samples, 0.01%; +0.01%)</title><rect x="1058.6" y="325" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1061.61" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (17 samples, 0.04%; +0.00%)</title><rect x="695.9" y="469" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="698.86" y="479.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (12 samples, 0.02%; -0.01%)</title><rect x="560.2" y="293" width="0.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="563.17" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.01%)</title><rect x="920.5" y="357" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="923.54" y="367.5" ></text>
</g>
<g >
<title>database::has_keyspace (115 samples, 0.24%; +0.01%)</title><rect x="825.4" y="357" width="2.8" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="828.41" y="367.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (1,618 samples, 3.37%; +0.00%)</title><rect x="772.4" y="341" width="39.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="775.45" y="351.5" >ser..</text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (33 samples, 0.07%; -0.01%)</title><rect x="365.6" y="165" width="0.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="368.58" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (5 samples, 0.01%; 0.00%)</title><rect x="577.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="580.44" y="351.5" ></text>
</g>
<g >
<title>service::client_state::has_access (10 samples, 0.02%; 0.00%)</title><rect x="23.7" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.71" y="447.5" ></text>
</g>
<g >
<title>__tls_init (5 samples, 0.01%; +0.01%)</title><rect x="142.4" y="245" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="145.37" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (56 samples, 0.12%; +0.00%)</title><rect x="558.0" y="309" width="1.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="561.01" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (67 samples, 0.14%; +0.01%)</title><rect x="741.1" y="309" width="1.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="744.06" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (26 samples, 0.05%; +0.03%)</title><rect x="620.0" y="405" width="0.6" height="15.0" fill="rgb(255,159,159)" rx="2" ry="2" />
<text  x="622.96" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (94 samples, 0.20%; +0.02%)</title><rect x="977.9" y="325" width="2.3" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="980.90" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (12 samples, 0.02%; -0.03%)</title><rect x="548.3" y="405" width="0.3" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="551.26" y="415.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (6 samples, 0.01%; +0.00%)</title><rect x="23.8" y="341" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="26.78" y="351.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (5 samples, 0.01%; +0.01%)</title><rect x="61.7" y="453" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="64.66" y="463.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (553 samples, 1.15%; -0.00%)</title><rect x="732.6" y="405" width="13.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="735.63" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (12 samples, 0.02%; -0.01%)</title><rect x="690.2" y="453" width="0.3" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="693.16" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (123 samples, 0.26%; -0.00%)</title><rect x="1048.0" y="261" width="3.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1051.00" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (72 samples, 0.15%; -0.00%)</title><rect x="807.3" y="293" width="1.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="810.30" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (6 samples, 0.01%; +0.01%)</title><rect x="25.6" y="517" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="28.57" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.02%; -0.01%)</title><rect x="651.3" y="437" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="654.35" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (84 samples, 0.17%; -0.00%)</title><rect x="833.6" y="405" width="2.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="836.59" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::never_speculating_read_executor&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="982.6" y="357" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="985.64" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (33 samples, 0.07%; +0.01%)</title><rect x="511.6" y="261" width="0.8" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="514.56" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (16 samples, 0.03%; +0.02%)</title><rect x="528.1" y="245" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="531.07" y="255.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (66 samples, 0.14%; +0.00%)</title><rect x="1162.7" y="469" width="1.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1165.73" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (7 samples, 0.01%; 0.00%)</title><rect x="863.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.31" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.06%; -0.00%)</title><rect x="501.6" y="181" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="504.56" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (321 samples, 0.67%; -0.00%)</title><rect x="496.7" y="245" width="7.9" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="499.67" y="255.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (295 samples, 0.61%; +0.01%)</title><rect x="475.5" y="229" width="7.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="478.48" y="239.5" ></text>
</g>
<g >
<title>db::is_serial_consistency (7 samples, 0.01%; +0.01%)</title><rect x="1138.4" y="437" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1141.42" y="447.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (19 samples, 0.04%; +0.01%)</title><rect x="1094.4" y="261" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1097.42" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (28 samples, 0.06%; 0.00%)</title><rect x="683.9" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.92" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (28 samples, 0.06%; -0.02%)</title><rect x="764.2" y="341" width="0.7" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="767.17" y="351.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (76 samples, 0.16%; +0.02%)</title><rect x="787.0" y="181" width="1.9" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="790.01" y="191.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (6 samples, 0.01%; -0.01%)</title><rect x="693.0" y="437" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="696.03" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (5 samples, 0.01%; +0.01%)</title><rect x="860.0" y="485" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="863.02" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (12 samples, 0.02%; +0.01%)</title><rect x="600.7" y="437" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="603.65" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (57 samples, 0.12%; +0.01%)</title><rect x="1022.0" y="213" width="1.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1025.01" y="223.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (6 samples, 0.01%; -0.02%)</title><rect x="106.2" y="421" width="0.1" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="109.17" y="431.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (86 samples, 0.18%; +0.01%)</title><rect x="762.9" y="389" width="2.1" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="765.87" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (9 samples, 0.02%; +0.00%)</title><rect x="275.8" y="293" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="278.75" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (14 samples, 0.03%; -0.00%)</title><rect x="509.1" y="309" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="512.13" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (16 samples, 0.03%; +0.01%)</title><rect x="702.0" y="437" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="705.02" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (7 samples, 0.01%; +0.01%)</title><rect x="577.6" y="357" width="0.1" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="580.56" y="367.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (7 samples, 0.01%; +0.01%)</title><rect x="302.9" y="229" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="305.94" y="239.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (43 samples, 0.09%; -0.02%)</title><rect x="225.2" y="229" width="1.1" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="228.20" y="239.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (148 samples, 0.31%; -0.00%)</title><rect x="844.6" y="421" width="3.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="847.64" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (216 samples, 0.45%; -0.02%)</title><rect x="203.4" y="133" width="5.3" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="206.41" y="143.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (49 samples, 0.10%; -0.03%)</title><rect x="1132.0" y="389" width="1.2" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="1135.03" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (11 samples, 0.02%; 0.00%)</title><rect x="689.9" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.89" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (356 samples, 0.74%; +0.02%)</title><rect x="1024.6" y="213" width="8.8" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1027.64" y="223.5" ></text>
</g>
<g >
<title>sstring_hash::operator (30 samples, 0.06%; 0.00%)</title><rect x="840.6" y="373" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="843.64" y="383.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (10 samples, 0.02%; 0.00%)</title><rect x="1140.9" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.92" y="239.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (8 samples, 0.02%; 0.00%)</title><rect x="19.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.95" y="335.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (6 samples, 0.01%; -0.01%)</title><rect x="79.3" y="453" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="82.27" y="463.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (4,198 samples, 8.74%; -0.01%)</title><rect x="729.4" y="437" width="103.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="732.36" y="447.5" >cql3::query_..</text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%; +0.00%)</title><rect x="567.1" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="570.15" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (5 samples, 0.01%; +0.00%)</title><rect x="276.4" y="277" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="279.39" y="287.5" ></text>
</g>
<g >
<title>operator new (35 samples, 0.07%; +0.00%)</title><rect x="901.0" y="325" width="0.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="904.04" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (33 samples, 0.07%; 0.00%)</title><rect x="22.7" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.75" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (20 samples, 0.04%; +0.00%)</title><rect x="93.9" y="421" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="96.86" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (6 samples, 0.01%; -0.00%)</title><rect x="138.6" y="261" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="141.64" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (19 samples, 0.04%; -0.02%)</title><rect x="774.8" y="277" width="0.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="777.83" y="287.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (6 samples, 0.01%; 0.00%)</title><rect x="684.7" y="501" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.68" y="511.5" ></text>
</g>
<g >
<title>memtable::apply (31 samples, 0.06%; 0.00%)</title><rect x="1139.8" y="261" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.79" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (30 samples, 0.06%; +0.00%)</title><rect x="630.7" y="469" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="633.67" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (6,052 samples, 12.60%; -0.02%)</title><rect x="958.0" y="405" width="148.6" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="960.97" y="415.5" >service::storage_p..</text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (15 samples, 0.03%; -0.01%)</title><rect x="954.1" y="309" width="0.4" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="957.09" y="319.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (7 samples, 0.01%; -0.00%)</title><rect x="980.2" y="341" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="983.20" y="351.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (11 samples, 0.02%; +0.00%)</title><rect x="862.3" y="421" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="865.28" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.09%; 0.00%)</title><rect x="1139.7" y="373" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.74" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (20 samples, 0.04%; +0.04%)</title><rect x="833.1" y="405" width="0.5" height="15.0" fill="rgb(255,153,153)" rx="2" ry="2" />
<text  x="836.09" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (70 samples, 0.15%; +0.00%)</title><rect x="1056.9" y="325" width="1.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1059.89" y="335.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (5 samples, 0.01%; +0.00%)</title><rect x="925.6" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="928.62" y="335.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (281 samples, 0.58%; +0.01%)</title><rect x="571.5" y="373" width="6.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="574.54" y="383.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (6 samples, 0.01%; -0.02%)</title><rect x="402.2" y="197" width="0.1" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="405.15" y="207.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (12 samples, 0.02%; +0.00%)</title><rect x="407.3" y="229" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="410.26" y="239.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (223 samples, 0.46%; 0.00%)</title><rect x="723.6" y="421" width="5.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.62" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (20 samples, 0.04%; -0.00%)</title><rect x="925.1" y="325" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="928.13" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (6 samples, 0.01%; -0.00%)</title><rect x="567.6" y="341" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="570.61" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (49 samples, 0.10%; +0.01%)</title><rect x="917.5" y="325" width="1.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="920.52" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (7 samples, 0.01%; -0.00%)</title><rect x="507.5" y="277" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="510.51" y="287.5" ></text>
</g>
<g >
<title>seastar::gate::enter (5 samples, 0.01%; +0.01%)</title><rect x="602.3" y="437" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="605.35" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (5 samples, 0.01%; +0.01%)</title><rect x="621.0" y="437" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="624.04" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (7 samples, 0.01%; 0.00%)</title><rect x="848.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="851.10" y="415.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (5 samples, 0.01%; -0.01%)</title><rect x="996.0" y="325" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="999.02" y="335.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (6 samples, 0.01%; +0.00%)</title><rect x="304.2" y="197" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="307.24" y="207.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (5 samples, 0.01%; +0.01%)</title><rect x="1033.7" y="213" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1036.70" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (47 samples, 0.10%; +0.07%)</title><rect x="594.7" y="357" width="1.1" height="15.0" fill="rgb(255,106,106)" rx="2" ry="2" />
<text  x="597.66" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (24 samples, 0.05%; -0.00%)</title><rect x="408.3" y="277" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="411.32" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (7 samples, 0.01%; +0.00%)</title><rect x="524.2" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="527.23" y="319.5" ></text>
</g>
<g >
<title>__start_context (15 samples, 0.03%; 0.00%)</title><rect x="10.1" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.12" y="591.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.05%; -0.01%)</title><rect x="697.1" y="485" width="0.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="700.09" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (10 samples, 0.02%; -0.00%)</title><rect x="711.1" y="501" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="714.06" y="511.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (242 samples, 0.50%; -0.14%)</title><rect x="251.5" y="293" width="6.0" height="15.0" fill="rgb(0,0,255)" rx="2" ry="2" />
<text  x="254.51" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.02%; +0.01%)</title><rect x="806.0" y="277" width="0.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="808.95" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (11 samples, 0.02%; +0.01%)</title><rect x="1121.5" y="405" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1124.52" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (14 samples, 0.03%; 0.00%)</title><rect x="10.1" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.12" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (13 samples, 0.03%; 0.00%)</title><rect x="623.8" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="626.84" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.00%)</title><rect x="588.0" y="373" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="590.95" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (28 samples, 0.06%; +0.01%)</title><rect x="547.9" y="421" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="550.86" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (81 samples, 0.17%; +0.02%)</title><rect x="1066.4" y="309" width="2.0" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="1069.42" y="319.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (8 samples, 0.02%; +0.00%)</title><rect x="47.3" y="485" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="50.31" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (47 samples, 0.10%; -0.01%)</title><rect x="787.6" y="165" width="1.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="790.58" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (49 samples, 0.10%; +0.00%)</title><rect x="531.0" y="341" width="1.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="534.04" y="351.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (80 samples, 0.17%; +0.01%)</title><rect x="1131.3" y="405" width="1.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1134.27" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (32 samples, 0.07%; 0.00%)</title><rect x="1140.8" y="341" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.77" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (12 samples, 0.02%; -0.01%)</title><rect x="1051.0" y="277" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1054.02" y="287.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (122 samples, 0.25%; +0.01%)</title><rect x="702.7" y="437" width="3.0" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="705.66" y="447.5" ></text>
</g>
<g >
<title>database::find_column_family (50 samples, 0.10%; +0.01%)</title><rect x="820.5" y="341" width="1.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="823.47" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (6 samples, 0.01%; +0.00%)</title><rect x="599.3" y="421" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="602.30" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (13 samples, 0.03%; +0.00%)</title><rect x="647.8" y="389" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="650.79" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (31 samples, 0.06%; -0.00%)</title><rect x="938.2" y="325" width="0.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="941.25" y="335.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (8 samples, 0.02%; -0.00%)</title><rect x="245.0" y="229" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="248.02" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (13 samples, 0.03%; +0.01%)</title><rect x="453.4" y="325" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="456.42" y="335.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,549 samples, 9.47%; -0.11%)</title><rect x="297.5" y="293" width="111.7" height="15.0" fill="rgb(47,47,255)" rx="2" ry="2" />
<text  x="300.49" y="303.5" >seastar::repe..</text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (31 samples, 0.06%; +0.01%)</title><rect x="303.3" y="213" width="0.7" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="306.29" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (11 samples, 0.02%; +0.01%)</title><rect x="100.1" y="389" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="103.10" y="399.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (8 samples, 0.02%; +0.00%)</title><rect x="155.0" y="213" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="158.02" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (8 samples, 0.02%; 0.00%)</title><rect x="608.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="611.39" y="447.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (16 samples, 0.03%; +0.01%)</title><rect x="1062.7" y="341" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1065.74" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;mutation_fragment*&gt;::take_value (10 samples, 0.02%; +0.00%)</title><rect x="418.9" y="405" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="421.88" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="1144.0" y="501" width="0.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1147.04" y="511.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (88 samples, 0.18%; -0.00%)</title><rect x="794.2" y="149" width="2.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="797.19" y="159.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (17 samples, 0.04%; +0.01%)</title><rect x="631.8" y="453" width="0.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="634.82" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (13 samples, 0.03%; +0.01%)</title><rect x="649.9" y="469" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="652.93" y="479.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (113 samples, 0.24%; -0.04%)</title><rect x="347.3" y="165" width="2.7" height="15.0" fill="rgb(153,153,255)" rx="2" ry="2" />
<text  x="350.26" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (13 samples, 0.03%; +0.00%)</title><rect x="663.8" y="469" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="666.83" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (10 samples, 0.02%; +0.00%)</title><rect x="932.4" y="405" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="935.40" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (284 samples, 0.59%; -0.01%)</title><rect x="625.3" y="501" width="7.0" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="628.31" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (18 samples, 0.04%; +0.01%)</title><rect x="777.3" y="309" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="780.31" y="319.5" ></text>
</g>
<g >
<title>dht::shard_of (25 samples, 0.05%; -0.00%)</title><rect x="1006.9" y="277" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1009.86" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (10 samples, 0.02%; +0.01%)</title><rect x="1173.6" y="421" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1176.59" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (11 samples, 0.02%; +0.00%)</title><rect x="801.3" y="197" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="804.33" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (33 samples, 0.07%; -0.02%)</title><rect x="670.4" y="437" width="0.8" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="673.41" y="447.5" ></text>
</g>
<g >
<title>seastar::app_template::run (46,929 samples, 97.69%; 0.00%)</title><rect x="24.3" y="581" width="1152.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.35" y="591.5" >seastar::app_template::run</text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (23 samples, 0.05%; -0.00%)</title><rect x="364.4" y="181" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="367.38" y="191.5" ></text>
</g>
<g >
<title>database::query (153 samples, 0.32%; +0.04%)</title><rect x="43.8" y="501" width="3.7" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="46.75" y="511.5" ></text>
</g>
<g >
<title>operator delete (25 samples, 0.05%; -0.02%)</title><rect x="673.6" y="485" width="0.6" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="676.56" y="495.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (7 samples, 0.01%; 0.00%)</title><rect x="523.4" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="526.40" y="287.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (416 samples, 0.87%; +0.01%)</title><rect x="838.1" y="437" width="10.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="841.06" y="447.5" ></text>
</g>
<g >
<title>table::estimate_read_memory_cost (9 samples, 0.02%; -0.00%)</title><rect x="1044.3" y="261" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1047.31" y="271.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (46,753 samples, 97.32%; +0.06%)</title><rect x="26.9" y="517" width="1148.4" height="15.0" fill="rgb(255,119,119)" rx="2" ry="2" />
<text  x="29.85" y="527.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (91 samples, 0.19%; +0.04%)</title><rect x="882.0" y="405" width="2.3" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="885.02" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (8 samples, 0.02%; +0.01%)</title><rect x="25.4" y="517" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="28.38" y="527.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (158 samples, 0.33%; +0.01%)</title><rect x="922.2" y="389" width="3.9" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="925.19" y="399.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (19 samples, 0.04%; +0.02%)</title><rect x="552.5" y="341" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="555.48" y="351.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (7 samples, 0.01%; -0.01%)</title><rect x="24.8" y="517" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="27.79" y="527.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (41 samples, 0.09%; +0.08%)</title><rect x="904.2" y="389" width="1.0" height="15.0" fill="rgb(255,94,94)" rx="2" ry="2" />
<text  x="907.16" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (5 samples, 0.01%; +0.00%)</title><rect x="1156.9" y="437" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1159.89" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (6,515 samples, 13.56%; -0.02%)</title><rect x="948.5" y="421" width="160.0" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="951.52" y="431.5" >cql3::statements::se..</text>
</g>
<g >
<title>reader_permit::impl::signal (101 samples, 0.21%; +0.02%)</title><rect x="392.8" y="229" width="2.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="395.82" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (14 samples, 0.03%; 0.00%)</title><rect x="10.1" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.12" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (118 samples, 0.25%; -0.02%)</title><rect x="221.3" y="181" width="2.9" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="224.27" y="191.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (321 samples, 0.67%; -0.00%)</title><rect x="474.8" y="245" width="7.9" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="477.84" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (9 samples, 0.02%; +0.01%)</title><rect x="712.5" y="501" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="715.46" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (14 samples, 0.03%; 0.00%)</title><rect x="21.7" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.72" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (14 samples, 0.03%; -0.01%)</title><rect x="867.2" y="453" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="870.19" y="463.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (26 samples, 0.05%; +0.01%)</title><rect x="534.4" y="405" width="0.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="537.35" y="415.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (13 samples, 0.03%; +0.00%)</title><rect x="800.3" y="85" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="803.25" y="95.5" ></text>
</g>
<g >
<title>operator new (36 samples, 0.07%; +0.00%)</title><rect x="834.3" y="373" width="0.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="837.27" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (7 samples, 0.01%; -0.01%)</title><rect x="443.9" y="261" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="446.91" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (5 samples, 0.01%; -0.00%)</title><rect x="686.9" y="485" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="689.87" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (37 samples, 0.08%; +0.02%)</title><rect x="120.4" y="309" width="0.9" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="123.44" y="319.5" ></text>
</g>
<g >
<title>operator delete (17 samples, 0.04%; -0.01%)</title><rect x="47.9" y="501" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="50.90" y="511.5" ></text>
</g>
<g >
<title>all (48,039 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>[[vdso]] (270 samples, 0.56%; -0.01%)</title><rect x="1179.3" y="613" width="6.7" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="1182.34" y="623.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (47 samples, 0.10%; +0.00%)</title><rect x="20.5" y="325" width="1.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="23.54" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (57 samples, 0.12%; +0.03%)</title><rect x="843.2" y="389" width="1.4" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="846.24" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (9 samples, 0.02%; -0.02%)</title><rect x="575.3" y="341" width="0.2" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="578.33" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (54 samples, 0.11%; -0.01%)</title><rect x="645.0" y="405" width="1.3" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="647.96" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (7 samples, 0.01%; -0.00%)</title><rect x="816.3" y="261" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="819.34" y="271.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (640 samples, 1.33%; -0.01%)</title><rect x="1023.5" y="245" width="15.7" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="1026.46" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (16 samples, 0.03%; +0.00%)</title><rect x="682.3" y="453" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="685.30" y="463.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (290 samples, 0.60%; 0.00%)</title><rect x="17.1" y="597" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.12" y="607.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (79 samples, 0.16%; -0.01%)</title><rect x="786.9" y="197" width="2.0" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="789.94" y="207.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (107 samples, 0.22%; 0.00%)</title><rect x="363.8" y="213" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="366.84" y="223.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (29 samples, 0.06%; -0.01%)</title><rect x="419.3" y="421" width="0.7" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="422.30" y="431.5" ></text>
</g>
<g >
<title>operator delete (33 samples, 0.07%; +0.01%)</title><rect x="32.6" y="485" width="0.8" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="35.62" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (7 samples, 0.01%; -0.01%)</title><rect x="1028.8" y="149" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1031.79" y="159.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (33 samples, 0.07%; 0.00%)</title><rect x="1140.8" y="389" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.75" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (12 samples, 0.02%; -0.00%)</title><rect x="1151.3" y="485" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1154.34" y="495.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (34 samples, 0.07%; +0.00%)</title><rect x="316.5" y="181" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="319.45" y="191.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.01%; +0.00%)</title><rect x="689.6" y="453" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="692.59" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (26 samples, 0.05%; +0.01%)</title><rect x="1050.4" y="229" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1053.36" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (8 samples, 0.02%; +0.01%)</title><rect x="981.0" y="357" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="983.99" y="367.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (462 samples, 0.96%; -0.00%)</title><rect x="907.6" y="389" width="11.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="910.57" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (36 samples, 0.07%; +0.00%)</title><rect x="908.3" y="357" width="0.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="911.31" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (23 samples, 0.05%; -0.00%)</title><rect x="928.3" y="389" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="931.25" y="399.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (6 samples, 0.01%; 0.00%)</title><rect x="1140.1" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.06" y="239.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (77 samples, 0.16%; -0.01%)</title><rect x="379.2" y="149" width="1.9" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="382.19" y="159.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (7 samples, 0.01%; +0.01%)</title><rect x="1094.7" y="245" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1097.72" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="1097.5" y="341" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1100.49" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (20 samples, 0.04%; +0.03%)</title><rect x="994.0" y="261" width="0.5" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="997.03" y="271.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (12 samples, 0.02%; -0.02%)</title><rect x="877.9" y="421" width="0.3" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="880.95" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; -0.01%)</title><rect x="457.8" y="293" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="460.79" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (7 samples, 0.01%; +0.01%)</title><rect x="943.3" y="357" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="946.29" y="367.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (10 samples, 0.02%; -0.00%)</title><rect x="1031.1" y="133" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1034.05" y="143.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (18 samples, 0.04%; -0.00%)</title><rect x="862.2" y="501" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="865.23" y="511.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.09%; 0.00%)</title><rect x="1188.9" y="629" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1191.87" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (12 samples, 0.02%; +0.02%)</title><rect x="857.5" y="469" width="0.3" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="860.49" y="479.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (6 samples, 0.01%; 0.00%)</title><rect x="830.9" y="421" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="833.86" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (5 samples, 0.01%; -0.02%)</title><rect x="1168.9" y="469" width="0.1" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="1171.92" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (71 samples, 0.15%; -0.00%)</title><rect x="695.0" y="485" width="1.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="698.02" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (86 samples, 0.18%; +0.05%)</title><rect x="965.7" y="357" width="2.1" height="15.0" fill="rgb(255,137,137)" rx="2" ry="2" />
<text  x="968.66" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.01%)</title><rect x="1031.3" y="165" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1034.35" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (10 samples, 0.02%; +0.01%)</title><rect x="987.7" y="341" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="990.67" y="351.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (92 samples, 0.19%; -0.00%)</title><rect x="726.0" y="341" width="2.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="729.00" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (47 samples, 0.10%; 0.00%)</title><rect x="942.1" y="357" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="945.13" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (31 samples, 0.06%; +0.00%)</title><rect x="746.8" y="389" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="749.83" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (48 samples, 0.10%; +0.02%)</title><rect x="160.1" y="229" width="1.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="163.06" y="239.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (233 samples, 0.49%; -0.00%)</title><rect x="740.3" y="357" width="5.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="743.32" y="367.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (31 samples, 0.06%; -0.02%)</title><rect x="237.9" y="181" width="0.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="240.87" y="191.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (80 samples, 0.17%; +0.01%)</title><rect x="726.3" y="309" width="1.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="729.27" y="319.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (63 samples, 0.13%; -0.00%)</title><rect x="498.6" y="229" width="1.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="501.61" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%; +0.01%)</title><rect x="897.0" y="309" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="899.98" y="319.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (6 samples, 0.01%; +0.00%)</title><rect x="456.8" y="325" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="459.81" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (12 samples, 0.02%; +0.00%)</title><rect x="299.1" y="261" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="302.14" y="271.5" ></text>
</g>
<g >
<title>row::row (1,431 samples, 2.98%; +0.00%)</title><rect x="167.5" y="149" width="35.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="170.45" y="159.5" >ro..</text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (73 samples, 0.15%; -0.00%)</title><rect x="647.1" y="453" width="1.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="650.05" y="463.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.04%; -0.00%)</title><rect x="209.3" y="165" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="212.31" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; +0.00%)</title><rect x="36.8" y="453" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="39.85" y="463.5" ></text>
</g>
<g >
<title>operator delete (57 samples, 0.12%; +0.02%)</title><rect x="685.4" y="485" width="1.4" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="688.37" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (12 samples, 0.02%; -0.01%)</title><rect x="859.5" y="485" width="0.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="862.50" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (10 samples, 0.02%; +0.00%)</title><rect x="1035.0" y="229" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1037.98" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::stats (29 samples, 0.06%; +0.02%)</title><rect x="484.7" y="309" width="0.7" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="487.66" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (8 samples, 0.02%; -0.01%)</title><rect x="760.4" y="405" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="763.36" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (11 samples, 0.02%; 0.00%)</title><rect x="862.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.28" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (1,954 samples, 4.07%; -0.01%)</title><rect x="1003.7" y="293" width="48.0" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="1006.71" y="303.5" >serv..</text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; -0.01%)</title><rect x="51.0" y="485" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="54.05" y="495.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (44 samples, 0.09%; +0.02%)</title><rect x="615.7" y="405" width="1.1" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="618.68" y="415.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6 samples, 0.01%; 0.00%)</title><rect x="767.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="770.04" y="367.5" ></text>
</g>
<g >
<title>operator new (18 samples, 0.04%; 0.00%)</title><rect x="618.3" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="621.31" y="399.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (202 samples, 0.42%; +0.01%)</title><rect x="352.1" y="165" width="5.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="355.09" y="175.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (13 samples, 0.03%; +0.01%)</title><rect x="1046.0" y="277" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1048.96" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (108 samples, 0.22%; +0.04%)</title><rect x="1099.2" y="357" width="2.7" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="1102.24" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (12 samples, 0.02%; -0.01%)</title><rect x="216.7" y="149" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="219.65" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (6 samples, 0.01%; +0.01%)</title><rect x="589.1" y="389" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="592.13" y="399.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (7 samples, 0.01%; 0.00%)</title><rect x="863.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.31" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (18 samples, 0.04%; +0.01%)</title><rect x="410.8" y="277" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="413.83" y="287.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (50 samples, 0.10%; -0.02%)</title><rect x="1163.1" y="453" width="1.3" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="1166.13" y="463.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (10 samples, 0.02%; 0.00%)</title><rect x="23.7" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.71" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (13 samples, 0.03%; +0.01%)</title><rect x="409.2" y="309" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="412.23" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (14 samples, 0.03%; 0.00%)</title><rect x="476.1" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="479.07" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (12 samples, 0.02%; +0.01%)</title><rect x="1074.7" y="325" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1077.67" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (21 samples, 0.04%; +0.02%)</title><rect x="633.2" y="485" width="0.5" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="636.17" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="638.0" y="485" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="641.01" y="495.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (56 samples, 0.12%; +0.01%)</title><rect x="414.7" y="357" width="1.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="417.73" y="367.5" ></text>
</g>
<g >
<title>database::query (1,059 samples, 2.20%; +0.03%)</title><rect x="1013.9" y="261" width="26.0" height="15.0" fill="rgb(255,159,159)" rx="2" ry="2" />
<text  x="1016.88" y="271.5" >d..</text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (100 samples, 0.21%; -0.06%)</title><rect x="448.2" y="277" width="2.5" height="15.0" fill="rgb(112,112,255)" rx="2" ry="2" />
<text  x="451.24" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (11 samples, 0.02%; -0.00%)</title><rect x="549.2" y="421" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="552.22" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (6 samples, 0.01%; -0.01%)</title><rect x="822.0" y="325" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="825.04" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (7 samples, 0.01%; 0.00%)</title><rect x="808.1" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="811.09" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (5 samples, 0.01%; +0.00%)</title><rect x="625.0" y="453" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="627.97" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (3,524 samples, 7.34%; +0.02%)</title><rect x="144.6" y="261" width="86.6" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="147.63" y="271.5" >partition_..</text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%; -0.01%)</title><rect x="1129.8" y="389" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1132.82" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (82 samples, 0.17%; +0.02%)</title><rect x="568.4" y="373" width="2.0" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="571.40" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; +0.00%)</title><rect x="804.9" y="229" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="807.90" y="239.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (8 samples, 0.02%; -0.00%)</title><rect x="390.9" y="229" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="393.86" y="239.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (24 samples, 0.05%; 0.00%)</title><rect x="20.9" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.93" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (6 samples, 0.01%; -0.02%)</title><rect x="560.5" y="293" width="0.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="563.47" y="303.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (6 samples, 0.01%; -0.01%)</title><rect x="554.8" y="309" width="0.1" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="557.79" y="319.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (21 samples, 0.04%; 0.00%)</title><rect x="1176.4" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.37" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (7 samples, 0.01%; +0.00%)</title><rect x="1142.7" y="501" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1145.74" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (7 samples, 0.01%; -0.01%)</title><rect x="637.6" y="485" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="640.59" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (18 samples, 0.04%; -0.02%)</title><rect x="530.6" y="341" width="0.4" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="533.60" y="351.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (9 samples, 0.02%; 0.00%)</title><rect x="23.7" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.73" y="415.5" ></text>
</g>
<g >
<title>query::digester::digester (17 samples, 0.04%; -0.01%)</title><rect x="592.8" y="405" width="0.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="595.77" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (18 samples, 0.04%; -0.02%)</title><rect x="547.1" y="421" width="0.4" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="550.05" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (11 samples, 0.02%; +0.00%)</title><rect x="1133.9" y="421" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1136.92" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.01%; 0.00%)</title><rect x="20.4" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.39" y="239.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.01%; 0.00%)</title><rect x="47.7" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.70" y="495.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (10 samples, 0.02%; -0.00%)</title><rect x="911.9" y="341" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="914.89" y="351.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (10 samples, 0.02%; +0.02%)</title><rect x="1133.2" y="405" width="0.3" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="1136.23" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1,319 samples, 2.75%; -0.01%)</title><rect x="549.5" y="421" width="32.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="552.49" y="431.5" >st..</text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (12 samples, 0.02%; +0.01%)</title><rect x="1029.8" y="149" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1032.77" y="159.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (4,429 samples, 9.22%; +0.01%)</title><rect x="424.0" y="373" width="108.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="426.99" y="383.5" >std::_Functio..</text>
</g>
<g >
<title>auth::resource::resource (107 samples, 0.22%; +0.01%)</title><rect x="765.0" y="389" width="2.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="767.98" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (94 samples, 0.20%; -0.00%)</title><rect x="659.2" y="469" width="2.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="662.23" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; +0.01%)</title><rect x="1050.8" y="181" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1053.85" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="968.2" y="373" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="971.22" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (288 samples, 0.60%; -0.02%)</title><rect x="1155.1" y="469" width="7.0" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="1158.07" y="479.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (50 samples, 0.10%; +0.00%)</title><rect x="196.3" y="101" width="1.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="199.29" y="111.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (12 samples, 0.02%; -0.00%)</title><rect x="481.8" y="181" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="484.81" y="191.5" ></text>
</g>
<g >
<title>query::result::result (5 samples, 0.01%; -0.00%)</title><rect x="590.9" y="437" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="593.87" y="447.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (5 samples, 0.01%; +0.01%)</title><rect x="1094.9" y="261" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1097.89" y="271.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (31 samples, 0.06%; +0.00%)</title><rect x="797.1" y="117" width="0.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="800.06" y="127.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (12 samples, 0.02%; +0.00%)</title><rect x="1065.0" y="341" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1068.05" y="351.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (300 samples, 0.62%; +0.01%)</title><rect x="581.9" y="437" width="7.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="584.93" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (5 samples, 0.01%; -0.02%)</title><rect x="386.8" y="149" width="0.1" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="389.78" y="159.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (11 samples, 0.02%; +0.01%)</title><rect x="78.0" y="453" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="81.04" y="463.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (32 samples, 0.07%; +0.00%)</title><rect x="487.1" y="309" width="0.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="490.12" y="319.5" ></text>
</g>
<g >
<title>query::result::builder::build (61 samples, 0.13%; -0.01%)</title><rect x="589.3" y="437" width="1.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="592.30" y="447.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (104 samples, 0.22%; -0.02%)</title><rect x="1171.3" y="437" width="2.5" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="1174.28" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (5 samples, 0.01%; 0.00%)</title><rect x="19.6" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.56" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (93 samples, 0.19%; +0.00%)</title><rect x="743.6" y="293" width="2.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="746.56" y="303.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (21 samples, 0.04%; -0.00%)</title><rect x="815.5" y="293" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="818.53" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (311 samples, 0.65%; -0.00%)</title><rect x="36.0" y="485" width="7.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="38.96" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (86 samples, 0.18%; +0.00%)</title><rect x="900.5" y="357" width="2.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="903.50" y="367.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (5 samples, 0.01%; -0.01%)</title><rect x="519.0" y="325" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="522.03" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (13 samples, 0.03%; +0.00%)</title><rect x="692.9" y="453" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="695.86" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (10 samples, 0.02%; -0.00%)</title><rect x="46.5" y="485" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="49.50" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.01%; +0.00%)</title><rect x="481.0" y="181" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="483.98" y="191.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (8 samples, 0.02%; 0.00%)</title><rect x="20.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.34" y="335.5" ></text>
</g>
<g >
<title>operator new (72 samples, 0.15%; +0.00%)</title><rect x="1048.2" y="245" width="1.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1051.24" y="255.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (77 samples, 0.16%; -0.05%)</title><rect x="740.9" y="325" width="1.9" height="15.0" fill="rgb(137,137,255)" rx="2" ry="2" />
<text  x="743.86" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (8 samples, 0.02%; +0.01%)</title><rect x="665.3" y="469" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="668.28" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.02%; -0.01%)</title><rect x="1018.8" y="197" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1021.84" y="207.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (163 samples, 0.34%; +0.02%)</title><rect x="391.3" y="245" width="4.0" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="394.30" y="255.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (12 samples, 0.02%; 0.00%)</title><rect x="626.1" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.07" y="495.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (5 samples, 0.01%; -0.00%)</title><rect x="389.4" y="229" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="392.41" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (31 samples, 0.06%; +0.00%)</title><rect x="878.2" y="421" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="881.24" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (35 samples, 0.07%; +0.02%)</title><rect x="492.4" y="277" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="495.40" y="287.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (45 samples, 0.09%; +0.01%)</title><rect x="384.6" y="165" width="1.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="387.64" y="175.5" ></text>
</g>
<g >
<title>TLS init function for cql3::statements::select_statement::_default_parameters (6 samples, 0.01%; +0.01%)</title><rect x="749.3" y="389" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="752.31" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (7 samples, 0.01%; +0.01%)</title><rect x="898.9" y="325" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="901.95" y="335.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (118 samples, 0.25%; +0.00%)</title><rect x="715.2" y="469" width="2.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="718.21" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (16 samples, 0.03%; +0.01%)</title><rect x="1135.8" y="421" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1138.79" y="431.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (30 samples, 0.06%; -0.00%)</title><rect x="683.9" y="469" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="686.92" y="479.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (30 samples, 0.06%; +0.00%)</title><rect x="522.7" y="277" width="0.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="525.66" y="287.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (33 samples, 0.07%; 0.00%)</title><rect x="1140.8" y="405" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.75" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="657.8" y="485" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="660.79" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (34 samples, 0.07%; -0.00%)</title><rect x="765.6" y="341" width="0.9" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="768.62" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (5 samples, 0.01%; -0.00%)</title><rect x="1031.5" y="165" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1034.49" y="175.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (160 samples, 0.33%; 0.00%)</title><rect x="915.0" y="357" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="917.99" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (67 samples, 0.14%; -0.00%)</title><rect x="1057.0" y="309" width="1.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1059.96" y="319.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (40 samples, 0.08%; +0.07%)</title><rect x="389.9" y="229" width="1.0" height="15.0" fill="rgb(255,100,100)" rx="2" ry="2" />
<text  x="392.87" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (157 samples, 0.33%; +0.02%)</title><rect x="245.4" y="261" width="3.9" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="248.44" y="271.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (6 samples, 0.01%; +0.01%)</title><rect x="931.6" y="405" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="934.57" y="415.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (23 samples, 0.05%; +0.01%)</title><rect x="327.4" y="165" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="330.41" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (19 samples, 0.04%; +0.01%)</title><rect x="535.2" y="405" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="538.24" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="711.6" y="501" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="714.55" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; -0.00%)</title><rect x="423.9" y="373" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="426.87" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (23 samples, 0.05%; +0.01%)</title><rect x="53.6" y="469" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="56.60" y="479.5" ></text>
</g>
<g >
<title>operator new (40 samples, 0.08%; 0.00%)</title><rect x="936.0" y="373" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="939.01" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (22 samples, 0.05%; 0.00%)</title><rect x="684.0" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.02" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (64 samples, 0.13%; -0.00%)</title><rect x="642.9" y="421" width="1.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="645.95" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (58 samples, 0.12%; -0.01%)</title><rect x="644.9" y="421" width="1.4" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="647.89" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (5 samples, 0.01%; 0.00%)</title><rect x="23.4" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.36" y="383.5" ></text>
</g>
<g >
<title>database::find_schema (269 samples, 0.56%; +0.01%)</title><rect x="753.7" y="405" width="6.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="756.71" y="415.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (13 samples, 0.03%; +0.01%)</title><rect x="554.5" y="293" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="557.47" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (100 samples, 0.21%; +0.00%)</title><rect x="845.6" y="389" width="2.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="848.60" y="399.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (83 samples, 0.17%; -0.01%)</title><rect x="593.8" y="405" width="2.0" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="596.80" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (32 samples, 0.07%; +0.02%)</title><rect x="671.3" y="453" width="0.8" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="674.27" y="463.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (20 samples, 0.04%; +0.01%)</title><rect x="224.2" y="181" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="227.17" y="191.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (568 samples, 1.18%; +0.01%)</title><rect x="1151.7" y="485" width="14.0" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1154.71" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (6 samples, 0.01%; +0.00%)</title><rect x="933.7" y="389" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="936.71" y="399.5" ></text>
</g>
<g >
<title>reader_permit::consume (11 samples, 0.02%; +0.02%)</title><rect x="155.4" y="197" width="0.2" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="158.37" y="207.5" ></text>
</g>
<g >
<title>operator delete (19 samples, 0.04%; +0.00%)</title><rect x="53.1" y="469" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="56.06" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (906 samples, 1.89%; +0.00%)</title><rect x="1075.1" y="341" width="22.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1078.12" y="351.5" >s..</text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (25 samples, 0.05%; +0.01%)</title><rect x="1030.7" y="149" width="0.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1033.68" y="159.5" ></text>
</g>
<g >
<title>seastar::reactor::io_queue_submission_pollfn::poll (5 samples, 0.01%; +0.00%)</title><rect x="1175.9" y="501" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1178.88" y="511.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (13 samples, 0.03%; 0.00%)</title><rect x="1141.2" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.24" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.01%)</title><rect x="152.5" y="181" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="155.52" y="191.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (58 samples, 0.12%; +0.00%)</title><rect x="736.6" y="341" width="1.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="739.56" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (10 samples, 0.02%; -0.01%)</title><rect x="98.0" y="405" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="100.96" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (51 samples, 0.11%; -0.01%)</title><rect x="763.6" y="373" width="1.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="766.60" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (110 samples, 0.23%; -0.03%)</title><rect x="611.3" y="405" width="2.7" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="614.29" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (16 samples, 0.03%; -0.01%)</title><rect x="94.4" y="421" width="0.4" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="97.45" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (8 samples, 0.02%; -0.00%)</title><rect x="1034.1" y="213" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1037.12" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (7 samples, 0.01%; -0.00%)</title><rect x="942.4" y="341" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="945.35" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (6 samples, 0.01%; -0.01%)</title><rect x="813.9" y="341" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="816.93" y="351.5" ></text>
</g>
<g >
<title>operator delete (35 samples, 0.07%; +0.01%)</title><rect x="803.6" y="245" width="0.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="806.59" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (40 samples, 0.08%; +0.00%)</title><rect x="829.7" y="421" width="0.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="832.66" y="431.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (58 samples, 0.12%; +0.02%)</title><rect x="281.0" y="309" width="1.4" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="284.01" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (18 samples, 0.04%; +0.03%)</title><rect x="898.5" y="325" width="0.4" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="901.51" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (13 samples, 0.03%; -0.01%)</title><rect x="1098.6" y="341" width="0.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="1101.58" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (15 samples, 0.03%; +0.02%)</title><rect x="1139.0" y="437" width="0.3" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="1141.96" y="447.5" ></text>
</g>
<g >
<title>utils::array_search_gt (5 samples, 0.01%; +0.01%)</title><rect x="523.6" y="277" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="526.57" y="287.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (45 samples, 0.09%; +0.05%)</title><rect x="1043.1" y="261" width="1.1" height="15.0" fill="rgb(255,134,134)" rx="2" ry="2" />
<text  x="1046.11" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (14 samples, 0.03%; +0.01%)</title><rect x="855.2" y="469" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="858.15" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (91 samples, 0.19%; -0.02%)</title><rect x="677.4" y="453" width="2.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="680.44" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (16 samples, 0.03%; +0.01%)</title><rect x="1102.6" y="357" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1105.60" y="367.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (18 samples, 0.04%; +0.01%)</title><rect x="1130.6" y="421" width="0.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1133.63" y="431.5" ></text>
</g>
<g >
<title>__dynamic_cast (35 samples, 0.07%; +0.02%)</title><rect x="876.5" y="421" width="0.9" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="879.52" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (8 samples, 0.02%; 0.00%)</title><rect x="21.3" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.32" y="287.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (21 samples, 0.04%; +0.00%)</title><rect x="41.0" y="453" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="44.00" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::shared_ptr_count_for&lt;cql3::metadata&amp;&gt; (7 samples, 0.01%; -0.00%)</title><rect x="650.8" y="453" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="653.81" y="463.5" ></text>
</g>
<g >
<title>operator delete (55 samples, 0.11%; +0.06%)</title><rect x="512.8" y="325" width="1.3" height="15.0" fill="rgb(255,119,119)" rx="2" ry="2" />
<text  x="515.76" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (6 samples, 0.01%; +0.01%)</title><rect x="1075.0" y="341" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1077.97" y="351.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (7,076 samples, 14.73%; +0.00%)</title><rect x="111.5" y="389" width="173.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="114.50" y="399.5" >merging_reader&lt;mutatio..</text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (14 samples, 0.03%; 0.00%)</title><rect x="596.6" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="599.57" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (14 samples, 0.03%; -0.01%)</title><rect x="228.0" y="229" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="230.98" y="239.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (12 samples, 0.02%; -0.07%)</title><rect x="16.8" y="613" width="0.3" height="15.0" fill="rgb(109,109,255)" rx="2" ry="2" />
<text  x="19.80" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (50 samples, 0.10%; -0.01%)</title><rect x="690.7" y="453" width="1.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="693.68" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.01%; -0.01%)</title><rect x="1062.5" y="325" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1065.54" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; -0.00%)</title><rect x="669.8" y="437" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="672.85" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; -0.00%)</title><rect x="693.7" y="485" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="696.70" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; +0.01%)</title><rect x="401.6" y="181" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="404.56" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (7 samples, 0.01%; +0.01%)</title><rect x="566.9" y="309" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="569.95" y="319.5" ></text>
</g>
<g >
<title>operator delete (42 samples, 0.09%; 0.00%)</title><rect x="562.7" y="277" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="565.70" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; -0.00%)</title><rect x="514.2" y="309" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="517.21" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (324 samples, 0.67%; -0.00%)</title><rect x="396.0" y="245" width="8.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="399.01" y="255.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (732 samples, 1.52%; -0.00%)</title><rect x="550.2" y="389" width="18.0" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="553.25" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (8 samples, 0.02%; -0.00%)</title><rect x="945.0" y="341" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="947.96" y="351.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (110 samples, 0.23%; +0.00%)</title><rect x="538.8" y="389" width="2.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="541.82" y="399.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (10 samples, 0.02%; -0.00%)</title><rect x="503.9" y="213" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="506.94" y="223.5" ></text>
</g>
<g >
<title>schema::column_at (33 samples, 0.07%; +0.02%)</title><rect x="201.8" y="133" width="0.8" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="204.79" y="143.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (29 samples, 0.06%; +0.02%)</title><rect x="481.4" y="197" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="484.40" y="207.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (67 samples, 0.14%; +0.01%)</title><rect x="355.4" y="149" width="1.7" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="358.41" y="159.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (5 samples, 0.01%; +0.00%)</title><rect x="747.7" y="405" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="750.66" y="415.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (492 samples, 1.02%; +0.01%)</title><rect x="470.9" y="309" width="12.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="473.88" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (27 samples, 0.06%; +0.01%)</title><rect x="236.6" y="213" width="0.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="239.65" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (7,193 samples, 14.97%; +0.02%)</title><rect x="109.4" y="405" width="176.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="112.43" y="415.5" >flat_mutation_reader::..</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (10 samples, 0.02%; +0.01%)</title><rect x="313.9" y="165" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="316.92" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (61 samples, 0.13%; -0.01%)</title><rect x="843.1" y="421" width="1.5" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="846.14" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (753 samples, 1.57%; +0.01%)</title><rect x="122.0" y="309" width="18.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="124.96" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (16 samples, 0.03%; -0.01%)</title><rect x="582.4" y="421" width="0.4" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="585.40" y="431.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (25 samples, 0.05%; +0.00%)</title><rect x="187.4" y="53" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="190.42" y="63.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (6 samples, 0.01%; +0.01%)</title><rect x="419.1" y="405" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="422.13" y="415.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (44 samples, 0.09%; +0.03%)</title><rect x="469.6" y="277" width="1.1" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="472.63" y="287.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (17 samples, 0.04%; +0.04%)</title><rect x="138.8" y="261" width="0.5" height="15.0" fill="rgb(255,156,156)" rx="2" ry="2" />
<text  x="141.83" y="271.5" ></text>
</g>
<g >
<title>dht::tri_compare (76 samples, 0.16%; -0.02%)</title><rect x="472.4" y="261" width="1.8" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="475.36" y="271.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (36 samples, 0.07%; +0.01%)</title><rect x="924.9" y="341" width="0.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="927.86" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (8 samples, 0.02%; -0.01%)</title><rect x="1060.7" y="261" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1063.70" y="271.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (46 samples, 0.10%; +0.08%)</title><rect x="1177.1" y="629" width="1.1" height="15.0" fill="rgb(255,90,90)" rx="2" ry="2" />
<text  x="1180.08" y="639.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (9 samples, 0.02%; -0.00%)</title><rect x="1032.9" y="197" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1035.87" y="207.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (7 samples, 0.01%; +0.01%)</title><rect x="247.2" y="213" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="250.16" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (10 samples, 0.02%; -0.02%)</title><rect x="860.5" y="501" width="0.3" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="863.51" y="511.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (5 samples, 0.01%; 0.00%)</title><rect x="655.6" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="658.60" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (27 samples, 0.06%; +0.00%)</title><rect x="837.2" y="421" width="0.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="840.25" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (80 samples, 0.17%; +0.01%)</title><rect x="826.1" y="325" width="1.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="829.07" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (100 samples, 0.21%; +0.03%)</title><rect x="838.9" y="389" width="2.5" height="15.0" fill="rgb(255,159,159)" rx="2" ry="2" />
<text  x="841.94" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (11 samples, 0.02%; -0.00%)</title><rect x="234.7" y="197" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="237.66" y="207.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::mhtraits&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, boost::intrusive::list_member_hook&lt;boost::intrusive::link_mode&lt; (6 samples, 0.01%; +0.01%)</title><rect x="723.4" y="389" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="726.42" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (541 samples, 1.13%; +0.01%)</title><rect x="232.0" y="245" width="13.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="234.95" y="255.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; +0.00%)</title><rect x="652.7" y="437" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="655.65" y="447.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (161 samples, 0.34%; -0.00%)</title><rect x="237.4" y="213" width="3.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="240.36" y="223.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (7 samples, 0.01%; 0.00%)</title><rect x="1141.2" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.24" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (114 samples, 0.24%; 0.00%)</title><rect x="832.9" y="421" width="2.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="835.87" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (45 samples, 0.09%; -0.03%)</title><rect x="754.4" y="341" width="1.1" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="757.44" y="351.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (195 samples, 0.41%; -0.00%)</title><rect x="701.4" y="453" width="4.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="704.43" y="463.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (7 samples, 0.01%; 0.00%)</title><rect x="1051.3" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1054.32" y="287.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (120 samples, 0.25%; -0.00%)</title><rect x="1111.8" y="389" width="2.9" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1114.79" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (200 samples, 0.42%; -0.01%)</title><rect x="220.0" y="197" width="4.9" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="223.02" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; 0.00%)</title><rect x="584.9" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="587.91" y="399.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (18 samples, 0.04%; +0.00%)</title><rect x="1143.3" y="501" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1146.31" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (52 samples, 0.11%; +0.02%)</title><rect x="1152.9" y="437" width="1.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1155.91" y="447.5" ></text>
</g>
<g >
<title>operator delete (32 samples, 0.07%; +0.02%)</title><rect x="817.6" y="373" width="0.8" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="820.62" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (9 samples, 0.02%; +0.00%)</title><rect x="862.3" y="373" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="865.30" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (23 samples, 0.05%; +0.01%)</title><rect x="1150.5" y="485" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1153.53" y="495.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (11 samples, 0.02%; -0.01%)</title><rect x="163.1" y="197" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="166.05" y="207.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (29 samples, 0.06%; -0.01%)</title><rect x="823.0" y="293" width="0.7" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="825.97" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (6 samples, 0.01%; -0.00%)</title><rect x="1012.1" y="277" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1015.06" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (26 samples, 0.05%; +0.02%)</title><rect x="1134.6" y="421" width="0.6" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1137.59" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (13 samples, 0.03%; +0.00%)</title><rect x="230.9" y="245" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="233.87" y="255.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.01%; -0.00%)</title><rect x="681.3" y="469" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="684.32" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (8 samples, 0.02%; +0.00%)</title><rect x="626.5" y="485" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="629.47" y="495.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (32 samples, 0.07%; -0.00%)</title><rect x="39.7" y="405" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="42.72" y="415.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (12 samples, 0.02%; +0.01%)</title><rect x="507.7" y="277" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="510.68" y="287.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (77 samples, 0.16%; -0.01%)</title><rect x="715.8" y="437" width="1.9" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="718.78" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.00%)</title><rect x="282.2" y="277" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="285.24" y="287.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (6 samples, 0.01%; +0.01%)</title><rect x="166.1" y="181" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="169.05" y="191.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (10 samples, 0.02%; +0.00%)</title><rect x="1045.7" y="277" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1048.71" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (27 samples, 0.06%; +0.00%)</title><rect x="657.0" y="485" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="660.05" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (14 samples, 0.03%; -0.01%)</title><rect x="737.6" y="293" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="740.57" y="303.5" ></text>
</g>
<g >
<title>operator new (58 samples, 0.12%; +0.00%)</title><rect x="843.2" y="405" width="1.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="846.21" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (55 samples, 0.11%; +0.03%)</title><rect x="533.0" y="389" width="1.4" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="536.00" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (8 samples, 0.02%; -0.01%)</title><rect x="812.0" y="325" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="814.99" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (23,485 samples, 48.89%; +0.04%)</title><rect x="48.3" y="501" width="576.9" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="51.32" y="511.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (5 samples, 0.01%; +0.01%)</title><rect x="418.5" y="389" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="421.49" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (46 samples, 0.10%; +0.01%)</title><rect x="402.3" y="213" width="1.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="405.30" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (30 samples, 0.06%; 0.00%)</title><rect x="1176.2" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.20" y="511.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (34 samples, 0.07%; -0.00%)</title><rect x="1140.8" y="485" width="0.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1143.75" y="495.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (9 samples, 0.02%; +0.00%)</title><rect x="789.0" y="213" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="792.03" y="223.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (12 samples, 0.02%; +0.01%)</title><rect x="328.3" y="165" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="331.27" y="175.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (8 samples, 0.02%; -0.02%)</title><rect x="316.3" y="181" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="319.26" y="191.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (140 samples, 0.29%; +0.00%)</title><rect x="37.1" y="469" width="3.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="40.14" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (8 samples, 0.02%; +0.00%)</title><rect x="20.3" y="309" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="23.34" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (41 samples, 0.09%; +0.02%)</title><rect x="956.3" y="373" width="1.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="959.33" y="383.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (22 samples, 0.05%; 0.00%)</title><rect x="684.0" y="373" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.02" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (65 samples, 0.14%; -0.01%)</title><rect x="199.1" y="117" width="1.6" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="202.09" y="127.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (20 samples, 0.04%; +0.00%)</title><rect x="696.3" y="469" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="699.28" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.09%; 0.00%)</title><rect x="1139.7" y="389" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.74" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (6,001 samples, 12.49%; +0.03%)</title><rect x="713.0" y="501" width="147.4" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="716.03" y="511.5" >seastar::internal:..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="72.8" y="373" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="75.83" y="383.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (11 samples, 0.02%; -0.00%)</title><rect x="827.1" y="293" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="830.05" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (6 samples, 0.01%; +0.01%)</title><rect x="1093.1" y="277" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1096.15" y="287.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::got_cl (10 samples, 0.02%; -0.00%)</title><rect x="693.3" y="469" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="696.33" y="479.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (22 samples, 0.05%; 0.00%)</title><rect x="558.2" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="561.23" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (5,381 samples, 11.20%; +0.01%)</title><rect x="286.4" y="405" width="132.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="289.44" y="415.5" >seastar::future&lt;..</text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (8 samples, 0.02%; +0.00%)</title><rect x="947.6" y="405" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="950.63" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (5 samples, 0.01%; +0.01%)</title><rect x="317.4" y="213" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="320.44" y="223.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (16 samples, 0.03%; 0.00%)</title><rect x="1140.8" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.82" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (25 samples, 0.05%; 0.00%)</title><rect x="862.9" y="453" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.89" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (650 samples, 1.35%; +0.07%)</title><rect x="371.0" y="181" width="16.0" height="15.0" fill="rgb(255,109,109)" rx="2" ry="2" />
<text  x="374.03" y="191.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (453 samples, 0.94%; +0.01%)</title><rect x="661.7" y="501" width="11.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="664.74" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (41 samples, 0.09%; -0.01%)</title><rect x="722.3" y="389" width="1.0" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="725.29" y="399.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (8 samples, 0.02%; +0.01%)</title><rect x="423.1" y="389" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="426.06" y="399.5" ></text>
</g>
<g >
<title>tracing::add_table_name (13 samples, 0.03%; +0.00%)</title><rect x="1136.8" y="421" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1139.80" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (13 samples, 0.03%; +0.02%)</title><rect x="132.2" y="245" width="0.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="135.15" y="255.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (131 samples, 0.27%; -0.01%)</title><rect x="500.5" y="213" width="3.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="503.51" y="223.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (23 samples, 0.05%; +0.01%)</title><rect x="384.1" y="165" width="0.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="387.08" y="175.5" ></text>
</g>
<g >
<title>row_tombstone::apply (17 samples, 0.04%; 0.00%)</title><rect x="387.5" y="213" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="390.51" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (28 samples, 0.06%; 0.00%)</title><rect x="683.9" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.92" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.01%; 0.00%)</title><rect x="20.4" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.39" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (21 samples, 0.04%; +0.00%)</title><rect x="256.7" y="277" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="259.69" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (70 samples, 0.15%; +0.00%)</title><rect x="855.8" y="453" width="1.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="858.77" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (31 samples, 0.06%; +0.01%)</title><rect x="499.2" y="181" width="0.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="502.18" y="191.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (25 samples, 0.05%; +0.01%)</title><rect x="35.1" y="485" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="38.13" y="495.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (96 samples, 0.20%; -0.02%)</title><rect x="715.6" y="453" width="2.3" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="718.56" y="463.5" ></text>
</g>
<g >
<title>operator new (92 samples, 0.19%; +0.00%)</title><rect x="1116.0" y="357" width="2.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1119.02" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (21 samples, 0.04%; -0.00%)</title><rect x="656.5" y="485" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="659.53" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (45 samples, 0.09%; +0.01%)</title><rect x="98.2" y="405" width="1.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="101.21" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (45 samples, 0.09%; +0.01%)</title><rect x="553.7" y="309" width="1.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="556.69" y="319.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (418 samples, 0.87%; +0.09%)</title><rect x="519.3" y="325" width="10.3" height="15.0" fill="rgb(255,68,68)" rx="2" ry="2" />
<text  x="522.32" y="335.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (22 samples, 0.05%; -0.01%)</title><rect x="217.6" y="165" width="0.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="220.59" y="175.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (12 samples, 0.02%; -0.01%)</title><rect x="366.7" y="213" width="0.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="369.68" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (10 samples, 0.02%; +0.01%)</title><rect x="897.3" y="309" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="900.25" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (20 samples, 0.04%; +0.01%)</title><rect x="198.6" y="117" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="201.60" y="127.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (23 samples, 0.05%; +0.01%)</title><rect x="296.3" y="245" width="0.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="299.31" y="255.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (11,397 samples, 23.72%; -0.00%)</title><rect x="862.7" y="501" width="279.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="865.69" y="511.5" >seastar::lambda_task&lt;seastar::executi..</text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (16 samples, 0.03%; +0.01%)</title><rect x="601.1" y="421" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="604.07" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (70 samples, 0.15%; -0.00%)</title><rect x="234.9" y="197" width="1.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="237.93" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="692.7" y="453" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="695.71" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (5 samples, 0.01%; -0.01%)</title><rect x="166.9" y="149" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="169.91" y="159.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (9 samples, 0.02%; +0.01%)</title><rect x="583.9" y="421" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="586.95" y="431.5" ></text>
</g>
<g >
<title>operator new (115 samples, 0.24%; +0.01%)</title><rect x="276.5" y="277" width="2.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="279.51" y="287.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (7 samples, 0.01%; +0.00%)</title><rect x="888.0" y="293" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="890.99" y="303.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt; (5 samples, 0.01%; +0.00%)</title><rect x="592.9" y="389" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="595.89" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (456 samples, 0.95%; +0.01%)</title><rect x="232.4" y="229" width="11.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="235.42" y="239.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (46 samples, 0.10%; +0.04%)</title><rect x="64.8" y="437" width="1.1" height="15.0" fill="rgb(255,153,153)" rx="2" ry="2" />
<text  x="67.80" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (6 samples, 0.01%; +0.01%)</title><rect x="637.4" y="469" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="640.42" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (8 samples, 0.02%; +0.01%)</title><rect x="717.7" y="437" width="0.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="720.70" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (16 samples, 0.03%; -0.00%)</title><rect x="682.9" y="485" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="685.94" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (5 samples, 0.01%; +0.01%)</title><rect x="877.8" y="421" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="880.82" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,479 samples, 9.32%; +0.00%)</title><rect x="140.5" y="309" width="110.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="143.46" y="319.5" >partition_sna..</text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (14 samples, 0.03%; +0.01%)</title><rect x="952.1" y="405" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="955.13" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (12 samples, 0.02%; -0.01%)</title><rect x="607.9" y="405" width="0.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="610.95" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (150 samples, 0.31%; -0.01%)</title><rect x="724.6" y="357" width="3.7" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="727.57" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (15 samples, 0.03%; +0.00%)</title><rect x="655.5" y="469" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="658.53" y="479.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (7 samples, 0.01%; +0.01%)</title><rect x="564.5" y="277" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="567.54" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (10 samples, 0.02%; +0.00%)</title><rect x="367.5" y="197" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="370.54" y="207.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (47 samples, 0.10%; +0.02%)</title><rect x="235.5" y="165" width="1.1" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="238.49" y="175.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (6 samples, 0.01%; +0.00%)</title><rect x="932.8" y="405" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="935.82" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (6 samples, 0.01%; +0.01%)</title><rect x="900.3" y="357" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="903.32" y="367.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (975 samples, 2.03%; +0.04%)</title><rect x="485.5" y="325" width="24.0" height="15.0" fill="rgb(255,156,156)" rx="2" ry="2" />
<text  x="488.52" y="335.5" >m..</text>
</g>
<g >
<title>operator new (29 samples, 0.06%; 0.00%)</title><rect x="782.1" y="245" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="785.08" y="255.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (449 samples, 0.93%; +0.00%)</title><rect x="128.8" y="277" width="11.0" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="131.79" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="961.9" y="389" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="964.86" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (7 samples, 0.01%; +0.00%)</title><rect x="1141.0" y="197" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1144.00" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (11 samples, 0.02%; -0.00%)</title><rect x="261.9" y="325" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="264.90" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (13 samples, 0.03%; +0.00%)</title><rect x="261.1" y="309" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="264.09" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (19 samples, 0.04%; -0.00%)</title><rect x="23.0" y="405" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="26.02" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (9 samples, 0.02%; +0.00%)</title><rect x="517.2" y="325" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="520.23" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (368 samples, 0.77%; -0.01%)</title><rect x="147.2" y="245" width="9.0" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="150.16" y="255.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (24 samples, 0.05%; -0.00%)</title><rect x="643.7" y="373" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="646.69" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (20 samples, 0.04%; +0.02%)</title><rect x="282.7" y="325" width="0.5" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="285.70" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.01%)</title><rect x="764.0" y="341" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="767.05" y="351.5" ></text>
</g>
<g >
<title>database::find_column_family (81 samples, 0.17%; -0.00%)</title><rect x="1056.6" y="341" width="2.0" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1059.62" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (19 samples, 0.04%; +0.00%)</title><rect x="1049.5" y="213" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1052.55" y="223.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (87 samples, 0.18%; -0.01%)</title><rect x="444.4" y="309" width="2.1" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="447.35" y="319.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (7 samples, 0.01%; -0.00%)</title><rect x="705.1" y="421" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="708.09" y="431.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%; +0.00%)</title><rect x="40.6" y="453" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="43.61" y="463.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (68 samples, 0.14%; -0.00%)</title><rect x="758.4" y="341" width="1.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="761.37" y="351.5" ></text>
</g>
<g >
<title>auth::resource::parent (92 samples, 0.19%; -0.01%)</title><rect x="775.5" y="325" width="2.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="778.49" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (25 samples, 0.05%; +0.02%)</title><rect x="1058.0" y="293" width="0.6" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1061.00" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (37 samples, 0.08%; +0.03%)</title><rect x="400.7" y="165" width="0.9" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="403.66" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.01%; +0.01%)</title><rect x="901.9" y="325" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="904.90" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (6 samples, 0.01%; -0.01%)</title><rect x="655.7" y="453" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="658.72" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (28 samples, 0.06%; -0.00%)</title><rect x="738.9" y="373" width="0.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="741.94" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.01%; 0.00%)</title><rect x="1093.6" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1096.59" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (21 samples, 0.04%; +0.01%)</title><rect x="440.6" y="261" width="0.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="443.65" y="271.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (176 samples, 0.37%; -0.00%)</title><rect x="465.0" y="277" width="4.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="467.99" y="287.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (17 samples, 0.04%; -0.01%)</title><rect x="596.2" y="437" width="0.4" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="599.16" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (16 samples, 0.03%; -0.00%)</title><rect x="223.0" y="133" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="225.99" y="143.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (13 samples, 0.03%; +0.01%)</title><rect x="483.0" y="325" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="486.02" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (596 samples, 1.24%; -0.01%)</title><rect x="552.9" y="341" width="14.7" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="555.95" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (13 samples, 0.03%; +0.01%)</title><rect x="128.3" y="261" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="131.30" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (7 samples, 0.01%; +0.01%)</title><rect x="954.2" y="293" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="957.24" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (25 samples, 0.05%; +0.00%)</title><rect x="443.5" y="277" width="0.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="446.47" y="287.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.03%; -0.00%)</title><rect x="650.5" y="453" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="653.47" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (7 samples, 0.01%; 0.00%)</title><rect x="883.2" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.15" y="399.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (169 samples, 0.35%; -0.02%)</title><rect x="465.2" y="261" width="4.1" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="468.16" y="271.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (654 samples, 1.36%; +0.00%)</title><rect x="1077.5" y="293" width="16.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1080.48" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (7 samples, 0.01%; -0.01%)</title><rect x="604.2" y="421" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="607.16" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (6 samples, 0.01%; +0.01%)</title><rect x="287.1" y="389" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="290.15" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (40 samples, 0.08%; +0.03%)</title><rect x="936.0" y="357" width="1.0" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="939.01" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (32 samples, 0.07%; +0.03%)</title><rect x="1042.2" y="261" width="0.7" height="15.0" fill="rgb(255,159,159)" rx="2" ry="2" />
<text  x="1045.15" y="271.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (6 samples, 0.01%; -0.01%)</title><rect x="828.3" y="405" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="831.30" y="415.5" ></text>
</g>
<g >
<title>compound_type&lt; (82 samples, 0.17%; +0.05%)</title><rect x="539.2" y="357" width="2.0" height="15.0" fill="rgb(255,137,137)" rx="2" ry="2" />
<text  x="542.17" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (12 samples, 0.02%; +0.01%)</title><rect x="704.8" y="405" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="707.80" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (35 samples, 0.07%; +0.00%)</title><rect x="804.8" y="245" width="0.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="807.80" y="255.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (45 samples, 0.09%; +0.00%)</title><rect x="920.8" y="357" width="1.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="923.76" y="367.5" ></text>
</g>
<g >
<title>query::querier&lt; (18,200 samples, 37.89%; +0.02%)</title><rect x="102.1" y="437" width="447.0" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="105.09" y="447.5" >query::querier&lt;</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (40 samples, 0.08%; +0.00%)</title><rect x="765.5" y="357" width="1.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="768.47" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (138 samples, 0.29%; +0.00%)</title><rect x="935.7" y="389" width="3.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="938.67" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; 0.00%)</title><rect x="695.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.64" y="479.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (80 samples, 0.17%; -0.00%)</title><rect x="148.2" y="213" width="2.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="151.22" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (17 samples, 0.04%; +0.00%)</title><rect x="709.3" y="485" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="712.29" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (89 samples, 0.19%; +0.02%)</title><rect x="850.7" y="373" width="2.2" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="853.71" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.09%; 0.00%)</title><rect x="1139.7" y="437" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.74" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (56 samples, 0.12%; +0.01%)</title><rect x="524.4" y="309" width="1.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="527.41" y="319.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (7 samples, 0.01%; +0.01%)</title><rect x="362.9" y="197" width="0.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="365.88" y="207.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (13 samples, 0.03%; +0.00%)</title><rect x="652.3" y="437" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="655.33" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (6 samples, 0.01%; 0.00%)</title><rect x="208.9" y="133" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="211.89" y="143.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt; &gt; (6 samples, 0.01%; +0.00%)</title><rect x="809.6" y="325" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="812.64" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (7 samples, 0.01%; +0.00%)</title><rect x="697.8" y="485" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="700.80" y="495.5" ></text>
</g>
<g >
<title>operator new (66 samples, 0.14%; -0.01%)</title><rect x="1040.2" y="261" width="1.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1043.16" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="1047.1" y="229" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1050.14" y="239.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (1,996 samples, 4.15%; +0.02%)</title><rect x="767.8" y="389" width="49.1" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="770.83" y="399.5" >std:..</text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (41 samples, 0.09%; -0.00%)</title><rect x="1139.7" y="405" width="1.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1142.74" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (6 samples, 0.01%; 0.00%)</title><rect x="21.9" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.86" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (25 samples, 0.05%; 0.00%)</title><rect x="862.9" y="421" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.89" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (10 samples, 0.02%; -0.00%)</title><rect x="207.8" y="85" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="210.83" y="95.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (117 samples, 0.24%; +0.00%)</title><rect x="1171.1" y="453" width="2.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1174.09" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (50 samples, 0.10%; -0.00%)</title><rect x="681.5" y="469" width="1.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="684.46" y="479.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (10 samples, 0.02%; -0.00%)</title><rect x="705.3" y="421" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="708.27" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume (13 samples, 0.03%; +0.00%)</title><rect x="502.5" y="165" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="505.50" y="175.5" ></text>
</g>
<g >
<title>operator delete (19 samples, 0.04%; +0.01%)</title><rect x="635.9" y="485" width="0.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="638.92" y="495.5" ></text>
</g>
<g >
<title>sstring_hash::operator (6 samples, 0.01%; +0.00%)</title><rect x="1062.4" y="309" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1065.39" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (10 samples, 0.02%; +0.01%)</title><rect x="993.2" y="277" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="996.17" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (20 samples, 0.04%; +0.01%)</title><rect x="261.4" y="325" width="0.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="264.41" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.00%)</title><rect x="73.0" y="405" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="75.96" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (15 samples, 0.03%; +0.00%)</title><rect x="862.2" y="453" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="865.23" y="463.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (7 samples, 0.01%; +0.01%)</title><rect x="555.0" y="309" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="558.04" y="319.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (102 samples, 0.21%; -0.01%)</title><rect x="618.1" y="421" width="2.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="621.09" y="431.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (11 samples, 0.02%; -0.01%)</title><rect x="1002.9" y="293" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1005.88" y="303.5" ></text>
</g>
<g >
<title>operator new (69 samples, 0.14%; -0.00%)</title><rect x="985.3" y="293" width="1.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="988.29" y="303.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (248 samples, 0.52%; -0.00%)</title><rect x="848.5" y="453" width="6.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="851.54" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (52 samples, 0.11%; +0.00%)</title><rect x="782.8" y="245" width="1.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="785.79" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (6 samples, 0.01%; -0.00%)</title><rect x="857.3" y="405" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="860.31" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (15 samples, 0.03%; -0.01%)</title><rect x="508.0" y="277" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="510.97" y="287.5" ></text>
</g>
<g >
<title>operator delete (27 samples, 0.06%; +0.00%)</title><rect x="807.4" y="277" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="810.43" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (11 samples, 0.02%; +0.00%)</title><rect x="258.9" y="309" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="261.93" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (141 samples, 0.29%; +0.00%)</title><rect x="610.5" y="421" width="3.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="613.53" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.01%)</title><rect x="789.1" y="197" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="792.13" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (6 samples, 0.01%; +0.01%)</title><rect x="75.6" y="453" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="78.61" y="463.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (22 samples, 0.05%; +0.01%)</title><rect x="435.1" y="293" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="438.09" y="303.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (12 samples, 0.02%; -0.01%)</title><rect x="517.9" y="341" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="520.87" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (10 samples, 0.02%; 0.00%)</title><rect x="1060.2" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1063.18" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (22 samples, 0.05%; +0.00%)</title><rect x="776.8" y="277" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="779.77" y="287.5" ></text>
</g>
<g >
<title>operator delete (27 samples, 0.06%; 0.00%)</title><rect x="629.9" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="632.93" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (122 samples, 0.25%; -0.01%)</title><rect x="838.5" y="405" width="3.0" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="841.52" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (128 samples, 0.27%; -0.02%)</title><rect x="205.3" y="117" width="3.1" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="208.25" y="127.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (6 samples, 0.01%; -0.00%)</title><rect x="755.7" y="373" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="758.72" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (153 samples, 0.32%; +0.03%)</title><rect x="812.9" y="357" width="3.8" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="815.90" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (24 samples, 0.05%; -0.00%)</title><rect x="225.7" y="197" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="228.67" y="207.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (13 samples, 0.03%; 0.00%)</title><rect x="1141.2" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.24" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (428 samples, 0.89%; -0.05%)</title><rect x="433.8" y="309" width="10.6" height="15.0" fill="rgb(137,137,255)" rx="2" ry="2" />
<text  x="436.84" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (10 samples, 0.02%; +0.01%)</title><rect x="808.4" y="277" width="0.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="811.38" y="287.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (203 samples, 0.42%; 0.00%)</title><rect x="17.7" y="469" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.74" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (5 samples, 0.01%; -0.00%)</title><rect x="840.0" y="357" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="843.00" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (17 samples, 0.04%; -0.00%)</title><rect x="815.6" y="277" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="818.58" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (2,952 samples, 6.15%; +0.08%)</title><rect x="156.2" y="245" width="72.5" height="15.0" fill="rgb(255,90,90)" rx="2" ry="2" />
<text  x="159.20" y="255.5" >partitio..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (73 samples, 0.15%; -0.01%)</title><rect x="706.8" y="437" width="1.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="709.81" y="447.5" ></text>
</g>
<g >
<title>[unknown] (255 samples, 0.53%; 0.00%)</title><rect x="10.5" y="597" width="6.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.54" y="607.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (106 samples, 0.22%; -0.02%)</title><rect x="510.2" y="325" width="2.6" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="513.16" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (10 samples, 0.02%; +0.01%)</title><rect x="477.6" y="181" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="480.61" y="191.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (7 samples, 0.01%; +0.01%)</title><rect x="627.5" y="469" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="630.50" y="479.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.06%; 0.00%)</title><rect x="487.2" y="293" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="490.17" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (14 samples, 0.03%; +0.01%)</title><rect x="835.2" y="373" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="838.16" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (13 samples, 0.03%; -0.00%)</title><rect x="708.6" y="453" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="711.63" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; 0.00%)</title><rect x="425.1" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="428.15" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="609.9" y="421" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="612.89" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (12 samples, 0.02%; +0.01%)</title><rect x="257.9" y="293" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="260.87" y="303.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.01%; +0.01%)</title><rect x="827.1" y="277" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="830.05" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (17 samples, 0.04%; -0.00%)</title><rect x="618.3" y="373" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="621.34" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (21 samples, 0.04%; -0.00%)</title><rect x="705.7" y="437" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="708.71" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.05%; -0.00%)</title><rect x="151.1" y="165" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="154.07" y="175.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (9 samples, 0.02%; 0.00%)</title><rect x="887.9" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="890.94" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (6 samples, 0.01%; +0.00%)</title><rect x="549.0" y="421" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="551.99" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (62 samples, 0.13%; -0.01%)</title><rect x="1175.5" y="517" width="1.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1178.46" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (56 samples, 0.12%; +0.01%)</title><rect x="1103.4" y="373" width="1.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1106.36" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (19 samples, 0.04%; +0.03%)</title><rect x="860.8" y="501" width="0.4" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="863.75" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (103 samples, 0.21%; +0.01%)</title><rect x="825.6" y="341" width="2.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="828.60" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (7 samples, 0.01%; -0.00%)</title><rect x="41.5" y="453" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="44.51" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (7 samples, 0.01%; 0.00%)</title><rect x="10.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.29" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (34 samples, 0.07%; +0.00%)</title><rect x="811.0" y="309" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="814.04" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (13 samples, 0.03%; +0.01%)</title><rect x="1034.5" y="229" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1037.46" y="239.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (259 samples, 0.54%; -0.04%)</title><rect x="1079.2" y="245" width="6.4" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="1082.24" y="255.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (8 samples, 0.02%; +0.01%)</title><rect x="286.2" y="405" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="289.24" y="415.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (6 samples, 0.01%; +0.01%)</title><rect x="519.2" y="325" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="522.17" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (28 samples, 0.06%; -0.03%)</title><rect x="200.9" y="117" width="0.7" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="203.88" y="127.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; +0.00%)</title><rect x="1031.9" y="149" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1034.89" y="159.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (16 samples, 0.03%; -0.02%)</title><rect x="512.4" y="309" width="0.4" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="515.37" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (16 samples, 0.03%; -0.01%)</title><rect x="664.3" y="469" width="0.4" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="667.29" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (5 samples, 0.01%; 0.00%)</title><rect x="20.4" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.39" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (8 samples, 0.02%; +0.01%)</title><rect x="121.8" y="309" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="124.76" y="319.5" ></text>
</g>
<g >
<title>posix_memalign (45 samples, 0.09%; 0.00%)</title><rect x="196.4" y="85" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="199.41" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (16 samples, 0.03%; +0.00%)</title><rect x="766.1" y="325" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="769.06" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (16 samples, 0.03%; +0.01%)</title><rect x="78.9" y="453" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="81.88" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; -0.01%)</title><rect x="225.4" y="213" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="228.37" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (8 samples, 0.02%; -0.01%)</title><rect x="1047.6" y="277" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1050.56" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (10 samples, 0.02%; +0.00%)</title><rect x="614.8" y="437" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="617.75" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (6 samples, 0.01%; -0.01%)</title><rect x="852.7" y="357" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="855.74" y="367.5" ></text>
</g>
<g >
<title>operator new (82 samples, 0.17%; +0.00%)</title><rect x="1035.9" y="213" width="2.0" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1038.89" y="223.5" ></text>
</g>
<g >
<title>__tls_init (7 samples, 0.01%; -0.01%)</title><rect x="524.8" y="293" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="527.80" y="303.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (59 samples, 0.12%; +0.00%)</title><rect x="20.2" y="341" width="1.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="23.24" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt; (5 samples, 0.01%; -0.04%)</title><rect x="1134.5" y="421" width="0.1" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="1137.46" y="431.5" ></text>
</g>
<g >
<title>__libc_start_main (46,929 samples, 97.69%; 0.00%)</title><rect x="24.3" y="629" width="1152.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.35" y="639.5" >__libc_start_main</text>
</g>
<g >
<title>std::_Function_handler&lt;void  (280 samples, 0.58%; 0.00%)</title><rect x="17.4" y="565" width="6.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.37" y="575.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (11 samples, 0.02%; +0.01%)</title><rect x="1095.8" y="309" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1098.80" y="319.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (54 samples, 0.11%; -0.01%)</title><rect x="749.5" y="389" width="1.3" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="752.50" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; +0.01%)</title><rect x="70.5" y="389" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="73.45" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (171 samples, 0.36%; +0.00%)</title><rect x="1019.2" y="229" width="4.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1022.21" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (17 samples, 0.04%; -0.01%)</title><rect x="530.1" y="341" width="0.4" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="533.06" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (22 samples, 0.05%; +0.01%)</title><rect x="1104.2" y="357" width="0.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1107.15" y="367.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (460 samples, 0.96%; -0.01%)</title><rect x="568.2" y="389" width="11.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="571.23" y="399.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (25 samples, 0.05%; 0.00%)</title><rect x="862.9" y="485" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.89" y="495.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (17 samples, 0.04%; +0.00%)</title><rect x="909.2" y="357" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="912.19" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (118 samples, 0.25%; +0.01%)</title><rect x="635.3" y="501" width="2.9" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="638.33" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (36 samples, 0.07%; +0.01%)</title><rect x="267.2" y="357" width="0.9" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="270.23" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (23 samples, 0.05%; +0.01%)</title><rect x="598.9" y="437" width="0.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="601.88" y="447.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (5 samples, 0.01%; +0.00%)</title><rect x="1069.5" y="309" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1072.47" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (18 samples, 0.04%; +0.01%)</title><rect x="315.3" y="181" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="318.32" y="191.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (134 samples, 0.28%; -0.01%)</title><rect x="526.1" y="293" width="3.3" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="529.13" y="303.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, auth::role_or_anonymous&amp;&amp;, auth::get_permissions (5 samples, 0.01%; -0.00%)</title><rect x="809.3" y="309" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="812.34" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; -0.01%)</title><rect x="686.5" y="469" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="689.52" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (133 samples, 0.28%; +0.00%)</title><rect x="1047.8" y="277" width="3.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1050.75" y="287.5" ></text>
</g>
<g >
<title>query::querier_base::close (12 samples, 0.02%; 0.00%)</title><rect x="1174.7" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1177.67" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.00%)</title><rect x="848.3" y="437" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="851.27" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (23 samples, 0.05%; +0.00%)</title><rect x="862.9" y="405" width="0.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="865.94" y="415.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (6 samples, 0.01%; +0.00%)</title><rect x="553.5" y="325" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="556.51" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (142 samples, 0.30%; -0.01%)</title><rect x="677.2" y="485" width="3.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="680.19" y="495.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (5 samples, 0.01%; +0.00%)</title><rect x="516.6" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="519.57" y="335.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (149 samples, 0.31%; -0.01%)</title><rect x="69.3" y="405" width="3.7" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="72.30" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (61 samples, 0.13%; -0.01%)</title><rect x="242.1" y="197" width="1.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="245.12" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (13 samples, 0.03%; +0.02%)</title><rect x="1103.0" y="373" width="0.3" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="1106.00" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (5 samples, 0.01%; 0.00%)</title><rect x="20.4" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.39" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (14 samples, 0.03%; 0.00%)</title><rect x="10.1" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.12" y="511.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (12,732 samples, 26.50%; +0.06%)</title><rect x="106.6" y="421" width="312.7" height="15.0" fill="rgb(255,115,115)" rx="2" ry="2" />
<text  x="109.56" y="431.5" >query::consume_page&lt;</text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (17 samples, 0.04%; +0.00%)</title><rect x="816.2" y="277" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="819.17" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (37 samples, 0.08%; +0.01%)</title><rect x="1046.4" y="277" width="0.9" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1049.35" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::operator== (5 samples, 0.01%; 0.00%)</title><rect x="796.4" y="149" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="799.40" y="159.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;reader_permit::impl, boost::intrusive::list_node_traits&lt;void*&gt;,  (5 samples, 0.01%; +0.01%)</title><rect x="1038.8" y="181" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1041.84" y="191.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (64 samples, 0.13%; +0.06%)</title><rect x="436.2" y="277" width="1.5" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="439.17" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (7 samples, 0.01%; -0.01%)</title><rect x="982.3" y="357" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="985.34" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,348 samples, 4.89%; +0.01%)</title><rect x="161.2" y="229" width="57.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="164.24" y="239.5" >partit..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (20 samples, 0.04%; +0.00%)</title><rect x="793.6" y="133" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="796.57" y="143.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (26 samples, 0.05%; +0.01%)</title><rect x="527.2" y="245" width="0.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="530.18" y="255.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (8 samples, 0.02%; +0.00%)</title><rect x="1161.9" y="453" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1164.95" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (24 samples, 0.05%; 0.00%)</title><rect x="1176.3" y="485" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.34" y="495.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (176 samples, 0.37%; -0.01%)</title><rect x="848.9" y="437" width="4.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="851.86" y="447.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (14 samples, 0.03%; +0.00%)</title><rect x="1119.0" y="405" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1121.96" y="415.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (6 samples, 0.01%; -0.01%)</title><rect x="387.7" y="181" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="390.74" y="191.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (8 samples, 0.02%; +0.01%)</title><rect x="826.9" y="293" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="829.86" y="303.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (1,719 samples, 3.58%; +0.02%)</title><rect x="770.6" y="357" width="42.2" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="773.56" y="367.5" >ser..</text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (7 samples, 0.01%; +0.00%)</title><rect x="80.2" y="453" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="83.15" y="463.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%; +0.01%)</title><rect x="514.1" y="325" width="0.7" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="517.11" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,857 samples, 8.03%; -0.02%)</title><rect x="300.6" y="261" width="94.8" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="303.63" y="271.5" >mutation_fr..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (20 samples, 0.04%; -0.00%)</title><rect x="987.9" y="341" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="990.92" y="351.5" ></text>
</g>
<g >
<title>database::has_keyspace (107 samples, 0.22%; -0.00%)</title><rect x="845.5" y="405" width="2.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="848.47" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (9 samples, 0.02%; -0.01%)</title><rect x="993.7" y="261" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="996.66" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (14 samples, 0.03%; -0.00%)</title><rect x="1148.5" y="485" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1151.49" y="495.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (409 samples, 0.85%; -0.02%)</title><rect x="698.9" y="469" width="10.1" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="701.93" y="479.5" ></text>
</g>
<g >
<title>sstring_hash::operator (32 samples, 0.07%; 0.00%)</title><rect x="1061.4" y="293" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1064.36" y="303.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (33 samples, 0.07%; +0.01%)</title><rect x="795.4" y="117" width="0.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="798.44" y="127.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (8 samples, 0.02%; -0.02%)</title><rect x="66.7" y="437" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="69.69" y="447.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (1,001 samples, 2.08%; -0.01%)</title><rect x="781.3" y="277" width="24.6" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="784.29" y="287.5" >a..</text>
</g>
<g >
<title>query_result_builder::consume_new_partition (383 samples, 0.80%; +0.01%)</title><rect x="307.9" y="197" width="9.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="310.88" y="207.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (14 samples, 0.03%; -0.01%)</title><rect x="675.0" y="469" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="677.98" y="479.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (34 samples, 0.07%; -0.01%)</title><rect x="67.9" y="405" width="0.9" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="70.92" y="415.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (128 samples, 0.27%; +0.01%)</title><rect x="357.1" y="165" width="3.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="360.06" y="175.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (11,045 samples, 22.99%; +0.06%)</title><rect x="868.2" y="469" width="271.3" height="15.0" fill="rgb(255,115,115)" rx="2" ry="2" />
<text  x="871.20" y="479.5" >seastar::noncopyable_function&lt;seasta..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (8 samples, 0.02%; -0.00%)</title><rect x="136.1" y="213" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="139.06" y="223.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (5 samples, 0.01%; +0.01%)</title><rect x="1062.1" y="293" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1065.15" y="303.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (39 samples, 0.08%; -0.01%)</title><rect x="73.9" y="389" width="0.9" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="76.86" y="399.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; +0.01%)</title><rect x="546.3" y="405" width="0.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="549.29" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; -0.00%)</title><rect x="752.6" y="405" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="755.65" y="415.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (8 samples, 0.02%; +0.02%)</title><rect x="200.7" y="117" width="0.2" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="203.69" y="127.5" ></text>
</g>
<g >
<title>operator delete (35 samples, 0.07%; -0.02%)</title><rect x="574.1" y="357" width="0.8" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="577.07" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (123 samples, 0.26%; -0.00%)</title><rect x="246.3" y="245" width="3.0" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="249.25" y="255.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (6 samples, 0.01%; +0.01%)</title><rect x="719.8" y="453" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="722.81" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (10 samples, 0.02%; +0.00%)</title><rect x="262.3" y="341" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="265.31" y="351.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (339 samples, 0.71%; -0.00%)</title><rect x="1077.5" y="277" width="8.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1080.55" y="287.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.01%; -0.01%)</title><rect x="924.5" y="341" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="927.54" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (21 samples, 0.04%; +0.01%)</title><rect x="899.1" y="357" width="0.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="902.12" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (75 samples, 0.16%; +0.01%)</title><rect x="998.4" y="245" width="1.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1001.38" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (20 samples, 0.04%; +0.01%)</title><rect x="325.9" y="181" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="328.93" y="191.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (40 samples, 0.08%; -0.01%)</title><rect x="824.1" y="309" width="0.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="827.05" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (12 samples, 0.02%; -0.03%)</title><rect x="41.1" y="437" width="0.3" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="44.10" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (8 samples, 0.02%; +0.01%)</title><rect x="269.1" y="341" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="272.07" y="351.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (167 samples, 0.35%; +0.01%)</title><rect x="500.2" y="229" width="4.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="503.19" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (154 samples, 0.32%; -0.02%)</title><rect x="398.1" y="197" width="3.8" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="401.08" y="207.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (18 samples, 0.04%; +0.01%)</title><rect x="124.7" y="261" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="127.66" y="271.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (65 samples, 0.14%; -0.01%)</title><rect x="135.3" y="245" width="1.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="138.30" y="255.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (430 samples, 0.90%; +0.02%)</title><rect x="1178.3" y="629" width="10.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1181.31" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (98 samples, 0.20%; -0.01%)</title><rect x="195.1" y="117" width="2.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="198.11" y="127.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (2,753 samples, 5.73%; +0.01%)</title><rect x="760.7" y="405" width="67.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="763.68" y="415.5" >service..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.01%; -0.00%)</title><rect x="695.4" y="469" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="698.39" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (36 samples, 0.07%; 0.00%)</title><rect x="783.2" y="229" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="786.18" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (54 samples, 0.11%; +0.01%)</title><rect x="953.3" y="341" width="1.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="956.31" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (33 samples, 0.07%; -0.01%)</title><rect x="649.1" y="469" width="0.8" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="652.07" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (20 samples, 0.04%; +0.03%)</title><rect x="619.0" y="373" width="0.5" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="622.05" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.01%)</title><rect x="810.8" y="293" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="813.79" y="303.5" ></text>
</g>
<g >
<title>operator new (16 samples, 0.03%; +0.00%)</title><rect x="604.8" y="421" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="607.80" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (11 samples, 0.02%; -0.01%)</title><rect x="645.2" y="389" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="648.16" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (5 samples, 0.01%; -0.01%)</title><rect x="214.5" y="117" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="217.54" y="127.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (24 samples, 0.05%; -0.02%)</title><rect x="738.3" y="357" width="0.6" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="741.33" y="367.5" ></text>
</g>
<g >
<title>operator new (33 samples, 0.07%; 0.00%)</title><rect x="934.0" y="373" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="937.00" y="383.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (91 samples, 0.19%; +0.01%)</title><rect x="1112.1" y="373" width="2.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1115.08" y="383.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (17 samples, 0.04%; +0.00%)</title><rect x="328.1" y="181" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="331.14" y="191.5" ></text>
</g>
<g >
<title>schema::partition_key_size (11 samples, 0.02%; +0.02%)</title><rect x="1124.8" y="421" width="0.2" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1127.76" y="431.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (27 samples, 0.06%; +0.00%)</title><rect x="1097.8" y="341" width="0.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1100.84" y="351.5" ></text>
</g>
<g >
<title>database::find_uuid (192 samples, 0.40%; +0.00%)</title><rect x="755.6" y="389" width="4.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="758.60" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (7 samples, 0.01%; +0.01%)</title><rect x="265.9" y="325" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="268.90" y="335.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (14 samples, 0.03%; +0.00%)</title><rect x="757.4" y="309" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="760.39" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (15 samples, 0.03%; +0.00%)</title><rect x="1118.5" y="357" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1121.50" y="367.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (11 samples, 0.02%; -0.00%)</title><rect x="1085.6" y="261" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1088.61" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (476 samples, 0.99%; +0.00%)</title><rect x="886.7" y="325" width="11.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="889.67" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (2,393 samples, 4.98%; +0.01%)</title><rect x="880.4" y="421" width="58.7" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="883.35" y="431.5" >cql3::..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (26 samples, 0.05%; -0.00%)</title><rect x="72.1" y="389" width="0.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="75.12" y="399.5" ></text>
</g>
<g >
<title>table::make_reader (4,365 samples, 9.09%; -0.13%)</title><rect x="425.6" y="357" width="107.2" height="15.0" fill="rgb(12,12,255)" rx="2" ry="2" />
<text  x="428.56" y="367.5" >table::make_r..</text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (30 samples, 0.06%; -0.00%)</title><rect x="683.9" y="501" width="0.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="686.92" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (15 samples, 0.03%; +0.02%)</title><rect x="46.8" y="485" width="0.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="49.82" y="495.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (9 samples, 0.02%; -0.01%)</title><rect x="1096.9" y="309" width="0.3" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1099.93" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (5 samples, 0.01%; +0.01%)</title><rect x="669.0" y="469" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="671.96" y="479.5" ></text>
</g>
<g >
<title>schema::column_at (12 samples, 0.02%; +0.01%)</title><rect x="208.4" y="117" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="211.42" y="127.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (86 samples, 0.18%; +0.01%)</title><rect x="1095.0" y="325" width="2.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1098.04" y="335.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (95 samples, 0.20%; +0.00%)</title><rect x="539.0" y="373" width="2.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="542.05" y="383.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (14 samples, 0.03%; -0.00%)</title><rect x="713.9" y="485" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="716.94" y="495.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (47 samples, 0.10%; -0.01%)</title><rect x="186.9" y="69" width="1.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="189.88" y="79.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (28 samples, 0.06%; -0.01%)</title><rect x="388.1" y="213" width="0.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="391.05" y="223.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (5 samples, 0.01%; +0.01%)</title><rect x="185.3" y="85" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="188.31" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (43 samples, 0.09%; -0.02%)</title><rect x="1165.7" y="485" width="1.0" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="1168.66" y="495.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (102 samples, 0.21%; +0.00%)</title><rect x="743.4" y="309" width="2.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="746.41" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (10 samples, 0.02%; -0.00%)</title><rect x="806.3" y="277" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="809.27" y="287.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (181 samples, 0.38%; -0.00%)</title><rect x="1027.8" y="181" width="4.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1030.76" y="191.5" ></text>
</g>
<g >
<title>operator new (40 samples, 0.08%; 0.00%)</title><rect x="1158.8" y="437" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1161.80" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (6 samples, 0.01%; -0.01%)</title><rect x="1106.4" y="373" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1109.36" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.00%)</title><rect x="562.2" y="277" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="565.23" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1,201 samples, 2.50%; +0.02%)</title><rect x="1144.5" y="501" width="29.5" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1147.46" y="511.5" >se..</text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (16 samples, 0.03%; +0.00%)</title><rect x="627.8" y="485" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="630.79" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (674 samples, 1.40%; -0.05%)</title><rect x="491.8" y="293" width="16.6" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="494.81" y="303.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (20 samples, 0.04%; 0.00%)</title><rect x="794.9" y="117" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="797.95" y="127.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (9 samples, 0.02%; -0.03%)</title><rect x="614.5" y="437" width="0.3" height="15.0" fill="rgb(159,159,255)" rx="2" ry="2" />
<text  x="617.53" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (17 samples, 0.04%; +0.00%)</title><rect x="607.8" y="421" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="610.82" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (70 samples, 0.15%; -0.01%)</title><rect x="944.2" y="357" width="1.8" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="947.24" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (7 samples, 0.01%; +0.00%)</title><rect x="634.4" y="469" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="637.40" y="479.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (26 samples, 0.05%; +0.01%)</title><rect x="503.0" y="197" width="0.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="505.96" y="207.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (122 samples, 0.25%; 0.00%)</title><rect x="152.7" y="229" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="155.69" y="239.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (15 samples, 0.03%; 0.00%)</title><rect x="648.1" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="651.13" y="399.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (45 samples, 0.09%; -0.01%)</title><rect x="888.3" y="309" width="1.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="891.26" y="319.5" ></text>
</g>
<g >
<title>dht::tri_compare (13 samples, 0.03%; +0.01%)</title><rect x="1092.8" y="245" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1095.83" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (7 samples, 0.01%; +0.01%)</title><rect x="613.8" y="389" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="616.82" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (15 samples, 0.03%; +0.00%)</title><rect x="613.4" y="389" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="616.45" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.00%)</title><rect x="899.5" y="341" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="902.49" y="351.5" ></text>
</g>
<g >
<title>operator delete (61 samples, 0.13%; +0.02%)</title><rect x="575.5" y="341" width="1.5" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="578.55" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (63 samples, 0.13%; -0.04%)</title><rect x="834.0" y="389" width="1.6" height="15.0" fill="rgb(153,153,255)" rx="2" ry="2" />
<text  x="837.00" y="399.5" ></text>
</g>
<g >
<title>query::result::result (11 samples, 0.02%; -0.00%)</title><rect x="605.2" y="421" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="608.20" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (256 samples, 0.53%; -0.00%)</title><rect x="218.9" y="229" width="6.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="221.91" y="239.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (8 samples, 0.02%; +0.00%)</title><rect x="793.6" y="117" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="796.65" y="127.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; -0.01%)</title><rect x="819.0" y="341" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="821.99" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="733.8" y="389" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="736.78" y="399.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (17 samples, 0.04%; -0.01%)</title><rect x="121.3" y="309" width="0.5" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="124.35" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.00%)</title><rect x="514.0" y="309" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="516.97" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (51 samples, 0.11%; -0.01%)</title><rect x="724.7" y="341" width="1.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="727.70" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (11 samples, 0.02%; -0.01%)</title><rect x="329.7" y="165" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="332.69" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (100 samples, 0.21%; -0.01%)</title><rect x="38.1" y="453" width="2.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="41.10" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (118 samples, 0.25%; +0.01%)</title><rect x="1127.2" y="405" width="2.9" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1130.24" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (299 samples, 0.62%; +0.02%)</title><rect x="185.4" y="85" width="7.4" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="188.43" y="95.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (13 samples, 0.03%; +0.00%)</title><rect x="897.6" y="309" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="900.62" y="319.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (346 samples, 0.72%; -0.05%)</title><rect x="375.6" y="165" width="8.5" height="15.0" fill="rgb(137,137,255)" rx="2" ry="2" />
<text  x="378.58" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (9 samples, 0.02%; +0.01%)</title><rect x="830.4" y="389" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="833.37" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (5 samples, 0.01%; -0.00%)</title><rect x="243.4" y="181" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="246.38" y="191.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (6 samples, 0.01%; -0.00%)</title><rect x="18.0" y="309" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="20.98" y="319.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (6 samples, 0.01%; 0.00%)</title><rect x="10.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.15" y="463.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (346 samples, 0.72%; -0.01%)</title><rect x="474.2" y="261" width="8.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="477.22" y="271.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,453 samples, 9.27%; +0.00%)</title><rect x="141.1" y="293" width="109.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="144.09" y="303.5" >seastar::do_u..</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (24 samples, 0.05%; +0.01%)</title><rect x="137.0" y="245" width="0.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="139.97" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (61 samples, 0.13%; -0.01%)</title><rect x="382.6" y="133" width="1.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="385.58" y="143.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (8 samples, 0.02%; +0.01%)</title><rect x="872.3" y="437" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="875.27" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (16 samples, 0.03%; +0.00%)</title><rect x="616.4" y="389" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="619.37" y="399.5" ></text>
</g>
<g >
<title>executor&lt;test_read (5,912 samples, 12.31%; -0.04%)</title><rect x="714.3" y="485" width="145.2" height="15.0" fill="rgb(156,156,255)" rx="2" ry="2" />
<text  x="717.28" y="495.5" >executor&lt;test_read</text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (58 samples, 0.12%; 0.00%)</title><rect x="1152.8" y="453" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1155.79" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (11 samples, 0.02%; 0.00%)</title><rect x="545.5" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="548.46" y="399.5" ></text>
</g>
<g >
<title>posix_memalign (7 samples, 0.01%; +0.01%)</title><rect x="188.2" y="69" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="191.16" y="79.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (66 samples, 0.14%; +0.01%)</title><rect x="526.8" y="261" width="1.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="529.84" y="271.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (17 samples, 0.04%; +0.01%)</title><rect x="767.2" y="357" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="770.19" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (317 samples, 0.66%; -0.02%)</title><rect x="67.1" y="421" width="7.7" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="70.06" y="431.5" ></text>
</g>
<g >
<title>table::query (28 samples, 0.06%; +0.00%)</title><rect x="1174.5" y="501" width="0.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1177.53" y="511.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (6 samples, 0.01%; -0.00%)</title><rect x="1002.6" y="293" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1005.56" y="303.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.04%; -0.00%)</title><rect x="1154.6" y="437" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1157.58" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (5 samples, 0.01%; 0.00%)</title><rect x="862.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.35" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (7 samples, 0.01%; +0.01%)</title><rect x="806.3" y="261" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="809.34" y="271.5" ></text>
</g>
<g >
<title>operator delete (20 samples, 0.04%; +0.00%)</title><rect x="558.9" y="277" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="561.89" y="287.5" ></text>
</g>
<g >
<title>free (22 samples, 0.05%; -0.00%)</title><rect x="38.7" y="421" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="41.74" y="431.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (13 samples, 0.03%; -0.00%)</title><rect x="684.1" y="309" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="687.09" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (11 samples, 0.02%; +0.00%)</title><rect x="284.3" y="357" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="287.35" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (139 samples, 0.29%; -0.01%)</title><rect x="437.7" y="277" width="3.5" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="440.75" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.09%; 0.00%)</title><rect x="1139.7" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.74" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (20 samples, 0.04%; +0.01%)</title><rect x="1026.7" y="165" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1029.70" y="175.5" ></text>
</g>
<g >
<title>operator new (37 samples, 0.08%; +0.00%)</title><rect x="291.2" y="293" width="0.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="294.23" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (12 samples, 0.02%; +0.01%)</title><rect x="838.6" y="389" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="841.65" y="399.5" ></text>
</g>
<g >
<title>free (111 samples, 0.23%; -0.07%)</title><rect x="398.8" y="181" width="2.8" height="15.0" fill="rgb(106,106,255)" rx="2" ry="2" />
<text  x="401.84" y="191.5" ></text>
</g>
<g >
<title>reader_permit::consume (9 samples, 0.02%; -0.01%)</title><rect x="499.9" y="197" width="0.3" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="502.94" y="207.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (23 samples, 0.05%; +0.01%)</title><rect x="289.4" y="373" width="0.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="292.36" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (12 samples, 0.02%; +0.01%)</title><rect x="668.7" y="469" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="671.67" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.04%; +0.01%)</title><rect x="209.3" y="149" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="212.33" y="159.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (5 samples, 0.01%; +0.01%)</title><rect x="816.7" y="357" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="819.66" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (39 samples, 0.08%; +0.02%)</title><rect x="197.5" y="117" width="1.0" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="200.52" y="127.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (119 samples, 0.25%; -0.02%)</title><rect x="237.7" y="197" width="2.9" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="240.70" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::stats (34 samples, 0.07%; -0.01%)</title><rect x="495.2" y="245" width="0.9" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="498.25" y="255.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (23 samples, 0.05%; +0.00%)</title><rect x="210.4" y="165" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="213.39" y="175.5" ></text>
</g>
<g >
<title>dht::tri_compare (127 samples, 0.26%; +0.01%)</title><rect x="1082.5" y="229" width="3.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1085.49" y="239.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (10 samples, 0.02%; +0.01%)</title><rect x="209.1" y="165" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="212.06" y="175.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (6 samples, 0.01%; +0.00%)</title><rect x="897.4" y="293" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="900.35" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; 0.00%)</title><rect x="557.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="560.32" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (5 samples, 0.01%; +0.00%)</title><rect x="733.5" y="389" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="736.54" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.00%)</title><rect x="541.2" y="357" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="544.18" y="367.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (80 samples, 0.17%; -0.01%)</title><rect x="596.9" y="437" width="2.0" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="599.92" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (5 samples, 0.01%; +0.01%)</title><rect x="25.0" y="517" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="27.96" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (10,814 samples, 22.51%; +0.00%)</title><rect x="872.6" y="437" width="265.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="875.57" y="447.5" >cql3::statements::select_statement:..</text>
</g>
<g >
<title>auth::resource::resource (60 samples, 0.12%; +0.01%)</title><rect x="765.2" y="373" width="1.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="768.20" y="383.5" ></text>
</g>
<g >
<title>do_cql_test (280 samples, 0.58%; 0.00%)</title><rect x="17.4" y="549" width="6.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.37" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (9 samples, 0.02%; +0.01%)</title><rect x="610.9" y="405" width="0.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="613.89" y="415.5" ></text>
</g>
<g >
<title>__start_context (290 samples, 0.60%; 0.00%)</title><rect x="17.1" y="613" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.12" y="623.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (432 samples, 0.90%; +0.01%)</title><rect x="1023.9" y="229" width="10.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1026.85" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (31 samples, 0.06%; -0.01%)</title><rect x="928.8" y="405" width="0.8" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="931.84" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (18 samples, 0.04%; +0.01%)</title><rect x="601.6" y="437" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="604.61" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (6 samples, 0.01%; -0.01%)</title><rect x="364.0" y="197" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="367.03" y="207.5" ></text>
</g>
<g >
<title>schema_registry::get (173 samples, 0.36%; -0.00%)</title><rect x="976.3" y="357" width="4.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="979.30" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_S_do_relocate (5 samples, 0.01%; -0.01%)</title><rect x="532.1" y="325" width="0.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="535.12" y="335.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (19 samples, 0.04%; +0.01%)</title><rect x="215.6" y="117" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="218.64" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (60 samples, 0.12%; +0.00%)</title><rect x="1157.1" y="421" width="1.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1160.13" y="431.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (6 samples, 0.01%; +0.00%)</title><rect x="1147.6" y="469" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1150.55" y="479.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (6 samples, 0.01%; 0.00%)</title><rect x="1140.1" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.06" y="223.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (5 samples, 0.01%; 0.00%)</title><rect x="10.3" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.29" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (46 samples, 0.10%; -0.00%)</title><rect x="1157.5" y="405" width="1.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1160.48" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (57 samples, 0.12%; -0.01%)</title><rect x="438.9" y="229" width="1.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="441.93" y="239.5" ></text>
</g>
<g >
<title>operator new (83 samples, 0.17%; -0.00%)</title><rect x="974.3" y="357" width="2.0" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="977.26" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (194 samples, 0.40%; 0.00%)</title><rect x="17.9" y="405" width="4.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.88" y="415.5" ></text>
</g>
<g >
<title>compound_type&lt; (72 samples, 0.15%; -0.04%)</title><rect x="907.8" y="373" width="1.8" height="15.0" fill="rgb(153,153,255)" rx="2" ry="2" />
<text  x="910.84" y="383.5" ></text>
</g>
<g >
<title>operator delete (24 samples, 0.05%; +0.01%)</title><rect x="584.4" y="405" width="0.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="587.44" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (17 samples, 0.04%; +0.00%)</title><rect x="1050.6" y="213" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1053.58" y="223.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (450 samples, 0.94%; +0.02%)</title><rect x="672.9" y="501" width="11.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="675.87" y="511.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (62 samples, 0.13%; 0.00%)</title><rect x="597.4" y="421" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="600.36" y="431.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (9 samples, 0.02%; +0.01%)</title><rect x="881.8" y="405" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="884.78" y="415.5" ></text>
</g>
<g >
<title>operator new (30 samples, 0.06%; -0.00%)</title><rect x="531.4" y="325" width="0.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="534.36" y="335.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (77 samples, 0.16%; -0.01%)</title><rect x="414.4" y="373" width="1.9" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="417.41" y="383.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (202 samples, 0.42%; 0.00%)</title><rect x="17.7" y="453" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.74" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.02%; -0.01%)</title><rect x="482.2" y="213" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="485.21" y="223.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (12 samples, 0.02%; 0.00%)</title><rect x="21.8" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.77" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (6 samples, 0.01%; +0.01%)</title><rect x="1174.4" y="501" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1177.35" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.00%)</title><rect x="808.9" y="261" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="811.92" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (10 samples, 0.02%; -0.02%)</title><rect x="1108.3" y="389" width="0.2" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="1111.28" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (8 samples, 0.02%; +0.00%)</title><rect x="283.3" y="357" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="286.29" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="198.5" y="117" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="201.47" y="127.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (170 samples, 0.35%; +0.00%)</title><rect x="409.5" y="309" width="4.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="412.55" y="319.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (302 samples, 0.63%; -0.01%)</title><rect x="721.9" y="437" width="7.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="724.90" y="447.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (17 samples, 0.04%; +0.01%)</title><rect x="1039.5" y="245" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1042.48" y="255.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (9 samples, 0.02%; +0.00%)</title><rect x="911.7" y="325" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="914.67" y="335.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (35 samples, 0.07%; -0.04%)</title><rect x="727.0" y="293" width="0.9" height="15.0" fill="rgb(156,156,255)" rx="2" ry="2" />
<text  x="730.03" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (25 samples, 0.05%; -0.00%)</title><rect x="967.2" y="341" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="970.16" y="351.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (6 samples, 0.01%; -0.00%)</title><rect x="273.1" y="293" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="276.12" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (13 samples, 0.03%; -0.01%)</title><rect x="408.6" y="261" width="0.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="411.59" y="271.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (144 samples, 0.30%; +0.01%)</title><rect x="526.0" y="309" width="3.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="528.95" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (61 samples, 0.13%; +0.09%)</title><rect x="169.3" y="133" width="1.5" height="15.0" fill="rgb(255,81,81)" rx="2" ry="2" />
<text  x="172.34" y="143.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (5 samples, 0.01%; +0.00%)</title><rect x="484.5" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="487.54" y="319.5" ></text>
</g>
<g >
<title>operator new (22 samples, 0.05%; +0.01%)</title><rect x="417.1" y="373" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="420.06" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (569 samples, 1.18%; +0.02%)</title><rect x="231.5" y="261" width="13.9" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="234.46" y="271.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (198 samples, 0.41%; +0.00%)</title><rect x="276.0" y="293" width="4.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="278.97" y="303.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (9 samples, 0.02%; +0.00%)</title><rect x="18.9" y="261" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="21.92" y="271.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; +0.01%)</title><rect x="804.5" y="245" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="807.45" y="255.5" ></text>
</g>
<g >
<title>__tls_init (5 samples, 0.01%; -0.01%)</title><rect x="456.2" y="325" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="459.22" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (11 samples, 0.02%; -0.00%)</title><rect x="780.8" y="293" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="783.80" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (8 samples, 0.02%; -0.01%)</title><rect x="140.3" y="277" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="143.26" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (42 samples, 0.09%; +0.02%)</title><rect x="572.2" y="357" width="1.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="575.16" y="367.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (14 samples, 0.03%; +0.01%)</title><rect x="61.9" y="453" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="64.90" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (44 samples, 0.09%; -0.01%)</title><rect x="818.5" y="373" width="1.0" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="821.45" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (5 samples, 0.01%; -0.00%)</title><rect x="22.8" y="405" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="25.82" y="415.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (5 samples, 0.01%; 0.00%)</title><rect x="21.4" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.37" y="255.5" ></text>
</g>
<g >
<title>database::find_schema (62 samples, 0.13%; -0.01%)</title><rect x="754.1" y="389" width="1.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="757.07" y="399.5" ></text>
</g>
<g >
<title>schema::column_at (63 samples, 0.13%; -0.02%)</title><rect x="206.5" y="101" width="1.6" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="209.53" y="111.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (10 samples, 0.02%; +0.00%)</title><rect x="256.4" y="277" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="259.44" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (27 samples, 0.06%; +0.01%)</title><rect x="55.9" y="469" width="0.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="58.88" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (12 samples, 0.02%; +0.00%)</title><rect x="953.7" y="325" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="956.72" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (29 samples, 0.06%; -0.00%)</title><rect x="564.9" y="261" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="567.86" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (9 samples, 0.02%; +0.01%)</title><rect x="1118.3" y="357" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1121.27" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (6 samples, 0.01%; +0.01%)</title><rect x="516.8" y="325" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="519.79" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (23 samples, 0.05%; -0.00%)</title><rect x="664.7" y="469" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="667.69" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (7 samples, 0.01%; -0.00%)</title><rect x="535.5" y="389" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="538.53" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (16 samples, 0.03%; -0.01%)</title><rect x="1102.0" y="357" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1105.01" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (83 samples, 0.17%; -0.01%)</title><rect x="193.1" y="117" width="2.0" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="196.07" y="127.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5,013 samples, 10.44%; +0.00%)</title><rect x="290.6" y="325" width="123.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="293.59" y="335.5" >seastar::intern..</text>
</g>
<g >
<title>operator delete (33 samples, 0.07%; -0.01%)</title><rect x="60.0" y="453" width="0.8" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="63.01" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (5 samples, 0.01%; 0.00%)</title><rect x="40.4" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.38" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (15 samples, 0.03%; -0.01%)</title><rect x="1074.2" y="325" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1077.18" y="335.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (5 samples, 0.01%; -0.01%)</title><rect x="847.2" y="325" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="850.17" y="335.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (30 samples, 0.06%; -0.01%)</title><rect x="790.5" y="181" width="0.7" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="793.45" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (5 samples, 0.01%; -0.01%)</title><rect x="1074.6" y="325" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1077.55" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (8 samples, 0.02%; 0.00%)</title><rect x="266.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="269.81" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::take (6 samples, 0.01%; 0.00%)</title><rect x="1148.7" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1151.68" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (5 samples, 0.01%; -0.01%)</title><rect x="214.1" y="149" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="217.10" y="159.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (9 samples, 0.02%; +0.00%)</title><rect x="220.9" y="181" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="223.93" y="191.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (16 samples, 0.03%; -0.01%)</title><rect x="355.0" y="149" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="358.02" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%; +0.00%)</title><rect x="33.2" y="469" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="36.16" y="479.5" ></text>
</g>
<g >
<title>create_partitions (280 samples, 0.58%; 0.00%)</title><rect x="17.4" y="533" width="6.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.37" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (14 samples, 0.03%; -0.02%)</title><rect x="39.3" y="421" width="0.3" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="42.28" y="431.5" ></text>
</g>
<g >
<title>schema::column_at (17 samples, 0.04%; -0.01%)</title><rect x="387.0" y="181" width="0.4" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="390.00" y="191.5" ></text>
</g>
<g >
<title>database::find_keyspace (168 samples, 0.35%; -0.01%)</title><rect x="1058.6" y="341" width="4.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1061.61" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (6 samples, 0.01%; 0.00%)</title><rect x="954.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="957.90" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%; -0.00%)</title><rect x="1139.6" y="453" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1142.60" y="463.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (47 samples, 0.10%; -0.01%)</title><rect x="815.5" y="309" width="1.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="818.48" y="319.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (10 samples, 0.02%; -0.01%)</title><rect x="726.8" y="293" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="729.78" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (39 samples, 0.08%; -0.02%)</title><rect x="910.9" y="341" width="1.0" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="913.94" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (33 samples, 0.07%; 0.00%)</title><rect x="1140.8" y="421" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.75" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (16 samples, 0.03%; -0.01%)</title><rect x="1126.7" y="373" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1129.70" y="383.5" ></text>
</g>
<g >
<title>schema_registry::get (6 samples, 0.01%; +0.01%)</title><rect x="967.8" y="373" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="970.78" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (24 samples, 0.05%; +0.01%)</title><rect x="725.3" y="309" width="0.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="728.26" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.00%)</title><rect x="420.3" y="405" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="423.31" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (5,922 samples, 12.33%; -0.00%)</title><rect x="116.9" y="341" width="145.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="119.85" y="351.5" >mutation_fragment_..</text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (20 samples, 0.04%; 0.00%)</title><rect x="23.0" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.99" y="431.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (7 samples, 0.01%; +0.01%)</title><rect x="192.8" y="85" width="0.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="195.78" y="95.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%; -0.00%)</title><rect x="662.6" y="469" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="665.55" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (6 samples, 0.01%; 0.00%)</title><rect x="566.2" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="569.16" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (25 samples, 0.05%; 0.00%)</title><rect x="710.1" y="501" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="713.08" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (9 samples, 0.02%; 0.00%)</title><rect x="703.2" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.23" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (85 samples, 0.18%; -0.01%)</title><rect x="786.9" y="213" width="2.1" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="789.87" y="223.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (183 samples, 0.38%; -0.00%)</title><rect x="17.9" y="389" width="4.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="20.93" y="399.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (5 samples, 0.01%; -0.00%)</title><rect x="188.0" y="69" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="191.04" y="79.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (19 samples, 0.04%; +0.02%)</title><rect x="63.7" y="421" width="0.5" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="66.74" y="431.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; -0.03%)</title><rect x="416.3" y="373" width="0.8" height="15.0" fill="rgb(159,159,255)" rx="2" ry="2" />
<text  x="419.33" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (10 samples, 0.02%; +0.00%)</title><rect x="836.1" y="437" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="839.14" y="447.5" ></text>
</g>
<g >
<title>compound_type&lt; (30 samples, 0.06%; -0.01%)</title><rect x="906.8" y="389" width="0.8" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="909.83" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.00%)</title><rect x="1123.6" y="405" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1126.61" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (9 samples, 0.02%; +0.00%)</title><rect x="863.3" y="389" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="866.28" y="399.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (6 samples, 0.01%; 0.00%)</title><rect x="929.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="932.60" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (39 samples, 0.08%; 0.00%)</title><rect x="22.7" y="469" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.72" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (14 samples, 0.03%; 0.00%)</title><rect x="10.1" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.12" y="543.5" ></text>
</g>
<g >
<title>database::find_schema (61 samples, 0.13%; +0.01%)</title><rect x="820.2" y="357" width="1.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="823.22" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (70 samples, 0.15%; +0.01%)</title><rect x="1048.3" y="229" width="1.7" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1051.29" y="239.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (8 samples, 0.02%; +0.01%)</title><rect x="75.2" y="453" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="78.17" y="463.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (483 samples, 1.01%; -0.01%)</title><rect x="458.9" y="309" width="11.9" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="461.94" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (18 samples, 0.04%; +0.00%)</title><rect x="488.5" y="309" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="491.49" y="319.5" ></text>
</g>
<g >
<title>operator delete (18 samples, 0.04%; +0.01%)</title><rect x="632.7" y="485" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="635.66" y="495.5" ></text>
</g>
<g >
<title>dht::shard_of (11 samples, 0.02%; +0.00%)</title><rect x="1002.1" y="293" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1005.14" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (45 samples, 0.09%; 0.00%)</title><rect x="736.8" y="325" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="739.81" y="335.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (64 samples, 0.13%; +0.01%)</title><rect x="150.2" y="213" width="1.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="153.21" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (12 samples, 0.02%; 0.00%)</title><rect x="214.7" y="149" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="217.66" y="159.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (194 samples, 0.40%; +0.00%)</title><rect x="668.1" y="485" width="4.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="671.10" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::validate (5 samples, 0.01%; +0.00%)</title><rect x="829.3" y="421" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="832.34" y="431.5" ></text>
</g>
<g >
<title>database::find_uuid (141 samples, 0.29%; 0.00%)</title><rect x="821.7" y="357" width="3.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="824.72" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="412.7" y="261" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="415.72" y="271.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.02%; +0.01%)</title><rect x="517.6" y="341" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="520.63" y="351.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (20 samples, 0.04%; +0.02%)</title><rect x="1064.5" y="341" width="0.5" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="1067.53" y="351.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (20 samples, 0.04%; -0.02%)</title><rect x="1096.4" y="309" width="0.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1099.44" y="319.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (16 samples, 0.03%; -0.01%)</title><rect x="155.2" y="213" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="158.24" y="223.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (7 samples, 0.01%; +0.00%)</title><rect x="214.8" y="133" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="217.78" y="143.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (306 samples, 0.64%; -0.01%)</title><rect x="273.3" y="309" width="7.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="276.32" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (91 samples, 0.19%; -0.01%)</title><rect x="817.3" y="389" width="2.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="820.32" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (16 samples, 0.03%; 0.00%)</title><rect x="862.2" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.23" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (37 samples, 0.08%; +0.00%)</title><rect x="796.9" y="133" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="799.94" y="143.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (2,864 samples, 5.96%; -0.02%)</title><rect x="982.9" y="357" width="70.3" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="985.86" y="367.5" >service..</text>
</g>
<g >
<title>operator delete (45 samples, 0.09%; +0.01%)</title><rect x="653.3" y="485" width="1.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="656.29" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::needs_filtering (9 samples, 0.02%; +0.01%)</title><rect x="879.0" y="421" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="882.00" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (12 samples, 0.02%; -0.01%)</title><rect x="255.0" y="277" width="0.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="257.97" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="602.2" y="437" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="605.20" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::stats (29 samples, 0.06%; +0.01%)</title><rect x="525.1" y="293" width="0.7" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="528.07" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (5 samples, 0.01%; +0.01%)</title><rect x="833.8" y="389" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="836.78" y="399.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (14 samples, 0.03%; +0.01%)</title><rect x="432.8" y="325" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="435.83" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (78 samples, 0.16%; +0.00%)</title><rect x="855.6" y="469" width="1.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="858.57" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (150 samples, 0.31%; +0.01%)</title><rect x="404.3" y="261" width="3.7" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="407.29" y="271.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (814 samples, 1.69%; -0.02%)</title><rect x="489.1" y="309" width="20.0" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="492.13" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (16 samples, 0.03%; -0.02%)</title><rect x="419.6" y="405" width="0.4" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="422.62" y="415.5" ></text>
</g>
<g >
<title>__tls_init (14 samples, 0.03%; -0.00%)</title><rect x="143.1" y="245" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="146.06" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (177 samples, 0.37%; +0.01%)</title><rect x="755.9" y="373" width="4.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="758.87" y="383.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (8 samples, 0.02%; 0.00%)</title><rect x="429.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="432.59" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.02%; +0.01%)</title><rect x="806.8" y="277" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="809.79" y="287.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (11 samples, 0.02%; +0.01%)</title><rect x="240.4" y="165" width="0.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="243.36" y="175.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (12 samples, 0.02%; +0.01%)</title><rect x="940.2" y="405" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="943.24" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (8 samples, 0.02%; -0.01%)</title><rect x="100.4" y="421" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="103.37" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (14 samples, 0.03%; +0.00%)</title><rect x="275.4" y="293" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="278.41" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (12 samples, 0.02%; +0.01%)</title><rect x="856.7" y="405" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="859.72" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; -0.01%)</title><rect x="296.7" y="229" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="299.70" y="239.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (5 samples, 0.01%; +0.00%)</title><rect x="216.4" y="149" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="219.41" y="159.5" ></text>
</g>
<g >
<title>schema::position (9 samples, 0.02%; 0.00%)</title><rect x="1125.0" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.03" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (7 samples, 0.01%; +0.01%)</title><rect x="445.5" y="293" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="448.46" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (75 samples, 0.16%; +0.01%)</title><rect x="241.8" y="213" width="1.8" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="244.78" y="223.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (9 samples, 0.02%; 0.00%)</title><rect x="675.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.32" y="479.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (9 samples, 0.02%; +0.00%)</title><rect x="366.5" y="213" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="369.46" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (7 samples, 0.01%; +0.01%)</title><rect x="46.3" y="469" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="49.30" y="479.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (2,586 samples, 5.38%; -0.04%)</title><rect x="453.9" y="341" width="63.6" height="15.0" fill="rgb(156,156,255)" rx="2" ry="2" />
<text  x="456.93" y="351.5" >memtab..</text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (11 samples, 0.02%; 0.00%)</title><rect x="723.3" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.30" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (14 samples, 0.03%; +0.01%)</title><rect x="577.2" y="357" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="580.22" y="367.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (12 samples, 0.02%; +0.01%)</title><rect x="893.2" y="293" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="896.25" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (25 samples, 0.05%; -0.01%)</title><rect x="606.7" y="437" width="0.6" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="609.72" y="447.5" ></text>
</g>
<g >
<title>operator new (35 samples, 0.07%; +0.00%)</title><rect x="98.5" y="389" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="101.45" y="399.5" ></text>
</g>
<g >
<title>reader_permit::consume (14 samples, 0.03%; +0.00%)</title><rect x="210.6" y="149" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="213.61" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.01%)</title><rect x="665.5" y="485" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="668.50" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (353 samples, 0.73%; +0.01%)</title><rect x="792.2" y="181" width="8.7" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="795.22" y="191.5" ></text>
</g>
<g >
<title>mutation_querier::consume (8 samples, 0.02%; +0.01%)</title><rect x="317.6" y="213" width="0.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="320.63" y="223.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (10 samples, 0.02%; 0.00%)</title><rect x="1139.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.50" y="479.5" ></text>
</g>
<g >
<title>operator new (60 samples, 0.12%; +0.00%)</title><rect x="532.9" y="405" width="1.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="535.88" y="415.5" ></text>
</g>
<g >
<title>operator new (77 samples, 0.16%; -0.00%)</title><rect x="543.6" y="341" width="1.9" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="546.57" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.00%)</title><rect x="448.1" y="261" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="451.09" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (25 samples, 0.05%; +0.00%)</title><rect x="1073.1" y="309" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1076.05" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt;::operator (8 samples, 0.02%; -0.00%)</title><rect x="72.8" y="389" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="75.76" y="399.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (63 samples, 0.13%; -0.01%)</title><rect x="553.7" y="325" width="1.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="556.66" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (15 samples, 0.03%; +0.01%)</title><rect x="619.6" y="389" width="0.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="622.59" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (8 samples, 0.02%; +0.01%)</title><rect x="313.7" y="165" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="316.73" y="175.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (11 samples, 0.02%; -0.03%)</title><rect x="331.2" y="181" width="0.2" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="334.17" y="191.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (5 samples, 0.01%; 0.00%)</title><rect x="10.3" y="421" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.29" y="431.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (72 samples, 0.15%; -0.01%)</title><rect x="789.5" y="213" width="1.7" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="792.47" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (84 samples, 0.17%; -0.00%)</title><rect x="952.8" y="373" width="2.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="955.84" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (17 samples, 0.04%; -0.00%)</title><rect x="789.7" y="197" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="792.74" y="207.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (205 samples, 0.43%; -0.01%)</title><rect x="641.8" y="469" width="5.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="644.84" y="479.5" ></text>
</g>
<g >
<title>operator delete (74 samples, 0.15%; +0.02%)</title><rect x="929.8" y="405" width="1.8" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="932.75" y="415.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (9 samples, 0.02%; +0.00%)</title><rect x="799.0" y="117" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="802.05" y="127.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (51 samples, 0.11%; +0.04%)</title><rect x="222.2" y="149" width="1.2" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="225.18" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; -0.00%)</title><rect x="957.5" y="405" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="960.48" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (24 samples, 0.05%; 0.00%)</title><rect x="1071.9" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1074.85" y="303.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (73 samples, 0.15%; +0.02%)</title><rect x="1119.3" y="405" width="1.8" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="1122.31" y="415.5" ></text>
</g>
<g >
<title>local_schema_registry (5 samples, 0.01%; -0.00%)</title><rect x="974.1" y="357" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="977.11" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (5 samples, 0.01%; 0.00%)</title><rect x="20.4" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.39" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (11 samples, 0.02%; +0.00%)</title><rect x="212.3" y="149" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="215.28" y="159.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (9 samples, 0.02%; -0.00%)</title><rect x="616.2" y="389" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="619.15" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (11 samples, 0.02%; -0.00%)</title><rect x="566.4" y="293" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="569.36" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (5 samples, 0.01%; 0.00%)</title><rect x="684.4" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.44" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="720.4" y="453" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="723.40" y="463.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (15 samples, 0.03%; -0.01%)</title><rect x="506.0" y="229" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="509.01" y="239.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (268 samples, 0.56%; +0.00%)</title><rect x="17.6" y="517" width="6.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="20.61" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (9 samples, 0.02%; 0.00%)</title><rect x="845.7" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="848.74" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (32 samples, 0.07%; -0.00%)</title><rect x="636.8" y="485" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="639.81" y="495.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (456 samples, 0.95%; -0.01%)</title><rect x="698.0" y="485" width="11.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="700.97" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (12 samples, 0.02%; -0.02%)</title><rect x="946.5" y="389" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="949.45" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (14 samples, 0.03%; 0.00%)</title><rect x="1141.2" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.22" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (5 samples, 0.01%; 0.00%)</title><rect x="231.3" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="234.34" y="271.5" ></text>
</g>
<g >
<title>operator delete (50 samples, 0.10%; +0.05%)</title><rect x="580.1" y="389" width="1.2" height="15.0" fill="rgb(255,141,141)" rx="2" ry="2" />
<text  x="583.09" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (132 samples, 0.27%; -0.01%)</title><rect x="1008.7" y="261" width="3.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1011.75" y="271.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (15 samples, 0.03%; +0.00%)</title><rect x="1096.1" y="309" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1099.07" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (36 samples, 0.07%; +0.06%)</title><rect x="879.4" y="421" width="0.9" height="15.0" fill="rgb(255,125,125)" rx="2" ry="2" />
<text  x="882.40" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (230 samples, 0.48%; -0.02%)</title><rect x="608.7" y="437" width="5.7" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="611.71" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.01%; +0.00%)</title><rect x="1156.1" y="453" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1159.08" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (81 samples, 0.17%; +0.01%)</title><rect x="1035.9" y="197" width="2.0" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1038.91" y="207.5" ></text>
</g>
<g >
<title>seastar::gate::enter (5 samples, 0.01%; -0.01%)</title><rect x="1039.8" y="229" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1042.77" y="239.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (6 samples, 0.01%; +0.00%)</title><rect x="1044.7" y="261" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1047.66" y="271.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (53 samples, 0.11%; -0.01%)</title><rect x="303.1" y="229" width="1.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="306.11" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (49 samples, 0.10%; -0.01%)</title><rect x="1107.3" y="405" width="1.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1110.34" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (6 samples, 0.01%; 0.00%)</title><rect x="18.0" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.98" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (6 samples, 0.01%; 0.00%)</title><rect x="863.1" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.06" y="383.5" ></text>
</g>
<g >
<title>query::querier_base::close (1,333 samples, 2.77%; -0.00%)</title><rect x="549.1" y="437" width="32.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="552.14" y="447.5" >qu..</text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (35 samples, 0.07%; -0.00%)</title><rect x="100.6" y="421" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="103.57" y="431.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (10 samples, 0.02%; +0.01%)</title><rect x="741.6" y="277" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="744.64" y="287.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (11 samples, 0.02%; +0.00%)</title><rect x="1106.1" y="373" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1109.09" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (54 samples, 0.11%; -0.01%)</title><rect x="247.5" y="213" width="1.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="250.45" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (25 samples, 0.05%; 0.00%)</title><rect x="1067.8" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1070.80" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.01%)</title><rect x="588.2" y="373" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="591.17" y="383.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (8 samples, 0.02%; +0.00%)</title><rect x="812.2" y="341" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="815.19" y="351.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (8 samples, 0.02%; 0.00%)</title><rect x="19.5" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.48" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (5 samples, 0.01%; +0.01%)</title><rect x="624.6" y="469" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="627.60" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (6 samples, 0.01%; +0.01%)</title><rect x="1174.1" y="501" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1177.06" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (17 samples, 0.04%; +0.01%)</title><rect x="411.3" y="277" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="414.29" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (153 samples, 0.32%; -0.00%)</title><rect x="1058.8" y="325" width="3.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1061.78" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (9 samples, 0.02%; +0.01%)</title><rect x="445.2" y="293" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="448.24" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (41 samples, 0.09%; 0.00%)</title><rect x="1139.7" y="357" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.74" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (135 samples, 0.28%; -0.00%)</title><rect x="997.5" y="309" width="3.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1000.52" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (7 samples, 0.01%; +0.01%)</title><rect x="902.6" y="357" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="905.61" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (64 samples, 0.13%; -0.00%)</title><rect x="801.9" y="261" width="1.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="804.90" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (9 samples, 0.02%; 0.00%)</title><rect x="919.5" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="922.48" y="399.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (9 samples, 0.02%; +0.00%)</title><rect x="793.8" y="117" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="796.84" y="127.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (7 samples, 0.01%; -0.01%)</title><rect x="444.2" y="293" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="447.16" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%; +0.01%)</title><rect x="630.3" y="453" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="633.32" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (35 samples, 0.07%; -0.01%)</title><rect x="211.8" y="165" width="0.8" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="214.79" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (8 samples, 0.02%; +0.01%)</title><rect x="1133.7" y="421" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1136.73" y="431.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (13 samples, 0.03%; +0.01%)</title><rect x="450.7" y="277" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="453.69" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (50 samples, 0.10%; +0.00%)</title><rect x="651.9" y="453" width="1.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="654.89" y="463.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (18 samples, 0.04%; +0.00%)</title><rect x="823.2" y="277" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="826.24" y="287.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.04%; 0.00%)</title><rect x="528.5" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="531.53" y="271.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, service::client_state::has_column_family_access (5 samples, 0.01%; +0.01%)</title><rect x="828.5" y="405" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="831.45" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (5 samples, 0.01%; +0.01%)</title><rect x="217.2" y="165" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="220.17" y="175.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (123 samples, 0.26%; +0.01%)</title><rect x="825.2" y="373" width="3.0" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="828.21" y="383.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (15 samples, 0.03%; +0.01%)</title><rect x="798.7" y="117" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="801.68" y="127.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (133 samples, 0.28%; +0.01%)</title><rect x="821.9" y="341" width="3.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="824.87" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (14 samples, 0.03%; +0.01%)</title><rect x="671.6" y="437" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="674.61" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.01%)</title><rect x="226.1" y="181" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="229.11" y="191.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.00%)</title><rect x="800.9" y="197" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="803.89" y="207.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (17 samples, 0.04%; -0.04%)</title><rect x="892.8" y="293" width="0.4" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="895.83" y="303.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (5 samples, 0.01%; -0.04%)</title><rect x="1153.8" y="405" width="0.1" height="15.0" fill="rgb(156,156,255)" rx="2" ry="2" />
<text  x="1156.82" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (190 samples, 0.40%; -0.00%)</title><rect x="1169.3" y="485" width="4.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1172.29" y="495.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (44 samples, 0.09%; -0.00%)</title><rect x="226.3" y="229" width="1.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="229.26" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::~vector (9 samples, 0.02%; +0.01%)</title><rect x="43.4" y="469" width="0.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="46.38" y="479.5" ></text>
</g>
<g >
<title>range_tombstone_stream::empty (5 samples, 0.01%; +0.00%)</title><rect x="227.4" y="229" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="230.39" y="239.5" ></text>
</g>
<g >
<title>operator new (53 samples, 0.11%; -0.01%)</title><rect x="779.4" y="277" width="1.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="782.40" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (62 samples, 0.13%; +0.01%)</title><rect x="364.9" y="181" width="1.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="367.94" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (7 samples, 0.01%; +0.01%)</title><rect x="682.5" y="437" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="685.52" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (6 samples, 0.01%; -0.01%)</title><rect x="613.7" y="373" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="616.67" y="383.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (11 samples, 0.02%; 0.00%)</title><rect x="1174.7" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1177.67" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (9 samples, 0.02%; 0.00%)</title><rect x="643.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="646.37" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (35 samples, 0.07%; +0.01%)</title><rect x="694.0" y="485" width="0.8" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="696.97" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (7 samples, 0.01%; -0.01%)</title><rect x="1122.9" y="421" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1125.92" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (12 samples, 0.02%; 0.00%)</title><rect x="1174.7" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1177.67" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (203 samples, 0.42%; +0.01%)</title><rect x="132.6" y="261" width="5.0" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="135.57" y="271.5" ></text>
</g>
<g >
<title>row::compact_and_expire (832 samples, 1.73%; -0.00%)</title><rect x="367.0" y="213" width="20.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="369.98" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (20 samples, 0.04%; +0.01%)</title><rect x="788.2" y="133" width="0.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="791.24" y="143.5" ></text>
</g>
<g >
<title>partition_entry::read (80 samples, 0.17%; +0.01%)</title><rect x="510.4" y="309" width="2.0" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="513.41" y="319.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (259 samples, 0.54%; -0.00%)</title><rect x="17.7" y="501" width="6.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="20.66" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (9 samples, 0.02%; -0.01%)</title><rect x="588.3" y="373" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="591.32" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (8 samples, 0.02%; -0.02%)</title><rect x="262.6" y="341" width="0.2" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="265.61" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (6 samples, 0.01%; -0.00%)</title><rect x="899.7" y="357" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="902.69" y="367.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (7 samples, 0.01%; +0.01%)</title><rect x="1162.3" y="469" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1165.29" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (5 samples, 0.01%; 0.00%)</title><rect x="954.5" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="957.46" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (148 samples, 0.31%; +0.02%)</title><rect x="628.6" y="485" width="3.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="631.63" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.01%; +0.01%)</title><rect x="908.9" y="341" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="911.90" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (20 samples, 0.04%; 0.00%)</title><rect x="698.3" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="701.29" y="479.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%; +0.00%)</title><rect x="151.0" y="181" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="154.02" y="191.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (7 samples, 0.01%; +0.01%)</title><rect x="706.4" y="437" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="709.42" y="447.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (46 samples, 0.10%; +0.06%)</title><rect x="167.9" y="133" width="1.1" height="15.0" fill="rgb(255,125,125)" rx="2" ry="2" />
<text  x="170.89" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (29 samples, 0.06%; +0.01%)</title><rect x="631.6" y="469" width="0.7" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="634.55" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (9 samples, 0.02%; +0.01%)</title><rect x="259.3" y="309" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="262.29" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (5 samples, 0.01%; 0.00%)</title><rect x="653.0" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="656.00" y="447.5" ></text>
</g>
<g >
<title>auth::get_permissions (1,232 samples, 2.56%; +0.01%)</title><rect x="778.8" y="309" width="30.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="781.81" y="319.5" >au..</text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (12 samples, 0.02%; -0.00%)</title><rect x="1140.9" y="261" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1143.90" y="271.5" ></text>
</g>
<g >
<title>__strlen_avx2 (89 samples, 0.19%; -0.04%)</title><rect x="1015.9" y="245" width="2.2" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="1018.94" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (7 samples, 0.01%; +0.01%)</title><rect x="937.0" y="373" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="940.02" y="383.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (6 samples, 0.01%; 0.00%)</title><rect x="1139.8" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.84" y="223.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (5 samples, 0.01%; 0.00%)</title><rect x="591.1" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="594.12" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (13 samples, 0.03%; +0.01%)</title><rect x="227.7" y="229" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="230.66" y="239.5" ></text>
</g>
<g >
<title>operator delete (60 samples, 0.12%; +0.03%)</title><rect x="556.0" y="325" width="1.5" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="559.02" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (5 samples, 0.01%; +0.01%)</title><rect x="636.4" y="485" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="639.39" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (7 samples, 0.01%; +0.01%)</title><rect x="663.5" y="453" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="666.53" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (11 samples, 0.02%; +0.01%)</title><rect x="318.7" y="197" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="321.69" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (45 samples, 0.09%; -0.00%)</title><rect x="820.6" y="325" width="1.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="823.59" y="335.5" ></text>
</g>
<g >
<title>main (46,929 samples, 97.69%; 0.00%)</title><rect x="24.3" y="613" width="1152.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.35" y="623.5" >main</text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (163 samples, 0.34%; -0.01%)</title><rect x="262.8" y="341" width="4.0" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="265.81" y="351.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.01%; -0.00%)</title><rect x="404.0" y="261" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="407.02" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (5 samples, 0.01%; -0.02%)</title><rect x="80.3" y="453" width="0.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="83.32" y="463.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (177 samples, 0.37%; -0.01%)</title><rect x="724.0" y="405" width="4.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="726.98" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (14 samples, 0.03%; -0.00%)</title><rect x="752.0" y="373" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="754.96" y="383.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (25 samples, 0.05%; +0.02%)</title><rect x="240.7" y="197" width="0.6" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="243.70" y="207.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (116 samples, 0.24%; -0.02%)</title><rect x="822.2" y="325" width="2.8" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="825.19" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (42 samples, 0.09%; -0.01%)</title><rect x="822.9" y="309" width="1.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="825.92" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (10 samples, 0.02%; +0.01%)</title><rect x="72.4" y="373" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="75.39" y="383.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (70 samples, 0.15%; -0.00%)</title><rect x="773.7" y="325" width="1.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="776.75" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (23 samples, 0.05%; +0.01%)</title><rect x="986.4" y="261" width="0.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="989.42" y="271.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (622 samples, 1.29%; +0.01%)</title><rect x="125.2" y="293" width="15.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="128.18" y="303.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (12 samples, 0.02%; -0.00%)</title><rect x="214.4" y="133" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="217.37" y="143.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (70 samples, 0.15%; -0.01%)</title><rect x="148.4" y="197" width="1.7" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="151.41" y="207.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (32 samples, 0.07%; -0.01%)</title><rect x="1094.2" y="277" width="0.8" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1097.23" y="287.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (12 samples, 0.02%; +0.02%)</title><rect x="903.9" y="373" width="0.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="906.86" y="383.5" ></text>
</g>
<g >
<title>operator new (77 samples, 0.16%; +0.00%)</title><rect x="153.1" y="213" width="1.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="156.11" y="223.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (17 samples, 0.04%; -0.00%)</title><rect x="840.1" y="357" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="843.12" y="367.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.02%; +0.01%)</title><rect x="106.3" y="421" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="109.31" y="431.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (91 samples, 0.19%; +0.00%)</title><rect x="302.2" y="245" width="2.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="305.18" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (5,831 samples, 12.14%; -0.01%)</title><rect x="962.0" y="389" width="143.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="964.98" y="399.5" >service::storage_p..</text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (6 samples, 0.01%; -0.00%)</title><rect x="477.9" y="197" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="480.86" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (13 samples, 0.03%; +0.01%)</title><rect x="785.8" y="229" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="788.79" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (20 samples, 0.04%; -0.02%)</title><rect x="154.5" y="181" width="0.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="157.51" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (53 samples, 0.11%; +0.01%)</title><rect x="1149.2" y="485" width="1.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1152.15" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (9 samples, 0.02%; +0.01%)</title><rect x="960.4" y="389" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="963.38" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (71 samples, 0.15%; -0.02%)</title><rect x="264.1" y="325" width="1.8" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="267.13" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (68 samples, 0.14%; +0.00%)</title><rect x="985.3" y="277" width="1.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="988.31" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (47 samples, 0.10%; +0.02%)</title><rect x="927.7" y="405" width="1.1" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="930.69" y="415.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (18 samples, 0.04%; +0.02%)</title><rect x="1114.7" y="389" width="0.5" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="1117.74" y="399.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (13 samples, 0.03%; -0.01%)</title><rect x="881.5" y="405" width="0.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="884.46" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (14 samples, 0.03%; +0.01%)</title><rect x="1120.8" y="389" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1123.76" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.01%)</title><rect x="783.9" y="213" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="786.94" y="223.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (105 samples, 0.22%; +0.00%)</title><rect x="814.1" y="341" width="2.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="817.08" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; -0.00%)</title><rect x="517.0" y="325" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="520.04" y="335.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (159 samples, 0.33%; +0.01%)</title><rect x="541.6" y="389" width="3.9" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="544.55" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (30 samples, 0.06%; -0.02%)</title><rect x="316.5" y="165" width="0.8" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="319.53" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (7 samples, 0.01%; -0.00%)</title><rect x="709.7" y="485" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="712.71" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (5 samples, 0.01%; +0.01%)</title><rect x="656.3" y="469" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="659.34" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (8 samples, 0.02%; -0.01%)</title><rect x="228.1" y="213" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="231.12" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (12 samples, 0.02%; -0.01%)</title><rect x="136.6" y="229" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="139.60" y="239.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (10 samples, 0.02%; +0.00%)</title><rect x="1140.9" y="213" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1143.92" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (8 samples, 0.02%; -0.01%)</title><rect x="666.3" y="485" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="669.33" y="495.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (8 samples, 0.02%; 0.00%)</title><rect x="217.9" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="220.93" y="159.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (7 samples, 0.01%; 0.00%)</title><rect x="128.6" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="131.62" y="287.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (405 samples, 0.84%; -0.01%)</title><rect x="307.5" y="213" width="9.9" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="310.49" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="1143.8" y="501" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1146.85" y="511.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (43 samples, 0.09%; -0.00%)</title><rect x="1128.5" y="389" width="1.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1131.54" y="399.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (29 samples, 0.06%; +0.00%)</title><rect x="460.2" y="277" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="463.20" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (16 samples, 0.03%; -0.00%)</title><rect x="1140.8" y="309" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1143.82" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (41 samples, 0.09%; +0.05%)</title><rect x="77.0" y="453" width="1.0" height="15.0" fill="rgb(255,137,137)" rx="2" ry="2" />
<text  x="79.96" y="463.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (7 samples, 0.01%; +0.01%)</title><rect x="951.9" y="405" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="954.88" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (12 samples, 0.02%; +0.01%)</title><rect x="160.9" y="213" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="163.94" y="223.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (176 samples, 0.37%; +0.00%)</title><rect x="796.6" y="165" width="4.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="799.57" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (7 samples, 0.01%; -0.01%)</title><rect x="1120.4" y="373" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1123.44" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (10 samples, 0.02%; -0.00%)</title><rect x="674.3" y="485" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="677.29" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (7 samples, 0.01%; +0.01%)</title><rect x="80.0" y="453" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="82.98" y="463.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (31 samples, 0.06%; 0.00%)</title><rect x="1139.8" y="277" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.79" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (17 samples, 0.04%; +0.00%)</title><rect x="167.0" y="149" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="170.03" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (10 samples, 0.02%; +0.01%)</title><rect x="257.2" y="277" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="260.21" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (16 samples, 0.03%; -0.00%)</title><rect x="1150.1" y="453" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1153.06" y="463.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.02%; +0.01%)</title><rect x="488.2" y="309" width="0.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="491.15" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (13 samples, 0.03%; +0.00%)</title><rect x="944.6" y="341" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="947.64" y="351.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (43 samples, 0.09%; -0.00%)</title><rect x="618.9" y="405" width="1.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="621.90" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (7 samples, 0.01%; +0.01%)</title><rect x="1134.2" y="421" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1137.19" y="431.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (6 samples, 0.01%; +0.00%)</title><rect x="837.9" y="437" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="840.91" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (13 samples, 0.03%; -0.03%)</title><rect x="604.0" y="437" width="0.3" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="607.02" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (9 samples, 0.02%; -0.02%)</title><rect x="900.0" y="357" width="0.3" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="903.03" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,527 samples, 7.34%; -0.04%)</title><rect x="304.4" y="245" width="86.7" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="307.42" y="255.5" >flat_mutat..</text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (12 samples, 0.02%; -0.01%)</title><rect x="564.2" y="277" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="567.25" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (5 samples, 0.01%; -0.00%)</title><rect x="932.7" y="405" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="935.70" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (5 samples, 0.01%; +0.01%)</title><rect x="718.5" y="469" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="721.51" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (392 samples, 0.82%; -0.02%)</title><rect x="1065.3" y="341" width="9.7" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1068.34" y="351.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (716 samples, 1.49%; +0.05%)</title><rect x="175.5" y="117" width="17.6" height="15.0" fill="rgb(255,137,137)" rx="2" ry="2" />
<text  x="178.48" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (21 samples, 0.04%; 0.00%)</title><rect x="707.9" y="421" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="710.94" y="431.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (16 samples, 0.03%; -0.01%)</title><rect x="331.7" y="181" width="0.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="334.73" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (8 samples, 0.02%; +0.01%)</title><rect x="101.2" y="405" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="104.23" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (7 samples, 0.01%; -0.01%)</title><rect x="854.6" y="453" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="857.64" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (58 samples, 0.12%; -0.01%)</title><rect x="1010.6" y="245" width="1.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1013.56" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (15 samples, 0.03%; +0.02%)</title><rect x="25.9" y="517" width="0.4" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="28.94" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (9 samples, 0.02%; +0.01%)</title><rect x="935.2" y="405" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="938.15" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (8 samples, 0.02%; +0.00%)</title><rect x="1059.0" y="309" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1061.98" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (75 samples, 0.16%; +0.02%)</title><rect x="937.2" y="373" width="1.9" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="940.22" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (157 samples, 0.33%; -0.00%)</title><rect x="724.5" y="373" width="3.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="727.47" y="383.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (10 samples, 0.02%; 0.00%)</title><rect x="708.2" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.21" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (8 samples, 0.02%; 0.00%)</title><rect x="739.1" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="742.14" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (3,114 samples, 6.48%; +0.01%)</title><rect x="752.8" y="421" width="76.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="755.82" y="431.5" >cql3::st..</text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (78 samples, 0.16%; +0.00%)</title><rect x="521.8" y="309" width="1.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="524.83" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; +0.01%)</title><rect x="752.5" y="405" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="755.48" y="415.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (11,246 samples, 23.41%; +0.04%)</title><rect x="863.5" y="485" width="276.2" height="15.0" fill="rgb(255,153,153)" rx="2" ry="2" />
<text  x="866.50" y="495.5" >seastar::concrete_execution_stage&lt;sea..</text>
</g>
<g >
<title>single_node_cql_env::local_qp (5 samples, 0.01%; -0.01%)</title><rect x="848.4" y="453" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="851.42" y="463.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (14 samples, 0.03%; 0.00%)</title><rect x="1114.0" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1116.98" y="367.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (24 samples, 0.05%; -0.00%)</title><rect x="228.7" y="245" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="231.71" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (90 samples, 0.19%; +0.00%)</title><rect x="944.0" y="373" width="2.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="947.00" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (7 samples, 0.01%; -0.01%)</title><rect x="689.7" y="453" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="692.72" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (11 samples, 0.02%; -0.01%)</title><rect x="62.7" y="437" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="65.66" y="447.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (5 samples, 0.01%; -0.00%)</title><rect x="286.1" y="405" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="289.12" y="415.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (36 samples, 0.07%; +0.00%)</title><rect x="837.0" y="437" width="0.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="840.02" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (12 samples, 0.02%; 0.00%)</title><rect x="23.7" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.68" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (80 samples, 0.17%; +0.01%)</title><rect x="142.6" y="261" width="2.0" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="145.59" y="271.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (700 samples, 1.46%; 0.00%)</title><rect x="784.5" y="261" width="17.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="787.53" y="271.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (240 samples, 0.50%; +0.03%)</title><rect x="913.0" y="373" width="5.9" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="916.02" y="383.5" ></text>
</g>
<g >
<title>database::has_keyspace (128 samples, 0.27%; -0.00%)</title><rect x="838.4" y="421" width="3.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="841.40" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="453.8" y="341" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="456.81" y="351.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (40 samples, 0.08%; -0.00%)</title><rect x="1139.7" y="325" width="1.0" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1142.74" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (5,440 samples, 11.32%; -0.02%)</title><rect x="969.4" y="373" width="133.6" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="972.37" y="383.5" >service::storage..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (7 samples, 0.01%; +0.01%)</title><rect x="163.4" y="197" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="166.37" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (6 samples, 0.01%; +0.01%)</title><rect x="504.7" y="245" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="507.66" y="255.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (5 samples, 0.01%; 0.00%)</title><rect x="770.2" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="773.24" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (30 samples, 0.06%; 0.00%)</title><rect x="861.3" y="501" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.32" y="511.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (8 samples, 0.02%; -0.00%)</title><rect x="307.6" y="197" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="310.61" y="207.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (20 samples, 0.04%; -0.01%)</title><rect x="447.7" y="277" width="0.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="450.74" y="287.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (8 samples, 0.02%; 0.00%)</title><rect x="19.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.48" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (24 samples, 0.05%; +0.01%)</title><rect x="138.0" y="261" width="0.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="141.05" y="271.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (5,327 samples, 11.09%; 0.00%)</title><rect x="287.4" y="389" width="130.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="290.39" y="399.5" >query::consume_p..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (35 samples, 0.07%; -0.01%)</title><rect x="679.8" y="469" width="0.9" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="682.82" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (8 samples, 0.02%; +0.01%)</title><rect x="586.8" y="405" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="589.77" y="415.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (43 samples, 0.09%; +0.01%)</title><rect x="831.3" y="421" width="1.0" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="834.28" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (314 samples, 0.65%; -0.01%)</title><rect x="250.5" y="309" width="7.7" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="253.48" y="319.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (7 samples, 0.01%; +0.00%)</title><rect x="909.0" y="341" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="912.02" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (29 samples, 0.06%; +0.01%)</title><rect x="757.0" y="325" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="760.02" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.09%; 0.00%)</title><rect x="1139.7" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.74" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (9 samples, 0.02%; +0.00%)</title><rect x="1151.1" y="485" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1154.09" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (5 samples, 0.01%; -0.00%)</title><rect x="102.0" y="421" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="104.97" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (122 samples, 0.25%; -0.04%)</title><rect x="1059.3" y="309" width="3.0" height="15.0" fill="rgb(156,156,255)" rx="2" ry="2" />
<text  x="1062.27" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (17 samples, 0.04%; -0.00%)</title><rect x="1051.7" y="293" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1054.71" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (5 samples, 0.01%; -0.01%)</title><rect x="648.2" y="373" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="651.21" y="383.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (37 samples, 0.08%; -0.00%)</title><rect x="569.5" y="357" width="0.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="572.50" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_range_check (5 samples, 0.01%; +0.01%)</title><rect x="898.0" y="309" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="901.02" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (50 samples, 0.10%; -0.02%)</title><rect x="123.9" y="293" width="1.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="126.88" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (8 samples, 0.02%; -0.01%)</title><rect x="637.8" y="485" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="640.77" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (18 samples, 0.04%; -0.01%)</title><rect x="214.2" y="149" width="0.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="217.22" y="159.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="1121.1" y="405" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1124.10" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (20 samples, 0.04%; 0.00%)</title><rect x="634.8" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="637.82" y="495.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (10 samples, 0.02%; 0.00%)</title><rect x="304.1" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="307.15" y="223.5" ></text>
</g>
<g >
<title>operator new (140 samples, 0.29%; +0.00%)</title><rect x="1008.6" y="277" width="3.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1011.57" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (17 samples, 0.04%; +0.02%)</title><rect x="407.6" y="229" width="0.4" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="410.56" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (35 samples, 0.07%; -0.06%)</title><rect x="74.0" y="373" width="0.8" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="76.96" y="383.5" ></text>
</g>
<g >
<title>tombstone::apply (10 samples, 0.02%; -0.01%)</title><rect x="387.6" y="197" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="390.64" y="207.5" ></text>
</g>
<g >
<title>database::find_column_family (47 samples, 0.10%; -0.01%)</title><rect x="754.4" y="373" width="1.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="757.39" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (208 samples, 0.43%; +0.01%)</title><rect x="688.2" y="469" width="5.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="691.22" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (5 samples, 0.01%; +0.00%)</title><rect x="147.0" y="245" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="150.04" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (7 samples, 0.01%; 0.00%)</title><rect x="933.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="936.12" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (15 samples, 0.03%; -0.01%)</title><rect x="558.3" y="277" width="0.4" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="561.30" y="287.5" ></text>
</g>
<g >
<title>utils::array_search_gt (13 samples, 0.03%; -0.01%)</title><rect x="469.3" y="277" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="472.31" y="287.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (5 samples, 0.01%; +0.00%)</title><rect x="832.3" y="421" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="835.33" y="431.5" ></text>
</g>
<g >
<title>operator delete (25 samples, 0.05%; +0.00%)</title><rect x="669.4" y="453" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="672.43" y="463.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (6 samples, 0.01%; +0.01%)</title><rect x="315.1" y="181" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="318.05" y="191.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (112 samples, 0.23%; +0.01%)</title><rect x="797.9" y="149" width="2.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="800.89" y="159.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (29 samples, 0.06%; +0.01%)</title><rect x="1060.5" y="277" width="0.7" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1063.48" y="287.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (14 samples, 0.03%; +0.01%)</title><rect x="237.0" y="197" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="239.97" y="207.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (12 samples, 0.02%; +0.01%)</title><rect x="649.6" y="453" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="652.58" y="463.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (307 samples, 0.64%; +0.02%)</title><rect x="889.4" y="309" width="7.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="892.37" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="43.0" y="469" width="0.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="45.96" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (9 samples, 0.02%; +0.01%)</title><rect x="811.7" y="277" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="814.65" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (22 samples, 0.05%; +0.02%)</title><rect x="616.9" y="437" width="0.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="619.86" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (11 samples, 0.02%; +0.01%)</title><rect x="78.6" y="453" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="81.61" y="463.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (4,514 samples, 9.40%; -0.01%)</title><rect x="422.0" y="405" width="110.9" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="425.00" y="415.5" >mutation_sour..</text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (44 samples, 0.09%; +0.00%)</title><rect x="18.2" y="293" width="1.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="21.18" y="303.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (135 samples, 0.28%; +0.04%)</title><rect x="893.6" y="293" width="3.3" height="15.0" fill="rgb(255,153,153)" rx="2" ry="2" />
<text  x="896.59" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (21 samples, 0.04%; -0.01%)</title><rect x="655.4" y="485" width="0.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="658.38" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (33 samples, 0.07%; 0.00%)</title><rect x="1140.8" y="437" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.75" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (29 samples, 0.06%; +0.00%)</title><rect x="607.5" y="437" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="610.53" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (19 samples, 0.04%; -0.01%)</title><rect x="588.1" y="389" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="591.07" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (15 samples, 0.03%; -0.00%)</title><rect x="534.6" y="389" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="537.62" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.01%; +0.00%)</title><rect x="787.7" y="149" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="790.68" y="159.5" ></text>
</g>
<g >
<title>operator new (53 samples, 0.11%; -0.00%)</title><rect x="851.4" y="357" width="1.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="854.42" y="367.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (43 samples, 0.09%; -0.01%)</title><rect x="457.0" y="325" width="1.0" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="459.96" y="335.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (26 samples, 0.05%; +0.05%)</title><rect x="959.7" y="389" width="0.6" height="15.0" fill="rgb(255,141,141)" rx="2" ry="2" />
<text  x="962.67" y="399.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (42 samples, 0.09%; +0.04%)</title><rect x="238.6" y="181" width="1.1" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="241.64" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (15 samples, 0.03%; +0.00%)</title><rect x="1050.6" y="197" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1053.63" y="207.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (9 samples, 0.02%; -0.00%)</title><rect x="24.6" y="517" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="27.57" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.01%)</title><rect x="1142.3" y="485" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1145.35" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (11 samples, 0.02%; +0.01%)</title><rect x="718.2" y="469" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="721.24" y="479.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (13 samples, 0.03%; -0.01%)</title><rect x="581.4" y="405" width="0.3" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="584.42" y="415.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (12 samples, 0.02%; +0.01%)</title><rect x="1060.9" y="261" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1063.89" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;void&gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type&gt; (5 samples, 0.01%; +0.00%)</title><rect x="1042.0" y="261" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1045.03" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (23,206 samples, 48.31%; +0.06%)</title><rect x="51.5" y="485" width="570.0" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="54.51" y="495.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (28 samples, 0.06%; +0.01%)</title><rect x="738.2" y="373" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="741.23" y="383.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (204 samples, 0.42%; -0.01%)</title><rect x="747.8" y="421" width="5.0" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="750.81" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (16 samples, 0.03%; 0.00%)</title><rect x="285.6" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="288.55" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (6 samples, 0.01%; -0.01%)</title><rect x="1168.8" y="453" width="0.1" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="1171.78" y="463.5" ></text>
</g>
<g >
<title>compound_type&lt; (5 samples, 0.01%; -0.01%)</title><rect x="540.8" y="341" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="543.79" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (33 samples, 0.07%; -0.03%)</title><rect x="506.6" y="277" width="0.9" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="509.65" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (34 samples, 0.07%; +0.01%)</title><rect x="658.2" y="485" width="0.8" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="661.18" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (12 samples, 0.02%; +0.00%)</title><rect x="200.4" y="101" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="203.39" y="111.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (13 samples, 0.03%; +0.01%)</title><rect x="735.2" y="389" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="738.18" y="399.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (10 samples, 0.02%; -0.07%)</title><rect x="429.3" y="341" width="0.3" height="15.0" fill="rgb(97,97,255)" rx="2" ry="2" />
<text  x="432.35" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%; 0.00%)</title><rect x="258.8" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="261.80" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (6 samples, 0.01%; 0.00%)</title><rect x="634.7" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="637.67" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (18 samples, 0.04%; +0.01%)</title><rect x="365.9" y="149" width="0.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="368.95" y="159.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (7 samples, 0.01%; -0.01%)</title><rect x="523.7" y="309" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="526.74" y="319.5" ></text>
</g>
<g >
<title>db::filter_for_query (36 samples, 0.07%; -0.01%)</title><rect x="1063.3" y="341" width="0.8" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1066.25" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (9 samples, 0.02%; +0.01%)</title><rect x="947.8" y="405" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="950.83" y="415.5" ></text>
</g>
<g >
<title>free (27 samples, 0.06%; +0.01%)</title><rect x="402.7" y="197" width="0.7" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="405.72" y="207.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (74 samples, 0.15%; +0.01%)</title><rect x="63.0" y="437" width="1.8" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="65.98" y="447.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (28 samples, 0.06%; 0.00%)</title><rect x="683.9" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.92" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (47 samples, 0.10%; +0.00%)</title><rect x="272.1" y="309" width="1.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="275.12" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (22 samples, 0.05%; +0.01%)</title><rect x="665.6" y="485" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="668.65" y="495.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (7 samples, 0.01%; +0.01%)</title><rect x="19.0" y="245" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="21.97" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (13 samples, 0.03%; 0.00%)</title><rect x="1141.2" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.24" y="271.5" ></text>
</g>
<g >
<title>operator delete (44 samples, 0.09%; +0.04%)</title><rect x="441.2" y="277" width="1.0" height="15.0" fill="rgb(255,153,153)" rx="2" ry="2" />
<text  x="444.16" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (15 samples, 0.03%; -0.01%)</title><rect x="706.2" y="453" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="709.22" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (272 samples, 0.57%; -0.01%)</title><rect x="687.0" y="485" width="6.7" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="690.02" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="711.9" y="501" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="714.95" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (14 samples, 0.03%; -0.04%)</title><rect x="604.9" y="405" width="0.3" height="15.0" fill="rgb(153,153,255)" rx="2" ry="2" />
<text  x="607.85" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (10 samples, 0.02%; +0.01%)</title><rect x="687.8" y="469" width="0.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="690.78" y="479.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (11 samples, 0.02%; +0.01%)</title><rect x="216.1" y="117" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="219.11" y="127.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (6 samples, 0.01%; -0.01%)</title><rect x="234.2" y="213" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="237.21" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; -0.00%)</title><rect x="608.2" y="437" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="611.24" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (32 samples, 0.07%; +0.01%)</title><rect x="999.4" y="229" width="0.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1002.44" y="239.5" ></text>
</g>
<g >
<title>[unknown] (22 samples, 0.05%; 0.00%)</title><rect x="10.0" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (10 samples, 0.02%; 0.00%)</title><rect x="800.6" y="149" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="803.65" y="159.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (172 samples, 0.36%; -0.00%)</title><rect x="642.5" y="453" width="4.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="645.46" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (33 samples, 0.07%; +0.00%)</title><rect x="1140.8" y="357" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1143.75" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (15 samples, 0.03%; -0.01%)</title><rect x="830.2" y="405" width="0.4" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="833.22" y="415.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (22 samples, 0.05%; 0.00%)</title><rect x="742.8" y="309" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="745.85" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (33 samples, 0.07%; +0.01%)</title><rect x="98.5" y="373" width="0.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="101.50" y="383.5" ></text>
</g>
<g >
<title>operator new (118 samples, 0.25%; +0.00%)</title><rect x="988.7" y="325" width="2.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="991.68" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (9 samples, 0.02%; -0.00%)</title><rect x="46.3" y="485" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="49.26" y="495.5" ></text>
</g>
<g >
<title>operator new (18 samples, 0.04%; +0.00%)</title><rect x="763.2" y="373" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="766.16" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (6 samples, 0.01%; -0.01%)</title><rect x="112.3" y="373" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="115.28" y="383.5" ></text>
</g>
<g >
<title>operator delete (25 samples, 0.05%; +0.00%)</title><rect x="660.9" y="421" width="0.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="663.93" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (9 samples, 0.02%; +0.00%)</title><rect x="588.9" y="389" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="591.91" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (795 samples, 1.65%; 0.00%)</title><rect x="1075.5" y="325" width="19.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1078.51" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (162 samples, 0.34%; +0.02%)</title><rect x="792.5" y="165" width="4.0" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="795.54" y="175.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (22 samples, 0.05%; +0.00%)</title><rect x="1147.2" y="485" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1150.16" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (30 samples, 0.06%; -0.01%)</title><rect x="618.2" y="405" width="0.7" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="621.16" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (45 samples, 0.09%; -0.00%)</title><rect x="1158.7" y="453" width="1.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1161.71" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (36 samples, 0.07%; +0.00%)</title><rect x="1105.6" y="389" width="0.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1108.65" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (48 samples, 0.10%; +0.00%)</title><rect x="670.1" y="453" width="1.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="673.07" y="463.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (5 samples, 0.01%; +0.01%)</title><rect x="389.5" y="229" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="392.53" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (77 samples, 0.16%; +0.00%)</title><rect x="38.7" y="437" width="1.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="41.67" y="447.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (12 samples, 0.02%; +0.01%)</title><rect x="1031.7" y="165" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1034.71" y="175.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (195 samples, 0.41%; 0.00%)</title><rect x="17.9" y="421" width="4.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.86" y="431.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (24 samples, 0.05%; +0.01%)</title><rect x="902.0" y="325" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="905.02" y="335.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (40 samples, 0.08%; +0.01%)</title><rect x="124.1" y="277" width="1.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="127.12" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (5 samples, 0.01%; -0.00%)</title><rect x="41.4" y="437" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="44.39" y="447.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (7 samples, 0.01%; +0.01%)</title><rect x="715.0" y="469" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="718.04" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (5 samples, 0.01%; -0.00%)</title><rect x="836.9" y="437" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="839.90" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (12 samples, 0.02%; +0.02%)</title><rect x="643.9" y="357" width="0.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="646.93" y="367.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (21 samples, 0.04%; +0.02%)</title><rect x="226.7" y="213" width="0.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="229.75" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (44 samples, 0.09%; +0.00%)</title><rect x="802.4" y="245" width="1.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="805.39" y="255.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (16 samples, 0.03%; +0.03%)</title><rect x="567.8" y="373" width="0.4" height="15.0" fill="rgb(255,159,159)" rx="2" ry="2" />
<text  x="570.83" y="383.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (5 samples, 0.01%; +0.00%)</title><rect x="218.7" y="213" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="221.72" y="223.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (7 samples, 0.01%; -0.01%)</title><rect x="800.4" y="69" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="803.35" y="79.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (8 samples, 0.02%; -0.00%)</title><rect x="626.7" y="485" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="629.66" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (57 samples, 0.12%; +0.00%)</title><rect x="18.0" y="325" width="1.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="20.96" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (26 samples, 0.05%; 0.00%)</title><rect x="650.3" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="653.34" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (6 samples, 0.01%; -0.02%)</title><rect x="953.6" y="325" width="0.1" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="956.58" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (11 samples, 0.02%; +0.01%)</title><rect x="996.3" y="325" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="999.29" y="335.5" ></text>
</g>
<g >
<title>reader_permit::set_max_result_size (6 samples, 0.01%; +0.01%)</title><rect x="66.2" y="453" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="69.20" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (38 samples, 0.08%; +0.00%)</title><rect x="39.6" y="421" width="1.0" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="42.62" y="431.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (7 samples, 0.01%; -0.00%)</title><rect x="725.7" y="293" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="728.68" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (10 samples, 0.02%; +0.01%)</title><rect x="937.7" y="357" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="940.71" y="367.5" ></text>
</g>
<g >
<title>operator new (76 samples, 0.16%; 0.00%)</title><rect x="998.4" y="261" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1001.38" y="271.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (13 samples, 0.03%; 0.00%)</title><rect x="987.0" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="989.98" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (29 samples, 0.06%; -0.02%)</title><rect x="242.7" y="165" width="0.7" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="245.66" y="175.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (46 samples, 0.10%; +0.01%)</title><rect x="734.0" y="373" width="1.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="737.03" y="383.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (11 samples, 0.02%; +0.01%)</title><rect x="241.3" y="213" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="244.31" y="223.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (37 samples, 0.08%; +0.01%)</title><rect x="1026.3" y="197" width="0.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1029.29" y="207.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (32 samples, 0.07%; +0.00%)</title><rect x="20.8" y="309" width="0.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="23.76" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (37 samples, 0.08%; -0.02%)</title><rect x="196.6" y="69" width="0.9" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="199.61" y="79.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (5 samples, 0.01%; +0.00%)</title><rect x="1153.9" y="421" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1156.94" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (2,106 samples, 4.38%; -0.01%)</title><rect x="1001.1" y="309" width="51.7" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1004.11" y="319.5" >servi..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.00%)</title><rect x="782.9" y="229" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="785.91" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;managed_bytes&gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="903.5" y="373" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="906.52" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (20 samples, 0.04%; +0.02%)</title><rect x="1135.3" y="421" width="0.5" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="1138.30" y="431.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (16 samples, 0.03%; +0.03%)</title><rect x="258.4" y="309" width="0.4" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="261.38" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (25 samples, 0.05%; -0.01%)</title><rect x="1136.2" y="421" width="0.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1139.18" y="431.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (5 samples, 0.01%; 0.00%)</title><rect x="10.3" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.29" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.01%)</title><rect x="667.7" y="453" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="670.66" y="463.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (46 samples, 0.10%; -0.00%)</title><rect x="604.4" y="437" width="1.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="607.41" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (28 samples, 0.06%; -0.02%)</title><rect x="1159.1" y="405" width="0.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1162.10" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (12 samples, 0.02%; -0.00%)</title><rect x="1174.7" y="453" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1177.67" y="463.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (12 samples, 0.02%; +0.02%)</title><rect x="1076.6" y="309" width="0.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1079.62" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (32 samples, 0.07%; +0.01%)</title><rect x="254.2" y="277" width="0.7" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="257.16" y="287.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (7 samples, 0.01%; +0.01%)</title><rect x="593.0" y="389" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="596.01" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (5 samples, 0.01%; +0.00%)</title><rect x="548.9" y="421" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="551.87" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (12 samples, 0.02%; +0.02%)</title><rect x="811.2" y="293" width="0.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="814.18" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (20 samples, 0.04%; -0.01%)</title><rect x="33.8" y="485" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="36.75" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (20 samples, 0.04%; 0.00%)</title><rect x="137.6" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="140.56" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (5 samples, 0.01%; -0.00%)</title><rect x="500.4" y="213" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="503.38" y="223.5" ></text>
</g>
<g >
<title>operator new (60 samples, 0.12%; -0.00%)</title><rect x="1125.6" y="405" width="1.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1128.64" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (62 samples, 0.13%; -0.01%)</title><rect x="221.9" y="165" width="1.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="224.91" y="175.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (6 samples, 0.01%; -0.02%)</title><rect x="1108.1" y="389" width="0.2" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="1111.13" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (32 samples, 0.07%; -0.01%)</title><rect x="934.0" y="357" width="0.8" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="937.03" y="367.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::done (8 samples, 0.02%; +0.01%)</title><rect x="590.6" y="421" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="593.60" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (16 samples, 0.03%; -0.01%)</title><rect x="429.9" y="341" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="432.94" y="351.5" ></text>
</g>
<g >
<title>schema::get_partitioner (17 samples, 0.04%; +0.01%)</title><rect x="931.7" y="405" width="0.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="934.72" y="415.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (50 samples, 0.10%; -0.00%)</title><rect x="733.9" y="389" width="1.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="736.93" y="399.5" ></text>
</g>
<g >
<title>database::find_column_family (14 samples, 0.03%; +0.02%)</title><rect x="973.1" y="357" width="0.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="976.06" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (20 samples, 0.04%; -0.02%)</title><rect x="773.9" y="293" width="0.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="776.90" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (20 samples, 0.04%; +0.01%)</title><rect x="742.9" y="293" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="745.87" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="388.6" y="181" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="391.60" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (11 samples, 0.02%; +0.01%)</title><rect x="746.3" y="405" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="749.29" y="415.5" ></text>
</g>
<g >
<title>__tls_init (7 samples, 0.01%; -0.01%)</title><rect x="493.9" y="261" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="496.87" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (48 samples, 0.10%; -0.03%)</title><rect x="299.4" y="261" width="1.2" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="302.43" y="271.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (7 samples, 0.01%; +0.00%)</title><rect x="32.5" y="485" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="35.45" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; -0.00%)</title><rect x="1130.2" y="421" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1133.24" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (11 samples, 0.02%; +0.00%)</title><rect x="927.4" y="405" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="930.42" y="415.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (6 samples, 0.01%; +0.00%)</title><rect x="1097.2" y="325" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1100.15" y="335.5" ></text>
</g>
<g >
<title>seastar::gate::leave (5 samples, 0.01%; +0.00%)</title><rect x="602.5" y="437" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="605.47" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (8 samples, 0.02%; -0.00%)</title><rect x="91.7" y="437" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="94.72" y="447.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (46 samples, 0.10%; +0.02%)</title><rect x="570.4" y="373" width="1.1" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="573.41" y="383.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (9 samples, 0.02%; +0.01%)</title><rect x="389.2" y="229" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="392.16" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (6 samples, 0.01%; +0.01%)</title><rect x="696.1" y="453" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="699.10" y="463.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (10 samples, 0.02%; +0.01%)</title><rect x="527.8" y="245" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="530.82" y="255.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (13 samples, 0.03%; +0.02%)</title><rect x="902.8" y="357" width="0.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="905.78" y="367.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (36 samples, 0.07%; +0.01%)</title><rect x="573.2" y="357" width="0.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="576.19" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.01%)</title><rect x="490.8" y="293" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="493.83" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (17 samples, 0.04%; 0.00%)</title><rect x="656.1" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="659.07" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (9 samples, 0.02%; +0.01%)</title><rect x="1104.7" y="373" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1107.74" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (137 samples, 0.29%; -0.00%)</title><rect x="1069.6" y="309" width="3.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1072.61" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (8 samples, 0.02%; +0.00%)</title><rect x="64.5" y="405" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="67.46" y="415.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (255 samples, 0.53%; 0.00%)</title><rect x="10.5" y="613" width="6.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.54" y="623.5" ></text>
</g>
<g >
<title>operator delete (47 samples, 0.10%; -0.02%)</title><rect x="612.3" y="373" width="1.1" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="615.29" y="383.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (5 samples, 0.01%; 0.00%)</title><rect x="22.8" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.82" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (53 samples, 0.11%; -0.01%)</title><rect x="779.4" y="261" width="1.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="782.40" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (5 samples, 0.01%; -0.01%)</title><rect x="414.0" y="341" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="417.02" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (12 samples, 0.02%; -0.00%)</title><rect x="602.8" y="437" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="605.79" y="447.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (15 samples, 0.03%; +0.01%)</title><rect x="912.3" y="373" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="915.31" y="383.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.05%; -0.02%)</title><rect x="1123.2" y="421" width="0.6" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1126.21" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (21 samples, 0.04%; -0.00%)</title><rect x="546.4" y="389" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="549.37" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (12 samples, 0.02%; +0.00%)</title><rect x="1008.3" y="261" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1011.26" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (11 samples, 0.02%; -0.01%)</title><rect x="588.6" y="389" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="591.64" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (15 samples, 0.03%; +0.00%)</title><rect x="684.1" y="325" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="687.07" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (12 samples, 0.02%; -0.01%)</title><rect x="578.1" y="341" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="581.08" y="351.5" ></text>
</g>
<g >
<title>reader_permit::mark_unused (6 samples, 0.01%; +0.01%)</title><rect x="65.9" y="453" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="68.93" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (24 samples, 0.05%; +0.01%)</title><rect x="741.3" y="293" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="744.30" y="303.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (10 samples, 0.02%; +0.00%)</title><rect x="921.9" y="389" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="924.94" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (21 samples, 0.04%; -0.00%)</title><rect x="563.7" y="277" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="566.73" y="287.5" ></text>
</g>
<g >
<title>reader_permit::consume (54 samples, 0.11%; +0.06%)</title><rect x="279.3" y="277" width="1.4" height="15.0" fill="rgb(255,112,112)" rx="2" ry="2" />
<text  x="282.34" y="287.5" ></text>
</g>
<g >
<title>make_random_seq (5 samples, 0.01%; +0.00%)</title><rect x="718.1" y="469" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="721.11" y="479.5" ></text>
</g>
<g >
<title>reader_permit::consume (6 samples, 0.01%; +0.00%)</title><rect x="391.1" y="245" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="394.05" y="255.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (5 samples, 0.01%; -0.01%)</title><rect x="1102.4" y="357" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1105.43" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (80 samples, 0.17%; +0.01%)</title><rect x="646.9" y="469" width="1.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="649.88" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (5 samples, 0.01%; -0.00%)</title><rect x="758.2" y="341" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="761.25" y="351.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (399 samples, 0.83%; +0.02%)</title><rect x="460.9" y="293" width="9.8" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="463.91" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (10 samples, 0.02%; -0.01%)</title><rect x="448.9" y="261" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="451.87" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (16 samples, 0.03%; +0.02%)</title><rect x="79.6" y="453" width="0.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="82.59" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (6 samples, 0.01%; +0.00%)</title><rect x="1174.7" y="389" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1177.75" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="410.1" y="277" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="413.06" y="287.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (38 samples, 0.08%; -0.01%)</title><rect x="18.3" y="277" width="0.9" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="21.28" y="287.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%; -0.00%)</title><rect x="619.0" y="389" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="622.02" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (102 samples, 0.21%; +0.01%)</title><rect x="850.4" y="389" width="2.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="853.39" y="399.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (12 samples, 0.02%; +0.01%)</title><rect x="351.8" y="165" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="354.80" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (21 samples, 0.04%; +0.02%)</title><rect x="443.0" y="277" width="0.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="445.95" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (17 samples, 0.04%; 0.00%)</title><rect x="684.0" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.02" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="39.1" y="405" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="42.13" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (5 samples, 0.01%; -0.00%)</title><rect x="446.7" y="309" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="449.71" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (79 samples, 0.16%; -0.01%)</title><rect x="543.5" y="357" width="2.0" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="546.52" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="578.6" y="373" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="581.62" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (7 samples, 0.01%; -0.00%)</title><rect x="1041.8" y="261" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1044.81" y="271.5" ></text>
</g>
<g >
<title>query_state::query_state (195 samples, 0.41%; +0.00%)</title><rect x="591.3" y="437" width="4.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="594.32" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (7 samples, 0.01%; +0.01%)</title><rect x="711.4" y="501" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="714.38" y="511.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (36 samples, 0.07%; +0.07%)</title><rect x="535.7" y="405" width="0.9" height="15.0" fill="rgb(255,103,103)" rx="2" ry="2" />
<text  x="538.71" y="415.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (6 samples, 0.01%; -0.00%)</title><rect x="905.2" y="389" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="908.16" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (7 samples, 0.01%; +0.01%)</title><rect x="216.8" y="133" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="219.77" y="143.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (43 samples, 0.09%; -0.01%)</title><rect x="1094.0" y="293" width="1.0" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1096.96" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (9 samples, 0.02%; -0.02%)</title><rect x="310.4" y="165" width="0.2" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="313.39" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (103 samples, 0.21%; -0.02%)</title><rect x="659.0" y="485" width="2.6" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="662.04" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (13 samples, 0.03%; +0.01%)</title><rect x="585.2" y="405" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="588.18" y="415.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (6 samples, 0.01%; +0.00%)</title><rect x="363.0" y="197" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="366.05" y="207.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (95 samples, 0.20%; +0.01%)</title><rect x="781.9" y="261" width="2.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="784.85" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.01%)</title><rect x="919.3" y="389" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="922.34" y="399.5" ></text>
</g>
<g >
<title>schema_registry::learn (5 samples, 0.01%; 0.00%)</title><rect x="47.7" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.70" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (13 samples, 0.03%; 0.00%)</title><rect x="743.0" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="746.04" y="287.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (37 samples, 0.08%; -0.01%)</title><rect x="127.7" y="277" width="0.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="130.71" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (112 samples, 0.23%; -0.01%)</title><rect x="294.6" y="293" width="2.7" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="297.57" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.02%; +0.00%)</title><rect x="347.1" y="165" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="350.06" y="175.5" ></text>
</g>
<g >
<title>service::client_state::has_access (1,944 samples, 4.05%; -0.00%)</title><rect x="769.0" y="373" width="47.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="772.03" y="383.5" >serv..</text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (7 samples, 0.01%; -0.00%)</title><rect x="121.1" y="293" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="124.12" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (5 samples, 0.01%; 0.00%)</title><rect x="802.1" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="805.14" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.01%; -0.00%)</title><rect x="784.2" y="261" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="787.24" y="271.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (7 samples, 0.01%; +0.01%)</title><rect x="1133.5" y="405" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1136.48" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (65 samples, 0.14%; -0.00%)</title><rect x="722.0" y="421" width="1.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="724.97" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (21 samples, 0.04%; +0.01%)</title><rect x="1038.6" y="197" width="0.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1041.57" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.01%; +0.00%)</title><rect x="777.8" y="325" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="780.83" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (9 samples, 0.02%; +0.00%)</title><rect x="395.1" y="213" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="398.08" y="223.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (48 samples, 0.10%; +0.01%)</title><rect x="215.2" y="133" width="1.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="218.20" y="143.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (6 samples, 0.01%; 0.00%)</title><rect x="446.3" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="449.34" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (33 samples, 0.07%; -0.00%)</title><rect x="725.1" y="325" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="728.11" y="335.5" ></text>
</g>
<g >
<title>__dynamic_cast (11 samples, 0.02%; -0.02%)</title><rect x="641.3" y="469" width="0.2" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="644.28" y="479.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (48 samples, 0.10%; +0.01%)</title><rect x="511.2" y="293" width="1.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="514.19" y="303.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (109 samples, 0.23%; -0.01%)</title><rect x="1028.6" y="165" width="2.7" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1031.62" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (33 samples, 0.07%; +0.02%)</title><rect x="542.7" y="341" width="0.8" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="545.68" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (46 samples, 0.10%; -0.03%)</title><rect x="582.8" y="421" width="1.1" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="585.79" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (9 samples, 0.02%; -0.01%)</title><rect x="73.3" y="405" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="76.28" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (18 samples, 0.04%; +0.02%)</title><rect x="628.2" y="485" width="0.4" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="631.19" y="495.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (6 samples, 0.01%; -0.00%)</title><rect x="598.2" y="405" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="601.24" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (7 samples, 0.01%; 0.00%)</title><rect x="862.3" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.32" y="351.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (6 samples, 0.01%; +0.01%)</title><rect x="945.6" y="309" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="948.62" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (11 samples, 0.02%; -0.01%)</title><rect x="1073.7" y="309" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1076.69" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (15 samples, 0.03%; +0.00%)</title><rect x="927.0" y="389" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="929.95" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (17 samples, 0.04%; +0.01%)</title><rect x="700.5" y="453" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="703.48" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1,322 samples, 2.75%; -0.01%)</title><rect x="1012.3" y="277" width="32.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1015.33" y="287.5" >se..</text>
</g>
<g >
<title>bytes_view_hasher::update (6 samples, 0.01%; +0.01%)</title><rect x="726.1" y="309" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="729.12" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (7 samples, 0.01%; +0.01%)</title><rect x="801.2" y="197" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="804.16" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (5 samples, 0.01%; +0.00%)</title><rect x="1129.6" y="373" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1132.65" y="383.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (31 samples, 0.06%; +0.01%)</title><rect x="314.2" y="181" width="0.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="317.17" y="191.5" ></text>
</g>
<g >
<title>__tls_init (8 samples, 0.02%; -0.00%)</title><rect x="144.4" y="229" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="147.36" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.01%)</title><rect x="697.6" y="469" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="700.58" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (93 samples, 0.19%; -0.02%)</title><rect x="814.4" y="325" width="2.2" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="817.35" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (293 samples, 0.61%; -0.00%)</title><rect x="559.4" y="309" width="7.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="562.43" y="319.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (5 samples, 0.01%; +0.01%)</title><rect x="815.3" y="309" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="818.31" y="319.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (37 samples, 0.08%; +0.00%)</title><rect x="744.5" y="261" width="1.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="747.54" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="566.8" y="309" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="569.83" y="319.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (22 samples, 0.05%; -0.04%)</title><rect x="68.8" y="405" width="0.5" height="15.0" fill="rgb(153,153,255)" rx="2" ry="2" />
<text  x="71.76" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (77 samples, 0.16%; +0.00%)</title><rect x="19.8" y="357" width="1.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="22.83" y="367.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (20 samples, 0.04%; +0.01%)</title><rect x="1140.0" y="245" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1142.99" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (183 samples, 0.38%; -0.00%)</title><rect x="1169.5" y="469" width="4.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1172.47" y="479.5" ></text>
</g>
<g >
<title>seastar::app_template::run (46,929 samples, 97.69%; 0.00%)</title><rect x="24.3" y="597" width="1152.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.35" y="607.5" >seastar::app_template::run</text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (20 samples, 0.04%; +0.00%)</title><rect x="840.8" y="341" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="843.83" y="351.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (45 samples, 0.09%; +0.00%)</title><rect x="749.6" y="373" width="1.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="752.63" y="383.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (7 samples, 0.01%; -0.00%)</title><rect x="363.2" y="197" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="366.20" y="207.5" ></text>
</g>
<g >
<title>operator delete (43 samples, 0.09%; +0.04%)</title><rect x="585.7" y="405" width="1.1" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="588.72" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (11 samples, 0.02%; +0.01%)</title><rect x="777.5" y="293" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="780.48" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (10 samples, 0.02%; +0.00%)</title><rect x="1035.2" y="229" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1038.23" y="239.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (225 samples, 0.47%; +0.01%)</title><rect x="740.5" y="341" width="5.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="743.51" y="351.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (169 samples, 0.35%; +0.00%)</title><rect x="724.2" y="389" width="4.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="727.18" y="399.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (13 samples, 0.03%; -0.01%)</title><rect x="744.2" y="261" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="747.22" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (5 samples, 0.01%; 0.00%)</title><rect x="1141.4" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.44" y="223.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (15 samples, 0.03%; 0.00%)</title><rect x="10.1" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.12" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (18 samples, 0.04%; +0.02%)</title><rect x="318.2" y="197" width="0.5" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="321.25" y="207.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (398 samples, 0.83%; +0.01%)</title><rect x="791.2" y="213" width="9.8" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="794.24" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (6 samples, 0.01%; 0.00%)</title><rect x="18.0" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.98" y="287.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (58 samples, 0.12%; 0.00%)</title><rect x="17.9" y="373" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.93" y="383.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (17 samples, 0.04%; +0.02%)</title><rect x="545.8" y="389" width="0.4" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="548.83" y="399.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (7 samples, 0.01%; +0.01%)</title><rect x="817.1" y="389" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="820.10" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (27 samples, 0.06%; -0.02%)</title><rect x="292.1" y="293" width="0.7" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="295.13" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (7 samples, 0.01%; +0.01%)</title><rect x="648.9" y="469" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="651.89" y="479.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (145 samples, 0.30%; +0.01%)</title><rect x="991.8" y="309" width="3.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="994.85" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (8 samples, 0.02%; +0.01%)</title><rect x="220.7" y="181" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="223.73" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (9 samples, 0.02%; -0.01%)</title><rect x="396.2" y="229" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="399.19" y="239.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (181 samples, 0.38%; -0.01%)</title><rect x="188.3" y="69" width="4.5" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="191.33" y="79.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (17 samples, 0.04%; -0.04%)</title><rect x="267.7" y="341" width="0.4" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="270.69" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (13 samples, 0.03%; 0.00%)</title><rect x="413.4" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="416.40" y="303.5" ></text>
</g>
<g >
<title>posix_memalign (167 samples, 0.35%; -0.00%)</title><rect x="188.6" y="53" width="4.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="191.65" y="63.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (41 samples, 0.09%; +0.00%)</title><rect x="624.2" y="485" width="1.0" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="627.18" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (29 samples, 0.06%; +0.01%)</title><rect x="1167.4" y="469" width="0.7" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1170.43" y="479.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (5 samples, 0.01%; 0.00%)</title><rect x="852.9" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="855.89" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (110 samples, 0.23%; -0.00%)</title><rect x="952.5" y="405" width="2.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="955.47" y="415.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (8 samples, 0.02%; 0.00%)</title><rect x="602.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="605.86" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; +0.01%)</title><rect x="613.2" y="357" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="616.23" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (45 samples, 0.09%; +0.04%)</title><rect x="690.8" y="437" width="1.1" height="15.0" fill="rgb(255,156,156)" rx="2" ry="2" />
<text  x="693.80" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (40 samples, 0.08%; -0.03%)</title><rect x="820.7" y="309" width="1.0" height="15.0" fill="rgb(159,159,255)" rx="2" ry="2" />
<text  x="823.71" y="319.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (6 samples, 0.01%; -0.00%)</title><rect x="282.6" y="325" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="285.56" y="335.5" ></text>
</g>
<g >
<title>database::apply_in_memory (33 samples, 0.07%; 0.00%)</title><rect x="1139.7" y="293" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.74" y="303.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (9 samples, 0.02%; -0.00%)</title><rect x="823.7" y="293" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="826.74" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (16 samples, 0.03%; 0.00%)</title><rect x="1140.8" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.82" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="489.0" y="309" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="491.99" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (7 samples, 0.01%; +0.01%)</title><rect x="315.8" y="181" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="318.76" y="191.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (19 samples, 0.04%; +0.01%)</title><rect x="363.4" y="213" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="366.37" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (35 samples, 0.07%; -0.01%)</title><rect x="564.7" y="277" width="0.9" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="567.71" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (14 samples, 0.03%; +0.01%)</title><rect x="162.7" y="197" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="165.71" y="207.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,711 samples, 9.81%; 0.00%)</title><rect x="293.5" y="309" width="115.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="296.51" y="319.5" >std::__invoke_..</text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (14 samples, 0.03%; +0.01%)</title><rect x="1063.8" y="325" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1066.79" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (13 samples, 0.03%; +0.02%)</title><rect x="877.5" y="421" width="0.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="880.50" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (7 samples, 0.01%; +0.00%)</title><rect x="483.6" y="325" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="486.61" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (7 samples, 0.01%; 0.00%)</title><rect x="712.2" y="501" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.17" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (15 samples, 0.03%; +0.01%)</title><rect x="41.8" y="453" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="44.83" y="463.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (727 samples, 1.51%; -0.02%)</title><rect x="885.2" y="373" width="17.9" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="888.24" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (10 samples, 0.02%; +0.01%)</title><rect x="1166.8" y="485" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1169.76" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (16 samples, 0.03%; +0.01%)</title><rect x="146.6" y="245" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="149.65" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (33 samples, 0.07%; 0.00%)</title><rect x="1140.8" y="453" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.75" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (12 samples, 0.02%; +0.00%)</title><rect x="805.4" y="213" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="808.36" y="223.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (22 samples, 0.05%; +0.01%)</title><rect x="1061.6" y="261" width="0.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1064.56" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (31 samples, 0.06%; +0.01%)</title><rect x="285.3" y="389" width="0.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="288.31" y="399.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (14 samples, 0.03%; 0.00%)</title><rect x="332.1" y="181" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="335.12" y="191.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (196 samples, 0.41%; -0.02%)</title><rect x="1125.4" y="421" width="4.8" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="1128.42" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (71 samples, 0.15%; -0.00%)</title><rect x="953.2" y="357" width="1.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="956.16" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (29 samples, 0.06%; +0.00%)</title><rect x="603.3" y="437" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="606.30" y="447.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (18 samples, 0.04%; +0.01%)</title><rect x="442.2" y="277" width="0.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="445.24" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (7 samples, 0.01%; +0.00%)</title><rect x="208.7" y="133" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="211.72" y="143.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (15 samples, 0.03%; 0.00%)</title><rect x="10.1" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.12" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (17 samples, 0.04%; +0.01%)</title><rect x="508.4" y="293" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="511.37" y="303.5" ></text>
</g>
<g >
<title>operator new (31 samples, 0.06%; -0.00%)</title><rect x="491.0" y="293" width="0.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="493.98" y="303.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (5 samples, 0.01%; 0.00%)</title><rect x="21.4" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.37" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (24 samples, 0.05%; 0.00%)</title><rect x="684.0" y="389" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.97" y="399.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (108 samples, 0.22%; +0.01%)</title><rect x="909.6" y="373" width="2.7" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="912.61" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,475 samples, 9.32%; -0.02%)</title><rect x="298.1" y="277" width="109.9" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="301.05" y="287.5" >flat_mutation..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (9 samples, 0.02%; +0.01%)</title><rect x="249.3" y="261" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="252.30" y="271.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (54 samples, 0.11%; +0.01%)</title><rect x="758.6" y="325" width="1.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="761.64" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (5 samples, 0.01%; -0.00%)</title><rect x="621.2" y="437" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="624.16" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (5 samples, 0.01%; +0.01%)</title><rect x="1097.4" y="341" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1100.37" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (7 samples, 0.01%; +0.01%)</title><rect x="319.1" y="197" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="322.08" y="207.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (24 samples, 0.05%; -0.00%)</title><rect x="816.0" y="293" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="819.05" y="303.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (91 samples, 0.19%; -0.01%)</title><rect x="919.7" y="389" width="2.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="922.70" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (87 samples, 0.18%; -0.01%)</title><rect x="726.1" y="325" width="2.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="729.10" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (5 samples, 0.01%; +0.00%)</title><rect x="243.5" y="181" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="246.50" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (45 samples, 0.09%; +0.07%)</title><rect x="1112.9" y="357" width="1.1" height="15.0" fill="rgb(255,100,100)" rx="2" ry="2" />
<text  x="1115.87" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (8 samples, 0.02%; -0.00%)</title><rect x="300.3" y="245" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="303.31" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (31 samples, 0.06%; +0.00%)</title><rect x="1018.3" y="213" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1021.30" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; -0.00%)</title><rect x="167.3" y="133" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="170.33" y="143.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (16 samples, 0.03%; -0.01%)</title><rect x="256.1" y="277" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="259.05" y="287.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (8 samples, 0.02%; +0.01%)</title><rect x="10.5" y="581" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="13.54" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (13 samples, 0.03%; 0.00%)</title><rect x="717.3" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="720.25" y="399.5" ></text>
</g>
<g >
<title>auth::get_permissions (6 samples, 0.01%; 0.00%)</title><rect x="23.8" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.78" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (799 samples, 1.66%; +0.07%)</title><rect x="367.8" y="197" width="19.6" height="15.0" fill="rgb(255,109,109)" rx="2" ry="2" />
<text  x="370.79" y="207.5" ></text>
</g>
<g >
<title>operator new (54 samples, 0.11%; 0.00%)</title><rect x="853.2" y="437" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.19" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (22 samples, 0.05%; -0.01%)</title><rect x="1129.1" y="373" width="0.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1132.06" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (7 samples, 0.01%; -0.00%)</title><rect x="720.2" y="453" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="723.18" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (6 samples, 0.01%; +0.01%)</title><rect x="97.0" y="421" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="99.95" y="431.5" ></text>
</g>
<g >
<title>operator new (89 samples, 0.19%; -0.01%)</title><rect x="955.2" y="405" width="2.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="958.17" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (290 samples, 0.60%; -0.00%)</title><rect x="17.1" y="581" width="7.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="20.12" y="591.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (142 samples, 0.30%; +0.07%)</title><rect x="310.7" y="181" width="3.5" height="15.0" fill="rgb(255,106,106)" rx="2" ry="2" />
<text  x="313.68" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (28 samples, 0.06%; +0.01%)</title><rect x="487.2" y="277" width="0.7" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="490.19" y="287.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (89 samples, 0.19%; -0.01%)</title><rect x="308.4" y="181" width="2.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="311.42" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (11 samples, 0.02%; -0.00%)</title><rect x="516.3" y="325" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="519.30" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (37 samples, 0.08%; -0.00%)</title><rect x="1157.6" y="373" width="0.9" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1160.63" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (7 samples, 0.01%; +0.01%)</title><rect x="835.8" y="437" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="838.80" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (5 samples, 0.01%; +0.00%)</title><rect x="943.0" y="325" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="946.04" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (6 samples, 0.01%; -0.00%)</title><rect x="1142.5" y="485" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1145.49" y="495.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (5 samples, 0.01%; +0.00%)</title><rect x="801.7" y="261" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="804.73" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (35 samples, 0.07%; +0.02%)</title><rect x="505.1" y="229" width="0.9" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="508.15" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (39 samples, 0.08%; -0.01%)</title><rect x="647.6" y="405" width="0.9" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="650.59" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (23 samples, 0.05%; -0.01%)</title><rect x="634.0" y="485" width="0.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="637.01" y="495.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (6 samples, 0.01%; -0.01%)</title><rect x="827.2" y="277" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="830.17" y="287.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (105 samples, 0.22%; -0.00%)</title><rect x="526.5" y="277" width="2.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="529.49" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (14 samples, 0.03%; 0.00%)</title><rect x="1176.5" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.49" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (7 samples, 0.01%; +0.01%)</title><rect x="529.8" y="325" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="532.79" y="335.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (662 samples, 1.38%; +0.01%)</title><rect x="551.5" y="357" width="16.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="554.50" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.01%)</title><rect x="605.6" y="437" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="608.59" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; +0.01%)</title><rect x="1033.9" y="213" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1036.92" y="223.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (27 samples, 0.06%; 0.00%)</title><rect x="942.5" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="945.55" y="351.5" ></text>
</g>
<g >
<title>operator new (35 samples, 0.07%; +0.00%)</title><rect x="511.5" y="277" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="514.51" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_Optional_payload_base (6 samples, 0.01%; -0.02%)</title><rect x="292.9" y="293" width="0.1" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="295.87" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (26 samples, 0.05%; +0.00%)</title><rect x="774.7" y="293" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="777.66" y="303.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (5 samples, 0.01%; -0.00%)</title><rect x="1044.5" y="261" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1047.54" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (9 samples, 0.02%; +0.01%)</title><rect x="845.2" y="405" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="848.23" y="415.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (9 samples, 0.02%; -0.02%)</title><rect x="898.1" y="309" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="901.14" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (5 samples, 0.01%; -0.01%)</title><rect x="1130.5" y="421" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1133.46" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (9 samples, 0.02%; -0.01%)</title><rect x="766.5" y="357" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="769.45" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; 0.00%)</title><rect x="574.8" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="577.81" y="351.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (39 samples, 0.08%; +0.02%)</title><rect x="675.9" y="453" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="678.86" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (12 samples, 0.02%; -0.01%)</title><rect x="284.1" y="357" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="287.05" y="367.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (12 samples, 0.02%; +0.01%)</title><rect x="847.7" y="325" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="850.66" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5,047 samples, 10.51%; +0.00%)</title><rect x="290.2" y="357" width="123.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="293.17" y="367.5" >flat_mutation_r..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.01%; 0.00%)</title><rect x="652.8" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="655.77" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (10 samples, 0.02%; +0.02%)</title><rect x="957.6" y="405" width="0.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="960.61" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (6 samples, 0.01%; +0.01%)</title><rect x="131.9" y="229" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="134.91" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (7 samples, 0.01%; -0.05%)</title><rect x="297.3" y="293" width="0.2" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="300.32" y="303.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (11 samples, 0.02%; -0.00%)</title><rect x="23.7" y="469" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="26.68" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (9 samples, 0.02%; 0.00%)</title><rect x="863.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.06" y="399.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (695 samples, 1.45%; +0.04%)</title><rect x="784.7" y="245" width="17.0" height="15.0" fill="rgb(255,156,156)" rx="2" ry="2" />
<text  x="787.66" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (222 samples, 0.46%; +0.02%)</title><rect x="1087.7" y="277" width="5.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1090.69" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (18 samples, 0.04%; +0.01%)</title><rect x="624.7" y="469" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="627.75" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (15 samples, 0.03%; +0.01%)</title><rect x="660.5" y="437" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="663.49" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="585.3" y="389" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="588.35" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (17 samples, 0.04%; +0.01%)</title><rect x="854.1" y="405" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="857.10" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (18 samples, 0.04%; -0.01%)</title><rect x="139.3" y="261" width="0.4" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="142.25" y="271.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (72 samples, 0.15%; +0.02%)</title><rect x="350.0" y="165" width="1.8" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="353.03" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,230 samples, 4.64%; +0.01%)</title><rect x="163.5" y="197" width="54.8" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="166.55" y="207.5" >parti..</text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (129 samples, 0.27%; -0.00%)</title><rect x="742.8" y="325" width="3.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="745.75" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.01%; -0.01%)</title><rect x="924.7" y="341" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="927.67" y="351.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (9 samples, 0.02%; 0.00%)</title><rect x="815.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="818.09" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (11 samples, 0.02%; +0.02%)</title><rect x="645.8" y="357" width="0.2" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="648.77" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (9 samples, 0.02%; 0.00%)</title><rect x="862.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.30" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (8 samples, 0.02%; -0.02%)</title><rect x="582.6" y="405" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="585.60" y="415.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (46,929 samples, 97.69%; 0.00%)</title><rect x="24.3" y="565" width="1152.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.35" y="575.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (37 samples, 0.08%; -0.00%)</title><rect x="933.9" y="389" width="0.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="936.90" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (12 samples, 0.02%; -0.01%)</title><rect x="703.7" y="405" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="706.69" y="415.5" ></text>
</g>
<g >
<title>operator new (87 samples, 0.18%; -0.00%)</title><rect x="965.6" y="373" width="2.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="968.64" y="383.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (12 samples, 0.02%; -0.02%)</title><rect x="330.1" y="181" width="0.3" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="333.13" y="191.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (8 samples, 0.02%; -0.01%)</title><rect x="670.2" y="437" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="673.21" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="299.0" y="261" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="301.99" y="271.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (5,024 samples, 10.46%; -0.02%)</title><rect x="290.5" y="341" width="123.4" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="293.54" y="351.5" >seastar::futuri..</text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (7 samples, 0.01%; +0.00%)</title><rect x="239.5" y="165" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="242.50" y="175.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (7 samples, 0.01%; -0.01%)</title><rect x="739.5" y="341" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="742.46" y="351.5" ></text>
</g>
<g >
<title>schema::column_at (57 samples, 0.12%; +0.01%)</title><rect x="328.6" y="181" width="1.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="331.56" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (14 samples, 0.03%; -0.01%)</title><rect x="206.2" y="101" width="0.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="209.19" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (143 samples, 0.30%; -0.02%)</title><rect x="1115.4" y="389" width="3.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1118.35" y="399.5" ></text>
</g>
<g >
<title>__tls_init (12 samples, 0.02%; -0.02%)</title><rect x="484.2" y="309" width="0.3" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="487.25" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (150 samples, 0.31%; +0.01%)</title><rect x="62.2" y="453" width="3.7" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="65.25" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (27 samples, 0.06%; +0.00%)</title><rect x="1029.1" y="149" width="0.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1032.11" y="159.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (49 samples, 0.10%; +0.01%)</title><rect x="675.6" y="469" width="1.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="678.62" y="479.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (7 samples, 0.01%; 0.00%)</title><rect x="23.8" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.76" y="399.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (16 samples, 0.03%; -0.00%)</title><rect x="757.7" y="325" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="760.73" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (12 samples, 0.02%; +0.01%)</title><rect x="255.8" y="261" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="258.76" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (111 samples, 0.23%; +0.09%)</title><rect x="276.6" y="261" width="2.7" height="15.0" fill="rgb(255,81,81)" rx="2" ry="2" />
<text  x="279.61" y="271.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (78 samples, 0.16%; +0.03%)</title><rect x="593.9" y="389" width="1.9" height="15.0" fill="rgb(255,159,159)" rx="2" ry="2" />
<text  x="596.90" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (482 samples, 1.00%; +0.01%)</title><rect x="685.0" y="501" width="11.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="688.03" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (19 samples, 0.04%; +0.00%)</title><rect x="1141.6" y="485" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1144.59" y="495.5" ></text>
</g>
<g >
<title>row::row (5 samples, 0.01%; +0.00%)</title><rect x="248.8" y="213" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="251.83" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (5 samples, 0.01%; -0.00%)</title><rect x="812.1" y="309" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="815.07" y="319.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (70 samples, 0.15%; 0.00%)</title><rect x="857.8" y="469" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.78" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (69 samples, 0.14%; -0.01%)</title><rect x="411.7" y="277" width="1.7" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="414.71" y="287.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (5 samples, 0.01%; +0.01%)</title><rect x="595.9" y="421" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="598.91" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (262 samples, 0.55%; +0.06%)</title><rect x="940.5" y="405" width="6.5" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="943.53" y="415.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (63 samples, 0.13%; +0.00%)</title><rect x="736.4" y="357" width="1.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="739.44" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (125 samples, 0.26%; -0.02%)</title><rect x="832.7" y="437" width="3.1" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="835.73" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="660.3" y="421" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="663.29" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (6 samples, 0.01%; +0.00%)</title><rect x="408.2" y="277" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="411.17" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (7 samples, 0.01%; -0.01%)</title><rect x="1044.9" y="277" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1047.90" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.01%; +0.01%)</title><rect x="280.7" y="277" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="283.66" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (12 samples, 0.02%; -0.01%)</title><rect x="650.5" y="437" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="653.49" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.01%; +0.01%)</title><rect x="809.1" y="309" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="812.07" y="319.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (118 samples, 0.25%; -0.02%)</title><rect x="1186.0" y="613" width="2.9" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1188.97" y="623.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (6 samples, 0.01%; -0.00%)</title><rect x="705.5" y="421" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="708.51" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (21 samples, 0.04%; -0.02%)</title><rect x="112.4" y="373" width="0.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="115.43" y="383.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (35 samples, 0.07%; 0.00%)</title><rect x="1123.9" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.90" y="431.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (16 samples, 0.03%; -0.01%)</title><rect x="701.0" y="453" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="704.04" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (18 samples, 0.04%; +0.00%)</title><rect x="71.7" y="373" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="74.68" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (33 samples, 0.07%; +0.02%)</title><rect x="555.2" y="325" width="0.8" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="558.21" y="335.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (37 samples, 0.08%; -0.01%)</title><rect x="1050.1" y="245" width="0.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1053.11" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (7 samples, 0.01%; -0.01%)</title><rect x="756.1" y="357" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="759.11" y="367.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (38 samples, 0.08%; +0.02%)</title><rect x="370.1" y="181" width="0.9" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="373.10" y="191.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (59 samples, 0.12%; +0.01%)</title><rect x="612.0" y="389" width="1.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="615.00" y="399.5" ></text>
</g>
<g >
<title>sstring_hash::operator (20 samples, 0.04%; -0.00%)</title><rect x="847.5" y="357" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="850.51" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (7 samples, 0.01%; -0.01%)</title><rect x="1148.3" y="469" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1151.32" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (61 samples, 0.13%; +0.03%)</title><rect x="295.5" y="261" width="1.5" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="298.48" y="271.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (24 samples, 0.05%; +0.02%)</title><rect x="1045.1" y="277" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1048.08" y="287.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (27 samples, 0.06%; -0.00%)</title><rect x="1026.5" y="181" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1029.53" y="191.5" ></text>
</g>
<g >
<title>reader_permit::consume (10 samples, 0.02%; +0.01%)</title><rect x="275.2" y="293" width="0.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="278.16" y="303.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (5 samples, 0.01%; -0.01%)</title><rect x="73.1" y="405" width="0.1" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="76.10" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (91 samples, 0.19%; +0.01%)</title><rect x="651.0" y="469" width="2.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="653.98" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (13 samples, 0.03%; -0.01%)</title><rect x="536.7" y="421" width="0.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="539.74" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (6 samples, 0.01%; +0.01%)</title><rect x="541.4" y="373" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="544.38" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (13 samples, 0.03%; 0.00%)</title><rect x="1141.2" y="229" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.24" y="239.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (583 samples, 1.21%; -0.05%)</title><rect x="1108.6" y="421" width="14.3" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="1111.57" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (34 samples, 0.07%; -0.00%)</title><rect x="217.3" y="181" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="220.29" y="191.5" ></text>
</g>
<g >
<title>operator new (38 samples, 0.08%; +0.00%)</title><rect x="1157.6" y="389" width="0.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1160.60" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (20 samples, 0.04%; +0.02%)</title><rect x="1117.8" y="325" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1120.78" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (14 samples, 0.03%; -0.01%)</title><rect x="1025.9" y="197" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1028.94" y="207.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (33 samples, 0.07%; +0.00%)</title><rect x="151.9" y="213" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="154.88" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (24 samples, 0.05%; -0.01%)</title><rect x="450.1" y="261" width="0.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="453.10" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (5 samples, 0.01%; +0.00%)</title><rect x="488.4" y="309" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="491.37" y="319.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (26 samples, 0.05%; -0.04%)</title><rect x="522.8" y="261" width="0.6" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="525.76" y="271.5" ></text>
</g>
<g >
<title>make_combined_reader (772 samples, 1.61%; 0.00%)</title><rect x="433.2" y="325" width="18.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="436.18" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (21 samples, 0.04%; -0.01%)</title><rect x="346.5" y="149" width="0.6" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="349.54" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.01%; +0.01%)</title><rect x="1101.4" y="341" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1104.45" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (11 samples, 0.02%; -0.00%)</title><rect x="676.9" y="485" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="679.92" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (7 samples, 0.01%; -0.00%)</title><rect x="43.1" y="469" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="46.11" y="479.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (13 samples, 0.03%; -0.00%)</title><rect x="896.6" y="277" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="899.59" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (25 samples, 0.05%; 0.00%)</title><rect x="862.9" y="469" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.89" y="479.5" ></text>
</g>
<g >
<title>make_combined_reader (939 samples, 1.95%; +0.09%)</title><rect x="430.7" y="341" width="23.0" height="15.0" fill="rgb(255,81,81)" rx="2" ry="2" />
<text  x="433.67" y="351.5" >m..</text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%; -0.01%)</title><rect x="548.7" y="421" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="551.75" y="431.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (10 samples, 0.02%; +0.01%)</title><rect x="725.4" y="293" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="728.43" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (9 samples, 0.02%; +0.00%)</title><rect x="603.1" y="437" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="606.08" y="447.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (95 samples, 0.20%; -0.02%)</title><rect x="360.2" y="165" width="2.3" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="363.20" y="175.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (5 samples, 0.01%; +0.01%)</title><rect x="18.4" y="261" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="21.35" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (10 samples, 0.02%; +0.01%)</title><rect x="954.6" y="341" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="957.63" y="351.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (6 samples, 0.01%; -0.01%)</title><rect x="331.4" y="181" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="334.44" y="191.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (6 samples, 0.01%; +0.00%)</title><rect x="758.0" y="309" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="760.98" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (97 samples, 0.20%; -0.01%)</title><rect x="677.3" y="469" width="2.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="680.29" y="479.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (19 samples, 0.04%; +0.00%)</title><rect x="800.2" y="101" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="803.15" y="111.5" ></text>
</g>
<g >
<title>row::row (5 samples, 0.01%; +0.01%)</title><rect x="211.1" y="165" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="214.08" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (11 samples, 0.02%; +0.01%)</title><rect x="938.7" y="309" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="941.74" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (13 samples, 0.03%; +0.00%)</title><rect x="315.9" y="181" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="318.94" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (20 samples, 0.04%; -0.00%)</title><rect x="785.3" y="229" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="788.27" y="239.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (37 samples, 0.08%; -0.01%)</title><rect x="150.9" y="197" width="0.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="153.87" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (7 samples, 0.01%; -0.00%)</title><rect x="1099.1" y="357" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1102.07" y="367.5" ></text>
</g>
<g >
<title>operator new (26 samples, 0.05%; +0.00%)</title><rect x="415.3" y="341" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="418.34" y="351.5" ></text>
</g>
<g >
<title>__tls_init (7 samples, 0.01%; 0.00%)</title><rect x="142.1" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="145.05" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (7 samples, 0.01%; +0.00%)</title><rect x="1124.6" y="405" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1127.59" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (11 samples, 0.02%; -0.01%)</title><rect x="440.4" y="261" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="443.37" y="271.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (7 samples, 0.01%; 0.00%)</title><rect x="1129.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.60" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (5 samples, 0.01%; 0.00%)</title><rect x="17.2" y="565" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.20" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.00%)</title><rect x="812.6" y="341" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="815.61" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (5 samples, 0.01%; 0.00%)</title><rect x="20.4" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.39" y="255.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (9 samples, 0.02%; 0.00%)</title><rect x="1174.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1177.67" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; -0.01%)</title><rect x="415.4" y="325" width="0.6" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="418.39" y="335.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.01%; +0.00%)</title><rect x="757.9" y="309" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="760.86" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (5 samples, 0.01%; +0.01%)</title><rect x="614.4" y="437" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="617.41" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (6 samples, 0.01%; -0.00%)</title><rect x="429.8" y="341" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="432.79" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (17 samples, 0.04%; -0.02%)</title><rect x="451.5" y="277" width="0.4" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="454.45" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (29 samples, 0.06%; 0.00%)</title><rect x="883.4" y="389" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.45" y="399.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (8 samples, 0.02%; 0.00%)</title><rect x="1141.2" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.24" y="223.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (139 samples, 0.29%; +0.01%)</title><rect x="849.5" y="405" width="3.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="852.48" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (7 samples, 0.01%; -0.02%)</title><rect x="836.7" y="437" width="0.2" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="839.73" y="447.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (791 samples, 1.65%; +0.02%)</title><rect x="884.7" y="389" width="19.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="887.73" y="399.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (10 samples, 0.02%; 0.00%)</title><rect x="23.7" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.71" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (22 samples, 0.05%; -0.00%)</title><rect x="457.4" y="309" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="460.37" y="319.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (7 samples, 0.01%; -0.01%)</title><rect x="836.5" y="437" width="0.1" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="839.46" y="447.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (39 samples, 0.08%; +0.04%)</title><rect x="239.7" y="181" width="0.9" height="15.0" fill="rgb(255,153,153)" rx="2" ry="2" />
<text  x="242.67" y="191.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (25 samples, 0.05%; +0.04%)</title><rect x="123.2" y="293" width="0.6" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="126.19" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (7 samples, 0.01%; +0.01%)</title><rect x="942.9" y="309" width="0.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="945.87" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (5 samples, 0.01%; +0.00%)</title><rect x="805.8" y="261" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="808.76" y="271.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (6 samples, 0.01%; -0.00%)</title><rect x="982.2" y="357" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="985.17" y="367.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (10 samples, 0.02%; 0.00%)</title><rect x="78.3" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.31" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (9 samples, 0.02%; -0.01%)</title><rect x="42.0" y="437" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="44.98" y="447.5" ></text>
</g>
<g >
<title>operator delete (41 samples, 0.09%; -0.01%)</title><rect x="281.4" y="293" width="1.0" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="284.38" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::stats (43 samples, 0.09%; +0.02%)</title><rect x="143.5" y="245" width="1.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="146.50" y="255.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (13 samples, 0.03%; +0.00%)</title><rect x="204.9" y="117" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="207.93" y="127.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (12 samples, 0.02%; -0.00%)</title><rect x="146.7" y="229" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="149.74" y="239.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (210 samples, 0.44%; +0.02%)</title><rect x="1027.4" y="197" width="5.2" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1030.42" y="207.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (57 samples, 0.12%; -0.00%)</title><rect x="131.1" y="261" width="1.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="134.07" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (55 samples, 0.11%; -0.01%)</title><rect x="716.2" y="405" width="1.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="719.22" y="415.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (9 samples, 0.02%; -0.02%)</title><rect x="294.1" y="293" width="0.2" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="297.05" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (6 samples, 0.01%; +0.00%)</title><rect x="1147.0" y="485" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1150.01" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (5 samples, 0.01%; 0.00%)</title><rect x="545.3" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="548.31" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (10 samples, 0.02%; -0.00%)</title><rect x="248.0" y="197" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="250.97" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="1172.5" y="421" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1175.54" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (10 samples, 0.02%; -0.01%)</title><rect x="969.1" y="373" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="972.08" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (34 samples, 0.07%; +0.04%)</title><rect x="901.1" y="309" width="0.8" height="15.0" fill="rgb(255,156,156)" rx="2" ry="2" />
<text  x="904.06" y="319.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (21 samples, 0.04%; +0.02%)</title><rect x="914.5" y="357" width="0.5" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="917.47" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (53 samples, 0.11%; -0.02%)</title><rect x="851.4" y="341" width="1.3" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="854.42" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (707 samples, 1.47%; +0.02%)</title><rect x="550.4" y="373" width="17.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="553.39" y="383.5" ></text>
</g>
<g >
<title>operator new (31 samples, 0.06%; -0.00%)</title><rect x="499.2" y="197" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="502.18" y="207.5" ></text>
</g>
<g >
<title>schema::column_at (13 samples, 0.03%; -0.00%)</title><rect x="362.6" y="197" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="365.56" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (48 samples, 0.10%; +0.02%)</title><rect x="979.0" y="309" width="1.2" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="982.03" y="319.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (5 samples, 0.01%; +0.01%)</title><rect x="615.0" y="437" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="618.00" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (40 samples, 0.08%; -0.01%)</title><rect x="790.3" y="197" width="0.9" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="793.26" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (618 samples, 1.29%; -0.01%)</title><rect x="268.1" y="357" width="15.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="271.11" y="367.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;, &amp;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;::_link&gt;::expire (7 samples, 0.01%; +0.01%)</title><rect x="1176.6" y="437" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1179.56" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="711.8" y="501" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="714.75" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (8 samples, 0.02%; +0.00%)</title><rect x="921.7" y="341" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="924.67" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; -0.01%)</title><rect x="928.6" y="373" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="931.65" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (8 samples, 0.02%; +0.01%)</title><rect x="223.1" y="117" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="226.14" y="127.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (6 samples, 0.01%; 0.00%)</title><rect x="1140.6" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.58" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (7 samples, 0.01%; 0.00%)</title><rect x="10.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.29" y="479.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (8 samples, 0.02%; +0.00%)</title><rect x="1174.7" y="405" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1177.70" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (5 samples, 0.01%; -0.00%)</title><rect x="708.5" y="421" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="711.46" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (11 samples, 0.02%; -0.00%)</title><rect x="483.3" y="325" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="486.34" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="1123.1" y="421" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1126.09" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (7 samples, 0.01%; +0.01%)</title><rect x="968.0" y="373" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="971.02" y="383.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (13 samples, 0.03%; -0.00%)</title><rect x="621.5" y="485" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="624.53" y="495.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (12 samples, 0.02%; +0.00%)</title><rect x="742.3" y="277" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="745.28" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (12 samples, 0.02%; -0.00%)</title><rect x="739.3" y="357" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="742.34" y="367.5" ></text>
</g>
<g >
<title>seastar::gate::enter (5 samples, 0.01%; 0.00%)</title><rect x="1039.0" y="181" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1041.96" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (7 samples, 0.01%; +0.01%)</title><rect x="442.8" y="277" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="445.78" y="287.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (23 samples, 0.05%; 0.00%)</title><rect x="558.8" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="561.82" y="303.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (686 samples, 1.43%; +0.02%)</title><rect x="1076.9" y="309" width="16.9" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1079.91" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (33 samples, 0.07%; +0.02%)</title><rect x="452.5" y="309" width="0.8" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="455.48" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (45 samples, 0.09%; -0.02%)</title><rect x="993.4" y="277" width="1.1" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="996.42" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (10 samples, 0.02%; +0.01%)</title><rect x="139.9" y="277" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="142.92" y="287.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (6 samples, 0.01%; -0.00%)</title><rect x="1064.4" y="341" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1067.38" y="351.5" ></text>
</g>
<g >
<title>row::external_memory_usage (246 samples, 0.51%; -0.01%)</title><rect x="203.0" y="149" width="6.0" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="205.99" y="159.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (10 samples, 0.02%; 0.00%)</title><rect x="1032.3" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1035.30" y="191.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (8 samples, 0.02%; +0.01%)</title><rect x="757.5" y="293" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="760.49" y="303.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (201 samples, 0.42%; 0.00%)</title><rect x="17.7" y="437" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.74" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (7 samples, 0.01%; -0.00%)</title><rect x="1073.5" y="293" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1076.50" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (25 samples, 0.05%; -0.01%)</title><rect x="131.5" y="245" width="0.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="134.49" y="255.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (61 samples, 0.13%; +0.02%)</title><rect x="483.9" y="325" width="1.5" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="486.88" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (117 samples, 0.24%; +0.03%)</title><rect x="988.7" y="309" width="2.9" height="15.0" fill="rgb(255,159,159)" rx="2" ry="2" />
<text  x="991.70" y="319.5" ></text>
</g>
<g >
<title>operator new (33 samples, 0.07%; 0.00%)</title><rect x="452.5" y="325" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="455.48" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (5 samples, 0.01%; +0.00%)</title><rect x="1097.6" y="341" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1100.62" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (22,995 samples, 47.87%; -0.02%)</title><rect x="56.5" y="469" width="564.9" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="59.55" y="479.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>query::partition_slice::partition_slice (244 samples, 0.51%; +0.00%)</title><rect x="95.4" y="437" width="6.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="98.43" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (31 samples, 0.06%; -0.01%)</title><rect x="225.5" y="213" width="0.8" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="228.49" y="223.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (92 samples, 0.19%; +0.04%)</title><rect x="894.3" y="277" width="2.3" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="897.33" y="287.5" ></text>
</g>
<g >
<title>freeze (8 samples, 0.02%; 0.00%)</title><rect x="1141.2" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.24" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (27 samples, 0.06%; -0.00%)</title><rect x="1106.6" y="405" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1109.63" y="415.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1,465 samples, 3.05%; -0.01%)</title><rect x="166.6" y="165" width="36.0" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="169.62" y="175.5" >clu..</text>
</g>
<g >
<title>mutation_fragment::operator= (22 samples, 0.05%; -0.01%)</title><rect x="135.7" y="229" width="0.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="138.72" y="239.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (9 samples, 0.02%; -0.00%)</title><rect x="593.2" y="405" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="596.18" y="415.5" ></text>
</g>
<g >
<title>query::result::builder::builder (134 samples, 0.28%; -0.02%)</title><rect x="592.6" y="421" width="3.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="595.59" y="431.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (163 samples, 0.34%; -0.01%)</title><rect x="849.1" y="421" width="4.0" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="852.13" y="431.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (7 samples, 0.01%; 0.00%)</title><rect x="863.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.31" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (8 samples, 0.02%; -0.01%)</title><rect x="416.1" y="357" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="419.11" y="367.5" ></text>
</g>
<g >
<title>query::result::result (29 samples, 0.06%; -0.00%)</title><rect x="589.9" y="421" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="592.89" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (20 samples, 0.04%; +0.00%)</title><rect x="1150.0" y="469" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1152.96" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (80 samples, 0.17%; -0.01%)</title><rect x="621.8" y="485" width="2.0" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="624.85" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (11 samples, 0.02%; -0.00%)</title><rect x="857.2" y="421" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="860.19" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (8 samples, 0.02%; -0.01%)</title><rect x="790.0" y="181" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="792.96" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (10 samples, 0.02%; +0.00%)</title><rect x="146.2" y="245" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="149.20" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (11 samples, 0.02%; -0.02%)</title><rect x="444.9" y="293" width="0.3" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="447.94" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (32 samples, 0.07%; +0.01%)</title><rect x="1168.1" y="469" width="0.8" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1171.14" y="479.5" ></text>
</g>
<g >
<title>reader_permit::consume (10 samples, 0.02%; +0.01%)</title><rect x="210.0" y="133" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="213.02" y="143.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (16 samples, 0.03%; +0.02%)</title><rect x="819.1" y="341" width="0.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="822.14" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (9 samples, 0.02%; 0.00%)</title><rect x="862.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.30" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (13 samples, 0.03%; +0.01%)</title><rect x="417.9" y="373" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="420.92" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (6,191 samples, 12.89%; -0.02%)</title><rect x="115.2" y="357" width="152.0" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="118.16" y="367.5" >mutation_fragment_m..</text>
</g>
<g >
<title>__tls_init (9 samples, 0.02%; -0.01%)</title><rect x="495.9" y="229" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="498.86" y="239.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (150 samples, 0.31%; -0.00%)</title><rect x="669.1" y="469" width="3.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="672.11" y="479.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (93 samples, 0.19%; +0.01%)</title><rect x="294.9" y="277" width="2.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="297.94" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (111 samples, 0.23%; +0.00%)</title><rect x="984.8" y="325" width="2.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="987.80" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (66 samples, 0.14%; +0.02%)</title><rect x="494.5" y="261" width="1.6" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="497.46" y="271.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (27 samples, 0.06%; -0.00%)</title><rect x="840.7" y="357" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="843.66" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (25 samples, 0.05%; -0.01%)</title><rect x="994.5" y="277" width="0.6" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="997.52" y="287.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (92 samples, 0.19%; +0.06%)</title><rect x="340.9" y="165" width="2.3" height="15.0" fill="rgb(255,119,119)" rx="2" ry="2" />
<text  x="343.94" y="175.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (5 samples, 0.01%; 0.00%)</title><rect x="21.2" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.18" y="287.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (650 samples, 1.35%; +0.01%)</title><rect x="731.8" y="421" width="16.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="734.84" y="431.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (12 samples, 0.02%; -0.01%)</title><rect x="481.1" y="181" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="484.10" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.01%)</title><rect x="409.1" y="277" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="412.08" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (25 samples, 0.05%; -0.01%)</title><rect x="839.9" y="373" width="0.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="842.92" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (43 samples, 0.09%; +0.02%)</title><rect x="990.5" y="293" width="1.1" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="993.52" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (54 samples, 0.11%; 0.00%)</title><rect x="584.2" y="421" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="587.17" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (13 samples, 0.03%; -0.03%)</title><rect x="134.9" y="245" width="0.3" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="137.93" y="255.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (536 samples, 1.12%; +0.01%)</title><rect x="493.5" y="277" width="13.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="496.48" y="287.5" ></text>
</g>
<g >
<title>operator new (174 samples, 0.36%; 0.00%)</title><rect x="1019.2" y="245" width="4.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1022.16" y="255.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (6 samples, 0.01%; +0.00%)</title><rect x="1139.8" y="197" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1142.84" y="207.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (13 samples, 0.03%; +0.01%)</title><rect x="523.9" y="309" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="526.91" y="319.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (10 samples, 0.02%; 0.00%)</title><rect x="1075.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1078.26" y="335.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (10 samples, 0.02%; -0.01%)</title><rect x="12.3" y="581" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="15.33" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (18 samples, 0.04%; +0.01%)</title><rect x="309.9" y="165" width="0.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="312.94" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (11 samples, 0.02%; +0.01%)</title><rect x="968.6" y="373" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="971.63" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (21 samples, 0.04%; +0.01%)</title><rect x="578.8" y="373" width="0.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="581.79" y="383.5" ></text>
</g>
<g >
<title>perf_simple_que (48,039 samples, 100.00%; 0.00%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >perf_simple_que</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (228 samples, 0.47%; -0.01%)</title><rect x="396.7" y="213" width="5.6" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="399.70" y="223.5" ></text>
</g>
<g >
<title>__dynamic_cast (13 samples, 0.03%; -0.01%)</title><rect x="12.6" y="581" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="15.58" y="591.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.04%; +0.00%)</title><rect x="451.4" y="293" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="454.40" y="303.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.01%; 0.00%)</title><rect x="788.7" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="791.73" y="175.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (5 samples, 0.01%; -0.00%)</title><rect x="667.9" y="453" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="670.86" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (24 samples, 0.05%; -0.04%)</title><rect x="605.8" y="437" width="0.6" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="608.81" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (5 samples, 0.01%; +0.00%)</title><rect x="319.0" y="197" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="321.96" y="207.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (44 samples, 0.09%; +0.01%)</title><rect x="796.8" y="149" width="1.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="799.81" y="159.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (5 samples, 0.01%; -0.01%)</title><rect x="750.4" y="357" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="753.44" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (12 samples, 0.02%; -0.00%)</title><rect x="780.4" y="245" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="783.41" y="255.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous&gt; (8 samples, 0.02%; -0.01%)</title><rect x="807.1" y="293" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="810.11" y="303.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (124 samples, 0.26%; -0.00%)</title><rect x="410.4" y="293" width="3.0" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="413.36" y="303.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (1,284 samples, 2.67%; -0.01%)</title><rect x="778.0" y="325" width="31.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="781.05" y="335.5" >st..</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (6 samples, 0.01%; +0.00%)</title><rect x="946.0" y="357" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="948.96" y="367.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (210 samples, 0.44%; +0.00%)</title><rect x="446.8" y="309" width="5.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="449.84" y="319.5" ></text>
</g>
<g >
<title>operator delete (21 samples, 0.04%; +0.00%)</title><rect x="409.7" y="293" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="412.67" y="303.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (40 samples, 0.08%; -0.01%)</title><rect x="407.0" y="245" width="1.0" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="409.99" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (38 samples, 0.08%; +0.06%)</title><rect x="895.7" y="261" width="0.9" height="15.0" fill="rgb(255,125,125)" rx="2" ry="2" />
<text  x="898.66" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (59 samples, 0.12%; -0.02%)</title><rect x="1040.3" y="245" width="1.4" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1043.29" y="255.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (11 samples, 0.02%; +0.01%)</title><rect x="1039.9" y="261" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1042.89" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (12 samples, 0.02%; -0.02%)</title><rect x="51.2" y="485" width="0.3" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="54.22" y="495.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (49 samples, 0.10%; +0.03%)</title><rect x="288.2" y="373" width="1.2" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="291.16" y="383.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.07%; +0.00%)</title><rect x="856.2" y="437" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="859.23" y="447.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (5 samples, 0.01%; +0.01%)</title><rect x="18.7" y="245" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="21.72" y="255.5" ></text>
</g>
<g >
<title>reader_permit::consume (27 samples, 0.06%; -0.00%)</title><rect x="392.2" y="229" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="395.16" y="239.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (20 samples, 0.04%; +0.02%)</title><rect x="509.7" y="325" width="0.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="512.67" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (20 samples, 0.04%; +0.01%)</title><rect x="145.7" y="245" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="148.66" y="255.5" ></text>
</g>
<g >
<title>std::type_info::operator== (5 samples, 0.01%; +0.00%)</title><rect x="675.2" y="453" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="678.20" y="463.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (471 samples, 0.98%; -0.02%)</title><rect x="471.4" y="293" width="11.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="474.37" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (21 samples, 0.04%; +0.01%)</title><rect x="70.6" y="389" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="73.62" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (74 samples, 0.15%; +0.01%)</title><rect x="736.2" y="373" width="1.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="739.22" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (12 samples, 0.02%; +0.01%)</title><rect x="1142.1" y="485" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1145.05" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (67 samples, 0.14%; -0.00%)</title><rect x="40.6" y="469" width="1.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="43.58" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (115 samples, 0.24%; -0.00%)</title><rect x="246.4" y="229" width="2.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="249.37" y="239.5" ></text>
</g>
<g >
<title>mutation_querier::consume (1,762 samples, 3.67%; +0.07%)</title><rect x="319.3" y="197" width="43.2" height="15.0" fill="rgb(255,103,103)" rx="2" ry="2" />
<text  x="322.25" y="207.5" >muta..</text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (57 samples, 0.12%; 0.00%)</title><rect x="18.0" y="341" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.96" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (33 samples, 0.07%; 0.00%)</title><rect x="1154.3" y="453" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1157.26" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (14 samples, 0.03%; -0.00%)</title><rect x="680.3" y="453" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="683.31" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (30 samples, 0.06%; +0.00%)</title><rect x="654.5" y="485" width="0.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="657.52" y="495.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (3,415 samples, 7.11%; 0.00%)</title><rect x="304.9" y="229" width="83.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="307.93" y="239.5" >compact_m..</text>
</g>
<g >
<title>operator delete (17 samples, 0.04%; -0.01%)</title><rect x="660.0" y="437" width="0.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="663.02" y="447.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (157 samples, 0.33%; -0.02%)</title><rect x="343.2" y="165" width="3.9" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="346.20" y="175.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (64 samples, 0.13%; -0.00%)</title><rect x="522.2" y="293" width="1.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="525.17" y="303.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (7 samples, 0.01%; -0.00%)</title><rect x="22.8" y="421" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="25.82" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (43 samples, 0.09%; +0.01%)</title><rect x="938.0" y="357" width="1.0" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="940.96" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (29 samples, 0.06%; -0.02%)</title><rect x="445.6" y="293" width="0.7" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="448.63" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (150 samples, 0.31%; +0.01%)</title><rect x="1035.5" y="229" width="3.7" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1038.50" y="239.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_cql (5 samples, 0.01%; 0.00%)</title><rect x="661.6" y="501" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="664.62" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (7 samples, 0.01%; -0.02%)</title><rect x="196.0" y="101" width="0.2" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="199.04" y="111.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (109 samples, 0.23%; -0.02%)</title><rect x="998.0" y="277" width="2.6" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1000.96" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (153 samples, 0.32%; +0.00%)</title><rect x="756.3" y="357" width="3.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="759.28" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (29 samples, 0.06%; -0.00%)</title><rect x="856.3" y="421" width="0.7" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="859.31" y="431.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (11 samples, 0.02%; +0.00%)</title><rect x="995.1" y="277" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="998.14" y="287.5" ></text>
</g>
<g >
<title>dht::tri_compare (39 samples, 0.08%; -0.02%)</title><rect x="1078.3" y="245" width="0.9" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="1081.29" y="255.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (36 samples, 0.07%; -0.01%)</title><rect x="71.2" y="389" width="0.9" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="74.24" y="399.5" ></text>
</g>
<g >
<title>query::querier&lt; (21 samples, 0.04%; +0.01%)</title><rect x="61.0" y="453" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="63.99" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (16 samples, 0.03%; +0.03%)</title><rect x="1037.9" y="213" width="0.4" height="15.0" fill="rgb(255,159,159)" rx="2" ry="2" />
<text  x="1040.90" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; 0.00%)</title><rect x="818.3" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.26" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (37 samples, 0.08%; +0.01%)</title><rect x="1121.8" y="405" width="0.9" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1124.79" y="415.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; +0.01%)</title><rect x="526.3" y="277" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="529.32" y="287.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (62 samples, 0.13%; +0.01%)</title><rect x="858.0" y="453" width="1.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="860.98" y="463.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (114 samples, 0.24%; +0.00%)</title><rect x="1152.3" y="469" width="2.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1155.27" y="479.5" ></text>
</g>
<g >
<title>operator new (35 samples, 0.07%; -0.00%)</title><rect x="542.6" y="357" width="0.9" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="545.63" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (15 samples, 0.03%; -0.00%)</title><rect x="1153.6" y="421" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1156.57" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; -0.01%)</title><rect x="1074.0" y="325" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1077.04" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (20 samples, 0.04%; +0.00%)</title><rect x="1046.8" y="245" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1049.77" y="255.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (35 samples, 0.07%; +0.01%)</title><rect x="831.5" y="405" width="0.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="834.47" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; -0.00%)</title><rect x="1034.3" y="213" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1037.32" y="223.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (6 samples, 0.01%; -0.01%)</title><rect x="155.1" y="197" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="158.07" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (95 samples, 0.20%; -0.02%)</title><rect x="985.0" y="309" width="2.4" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="988.02" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (13 samples, 0.03%; +0.01%)</title><rect x="327.0" y="165" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="330.04" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (240 samples, 0.50%; -0.01%)</title><rect x="211.4" y="181" width="5.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="214.40" y="191.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (57 samples, 0.12%; -0.02%)</title><rect x="779.3" y="293" width="1.4" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="782.32" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (364 samples, 0.76%; +0.01%)</title><rect x="792.0" y="197" width="8.9" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="794.95" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (14 samples, 0.03%; -0.00%)</title><rect x="934.8" y="405" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="937.81" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (29 samples, 0.06%; +0.01%)</title><rect x="681.5" y="437" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="684.51" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (8 samples, 0.02%; -0.00%)</title><rect x="537.3" y="405" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="540.30" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (180 samples, 0.37%; -0.02%)</title><rect x="1088.7" y="261" width="4.4" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="1091.73" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="1046.5" y="261" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1049.55" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (132 samples, 0.27%; -0.02%)</title><rect x="97.1" y="421" width="3.3" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="100.13" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (32 samples, 0.07%; -0.01%)</title><rect x="255.3" y="277" width="0.8" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="258.27" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (62 samples, 0.13%; +0.04%)</title><rect x="666.5" y="485" width="1.6" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="669.53" y="495.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (26 samples, 0.05%; +0.00%)</title><rect x="309.3" y="165" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="312.30" y="175.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (302 samples, 0.63%; -0.01%)</title><rect x="396.5" y="229" width="7.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="399.50" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (6 samples, 0.01%; +0.01%)</title><rect x="134.5" y="245" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="137.46" y="255.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (6 samples, 0.01%; -0.01%)</title><rect x="599.2" y="421" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="602.15" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (33 samples, 0.07%; +0.01%)</title><rect x="645.4" y="389" width="0.8" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="648.43" y="399.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (6 samples, 0.01%; -0.00%)</title><rect x="1003.2" y="293" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1006.24" y="303.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (23 samples, 0.05%; -0.01%)</title><rect x="195.5" y="101" width="0.5" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="198.48" y="111.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (19 samples, 0.04%; +0.01%)</title><rect x="569.0" y="341" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="571.96" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (26 samples, 0.05%; +0.01%)</title><rect x="42.3" y="469" width="0.7" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="45.33" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::move_it (26 samples, 0.05%; +0.04%)</title><rect x="771.6" y="341" width="0.7" height="15.0" fill="rgb(255,153,153)" rx="2" ry="2" />
<text  x="774.64" y="351.5" ></text>
</g>
<g >
<title>dht::sharder::shard_of (6 samples, 0.01%; -0.00%)</title><rect x="1002.4" y="293" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1005.41" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (952 samples, 1.98%; -0.01%)</title><rect x="638.2" y="501" width="23.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="641.23" y="511.5" >s..</text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::set_latency (8 samples, 0.02%; +0.00%)</title><rect x="620.8" y="437" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="623.84" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (5 samples, 0.01%; -0.01%)</title><rect x="667.9" y="469" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="670.86" y="479.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (5 samples, 0.01%; +0.01%)</title><rect x="603.2" y="421" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="606.16" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (76 samples, 0.16%; +0.00%)</title><rect x="900.7" y="341" width="1.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="903.74" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (155 samples, 0.32%; -0.00%)</title><rect x="585.5" y="421" width="3.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="588.50" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (23 samples, 0.05%; +0.02%)</title><rect x="284.7" y="357" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="287.69" y="367.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (9 samples, 0.02%; -0.00%)</title><rect x="1051.5" y="277" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1054.49" y="287.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (5 samples, 0.01%; +0.00%)</title><rect x="717.9" y="453" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="720.92" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (5 samples, 0.01%; +0.01%)</title><rect x="139.7" y="261" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="142.69" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="733.7" y="389" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="736.66" y="399.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (5 samples, 0.01%; +0.01%)</title><rect x="482.8" y="277" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="485.82" y="287.5" ></text>
</g>
<g >
<title>operator delete (29 samples, 0.06%; +0.00%)</title><rect x="151.9" y="197" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="154.93" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (6 samples, 0.01%; +0.01%)</title><rect x="903.6" y="373" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="906.64" y="383.5" ></text>
</g>
<g >
<title>[unknown] (584 samples, 1.22%; 0.00%)</title><rect x="10.0" y="629" width="14.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (18 samples, 0.04%; 0.00%)</title><rect x="565.6" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="568.60" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (34 samples, 0.07%; +0.04%)</title><rect x="54.7" y="469" width="0.8" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="57.68" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cql3::raw_value&gt;::allocate (5 samples, 0.01%; +0.01%)</title><rect x="856.1" y="437" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="859.11" y="447.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (159 samples, 0.33%; +0.05%)</title><rect x="12.9" y="581" width="3.9" height="15.0" fill="rgb(255,141,141)" rx="2" ry="2" />
<text  x="15.90" y="591.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (44 samples, 0.09%; 0.00%)</title><rect x="763.8" y="357" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="766.78" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (8 samples, 0.02%; +0.01%)</title><rect x="246.0" y="245" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="248.96" y="255.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (41 samples, 0.09%; 0.00%)</title><rect x="1139.7" y="485" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.74" y="495.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7bc65868eb39ec0297e00aa17380c5aaba1a950a] (8 samples, 0.02%; +0.02%)</title><rect x="340.7" y="165" width="0.2" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="343.75" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (24 samples, 0.05%; +0.01%)</title><rect x="1170.4" y="453" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1173.40" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (10 samples, 0.02%; +0.01%)</title><rect x="25.1" y="517" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="28.11" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (19 samples, 0.04%; +0.00%)</title><rect x="388.3" y="197" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="391.28" y="207.5" ></text>
</g>
<g >
<title>compound_type&lt; (72 samples, 0.15%; -0.02%)</title><rect x="910.4" y="357" width="1.8" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="913.40" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (108 samples, 0.22%; -0.01%)</title><rect x="943.6" y="389" width="2.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="946.58" y="399.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (18 samples, 0.04%; 0.00%)</title><rect x="857.0" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.04" y="447.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (6 samples, 0.01%; 0.00%)</title><rect x="1139.8" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.84" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (15 samples, 0.03%; 0.00%)</title><rect x="10.1" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.12" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (5 samples, 0.01%; +0.01%)</title><rect x="883.3" y="389" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="886.33" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (54 samples, 0.11%; +0.00%)</title><rect x="615.5" y="421" width="1.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="618.54" y="431.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (70 samples, 0.15%; -0.01%)</title><rect x="615.1" y="437" width="1.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="618.14" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (30 samples, 0.06%; +0.02%)</title><rect x="531.4" y="309" width="0.7" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="534.36" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (7 samples, 0.01%; 0.00%)</title><rect x="862.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.32" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; 0.00%)</title><rect x="925.7" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="928.75" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7 samples, 0.01%; 0.00%)</title><rect x="980.4" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="983.38" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (5 samples, 0.01%; -0.00%)</title><rect x="657.9" y="485" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="660.91" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (14 samples, 0.03%; +0.01%)</title><rect x="529.1" y="277" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="532.07" y="287.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (6 samples, 0.01%; -0.02%)</title><rect x="366.8" y="197" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="369.83" y="207.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (12 samples, 0.02%; +0.01%)</title><rect x="823.4" y="261" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="826.39" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (12 samples, 0.02%; +0.02%)</title><rect x="1136.5" y="405" width="0.2" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="1139.45" y="415.5" ></text>
</g>
<g >
<title>operator delete (20 samples, 0.04%; -0.02%)</title><rect x="611.4" y="389" width="0.5" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="614.43" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (28 samples, 0.06%; 0.00%)</title><rect x="683.9" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.92" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (10 samples, 0.02%; +0.00%)</title><rect x="981.8" y="357" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="984.78" y="367.5" ></text>
</g>
<g >
<title>table::set_hit_rate (79 samples, 0.16%; 0.00%)</title><rect x="706.7" y="453" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="709.67" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (30 samples, 0.06%; -0.01%)</title><rect x="945.2" y="341" width="0.7" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="948.15" y="351.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (20 samples, 0.04%; -0.01%)</title><rect x="64.3" y="421" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="67.29" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (17 samples, 0.04%; -0.00%)</title><rect x="645.7" y="373" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="648.68" y="383.5" ></text>
</g>
<g >
<title>std::type_info::operator== (9 samples, 0.02%; -0.00%)</title><rect x="1071.6" y="277" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1074.60" y="287.5" ></text>
</g>
<g >
<title>database::find_column_family (38 samples, 0.08%; -0.01%)</title><rect x="1018.1" y="245" width="1.0" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1021.13" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="488.0" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="491.00" y="319.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (13 samples, 0.03%; -0.00%)</title><rect x="54.3" y="469" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="57.29" y="479.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.04%; 0.00%)</title><rect x="94.4" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="97.35" y="447.5" ></text>
</g>
<g >
<title>compound_type&lt; (17 samples, 0.04%; +0.02%)</title><rect x="475.1" y="229" width="0.4" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="478.06" y="239.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (9 samples, 0.02%; -0.00%)</title><rect x="17.4" y="501" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="20.39" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (20 samples, 0.04%; -0.01%)</title><rect x="1169.9" y="453" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1172.91" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (25 samples, 0.05%; +0.05%)</title><rect x="69.8" y="389" width="0.7" height="15.0" fill="rgb(255,134,134)" rx="2" ry="2" />
<text  x="72.84" y="399.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (35 samples, 0.07%; -0.01%)</title><rect x="802.6" y="229" width="0.8" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="805.59" y="239.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (435 samples, 0.91%; -0.03%)</title><rect x="735.5" y="389" width="10.7" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="738.50" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (11 samples, 0.02%; +0.02%)</title><rect x="418.6" y="405" width="0.3" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="421.61" y="415.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (6 samples, 0.01%; +0.01%)</title><rect x="331.6" y="181" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="334.58" y="191.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (78 samples, 0.16%; +0.02%)</title><rect x="748.9" y="405" width="1.9" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="751.92" y="415.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (6 samples, 0.01%; +0.00%)</title><rect x="783.0" y="229" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="786.03" y="239.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (262 samples, 0.55%; +0.00%)</title><rect x="202.6" y="165" width="6.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="205.60" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (5 samples, 0.01%; +0.00%)</title><rect x="536.6" y="405" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="539.59" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (12 samples, 0.02%; 0.00%)</title><rect x="565.7" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="568.75" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (26 samples, 0.05%; +0.00%)</title><rect x="577.7" y="357" width="0.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="580.73" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.00%)</title><rect x="416.9" y="357" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="419.87" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (78 samples, 0.16%; +0.00%)</title><rect x="743.9" y="277" width="1.9" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="746.93" y="287.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (13 samples, 0.03%; +0.00%)</title><rect x="680.0" y="453" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="682.99" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (7 samples, 0.01%; 0.00%)</title><rect x="863.3" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.31" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (84 samples, 0.17%; -0.03%)</title><rect x="846.0" y="373" width="2.1" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="848.99" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (129 samples, 0.27%; +0.00%)</title><rect x="562.4" y="293" width="3.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="565.43" y="303.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (10 samples, 0.02%; +0.01%)</title><rect x="590.3" y="405" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="593.31" y="415.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (9 samples, 0.02%; +0.00%)</title><rect x="606.4" y="437" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="609.40" y="447.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (18 samples, 0.04%; +0.03%)</title><rect x="973.5" y="357" width="0.4" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="976.50" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="387.9" y="213" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="390.93" y="223.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (4,463 samples, 9.29%; +0.00%)</title><rect x="423.3" y="389" width="109.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="426.25" y="399.5" >std::function..</text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (65 samples, 0.14%; +0.01%)</title><rect x="476.4" y="213" width="1.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="479.41" y="223.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (39 samples, 0.08%; +0.02%)</title><rect x="229.9" y="245" width="1.0" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="232.92" y="255.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (6 samples, 0.01%; +0.01%)</title><rect x="74.9" y="421" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="77.95" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (9 samples, 0.02%; -0.01%)</title><rect x="621.6" y="469" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="624.63" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (35 samples, 0.07%; -0.00%)</title><rect x="766.7" y="373" width="0.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="769.75" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (20 samples, 0.04%; -0.00%)</title><rect x="801.1" y="213" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="804.11" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (33 samples, 0.07%; -0.00%)</title><rect x="626.9" y="485" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="629.91" y="495.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (5,207 samples, 10.84%; -0.01%)</title><rect x="720.5" y="453" width="127.9" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="723.52" y="463.5" >single_node_cql_..</text>
</g>
<g >
<title>seastar::memory::allocate_aligned (152 samples, 0.32%; +0.05%)</title><rect x="189.0" y="37" width="3.8" height="15.0" fill="rgb(255,134,134)" rx="2" ry="2" />
<text  x="192.02" y="47.5" ></text>
</g>
<g >
<title>operator delete (36 samples, 0.07%; -0.01%)</title><rect x="36.2" y="469" width="0.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="39.21" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (7 samples, 0.01%; +0.01%)</title><rect x="655.1" y="469" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="658.08" y="479.5" ></text>
</g>
<g >
<title>partition_entry::read (61 samples, 0.13%; +0.09%)</title><rect x="514.8" y="325" width="1.5" height="15.0" fill="rgb(255,75,75)" rx="2" ry="2" />
<text  x="517.80" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="1169.1" y="485" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1172.15" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (5 samples, 0.01%; -0.00%)</title><rect x="112.2" y="373" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="115.16" y="383.5" ></text>
</g>
<g >
<title>malloc (47 samples, 0.10%; 0.00%)</title><rect x="594.7" y="373" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="597.66" y="383.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.01%; 0.00%)</title><rect x="47.7" y="501" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.70" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; -0.01%)</title><rect x="621.4" y="469" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="624.38" y="479.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (10 samples, 0.02%; 0.00%)</title><rect x="313.5" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="316.48" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (97 samples, 0.20%; +0.01%)</title><rect x="1156.3" y="453" width="2.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1159.27" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (11 samples, 0.02%; +0.00%)</title><rect x="1101.6" y="341" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1104.62" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (5 samples, 0.01%; -0.00%)</title><rect x="20.6" y="309" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="23.64" y="319.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (23 samples, 0.05%; +0.04%)</title><rect x="597.7" y="405" width="0.5" height="15.0" fill="rgb(255,153,153)" rx="2" ry="2" />
<text  x="600.65" y="415.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (27 samples, 0.06%; 0.00%)</title><rect x="101.4" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="104.42" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (30 samples, 0.06%; +0.00%)</title><rect x="672.1" y="453" width="0.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="675.06" y="463.5" ></text>
</g>
<g >
<title>row_cache::make_reader (478 samples, 1.00%; +0.00%)</title><rect x="518.2" y="341" width="11.8" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="521.22" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (8 samples, 0.02%; +0.01%)</title><rect x="413.7" y="325" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="416.75" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; +0.01%)</title><rect x="674.2" y="485" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="677.17" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (13 samples, 0.03%; 0.00%)</title><rect x="1141.2" y="245" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.24" y="255.5" ></text>
</g>
<g >
<title>operator new (55 samples, 0.11%; -0.01%)</title><rect x="716.2" y="421" width="1.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="719.22" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (8 samples, 0.02%; +0.01%)</title><rect x="224.7" y="181" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="227.73" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (6 samples, 0.01%; +0.00%)</title><rect x="146.5" y="245" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="149.50" y="255.5" ></text>
</g>
<g >
<title>__tls_init (8 samples, 0.02%; -0.01%)</title><rect x="495.0" y="245" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="498.00" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (11 samples, 0.02%; +0.00%)</title><rect x="573.8" y="341" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="576.80" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.01%; +0.01%)</title><rect x="912.0" y="325" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="914.97" y="335.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (15 samples, 0.03%; +0.01%)</title><rect x="456.4" y="325" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="459.44" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (104 samples, 0.22%; +0.00%)</title><rect x="1131.1" y="421" width="2.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1134.10" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (518 samples, 1.08%; +0.05%)</title><rect x="180.2" y="101" width="12.7" height="15.0" fill="rgb(255,134,134)" rx="2" ry="2" />
<text  x="183.22" y="111.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (131 samples, 0.27%; -0.00%)</title><rect x="997.5" y="293" width="3.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1000.55" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (123 samples, 0.26%; -0.00%)</title><rect x="632.3" y="501" width="3.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="635.29" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (90 samples, 0.19%; +0.00%)</title><rect x="803.5" y="261" width="2.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="806.47" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (18 samples, 0.04%; -0.00%)</title><rect x="883.5" y="373" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="886.55" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (25 samples, 0.05%; -0.00%)</title><rect x="818.9" y="357" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="821.92" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;flat_mutation_reader&gt;::allocate (5 samples, 0.01%; -0.01%)</title><rect x="429.1" y="341" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="432.12" y="351.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (8 samples, 0.02%; -0.01%)</title><rect x="415.1" y="341" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="418.15" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (9 samples, 0.02%; 0.00%)</title><rect x="229.7" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="232.69" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (156 samples, 0.32%; +0.01%)</title><rect x="991.6" y="325" width="3.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="994.58" y="335.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (82 samples, 0.17%; -0.01%)</title><rect x="291.0" y="309" width="2.0" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="294.01" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (5 samples, 0.01%; 0.00%)</title><rect x="221.1" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="224.15" y="191.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (36 samples, 0.07%; -0.00%)</title><rect x="1038.3" y="213" width="0.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1041.30" y="223.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (150 samples, 0.31%; +0.02%)</title><rect x="976.5" y="341" width="3.7" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="979.52" y="351.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (48 samples, 0.10%; +0.01%)</title><rect x="326.8" y="181" width="1.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="329.79" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.00%)</title><rect x="617.5" y="437" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="620.53" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (7 samples, 0.01%; -0.01%)</title><rect x="952.6" y="389" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="955.57" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (83 samples, 0.17%; +0.03%)</title><rect x="974.3" y="341" width="2.0" height="15.0" fill="rgb(255,159,159)" rx="2" ry="2" />
<text  x="977.26" y="351.5" ></text>
</g>
<g >
<title>operator delete (31 samples, 0.06%; 0.00%)</title><rect x="569.6" y="341" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="572.60" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (82 samples, 0.17%; 0.00%)</title><rect x="809.9" y="325" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="812.88" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (18 samples, 0.04%; +0.01%)</title><rect x="687.1" y="469" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="690.11" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (20 samples, 0.04%; +0.02%)</title><rect x="975.8" y="325" width="0.5" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="978.81" y="335.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (101 samples, 0.21%; +0.08%)</title><rect x="890.3" y="293" width="2.4" height="15.0" fill="rgb(255,84,84)" rx="2" ry="2" />
<text  x="893.25" y="303.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (20 samples, 0.04%; +0.00%)</title><rect x="1120.1" y="389" width="0.5" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1123.12" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.00%)</title><rect x="529.6" y="325" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="532.64" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="651.7" y="453" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="654.69" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (6 samples, 0.01%; -0.01%)</title><rect x="993.9" y="261" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="996.89" y="271.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (337 samples, 0.70%; -0.02%)</title><rect x="66.9" y="437" width="8.3" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="69.89" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (5,744 samples, 11.96%; -0.01%)</title><rect x="118.4" y="325" width="141.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="121.42" y="335.5" >mutation_reader_m..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (11 samples, 0.02%; +0.02%)</title><rect x="540.9" y="341" width="0.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="543.91" y="351.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (41 samples, 0.09%; +0.00%)</title><rect x="459.9" y="293" width="1.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="462.90" y="303.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (568 samples, 1.18%; +0.02%)</title><rect x="269.3" y="341" width="13.9" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="272.27" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (12 samples, 0.02%; -0.01%)</title><rect x="449.1" y="261" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="452.12" y="271.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (348 samples, 0.72%; +0.02%)</title><rect x="537.7" y="405" width="8.5" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="540.69" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (78 samples, 0.16%; -0.00%)</title><rect x="941.7" y="389" width="1.9" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="944.66" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (43 samples, 0.09%; -0.01%)</title><rect x="1060.1" y="293" width="1.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1063.13" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (6 samples, 0.01%; -0.08%)</title><rect x="1138.0" y="421" width="0.2" height="15.0" fill="rgb(94,94,255)" rx="2" ry="2" />
<text  x="1141.05" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (58 samples, 0.12%; 0.00%)</title><rect x="17.9" y="357" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.93" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (5 samples, 0.01%; -0.00%)</title><rect x="23.2" y="373" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="26.19" y="383.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (22 samples, 0.05%; -0.00%)</title><rect x="209.8" y="165" width="0.6" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="212.82" y="175.5" ></text>
</g>
<g >
<title>std::type_info::operator== (7 samples, 0.01%; +0.00%)</title><rect x="701.3" y="437" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="704.26" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (367 samples, 0.76%; -0.00%)</title><rect x="939.1" y="421" width="9.0" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="942.13" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::~node_head (5 samples, 0.01%; +0.01%)</title><rect x="403.5" y="213" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="406.53" y="223.5" ></text>
</g>
<g >
<title>operator new (60 samples, 0.12%; -0.00%)</title><rect x="438.9" y="245" width="1.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="441.85" y="255.5" ></text>
</g>
<g >
<title>compound_type&lt; (93 samples, 0.19%; +0.00%)</title><rect x="923.5" y="357" width="2.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="926.46" y="367.5" ></text>
</g>
<g >
<title>operator delete (15 samples, 0.03%; -0.01%)</title><rect x="1169.5" y="453" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1172.51" y="463.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (5 samples, 0.01%; +0.01%)</title><rect x="26.5" y="517" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="29.51" y="527.5" ></text>
</g>
<g >
<title>seastar::aio_storage_context::reap_completions (5 samples, 0.01%; +0.00%)</title><rect x="1176.2" y="485" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1179.20" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::get_value (5 samples, 0.01%; +0.01%)</title><rect x="712.3" y="501" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="715.34" y="511.5" ></text>
</g>
<g >
<title>db::block_for (5 samples, 0.01%; -0.00%)</title><rect x="1063.1" y="341" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1066.13" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (15 samples, 0.03%; +0.00%)</title><rect x="406.5" y="229" width="0.3" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="409.45" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (7 samples, 0.01%; +0.01%)</title><rect x="903.1" y="373" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="906.10" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (22 samples, 0.05%; +0.00%)</title><rect x="790.6" y="165" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="793.65" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (14 samples, 0.03%; 0.00%)</title><rect x="259.6" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="262.59" y="335.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (10 samples, 0.02%; 0.00%)</title><rect x="614.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="616.99" y="431.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (29 samples, 0.06%; +0.00%)</title><rect x="776.6" y="293" width="0.7" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="779.60" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6 samples, 0.01%; +0.01%)</title><rect x="1056.7" y="325" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1059.74" y="335.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (18 samples, 0.04%; +0.01%)</title><rect x="980.5" y="357" width="0.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="983.55" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (897 samples, 1.87%; -0.02%)</title><rect x="905.3" y="405" width="22.0" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="908.31" y="415.5" >c..</text>
</g>
<g >
<title>database::apply_with_commitlog (34 samples, 0.07%; 0.00%)</title><rect x="1139.7" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.74" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.04%; +0.01%)</title><rect x="417.1" y="357" width="0.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="420.14" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (6 samples, 0.01%; +0.00%)</title><rect x="710.8" y="501" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="713.79" y="511.5" ></text>
</g>
<g >
<title>query_result_builder::consume (7 samples, 0.01%; 0.00%)</title><rect x="684.2" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.17" y="303.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (41 samples, 0.09%; 0.00%)</title><rect x="1007.5" y="277" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1010.54" y="287.5" ></text>
</g>
<g >
<title>operator delete (18 samples, 0.04%; -0.00%)</title><rect x="625.6" y="485" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="628.58" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (7 samples, 0.01%; 0.00%)</title><rect x="229.5" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="232.50" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (8 samples, 0.02%; +0.00%)</title><rect x="245.2" y="245" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="248.24" y="255.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (13 samples, 0.03%; -0.01%)</title><rect x="912.7" y="373" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="915.68" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (56 samples, 0.12%; -0.01%)</title><rect x="933.4" y="405" width="1.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="936.44" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_digest_requests (12 samples, 0.02%; +0.01%)</title><rect x="1052.9" y="325" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1055.86" y="335.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (30 samples, 0.06%; +0.02%)</title><rect x="824.2" y="293" width="0.7" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="827.20" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (302 samples, 0.63%; 0.00%)</title><rect x="1111.4" y="405" width="7.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1114.45" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (74 samples, 0.15%; -0.01%)</title><rect x="794.4" y="133" width="1.8" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="797.43" y="143.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (8 samples, 0.02%; -0.00%)</title><rect x="1138.6" y="437" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1141.64" y="447.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (8 samples, 0.02%; 0.00%)</title><rect x="19.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.95" y="319.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (17 samples, 0.04%; +0.01%)</title><rect x="195.6" y="85" width="0.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="198.63" y="95.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (76 samples, 0.16%; -0.01%)</title><rect x="153.1" y="197" width="1.9" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="156.13" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (81 samples, 0.17%; -0.01%)</title><rect x="680.8" y="485" width="2.0" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="683.78" y="495.5" ></text>
</g>
<g >
<title>operator delete (70 samples, 0.15%; +0.02%)</title><rect x="560.7" y="293" width="1.7" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="563.71" y="303.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (30 samples, 0.06%; -0.00%)</title><rect x="330.4" y="181" width="0.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="333.43" y="191.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (6 samples, 0.01%; 0.00%)</title><rect x="10.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.15" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1,251 samples, 2.60%; +0.02%)</title><rect x="170.8" y="133" width="30.8" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="173.84" y="143.5" >co..</text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (93 samples, 0.19%; +0.01%)</title><rect x="364.2" y="197" width="2.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="367.18" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="295.4" y="261" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="298.35" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (29 samples, 0.06%; -0.01%)</title><rect x="681.5" y="453" width="0.7" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="684.51" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (9 samples, 0.02%; -0.02%)</title><rect x="1031.1" y="117" width="0.2" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="1034.07" y="127.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (25 samples, 0.05%; -0.01%)</title><rect x="1030.1" y="149" width="0.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1033.07" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (12 samples, 0.02%; 0.00%)</title><rect x="931.3" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="934.27" y="399.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (8 samples, 0.02%; 0.00%)</title><rect x="244.4" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="247.41" y="239.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (9 samples, 0.02%; -0.01%)</title><rect x="482.4" y="213" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="485.40" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (13 samples, 0.03%; 0.00%)</title><rect x="134.6" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="137.61" y="255.5" ></text>
</g>
<g >
<title>seastar::reactor::run (46,929 samples, 97.69%; 0.00%)</title><rect x="24.3" y="549" width="1152.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.35" y="559.5" >seastar::reactor::run</text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (5 samples, 0.01%; -0.00%)</title><rect x="451.0" y="277" width="0.2" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="454.04" y="287.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (6 samples, 0.01%; -0.00%)</title><rect x="842.8" y="421" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="845.80" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (5 samples, 0.01%; 0.00%)</title><rect x="684.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.44" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (10 samples, 0.02%; 0.00%)</title><rect x="867.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.88" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (14 samples, 0.03%; +0.01%)</title><rect x="388.8" y="229" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="391.82" y="239.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (38 samples, 0.08%; +0.07%)</title><rect x="497.6" y="229" width="0.9" height="15.0" fill="rgb(255,97,97)" rx="2" ry="2" />
<text  x="500.58" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="451.9" y="293" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="454.87" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (88 samples, 0.18%; -0.01%)</title><rect x="955.2" y="389" width="2.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="958.17" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (10 samples, 0.02%; +0.00%)</title><rect x="1033.4" y="213" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="1036.38" y="223.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (8 samples, 0.02%; +0.00%)</title><rect x="842.9" y="421" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="845.94" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="695.5" y="469" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="698.51" y="479.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (6 samples, 0.01%; +0.01%)</title><rect x="1095.7" y="309" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1098.65" y="319.5" ></text>
</g>
<g >
<title>operator delete (97 samples, 0.20%; +0.01%)</title><rect x="92.0" y="437" width="2.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="94.97" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (21 samples, 0.04%; -0.00%)</title><rect x="826.8" y="309" width="0.5" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="829.81" y="319.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (2,347 samples, 4.89%; -0.02%)</title><rect x="995.6" y="341" width="57.6" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="998.56" y="351.5" >servic..</text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (35 samples, 0.07%; -0.01%)</title><rect x="787.9" y="149" width="0.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="790.87" y="159.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::empty (6 samples, 0.01%; +0.00%)</title><rect x="947.0" y="405" width="0.1" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="949.97" y="415.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (11 samples, 0.02%; -0.00%)</title><rect x="1140.9" y="245" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="1143.92" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (24 samples, 0.05%; 0.00%)</title><rect x="954.0" y="325" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="957.02" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (36 samples, 0.07%; +0.01%)</title><rect x="291.3" y="277" width="0.8" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="294.25" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (7 samples, 0.01%; 0.00%)</title><rect x="545.3" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="548.29" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (30 samples, 0.06%; +0.01%)</title><rect x="599.9" y="437" width="0.8" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="602.91" y="447.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (19 samples, 0.04%; -0.02%)</title><rect x="313.0" y="165" width="0.5" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="316.01" y="175.5" ></text>
</g>
<g >
<title>reader_permit::consume (15 samples, 0.03%; -0.00%)</title><rect x="503.2" y="181" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="506.23" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (9 samples, 0.02%; +0.00%)</title><rect x="1121.3" y="405" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1124.30" y="415.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (6 samples, 0.01%; -0.01%)</title><rect x="505.0" y="229" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="508.00" y="239.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (7 samples, 0.01%; 0.00%)</title><rect x="1139.8" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.82" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (142 samples, 0.30%; -0.01%)</title><rect x="542.0" y="373" width="3.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="544.97" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (64 samples, 0.13%; 0.00%)</title><rect x="235.1" y="181" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="238.07" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1,834 samples, 3.82%; +0.01%)</title><rect x="166.2" y="181" width="45.0" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="169.20" y="191.5" >muta..</text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (123 samples, 0.26%; +0.01%)</title><rect x="984.6" y="341" width="3.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="987.55" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (13 samples, 0.03%; -0.00%)</title><rect x="981.3" y="357" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="984.26" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (23 samples, 0.05%; -0.01%)</title><rect x="846.7" y="357" width="0.6" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="849.73" y="367.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (621 samples, 1.29%; +0.01%)</title><rect x="786.4" y="229" width="15.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="789.35" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (33 samples, 0.07%; -0.01%)</title><rect x="938.2" y="341" width="0.8" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="941.20" y="351.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (534 samples, 1.11%; -0.00%)</title><rect x="696.9" y="501" width="13.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="699.87" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (20 samples, 0.04%; +0.00%)</title><rect x="945.3" y="325" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="948.28" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (5 samples, 0.01%; +0.00%)</title><rect x="64.7" y="405" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="67.65" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (30 samples, 0.06%; 0.00%)</title><rect x="793.4" y="149" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="796.42" y="159.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (53 samples, 0.11%; +0.01%)</title><rect x="647.4" y="421" width="1.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="650.40" y="431.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (65 samples, 0.14%; -0.00%)</title><rect x="920.3" y="373" width="1.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="923.27" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (34 samples, 0.07%; +0.04%)</title><rect x="1137.1" y="421" width="0.9" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="1140.12" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; 0.00%)</title><rect x="902.4" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="905.44" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (7 samples, 0.01%; +0.00%)</title><rect x="694.9" y="485" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="697.85" y="495.5" ></text>
</g>
<g >
<title>operator delete (36 samples, 0.07%; +0.01%)</title><rect x="411.8" y="261" width="0.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="414.83" y="271.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (126 samples, 0.26%; -0.02%)</title><rect x="915.6" y="341" width="3.1" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="918.63" y="351.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (24 samples, 0.05%; +0.00%)</title><rect x="799.5" y="85" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="802.49" y="95.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (17 samples, 0.04%; +0.02%)</title><rect x="918.9" y="389" width="0.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="921.92" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (13 samples, 0.03%; +0.03%)</title><rect x="208.1" y="101" width="0.3" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="211.08" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (65 samples, 0.14%; +0.00%)</title><rect x="1157.0" y="437" width="1.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1160.01" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (10,972 samples, 22.84%; +0.01%)</title><rect x="870.0" y="453" width="269.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="872.99" y="463.5" >seastar::noncopyable_function&lt;seasta..</text>
</g>
<g >
<title>managed_bytes::~managed_bytes (9 samples, 0.02%; -0.00%)</title><rect x="201.6" y="133" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="204.57" y="143.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (2,292 samples, 4.77%; +0.02%)</title><rect x="996.6" y="325" width="56.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="999.56" y="335.5" >servi..</text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (16 samples, 0.03%; -0.00%)</title><rect x="862.2" y="469" width="0.4" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="865.23" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (28 samples, 0.06%; -0.03%)</title><rect x="449.4" y="261" width="0.7" height="15.0" fill="rgb(159,159,255)" rx="2" ry="2" />
<text  x="452.41" y="271.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (6 samples, 0.01%; -0.00%)</title><rect x="19.7" y="357" width="0.1" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="22.68" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (58 samples, 0.12%; -0.01%)</title><rect x="1125.7" y="389" width="1.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1128.67" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (17 samples, 0.04%; +0.02%)</title><rect x="33.8" y="469" width="0.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="36.83" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (15 samples, 0.03%; +0.00%)</title><rect x="326.4" y="181" width="0.4" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="329.43" y="191.5" ></text>
</g>
<g >
<title>schema::column_at (47 samples, 0.10%; -0.02%)</title><rect x="385.7" y="165" width="1.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="388.75" y="175.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (7 samples, 0.01%; +0.00%)</title><rect x="620.7" y="421" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="623.67" y="431.5" ></text>
</g>
<g >
<title>row::row (15 samples, 0.03%; -0.01%)</title><rect x="248.4" y="197" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="251.36" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (7 samples, 0.01%; +0.00%)</title><rect x="704.0" y="421" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="706.99" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (17 samples, 0.04%; -0.01%)</title><rect x="703.6" y="421" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="706.57" y="431.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1,016 samples, 2.11%; +0.04%)</title><rect x="458.0" y="325" width="25.0" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="461.01" y="335.5" >d..</text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (9 samples, 0.02%; 0.00%)</title><rect x="17.4" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.39" y="527.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (24 samples, 0.05%; -0.01%)</title><rect x="94.8" y="437" width="0.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="97.84" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (7 samples, 0.01%; +0.01%)</title><rect x="1122.7" y="405" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1125.72" y="415.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (17 samples, 0.04%; +0.01%)</title><rect x="827.6" y="277" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="830.59" y="287.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (7 samples, 0.01%; +0.01%)</title><rect x="567.3" y="325" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="570.29" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (514 samples, 1.07%; +0.00%)</title><rect x="886.5" y="341" width="12.6" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="889.49" y="351.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (6 samples, 0.01%; +0.00%)</title><rect x="746.0" y="357" width="0.2" height="15.0" fill="rgb(255,206,206)" rx="2" ry="2" />
<text  x="749.04" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (11 samples, 0.02%; -0.02%)</title><rect x="927.0" y="373" width="0.3" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="930.05" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (341 samples, 0.71%; -0.01%)</title><rect x="435.7" y="293" width="8.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="438.73" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (21 samples, 0.04%; +0.01%)</title><rect x="805.1" y="229" width="0.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="808.14" y="239.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (16 samples, 0.03%; -0.01%)</title><rect x="38.2" y="437" width="0.4" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="41.22" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (38 samples, 0.08%; -0.00%)</title><rect x="774.4" y="309" width="0.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="777.39" y="319.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (35 samples, 0.07%; -0.00%)</title><rect x="737.1" y="309" width="0.8" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="740.05" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (8 samples, 0.02%; -0.01%)</title><rect x="728.8" y="389" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="731.80" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (561 samples, 1.17%; +0.02%)</title><rect x="639.5" y="485" width="13.8" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="642.51" y="495.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (464 samples, 0.97%; -0.01%)</title><rect x="32.3" y="501" width="11.4" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="35.28" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (13 samples, 0.03%; -0.00%)</title><rect x="437.2" y="261" width="0.3" height="15.0" fill="rgb(206,206,255)" rx="2" ry="2" />
<text  x="440.18" y="271.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (53 samples, 0.11%; +0.00%)</title><rect x="73.5" y="405" width="1.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="76.52" y="415.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (7 samples, 0.01%; +0.00%)</title><rect x="229.3" y="245" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="232.30" y="255.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (130 samples, 0.27%; +0.01%)</title><rect x="177.0" y="101" width="3.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="180.03" y="111.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (6 samples, 0.01%; +0.01%)</title><rect x="421.9" y="405" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="424.85" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (32 samples, 0.07%; +0.00%)</title><rect x="691.9" y="453" width="0.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="694.90" y="463.5" ></text>
</g>
</g>
</svg>
