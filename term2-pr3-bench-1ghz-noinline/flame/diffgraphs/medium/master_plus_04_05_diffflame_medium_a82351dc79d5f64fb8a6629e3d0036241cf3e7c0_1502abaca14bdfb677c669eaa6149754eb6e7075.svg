<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (6 samples, 0.01%; +0.00%)</title><rect x="743.1" y="389" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="746.12" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (11 samples, 0.02%; +0.00%)</title><rect x="627.2" y="437" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="630.25" y="447.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (9 samples, 0.02%; +0.01%)</title><rect x="462.9" y="325" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="465.89" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (23 samples, 0.05%; +0.01%)</title><rect x="319.6" y="181" width="0.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="322.64" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (5 samples, 0.01%; -0.01%)</title><rect x="971.1" y="373" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="974.12" y="383.5" ></text>
</g>
<g >
<title>operator new (60 samples, 0.12%; +0.01%)</title><rect x="848.9" y="421" width="1.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="851.88" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (13 samples, 0.03%; +0.01%)</title><rect x="26.0" y="517" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="28.98" y="527.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (26 samples, 0.05%; +0.00%)</title><rect x="487.5" y="197" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="490.51" y="207.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (5 samples, 0.01%; 0.00%)</title><rect x="337.7" y="181" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="340.72" y="191.5" ></text>
</g>
<g >
<title>database::query (18 samples, 0.04%; -0.01%)</title><rect x="1008.1" y="277" width="0.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1011.09" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (8 samples, 0.02%; +0.01%)</title><rect x="1158.2" y="453" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1161.18" y="463.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.07%; 0.00%)</title><rect x="294.0" y="293" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="297.01" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (20 samples, 0.04%; +0.01%)</title><rect x="447.9" y="261" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="450.85" y="271.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (5 samples, 0.01%; -0.02%)</title><rect x="593.1" y="405" width="0.1" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="596.08" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (2,130 samples, 4.41%; +0.01%)</title><rect x="1003.1" y="309" width="52.0" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1006.09" y="319.5" >servi..</text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (163 samples, 0.34%; +0.02%)</title><rect x="619.3" y="421" width="4.0" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="622.32" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume (5 samples, 0.01%; +0.00%)</title><rect x="508.1" y="197" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="511.06" y="207.5" ></text>
</g>
<g >
<title>schema::position (25 samples, 0.05%; +0.05%)</title><rect x="1127.3" y="421" width="0.6" height="15.0" fill="rgb(255,155,155)" rx="2" ry="2" />
<text  x="1130.33" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (11 samples, 0.02%; 0.00%)</title><rect x="638.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="641.18" y="495.5" ></text>
</g>
<g >
<title>reader_permit::consume (17 samples, 0.04%; +0.00%)</title><rect x="282.1" y="277" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="285.08" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (32 samples, 0.07%; +0.01%)</title><rect x="755.8" y="389" width="0.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="758.83" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="522.7" y="325" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="525.70" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (32 samples, 0.07%; +0.00%)</title><rect x="952.1" y="389" width="0.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="955.09" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (20 samples, 0.04%; 0.00%)</title><rect x="227.8" y="133" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="230.83" y="143.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (7 samples, 0.01%; -0.00%)</title><rect x="21.6" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="24.59" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (12 samples, 0.02%; -0.00%)</title><rect x="710.5" y="405" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="713.51" y="415.5" ></text>
</g>
<g >
<title>__libc_start_main (47,302 samples, 97.83%; 0.00%)</title><rect x="24.4" y="629" width="1154.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.42" y="639.5" >__libc_start_main</text>
</g>
<g >
<title>operator new (26 samples, 0.05%; -0.00%)</title><rect x="840.6" y="373" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="843.63" y="383.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (11 samples, 0.02%; +0.01%)</title><rect x="927.9" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="930.85" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (14 samples, 0.03%; -0.00%)</title><rect x="404.7" y="197" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="407.66" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (69 samples, 0.14%; +0.00%)</title><rect x="1049.8" y="229" width="1.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1052.82" y="239.5" ></text>
</g>
<g >
<title>sstring_hash::operator (29 samples, 0.06%; +0.03%)</title><rect x="1065.7" y="309" width="0.7" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="1068.71" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; 0.00%)</title><rect x="790.7" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="793.73" y="287.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (5 samples, 0.01%; +0.01%)</title><rect x="952.5" y="357" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="955.50" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (5 samples, 0.01%; 0.00%)</title><rect x="20.1" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.10" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (78 samples, 0.16%; +0.01%)</title><rect x="712.5" y="437" width="1.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="715.51" y="447.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; +0.01%)</title><rect x="1148.3" y="485" width="0.7" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1151.27" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (5 samples, 0.01%; +0.01%)</title><rect x="781.9" y="341" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="784.92" y="351.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (141 samples, 0.29%; +0.09%)</title><rect x="181.0" y="101" width="3.4" height="15.0" fill="rgb(255,114,114)" rx="2" ry="2" />
<text  x="183.97" y="111.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.05%; -0.01%)</title><rect x="520.8" y="325" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="523.77" y="335.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (5 samples, 0.01%; 0.00%)</title><rect x="927.1" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="930.12" y="335.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (97 samples, 0.20%; -0.01%)</title><rect x="624.4" y="437" width="2.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="627.42" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.01%; -0.00%)</title><rect x="938.5" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="941.49" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (21 samples, 0.04%; +0.04%)</title><rect x="284.8" y="357" width="0.5" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="287.79" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (5 samples, 0.01%; -0.00%)</title><rect x="659.9" y="437" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="662.87" y="447.5" ></text>
</g>
<g >
<title>schema_registry::learn (5 samples, 0.01%; 0.00%)</title><rect x="46.8" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.80" y="479.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (49 samples, 0.10%; +0.00%)</title><rect x="20.7" y="325" width="1.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="23.69" y="335.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (31 samples, 0.06%; -0.01%)</title><rect x="229.9" y="213" width="0.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="232.90" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (10 samples, 0.02%; +0.00%)</title><rect x="607.4" y="437" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="610.36" y="447.5" ></text>
</g>
<g >
<title>operator delete (53 samples, 0.11%; +0.01%)</title><rect x="660.1" y="485" width="1.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="663.12" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%; -0.00%)</title><rect x="146.0" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="148.98" y="287.5" ></text>
</g>
<g >
<title>local_schema_registry (10 samples, 0.02%; -0.03%)</title><rect x="967.8" y="373" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="970.78" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (12 samples, 0.02%; +0.02%)</title><rect x="555.6" y="421" width="0.3" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="558.60" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (2,938 samples, 6.08%; -0.04%)</title><rect x="983.9" y="357" width="71.7" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="986.93" y="367.5" >service:..</text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::make&lt;managed_bytes&gt; (36 samples, 0.07%; -0.01%)</title><rect x="912.0" y="309" width="0.8" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="914.97" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (12 samples, 0.02%; -0.00%)</title><rect x="489.4" y="325" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="492.41" y="335.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (9 samples, 0.02%; -0.01%)</title><rect x="516.6" y="277" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="519.55" y="287.5" ></text>
</g>
<g >
<title>[unknown] (17 samples, 0.04%; 0.00%)</title><rect x="10.0" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::stats (39 samples, 0.08%; +0.01%)</title><rect x="149.2" y="245" width="0.9" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="152.18" y="255.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (10 samples, 0.02%; 0.00%)</title><rect x="871.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.87" y="319.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (9 samples, 0.02%; -0.04%)</title><rect x="17.1" y="613" width="0.2" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="20.08" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (5 samples, 0.01%; +0.00%)</title><rect x="248.1" y="181" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="251.06" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (50 samples, 0.10%; +0.07%)</title><rect x="106.2" y="421" width="1.3" height="15.0" fill="rgb(255,127,127)" rx="2" ry="2" />
<text  x="109.25" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (8 samples, 0.02%; +0.01%)</title><rect x="813.6" y="213" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="816.64" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (10 samples, 0.02%; -0.01%)</title><rect x="423.6" y="373" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="426.57" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (50 samples, 0.10%; +0.05%)</title><rect x="573.1" y="261" width="1.2" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="576.09" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (19 samples, 0.04%; +0.01%)</title><rect x="687.8" y="453" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="690.77" y="463.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (11 samples, 0.02%; -0.00%)</title><rect x="336.7" y="181" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="339.72" y="191.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (434 samples, 0.90%; +0.00%)</title><rect x="668.7" y="501" width="10.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="671.71" y="511.5" ></text>
</g>
<g >
<title>schema::column_at (18 samples, 0.04%; +0.01%)</title><rect x="204.9" y="133" width="0.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="207.91" y="143.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (12 samples, 0.02%; +0.00%)</title><rect x="813.8" y="213" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="816.84" y="223.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (128 samples, 0.26%; +0.00%)</title><rect x="279.4" y="293" width="3.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="282.42" y="303.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (14 samples, 0.03%; -0.03%)</title><rect x="1065.2" y="261" width="0.3" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1068.20" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (9 samples, 0.02%; -0.00%)</title><rect x="553.0" y="293" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="556.01" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (5 samples, 0.01%; -0.02%)</title><rect x="1054.4" y="293" width="0.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1057.39" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (7 samples, 0.01%; -0.00%)</title><rect x="867.9" y="485" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="870.89" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (19 samples, 0.04%; +0.01%)</title><rect x="1076.4" y="309" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1079.38" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (170 samples, 0.35%; 0.00%)</title><rect x="249.7" y="261" width="4.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="252.74" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (5 samples, 0.01%; -0.00%)</title><rect x="637.1" y="485" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="640.08" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (445 samples, 0.92%; -0.03%)</title><rect x="504.7" y="261" width="10.8" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="507.67" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.01%)</title><rect x="83.2" y="453" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="86.16" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (5 samples, 0.01%; +0.00%)</title><rect x="37.9" y="437" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="40.94" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (8 samples, 0.02%; 0.00%)</title><rect x="127.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="130.90" y="319.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (53 samples, 0.11%; +0.08%)</title><rect x="243.3" y="181" width="1.2" height="15.0" fill="rgb(255,118,118)" rx="2" ry="2" />
<text  x="246.25" y="191.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (6 samples, 0.01%; +0.01%)</title><rect x="77.9" y="453" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="80.92" y="463.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (42 samples, 0.09%; +0.01%)</title><rect x="758.3" y="373" width="1.0" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="761.32" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (20 samples, 0.04%; -0.01%)</title><rect x="826.6" y="357" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="829.55" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (19 samples, 0.04%; +0.01%)</title><rect x="53.7" y="469" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="56.68" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (54 samples, 0.11%; -0.00%)</title><rect x="762.7" y="357" width="1.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="765.69" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (15 samples, 0.03%; 0.00%)</title><rect x="23.1" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.10" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (5 samples, 0.01%; +0.00%)</title><rect x="272.7" y="341" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="275.66" y="351.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (5 samples, 0.01%; -0.01%)</title><rect x="18.9" y="245" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="21.86" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (19 samples, 0.04%; +0.00%)</title><rect x="1051.0" y="213" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1054.04" y="223.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%; -0.00%)</title><rect x="783.6" y="309" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="786.58" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (247 samples, 0.51%; +0.02%)</title><rect x="748.6" y="357" width="6.0" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="751.61" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (22 samples, 0.05%; +0.02%)</title><rect x="664.4" y="485" width="0.6" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="667.41" y="495.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (29 samples, 0.06%; 0.00%)</title><rect x="871.6" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.55" y="495.5" ></text>
</g>
<g >
<title>database::do_apply (28 samples, 0.06%; 0.00%)</title><rect x="1141.9" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.90" y="351.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (13 samples, 0.03%; +0.01%)</title><rect x="729.3" y="405" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="732.33" y="415.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (6,918 samples, 14.31%; -0.03%)</title><rect x="117.6" y="389" width="168.8" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="120.60" y="399.5" >merging_reader&lt;mutati..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (31 samples, 0.06%; +0.01%)</title><rect x="949.4" y="341" width="0.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="952.43" y="351.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (56 samples, 0.12%; -0.00%)</title><rect x="681.7" y="469" width="1.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="684.67" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (10 samples, 0.02%; -0.03%)</title><rect x="259.9" y="277" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="262.87" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (32 samples, 0.07%; +0.01%)</title><rect x="784.4" y="277" width="0.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="787.43" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (6 samples, 0.01%; +0.01%)</title><rect x="954.6" y="405" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="957.60" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (41 samples, 0.08%; -0.00%)</title><rect x="776.7" y="373" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="779.67" y="383.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (496 samples, 1.03%; +0.01%)</title><rect x="311.1" y="213" width="12.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="314.12" y="223.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (71 samples, 0.15%; -0.02%)</title><rect x="154.6" y="197" width="1.7" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="157.59" y="207.5" ></text>
</g>
<g >
<title>__tls_init (7 samples, 0.01%; +0.00%)</title><rect x="150.0" y="229" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="152.96" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (10 samples, 0.02%; -0.02%)</title><rect x="144.2" y="261" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="147.17" y="271.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (193 samples, 0.40%; -0.03%)</title><rect x="1072.4" y="325" width="4.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1075.42" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,443 samples, 9.19%; -0.01%)</title><rect x="146.1" y="309" width="108.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="149.15" y="319.5" >partition_sna..</text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (18 samples, 0.04%; +0.02%)</title><rect x="369.7" y="197" width="0.5" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="372.71" y="207.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (70 samples, 0.14%; 0.00%)</title><rect x="238.7" y="181" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="241.71" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (7 samples, 0.01%; 0.00%)</title><rect x="24.2" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.23" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (18 samples, 0.04%; +0.00%)</title><rect x="868.6" y="501" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="871.65" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (12 samples, 0.02%; +0.01%)</title><rect x="610.7" y="437" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="613.68" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (10 samples, 0.02%; -0.00%)</title><rect x="169.3" y="197" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="172.31" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (9 samples, 0.02%; +0.01%)</title><rect x="1139.3" y="421" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1142.31" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (190 samples, 0.39%; +0.01%)</title><rect x="764.2" y="373" width="4.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="767.18" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (31 samples, 0.06%; +0.02%)</title><rect x="417.1" y="261" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="420.08" y="271.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (74 samples, 0.15%; -0.03%)</title><rect x="1134.4" y="405" width="1.8" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="1137.36" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (11 samples, 0.02%; 0.00%)</title><rect x="897.3" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="900.30" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (52 samples, 0.11%; -0.01%)</title><rect x="762.7" y="341" width="1.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="765.74" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (78 samples, 0.16%; +0.02%)</title><rect x="489.9" y="325" width="1.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="492.93" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (13 samples, 0.03%; -0.00%)</title><rect x="863.1" y="453" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="866.09" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (6 samples, 0.01%; -0.00%)</title><rect x="218.9" y="149" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="221.92" y="159.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (25 samples, 0.05%; 0.00%)</title><rect x="1143.1" y="261" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.07" y="271.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (5 samples, 0.01%; +0.00%)</title><rect x="1175.7" y="501" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1178.72" y="511.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (168 samples, 0.35%; -0.01%)</title><rect x="857.2" y="421" width="4.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="860.18" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,284 samples, 4.72%; +0.03%)</title><rect x="168.1" y="229" width="55.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="171.06" y="239.5" >parti..</text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (9 samples, 0.02%; +0.02%)</title><rect x="82.3" y="453" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="85.31" y="463.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (472 samples, 0.98%; +0.04%)</title><rect x="465.3" y="309" width="11.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="468.25" y="319.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (24 samples, 0.05%; +0.04%)</title><rect x="514.4" y="229" width="0.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="517.38" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (8 samples, 0.02%; +0.01%)</title><rect x="594.7" y="389" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="597.69" y="399.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (247 samples, 0.51%; -0.00%)</title><rect x="17.8" y="485" width="6.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="20.76" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (9 samples, 0.02%; +0.01%)</title><rect x="576.3" y="309" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="579.27" y="319.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (21 samples, 0.04%; +0.04%)</title><rect x="288.8" y="389" width="0.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="291.79" y="399.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (4,804 samples, 9.94%; -0.02%)</title><rect x="427.0" y="421" width="117.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="430.01" y="431.5" >query::querier..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (8 samples, 0.02%; +0.01%)</title><rect x="249.9" y="245" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="252.91" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (11 samples, 0.02%; +0.00%)</title><rect x="695.3" y="453" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="698.28" y="463.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.01%; 0.00%)</title><rect x="871.4" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.38" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.04%; -0.02%)</title><rect x="629.3" y="373" width="0.5" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="632.32" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (5 samples, 0.01%; +0.00%)</title><rect x="248.2" y="181" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="251.18" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (8 samples, 0.02%; +0.00%)</title><rect x="701.4" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="704.36" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (349 samples, 0.72%; -0.00%)</title><rect x="1069.7" y="341" width="8.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1072.69" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.01%; 0.00%)</title><rect x="20.5" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.49" y="271.5" ></text>
</g>
<g >
<title>query::querier&lt; (7 samples, 0.01%; 0.00%)</title><rect x="1176.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.11" y="495.5" ></text>
</g>
<g >
<title>operator delete (24 samples, 0.05%; -0.02%)</title><rect x="667.9" y="421" width="0.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="670.90" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (58 samples, 0.12%; +0.01%)</title><rect x="850.8" y="421" width="1.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="853.81" y="431.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.05%; -0.03%)</title><rect x="570.9" y="277" width="0.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="573.87" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (9 samples, 0.02%; -0.00%)</title><rect x="853.0" y="373" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="855.96" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (66 samples, 0.14%; -0.00%)</title><rect x="251.7" y="213" width="1.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="254.72" y="223.5" ></text>
</g>
<g >
<title>database::has_keyspace (111 samples, 0.23%; -0.00%)</title><rect x="852.9" y="405" width="2.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="855.86" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt; (6 samples, 0.01%; +0.01%)</title><rect x="858.1" y="389" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="861.08" y="399.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,718 samples, 9.76%; -0.01%)</title><rect x="299.2" y="293" width="115.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="302.16" y="303.5" >seastar::repea..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.01%; -0.01%)</title><rect x="934.0" y="341" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="936.98" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (5 samples, 0.01%; 0.00%)</title><rect x="324.8" y="197" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="327.76" y="207.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (41 samples, 0.08%; 0.00%)</title><rect x="995.7" y="277" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="998.72" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (23 samples, 0.05%; -0.00%)</title><rect x="653.3" y="437" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="656.29" y="447.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (32 samples, 0.07%; +0.01%)</title><rect x="1031.6" y="149" width="0.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1034.62" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.01%)</title><rect x="816.4" y="261" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="819.40" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (25 samples, 0.05%; +0.02%)</title><rect x="505.9" y="229" width="0.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="508.91" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (11 samples, 0.02%; -0.07%)</title><rect x="717.4" y="501" width="0.3" height="15.0" fill="rgb(127,127,255)" rx="2" ry="2" />
<text  x="720.42" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (9 samples, 0.02%; +0.01%)</title><rect x="585.9" y="357" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="588.93" y="367.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1,340 samples, 2.77%; -0.04%)</title><rect x="172.7" y="165" width="32.7" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="175.65" y="175.5" >cl..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (22 samples, 0.05%; +0.00%)</title><rect x="1110.4" y="389" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1113.39" y="399.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (111 samples, 0.23%; -0.02%)</title><rect x="353.4" y="165" width="2.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="356.44" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (12 samples, 0.02%; +0.02%)</title><rect x="999.5" y="293" width="0.2" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="1002.45" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (19 samples, 0.04%; -0.01%)</title><rect x="566.2" y="277" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="569.16" y="287.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (313 samples, 0.65%; -0.01%)</title><rect x="480.9" y="261" width="7.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="483.90" y="271.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (55 samples, 0.11%; -0.00%)</title><rect x="62.6" y="437" width="1.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="65.59" y="447.5" ></text>
</g>
<g >
<title>compound_type&lt; (146 samples, 0.30%; +0.01%)</title><rect x="936.5" y="373" width="3.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="939.47" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (22 samples, 0.05%; +0.04%)</title><rect x="646.3" y="485" width="0.5" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="649.31" y="495.5" ></text>
</g>
<g >
<title>database::apply_in_memory (21 samples, 0.04%; 0.00%)</title><rect x="1141.9" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.92" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (856 samples, 1.77%; +0.00%)</title><rect x="893.6" y="357" width="20.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="896.59" y="367.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (301 samples, 0.62%; -0.01%)</title><rect x="588.2" y="437" width="7.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="591.20" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.01%)</title><rect x="1127.0" y="405" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1129.99" y="415.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (8 samples, 0.02%; +0.01%)</title><rect x="780.1" y="357" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="783.14" y="367.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (6 samples, 0.01%; +0.01%)</title><rect x="218.9" y="133" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="221.92" y="143.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.01%)</title><rect x="262.5" y="293" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="265.51" y="303.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (15 samples, 0.03%; +0.01%)</title><rect x="681.0" y="469" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="683.96" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (95 samples, 0.20%; +0.00%)</title><rect x="752.2" y="293" width="2.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="755.19" y="303.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (94 samples, 0.19%; 0.00%)</title><rect x="369.4" y="213" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="372.40" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (7 samples, 0.01%; 0.00%)</title><rect x="1176.4" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.36" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (83 samples, 0.17%; +0.02%)</title><rect x="445.4" y="261" width="2.0" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="448.41" y="271.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (6 samples, 0.01%; -0.00%)</title><rect x="419.7" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="422.69" y="351.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (7 samples, 0.01%; +0.01%)</title><rect x="285.9" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="288.89" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (10 samples, 0.02%; +0.01%)</title><rect x="915.1" y="341" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="918.11" y="351.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (705 samples, 1.46%; -0.02%)</title><rect x="180.1" y="117" width="17.2" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="183.07" y="127.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (8 samples, 0.02%; -0.01%)</title><rect x="945.4" y="405" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="948.38" y="415.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (178 samples, 0.37%; +0.00%)</title><rect x="508.3" y="229" width="4.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="511.33" y="239.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (11 samples, 0.02%; +0.01%)</title><rect x="162.6" y="197" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="165.65" y="207.5" ></text>
</g>
<g >
<title>operator delete (11 samples, 0.02%; -0.03%)</title><rect x="51.1" y="469" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="54.14" y="479.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (25 samples, 0.05%; +0.02%)</title><rect x="1100.2" y="341" width="0.6" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="1103.19" y="351.5" ></text>
</g>
<g >
<title>operator delete (29 samples, 0.06%; -0.01%)</title><rect x="618.6" y="421" width="0.7" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="621.61" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (65 samples, 0.13%; +0.08%)</title><rect x="320.2" y="181" width="1.6" height="15.0" fill="rgb(255,118,118)" rx="2" ry="2" />
<text  x="323.20" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (7 samples, 0.01%; -0.00%)</title><rect x="26.3" y="517" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="29.30" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (6 samples, 0.01%; +0.00%)</title><rect x="835.4" y="309" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="838.41" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.02%; +0.01%)</title><rect x="1103.4" y="341" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1106.37" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (11 samples, 0.02%; 0.00%)</title><rect x="284.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="287.28" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (60 samples, 0.12%; -0.01%)</title><rect x="1154.6" y="437" width="1.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1157.64" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (10 samples, 0.02%; +0.00%)</title><rect x="983.3" y="357" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="986.35" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (14 samples, 0.03%; -0.00%)</title><rect x="585.6" y="341" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="588.59" y="351.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (18 samples, 0.04%; -0.00%)</title><rect x="237.0" y="213" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="240.03" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (15 samples, 0.03%; -0.01%)</title><rect x="709.4" y="421" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="712.37" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (42 samples, 0.09%; -0.01%)</title><rect x="980.0" y="309" width="1.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="982.96" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (9 samples, 0.02%; +0.01%)</title><rect x="1054.2" y="293" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1057.17" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (9 samples, 0.02%; +0.01%)</title><rect x="539.1" y="341" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="542.05" y="351.5" ></text>
</g>
<g >
<title>executor&lt;test_read (6,034 samples, 12.48%; +0.00%)</title><rect x="720.1" y="485" width="147.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="723.13" y="495.5" >executor&lt;test_read</text>
</g>
<g >
<title>db::block_for (5 samples, 0.01%; +0.01%)</title><rect x="1067.3" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1070.30" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (6 samples, 0.01%; -0.02%)</title><rect x="416.2" y="277" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="419.23" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (43 samples, 0.09%; +0.04%)</title><rect x="589.7" y="421" width="1.0" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="592.66" y="431.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.05%; +0.03%)</title><rect x="414.6" y="293" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="417.57" y="303.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.05%; -0.01%)</title><rect x="593.3" y="389" width="0.7" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="596.35" y="399.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (69 samples, 0.14%; -0.03%)</title><rect x="1115.0" y="373" width="1.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1118.01" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (14 samples, 0.03%; 0.00%)</title><rect x="942.4" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="945.45" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="150.2" y="261" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="153.25" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (9 samples, 0.02%; -0.01%)</title><rect x="810.8" y="245" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="813.81" y="255.5" ></text>
</g>
<g >
<title>std::type_info::operator== (6 samples, 0.01%; -0.01%)</title><rect x="1075.0" y="277" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1078.03" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (12 samples, 0.02%; +0.01%)</title><rect x="392.4" y="181" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="395.38" y="191.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (55 samples, 0.11%; -0.00%)</title><rect x="1177.3" y="517" width="1.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1180.33" y="527.5" ></text>
</g>
<g >
<title>operator new (22 samples, 0.05%; +0.00%)</title><rect x="520.2" y="277" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="523.16" y="287.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (46 samples, 0.10%; 0.00%)</title><rect x="18.3" y="293" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.27" y="303.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (101 samples, 0.21%; -0.01%)</title><rect x="296.5" y="277" width="2.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="299.50" y="287.5" ></text>
</g>
<g >
<title>operator new (27 samples, 0.06%; -0.00%)</title><rect x="917.5" y="325" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="920.48" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (72 samples, 0.15%; 0.00%)</title><rect x="757.7" y="405" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="760.73" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (50 samples, 0.10%; -0.01%)</title><rect x="932.8" y="325" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="935.76" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (5 samples, 0.01%; +0.00%)</title><rect x="1055.6" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1058.63" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (33 samples, 0.07%; +0.02%)</title><rect x="332.0" y="181" width="0.8" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="335.03" y="191.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (18 samples, 0.04%; +0.01%)</title><rect x="731.6" y="309" width="0.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="734.65" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (15 samples, 0.03%; +0.00%)</title><rect x="1048.6" y="277" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1051.60" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (322 samples, 0.67%; +0.00%)</title><rect x="801.8" y="181" width="7.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="804.78" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (18 samples, 0.04%; +0.01%)</title><rect x="83.3" y="453" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="86.33" y="463.5" ></text>
</g>
<g >
<title>operator delete (27 samples, 0.06%; -0.02%)</title><rect x="669.0" y="485" width="0.7" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="672.03" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (7 samples, 0.01%; 0.00%)</title><rect x="1104.7" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1107.73" y="383.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (5 samples, 0.01%; 0.00%)</title><rect x="23.8" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.81" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (13 samples, 0.03%; +0.01%)</title><rect x="945.1" y="405" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="948.06" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (7 samples, 0.01%; 0.00%)</title><rect x="594.2" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="597.23" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (524 samples, 1.08%; +0.04%)</title><rect x="184.4" y="101" width="12.8" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="187.41" y="111.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (7 samples, 0.01%; +0.01%)</title><rect x="1053.6" y="277" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1056.63" y="287.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (16 samples, 0.03%; +0.01%)</title><rect x="61.5" y="453" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="64.54" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (9 samples, 0.02%; +0.01%)</title><rect x="518.1" y="325" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="521.11" y="335.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (6 samples, 0.01%; +0.01%)</title><rect x="750.3" y="277" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="753.32" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (10 samples, 0.02%; -0.00%)</title><rect x="934.6" y="389" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="937.64" y="399.5" ></text>
</g>
<g >
<title>database::query (141 samples, 0.29%; +0.01%)</title><rect x="43.2" y="501" width="3.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="46.16" y="511.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (7 samples, 0.01%; 0.00%)</title><rect x="662.7" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="665.66" y="463.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (148 samples, 0.31%; -0.01%)</title><rect x="852.2" y="421" width="3.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="855.23" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (8 samples, 0.02%; +0.00%)</title><rect x="317.0" y="165" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="320.03" y="175.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (6,106 samples, 12.63%; +0.02%)</title><rect x="121.5" y="357" width="149.0" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="124.53" y="367.5" >mutation_fragment_m..</text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (81 samples, 0.17%; -0.02%)</title><rect x="732.5" y="309" width="1.9" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="735.45" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (56 samples, 0.12%; +0.08%)</title><rect x="1137.8" y="421" width="1.3" height="15.0" fill="rgb(255,120,120)" rx="2" ry="2" />
<text  x="1140.75" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (6 samples, 0.01%; +0.01%)</title><rect x="989.4" y="341" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="992.35" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%; -0.01%)</title><rect x="142.3" y="213" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="145.27" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (12 samples, 0.02%; +0.01%)</title><rect x="517.3" y="293" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="520.28" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5,183 samples, 10.72%; -0.00%)</title><rect x="292.2" y="373" width="126.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="295.18" y="383.5" >flat_mutation_r..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="1151.0" y="485" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1154.00" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (16 samples, 0.03%; +0.01%)</title><rect x="553.3" y="389" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="556.25" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (15 samples, 0.03%; 0.00%)</title><rect x="1142.7" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.68" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (25 samples, 0.05%; +0.05%)</title><rect x="81.7" y="453" width="0.6" height="15.0" fill="rgb(255,155,155)" rx="2" ry="2" />
<text  x="84.70" y="463.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (6 samples, 0.01%; -0.00%)</title><rect x="456.7" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="459.74" y="287.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (47 samples, 0.10%; -0.01%)</title><rect x="935.1" y="373" width="1.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="938.10" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (31 samples, 0.06%; 0.00%)</title><rect x="22.9" y="437" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.91" y="447.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (50 samples, 0.10%; +0.02%)</title><rect x="681.8" y="453" width="1.2" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="684.81" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (12 samples, 0.02%; -0.00%)</title><rect x="667.5" y="437" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="670.51" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (14 samples, 0.03%; +0.01%)</title><rect x="570.2" y="277" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="573.24" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (28 samples, 0.06%; +0.01%)</title><rect x="1161.5" y="405" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1164.47" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (8 samples, 0.02%; +0.00%)</title><rect x="586.9" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="589.93" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (13 samples, 0.03%; +0.00%)</title><rect x="266.3" y="341" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="269.26" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (430 samples, 0.89%; -0.00%)</title><rect x="898.9" y="309" width="10.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="901.91" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (17 samples, 0.04%; 0.00%)</title><rect x="23.1" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.10" y="431.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (18 samples, 0.04%; 0.00%)</title><rect x="232.1" y="229" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="235.05" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (12 samples, 0.02%; +0.02%)</title><rect x="1063.6" y="277" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1066.56" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.01%; -0.01%)</title><rect x="904.4" y="261" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="907.43" y="271.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (29 samples, 0.06%; 0.00%)</title><rect x="21.1" y="309" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.05" y="319.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (3,465 samples, 7.17%; +0.01%)</title><rect x="308.2" y="229" width="84.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="311.22" y="239.5" >compact_m..</text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (441 samples, 0.91%; +0.06%)</title><rect x="66.7" y="421" width="10.8" height="15.0" fill="rgb(255,143,143)" rx="2" ry="2" />
<text  x="69.74" y="431.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (5 samples, 0.01%; +0.00%)</title><rect x="689.4" y="485" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="692.35" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (36 samples, 0.07%; +0.01%)</title><rect x="949.3" y="357" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="952.30" y="367.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (79 samples, 0.16%; 0.00%)</title><rect x="744.0" y="357" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="746.99" y="367.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (14 samples, 0.03%; +0.01%)</title><rect x="209.0" y="117" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="211.96" y="127.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (39 samples, 0.08%; -0.01%)</title><rect x="742.2" y="389" width="0.9" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="745.16" y="399.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (93 samples, 0.19%; -0.00%)</title><rect x="418.7" y="373" width="2.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="421.69" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (12 samples, 0.02%; +0.01%)</title><rect x="1150.4" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1153.44" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (8 samples, 0.02%; +0.01%)</title><rect x="413.2" y="277" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="416.23" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (49 samples, 0.10%; 0.00%)</title><rect x="687.0" y="469" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.04" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (66 samples, 0.14%; -0.00%)</title><rect x="1109.4" y="405" width="1.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1112.42" y="415.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (32 samples, 0.07%; +0.04%)</title><rect x="847.7" y="341" width="0.8" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="850.69" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (11 samples, 0.02%; -0.00%)</title><rect x="1076.9" y="309" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1079.86" y="319.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (9 samples, 0.02%; 0.00%)</title><rect x="32.1" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="35.13" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (10 samples, 0.02%; -0.02%)</title><rect x="33.5" y="469" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="36.45" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (8 samples, 0.02%; -0.01%)</title><rect x="294.8" y="293" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="297.79" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (12 samples, 0.02%; +0.01%)</title><rect x="755.2" y="405" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="758.25" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (68 samples, 0.14%; +0.01%)</title><rect x="1097.6" y="325" width="1.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1100.58" y="335.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (24 samples, 0.05%; +0.02%)</title><rect x="605.1" y="405" width="0.6" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="608.11" y="415.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (30 samples, 0.06%; 0.00%)</title><rect x="1141.9" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.85" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (21 samples, 0.04%; +0.02%)</title><rect x="571.4" y="277" width="0.5" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="574.41" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="1034.6" y="181" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1037.65" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (45 samples, 0.09%; +0.03%)</title><rect x="1162.2" y="453" width="1.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1165.18" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,253 samples, 4.66%; -0.06%)</title><rect x="168.5" y="213" width="55.0" height="15.0" fill="rgb(141,141,255)" rx="2" ry="2" />
<text  x="171.50" y="223.5" >logal..</text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (5 samples, 0.01%; -0.01%)</title><rect x="651.3" y="469" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="654.26" y="479.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (22 samples, 0.05%; -0.00%)</title><rect x="606.1" y="405" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="609.11" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (8 samples, 0.02%; +0.01%)</title><rect x="174.5" y="133" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="177.53" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.01%; +0.01%)</title><rect x="978.8" y="325" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="981.81" y="335.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (40 samples, 0.08%; +0.02%)</title><rect x="786.7" y="293" width="1.0" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="789.70" y="303.5" ></text>
</g>
<g >
<title>schema::column_at (56 samples, 0.12%; +0.02%)</title><rect x="335.3" y="181" width="1.3" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="338.25" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (7 samples, 0.01%; 0.00%)</title><rect x="553.0" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="556.01" y="271.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (25 samples, 0.05%; -0.01%)</title><rect x="1039.5" y="213" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1042.50" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (24 samples, 0.05%; +0.00%)</title><rect x="813.5" y="229" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="816.55" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (17 samples, 0.04%; 0.00%)</title><rect x="995.3" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="998.31" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (13 samples, 0.03%; +0.01%)</title><rect x="622.9" y="373" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="625.90" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (24 samples, 0.05%; -0.00%)</title><rect x="453.4" y="277" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="456.44" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (22 samples, 0.05%; +0.00%)</title><rect x="988.0" y="261" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="990.98" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (5 samples, 0.01%; +0.01%)</title><rect x="854.6" y="357" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="857.59" y="367.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (5 samples, 0.01%; 0.00%)</title><rect x="959.9" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="962.90" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (20 samples, 0.04%; +0.00%)</title><rect x="141.9" y="229" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="144.90" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.05%; +0.01%)</title><rect x="1156.4" y="421" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1159.40" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (16 samples, 0.03%; +0.03%)</title><rect x="981.2" y="341" width="0.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="984.15" y="351.5" ></text>
</g>
<g >
<title>operator delete (45 samples, 0.09%; +0.00%)</title><rect x="59.1" y="453" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="62.08" y="463.5" ></text>
</g>
<g >
<title>all (48,353 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::got_cl (9 samples, 0.02%; +0.01%)</title><rect x="699.3" y="469" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="702.34" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (14 samples, 0.03%; +0.00%)</title><rect x="1095.5" y="277" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1098.48" y="287.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (187 samples, 0.39%; -0.00%)</title><rect x="707.5" y="453" width="4.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="710.49" y="463.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (10 samples, 0.02%; +0.01%)</title><rect x="1054.5" y="293" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1057.51" y="303.5" ></text>
</g>
<g >
<title>row_cache::make_reader (13 samples, 0.03%; +0.03%)</title><rect x="431.4" y="357" width="0.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="434.41" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (14 samples, 0.03%; +0.00%)</title><rect x="139.7" y="245" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="142.73" y="255.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (6 samples, 0.01%; +0.01%)</title><rect x="287.5" y="405" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="290.55" y="415.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (126 samples, 0.26%; -0.03%)</title><rect x="314.1" y="181" width="3.1" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="317.15" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (6 samples, 0.01%; -0.00%)</title><rect x="426.9" y="405" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="429.87" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (70 samples, 0.14%; +0.01%)</title><rect x="817.7" y="325" width="1.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="820.74" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (16 samples, 0.03%; 0.00%)</title><rect x="332.8" y="181" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="335.84" y="191.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.01%; +0.01%)</title><rect x="927.0" y="325" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="929.98" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (8 samples, 0.02%; -0.00%)</title><rect x="71.5" y="389" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="74.50" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (7 samples, 0.01%; +0.01%)</title><rect x="1155.9" y="405" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1158.88" y="415.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (8 samples, 0.02%; -0.01%)</title><rect x="699.0" y="437" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="702.04" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (14 samples, 0.03%; +0.00%)</title><rect x="686.1" y="453" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="689.11" y="463.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (67 samples, 0.14%; +0.01%)</title><rect x="1165.2" y="469" width="1.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1168.16" y="479.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (5,142 samples, 10.63%; -0.00%)</title><rect x="292.7" y="341" width="125.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="295.67" y="351.5" >seastar::futuri..</text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (16 samples, 0.03%; +0.01%)</title><rect x="688.8" y="485" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="691.84" y="495.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (45 samples, 0.09%; -0.01%)</title><rect x="808.5" y="117" width="1.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="811.49" y="127.5" ></text>
</g>
<g >
<title>seastar::app_template::run (47,302 samples, 97.83%; 0.00%)</title><rect x="24.4" y="581" width="1154.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.42" y="591.5" >seastar::app_template::run</text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (6 samples, 0.01%; -0.01%)</title><rect x="847.2" y="341" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="850.15" y="351.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (32 samples, 0.07%; +0.01%)</title><rect x="804.8" y="117" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="807.76" y="127.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (9 samples, 0.02%; +0.01%)</title><rect x="253.9" y="261" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="256.89" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (49 samples, 0.10%; +0.02%)</title><rect x="1107.5" y="389" width="1.2" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1110.47" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (5 samples, 0.01%; -0.00%)</title><rect x="197.1" y="53" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="200.06" y="63.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (14 samples, 0.03%; +0.01%)</title><rect x="482.4" y="213" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="485.39" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (20 samples, 0.04%; -0.00%)</title><rect x="538.6" y="341" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="541.56" y="351.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (7 samples, 0.01%; +0.00%)</title><rect x="23.8" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="26.79" y="479.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (7 samples, 0.01%; 0.00%)</title><rect x="24.2" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.23" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (7 samples, 0.01%; 0.00%)</title><rect x="1032.8" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1035.79" y="127.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (7 samples, 0.01%; -0.01%)</title><rect x="560.7" y="341" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="563.72" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (68 samples, 0.14%; +0.02%)</title><rect x="700.8" y="485" width="1.7" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="703.80" y="495.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (8 samples, 0.02%; -0.01%)</title><rect x="927.2" y="341" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="930.24" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;managed_bytes&gt;::dispose (5 samples, 0.01%; 0.00%)</title><rect x="916.6" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="919.55" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (19 samples, 0.04%; +0.01%)</title><rect x="41.6" y="453" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="44.55" y="463.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (39 samples, 0.08%; +0.01%)</title><rect x="333.8" y="165" width="1.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="336.84" y="175.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (56 samples, 0.12%; -0.01%)</title><rect x="866.0" y="453" width="1.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="869.01" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5,114 samples, 10.58%; +0.03%)</title><rect x="293.2" y="325" width="124.8" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="296.16" y="335.5" >seastar::intern..</text>
</g>
<g >
<title>seastar::net::inet_address::operator== (6 samples, 0.01%; +0.01%)</title><rect x="983.1" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="986.13" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (15 samples, 0.03%; +0.02%)</title><rect x="638.4" y="485" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="641.45" y="495.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (7 samples, 0.01%; +0.00%)</title><rect x="17.5" y="501" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="20.54" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (11 samples, 0.02%; +0.01%)</title><rect x="643.6" y="469" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="646.65" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (13 samples, 0.03%; -0.01%)</title><rect x="845.3" y="389" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="848.34" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (19 samples, 0.04%; +0.00%)</title><rect x="217.1" y="149" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="220.14" y="159.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (6,844 samples, 14.15%; +0.01%)</title><rect x="119.4" y="373" width="167.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="122.40" y="383.5" >seastar::repeat&lt;mergi..</text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (9 samples, 0.02%; +0.01%)</title><rect x="129.1" y="293" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="132.09" y="303.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (40 samples, 0.08%; +0.03%)</title><rect x="426.0" y="421" width="1.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="429.04" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (16 samples, 0.03%; +0.01%)</title><rect x="1075.9" y="293" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1078.89" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (22 samples, 0.05%; +0.00%)</title><rect x="687.1" y="453" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="690.13" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (80 samples, 0.17%; +0.03%)</title><rect x="683.7" y="453" width="1.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="686.67" y="463.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (9 samples, 0.02%; -0.01%)</title><rect x="819.8" y="341" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="822.79" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (317 samples, 0.66%; -0.00%)</title><rect x="505.1" y="245" width="7.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="508.11" y="255.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (6 samples, 0.01%; -0.01%)</title><rect x="397.5" y="197" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="400.48" y="207.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (16 samples, 0.03%; +0.02%)</title><rect x="286.9" y="373" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="289.94" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (18 samples, 0.04%; +0.03%)</title><rect x="423.9" y="389" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="426.87" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (18 samples, 0.04%; -0.04%)</title><rect x="449.6" y="277" width="0.4" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="452.59" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (24 samples, 0.05%; +0.01%)</title><rect x="63.9" y="437" width="0.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="66.93" y="447.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (13 samples, 0.03%; -0.00%)</title><rect x="754.2" y="261" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="757.20" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (35 samples, 0.07%; -0.00%)</title><rect x="129.8" y="277" width="0.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="132.82" y="287.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (31 samples, 0.06%; 0.00%)</title><rect x="689.6" y="485" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.65" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="411.7" y="245" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="414.71" y="255.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (16 samples, 0.03%; 0.00%)</title><rect x="214.0" y="165" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="217.04" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (19 samples, 0.04%; -0.01%)</title><rect x="219.1" y="149" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="222.07" y="159.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (6 samples, 0.01%; +0.00%)</title><rect x="602.8" y="421" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="605.82" y="431.5" ></text>
</g>
<g >
<title>make_combined_reader (691 samples, 1.43%; +0.01%)</title><rect x="441.2" y="325" width="16.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="444.22" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (6 samples, 0.01%; +0.00%)</title><rect x="609.7" y="437" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="612.75" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (10 samples, 0.02%; -0.00%)</title><rect x="888.5" y="421" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="891.47" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (11 samples, 0.02%; -0.01%)</title><rect x="752.8" y="261" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="755.78" y="271.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (17 samples, 0.04%; +0.01%)</title><rect x="231.1" y="213" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="234.10" y="223.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (39 samples, 0.08%; 0.00%)</title><rect x="1051.6" y="245" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1054.63" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (6 samples, 0.01%; +0.00%)</title><rect x="223.7" y="213" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="226.66" y="223.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (9 samples, 0.02%; +0.01%)</title><rect x="335.0" y="165" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="338.04" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (5 samples, 0.01%; -0.01%)</title><rect x="444.6" y="245" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="447.63" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (13 samples, 0.03%; 0.00%)</title><rect x="234.0" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="236.98" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (78 samples, 0.16%; 0.00%)</title><rect x="666.7" y="469" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="669.68" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (21 samples, 0.04%; +0.02%)</title><rect x="760.2" y="373" width="0.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="763.15" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (6 samples, 0.01%; +0.01%)</title><rect x="623.6" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="626.61" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (5 samples, 0.01%; +0.00%)</title><rect x="588.6" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="591.57" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (9 samples, 0.02%; +0.00%)</title><rect x="1152.9" y="485" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1155.91" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,394 samples, 9.09%; +0.01%)</title><rect x="147.3" y="277" width="107.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="150.27" y="287.5" >logalloc::all..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; -0.02%)</title><rect x="516.8" y="277" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="519.77" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (113 samples, 0.23%; -0.05%)</title><rect x="839.1" y="437" width="2.7" height="15.0" fill="rgb(155,155,255)" rx="2" ry="2" />
<text  x="842.07" y="447.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (93 samples, 0.19%; +0.00%)</title><rect x="732.2" y="341" width="2.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="735.16" y="351.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (284 samples, 0.59%; +0.01%)</title><rect x="1028.2" y="197" width="6.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1031.20" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (11 samples, 0.02%; -0.00%)</title><rect x="756.6" y="405" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="759.64" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; -0.01%)</title><rect x="826.7" y="341" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="829.65" y="351.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (50 samples, 0.10%; -0.00%)</title><rect x="321.8" y="181" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="324.78" y="191.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (7 samples, 0.01%; +0.00%)</title><rect x="854.2" y="325" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="857.18" y="335.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (21 samples, 0.04%; +0.02%)</title><rect x="312.5" y="165" width="0.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="315.53" y="175.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (21 samples, 0.04%; +0.01%)</title><rect x="809.1" y="101" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="812.08" y="111.5" ></text>
</g>
<g >
<title>operator new (70 samples, 0.14%; 0.00%)</title><rect x="1049.8" y="245" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1052.82" y="255.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (118 samples, 0.24%; -0.00%)</title><rect x="951.5" y="405" width="2.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="954.45" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (547 samples, 1.13%; +0.05%)</title><rect x="235.0" y="229" width="13.3" height="15.0" fill="rgb(255,155,155)" rx="2" ry="2" />
<text  x="237.95" y="239.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (61 samples, 0.13%; -0.01%)</title><rect x="503.0" y="261" width="1.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="506.03" y="271.5" ></text>
</g>
<g >
<title>operator delete (25 samples, 0.05%; +0.01%)</title><rect x="825.3" y="373" width="0.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="828.33" y="383.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (14 samples, 0.03%; +0.00%)</title><rect x="1034.8" y="181" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1037.79" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%; +0.01%)</title><rect x="1132.8" y="421" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1135.85" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::run (47,302 samples, 97.83%; 0.00%)</title><rect x="24.4" y="549" width="1154.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.42" y="559.5" >seastar::reactor::run</text>
</g>
<g >
<title>operator new (33 samples, 0.07%; +0.01%)</title><rect x="539.9" y="325" width="0.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="542.93" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.04%; +0.01%)</title><rect x="457.4" y="277" width="0.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="460.42" y="287.5" ></text>
</g>
<g >
<title>operator new (63 samples, 0.13%; +0.00%)</title><rect x="960.2" y="405" width="1.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="963.21" y="415.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (16 samples, 0.03%; -0.01%)</title><rect x="291.8" y="373" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="294.79" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (14 samples, 0.03%; -0.02%)</title><rect x="723.3" y="389" width="0.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="726.32" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (193 samples, 0.40%; -0.00%)</title><rect x="1061.7" y="325" width="4.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1064.71" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (6 samples, 0.01%; -0.01%)</title><rect x="829.8" y="325" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="832.85" y="335.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (162 samples, 0.34%; +0.01%)</title><rect x="992.9" y="309" width="4.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="995.91" y="319.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (6 samples, 0.01%; -0.00%)</title><rect x="199.4" y="85" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="202.40" y="95.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (6 samples, 0.01%; 0.00%)</title><rect x="512.7" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="515.70" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (16 samples, 0.03%; +0.01%)</title><rect x="49.3" y="485" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="52.31" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (145 samples, 0.30%; -0.01%)</title><rect x="845.2" y="405" width="3.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="848.22" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (53 samples, 0.11%; -0.03%)</title><rect x="861.5" y="421" width="1.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="864.52" y="431.5" ></text>
</g>
<g >
<title>row::row (6 samples, 0.01%; +0.01%)</title><rect x="253.4" y="213" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="256.38" y="223.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (24 samples, 0.05%; -0.02%)</title><rect x="1044.9" y="261" width="0.6" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1047.92" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (11 samples, 0.02%; -0.01%)</title><rect x="1153.1" y="485" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1156.13" y="495.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (19 samples, 0.04%; +0.02%)</title><rect x="1145.3" y="501" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1148.29" y="511.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (105 samples, 0.22%; 0.00%)</title><rect x="1172.9" y="453" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1175.89" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (8 samples, 0.02%; +0.01%)</title><rect x="591.8" y="389" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="594.79" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (15 samples, 0.03%; +0.02%)</title><rect x="451.2" y="293" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="454.25" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (7 samples, 0.01%; +0.00%)</title><rect x="787.8" y="309" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="790.78" y="319.5" ></text>
</g>
<g >
<title>validation::validate_column_family (354 samples, 0.73%; -0.01%)</title><rect x="827.3" y="389" width="8.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="830.29" y="399.5" ></text>
</g>
<g >
<title>sstring_hash::operator (48 samples, 0.10%; -0.00%)</title><rect x="847.5" y="373" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="850.47" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (13 samples, 0.03%; +0.01%)</title><rect x="167.7" y="213" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="170.67" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (7 samples, 0.01%; +0.00%)</title><rect x="1136.9" y="421" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1139.95" y="431.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (432 samples, 0.89%; +0.01%)</title><rect x="478.0" y="277" width="10.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="481.02" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (6 samples, 0.01%; 0.00%)</title><rect x="1143.2" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.24" y="143.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (75 samples, 0.16%; +0.02%)</title><rect x="1154.3" y="453" width="1.8" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1157.27" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.00%)</title><rect x="798.4" y="213" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="801.37" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; -0.01%)</title><rect x="563.8" y="309" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="566.82" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; -0.00%)</title><rect x="173.3" y="133" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="176.26" y="143.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (16 samples, 0.03%; +0.03%)</title><rect x="526.1" y="325" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="529.07" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (16 samples, 0.03%; +0.00%)</title><rect x="702.1" y="469" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="705.07" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (15 samples, 0.03%; +0.02%)</title><rect x="421.6" y="357" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="424.64" y="367.5" ></text>
</g>
<g >
<title>operator delete (15 samples, 0.03%; +0.01%)</title><rect x="667.1" y="437" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="670.15" y="447.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (278 samples, 0.57%; 0.00%)</title><rect x="17.3" y="597" width="6.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.30" y="607.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (6 samples, 0.01%; -0.01%)</title><rect x="823.5" y="309" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="826.45" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (143 samples, 0.30%; +0.00%)</title><rect x="401.2" y="197" width="3.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="404.17" y="207.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (16 samples, 0.03%; +0.02%)</title><rect x="1088.8" y="277" width="0.4" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="1091.82" y="287.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (7 samples, 0.01%; -0.02%)</title><rect x="1149.0" y="485" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1152.00" y="495.5" ></text>
</g>
<g >
<title>operator new (56 samples, 0.12%; 0.00%)</title><rect x="859.4" y="357" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.43" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (11 samples, 0.02%; -0.00%)</title><rect x="1176.3" y="421" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1179.29" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (8 samples, 0.02%; +0.01%)</title><rect x="615.6" y="437" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="618.58" y="447.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (19 samples, 0.04%; -0.01%)</title><rect x="1121.0" y="357" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1123.99" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (33 samples, 0.07%; 0.00%)</title><rect x="661.5" y="485" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="664.53" y="495.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (8 samples, 0.02%; -0.00%)</title><rect x="767.0" y="309" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="770.03" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (326 samples, 0.67%; +0.01%)</title><rect x="567.6" y="309" width="8.0" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="570.60" y="319.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (5 samples, 0.01%; +0.01%)</title><rect x="775.0" y="373" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="777.96" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (18 samples, 0.04%; +0.01%)</title><rect x="1144.8" y="501" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1147.76" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.01%)</title><rect x="784.3" y="277" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="787.31" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (8 samples, 0.02%; -0.01%)</title><rect x="1035.6" y="197" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1038.65" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (10 samples, 0.02%; -0.02%)</title><rect x="454.9" y="261" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="457.93" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (27 samples, 0.06%; +0.03%)</title><rect x="413.4" y="277" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="416.42" y="287.5" ></text>
</g>
<g >
<title>freeze (14 samples, 0.03%; 0.00%)</title><rect x="1143.1" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.10" y="207.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (5 samples, 0.01%; 0.00%)</title><rect x="20.1" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.10" y="255.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (7 samples, 0.01%; +0.01%)</title><rect x="953.2" y="357" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="956.23" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (34 samples, 0.07%; +0.01%)</title><rect x="806.3" y="117" width="0.8" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="809.30" y="127.5" ></text>
</g>
<g >
<title>operator new (86 samples, 0.18%; +0.01%)</title><rect x="280.0" y="277" width="2.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="282.98" y="287.5" ></text>
</g>
<g >
<title>make_combined_reader (859 samples, 1.78%; +0.05%)</title><rect x="438.4" y="341" width="21.0" height="15.0" fill="rgb(255,159,159)" rx="2" ry="2" />
<text  x="441.41" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; +0.00%)</title><rect x="934.5" y="373" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="937.47" y="383.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (9 samples, 0.02%; -0.07%)</title><rect x="927.6" y="373" width="0.3" height="15.0" fill="rgb(136,136,255)" rx="2" ry="2" />
<text  x="930.63" y="383.5" ></text>
</g>
<g >
<title>operator delete (63 samples, 0.13%; +0.01%)</title><rect x="409.4" y="245" width="1.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="412.44" y="255.5" ></text>
</g>
<g >
<title>operator delete (37 samples, 0.08%; +0.02%)</title><rect x="675.5" y="453" width="0.9" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="678.49" y="463.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (44 samples, 0.09%; +0.00%)</title><rect x="767.5" y="341" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="770.47" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (122 samples, 0.25%; -0.01%)</title><rect x="508.8" y="213" width="3.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="511.79" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::execution_stage_manager::flush (6 samples, 0.01%; +0.01%)</title><rect x="1177.4" y="501" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1180.43" y="511.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::raw_value_view (83 samples, 0.17%; +0.01%)</title><rect x="911.4" y="325" width="2.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="914.43" y="335.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.01%; -0.00%)</title><rect x="494.7" y="309" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="497.73" y="319.5" ></text>
</g>
<g >
<title>reader_permit::set_max_result_size (12 samples, 0.02%; +0.02%)</title><rect x="65.0" y="453" width="0.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="67.96" y="463.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (24 samples, 0.05%; +0.02%)</title><rect x="572.4" y="277" width="0.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="575.39" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%; -0.01%)</title><rect x="302.9" y="245" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="305.94" y="255.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (41 samples, 0.08%; -0.00%)</title><rect x="634.1" y="485" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="637.13" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (79 samples, 0.16%; -0.00%)</title><rect x="154.5" y="213" width="1.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="157.47" y="223.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (140 samples, 0.29%; -0.03%)</title><rect x="444.9" y="277" width="3.4" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="447.93" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (16 samples, 0.03%; +0.01%)</title><rect x="829.0" y="293" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="831.97" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (53 samples, 0.11%; -0.02%)</title><rect x="1160.9" y="453" width="1.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1163.89" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (54 samples, 0.11%; -0.01%)</title><rect x="1038.2" y="197" width="1.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1041.16" y="207.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (102 samples, 0.21%; -0.00%)</title><rect x="620.8" y="405" width="2.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="623.80" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (10 samples, 0.02%; +0.01%)</title><rect x="219.3" y="117" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="222.29" y="127.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (12 samples, 0.02%; -0.00%)</title><rect x="982.8" y="357" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="985.84" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="915.4" y="357" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="918.36" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (12 samples, 0.02%; +0.00%)</title><rect x="609.1" y="437" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="612.09" y="447.5" ></text>
</g>
<g >
<title>seastar::gate::enter (11 samples, 0.02%; -0.03%)</title><rect x="1040.9" y="229" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1043.87" y="239.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;dht::token const&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, db::read_repair_decision&amp;&gt; (6 samples, 0.01%; +0.00%)</title><rect x="1068.3" y="341" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1071.32" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (32 samples, 0.07%; +0.05%)</title><rect x="261.1" y="293" width="0.7" height="15.0" fill="rgb(255,155,155)" rx="2" ry="2" />
<text  x="264.07" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (7 samples, 0.01%; -0.00%)</title><rect x="225.3" y="181" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="228.27" y="191.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (5,300 samples, 10.96%; -0.02%)</title><rect x="726.8" y="453" width="129.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="729.77" y="463.5" >single_node_cql_..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="556.5" y="421" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="559.45" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (6 samples, 0.01%; +0.00%)</title><rect x="144.4" y="261" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="147.42" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (26 samples, 0.05%; -0.00%)</title><rect x="606.7" y="437" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="609.65" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (18 samples, 0.04%; -0.00%)</title><rect x="580.5" y="357" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="583.49" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (12 samples, 0.02%; +0.00%)</title><rect x="502.7" y="261" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="505.74" y="271.5" ></text>
</g>
<g >
<title>create_partitions (268 samples, 0.55%; 0.00%)</title><rect x="17.5" y="533" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.52" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (16 samples, 0.03%; -0.01%)</title><rect x="143.0" y="229" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="145.95" y="239.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (22 samples, 0.05%; 0.00%)</title><rect x="1141.9" y="309" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.92" y="319.5" ></text>
</g>
<g >
<title>database::add_column_family (6 samples, 0.01%; 0.00%)</title><rect x="46.8" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.80" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%; +0.01%)</title><rect x="143.9" y="229" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="146.86" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (27 samples, 0.06%; +0.01%)</title><rect x="959.4" y="373" width="0.7" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="962.41" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (30 samples, 0.06%; -0.00%)</title><rect x="161.7" y="181" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="164.74" y="191.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (6 samples, 0.01%; -0.03%)</title><rect x="565.5" y="309" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="568.51" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (10 samples, 0.02%; +0.01%)</title><rect x="148.2" y="261" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="151.20" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (627 samples, 1.30%; -0.07%)</title><rect x="375.8" y="181" width="15.3" height="15.0" fill="rgb(130,130,255)" rx="2" ry="2" />
<text  x="378.81" y="191.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (5 samples, 0.01%; +0.00%)</title><rect x="368.7" y="197" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="371.66" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (9 samples, 0.02%; -0.00%)</title><rect x="221.2" y="133" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="224.17" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.01%; +0.01%)</title><rect x="962.2" y="405" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="965.17" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (29 samples, 0.06%; +0.01%)</title><rect x="540.0" y="309" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="543.03" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (7 samples, 0.01%; +0.01%)</title><rect x="1030.3" y="149" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1033.35" y="159.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (23 samples, 0.05%; +0.04%)</title><rect x="437.0" y="341" width="0.6" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="440.04" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,170 samples, 4.49%; -0.00%)</title><rect x="170.1" y="197" width="53.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="173.11" y="207.5" >parti..</text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (18 samples, 0.04%; +0.02%)</title><rect x="1122.6" y="373" width="0.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1125.62" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (15 samples, 0.03%; +0.03%)</title><rect x="620.3" y="405" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="623.32" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.05%; 0.00%)</title><rect x="772.4" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="775.40" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="408.7" y="245" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="411.73" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (24 samples, 0.05%; -0.00%)</title><rect x="1143.1" y="245" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1146.07" y="255.5" ></text>
</g>
<g >
<title>operator delete (64 samples, 0.13%; -0.01%)</title><rect x="569.0" y="293" width="1.6" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="572.02" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (11 samples, 0.02%; -0.01%)</title><rect x="865.4" y="437" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="868.40" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (6 samples, 0.01%; -0.01%)</title><rect x="1101.3" y="357" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1104.27" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (22 samples, 0.05%; -0.02%)</title><rect x="73.2" y="373" width="0.6" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="76.23" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (14 samples, 0.03%; -0.01%)</title><rect x="671.4" y="469" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="674.39" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (32 samples, 0.07%; -0.00%)</title><rect x="811.4" y="229" width="0.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="814.42" y="239.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (22 samples, 0.05%; 0.00%)</title><rect x="750.5" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="753.46" y="303.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (404 samples, 0.84%; +0.01%)</title><rect x="1179.0" y="629" width="9.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1182.04" y="639.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (26 samples, 0.05%; 0.00%)</title><rect x="689.6" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.65" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (20 samples, 0.04%; +0.04%)</title><rect x="65.9" y="437" width="0.4" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="68.86" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (120 samples, 0.25%; +0.03%)</title><rect x="225.8" y="181" width="2.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="228.78" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (20 samples, 0.04%; +0.00%)</title><rect x="616.3" y="421" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="619.29" y="431.5" ></text>
</g>
<g >
<title>__tls_init (13 samples, 0.03%; +0.01%)</title><rect x="490.5" y="309" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="493.49" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (15 samples, 0.03%; -0.00%)</title><rect x="210.4" y="101" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="213.36" y="111.5" ></text>
</g>
<g >
<title>seastar::memory::stats (48 samples, 0.10%; +0.04%)</title><rect x="531.9" y="293" width="1.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="534.88" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,558 samples, 7.36%; +0.01%)</title><rect x="307.3" y="245" width="86.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="310.34" y="255.5" >flat_mutat..</text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (458 samples, 0.95%; -0.01%)</title><rect x="31.9" y="501" width="11.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="34.91" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (6 samples, 0.01%; +0.01%)</title><rect x="323.2" y="213" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="326.22" y="223.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (7 samples, 0.01%; +0.01%)</title><rect x="848.5" y="357" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="851.47" y="367.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; +0.00%)</title><rect x="524.2" y="341" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="527.16" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (15 samples, 0.03%; -0.01%)</title><rect x="286.1" y="357" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="289.06" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (21 samples, 0.04%; -0.00%)</title><rect x="1001.8" y="229" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1004.80" y="239.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (12 samples, 0.02%; +0.02%)</title><rect x="981.5" y="357" width="0.3" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="984.54" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (8 samples, 0.02%; +0.00%)</title><rect x="391.8" y="213" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="394.85" y="223.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (10 samples, 0.02%; +0.00%)</title><rect x="710.8" y="421" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="713.81" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (8 samples, 0.02%; -0.01%)</title><rect x="46.0" y="485" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="48.97" y="495.5" ></text>
</g>
<g >
<title>operator new (16 samples, 0.03%; 0.00%)</title><rect x="554.4" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="557.38" y="415.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%; -0.00%)</title><rect x="657.7" y="453" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="660.68" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (42 samples, 0.09%; +0.00%)</title><rect x="1063.5" y="293" width="1.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1066.47" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (16 samples, 0.03%; +0.02%)</title><rect x="777.3" y="357" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="780.28" y="367.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (279 samples, 0.58%; +0.00%)</title><rect x="481.7" y="245" width="6.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="484.73" y="255.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (6 samples, 0.01%; +0.00%)</title><rect x="428.7" y="389" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="431.75" y="399.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (25 samples, 0.05%; +0.02%)</title><rect x="940.1" y="389" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="943.08" y="399.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (575 samples, 1.19%; 0.00%)</title><rect x="740.8" y="405" width="14.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="743.80" y="415.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (7 samples, 0.01%; -0.01%)</title><rect x="307.1" y="213" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="310.14" y="223.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (108 samples, 0.22%; -0.00%)</title><rect x="651.7" y="469" width="2.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="654.72" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (6,000 samples, 12.41%; +0.03%)</title><rect x="962.3" y="405" width="146.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="965.31" y="415.5" >service::storage_p..</text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (18 samples, 0.04%; -0.01%)</title><rect x="1123.2" y="389" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1126.21" y="399.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (8 samples, 0.02%; 0.00%)</title><rect x="809.4" y="69" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="812.37" y="79.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (14 samples, 0.03%; +0.01%)</title><rect x="904.1" y="261" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="907.08" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (44 samples, 0.09%; +0.05%)</title><rect x="536.0" y="245" width="1.1" height="15.0" fill="rgb(255,159,159)" rx="2" ry="2" />
<text  x="539.00" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (39 samples, 0.08%; +0.06%)</title><rect x="608.1" y="437" width="1.0" height="15.0" fill="rgb(255,146,146)" rx="2" ry="2" />
<text  x="611.14" y="447.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::statements::raw::update_statement, cql3::cf_name, std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;, bool&amp;&gt; (5 samples, 0.01%; 0.00%)</title><rect x="22.2" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.23" y="367.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (5 samples, 0.01%; +0.00%)</title><rect x="23.8" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="26.81" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (12 samples, 0.02%; -0.00%)</title><rect x="1039.8" y="197" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1042.79" y="207.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (4,576 samples, 9.46%; +0.05%)</title><rect x="429.6" y="373" width="111.7" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="432.62" y="383.5" >std::_Functio..</text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (43 samples, 0.09%; +0.01%)</title><rect x="411.9" y="245" width="1.0" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="414.86" y="255.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (64 samples, 0.13%; -0.01%)</title><rect x="506.6" y="229" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="509.64" y="239.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (10 samples, 0.02%; +0.00%)</title><rect x="714.1" y="405" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="717.12" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (15 samples, 0.03%; +0.00%)</title><rect x="695.6" y="453" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="698.55" y="463.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (263 samples, 0.54%; +0.03%)</title><rect x="1082.3" y="245" width="6.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1085.26" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (37 samples, 0.08%; +0.00%)</title><rect x="257.8" y="277" width="0.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="260.85" y="287.5" ></text>
</g>
<g >
<title>dht::shard_of (5 samples, 0.01%; +0.00%)</title><rect x="1004.2" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1007.16" y="303.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (259 samples, 0.54%; -0.00%)</title><rect x="17.7" y="517" width="6.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="20.71" y="527.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; +0.01%)</title><rect x="692.8" y="469" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="695.80" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (104 samples, 0.22%; +0.02%)</title><rect x="198.7" y="117" width="2.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="201.74" y="127.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (22 samples, 0.05%; +0.02%)</title><rect x="1133.2" y="421" width="0.5" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="1136.16" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (593 samples, 1.23%; -0.01%)</title><rect x="1153.4" y="485" width="14.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1156.44" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (10 samples, 0.02%; -0.01%)</title><rect x="464.2" y="293" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="467.18" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (48 samples, 0.10%; -0.01%)</title><rect x="949.0" y="373" width="1.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="952.01" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="584.7" y="341" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="587.71" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (8 samples, 0.02%; +0.01%)</title><rect x="248.3" y="229" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="251.30" y="239.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (24 samples, 0.05%; +0.01%)</title><rect x="824.2" y="293" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="827.23" y="303.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (13 samples, 0.03%; -0.01%)</title><rect x="1097.2" y="261" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1100.19" y="271.5" ></text>
</g>
<g >
<title>do_cql_test (269 samples, 0.56%; 0.00%)</title><rect x="17.5" y="549" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.52" y="559.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (32 samples, 0.07%; -0.01%)</title><rect x="818.6" y="309" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="821.62" y="319.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (14 samples, 0.03%; -0.01%)</title><rect x="574.4" y="293" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="577.36" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (8 samples, 0.02%; +0.01%)</title><rect x="1109.2" y="405" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1112.22" y="415.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (24 samples, 0.05%; -0.00%)</title><rect x="511.0" y="197" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="514.01" y="207.5" ></text>
</g>
<g >
<title>mutation_querier::consume (1,763 samples, 3.65%; +0.06%)</title><rect x="325.1" y="197" width="43.1" height="15.0" fill="rgb(255,139,139)" rx="2" ry="2" />
<text  x="328.13" y="207.5" >muta..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="575.1" y="293" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="578.12" y="303.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (16 samples, 0.03%; +0.01%)</title><rect x="831.2" y="277" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="834.24" y="287.5" ></text>
</g>
<g >
<title>schema::column_at (13 samples, 0.03%; +0.00%)</title><rect x="368.3" y="197" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="371.30" y="207.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (8 samples, 0.02%; 0.00%)</title><rect x="724.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="727.13" y="479.5" ></text>
</g>
<g >
<title>std::variant&lt;fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (18 samples, 0.04%; -0.00%)</title><rect x="913.0" y="309" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="916.02" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (18 samples, 0.04%; -0.00%)</title><rect x="1151.9" y="453" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1154.88" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (21 samples, 0.04%; -0.03%)</title><rect x="1139.6" y="421" width="0.5" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="1142.56" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; 0.00%)</title><rect x="622.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="625.44" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (5 samples, 0.01%; -0.00%)</title><rect x="157.1" y="197" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="160.11" y="207.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (12,748 samples, 26.36%; +0.01%)</title><rect x="113.6" y="421" width="311.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="116.59" y="431.5" >query::consume_page&lt;</text>
</g>
<g >
<title>reader_permit::consume (6 samples, 0.01%; -0.00%)</title><rect x="214.3" y="133" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="217.26" y="143.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; +0.00%)</title><rect x="298.5" y="229" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="301.50" y="239.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (46 samples, 0.10%; +0.00%)</title><rect x="1142.6" y="485" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1145.58" y="495.5" ></text>
</g>
<g >
<title>operator new (52 samples, 0.11%; +0.00%)</title><rect x="722.4" y="421" width="1.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="725.40" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (6 samples, 0.01%; +0.00%)</title><rect x="276.9" y="277" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="279.93" y="287.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (11 samples, 0.02%; +0.02%)</title><rect x="604.8" y="405" width="0.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="607.84" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (13 samples, 0.03%; +0.01%)</title><rect x="199.7" y="101" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="202.67" y="111.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (6 samples, 0.01%; +0.01%)</title><rect x="607.1" y="421" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="610.14" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (34 samples, 0.07%; +0.07%)</title><rect x="215.5" y="181" width="0.8" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="218.48" y="191.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (45 samples, 0.09%; 0.00%)</title><rect x="1142.6" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.61" y="463.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (11 samples, 0.02%; -0.02%)</title><rect x="1098.4" y="309" width="0.2" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="1101.36" y="319.5" ></text>
</g>
<g >
<title>reader_permit::mark_unused (16 samples, 0.03%; +0.02%)</title><rect x="64.5" y="453" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="67.52" y="463.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (27 samples, 0.06%; -0.00%)</title><rect x="1141.9" y="325" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1144.92" y="335.5" ></text>
</g>
<g >
<title>database::find_schema (73 samples, 0.15%; +0.02%)</title><rect x="827.6" y="357" width="1.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="830.63" y="367.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (6 samples, 0.01%; -0.00%)</title><rect x="1097.4" y="245" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1100.36" y="255.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (38 samples, 0.08%; +0.01%)</title><rect x="813.2" y="245" width="0.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="816.20" y="255.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (5 samples, 0.01%; -0.01%)</title><rect x="307.2" y="197" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="310.19" y="207.5" ></text>
</g>
<g >
<title>db::filter_for_query (30 samples, 0.06%; -0.01%)</title><rect x="1067.5" y="341" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1070.54" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (18 samples, 0.04%; -0.01%)</title><rect x="301.1" y="261" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="304.11" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (5 samples, 0.01%; +0.00%)</title><rect x="863.6" y="469" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="866.57" y="479.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (5 samples, 0.01%; -0.01%)</title><rect x="368.8" y="197" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="371.81" y="207.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (5 samples, 0.01%; 0.00%)</title><rect x="23.3" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.25" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (10 samples, 0.02%; -0.01%)</title><rect x="776.1" y="325" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="779.11" y="335.5" ></text>
</g>
<g >
<title>__tls_init (15 samples, 0.03%; -0.01%)</title><rect x="503.3" y="245" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="506.32" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (80 samples, 0.17%; +0.00%)</title><rect x="812.2" y="261" width="2.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="815.23" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (12 samples, 0.02%; -0.00%)</title><rect x="26.5" y="517" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="29.50" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (16 samples, 0.03%; +0.00%)</title><rect x="689.7" y="325" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="692.70" y="335.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (469 samples, 0.97%; +0.02%)</title><rect x="311.6" y="197" width="11.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="314.56" y="207.5" ></text>
</g>
<g >
<title>database::query (1,048 samples, 2.17%; +0.13%)</title><rect x="1015.6" y="261" width="25.5" height="15.0" fill="rgb(255,61,61)" rx="2" ry="2" />
<text  x="1018.56" y="271.5" >d..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (5 samples, 0.01%; +0.00%)</title><rect x="842.3" y="437" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="845.32" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (24 samples, 0.05%; -0.02%)</title><rect x="787.1" y="277" width="0.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="790.09" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; 0.00%)</title><rect x="60.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.95" y="447.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.06%; 0.00%)</title><rect x="1141.9" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.90" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (121 samples, 0.25%; +0.02%)</title><rect x="993.9" y="293" width="3.0" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="996.91" y="303.5" ></text>
</g>
<g >
<title>operator new (38 samples, 0.08%; 0.00%)</title><rect x="104.1" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="107.08" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.01%; +0.01%)</title><rect x="447.3" y="245" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="450.32" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (27 samples, 0.06%; 0.00%)</title><rect x="689.6" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.65" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (8 samples, 0.02%; +0.01%)</title><rect x="818.7" y="293" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="821.74" y="303.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (11 samples, 0.02%; -0.02%)</title><rect x="751.8" y="277" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="754.78" y="287.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (22 samples, 0.05%; +0.04%)</title><rect x="436.5" y="341" width="0.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="439.51" y="351.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (10 samples, 0.02%; -0.00%)</title><rect x="52.5" y="469" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="55.51" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (27 samples, 0.06%; +0.00%)</title><rect x="766.1" y="325" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="769.08" y="335.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (7 samples, 0.01%; -0.05%)</title><rect x="51.4" y="469" width="0.2" height="15.0" fill="rgb(159,159,255)" rx="2" ry="2" />
<text  x="54.44" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="968.0" y="373" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="971.02" y="383.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (94 samples, 0.19%; -0.01%)</title><rect x="721.7" y="453" width="2.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="724.67" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (6 samples, 0.01%; +0.01%)</title><rect x="693.3" y="469" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="696.33" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (29 samples, 0.06%; -0.02%)</title><rect x="544.5" y="421" width="0.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="547.54" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (11 samples, 0.02%; -0.01%)</title><rect x="1022.0" y="197" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1025.03" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (1,164 samples, 2.41%; +0.00%)</title><rect x="891.9" y="405" width="28.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="894.91" y="415.5" >cq..</text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (6 samples, 0.01%; +0.01%)</title><rect x="1035.4" y="197" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1038.38" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (368 samples, 0.76%; -0.01%)</title><rect x="899.2" y="293" width="9.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="902.18" y="303.5" ></text>
</g>
<g >
<title>reader_permit::consume (20 samples, 0.04%; +0.03%)</title><rect x="510.5" y="165" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="513.47" y="175.5" ></text>
</g>
<g >
<title>schema::column_at (7 samples, 0.01%; -0.04%)</title><rect x="391.1" y="181" width="0.2" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="394.12" y="191.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (130 samples, 0.27%; +0.00%)</title><rect x="751.4" y="325" width="3.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="754.36" y="335.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (12 samples, 0.02%; +0.00%)</title><rect x="222.6" y="149" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="225.61" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (69 samples, 0.14%; +0.00%)</title><rect x="1119.3" y="341" width="1.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1122.28" y="351.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (17 samples, 0.04%; +0.03%)</title><rect x="604.2" y="421" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="607.16" y="431.5" ></text>
</g>
<g >
<title>operator delete (52 samples, 0.11%; +0.01%)</title><rect x="691.0" y="485" width="1.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="694.04" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (82 samples, 0.17%; -0.02%)</title><rect x="1022.5" y="229" width="2.0" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1025.47" y="239.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (34 samples, 0.07%; -0.01%)</title><rect x="1096.8" y="293" width="0.8" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1099.75" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (55 samples, 0.11%; +0.01%)</title><rect x="573.0" y="277" width="1.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="575.97" y="287.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (288 samples, 0.60%; -0.00%)</title><rect x="692.6" y="485" width="7.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="695.58" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1,206 samples, 2.49%; -0.05%)</title><rect x="175.2" y="133" width="29.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="178.21" y="143.5" >co..</text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous, auth::get_permissions (5 samples, 0.01%; +0.01%)</title><rect x="817.2" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="820.23" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (18 samples, 0.04%; +0.01%)</title><rect x="1106.3" y="357" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1109.29" y="367.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (25 samples, 0.05%; 0.00%)</title><rect x="191.6" y="53" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="194.56" y="63.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (18 samples, 0.04%; +0.02%)</title><rect x="864.9" y="405" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="867.94" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (15 samples, 0.03%; -0.00%)</title><rect x="797.7" y="133" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="800.68" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (10 samples, 0.02%; -0.00%)</title><rect x="336.4" y="165" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="339.38" y="175.5" ></text>
</g>
<g >
<title>operator new (48 samples, 0.10%; +0.00%)</title><rect x="789.6" y="277" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="792.56" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (10 samples, 0.02%; -0.01%)</title><rect x="530.7" y="309" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="533.71" y="319.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (473 samples, 0.98%; -0.01%)</title><rect x="922.6" y="389" width="11.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="925.58" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (93 samples, 0.19%; -0.00%)</title><rect x="853.2" y="373" width="2.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="856.20" y="383.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (5 samples, 0.01%; +0.00%)</title><rect x="199.5" y="101" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="202.54" y="111.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (366 samples, 0.76%; +0.00%)</title><rect x="800.8" y="213" width="8.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="803.81" y="223.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (8 samples, 0.02%; -0.00%)</title><rect x="25.3" y="517" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="28.33" y="527.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (120 samples, 0.25%; -0.04%)</title><rect x="1186.0" y="613" width="2.9" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="1188.97" y="623.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (47 samples, 0.10%; -0.00%)</title><rect x="753.0" y="261" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="756.05" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (20 samples, 0.04%; +0.00%)</title><rect x="714.5" y="453" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="717.54" y="463.5" ></text>
</g>
<g >
<title>database::has_keyspace (91 samples, 0.19%; -0.00%)</title><rect x="833.7" y="357" width="2.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="836.70" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::shared_ptr_count_for&lt;cql3::metadata&amp;&gt; (5 samples, 0.01%; 0.00%)</title><rect x="658.3" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.26" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (20 samples, 0.04%; +0.02%)</title><rect x="589.2" y="405" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="592.18" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; -0.00%)</title><rect x="640.4" y="453" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="643.38" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (14 samples, 0.03%; 0.00%)</title><rect x="1142.7" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.68" y="303.5" ></text>
</g>
<g >
<title>reader_permit::consume (14 samples, 0.03%; +0.01%)</title><rect x="214.7" y="149" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="217.75" y="159.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (21 samples, 0.04%; +0.01%)</title><rect x="831.7" y="293" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="834.65" y="303.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (133 samples, 0.28%; +0.03%)</title><rect x="384.4" y="149" width="3.2" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="387.40" y="159.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (28 samples, 0.06%; 0.00%)</title><rect x="846.6" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="849.61" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="942.3" y="389" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="945.33" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (18 samples, 0.04%; +0.04%)</title><rect x="575.8" y="309" width="0.5" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="578.83" y="319.5" ></text>
</g>
<g >
<title>operator delete (28 samples, 0.06%; -0.02%)</title><rect x="35.6" y="469" width="0.7" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="38.65" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (6 samples, 0.01%; -0.01%)</title><rect x="655.8" y="405" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="658.75" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (43 samples, 0.09%; -0.01%)</title><rect x="1149.7" y="485" width="1.0" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1152.68" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%; +0.00%)</title><rect x="627.5" y="437" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="630.52" y="447.5" ></text>
</g>
<g >
<title>operator delete (42 samples, 0.09%; +0.01%)</title><rect x="702.8" y="485" width="1.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="705.75" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (87 samples, 0.18%; -0.00%)</title><rect x="796.2" y="213" width="2.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="799.24" y="223.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (92 samples, 0.19%; -0.02%)</title><rect x="518.5" y="325" width="2.3" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="521.53" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (5 samples, 0.01%; +0.00%)</title><rect x="717.2" y="501" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="720.25" y="511.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (9 samples, 0.02%; +0.00%)</title><rect x="1034.8" y="165" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1037.84" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (35 samples, 0.07%; +0.01%)</title><rect x="493.5" y="277" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="496.51" y="287.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (24 samples, 0.05%; +0.00%)</title><rect x="908.3" y="293" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="911.26" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; -0.01%)</title><rect x="939.8" y="357" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="942.84" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (12 samples, 0.02%; +0.01%)</title><rect x="659.5" y="437" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="662.51" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (26 samples, 0.05%; +0.01%)</title><rect x="887.5" y="421" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="890.54" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (6 samples, 0.01%; 0.00%)</title><rect x="261.8" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="264.85" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (424 samples, 0.88%; 0.00%)</title><rect x="398.4" y="245" width="10.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="401.39" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (25 samples, 0.05%; 0.00%)</title><rect x="1143.1" y="309" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.07" y="319.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (5 samples, 0.01%; -0.01%)</title><rect x="245.2" y="197" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="248.16" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (45 samples, 0.09%; -0.00%)</title><rect x="811.1" y="245" width="1.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="814.13" y="255.5" ></text>
</g>
<g >
<title>operator new (49 samples, 0.10%; 0.00%)</title><rect x="157.5" y="181" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="160.52" y="191.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (23 samples, 0.05%; +0.02%)</title><rect x="1046.9" y="277" width="0.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1049.94" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (50 samples, 0.10%; 0.00%)</title><rect x="1159.6" y="405" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1162.62" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (39 samples, 0.08%; +0.02%)</title><rect x="1021.3" y="213" width="1.0" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1024.34" y="223.5" ></text>
</g>
<g >
<title>abstract_type::bound_value_needs_to_be_reserialized (6 samples, 0.01%; +0.01%)</title><rect x="900.5" y="277" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="903.50" y="287.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (20 samples, 0.04%; +0.01%)</title><rect x="766.7" y="325" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="769.74" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (5 samples, 0.01%; -0.00%)</title><rect x="693.6" y="469" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="696.58" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (19 samples, 0.04%; -0.01%)</title><rect x="841.9" y="437" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="844.85" y="447.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (6 samples, 0.01%; -0.02%)</title><rect x="996.7" y="277" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="999.72" y="287.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (35 samples, 0.07%; -0.03%)</title><rect x="578.8" y="373" width="0.8" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="581.78" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (15 samples, 0.03%; -0.01%)</title><rect x="671.0" y="469" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="674.03" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (7 samples, 0.01%; +0.01%)</title><rect x="457.0" y="277" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="460.03" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (36 samples, 0.07%; -0.00%)</title><rect x="941.6" y="405" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="944.57" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (6 samples, 0.01%; +0.00%)</title><rect x="638.0" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="641.01" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (8 samples, 0.02%; +0.00%)</title><rect x="809.9" y="197" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="812.93" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (12 samples, 0.02%; +0.01%)</title><rect x="523.0" y="325" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="526.04" y="335.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (18 samples, 0.04%; +0.00%)</title><rect x="804.3" y="117" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="807.32" y="127.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (17 samples, 0.04%; +0.00%)</title><rect x="695.9" y="453" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="698.92" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (9 samples, 0.02%; +0.01%)</title><rect x="1123.9" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1126.87" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (29 samples, 0.06%; 0.00%)</title><rect x="800.1" y="181" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="803.08" y="191.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (98 samples, 0.20%; -0.00%)</title><rect x="550.9" y="357" width="2.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="553.86" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.01%; +0.01%)</title><rect x="811.3" y="229" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="814.30" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (9 samples, 0.02%; -0.02%)</title><rect x="657.0" y="469" width="0.2" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="660.02" y="479.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%; +0.01%)</title><rect x="458.4" y="325" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="461.45" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (5 samples, 0.01%; -0.00%)</title><rect x="23.3" y="389" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="26.25" y="399.5" ></text>
</g>
<g >
<title>operator new (71 samples, 0.15%; 0.00%)</title><rect x="1119.2" y="357" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.23" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (15 samples, 0.03%; +0.01%)</title><rect x="278.8" y="293" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="281.81" y="303.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (8 samples, 0.02%; -0.02%)</title><rect x="803.1" y="117" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="806.08" y="127.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (6 samples, 0.01%; +0.01%)</title><rect x="1040.2" y="245" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1043.21" y="255.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (109 samples, 0.23%; -0.00%)</title><rect x="721.4" y="469" width="2.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="724.40" y="479.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (5 samples, 0.01%; +0.01%)</title><rect x="150.1" y="261" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="153.13" y="271.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (5 samples, 0.01%; +0.00%)</title><rect x="958.4" y="405" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="961.36" y="415.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (497 samples, 1.03%; -0.03%)</title><rect x="476.8" y="309" width="12.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="479.80" y="319.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1,202 samples, 2.49%; -0.08%)</title><rect x="338.8" y="181" width="29.4" height="15.0" fill="rgb(120,120,255)" rx="2" ry="2" />
<text  x="341.82" y="191.5" >wr..</text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (17 samples, 0.04%; +0.01%)</title><rect x="334.8" y="181" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="337.84" y="191.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (12 samples, 0.02%; 0.00%)</title><rect x="21.9" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.88" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (8 samples, 0.02%; 0.00%)</title><rect x="20.4" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.42" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (51 samples, 0.11%; +0.04%)</title><rect x="696.8" y="437" width="1.2" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="699.80" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (89 samples, 0.18%; -0.01%)</title><rect x="347.4" y="165" width="2.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="350.41" y="175.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (17 samples, 0.04%; +0.01%)</title><rect x="603.0" y="437" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="606.04" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (25 samples, 0.05%; +0.00%)</title><rect x="749.9" y="293" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="752.85" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (87 samples, 0.18%; +0.00%)</title><rect x="839.6" y="405" width="2.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="842.61" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (7 samples, 0.01%; 0.00%)</title><rect x="677.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="680.93" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (17 samples, 0.04%; +0.01%)</title><rect x="862.4" y="405" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="865.40" y="415.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (41 samples, 0.08%; +0.00%)</title><rect x="847.5" y="357" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="850.47" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.00%)</title><rect x="270.4" y="341" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="273.39" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (15 samples, 0.03%; 0.00%)</title><rect x="871.8" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.82" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (11 samples, 0.02%; 0.00%)</title><rect x="1136.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1139.17" y="415.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (10 samples, 0.02%; -0.00%)</title><rect x="1143.2" y="165" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1146.17" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; 0.00%)</title><rect x="429.5" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="432.50" y="383.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (22 samples, 0.05%; 0.00%)</title><rect x="808.5" y="101" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="811.54" y="111.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (147 samples, 0.30%; -0.00%)</title><rect x="894.9" y="325" width="3.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="897.93" y="335.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (27 samples, 0.06%; +0.00%)</title><rect x="40.6" y="453" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="43.63" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (23,845 samples, 49.31%; +0.06%)</title><rect x="49.7" y="485" width="581.9" height="15.0" fill="rgb(255,139,139)" rx="2" ry="2" />
<text  x="52.71" y="495.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (223 samples, 0.46%; +0.00%)</title><rect x="154.2" y="229" width="5.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="157.15" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (10 samples, 0.02%; -0.01%)</title><rect x="814.7" y="277" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="817.67" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (7 samples, 0.01%; 0.00%)</title><rect x="994.6" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="997.62" y="287.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (5 samples, 0.01%; -0.01%)</title><rect x="1053.5" y="277" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1056.51" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (12 samples, 0.02%; +0.01%)</title><rect x="964.0" y="389" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="966.97" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (91 samples, 0.19%; +0.01%)</title><rect x="749.1" y="325" width="2.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="752.14" y="335.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (72 samples, 0.15%; -0.02%)</title><rect x="600.9" y="405" width="1.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="603.89" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.01%; 0.00%)</title><rect x="18.0" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.00" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; -0.00%)</title><rect x="543.4" y="405" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="546.42" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.01%; +0.01%)</title><rect x="418.2" y="341" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="421.15" y="351.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (23 samples, 0.05%; +0.03%)</title><rect x="1068.7" y="341" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1071.66" y="351.5" ></text>
</g>
<g >
<title>operator delete (39 samples, 0.08%; +0.01%)</title><rect x="421.1" y="373" width="0.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="424.06" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (6 samples, 0.01%; -0.00%)</title><rect x="865.5" y="421" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="868.45" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (33 samples, 0.07%; -0.01%)</title><rect x="864.6" y="421" width="0.8" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="867.57" y="431.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (16 samples, 0.03%; +0.02%)</title><rect x="429.1" y="373" width="0.4" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="432.11" y="383.5" ></text>
</g>
<g >
<title>row_tombstone::apply (5 samples, 0.01%; +0.01%)</title><rect x="393.4" y="229" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="396.38" y="239.5" ></text>
</g>
<g >
<title>query::querier&lt; (18,416 samples, 38.09%; -0.05%)</title><rect x="108.5" y="437" width="449.5" height="15.0" fill="rgb(155,155,255)" rx="2" ry="2" />
<text  x="111.54" y="447.5" >query::querier&lt;</text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (10 samples, 0.02%; -0.00%)</title><rect x="1032.7" y="133" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1035.72" y="143.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (205 samples, 0.42%; 0.00%)</title><rect x="17.8" y="437" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.78" y="447.5" ></text>
</g>
<g >
<title>db::block_for (5 samples, 0.01%; +0.00%)</title><rect x="1067.4" y="341" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1070.42" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (28 samples, 0.06%; +0.02%)</title><rect x="1042.8" y="229" width="0.7" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1045.80" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::stats (31 samples, 0.06%; +0.01%)</title><rect x="503.8" y="245" width="0.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="506.76" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (8 samples, 0.02%; +0.01%)</title><rect x="134.1" y="277" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="137.09" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (6 samples, 0.01%; +0.01%)</title><rect x="981.8" y="357" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="984.84" y="367.5" ></text>
</g>
<g >
<title>operator delete (21 samples, 0.04%; 0.00%)</title><rect x="818.0" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.01" y="319.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt; (10 samples, 0.02%; +0.02%)</title><rect x="599.5" y="389" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="602.55" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (40 samples, 0.08%; +0.01%)</title><rect x="286.4" y="389" width="1.0" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="289.42" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (10 samples, 0.02%; -0.01%)</title><rect x="81.0" y="453" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="83.99" y="463.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (16 samples, 0.03%; -0.00%)</title><rect x="130.3" y="261" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="133.29" y="271.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (13 samples, 0.03%; +0.02%)</title><rect x="25.5" y="517" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="28.55" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (22 samples, 0.05%; 0.00%)</title><rect x="172.9" y="149" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="175.92" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (144 samples, 0.30%; +0.06%)</title><rect x="1010.4" y="261" width="3.5" height="15.0" fill="rgb(255,139,139)" rx="2" ry="2" />
<text  x="1013.39" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (7 samples, 0.01%; +0.01%)</title><rect x="1099.6" y="341" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1102.63" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (301 samples, 0.62%; -0.01%)</title><rect x="254.6" y="309" width="7.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="257.65" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (8 samples, 0.02%; +0.00%)</title><rect x="237.5" y="213" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="240.47" y="223.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (26 samples, 0.05%; +0.01%)</title><rect x="21.1" y="293" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="24.13" y="303.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (17 samples, 0.04%; +0.01%)</title><rect x="169.6" y="197" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="172.55" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (20 samples, 0.04%; +0.04%)</title><rect x="517.6" y="309" width="0.5" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="520.58" y="319.5" ></text>
</g>
<g >
<title>operator new (95 samples, 0.20%; +0.00%)</title><rect x="160.2" y="213" width="2.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="163.16" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (12 samples, 0.02%; +0.01%)</title><rect x="833.9" y="325" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="836.90" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (5 samples, 0.01%; 0.00%)</title><rect x="23.3" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.25" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (60 samples, 0.12%; +0.01%)</title><rect x="864.2" y="453" width="1.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="867.21" y="463.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.02%; +0.00%)</title><rect x="113.4" y="421" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="116.37" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="983.8" y="357" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="986.76" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (20 samples, 0.04%; +0.03%)</title><rect x="502.2" y="261" width="0.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="505.15" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;mutation_fragment*&gt;::take_value (10 samples, 0.02%; +0.01%)</title><rect x="424.4" y="405" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="427.40" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (85 samples, 0.18%; +0.01%)</title><rect x="990.6" y="309" width="2.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="993.62" y="319.5" ></text>
</g>
<g >
<title>operator new (54 samples, 0.11%; -0.00%)</title><rect x="861.5" y="437" width="1.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="864.50" y="447.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (52 samples, 0.11%; +0.01%)</title><rect x="229.4" y="229" width="1.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="232.39" y="239.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (54 samples, 0.11%; +0.04%)</title><rect x="475.5" y="277" width="1.3" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="478.45" y="287.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (64 samples, 0.13%; -0.01%)</title><rect x="546.8" y="373" width="1.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="549.76" y="383.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (12 samples, 0.02%; +0.01%)</title><rect x="392.9" y="229" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="395.87" y="239.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (46 samples, 0.10%; +0.05%)</title><rect x="1105.2" y="357" width="1.1" height="15.0" fill="rgb(255,155,155)" rx="2" ry="2" />
<text  x="1108.17" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (167 samples, 0.35%; -0.01%)</title><rect x="730.4" y="373" width="4.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="733.40" y="383.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (316 samples, 0.65%; 0.00%)</title><rect x="1081.0" y="261" width="7.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1083.96" y="271.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (306 samples, 0.63%; 0.00%)</title><rect x="728.0" y="437" width="7.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="730.96" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (9 samples, 0.02%; +0.01%)</title><rect x="861.3" y="421" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="864.28" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (5 samples, 0.01%; -0.07%)</title><rect x="907.8" y="277" width="0.1" height="15.0" fill="rgb(134,134,255)" rx="2" ry="2" />
<text  x="910.79" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (22 samples, 0.05%; -0.03%)</title><rect x="838.4" y="405" width="0.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="841.39" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (7 samples, 0.01%; +0.00%)</title><rect x="1037.5" y="229" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1040.48" y="239.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (10 samples, 0.02%; +0.01%)</title><rect x="240.5" y="197" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="243.49" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (44 samples, 0.09%; -0.01%)</title><rect x="1151.3" y="485" width="1.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1154.30" y="495.5" ></text>
</g>
<g >
<title>operator new (90 samples, 0.19%; +0.00%)</title><rect x="551.0" y="341" width="2.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="554.03" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (67 samples, 0.14%; -0.05%)</title><rect x="632.1" y="485" width="1.6" height="15.0" fill="rgb(159,159,255)" rx="2" ry="2" />
<text  x="635.08" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;range_tombstone*&gt;::allocate (5 samples, 0.01%; +0.01%)</title><rect x="549.7" y="357" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="552.67" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (5,598 samples, 11.58%; +0.02%)</title><rect x="287.8" y="405" width="136.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="290.76" y="415.5" >seastar::future&lt;m..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (7 samples, 0.01%; +0.00%)</title><rect x="615.8" y="437" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="618.78" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (8 samples, 0.02%; +0.01%)</title><rect x="756.7" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="759.71" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (6 samples, 0.01%; -0.02%)</title><rect x="449.4" y="277" width="0.2" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="452.44" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (37 samples, 0.08%; -0.01%)</title><rect x="216.8" y="165" width="0.9" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="219.77" y="175.5" ></text>
</g>
<g >
<title>query_state::query_state (235 samples, 0.49%; +0.02%)</title><rect x="597.2" y="437" width="5.8" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="600.23" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (106 samples, 0.22%; +0.00%)</title><rect x="858.4" y="389" width="2.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="861.38" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (7 samples, 0.01%; +0.00%)</title><rect x="768.8" y="373" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="771.81" y="383.5" ></text>
</g>
<g >
<title>operator new (18 samples, 0.04%; +0.00%)</title><rect x="792.3" y="245" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="795.29" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (50 samples, 0.10%; -0.00%)</title><rect x="828.1" y="309" width="1.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="831.14" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (14 samples, 0.03%; 0.00%)</title><rect x="871.8" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.82" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (32 samples, 0.07%; +0.04%)</title><rect x="625.8" y="389" width="0.8" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="628.81" y="399.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (7 samples, 0.01%; +0.01%)</title><rect x="823.6" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="826.60" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (52 samples, 0.11%; +0.00%)</title><rect x="766.0" y="341" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="768.96" y="351.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.06%; -0.00%)</title><rect x="509.4" y="197" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="512.38" y="207.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (7 samples, 0.01%; +0.01%)</title><rect x="726.2" y="453" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="729.23" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (254 samples, 0.53%; +0.07%)</title><rect x="206.6" y="133" width="6.2" height="15.0" fill="rgb(255,127,127)" rx="2" ry="2" />
<text  x="209.62" y="143.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (14 samples, 0.03%; 0.00%)</title><rect x="20.0" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.01" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (23 samples, 0.05%; +0.02%)</title><rect x="398.6" y="229" width="0.6" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="401.63" y="239.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (5,697 samples, 11.78%; +0.03%)</title><rect x="724.4" y="469" width="139.0" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="727.40" y="479.5" >single_node_cql_e..</text>
</g>
<g >
<title>operator delete (38 samples, 0.08%; -0.02%)</title><rect x="621.6" y="373" width="1.0" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="624.63" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (51 samples, 0.11%; +0.04%)</title><rect x="773.6" y="341" width="1.2" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="776.57" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (5 samples, 0.01%; 0.00%)</title><rect x="20.5" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.49" y="303.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (10 samples, 0.02%; +0.01%)</title><rect x="890.5" y="405" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="893.52" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt;::allocate (7 samples, 0.01%; +0.01%)</title><rect x="947.5" y="389" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="950.50" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (13 samples, 0.03%; -0.01%)</title><rect x="313.4" y="165" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="316.41" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (45 samples, 0.09%; +0.00%)</title><rect x="590.9" y="421" width="1.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="593.89" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (422 samples, 0.87%; -0.00%)</title><rect x="679.3" y="501" width="10.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="682.30" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (42 samples, 0.09%; -0.01%)</title><rect x="784.2" y="309" width="1.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="787.19" y="319.5" ></text>
</g>
<g >
<title>cql3::selection::simple_selection::is_aggregate (15 samples, 0.03%; +0.03%)</title><rect x="880.7" y="437" width="0.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="883.73" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (6 samples, 0.01%; -0.00%)</title><rect x="890.8" y="405" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="893.76" y="415.5" ></text>
</g>
<g >
<title>schema::column_at (67 samples, 0.14%; -0.01%)</title><rect x="210.7" y="101" width="1.7" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="213.72" y="111.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (7 samples, 0.01%; +0.01%)</title><rect x="831.3" y="261" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="834.34" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.00%)</title><rect x="453.9" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="456.88" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (7 samples, 0.01%; +0.00%)</title><rect x="45.2" y="485" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="48.21" y="495.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (9 samples, 0.02%; -0.01%)</title><rect x="920.1" y="389" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="923.09" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (444 samples, 0.92%; +0.01%)</title><rect x="1025.3" y="213" width="10.9" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1028.32" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (11 samples, 0.02%; +0.01%)</title><rect x="137.7" y="245" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="140.66" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.01%; -0.01%)</title><rect x="353.3" y="165" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="356.29" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (9 samples, 0.02%; -0.00%)</title><rect x="262.0" y="309" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="264.99" y="319.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (18 samples, 0.04%; +0.01%)</title><rect x="162.5" y="213" width="0.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="165.52" y="223.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (463 samples, 0.96%; +0.02%)</title><rect x="526.6" y="325" width="11.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="529.58" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (13 samples, 0.03%; +0.01%)</title><rect x="625.5" y="389" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="628.49" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (12 samples, 0.02%; -0.01%)</title><rect x="262.4" y="309" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="265.36" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (10 samples, 0.02%; -0.01%)</title><rect x="452.2" y="277" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="455.22" y="287.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (7 samples, 0.01%; 0.00%)</title><rect x="662.2" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="665.17" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (5 samples, 0.01%; +0.01%)</title><rect x="1055.1" y="309" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1058.10" y="319.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (83 samples, 0.17%; -0.00%)</title><rect x="528.5" y="309" width="2.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="531.48" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (8 samples, 0.02%; +0.00%)</title><rect x="581.5" y="341" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="584.47" y="351.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (156 samples, 0.32%; +0.03%)</title><rect x="70.7" y="405" width="3.8" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="73.74" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (23 samples, 0.05%; 0.00%)</title><rect x="555.9" y="421" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="558.89" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (25 samples, 0.05%; -0.01%)</title><rect x="713.8" y="421" width="0.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="716.76" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.00%)</title><rect x="826.3" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="829.31" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (9 samples, 0.02%; +0.01%)</title><rect x="1175.2" y="421" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1178.16" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (8 samples, 0.02%; +0.00%)</title><rect x="863.9" y="469" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="866.87" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (21 samples, 0.04%; +0.00%)</title><rect x="655.4" y="421" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="658.38" y="431.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (46 samples, 0.10%; -0.02%)</title><rect x="191.1" y="69" width="1.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="194.05" y="79.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (64 samples, 0.13%; +0.00%)</title><rect x="157.3" y="197" width="1.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="160.30" y="207.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (14 samples, 0.03%; +0.01%)</title><rect x="213.2" y="165" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="216.19" y="175.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (88 samples, 0.18%; -0.02%)</title><rect x="382.3" y="149" width="2.1" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="385.26" y="159.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (24 samples, 0.05%; -0.01%)</title><rect x="534.6" y="245" width="0.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="537.61" y="255.5" ></text>
</g>
<g >
<title>dht::tri_compare (9 samples, 0.02%; -0.00%)</title><rect x="1095.2" y="245" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1098.24" y="255.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (5 samples, 0.01%; +0.01%)</title><rect x="113.3" y="421" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="116.25" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (23,634 samples, 48.88%; +0.16%)</title><rect x="54.1" y="469" width="576.8" height="15.0" fill="rgb(255,34,34)" rx="2" ry="2" />
<text  x="57.15" y="479.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (8 samples, 0.02%; +0.00%)</title><rect x="459.2" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="462.18" y="335.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (190 samples, 0.39%; -0.01%)</title><rect x="902.3" y="277" width="4.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="905.25" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (21 samples, 0.04%; +0.01%)</title><rect x="834.8" y="309" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="837.80" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (10 samples, 0.02%; +0.00%)</title><rect x="318.8" y="181" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="321.76" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (391 samples, 0.81%; -0.00%)</title><rect x="274.5" y="325" width="9.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="277.54" y="335.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (60 samples, 0.12%; +0.00%)</title><rect x="534.2" y="261" width="1.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="537.22" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (86 samples, 0.18%; 0.00%)</title><rect x="833.8" y="341" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="836.78" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (55 samples, 0.11%; -0.05%)</title><rect x="968.3" y="357" width="1.3" height="15.0" fill="rgb(155,155,255)" rx="2" ry="2" />
<text  x="971.29" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (22 samples, 0.05%; 0.00%)</title><rect x="871.7" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.68" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (5 samples, 0.01%; +0.01%)</title><rect x="636.8" y="485" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="639.79" y="495.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (64 samples, 0.13%; +0.02%)</title><rect x="333.2" y="181" width="1.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="336.23" y="191.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (5 samples, 0.01%; -0.00%)</title><rect x="244.4" y="165" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="247.42" y="175.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (25 samples, 0.05%; 0.00%)</title><rect x="1143.1" y="277" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.07" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (70 samples, 0.14%; +0.00%)</title><rect x="803.8" y="133" width="1.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="806.83" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (101 samples, 0.21%; -0.01%)</title><rect x="947.7" y="389" width="2.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="950.72" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (8 samples, 0.02%; +0.01%)</title><rect x="754.6" y="357" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="757.64" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (3,086 samples, 6.38%; +0.01%)</title><rect x="761.2" y="421" width="75.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="764.18" y="431.5" >cql3::st..</text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (18 samples, 0.04%; -0.00%)</title><rect x="867.5" y="485" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="870.45" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (6 samples, 0.01%; -0.01%)</title><rect x="644.0" y="485" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="647.01" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (7 samples, 0.01%; +0.01%)</title><rect x="127.0" y="293" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="129.99" y="303.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (18 samples, 0.04%; +0.03%)</title><rect x="654.7" y="437" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="657.70" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (26 samples, 0.05%; +0.03%)</title><rect x="1066.4" y="325" width="0.7" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="1069.42" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (9 samples, 0.02%; +0.01%)</title><rect x="1170.7" y="453" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1173.72" y="463.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (8 samples, 0.02%; 0.00%)</title><rect x="832.0" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="834.97" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (65 samples, 0.13%; +0.01%)</title><rect x="386.1" y="133" width="1.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="389.06" y="143.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (7 samples, 0.01%; -0.01%)</title><rect x="961.8" y="405" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="964.75" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (5 samples, 0.01%; +0.00%)</title><rect x="102.6" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="105.61" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (7 samples, 0.01%; 0.00%)</title><rect x="24.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.23" y="495.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (185 samples, 0.38%; -0.01%)</title><rect x="929.6" y="357" width="4.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="932.61" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; -0.02%)</title><rect x="49.0" y="485" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="52.05" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (82 samples, 0.17%; -0.01%)</title><rect x="979.0" y="325" width="2.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="981.98" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (5 samples, 0.01%; +0.01%)</title><rect x="557.8" y="421" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="560.84" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (12 samples, 0.02%; +0.01%)</title><rect x="907.4" y="277" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="910.38" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (11 samples, 0.02%; -0.01%)</title><rect x="73.9" y="373" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="76.94" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (25 samples, 0.05%; +0.02%)</title><rect x="840.7" y="357" width="0.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="843.66" y="367.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (5 samples, 0.01%; +0.01%)</title><rect x="248.5" y="229" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="251.55" y="239.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (141 samples, 0.29%; -0.02%)</title><rect x="857.5" y="405" width="3.5" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="860.52" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (14 samples, 0.03%; +0.03%)</title><rect x="898.2" y="309" width="0.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="901.18" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (69 samples, 0.14%; +0.01%)</title><rect x="565.7" y="309" width="1.7" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="568.75" y="319.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (109 samples, 0.23%; +0.03%)</title><rect x="14.4" y="581" width="2.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="17.42" y="591.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (56 samples, 0.12%; +0.02%)</title><rect x="463.1" y="325" width="1.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="466.11" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (14 samples, 0.03%; +0.00%)</title><rect x="586.4" y="373" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="589.39" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (421 samples, 0.87%; -0.01%)</title><rect x="153.7" y="245" width="10.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="156.74" y="255.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (18 samples, 0.04%; +0.00%)</title><rect x="371.8" y="213" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="374.79" y="223.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (5 samples, 0.01%; -0.01%)</title><rect x="1178.8" y="629" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1181.82" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (624 samples, 1.29%; +0.00%)</title><rect x="234.5" y="261" width="15.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="237.52" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.05%; +0.03%)</title><rect x="99.9" y="421" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="102.90" y="431.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (621 samples, 1.28%; +0.05%)</title><rect x="131.0" y="293" width="15.1" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="133.99" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (24 samples, 0.05%; +0.00%)</title><rect x="952.3" y="373" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="955.28" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (14 samples, 0.03%; -0.01%)</title><rect x="99.5" y="421" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="102.51" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (30 samples, 0.06%; +0.02%)</title><rect x="614.8" y="437" width="0.8" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="617.85" y="447.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (5 samples, 0.01%; +0.00%)</title><rect x="311.4" y="197" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="314.44" y="207.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (6 samples, 0.01%; +0.00%)</title><rect x="331.2" y="181" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="334.23" y="191.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (27 samples, 0.06%; +0.00%)</title><rect x="220.1" y="133" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="223.09" y="143.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%; -0.00%)</title><rect x="143.3" y="245" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="146.34" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (8 samples, 0.02%; -0.00%)</title><rect x="944.9" y="405" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="947.86" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (8 samples, 0.02%; +0.01%)</title><rect x="919.6" y="373" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="922.61" y="383.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (140 samples, 0.29%; -0.00%)</title><rect x="394.3" y="245" width="3.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="397.34" y="255.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (198 samples, 0.41%; 0.00%)</title><rect x="17.9" y="405" width="4.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.91" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; -0.01%)</title><rect x="584.0" y="325" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="587.00" y="335.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%; +0.00%)</title><rect x="612.5" y="421" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="615.48" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (52 samples, 0.11%; -0.00%)</title><rect x="828.1" y="325" width="1.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="831.09" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (51 samples, 0.11%; 0.00%)</title><rect x="722.4" y="405" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="725.42" y="415.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (43 samples, 0.09%; +0.01%)</title><rect x="744.7" y="309" width="1.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="747.65" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (11 samples, 0.02%; +0.01%)</title><rect x="631.8" y="469" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="634.81" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (13 samples, 0.03%; -0.01%)</title><rect x="906.5" y="229" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="909.45" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (11 samples, 0.02%; 0.00%)</title><rect x="450.3" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="453.29" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (18 samples, 0.04%; 0.00%)</title><rect x="870.7" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.68" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (23 samples, 0.05%; +0.00%)</title><rect x="875.5" y="453" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="878.46" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (6 samples, 0.01%; +0.00%)</title><rect x="636.6" y="469" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="639.64" y="479.5" ></text>
</g>
<g >
<title>std::type_info::operator== (7 samples, 0.01%; +0.01%)</title><rect x="1047.3" y="261" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1050.34" y="271.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (11 samples, 0.02%; -0.01%)</title><rect x="24.8" y="517" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="27.76" y="527.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (5 samples, 0.01%; +0.01%)</title><rect x="770.0" y="405" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="772.99" y="415.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (78 samples, 0.16%; +0.01%)</title><rect x="783.4" y="325" width="1.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="786.43" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (6 samples, 0.01%; -0.01%)</title><rect x="494.4" y="309" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="497.44" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (12 samples, 0.02%; +0.01%)</title><rect x="262.9" y="325" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="265.90" y="335.5" ></text>
</g>
<g >
<title>auth::get_permissions (1,147 samples, 2.37%; -0.01%)</title><rect x="789.0" y="309" width="28.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="792.02" y="319.5" >a..</text>
</g>
<g >
<title>row::row (19 samples, 0.04%; +0.00%)</title><rect x="252.9" y="197" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="255.87" y="207.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (39 samples, 0.08%; +0.06%)</title><rect x="893.8" y="341" width="0.9" height="15.0" fill="rgb(255,141,141)" rx="2" ry="2" />
<text  x="896.76" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (14 samples, 0.03%; +0.01%)</title><rect x="544.9" y="405" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="547.91" y="415.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (7 samples, 0.01%; +0.01%)</title><rect x="620.1" y="405" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="623.15" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (12 samples, 0.02%; +0.01%)</title><rect x="1108.4" y="357" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1111.37" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (28 samples, 0.06%; +0.02%)</title><rect x="509.4" y="181" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="512.40" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (448 samples, 0.93%; 0.00%)</title><rect x="397.9" y="261" width="11.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="400.92" y="271.5" ></text>
</g>
<g >
<title>tombstone::apply (6 samples, 0.01%; -0.01%)</title><rect x="391.6" y="197" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="394.63" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (19 samples, 0.04%; +0.00%)</title><rect x="914.9" y="357" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="917.90" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (81 samples, 0.17%; +0.01%)</title><rect x="624.8" y="421" width="2.0" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="627.81" y="431.5" ></text>
</g>
<g >
<title>query_result_builder::consume (7 samples, 0.01%; 0.00%)</title><rect x="689.8" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.77" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (10 samples, 0.02%; +0.01%)</title><rect x="1046.3" y="277" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1049.29" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="223.3" y="197" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="226.34" y="207.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (6 samples, 0.01%; +0.01%)</title><rect x="423.4" y="373" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="426.43" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (7 samples, 0.01%; +0.01%)</title><rect x="1004.5" y="293" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1007.46" y="303.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (36 samples, 0.07%; -0.00%)</title><rect x="133.2" y="277" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="136.22" y="287.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (182 samples, 0.38%; +0.00%)</title><rect x="358.8" y="165" width="4.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="361.76" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (152 samples, 0.31%; 0.00%)</title><rect x="570.7" y="293" width="3.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="573.65" y="303.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (5 samples, 0.01%; -0.00%)</title><rect x="22.9" y="421" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="25.93" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (10 samples, 0.02%; 0.00%)</title><rect x="19.1" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.10" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (7 samples, 0.01%; -0.02%)</title><rect x="1036.8" y="213" width="0.1" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="1039.77" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (80 samples, 0.17%; +0.01%)</title><rect x="1169.1" y="485" width="2.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1172.13" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (14 samples, 0.03%; +0.00%)</title><rect x="556.1" y="405" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="559.11" y="415.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (27 samples, 0.06%; +0.01%)</title><rect x="361.0" y="149" width="0.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="363.98" y="159.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (9 samples, 0.02%; +0.00%)</title><rect x="372.7" y="197" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="375.71" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (21 samples, 0.04%; +0.02%)</title><rect x="657.7" y="437" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="660.68" y="447.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_1502abaca14bdfb677c669eaa6149754eb6e7075] (5 samples, 0.01%; +0.01%)</title><rect x="885.7" y="421" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="888.71" y="431.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (26 samples, 0.05%; +0.00%)</title><rect x="1027.3" y="181" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1030.32" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.00%)</title><rect x="674.5" y="453" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="677.49" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (49 samples, 0.10%; -0.00%)</title><rect x="926.0" y="341" width="1.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="929.05" y="351.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (7 samples, 0.01%; +0.01%)</title><rect x="77.7" y="421" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="80.75" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (9 samples, 0.02%; +0.00%)</title><rect x="954.4" y="405" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="957.36" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (49 samples, 0.10%; -0.01%)</title><rect x="672.9" y="485" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="675.88" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="665.0" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="668.05" y="495.5" ></text>
</g>
<g >
<title>__dynamic_cast (45 samples, 0.09%; +0.01%)</title><rect x="885.8" y="421" width="1.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="888.83" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (5 samples, 0.01%; -0.01%)</title><rect x="863.5" y="469" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="866.45" y="479.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (48 samples, 0.10%; +0.07%)</title><rect x="101.4" y="421" width="1.2" height="15.0" fill="rgb(255,132,132)" rx="2" ry="2" />
<text  x="104.44" y="431.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%; -0.01%)</title><rect x="99.9" y="437" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="102.86" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (318 samples, 0.66%; -0.01%)</title><rect x="189.4" y="85" width="7.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="192.42" y="95.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="1034.1" y="165" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1037.11" y="175.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (11 samples, 0.02%; -0.02%)</title><rect x="574.4" y="277" width="0.3" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="577.44" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (67 samples, 0.14%; -0.02%)</title><rect x="577.1" y="373" width="1.7" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="580.15" y="383.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (6 samples, 0.01%; +0.01%)</title><rect x="1099.4" y="325" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1102.39" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (13 samples, 0.03%; +0.00%)</title><rect x="670.2" y="469" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="673.20" y="479.5" ></text>
</g>
<g >
<title>query::querier_base::close (17 samples, 0.04%; 0.00%)</title><rect x="1176.3" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.29" y="495.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (42 samples, 0.09%; -0.01%)</title><rect x="493.4" y="309" width="1.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="496.42" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (146 samples, 0.30%; +0.02%)</title><rect x="592.0" y="421" width="3.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="594.98" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (19 samples, 0.04%; +0.01%)</title><rect x="571.9" y="277" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="574.92" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (27 samples, 0.06%; +0.01%)</title><rect x="1047.8" y="261" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1050.85" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (11 samples, 0.02%; +0.00%)</title><rect x="989.5" y="341" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="992.50" y="351.5" ></text>
</g>
<g >
<title>operator new (85 samples, 0.18%; -0.00%)</title><rect x="990.6" y="325" width="2.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="993.62" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (16 samples, 0.03%; -0.00%)</title><rect x="941.9" y="389" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="944.93" y="399.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (11 samples, 0.02%; +0.01%)</title><rect x="850.5" y="421" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="853.54" y="431.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (6 samples, 0.01%; -0.01%)</title><rect x="904.6" y="261" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="907.57" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_value (5 samples, 0.01%; +0.01%)</title><rect x="32.2" y="469" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="35.23" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (22 samples, 0.05%; -0.02%)</title><rect x="607.6" y="437" width="0.5" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="610.60" y="447.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (7 samples, 0.01%; +0.01%)</title><rect x="630.3" y="421" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="633.30" y="431.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (57 samples, 0.12%; +0.02%)</title><rect x="601.1" y="389" width="1.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="604.06" y="399.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (9 samples, 0.02%; -0.05%)</title><rect x="1054.8" y="293" width="0.2" height="15.0" fill="rgb(155,155,255)" rx="2" ry="2" />
<text  x="1057.75" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (29 samples, 0.06%; +0.04%)</title><rect x="117.9" y="373" width="0.7" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="120.94" y="383.5" ></text>
</g>
<g >
<title>local_schema_registry (13 samples, 0.03%; +0.01%)</title><rect x="975.3" y="357" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="978.34" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (10 samples, 0.02%; -0.00%)</title><rect x="843.1" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="846.05" y="447.5" ></text>
</g>
<g >
<title>query::result::result (34 samples, 0.07%; +0.00%)</title><rect x="596.0" y="421" width="0.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="599.01" y="431.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (23 samples, 0.05%; +0.00%)</title><rect x="689.7" y="373" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="692.67" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (35 samples, 0.07%; +0.05%)</title><rect x="33.7" y="485" width="0.9" height="15.0" fill="rgb(255,155,155)" rx="2" ry="2" />
<text  x="36.74" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (46 samples, 0.10%; 0.00%)</title><rect x="18.3" y="309" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.27" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (10 samples, 0.02%; 0.00%)</title><rect x="18.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.98" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (40 samples, 0.08%; -0.02%)</title><rect x="387.6" y="165" width="1.0" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="390.65" y="175.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (17 samples, 0.04%; -0.01%)</title><rect x="361.6" y="149" width="0.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="364.64" y="159.5" ></text>
</g>
<g >
<title>database::find_column_family (56 samples, 0.12%; 0.00%)</title><rect x="828.0" y="341" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="830.99" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (5,858 samples, 12.12%; -0.00%)</title><rect x="123.0" y="341" width="143.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="126.04" y="351.5" >mutation_fragment_..</text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (14 samples, 0.03%; -0.00%)</title><rect x="1032.1" y="133" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1035.06" y="143.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (12 samples, 0.02%; -0.02%)</title><rect x="900.7" y="261" width="0.3" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="903.69" y="271.5" ></text>
</g>
<g >
<title>database::has_keyspace (158 samples, 0.33%; +0.01%)</title><rect x="845.0" y="421" width="3.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="848.03" y="431.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (40 samples, 0.08%; -0.00%)</title><rect x="728.4" y="405" width="0.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="731.35" y="415.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (29 samples, 0.06%; +0.02%)</title><rect x="1064.8" y="277" width="0.7" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1067.83" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; -0.01%)</title><rect x="1035.5" y="197" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1038.52" y="207.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (5 samples, 0.01%; -0.00%)</title><rect x="1143.2" y="117" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1146.24" y="127.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (1,125 samples, 2.33%; -0.04%)</title><rect x="892.4" y="389" width="27.5" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="895.42" y="399.5" >_..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.00%)</title><rect x="406.6" y="181" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="409.61" y="191.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (52 samples, 0.11%; +0.00%)</title><rect x="1134.9" y="389" width="1.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1137.90" y="399.5" ></text>
</g>
<g >
<title>operator delete (32 samples, 0.07%; -0.01%)</title><rect x="448.3" y="277" width="0.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="451.34" y="287.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (6 samples, 0.01%; +0.01%)</title><rect x="368.2" y="197" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="371.15" y="207.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (8 samples, 0.02%; -0.01%)</title><rect x="1080.2" y="309" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1083.21" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (20 samples, 0.04%; 0.00%)</title><rect x="1108.7" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1111.74" y="415.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (14 samples, 0.03%; -0.01%)</title><rect x="900.6" y="277" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="903.64" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (66 samples, 0.14%; -0.01%)</title><rect x="749.7" y="309" width="1.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="752.66" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (32 samples, 0.07%; +0.02%)</title><rect x="203.9" y="117" width="0.7" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="206.86" y="127.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (27 samples, 0.06%; 0.00%)</title><rect x="689.6" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.65" y="447.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (5 samples, 0.01%; 0.00%)</title><rect x="1176.9" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.87" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (8 samples, 0.02%; -0.01%)</title><rect x="451.7" y="293" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="454.69" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (8 samples, 0.02%; +0.00%)</title><rect x="670.8" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="673.81" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="322.9" y="165" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="325.86" y="175.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (69 samples, 0.14%; -0.01%)</title><rect x="654.4" y="469" width="1.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="657.36" y="479.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (11 samples, 0.02%; -0.00%)</title><rect x="835.0" y="293" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="838.05" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (8 samples, 0.02%; +0.00%)</title><rect x="792.8" y="229" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="795.83" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (85 samples, 0.18%; -0.01%)</title><rect x="743.9" y="373" width="2.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="746.92" y="383.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (8 samples, 0.02%; +0.01%)</title><rect x="1137.1" y="421" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1140.12" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (56 samples, 0.12%; +0.01%)</title><rect x="246.9" y="197" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="249.94" y="207.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (7 samples, 0.01%; +0.01%)</title><rect x="537.5" y="293" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="540.49" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (145 samples, 0.30%; +0.01%)</title><rect x="414.4" y="309" width="3.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="417.42" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (20 samples, 0.04%; +0.02%)</title><rect x="897.7" y="309" width="0.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="900.69" y="319.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (86 samples, 0.18%; +0.06%)</title><rect x="904.8" y="261" width="2.1" height="15.0" fill="rgb(255,141,141)" rx="2" ry="2" />
<text  x="907.79" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.01%; 0.00%)</title><rect x="1136.6" y="421" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1139.58" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (37 samples, 0.08%; -0.00%)</title><rect x="104.1" y="373" width="0.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="107.10" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (19 samples, 0.04%; -0.00%)</title><rect x="800.3" y="165" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="803.32" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (36 samples, 0.07%; +0.06%)</title><rect x="1043.7" y="261" width="0.9" height="15.0" fill="rgb(255,146,146)" rx="2" ry="2" />
<text  x="1046.67" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (5,457 samples, 11.29%; -0.07%)</title><rect x="971.6" y="373" width="133.1" height="15.0" fill="rgb(132,132,255)" rx="2" ry="2" />
<text  x="974.56" y="383.5" >service::storage..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (23 samples, 0.05%; +0.01%)</title><rect x="918.3" y="309" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="921.29" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (6 samples, 0.01%; +0.01%)</title><rect x="774.8" y="357" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="777.82" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (13 samples, 0.03%; -0.00%)</title><rect x="487.8" y="181" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="490.83" y="191.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;current_deleter&lt;range_tombstone_entry&gt; (5 samples, 0.01%; +0.00%)</title><rect x="574.6" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="577.58" y="271.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (15 samples, 0.03%; +0.01%)</title><rect x="84.1" y="453" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="87.14" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="1148.9" y="469" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1151.88" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (149 samples, 0.31%; +0.01%)</title><rect x="217.8" y="165" width="3.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="220.75" y="175.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (12 samples, 0.02%; +0.01%)</title><rect x="316.7" y="165" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="319.73" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (10 samples, 0.02%; +0.00%)</title><rect x="594.4" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="597.40" y="383.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (405 samples, 0.84%; -0.01%)</title><rect x="545.4" y="421" width="9.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="548.42" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.06%; -0.01%)</title><rect x="507.4" y="181" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="510.40" y="191.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (201 samples, 0.42%; +0.01%)</title><rect x="856.6" y="437" width="4.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="859.59" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (34 samples, 0.07%; +0.00%)</title><rect x="945.9" y="389" width="0.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="948.91" y="399.5" ></text>
</g>
<g >
<title>operator new (23 samples, 0.05%; 0.00%)</title><rect x="946.2" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="949.16" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.01%; +0.01%)</title><rect x="1059.1" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1062.15" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (5 samples, 0.01%; +0.00%)</title><rect x="231.8" y="229" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="234.78" y="239.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (82 samples, 0.17%; -0.02%)</title><rect x="267.7" y="325" width="2.0" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="270.66" y="335.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (227 samples, 0.47%; +0.01%)</title><rect x="729.7" y="421" width="5.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="732.72" y="431.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.04%; 0.00%)</title><rect x="629.3" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="632.30" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (226 samples, 0.47%; +0.04%)</title><rect x="399.9" y="213" width="5.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="402.85" y="223.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (82 samples, 0.17%; +0.01%)</title><rect x="141.3" y="245" width="2.0" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="144.34" y="255.5" ></text>
</g>
<g >
<title>operator new (77 samples, 0.16%; +0.00%)</title><rect x="975.7" y="357" width="1.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="978.71" y="367.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (6 samples, 0.01%; 0.00%)</title><rect x="871.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.92" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (39 samples, 0.08%; +0.00%)</title><rect x="321.9" y="165" width="1.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="324.91" y="175.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (60 samples, 0.12%; -0.09%)</title><rect x="197.3" y="117" width="1.4" height="15.0" fill="rgb(107,107,255)" rx="2" ry="2" />
<text  x="200.28" y="127.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (25 samples, 0.05%; +0.01%)</title><rect x="1097.0" y="277" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1099.97" y="287.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (5 samples, 0.01%; +0.00%)</title><rect x="1141.7" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1144.73" y="479.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (23 samples, 0.05%; +0.01%)</title><rect x="524.3" y="341" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="527.34" y="351.5" ></text>
</g>
<g >
<title>query::result::builder::build (57 samples, 0.12%; -0.00%)</title><rect x="595.5" y="437" width="1.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="598.55" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (38 samples, 0.08%; -0.01%)</title><rect x="784.3" y="293" width="0.9" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="787.29" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (8 samples, 0.02%; +0.01%)</title><rect x="295.8" y="293" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="298.82" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (101 samples, 0.21%; +0.02%)</title><rect x="839.3" y="421" width="2.4" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="842.27" y="431.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous&gt; (8 samples, 0.02%; +0.00%)</title><rect x="815.3" y="293" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="818.33" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (640 samples, 1.32%; -0.02%)</title><rect x="1024.5" y="245" width="15.6" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="1027.49" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (13 samples, 0.03%; -0.00%)</title><rect x="934.3" y="389" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="937.32" y="399.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (7 samples, 0.01%; +0.00%)</title><rect x="517.0" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="520.01" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (51 samples, 0.11%; +0.05%)</title><rect x="140.1" y="245" width="1.2" height="15.0" fill="rgb(255,152,152)" rx="2" ry="2" />
<text  x="143.07" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (10 samples, 0.02%; +0.01%)</title><rect x="260.5" y="277" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="263.53" y="287.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (6 samples, 0.01%; 0.00%)</title><rect x="1141.9" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.95" y="255.5" ></text>
</g>
<g >
<title>database::find_column_family (44 samples, 0.09%; -0.02%)</title><rect x="1021.2" y="245" width="1.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1024.22" y="255.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (5 samples, 0.01%; -0.01%)</title><rect x="604.0" y="421" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="607.01" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (11 samples, 0.02%; +0.00%)</title><rect x="543.1" y="389" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="546.05" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (5 samples, 0.01%; 0.00%)</title><rect x="22.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.93" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (5 samples, 0.01%; -0.00%)</title><rect x="814.3" y="261" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="817.30" y="271.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (17 samples, 0.04%; +0.00%)</title><rect x="219.1" y="133" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="222.12" y="143.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (8 samples, 0.02%; +0.01%)</title><rect x="576.5" y="325" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="579.54" y="335.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (22 samples, 0.05%; -0.00%)</title><rect x="173.8" y="133" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="176.82" y="143.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10 samples, 0.02%; 0.00%)</title><rect x="824.6" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="827.55" y="271.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (5 samples, 0.01%; +0.01%)</title><rect x="651.1" y="469" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="654.07" y="479.5" ></text>
</g>
<g >
<title>__tls_init (6 samples, 0.01%; -0.01%)</title><rect x="462.3" y="325" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="465.25" y="335.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (474 samples, 0.98%; +0.01%)</title><rect x="66.3" y="437" width="11.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="69.35" y="447.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (50 samples, 0.10%; -0.01%)</title><rect x="482.7" y="213" width="1.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="485.73" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (9 samples, 0.02%; +0.02%)</title><rect x="726.4" y="453" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="729.40" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (32 samples, 0.07%; -0.01%)</title><rect x="667.8" y="437" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="670.81" y="447.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (31 samples, 0.06%; -0.02%)</title><rect x="797.3" y="149" width="0.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="800.29" y="159.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (41 samples, 0.08%; -0.02%)</title><rect x="890.9" y="405" width="1.0" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="893.91" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (6 samples, 0.01%; 0.00%)</title><rect x="422.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="425.91" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (54 samples, 0.11%; -0.01%)</title><rect x="830.8" y="309" width="1.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="833.85" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (9 samples, 0.02%; -0.00%)</title><rect x="952.6" y="357" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="955.65" y="367.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,424 samples, 9.15%; +0.01%)</title><rect x="146.6" y="293" width="108.0" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="149.61" y="303.5" >seastar::do_u..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (45 samples, 0.09%; +0.00%)</title><rect x="1142.6" y="421" width="1.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1145.61" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (133 samples, 0.28%; +0.00%)</title><rect x="985.9" y="325" width="3.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="988.89" y="335.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (17 samples, 0.04%; -0.01%)</title><rect x="577.5" y="357" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="580.49" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (36 samples, 0.07%; +0.01%)</title><rect x="585.1" y="357" width="0.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="588.05" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (8 samples, 0.02%; +0.00%)</title><rect x="747.4" y="357" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="750.44" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (39 samples, 0.08%; -0.01%)</title><rect x="549.8" y="341" width="1.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="552.84" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (15 samples, 0.03%; 0.00%)</title><rect x="1176.3" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.29" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (5 samples, 0.01%; 0.00%)</title><rect x="20.1" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.10" y="303.5" ></text>
</g>
<g >
<title>dht::shard_of (24 samples, 0.05%; -0.01%)</title><rect x="1008.5" y="277" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1011.53" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (28 samples, 0.06%; 0.00%)</title><rect x="871.6" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.58" y="479.5" ></text>
</g>
<g >
<title>table::set_hit_rate (84 samples, 0.17%; +0.00%)</title><rect x="712.4" y="453" width="2.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="715.39" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (269 samples, 0.56%; 0.00%)</title><rect x="990.3" y="341" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="993.33" y="351.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (43 samples, 0.09%; -0.01%)</title><rect x="843.4" y="437" width="1.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="846.44" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (12 samples, 0.02%; -0.01%)</title><rect x="324.2" y="197" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="327.18" y="207.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (78 samples, 0.16%; -0.01%)</title><rect x="669.9" y="485" width="1.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="672.93" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (11 samples, 0.02%; -0.01%)</title><rect x="616.8" y="437" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="619.78" y="447.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (36 samples, 0.07%; -0.02%)</title><rect x="1074.3" y="293" width="0.9" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="1077.30" y="303.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (328 samples, 0.68%; 0.00%)</title><rect x="1080.8" y="277" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1083.82" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (39 samples, 0.08%; -0.00%)</title><rect x="728.4" y="389" width="0.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="731.38" y="399.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (15 samples, 0.03%; +0.02%)</title><rect x="776.9" y="357" width="0.4" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="779.92" y="367.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.01%; 0.00%)</title><rect x="20.1" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.05" y="319.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (5 samples, 0.01%; +0.01%)</title><rect x="778.7" y="373" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="781.67" y="383.5" ></text>
</g>
<g >
<title>sstring_hash::operator (31 samples, 0.06%; 0.00%)</title><rect x="1064.8" y="293" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1067.83" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (5 samples, 0.01%; -0.01%)</title><rect x="1115.5" y="357" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1118.50" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (9 samples, 0.02%; +0.01%)</title><rect x="673.9" y="469" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="676.86" y="479.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (95 samples, 0.20%; -0.01%)</title><rect x="593.2" y="405" width="2.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="596.23" y="415.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (9 samples, 0.02%; +0.01%)</title><rect x="220.4" y="117" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="223.36" y="127.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (9 samples, 0.02%; +0.01%)</title><rect x="323.4" y="213" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="326.37" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (120 samples, 0.25%; +0.00%)</title><rect x="296.1" y="293" width="2.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="299.09" y="303.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (10 samples, 0.02%; +0.00%)</title><rect x="623.3" y="421" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="626.34" y="431.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (43 samples, 0.09%; 0.00%)</title><rect x="1142.7" y="405" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.66" y="415.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (6 samples, 0.01%; -0.01%)</title><rect x="835.7" y="277" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="838.66" y="287.5" ></text>
</g>
<g >
<title>free (16 samples, 0.03%; -0.00%)</title><rect x="38.2" y="421" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="41.19" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (28 samples, 0.06%; -0.01%)</title><rect x="968.9" y="341" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="971.95" y="351.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (16 samples, 0.03%; -0.00%)</title><rect x="846.9" y="357" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="849.91" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_per_partition_limit (7 samples, 0.01%; -0.00%)</title><rect x="1121.5" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1124.50" y="415.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.06%; +0.00%)</title><rect x="507.4" y="197" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="510.35" y="207.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (18 samples, 0.04%; +0.00%)</title><rect x="1178.1" y="469" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1181.14" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::future (7 samples, 0.01%; +0.01%)</title><rect x="982.1" y="357" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="985.05" y="367.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (9 samples, 0.02%; +0.00%)</title><rect x="1142.2" y="245" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1145.17" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.00%)</title><rect x="449.0" y="261" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="451.95" y="271.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (220 samples, 0.45%; +0.01%)</title><rect x="277.2" y="309" width="5.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="280.17" y="319.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (139 samples, 0.29%; -0.01%)</title><rect x="241.8" y="197" width="3.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="244.76" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (20 samples, 0.04%; 0.00%)</title><rect x="641.3" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="644.25" y="479.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (57 samples, 0.12%; +0.01%)</title><rect x="293.7" y="309" width="1.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="296.74" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (51 samples, 0.11%; +0.00%)</title><rect x="959.0" y="389" width="1.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="961.97" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (14 samples, 0.03%; -0.00%)</title><rect x="611.0" y="437" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="613.97" y="447.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (11 samples, 0.02%; -0.07%)</title><rect x="890.2" y="405" width="0.3" height="15.0" fill="rgb(132,132,255)" rx="2" ry="2" />
<text  x="893.22" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (20 samples, 0.04%; +0.02%)</title><rect x="78.6" y="453" width="0.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="81.60" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (14 samples, 0.03%; +0.01%)</title><rect x="816.7" y="277" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="819.67" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (15 samples, 0.03%; +0.01%)</title><rect x="1116.7" y="373" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1119.69" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (5 samples, 0.01%; +0.01%)</title><rect x="138.3" y="261" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="141.29" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (9 samples, 0.02%; -0.00%)</title><rect x="18.0" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="21.00" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.00%)</title><rect x="916.4" y="341" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="919.41" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::take (5 samples, 0.01%; 0.00%)</title><rect x="1150.9" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1153.88" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (7 samples, 0.01%; +0.01%)</title><rect x="611.8" y="437" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="614.75" y="447.5" ></text>
</g>
<g >
<title>operator new (36 samples, 0.07%; -0.00%)</title><rect x="493.5" y="293" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="496.49" y="303.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (171 samples, 0.35%; -0.02%)</title><rect x="453.2" y="293" width="4.2" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="456.20" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (75 samples, 0.16%; +0.01%)</title><rect x="975.8" y="341" width="1.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="978.76" y="351.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (44 samples, 0.09%; +0.01%)</title><rect x="1096.5" y="309" width="1.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1099.51" y="319.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (27 samples, 0.06%; +0.00%)</title><rect x="594.0" y="389" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="596.98" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (11 samples, 0.02%; -0.03%)</title><rect x="495.0" y="309" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="497.95" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (30 samples, 0.06%; +0.00%)</title><rect x="853.9" y="357" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="856.86" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (30 samples, 0.06%; +0.04%)</title><rect x="1115.6" y="357" width="0.7" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="1118.62" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (5 samples, 0.01%; -0.00%)</title><rect x="717.9" y="501" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="720.93" y="511.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (14 samples, 0.03%; -0.01%)</title><rect x="823.9" y="293" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="826.89" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; -0.00%)</title><rect x="669.5" y="469" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="672.49" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (5 samples, 0.01%; -0.00%)</title><rect x="262.8" y="309" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="265.75" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (17 samples, 0.04%; +0.01%)</title><rect x="1124.2" y="405" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1127.18" y="415.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (11 samples, 0.02%; +0.02%)</title><rect x="889.9" y="405" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="892.88" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (46 samples, 0.10%; -0.02%)</title><rect x="1166.8" y="469" width="1.1" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="1169.79" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (61 samples, 0.13%; -0.00%)</title><rect x="18.0" y="325" width="1.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="20.96" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="692.4" y="485" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="695.41" y="495.5" ></text>
</g>
<g >
<title>operator new (50 samples, 0.10%; +0.00%)</title><rect x="1161.0" y="437" width="1.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1163.96" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (60 samples, 0.12%; +0.01%)</title><rect x="815.5" y="293" width="1.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="818.55" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (366 samples, 0.76%; +0.00%)</title><rect x="441.8" y="309" width="8.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="444.80" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (34 samples, 0.07%; +0.01%)</title><rect x="615.9" y="437" width="0.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="618.95" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (124 samples, 0.26%; -0.02%)</title><rect x="845.7" y="389" width="3.0" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="848.66" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (6 samples, 0.01%; +0.01%)</title><rect x="717.0" y="501" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="720.03" y="511.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (6 samples, 0.01%; -0.00%)</title><rect x="19.2" y="245" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="22.18" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (92 samples, 0.19%; -0.02%)</title><rect x="858.7" y="373" width="2.3" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="861.72" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (23 samples, 0.05%; +0.02%)</title><rect x="811.6" y="213" width="0.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="814.64" y="223.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (9 samples, 0.02%; -0.00%)</title><rect x="487.3" y="181" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="490.29" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (33 samples, 0.07%; +0.04%)</title><rect x="425.2" y="405" width="0.8" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="428.23" y="415.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (22 samples, 0.05%; +0.02%)</title><rect x="337.8" y="181" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="340.84" y="191.5" ></text>
</g>
<g >
<title>__tls_init (12 samples, 0.02%; +0.01%)</title><rect x="531.5" y="293" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="534.49" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (170 samples, 0.35%; +0.01%)</title><rect x="1171.3" y="469" width="4.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1174.31" y="479.5" ></text>
</g>
<g >
<title>schema_registry::get (17 samples, 0.04%; +0.03%)</title><rect x="969.6" y="373" width="0.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="972.63" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (56 samples, 0.12%; +0.01%)</title><rect x="859.4" y="341" width="1.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="862.43" y="351.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (6 samples, 0.01%; +0.01%)</title><rect x="687.9" y="437" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="690.87" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (16 samples, 0.03%; -0.00%)</title><rect x="1132.1" y="389" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1135.09" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (311 samples, 0.64%; -0.00%)</title><rect x="35.5" y="485" width="7.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="38.45" y="495.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (28 samples, 0.06%; 0.00%)</title><rect x="1141.9" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.90" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (39 samples, 0.08%; +0.00%)</title><rect x="18.4" y="277" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="21.44" y="287.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (7 samples, 0.01%; 0.00%)</title><rect x="17.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.54" y="527.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (81 samples, 0.17%; -0.00%)</title><rect x="792.2" y="261" width="1.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="795.17" y="271.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (6 samples, 0.01%; -0.01%)</title><rect x="1055.5" y="325" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1058.49" y="335.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (63 samples, 0.13%; +0.01%)</title><rect x="789.3" y="293" width="1.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="792.31" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (230 samples, 0.48%; -0.05%)</title><rect x="138.4" y="261" width="5.6" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="141.41" y="271.5" ></text>
</g>
<g >
<title>operator delete (17 samples, 0.04%; -0.01%)</title><rect x="587.2" y="389" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="590.25" y="399.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (5 samples, 0.01%; -0.00%)</title><rect x="711.3" y="421" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="714.29" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (58 samples, 0.12%; -0.00%)</title><rect x="129.4" y="293" width="1.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="132.43" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (2,518 samples, 5.21%; -0.01%)</title><rect x="888.7" y="421" width="61.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="891.73" y="431.5" >cql3::..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (204 samples, 0.42%; +0.01%)</title><rect x="224.4" y="213" width="5.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="227.41" y="223.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.02%; -0.01%)</title><rect x="658.5" y="453" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="661.51" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (2,822 samples, 5.84%; -0.02%)</title><rect x="164.0" y="245" width="68.9" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="167.01" y="255.5" >partiti..</text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (214 samples, 0.44%; +0.01%)</title><rect x="452.7" y="309" width="5.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="455.71" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (58 samples, 0.12%; +0.01%)</title><rect x="370.3" y="181" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="373.27" y="191.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (10 samples, 0.02%; +0.00%)</title><rect x="959.1" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="962.07" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (6 samples, 0.01%; +0.00%)</title><rect x="964.6" y="389" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="967.61" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (150 samples, 0.31%; -0.00%)</title><rect x="250.2" y="245" width="3.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="253.21" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,877 samples, 10.09%; -0.00%)</title><rect x="295.3" y="309" width="119.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="298.31" y="319.5" >std::__invoke_..</text>
</g>
<g >
<title>operator delete (12 samples, 0.02%; 0.00%)</title><rect x="44.9" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.92" y="495.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (13 samples, 0.03%; +0.02%)</title><rect x="750.0" y="277" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="753.00" y="287.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (7 samples, 0.01%; -0.02%)</title><rect x="228.7" y="181" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="231.71" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (80 samples, 0.17%; -0.01%)</title><rect x="38.1" y="437" width="1.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="41.06" y="447.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (8 samples, 0.02%; +0.01%)</title><rect x="751.1" y="293" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="754.07" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (37 samples, 0.08%; +0.03%)</title><rect x="500.3" y="277" width="0.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="503.30" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::future (6 samples, 0.01%; +0.00%)</title><rect x="759.1" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="762.15" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.00%)</title><rect x="37.1" y="437" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="40.14" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (9 samples, 0.02%; +0.01%)</title><rect x="717.7" y="501" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="720.71" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (63 samples, 0.13%; 0.00%)</title><rect x="18.0" y="373" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.96" y="383.5" ></text>
</g>
<g >
<title>reader_permit::consume (12 samples, 0.02%; -0.01%)</title><rect x="511.3" y="181" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="514.30" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (17 samples, 0.04%; +0.00%)</title><rect x="837.0" y="405" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="840.05" y="415.5" ></text>
</g>
<g >
<title>table::query (5 samples, 0.01%; +0.01%)</title><rect x="631.5" y="469" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="634.49" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (6 samples, 0.01%; +0.01%)</title><rect x="1146.4" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1149.44" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::take_value (5 samples, 0.01%; +0.00%)</title><rect x="741.7" y="373" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="744.73" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (162 samples, 0.34%; +0.01%)</title><rect x="675.2" y="469" width="4.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="678.22" y="479.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (12 samples, 0.02%; +0.00%)</title><rect x="676.7" y="437" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="679.66" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (61 samples, 0.13%; +0.01%)</title><rect x="744.3" y="325" width="1.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="747.26" y="335.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.04%; 0.00%)</title><rect x="213.5" y="165" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="216.53" y="175.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (74 samples, 0.15%; -0.01%)</title><rect x="744.1" y="341" width="1.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="747.12" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (5 samples, 0.01%; +0.00%)</title><rect x="516.9" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="519.89" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (12 samples, 0.02%; +0.00%)</title><rect x="37.6" y="421" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="40.65" y="431.5" ></text>
</g>
<g >
<title>operator delete (43 samples, 0.09%; +0.02%)</title><rect x="915.5" y="357" width="1.1" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="918.51" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (8 samples, 0.02%; +0.01%)</title><rect x="669.7" y="485" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="672.73" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (47 samples, 0.10%; -0.02%)</title><rect x="952.9" y="389" width="1.1" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="955.87" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (13 samples, 0.03%; -0.00%)</title><rect x="240.4" y="213" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="243.42" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (33 samples, 0.07%; +0.02%)</title><rect x="562.2" y="309" width="0.8" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="565.16" y="319.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (78 samples, 0.16%; -0.01%)</title><rect x="312.2" y="181" width="1.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="315.19" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (18 samples, 0.04%; -0.01%)</title><rect x="1172.0" y="453" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1174.97" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (151 samples, 0.31%; -0.01%)</title><rect x="409.2" y="261" width="3.7" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="412.22" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;flat_mutation_reader&gt;::allocate (10 samples, 0.02%; -0.00%)</title><rect x="436.1" y="341" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="439.14" y="351.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (18 samples, 0.04%; -0.01%)</title><rect x="747.2" y="373" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="750.19" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (9 samples, 0.02%; +0.00%)</title><rect x="206.0" y="149" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="209.01" y="159.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (13 samples, 0.03%; +0.00%)</title><rect x="910.9" y="309" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="913.89" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (6 samples, 0.01%; +0.00%)</title><rect x="1170.9" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1173.94" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (91 samples, 0.19%; -0.01%)</title><rect x="1037.9" y="229" width="2.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1040.89" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (13 samples, 0.03%; -0.01%)</title><rect x="260.2" y="277" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="263.21" y="287.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (6 samples, 0.01%; +0.01%)</title><rect x="861.0" y="405" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="863.96" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (10 samples, 0.02%; -0.00%)</title><rect x="97.5" y="437" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="100.46" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (39 samples, 0.08%; -0.04%)</title><rect x="903.1" y="261" width="1.0" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="906.13" y="271.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (8 samples, 0.02%; +0.01%)</title><rect x="766.5" y="293" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="769.54" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (21 samples, 0.04%; -0.01%)</title><rect x="73.8" y="389" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="76.77" y="399.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.06%; 0.00%)</title><rect x="1141.9" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.90" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (59 samples, 0.12%; +0.00%)</title><rect x="654.6" y="453" width="1.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="657.60" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.00%)</title><rect x="414.2" y="277" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="417.15" y="287.5" ></text>
</g>
<g >
<title>operator delete (29 samples, 0.06%; +0.01%)</title><rect x="592.4" y="405" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="595.37" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="303.1" y="261" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="306.11" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (32 samples, 0.07%; +0.02%)</title><rect x="422.0" y="357" width="0.8" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="425.03" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (192 samples, 0.40%; -0.00%)</title><rect x="18.0" y="389" width="4.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="20.96" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::~node_head (14 samples, 0.03%; +0.01%)</title><rect x="406.9" y="213" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="409.90" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (6 samples, 0.01%; 0.00%)</title><rect x="760.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="763.74" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (10 samples, 0.02%; -0.00%)</title><rect x="837.2" y="389" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="840.22" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (612 samples, 1.27%; +0.00%)</title><rect x="234.7" y="245" width="14.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="237.71" y="255.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (5 samples, 0.01%; -0.00%)</title><rect x="436.4" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="439.38" y="351.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (11,195 samples, 23.15%; +0.01%)</title><rect x="871.2" y="501" width="273.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="874.21" y="511.5" >seastar::lambda_task&lt;seastar::execut..</text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (56 samples, 0.12%; +0.01%)</title><rect x="840.2" y="389" width="1.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="843.20" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; +0.00%)</title><rect x="32.8" y="469" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="35.82" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (11 samples, 0.02%; 0.00%)</title><rect x="871.9" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.87" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (8 samples, 0.02%; -0.01%)</title><rect x="670.6" y="469" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="673.61" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (20 samples, 0.04%; -0.01%)</title><rect x="1151.8" y="469" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1154.83" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (45 samples, 0.09%; +0.02%)</title><rect x="166.9" y="229" width="1.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="169.89" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (6 samples, 0.01%; 0.00%)</title><rect x="42.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.02" y="463.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.01%; 0.00%)</title><rect x="18.0" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.00" y="239.5" ></text>
</g>
<g >
<title>operator delete (21 samples, 0.04%; -0.00%)</title><rect x="644.7" y="485" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="647.74" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (75 samples, 0.16%; +0.01%)</title><rect x="785.9" y="309" width="1.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="788.95" y="319.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (58 samples, 0.12%; -0.02%)</title><rect x="282.7" y="309" width="1.4" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="285.66" y="319.5" ></text>
</g>
<g >
<title>memtable::apply (19 samples, 0.04%; 0.00%)</title><rect x="1141.9" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.95" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (16 samples, 0.03%; +0.02%)</title><rect x="408.1" y="213" width="0.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="411.12" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (32 samples, 0.07%; +0.04%)</title><rect x="1117.1" y="373" width="0.7" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="1120.06" y="383.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (9 samples, 0.02%; +0.01%)</title><rect x="944.1" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="947.06" y="415.5" ></text>
</g>
<g >
<title>row::external_memory_usage (282 samples, 0.58%; -0.01%)</title><rect x="206.2" y="149" width="6.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="209.23" y="159.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (17 samples, 0.04%; +0.02%)</title><rect x="680.3" y="485" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="683.35" y="495.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (9 samples, 0.02%; +0.01%)</title><rect x="535.2" y="245" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="538.20" y="255.5" ></text>
</g>
<g >
<title>__tls_init (5 samples, 0.01%; +0.00%)</title><rect x="502.0" y="261" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="505.03" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (33 samples, 0.07%; -0.03%)</title><rect x="105.0" y="405" width="0.8" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="108.03" y="415.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (12 samples, 0.02%; -0.02%)</title><rect x="1053.0" y="277" width="0.3" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1056.05" y="287.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (1,083 samples, 2.24%; +0.02%)</title><rect x="892.6" y="373" width="26.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="895.59" y="383.5" >_..</text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (28 samples, 0.06%; +0.01%)</title><rect x="118.6" y="373" width="0.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="121.65" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (13 samples, 0.03%; +0.00%)</title><rect x="819.1" y="277" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="822.09" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (69 samples, 0.14%; +0.00%)</title><rect x="395.9" y="213" width="1.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="398.95" y="223.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (54 samples, 0.11%; +0.03%)</title><rect x="1165.5" y="453" width="1.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1168.47" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (13 samples, 0.03%; -0.01%)</title><rect x="958.6" y="405" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="961.58" y="415.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.02%; -0.01%)</title><rect x="163.5" y="229" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="166.48" y="239.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (22 samples, 0.05%; +0.00%)</title><rect x="34.6" y="485" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="37.60" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (104 samples, 0.22%; +0.01%)</title><rect x="415.3" y="293" width="2.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="418.30" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; +0.01%)</title><rect x="783.6" y="293" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="786.60" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (5 samples, 0.01%; -0.01%)</title><rect x="897.6" y="309" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="900.57" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (11 samples, 0.02%; -0.01%)</title><rect x="577.6" y="341" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="580.59" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1,214 samples, 2.51%; 0.00%)</title><rect x="558.4" y="421" width="29.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="561.38" y="431.5" >st..</text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::mhtraits&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, boost::intrusive::list_member_hook&lt;boost::intrusive::link_mode&lt; (5 samples, 0.01%; -0.01%)</title><rect x="729.5" y="389" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="732.52" y="399.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (15 samples, 0.03%; +0.01%)</title><rect x="13.8" y="581" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="16.78" y="591.5" ></text>
</g>
<g >
<title>tracing::add_table_name (23 samples, 0.05%; +0.02%)</title><rect x="1140.1" y="421" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1143.07" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (16 samples, 0.03%; -0.00%)</title><rect x="653.4" y="421" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="656.43" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.01%; +0.00%)</title><rect x="418.0" y="325" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="420.98" y="335.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (5 samples, 0.01%; +0.01%)</title><rect x="721.2" y="469" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="724.18" y="479.5" ></text>
</g>
<g >
<title>[[vdso]] (245 samples, 0.51%; -0.01%)</title><rect x="1180.0" y="613" width="6.0" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1182.99" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.02%; +0.01%)</title><rect x="817.0" y="309" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="820.01" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (23 samples, 0.05%; -0.01%)</title><rect x="269.7" y="325" width="0.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="272.73" y="335.5" ></text>
</g>
<g >
<title>__tls_init (5 samples, 0.01%; -0.00%)</title><rect x="528.4" y="309" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="531.36" y="319.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (25 samples, 0.05%; +0.01%)</title><rect x="315.8" y="165" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="318.76" y="175.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (11 samples, 0.02%; +0.01%)</title><rect x="835.9" y="405" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="838.95" y="415.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (13 samples, 0.03%; +0.02%)</title><rect x="240.7" y="213" width="0.4" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="243.74" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (8 samples, 0.02%; +0.01%)</title><rect x="1049.0" y="277" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1051.97" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (5 samples, 0.01%; -0.00%)</title><rect x="1106.6" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1109.61" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (16 samples, 0.03%; -0.01%)</title><rect x="819.0" y="293" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="822.01" y="303.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (27 samples, 0.06%; -0.02%)</title><rect x="291.1" y="373" width="0.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="294.13" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (8 samples, 0.02%; -0.00%)</title><rect x="1101.1" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1104.07" y="367.5" ></text>
</g>
<g >
<title>mutation_querier::consume (13 samples, 0.03%; +0.03%)</title><rect x="323.6" y="213" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="326.64" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (97 samples, 0.20%; -0.00%)</title><rect x="1101.4" y="357" width="2.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1104.44" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (20 samples, 0.04%; +0.01%)</title><rect x="1026.6" y="197" width="0.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1029.64" y="207.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (9 samples, 0.02%; +0.02%)</title><rect x="651.5" y="469" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="654.50" y="479.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (5 samples, 0.01%; -0.00%)</title><rect x="1142.5" y="309" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1145.46" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (176 samples, 0.36%; +0.02%)</title><rect x="820.5" y="357" width="4.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="823.53" y="367.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (49 samples, 0.10%; -0.01%)</title><rect x="200.1" y="101" width="1.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="203.08" y="111.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (8 samples, 0.02%; 0.00%)</title><rect x="21.4" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.37" y="271.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (98 samples, 0.20%; -0.01%)</title><rect x="833.5" y="373" width="2.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="836.53" y="383.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (699 samples, 1.45%; +0.02%)</title><rect x="559.8" y="357" width="17.1" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="562.84" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (18 samples, 0.04%; -0.01%)</title><rect x="704.4" y="469" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="707.41" y="479.5" ></text>
</g>
<g >
<title>auth::resource::resource (106 samples, 0.22%; -0.01%)</title><rect x="775.1" y="389" width="2.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="778.09" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (8 samples, 0.02%; +0.00%)</title><rect x="25.0" y="517" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="28.03" y="527.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.01%; 0.00%)</title><rect x="927.3" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="930.27" y="335.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.01%; +0.00%)</title><rect x="1126.7" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1129.67" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (140 samples, 0.29%; -0.00%)</title><rect x="1049.2" y="277" width="3.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1052.17" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (66 samples, 0.14%; +0.05%)</title><rect x="541.3" y="389" width="1.6" height="15.0" fill="rgb(255,152,152)" rx="2" ry="2" />
<text  x="544.30" y="399.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (28 samples, 0.06%; -0.03%)</title><rect x="733.2" y="293" width="0.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="736.23" y="303.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.01%; 0.00%)</title><rect x="19.7" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.69" y="367.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (6 samples, 0.01%; -0.00%)</title><rect x="462.4" y="325" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="465.40" y="335.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (9 samples, 0.02%; -0.02%)</title><rect x="1134.0" y="421" width="0.2" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="1136.99" y="431.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1,002 samples, 2.07%; -0.00%)</title><rect x="464.5" y="325" width="24.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="467.47" y="335.5" >d..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (7 samples, 0.01%; -0.00%)</title><rect x="1037.7" y="229" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1040.67" y="239.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%; +0.01%)</title><rect x="526.5" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="529.46" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.06%; 0.00%)</title><rect x="1141.9" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.90" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (23 samples, 0.05%; -0.00%)</title><rect x="939.1" y="325" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="942.08" y="335.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (20 samples, 0.04%; -0.01%)</title><rect x="466.8" y="277" width="0.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="469.84" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,879 samples, 8.02%; +0.02%)</title><rect x="303.3" y="261" width="94.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="306.26" y="271.5" >mutation_fr..</text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (9 samples, 0.02%; +0.00%)</title><rect x="591.8" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="594.76" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (199 samples, 0.41%; 0.00%)</title><rect x="17.9" y="421" width="4.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.91" y="431.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1,305 samples, 2.70%; -0.10%)</title><rect x="1014.3" y="277" width="31.9" height="15.0" fill="rgb(98,98,255)" rx="2" ry="2" />
<text  x="1017.34" y="287.5" >se..</text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (8 samples, 0.02%; +0.00%)</title><rect x="1064.6" y="293" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1067.64" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (16 samples, 0.03%; +0.00%)</title><rect x="40.8" y="437" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="43.77" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (10 samples, 0.02%; +0.01%)</title><rect x="799.5" y="197" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="802.51" y="207.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::make_temporary (104 samples, 0.22%; -0.01%)</title><rect x="911.2" y="341" width="2.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="914.21" y="351.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (167 samples, 0.35%; +0.02%)</title><rect x="533.4" y="293" width="4.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="536.41" y="303.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.07%; -0.00%)</title><rect x="912.0" y="293" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="915.02" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (12 samples, 0.02%; 0.00%)</title><rect x="776.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="779.35" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (16 samples, 0.03%; -0.00%)</title><rect x="688.5" y="485" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="691.45" y="495.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (17 samples, 0.04%; +0.00%)</title><rect x="741.4" y="389" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="744.43" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (89 samples, 0.18%; -0.01%)</title><rect x="732.3" y="325" width="2.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="735.26" y="335.5" ></text>
</g>
<g >
<title>operator new (33 samples, 0.07%; +0.00%)</title><rect x="422.0" y="373" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="425.01" y="383.5" ></text>
</g>
<g >
<title>operator new (89 samples, 0.18%; +0.00%)</title><rect x="1041.3" y="261" width="2.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1044.31" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (6 samples, 0.01%; -0.01%)</title><rect x="755.1" y="389" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="758.10" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (7 samples, 0.01%; +0.01%)</title><rect x="516.4" y="277" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="519.38" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (5 samples, 0.01%; +0.01%)</title><rect x="741.9" y="389" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="744.87" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; 0.00%)</title><rect x="841.4" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="844.42" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; +0.00%)</title><rect x="1136.7" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1139.70" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (33 samples, 0.07%; -0.01%)</title><rect x="515.6" y="277" width="0.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="518.55" y="287.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (19 samples, 0.04%; +0.01%)</title><rect x="368.9" y="213" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="371.93" y="223.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (412 samples, 0.85%; -0.01%)</title><rect x="577.1" y="389" width="10.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="580.07" y="399.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (29 samples, 0.06%; +0.03%)</title><rect x="440.5" y="325" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="443.51" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; -0.03%)</title><rect x="504.5" y="261" width="0.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="507.52" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (117 samples, 0.24%; +0.02%)</title><rect x="986.2" y="309" width="2.9" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="989.20" y="319.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (109 samples, 0.23%; -0.00%)</title><rect x="644.4" y="501" width="2.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="647.43" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (48 samples, 0.10%; +0.00%)</title><rect x="676.5" y="453" width="1.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="679.49" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (10 samples, 0.02%; -0.00%)</title><rect x="619.9" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="622.90" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (557 samples, 1.15%; +0.02%)</title><rect x="1111.7" y="421" width="13.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1114.69" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (11 samples, 0.02%; +0.01%)</title><rect x="653.0" y="421" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="656.02" y="431.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (6 samples, 0.01%; 0.00%)</title><rect x="483.8" y="197" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="486.80" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (79 samples, 0.16%; -0.01%)</title><rect x="773.0" y="373" width="2.0" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="776.04" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (5 samples, 0.01%; +0.00%)</title><rect x="129.3" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="132.31" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (119 samples, 0.25%; +0.01%)</title><rect x="638.8" y="485" width="2.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="641.84" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (8 samples, 0.02%; -0.00%)</title><rect x="1115.3" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1118.30" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; +0.01%)</title><rect x="774.7" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="777.67" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (93 samples, 0.19%; -0.02%)</title><rect x="680.8" y="485" width="2.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="683.76" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (8 samples, 0.02%; -0.02%)</title><rect x="1127.9" y="421" width="0.2" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="1130.94" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (278 samples, 0.57%; -0.00%)</title><rect x="17.3" y="581" width="6.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="20.30" y="591.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (20 samples, 0.04%; +0.01%)</title><rect x="1098.6" y="309" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1101.63" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (18 samples, 0.04%; -0.04%)</title><rect x="1172.4" y="453" width="0.4" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="1175.40" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (14 samples, 0.03%; 0.00%)</title><rect x="709.4" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="712.39" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; 0.00%)</title><rect x="1048.4" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1051.38" y="239.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (9 samples, 0.02%; +0.00%)</title><rect x="1155.8" y="421" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1158.83" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (13 samples, 0.03%; +0.02%)</title><rect x="1099.9" y="341" width="0.3" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="1102.88" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (42 samples, 0.09%; 0.00%)</title><rect x="1142.7" y="341" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.66" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (34 samples, 0.07%; +0.01%)</title><rect x="875.2" y="469" width="0.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="878.19" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (8 samples, 0.02%; +0.01%)</title><rect x="1141.4" y="437" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1144.39" y="447.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (12 samples, 0.02%; +0.01%)</title><rect x="808.1" y="117" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="811.06" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (103 samples, 0.21%; +0.00%)</title><rect x="666.1" y="485" width="2.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="669.15" y="495.5" ></text>
</g>
<g >
<title>schema::column_at (10 samples, 0.02%; -0.01%)</title><rect x="212.6" y="117" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="215.58" y="127.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (89 samples, 0.18%; +0.03%)</title><rect x="551.1" y="325" width="2.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="554.06" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (145 samples, 0.30%; +0.02%)</title><rect x="193.5" y="37" width="3.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="196.52" y="47.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (9 samples, 0.02%; -0.01%)</title><rect x="523.7" y="325" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="526.65" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (8 samples, 0.02%; -0.00%)</title><rect x="995.5" y="245" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="998.53" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (11 samples, 0.02%; +0.01%)</title><rect x="574.9" y="293" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="577.85" y="303.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (28 samples, 0.06%; +0.01%)</title><rect x="237.8" y="197" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="240.79" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (47 samples, 0.10%; -0.03%)</title><rect x="759.5" y="389" width="1.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="762.52" y="399.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (16 samples, 0.03%; +0.01%)</title><rect x="732.8" y="293" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="735.84" y="303.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (23 samples, 0.05%; +0.01%)</title><rect x="751.5" y="309" width="0.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="754.51" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (23 samples, 0.05%; -0.01%)</title><rect x="498.2" y="277" width="0.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="501.22" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (86 samples, 0.18%; -0.03%)</title><rect x="807.5" y="133" width="2.1" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="810.49" y="143.5" ></text>
</g>
<g >
<title>mutation_querier::consume (5 samples, 0.01%; -0.00%)</title><rect x="689.8" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="692.79" y="287.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%; -0.03%)</title><rect x="431.3" y="357" width="0.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="434.28" y="367.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (210 samples, 0.43%; +0.03%)</title><rect x="241.1" y="213" width="5.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="244.06" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (9 samples, 0.02%; -0.01%)</title><rect x="513.0" y="245" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="515.96" y="255.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (48 samples, 0.10%; -0.01%)</title><rect x="901.1" y="277" width="1.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="904.08" y="287.5" ></text>
</g>
<g >
<title>dht::tri_compare (99 samples, 0.20%; +0.01%)</title><rect x="478.5" y="261" width="2.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="481.48" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (10 samples, 0.02%; -0.00%)</title><rect x="1052.6" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1055.58" y="287.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (14 samples, 0.03%; -0.02%)</title><rect x="701.7" y="469" width="0.4" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="704.73" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (63 samples, 0.13%; +0.01%)</title><rect x="1070.7" y="309" width="1.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1073.74" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (170 samples, 0.35%; -0.00%)</title><rect x="992.7" y="325" width="4.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="995.72" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (174 samples, 0.36%; -0.01%)</title><rect x="1171.2" y="485" width="4.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1174.21" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (16 samples, 0.03%; +0.01%)</title><rect x="539.3" y="341" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="542.30" y="351.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (7 samples, 0.01%; +0.01%)</title><rect x="488.3" y="213" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="491.32" y="223.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (37 samples, 0.08%; -0.01%)</title><rect x="245.3" y="197" width="0.9" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="248.28" y="207.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (376 samples, 0.78%; +0.01%)</title><rect x="399.5" y="229" width="9.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="402.53" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (133 samples, 0.28%; -0.00%)</title><rect x="683.2" y="485" width="3.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="686.20" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (11 samples, 0.02%; +0.01%)</title><rect x="145.6" y="277" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="148.56" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (7 samples, 0.01%; -0.00%)</title><rect x="944.6" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="947.59" y="415.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (9 samples, 0.02%; +0.00%)</title><rect x="766.3" y="293" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="769.32" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (13 samples, 0.03%; +0.01%)</title><rect x="84.7" y="453" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="87.75" y="463.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (282 samples, 0.58%; +0.01%)</title><rect x="856.2" y="453" width="6.9" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="859.20" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (69 samples, 0.14%; -0.02%)</title><rect x="1000.6" y="245" width="1.7" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="1003.63" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (12 samples, 0.02%; -0.01%)</title><rect x="444.5" y="261" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="447.46" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (18 samples, 0.04%; +0.03%)</title><rect x="415.7" y="277" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="418.71" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (6 samples, 0.01%; 0.00%)</title><rect x="145.8" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.83" y="287.5" ></text>
</g>
<g >
<title>operator delete (42 samples, 0.09%; 0.00%)</title><rect x="1125.6" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.65" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (80 samples, 0.17%; 0.00%)</title><rect x="238.5" y="197" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="241.47" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (11 samples, 0.02%; +0.02%)</title><rect x="557.0" y="421" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="560.04" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (12 samples, 0.02%; +0.01%)</title><rect x="909.6" y="325" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="912.62" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (66 samples, 0.14%; +0.02%)</title><rect x="834.2" y="325" width="1.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="837.22" y="335.5" ></text>
</g>
<g >
<title>operator new (51 samples, 0.11%; +0.00%)</title><rect x="446.1" y="245" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="449.07" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (14 samples, 0.03%; +0.02%)</title><rect x="970.4" y="373" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="973.37" y="383.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (9 samples, 0.02%; +0.00%)</title><rect x="219.7" y="133" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="222.68" y="143.5" ></text>
</g>
<g >
<title>operator delete (19 samples, 0.04%; -0.01%)</title><rect x="674.2" y="469" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="677.20" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (16 samples, 0.03%; -0.01%)</title><rect x="754.9" y="405" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="757.85" y="415.5" ></text>
</g>
<g >
<title>operator new (145 samples, 0.30%; -0.00%)</title><rect x="1010.4" y="277" width="3.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1013.36" y="287.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (11 samples, 0.02%; 0.00%)</title><rect x="871.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.87" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (8 samples, 0.02%; -0.00%)</title><rect x="1104.5" y="357" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1107.51" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (11 samples, 0.02%; +0.01%)</title><rect x="535.4" y="245" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="538.42" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (6 samples, 0.01%; +0.01%)</title><rect x="960.1" y="373" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="963.07" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (5 samples, 0.01%; +0.00%)</title><rect x="1032.6" y="133" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1035.60" y="143.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (41 samples, 0.08%; 0.00%)</title><rect x="797.0" y="165" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="800.05" y="175.5" ></text>
</g>
<g >
<title>operator new (47 samples, 0.10%; +0.01%)</title><rect x="851.0" y="405" width="1.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="854.03" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (28 samples, 0.06%; 0.00%)</title><rect x="699.9" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.87" y="495.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (10 samples, 0.02%; +0.01%)</title><rect x="951.7" y="389" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="954.75" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (12 samples, 0.02%; -0.01%)</title><rect x="1010.0" y="261" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1013.02" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (38 samples, 0.08%; 0.00%)</title><rect x="22.8" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.79" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (8 samples, 0.02%; -0.00%)</title><rect x="568.7" y="293" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="571.68" y="303.5" ></text>
</g>
<g >
<title>operator delete (12 samples, 0.02%; -0.01%)</title><rect x="621.0" y="389" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="624.02" y="399.5" ></text>
</g>
<g >
<title>__tls_init (12 samples, 0.02%; +0.02%)</title><rect x="532.8" y="277" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="535.76" y="287.5" ></text>
</g>
<g >
<title>std::type_info::operator== (9 samples, 0.02%; 0.00%)</title><rect x="1174.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1177.77" y="415.5" ></text>
</g>
<g >
<title>operator new (73 samples, 0.15%; +0.01%)</title><rect x="895.4" y="309" width="1.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="898.42" y="319.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (2,329 samples, 4.82%; -0.01%)</title><rect x="998.4" y="325" width="56.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1001.41" y="335.5" >servic..</text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (11 samples, 0.02%; 0.00%)</title><rect x="1176.3" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.29" y="447.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (646 samples, 1.34%; -0.03%)</title><rect x="794.5" y="245" width="15.8" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="797.49" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (7 samples, 0.01%; +0.00%)</title><rect x="260.8" y="293" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="263.77" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (26 samples, 0.05%; +0.01%)</title><rect x="331.4" y="181" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="334.40" y="191.5" ></text>
</g>
<g >
<title>schema_registry::get (162 samples, 0.34%; -0.00%)</title><rect x="977.6" y="357" width="3.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="980.59" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (6,400 samples, 13.24%; -0.02%)</title><rect x="954.8" y="421" width="156.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="957.84" y="431.5" >cql3::statements::se..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.01%)</title><rect x="668.3" y="405" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="671.32" y="415.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (80 samples, 0.17%; -0.00%)</title><rect x="75.5" y="389" width="2.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="78.50" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (6 samples, 0.01%; 0.00%)</title><rect x="1142.8" y="197" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.80" y="207.5" ></text>
</g>
<g >
<title>reader_permit::consume (24 samples, 0.05%; +0.00%)</title><rect x="395.0" y="229" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="398.04" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (15 samples, 0.03%; -0.01%)</title><rect x="219.5" y="149" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="222.53" y="159.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::term&gt;::~shared_ptr (12 samples, 0.02%; -0.00%)</title><rect x="1133.7" y="421" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1136.70" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (39 samples, 0.08%; +0.02%)</title><rect x="948.0" y="357" width="1.0" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="951.01" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (5 samples, 0.01%; +0.01%)</title><rect x="887.0" y="421" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="890.00" y="431.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (20 samples, 0.04%; +0.02%)</title><rect x="74.7" y="405" width="0.5" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="77.69" y="415.5" ></text>
</g>
<g >
<title>database::find_keyspace (231 samples, 0.48%; +0.01%)</title><rect x="1061.4" y="341" width="5.7" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1064.44" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (6 samples, 0.01%; +0.01%)</title><rect x="878.2" y="453" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="881.19" y="463.5" ></text>
</g>
<g >
<title>__strlen_avx2 (89 samples, 0.18%; +0.01%)</title><rect x="1019.1" y="245" width="2.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1022.05" y="255.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (6 samples, 0.01%; -0.00%)</title><rect x="1142.8" y="229" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1145.80" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (10 samples, 0.02%; +0.00%)</title><rect x="780.3" y="357" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="783.33" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (14 samples, 0.03%; +0.03%)</title><rect x="594.9" y="389" width="0.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="597.89" y="399.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (6 samples, 0.01%; +0.00%)</title><rect x="491.8" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="494.83" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (10 samples, 0.02%; -0.00%)</title><rect x="1058.5" y="341" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1061.54" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (152 samples, 0.31%; -0.01%)</title><rect x="36.4" y="469" width="3.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="39.38" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (50 samples, 0.10%; -0.02%)</title><rect x="539.7" y="341" width="1.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="542.69" y="351.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (5 samples, 0.01%; 0.00%)</title><rect x="1099.1" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1102.12" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (6 samples, 0.01%; -0.00%)</title><rect x="338.7" y="181" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="341.67" y="191.5" ></text>
</g>
<g >
<title>operator new (49 samples, 0.10%; +0.00%)</title><rect x="759.5" y="405" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="762.49" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (10 samples, 0.02%; +0.01%)</title><rect x="324.9" y="197" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="327.88" y="207.5" ></text>
</g>
<g >
<title>operator new (34 samples, 0.07%; 0.00%)</title><rect x="864.6" y="437" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.55" y="447.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%; +0.00%)</title><rect x="40.2" y="453" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="43.24" y="463.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (42 samples, 0.09%; +0.01%)</title><rect x="755.6" y="405" width="1.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="758.59" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (7 samples, 0.01%; +0.00%)</title><rect x="1043.5" y="261" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1046.50" y="271.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.01%; -0.00%)</title><rect x="835.1" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="838.12" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (79 samples, 0.16%; +0.01%)</title><rect x="280.2" y="261" width="1.9" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="283.15" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (195 samples, 0.40%; +0.06%)</title><rect x="1090.7" y="261" width="4.8" height="15.0" fill="rgb(255,143,143)" rx="2" ry="2" />
<text  x="1093.70" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (36 samples, 0.07%; +0.02%)</title><rect x="1060.6" y="293" width="0.8" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1063.56" y="303.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (242 samples, 0.50%; -0.03%)</title><rect x="928.2" y="373" width="5.9" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="931.22" y="383.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (7 samples, 0.01%; -0.01%)</title><rect x="245.0" y="165" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="247.98" y="175.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (5 samples, 0.01%; +0.00%)</title><rect x="871.9" y="245" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="874.92" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.01%)</title><rect x="943.9" y="389" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="946.94" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.05%; -0.01%)</title><rect x="247.5" y="165" width="0.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="250.52" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (229 samples, 0.47%; -0.01%)</title><rect x="223.8" y="229" width="5.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="226.80" y="239.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (13 samples, 0.03%; +0.02%)</title><rect x="62.2" y="437" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="65.18" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; 0.00%)</title><rect x="456.9" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="459.88" y="287.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (25 samples, 0.05%; -0.00%)</title><rect x="244.5" y="181" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="247.55" y="191.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (27 samples, 0.06%; +0.00%)</title><rect x="871.6" y="437" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="874.58" y="447.5" ></text>
</g>
<g >
<title>operator delete (46 samples, 0.10%; +0.02%)</title><rect x="564.2" y="325" width="1.2" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="567.24" y="335.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (6 samples, 0.01%; 0.00%)</title><rect x="759.0" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="762.00" y="367.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (182 samples, 0.38%; 0.00%)</title><rect x="730.0" y="405" width="4.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="733.04" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (17 samples, 0.04%; 0.00%)</title><rect x="689.7" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.70" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (26 samples, 0.05%; +0.00%)</title><rect x="319.0" y="181" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="322.00" y="191.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (40 samples, 0.08%; +0.00%)</title><rect x="823.8" y="309" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="826.84" y="319.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (460 samples, 0.95%; +0.01%)</title><rect x="844.6" y="437" width="11.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="847.61" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;managed_bytes&gt;::_M_reset (9 samples, 0.02%; +0.01%)</title><rect x="919.4" y="373" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="922.39" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (34 samples, 0.07%; -0.01%)</title><rect x="1027.1" y="197" width="0.9" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1030.13" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (5 samples, 0.01%; -0.00%)</title><rect x="137.4" y="229" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="140.44" y="239.5" ></text>
</g>
<g >
<title>auth::resource::resource (54 samples, 0.11%; +0.01%)</title><rect x="775.3" y="373" width="1.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="778.33" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (7 samples, 0.01%; -0.01%)</title><rect x="582.7" y="341" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="585.66" y="351.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (9 samples, 0.02%; +0.00%)</title><rect x="523.9" y="341" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="526.87" y="351.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (11 samples, 0.02%; +0.01%)</title><rect x="719.9" y="485" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="722.86" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (20 samples, 0.04%; +0.03%)</title><rect x="674.7" y="469" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="677.66" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (22 samples, 0.05%; +0.00%)</title><rect x="455.6" y="261" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="458.59" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (17 samples, 0.04%; -0.01%)</title><rect x="977.2" y="325" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="980.17" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (5 samples, 0.01%; -0.01%)</title><rect x="683.1" y="485" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="686.08" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (99 samples, 0.20%; -0.00%)</title><rect x="807.2" y="149" width="2.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="810.18" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (20 samples, 0.04%; -0.03%)</title><rect x="520.2" y="261" width="0.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="523.21" y="271.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (37 samples, 0.08%; +0.00%)</title><rect x="510.1" y="197" width="0.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="513.11" y="207.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (7 samples, 0.01%; +0.01%)</title><rect x="266.1" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="269.09" y="351.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (6 samples, 0.01%; +0.00%)</title><rect x="725.8" y="453" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="728.84" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (24 samples, 0.05%; +0.02%)</title><rect x="371.1" y="149" width="0.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="374.08" y="159.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (6 samples, 0.01%; 0.00%)</title><rect x="18.0" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.00" y="223.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (35 samples, 0.07%; +0.00%)</title><rect x="22.8" y="453" width="0.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="25.81" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (20 samples, 0.04%; 0.00%)</title><rect x="1178.1" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1181.12" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (11 samples, 0.02%; +0.01%)</title><rect x="495.2" y="309" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="498.22" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (11 samples, 0.02%; -0.00%)</title><rect x="595.2" y="389" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="598.23" y="399.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (7 samples, 0.01%; +0.01%)</title><rect x="924.2" y="341" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="927.17" y="351.5" ></text>
</g>
<g >
<title>database::find_schema (299 samples, 0.62%; +0.00%)</title><rect x="761.8" y="405" width="7.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="764.81" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (143 samples, 0.30%; +0.02%)</title><rect x="1062.1" y="309" width="3.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1065.15" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%; +0.00%)</title><rect x="964.5" y="389" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="967.46" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (85 samples, 0.18%; +0.01%)</title><rect x="40.1" y="469" width="2.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="43.09" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (69 samples, 0.14%; +0.03%)</title><rect x="986.8" y="277" width="1.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="989.84" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (10 samples, 0.02%; -0.01%)</title><rect x="959.8" y="341" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="962.82" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (10 samples, 0.02%; 0.00%)</title><rect x="862.8" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.84" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (20 samples, 0.04%; -0.01%)</title><rect x="1048.0" y="245" width="0.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1051.02" y="255.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (9 samples, 0.02%; -0.00%)</title><rect x="1031.4" y="149" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1034.40" y="159.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (6 samples, 0.01%; -0.00%)</title><rect x="513.5" y="229" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="516.45" y="239.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (55 samples, 0.11%; +0.03%)</title><rect x="424.7" y="421" width="1.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="427.69" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (65 samples, 0.13%; +0.04%)</title><rect x="1012.3" y="245" width="1.6" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="1015.32" y="255.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (8 samples, 0.02%; -0.01%)</title><rect x="708.1" y="437" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="711.12" y="447.5" ></text>
</g>
<g >
<title>dht::tri_compare (39 samples, 0.08%; +0.04%)</title><rect x="1081.3" y="245" width="1.0" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="1084.31" y="255.5" ></text>
</g>
<g >
<title>row_cache::make_reader (550 samples, 1.14%; +0.03%)</title><rect x="524.9" y="341" width="13.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="527.95" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (10 samples, 0.02%; 0.00%)</title><rect x="269.4" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="272.41" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (72 samples, 0.15%; +0.01%)</title><rect x="652.3" y="453" width="1.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="655.33" y="463.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (281 samples, 0.58%; +0.02%)</title><rect x="100.6" y="437" width="6.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="103.61" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (32 samples, 0.07%; +0.01%)</title><rect x="370.9" y="165" width="0.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="373.88" y="175.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (23 samples, 0.05%; +0.03%)</title><rect x="72.1" y="389" width="0.5" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="75.08" y="399.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (10 samples, 0.02%; +0.00%)</title><rect x="750.8" y="277" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="753.75" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (27 samples, 0.06%; -0.00%)</title><rect x="643.4" y="485" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="646.35" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (27 samples, 0.06%; +0.00%)</title><rect x="1051.9" y="229" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1054.92" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (11 samples, 0.02%; +0.01%)</title><rect x="1144.0" y="485" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1146.97" y="495.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; -0.00%)</title><rect x="519.3" y="293" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="522.26" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (21 samples, 0.04%; -0.01%)</title><rect x="552.7" y="309" width="0.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="555.72" y="319.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (5 samples, 0.01%; 0.00%)</title><rect x="953.9" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="956.89" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (11 samples, 0.02%; -0.00%)</title><rect x="204.6" y="133" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="207.65" y="143.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (6 samples, 0.01%; 0.00%)</title><rect x="907.2" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="910.23" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (17 samples, 0.04%; +0.01%)</title><rect x="455.2" y="261" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="458.18" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (6 samples, 0.01%; +0.01%)</title><rect x="438.1" y="341" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="441.09" y="351.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (7 samples, 0.01%; +0.01%)</title><rect x="695.7" y="437" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="698.75" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (15 samples, 0.03%; +0.02%)</title><rect x="137.9" y="245" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="140.93" y="255.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (6 samples, 0.01%; +0.01%)</title><rect x="288.5" y="389" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="291.52" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (47 samples, 0.10%; -0.01%)</title><rect x="1167.9" y="485" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1170.91" y="495.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (270 samples, 0.56%; 0.00%)</title><rect x="481.9" y="229" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="484.95" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (125 samples, 0.26%; -0.03%)</title><rect x="102.8" y="421" width="3.0" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="105.78" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="494.6" y="309" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="497.59" y="319.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (480 samples, 0.99%; -0.00%)</title><rect x="477.2" y="293" width="11.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="480.19" y="303.5" ></text>
</g>
<g >
<title>auth::resource::parent (104 samples, 0.22%; +0.00%)</title><rect x="785.4" y="325" width="2.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="788.41" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (40 samples, 0.08%; -0.01%)</title><rect x="905.8" y="245" width="1.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="908.79" y="255.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (5 samples, 0.01%; +0.01%)</title><rect x="1144.3" y="485" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1147.29" y="495.5" ></text>
</g>
<g >
<title>compound_type&lt; (172 samples, 0.36%; +0.00%)</title><rect x="483.9" y="213" width="4.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="486.95" y="223.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (149 samples, 0.31%; -0.01%)</title><rect x="936.4" y="389" width="3.7" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="939.44" y="399.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; -0.00%)</title><rect x="847.0" y="341" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="850.00" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (7 samples, 0.01%; +0.01%)</title><rect x="985.6" y="341" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="988.57" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (8 samples, 0.02%; -0.02%)</title><rect x="151.3" y="245" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="154.35" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; -0.01%)</title><rect x="458.5" y="309" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="461.54" y="319.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (5 samples, 0.01%; -0.00%)</title><rect x="544.1" y="405" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="547.08" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (124 samples, 0.26%; +0.01%)</title><rect x="1118.4" y="389" width="3.0" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1121.42" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (869 samples, 1.80%; +0.03%)</title><rect x="920.3" y="405" width="21.2" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="923.31" y="415.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (34 samples, 0.07%; +0.06%)</title><rect x="51.7" y="469" width="0.8" height="15.0" fill="rgb(255,139,139)" rx="2" ry="2" />
<text  x="54.68" y="479.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (6 samples, 0.01%; +0.01%)</title><rect x="522.6" y="325" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="525.55" y="335.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (7 samples, 0.01%; -0.03%)</title><rect x="1041.1" y="261" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1044.14" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (6 samples, 0.01%; -0.00%)</title><rect x="323.1" y="197" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="326.05" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (80 samples, 0.17%; +0.00%)</title><rect x="916.9" y="357" width="1.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="919.90" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (7 samples, 0.01%; -0.00%)</title><rect x="264.4" y="309" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="267.41" y="319.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (36 samples, 0.07%; +0.01%)</title><rect x="577.9" y="357" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="580.90" y="367.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (8 samples, 0.02%; +0.01%)</title><rect x="1004.8" y="293" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1007.80" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr, false&gt;::uninitialized_set&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (6 samples, 0.01%; +0.00%)</title><rect x="744.5" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="747.51" y="319.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (45 samples, 0.09%; -0.00%)</title><rect x="306.2" y="229" width="1.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="309.24" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (5 samples, 0.01%; 0.00%)</title><rect x="23.3" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.25" y="367.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (13 samples, 0.03%; +0.01%)</title><rect x="252.5" y="197" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="255.55" y="207.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (5 samples, 0.01%; -0.01%)</title><rect x="397.6" y="213" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="400.63" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (27 samples, 0.06%; -0.00%)</title><rect x="731.5" y="325" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="734.48" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="962.0" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="964.99" y="415.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (175 samples, 0.36%; -0.01%)</title><rect x="756.9" y="421" width="4.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="759.90" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (87 samples, 0.18%; +0.01%)</title><rect x="395.6" y="229" width="2.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="398.63" y="239.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (5 samples, 0.01%; +0.00%)</title><rect x="228.2" y="117" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="231.19" y="127.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (7 samples, 0.01%; 0.00%)</title><rect x="23.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.79" y="495.5" ></text>
</g>
<g >
<title>operator new (66 samples, 0.14%; -0.00%)</title><rect x="541.3" y="405" width="1.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="544.30" y="415.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (22 samples, 0.05%; +0.00%)</title><rect x="710.3" y="421" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="713.27" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (269 samples, 0.56%; 0.00%)</title><rect x="17.5" y="565" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.52" y="575.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%; -0.01%)</title><rect x="628.2" y="389" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="631.17" y="399.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (8 samples, 0.02%; -0.02%)</title><rect x="518.3" y="325" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="521.33" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (5 samples, 0.01%; +0.00%)</title><rect x="418.5" y="357" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="421.55" y="367.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (18 samples, 0.04%; +0.03%)</title><rect x="554.9" y="405" width="0.4" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="557.87" y="415.5" ></text>
</g>
<g >
<title>operator new (39 samples, 0.08%; -0.00%)</title><rect x="948.0" y="373" width="1.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="951.01" y="383.5" ></text>
</g>
<g >
<title>query::digester::digester (53 samples, 0.11%; +0.02%)</title><rect x="598.9" y="405" width="1.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="601.94" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (58 samples, 0.12%; +0.01%)</title><rect x="226.9" y="165" width="1.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="229.93" y="175.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (6 samples, 0.01%; -0.00%)</title><rect x="19.7" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="22.69" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (63 samples, 0.13%; 0.00%)</title><rect x="18.0" y="341" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.96" y="351.5" ></text>
</g>
<g >
<title>operator delete (13 samples, 0.03%; +0.01%)</title><rect x="636.0" y="485" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="638.96" y="495.5" ></text>
</g>
<g >
<title>operator new (84 samples, 0.17%; -0.01%)</title><rect x="1022.4" y="245" width="2.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1025.44" y="255.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (9 samples, 0.02%; -0.00%)</title><rect x="489.7" y="325" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="492.71" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (29 samples, 0.06%; +0.02%)</title><rect x="716.3" y="501" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="719.32" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (105 samples, 0.22%; -0.00%)</title><rect x="1118.9" y="373" width="2.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1121.89" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (9 samples, 0.02%; +0.00%)</title><rect x="653.6" y="405" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="656.55" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (6 samples, 0.01%; 0.00%)</title><rect x="814.8" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="817.77" y="271.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (11 samples, 0.02%; -0.01%)</title><rect x="823.9" y="277" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="826.94" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (26 samples, 0.05%; 0.00%)</title><rect x="871.6" y="421" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.60" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (10 samples, 0.02%; 0.00%)</title><rect x="18.0" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.98" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (188 samples, 0.39%; -0.02%)</title><rect x="950.2" y="421" width="4.6" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="953.18" y="431.5" ></text>
</g>
<g >
<title>operator new (23 samples, 0.05%; -0.00%)</title><rect x="1156.4" y="437" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1159.37" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (5 samples, 0.01%; +0.01%)</title><rect x="35.3" y="485" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="38.33" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (8 samples, 0.02%; 0.00%)</title><rect x="1143.4" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.44" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (25 samples, 0.05%; +0.01%)</title><rect x="456.1" y="261" width="0.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="459.13" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (43 samples, 0.09%; 0.00%)</title><rect x="1142.7" y="389" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.66" y="399.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (175 samples, 0.36%; -0.01%)</title><rect x="730.2" y="389" width="4.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="733.21" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (10 samples, 0.02%; -0.01%)</title><rect x="272.8" y="341" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="275.78" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (26 samples, 0.05%; 0.00%)</title><rect x="689.6" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.65" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (89 samples, 0.18%; -0.01%)</title><rect x="485.3" y="197" width="2.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="488.34" y="207.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (7 samples, 0.01%; +0.01%)</title><rect x="735.4" y="437" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="738.43" y="447.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (46 samples, 0.10%; +0.01%)</title><rect x="938.7" y="341" width="1.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="941.71" y="351.5" ></text>
</g>
<g >
<title>operator new (36 samples, 0.07%; -0.00%)</title><rect x="521.3" y="325" width="0.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="524.31" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (104 samples, 0.22%; -0.01%)</title><rect x="1130.3" y="405" width="2.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1133.26" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; +0.00%)</title><rect x="692.1" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="695.09" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="875.9" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="878.90" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (14 samples, 0.03%; +0.00%)</title><rect x="18.7" y="261" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="21.74" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (10 samples, 0.02%; +0.00%)</title><rect x="995.0" y="261" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="997.96" y="271.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (10 samples, 0.02%; -0.01%)</title><rect x="642.7" y="485" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="645.67" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (5 samples, 0.01%; +0.00%)</title><rect x="417.8" y="293" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="420.84" y="303.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (26 samples, 0.05%; -0.00%)</title><rect x="566.8" y="293" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="569.80" y="303.5" ></text>
</g>
<g >
<title>[unknown] (273 samples, 0.56%; 0.00%)</title><rect x="10.4" y="597" width="6.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.41" y="607.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (15 samples, 0.03%; -0.01%)</title><rect x="706.6" y="453" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="709.58" y="463.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (19 samples, 0.04%; +0.01%)</title><rect x="631.6" y="485" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="634.62" y="495.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (6 samples, 0.01%; 0.00%)</title><rect x="602.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="605.65" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (10 samples, 0.02%; +0.01%)</title><rect x="543.8" y="389" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="546.83" y="399.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (12 samples, 0.02%; +0.01%)</title><rect x="842.6" y="437" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="845.59" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (10 samples, 0.02%; +0.02%)</title><rect x="535.7" y="261" width="0.2" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="538.68" y="271.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (5 samples, 0.01%; +0.00%)</title><rect x="954.2" y="389" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="957.21" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (8 samples, 0.02%; +0.00%)</title><rect x="1033.8" y="165" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1036.77" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (6 samples, 0.01%; 0.00%)</title><rect x="843.3" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="846.29" y="447.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (75 samples, 0.16%; 0.00%)</title><rect x="546.6" y="389" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="549.62" y="399.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (905 samples, 1.87%; +0.05%)</title><rect x="495.5" y="309" width="22.1" height="15.0" fill="rgb(255,155,155)" rx="2" ry="2" />
<text  x="498.49" y="319.5" >s..</text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::do_merge_with (5 samples, 0.01%; 0.00%)</title><rect x="23.3" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.25" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (18 samples, 0.04%; -0.02%)</title><rect x="1152.5" y="485" width="0.4" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="1155.47" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10 samples, 0.02%; +0.01%)</title><rect x="685.9" y="453" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="688.86" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (5 samples, 0.01%; +0.01%)</title><rect x="635.0" y="453" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="637.96" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (13 samples, 0.03%; +0.01%)</title><rect x="971.2" y="373" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="974.24" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (19 samples, 0.04%; -0.01%)</title><rect x="959.6" y="357" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="962.60" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (45 samples, 0.09%; 0.00%)</title><rect x="1142.6" y="437" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.61" y="447.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (1,066 samples, 2.20%; +0.01%)</title><rect x="492.0" y="325" width="26.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="495.05" y="335.5" >m..</text>
</g>
<g >
<title>__tls_init (7 samples, 0.01%; +0.01%)</title><rect x="491.7" y="293" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="494.66" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.02%; -0.01%)</title><rect x="658.5" y="437" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="661.53" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (17 samples, 0.04%; -0.01%)</title><rect x="447.4" y="261" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="450.44" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (7,026 samples, 14.53%; +0.01%)</title><rect x="116.1" y="405" width="171.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="119.08" y="415.5" >flat_mutation_reader::..</text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (6 samples, 0.01%; 0.00%)</title><rect x="1142.8" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.80" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (16 samples, 0.03%; -0.01%)</title><rect x="145.0" y="261" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="147.95" y="271.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (519 samples, 1.07%; +0.01%)</title><rect x="65.3" y="453" width="12.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="68.25" y="463.5" ></text>
</g>
<g >
<title>utils::array_search_gt (7 samples, 0.01%; +0.00%)</title><rect x="475.3" y="277" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="478.28" y="287.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (5 samples, 0.01%; +0.01%)</title><rect x="842.9" y="437" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="845.88" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (38 samples, 0.08%; +0.00%)</title><rect x="1159.9" y="373" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1162.86" y="383.5" ></text>
</g>
<g >
<title>table::query (22,352 samples, 46.23%; +0.19%)</title><rect x="85.4" y="453" width="545.5" height="15.0" fill="rgb(255,0,0)" rx="2" ry="2" />
<text  x="88.41" y="463.5" >table::query</text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (19 samples, 0.04%; 0.00%)</title><rect x="199.1" y="101" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="202.08" y="111.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (206 samples, 0.43%; 0.00%)</title><rect x="17.8" y="469" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.76" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (17 samples, 0.04%; +0.03%)</title><rect x="105.8" y="421" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="108.83" y="431.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (987 samples, 2.04%; 0.00%)</title><rect x="791.1" y="293" width="24.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="794.14" y="303.5" >s..</text>
</g>
<g >
<title>reader_permit::impl::on_admission (63 samples, 0.13%; +0.06%)</title><rect x="68.3" y="405" width="1.6" height="15.0" fill="rgb(255,146,146)" rx="2" ry="2" />
<text  x="71.35" y="415.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (38 samples, 0.08%; -0.00%)</title><rect x="230.7" y="229" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="233.66" y="239.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (6 samples, 0.01%; -0.02%)</title><rect x="77.6" y="421" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="80.60" y="431.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (18 samples, 0.04%; +0.02%)</title><rect x="599.8" y="389" width="0.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="602.79" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (83 samples, 0.17%; +0.00%)</title><rect x="531.0" y="309" width="2.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="534.02" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (28 samples, 0.06%; 0.00%)</title><rect x="775.7" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="778.67" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (6 samples, 0.01%; +0.01%)</title><rect x="1123.7" y="405" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1126.72" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (26 samples, 0.05%; +0.02%)</title><rect x="622.6" y="389" width="0.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="625.59" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (26 samples, 0.05%; -0.01%)</title><rect x="775.7" y="341" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="778.72" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (539 samples, 1.11%; +0.02%)</title><rect x="271.5" y="357" width="13.2" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="274.51" y="367.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (21 samples, 0.04%; +0.02%)</title><rect x="560.9" y="341" width="0.5" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="563.89" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (9 samples, 0.02%; -0.02%)</title><rect x="1068.1" y="325" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1071.05" y="335.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (119 samples, 0.25%; +0.00%)</title><rect x="772.2" y="389" width="2.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="775.18" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; +0.01%)</title><rect x="941.3" y="357" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="944.32" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (109 samples, 0.23%; +0.01%)</title><rect x="641.8" y="501" width="2.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="644.77" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (11 samples, 0.02%; -0.01%)</title><rect x="629.9" y="389" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="632.88" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (22 samples, 0.05%; +0.02%)</title><rect x="1160.3" y="357" width="0.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1163.25" y="367.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (55 samples, 0.11%; -0.01%)</title><rect x="275.8" y="309" width="1.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="278.78" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (99 samples, 0.20%; 0.00%)</title><rect x="1059.0" y="325" width="2.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1062.02" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (9 samples, 0.02%; +0.01%)</title><rect x="399.2" y="229" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="402.19" y="239.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (16 samples, 0.03%; +0.00%)</title><rect x="857.7" y="389" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="860.69" y="399.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (95 samples, 0.20%; -0.04%)</title><rect x="1173.1" y="437" width="2.3" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="1176.06" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (177 samples, 0.37%; 0.00%)</title><rect x="548.9" y="373" width="4.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="551.93" y="383.5" ></text>
</g>
<g >
<title>table::as_mutation_source (116 samples, 0.24%; -0.00%)</title><rect x="627.6" y="437" width="2.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="630.64" y="447.5" ></text>
</g>
<g >
<title>seastar::app_template::run (47,302 samples, 97.83%; 0.00%)</title><rect x="24.4" y="597" width="1154.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.42" y="607.5" >seastar::app_template::run</text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (85 samples, 0.18%; -0.01%)</title><rect x="136.2" y="261" width="2.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="139.22" y="271.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (5 samples, 0.01%; -0.01%)</title><rect x="906.8" y="245" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="909.77" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (9 samples, 0.02%; -0.01%)</title><rect x="907.2" y="277" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="910.16" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (17 samples, 0.04%; -0.01%)</title><rect x="1120.5" y="325" width="0.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1123.55" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (5 samples, 0.01%; +0.00%)</title><rect x="907.7" y="277" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="910.67" y="287.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (23 samples, 0.05%; +0.01%)</title><rect x="142.4" y="229" width="0.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="145.39" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (27 samples, 0.06%; -0.00%)</title><rect x="663.8" y="485" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="666.76" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (20 samples, 0.04%; -0.00%)</title><rect x="652.8" y="437" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="655.80" y="447.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (7 samples, 0.01%; -0.00%)</title><rect x="981.0" y="341" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="983.98" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (13 samples, 0.03%; -0.01%)</title><rect x="662.6" y="469" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="665.61" y="479.5" ></text>
</g>
<g >
<title>service::client_state::validate_login (6 samples, 0.01%; +0.01%)</title><rect x="820.4" y="357" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="823.35" y="367.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (10 samples, 0.02%; +0.02%)</title><rect x="315.5" y="165" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="318.51" y="175.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (14 samples, 0.03%; 0.00%)</title><rect x="1143.1" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.10" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (45 samples, 0.09%; -0.02%)</title><rect x="869.4" y="501" width="1.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="872.43" y="511.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (7 samples, 0.01%; +0.01%)</title><rect x="553.6" y="389" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="556.64" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; +0.00%)</title><rect x="501.0" y="261" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="504.03" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (152 samples, 0.31%; -0.05%)</title><rect x="266.6" y="341" width="3.7" height="15.0" fill="rgb(159,159,255)" rx="2" ry="2" />
<text  x="269.58" y="351.5" ></text>
</g>
<g >
<title>free (46 samples, 0.10%; +0.01%)</title><rect x="405.6" y="197" width="1.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="408.64" y="207.5" ></text>
</g>
<g >
<title>operator delete (25 samples, 0.05%; +0.00%)</title><rect x="159.0" y="197" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="161.96" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (7 samples, 0.01%; -0.01%)</title><rect x="1127.1" y="405" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1130.14" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (35 samples, 0.07%; +0.02%)</title><rect x="521.3" y="309" width="0.9" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="524.33" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (6 samples, 0.01%; -0.02%)</title><rect x="993.5" y="293" width="0.2" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="996.52" y="303.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.01%; +0.01%)</title><rect x="567.4" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="570.43" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (267 samples, 0.55%; +0.02%)</title><rect x="617.2" y="437" width="6.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="620.24" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (44 samples, 0.09%; -0.02%)</title><rect x="107.5" y="437" width="1.0" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="110.47" y="447.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; +0.03%)</title><rect x="578.0" y="341" width="0.8" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="581.02" y="351.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (35 samples, 0.07%; +0.06%)</title><rect x="563.0" y="309" width="0.8" height="15.0" fill="rgb(255,139,139)" rx="2" ry="2" />
<text  x="565.97" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (73 samples, 0.15%; -0.01%)</title><rect x="686.5" y="485" width="1.8" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="689.55" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (11 samples, 0.02%; +0.00%)</title><rect x="333.6" y="165" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="336.57" y="175.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (11 samples, 0.02%; -0.04%)</title><rect x="337.5" y="181" width="0.2" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="340.45" y="191.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (38 samples, 0.08%; +0.00%)</title><rect x="742.2" y="373" width="0.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="745.19" y="383.5" ></text>
</g>
<g >
<title>dht::minimum_token (7 samples, 0.01%; +0.01%)</title><rect x="440.3" y="325" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="443.34" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (16 samples, 0.03%; +0.01%)</title><rect x="603.5" y="437" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="606.45" y="447.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (80 samples, 0.17%; +0.00%)</title><rect x="562.0" y="325" width="2.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="565.02" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (95 samples, 0.20%; +0.01%)</title><rect x="1134.2" y="421" width="2.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1137.21" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (8 samples, 0.02%; 0.00%)</title><rect x="876.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="879.02" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (147 samples, 0.30%; -0.01%)</title><rect x="802.1" y="165" width="3.6" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="805.10" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (28 samples, 0.06%; +0.02%)</title><rect x="52.8" y="469" width="0.7" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="55.78" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (157 samples, 0.32%; +0.01%)</title><rect x="829.5" y="341" width="3.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="832.51" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.01%; -0.01%)</title><rect x="288.7" y="389" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="291.67" y="399.5" ></text>
</g>
<g >
<title>operator delete (18 samples, 0.04%; -0.00%)</title><rect x="566.9" y="277" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="569.94" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (47 samples, 0.10%; -0.01%)</title><rect x="789.6" y="261" width="1.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="792.58" y="271.5" ></text>
</g>
<g >
<title>operator new (23 samples, 0.05%; +0.00%)</title><rect x="247.5" y="181" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="250.50" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (8 samples, 0.02%; +0.01%)</title><rect x="1140.8" y="421" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1143.83" y="431.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.01%; -0.01%)</title><rect x="798.1" y="165" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="801.12" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (22 samples, 0.05%; -0.01%)</title><rect x="42.2" y="469" width="0.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="45.19" y="479.5" ></text>
</g>
<g >
<title>perf_simple_que (48,353 samples, 100.00%; 0.00%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >perf_simple_que</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (113 samples, 0.23%; 0.00%)</title><rect x="237.7" y="213" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="240.66" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,630 samples, 9.58%; +0.03%)</title><rect x="299.9" y="277" width="113.0" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="302.92" y="287.5" >flat_mutation..</text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (60 samples, 0.12%; -0.00%)</title><rect x="416.4" y="277" width="1.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="419.37" y="287.5" ></text>
</g>
<g >
<title>schema::position (11 samples, 0.02%; +0.01%)</title><rect x="944.3" y="405" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="947.33" y="415.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (1,197 samples, 2.48%; -0.01%)</title><rect x="788.3" y="325" width="29.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="791.26" y="335.5" >st..</text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (22 samples, 0.05%; +0.03%)</title><rect x="152.3" y="245" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="155.32" y="255.5" ></text>
</g>
<g >
<title>row::compact_and_expire (781 samples, 1.62%; -0.01%)</title><rect x="372.2" y="213" width="19.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="375.23" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.01%; 0.00%)</title><rect x="20.1" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.10" y="271.5" ></text>
</g>
<g >
<title>posix_memalign (42 samples, 0.09%; -0.01%)</title><rect x="200.2" y="85" width="1.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="203.15" y="95.5" ></text>
</g>
<g >
<title>posix_memalign (170 samples, 0.35%; +0.01%)</title><rect x="192.9" y="53" width="4.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="195.91" y="63.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (28 samples, 0.06%; -0.00%)</title><rect x="961.0" y="373" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="964.04" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (93 samples, 0.19%; -0.01%)</title><rect x="160.2" y="197" width="2.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="163.21" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (19 samples, 0.04%; -0.00%)</title><rect x="662.5" y="485" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="665.46" y="495.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (5,505 samples, 11.39%; +0.06%)</title><rect x="289.5" y="389" width="134.3" height="15.0" fill="rgb(255,148,148)" rx="2" ry="2" />
<text  x="292.47" y="399.5" >query::consume_p..</text>
</g>
<g >
<title>table::estimate_read_memory_cost (15 samples, 0.03%; +0.03%)</title><rect x="1045.6" y="261" width="0.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1048.60" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (446 samples, 0.92%; +0.01%)</title><rect x="898.5" y="325" width="10.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="901.52" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (28 samples, 0.06%; -0.01%)</title><rect x="677.0" y="437" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="679.96" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (17 samples, 0.04%; +0.01%)</title><rect x="211.9" y="85" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="214.94" y="95.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (44 samples, 0.09%; -0.01%)</title><rect x="227.3" y="149" width="1.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="230.27" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (83 samples, 0.17%; +0.02%)</title><rect x="1041.5" y="245" width="2.0" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1044.45" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; -0.01%)</title><rect x="785.7" y="309" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="788.73" y="319.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (9 samples, 0.02%; +0.00%)</title><rect x="61.1" y="453" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="64.05" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; +0.01%)</title><rect x="918.6" y="293" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="921.63" y="303.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (79 samples, 0.16%; 0.00%)</title><rect x="20.0" y="357" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.96" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (211 samples, 0.44%; +0.00%)</title><rect x="216.3" y="181" width="5.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="219.33" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (19 samples, 0.04%; -0.01%)</title><rect x="38.6" y="421" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="41.60" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (16 samples, 0.03%; +0.01%)</title><rect x="1077.3" y="325" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1080.28" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (9 samples, 0.02%; +0.01%)</title><rect x="1103.6" y="341" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1106.59" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (41 samples, 0.08%; +0.02%)</title><rect x="793.1" y="229" width="1.0" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="796.10" y="239.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (7 samples, 0.01%; +0.00%)</title><rect x="409.1" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="412.05" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (14 samples, 0.03%; +0.01%)</title><rect x="458.1" y="325" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="461.08" y="335.5" ></text>
</g>
<g >
<title>operator new (71 samples, 0.15%; +0.00%)</title><rect x="986.8" y="293" width="1.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="989.79" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="1174.4" y="421" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1177.38" y="431.5" ></text>
</g>
<g >
<title>dht::tri_compare (115 samples, 0.24%; -0.02%)</title><rect x="1085.9" y="229" width="2.8" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1088.87" y="239.5" ></text>
</g>
<g >
<title>compound_type&lt; (96 samples, 0.20%; +0.00%)</title><rect x="937.5" y="357" width="2.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="940.49" y="367.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (649 samples, 1.34%; -0.00%)</title><rect x="794.4" y="261" width="15.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="797.41" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (132 samples, 0.27%; +0.02%)</title><rect x="209.3" y="117" width="3.2" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="212.31" y="127.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (8 samples, 0.02%; -0.00%)</title><rect x="934.1" y="389" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="937.13" y="399.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (699 samples, 1.45%; 0.00%)</title><rect x="739.8" y="421" width="17.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="742.85" y="431.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (15 samples, 0.03%; +0.01%)</title><rect x="316.4" y="165" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="319.37" y="175.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (8 samples, 0.02%; +0.01%)</title><rect x="192.2" y="69" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="195.17" y="79.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (18 samples, 0.04%; +0.01%)</title><rect x="1096.0" y="293" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1098.97" y="303.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (5 samples, 0.01%; +0.00%)</title><rect x="284.2" y="325" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="287.15" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (23 samples, 0.05%; -0.00%)</title><rect x="143.5" y="245" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="146.46" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (14 samples, 0.03%; +0.00%)</title><rect x="221.0" y="149" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="224.04" y="159.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (8 samples, 0.02%; +0.01%)</title><rect x="642.9" y="485" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="645.91" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (15 samples, 0.03%; -0.01%)</title><rect x="628.8" y="389" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="631.81" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (7 samples, 0.01%; -0.01%)</title><rect x="41.3" y="453" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="44.31" y="463.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (39 samples, 0.08%; +0.03%)</title><rect x="221.9" y="165" width="1.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="224.95" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%; 0.00%)</title><rect x="1123.1" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.08" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (5 samples, 0.01%; +0.01%)</title><rect x="144.6" y="261" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="147.56" y="271.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (10 samples, 0.02%; -0.00%)</title><rect x="835.6" y="293" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="838.56" y="303.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (132 samples, 0.27%; +0.17%)</title><rect x="10.6" y="581" width="3.2" height="15.0" fill="rgb(255,18,18)" rx="2" ry="2" />
<text  x="13.56" y="591.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (34 samples, 0.07%; +0.01%)</title><rect x="466.5" y="293" width="0.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="469.50" y="303.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (5 samples, 0.01%; +0.00%)</title><rect x="1142.5" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1145.46" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (1,853 samples, 3.83%; -0.04%)</title><rect x="1055.9" y="357" width="45.2" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="1058.85" y="367.5" >serv..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.01%; +0.00%)</title><rect x="658.8" y="453" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="661.75" y="463.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (11 samples, 0.02%; +0.01%)</title><rect x="596.5" y="405" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="599.50" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (13 samples, 0.03%; +0.00%)</title><rect x="699.0" y="453" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="701.97" y="463.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (153 samples, 0.32%; +0.02%)</title><rect x="930.2" y="341" width="3.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="933.25" y="351.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (1,626 samples, 3.36%; +0.01%)</title><rect x="780.7" y="357" width="39.7" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="783.67" y="367.5" >ser..</text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (5 samples, 0.01%; 0.00%)</title><rect x="654.1" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="657.09" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (19 samples, 0.04%; +0.01%)</title><rect x="302.5" y="245" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="305.48" y="255.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (10 samples, 0.02%; 0.00%)</title><rect x="870.8" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.82" y="415.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (96 samples, 0.20%; -0.01%)</title><rect x="356.1" y="165" width="2.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="359.14" y="175.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (161 samples, 0.33%; +0.00%)</title><rect x="805.7" y="165" width="3.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="808.71" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%; +0.00%)</title><rect x="1044.7" y="261" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1047.72" y="271.5" ></text>
</g>
<g >
<title>operator new (65 samples, 0.13%; -0.00%)</title><rect x="1128.6" y="405" width="1.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1131.58" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (12 samples, 0.02%; -0.00%)</title><rect x="1164.6" y="453" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1167.60" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (11 samples, 0.02%; +0.01%)</title><rect x="633.8" y="485" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="636.76" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (12 samples, 0.02%; +0.01%)</title><rect x="676.1" y="437" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="679.10" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (5 samples, 0.01%; 0.00%)</title><rect x="20.5" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.49" y="287.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (39 samples, 0.08%; +0.01%)</title><rect x="39.1" y="421" width="0.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="42.07" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (148 samples, 0.31%; +0.00%)</title><rect x="999.3" y="309" width="3.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1002.31" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (7 samples, 0.01%; 0.00%)</title><rect x="24.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.23" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (22 samples, 0.05%; +0.03%)</title><rect x="557.3" y="421" width="0.5" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="560.31" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (20 samples, 0.04%; +0.04%)</title><rect x="584.2" y="357" width="0.5" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="587.17" y="367.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (31 samples, 0.06%; -0.01%)</title><rect x="306.3" y="213" width="0.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="309.34" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="1146.0" y="501" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1149.02" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (7 samples, 0.01%; +0.00%)</title><rect x="39.8" y="389" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="42.82" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (19 samples, 0.04%; -0.03%)</title><rect x="1030.9" y="149" width="0.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1033.94" y="159.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (5 samples, 0.01%; +0.01%)</title><rect x="215.3" y="181" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="218.31" y="191.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (52 samples, 0.11%; +0.02%)</title><rect x="103.8" y="405" width="1.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="106.76" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.06%; 0.00%)</title><rect x="1141.9" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.90" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (32 samples, 0.07%; +0.00%)</title><rect x="259.1" y="277" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="262.09" y="287.5" ></text>
</g>
<g >
<title>operator delete (14 samples, 0.03%; +0.00%)</title><rect x="47.0" y="501" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="50.02" y="511.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (47 samples, 0.10%; 0.00%)</title><rect x="362.1" y="149" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="365.05" y="159.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (7 samples, 0.01%; +0.00%)</title><rect x="53.5" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="56.49" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (16 samples, 0.03%; +0.03%)</title><rect x="887.1" y="421" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="890.12" y="431.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (90 samples, 0.19%; -0.01%)</title><rect x="75.3" y="405" width="2.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="78.26" y="415.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (15 samples, 0.03%; -0.01%)</title><rect x="1117.9" y="389" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1120.89" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.00%)</title><rect x="616.6" y="389" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="619.63" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (31 samples, 0.06%; -0.00%)</title><rect x="689.6" y="501" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="692.65" y="511.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (84 samples, 0.17%; 0.00%)</title><rect x="604.6" y="421" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="607.60" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (23 samples, 0.05%; +0.04%)</title><rect x="1033.0" y="165" width="0.5" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="1035.96" y="175.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (54 samples, 0.11%; +0.02%)</title><rect x="730.8" y="341" width="1.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="733.82" y="351.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (26 samples, 0.05%; +0.01%)</title><rect x="1063.9" y="277" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1066.86" y="287.5" ></text>
</g>
<g >
<title>operator delete (20 samples, 0.04%; -0.01%)</title><rect x="679.8" y="485" width="0.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="682.76" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (11 samples, 0.02%; +0.02%)</title><rect x="538.1" y="325" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="541.10" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (12 samples, 0.02%; +0.02%)</title><rect x="988.7" y="277" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="991.72" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (578 samples, 1.20%; +0.00%)</title><rect x="501.4" y="277" width="14.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="504.44" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1,182 samples, 2.44%; +0.01%)</title><rect x="1146.6" y="501" width="28.9" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1149.61" y="511.5" >se..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (24 samples, 0.05%; +0.02%)</title><rect x="630.9" y="469" width="0.6" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="633.91" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (48 samples, 0.10%; +0.05%)</title><rect x="157.5" y="165" width="1.2" height="15.0" fill="rgb(255,155,155)" rx="2" ry="2" />
<text  x="160.55" y="175.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (8 samples, 0.02%; +0.01%)</title><rect x="1064.3" y="261" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1067.30" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::stats (38 samples, 0.08%; -0.00%)</title><rect x="490.9" y="309" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="493.90" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (21 samples, 0.04%; -0.01%)</title><rect x="392.2" y="197" width="0.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="395.16" y="207.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (10 samples, 0.02%; +0.01%)</title><rect x="711.0" y="421" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="714.05" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (8 samples, 0.02%; +0.01%)</title><rect x="855.8" y="437" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="858.84" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (26 samples, 0.05%; -0.00%)</title><rect x="1129.5" y="373" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1132.53" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (54 samples, 0.11%; -0.01%)</title><rect x="958.9" y="405" width="1.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="961.90" y="415.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (47,302 samples, 97.83%; 0.00%)</title><rect x="24.4" y="565" width="1154.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.42" y="575.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (52 samples, 0.11%; -0.00%)</title><rect x="627.9" y="405" width="1.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="630.91" y="415.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::touch (5 samples, 0.01%; +0.01%)</title><rect x="735.3" y="421" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="738.31" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (28 samples, 0.06%; -0.01%)</title><rect x="767.8" y="325" width="0.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="770.76" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (7 samples, 0.01%; -0.01%)</title><rect x="46.3" y="485" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="49.26" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (17 samples, 0.04%; +0.00%)</title><rect x="616.4" y="405" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="619.36" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (10,651 samples, 22.03%; -0.01%)</title><rect x="881.1" y="437" width="259.9" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="884.10" y="447.5" >cql3::statements::select_statement..</text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (17 samples, 0.04%; -0.02%)</title><rect x="1151.4" y="469" width="0.4" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1154.42" y="479.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (66 samples, 0.14%; +0.00%)</title><rect x="865.8" y="469" width="1.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="868.77" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (734 samples, 1.52%; +0.01%)</title><rect x="559.0" y="373" width="17.9" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="561.99" y="383.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (45 samples, 0.09%; 0.00%)</title><rect x="1142.6" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.61" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (25 samples, 0.05%; -0.00%)</title><rect x="634.5" y="469" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="637.52" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (21 samples, 0.04%; +0.04%)</title><rect x="821.7" y="341" width="0.5" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="824.72" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (5 samples, 0.01%; -0.00%)</title><rect x="909.5" y="325" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="912.50" y="335.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (10 samples, 0.02%; +0.00%)</title><rect x="581.2" y="341" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="584.22" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (12 samples, 0.02%; -0.00%)</title><rect x="248.7" y="229" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="251.67" y="239.5" ></text>
</g>
<g >
<title>operator new (38 samples, 0.08%; +0.00%)</title><rect x="419.8" y="341" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="422.84" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (13 samples, 0.03%; -0.00%)</title><rect x="790.4" y="245" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="793.41" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (10 samples, 0.02%; +0.02%)</title><rect x="212.8" y="133" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="215.82" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (18 samples, 0.04%; +0.00%)</title><rect x="715.4" y="485" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="718.42" y="495.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (62 samples, 0.13%; -0.00%)</title><rect x="934.9" y="389" width="1.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="937.88" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (91 samples, 0.19%; -0.01%)</title><rect x="683.4" y="469" width="2.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="686.40" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (24 samples, 0.05%; +0.00%)</title><rect x="832.6" y="293" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="835.61" y="303.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (6 samples, 0.01%; +0.01%)</title><rect x="822.5" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="825.50" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (11 samples, 0.02%; -0.00%)</title><rect x="641.4" y="453" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="644.43" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (61 samples, 0.13%; +0.03%)</title><rect x="297.2" y="261" width="1.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="300.23" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; -0.00%)</title><rect x="431.7" y="357" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="434.72" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.01%)</title><rect x="413.0" y="277" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="415.98" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (10 samples, 0.02%; +0.01%)</title><rect x="634.7" y="453" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="637.71" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (40 samples, 0.08%; +0.00%)</title><rect x="799.8" y="197" width="1.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="802.83" y="207.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (12 samples, 0.02%; -0.01%)</title><rect x="600.6" y="405" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="603.60" y="415.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (656 samples, 1.36%; +0.01%)</title><rect x="1080.4" y="309" width="16.0" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1083.40" y="319.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (184 samples, 0.38%; +0.01%)</title><rect x="533.3" y="309" width="4.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="536.27" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (8 samples, 0.02%; +0.00%)</title><rect x="285.7" y="357" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="288.69" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (6 samples, 0.01%; +0.00%)</title><rect x="773.3" y="341" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="776.26" y="351.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (98 samples, 0.20%; -0.01%)</title><rect x="627.8" y="421" width="2.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="630.81" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (8 samples, 0.02%; +0.01%)</title><rect x="151.5" y="245" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="154.54" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%; +0.00%)</title><rect x="947.2" y="389" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="950.21" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (130 samples, 0.27%; -0.02%)</title><rect x="250.5" y="229" width="3.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="253.48" y="239.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (318 samples, 0.66%; +0.01%)</title><rect x="205.4" y="165" width="7.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="208.35" y="175.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (38 samples, 0.08%; -0.03%)</title><rect x="994.8" y="277" width="0.9" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="997.79" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (26 samples, 0.05%; +0.01%)</title><rect x="1124.6" y="405" width="0.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1127.60" y="415.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (41 samples, 0.08%; -0.01%)</title><rect x="612.3" y="437" width="1.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="615.34" y="447.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (5 samples, 0.01%; +0.00%)</title><rect x="488.8" y="277" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="491.78" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (59 samples, 0.12%; -0.00%)</title><rect x="405.4" y="213" width="1.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="408.37" y="223.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (743 samples, 1.54%; 0.00%)</title><rect x="558.9" y="389" width="18.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="561.94" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (30 samples, 0.06%; -0.01%)</title><rect x="685.7" y="469" width="0.8" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="688.72" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (5 samples, 0.01%; 0.00%)</title><rect x="217.4" y="133" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="220.38" y="143.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (6 samples, 0.01%; -0.00%)</title><rect x="827.1" y="389" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="830.14" y="399.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (618 samples, 1.28%; +0.00%)</title><rect x="1080.7" y="293" width="15.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1083.74" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (24 samples, 0.05%; 0.00%)</title><rect x="1143.1" y="229" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.07" y="239.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (7 samples, 0.01%; +0.01%)</title><rect x="501.2" y="277" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="504.23" y="287.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (1,547 samples, 3.20%; +0.01%)</title><rect x="782.0" y="341" width="37.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="785.04" y="351.5" >ser..</text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (7 samples, 0.01%; +0.01%)</title><rect x="587.8" y="405" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="590.76" y="415.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (70 samples, 0.14%; +0.02%)</title><rect x="528.8" y="293" width="1.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="531.80" y="303.5" ></text>
</g>
<g >
<title>reader_permit::consume (9 samples, 0.02%; +0.01%)</title><rect x="163.1" y="197" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="166.13" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (66 samples, 0.14%; +0.00%)</title><rect x="1159.2" y="437" width="1.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1162.23" y="447.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (84 samples, 0.17%; +0.00%)</title><rect x="803.6" y="149" width="2.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="806.56" y="159.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (11 samples, 0.02%; +0.01%)</title><rect x="656.7" y="453" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="659.65" y="463.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (8 samples, 0.02%; -0.00%)</title><rect x="606.9" y="421" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="609.94" y="431.5" ></text>
</g>
<g >
<title>db::block_for (5 samples, 0.01%; 0.00%)</title><rect x="1067.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1070.93" y="335.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (21 samples, 0.04%; +0.02%)</title><rect x="808.6" y="85" width="0.5" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="811.57" y="95.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (9 samples, 0.02%; +0.01%)</title><rect x="1155.6" y="405" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1158.61" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (24,085 samples, 49.81%; +0.04%)</title><rect x="47.4" y="501" width="587.7" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="50.36" y="511.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (15 samples, 0.03%; +0.01%)</title><rect x="666.3" y="469" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="669.32" y="479.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (15 samples, 0.03%; +0.02%)</title><rect x="292.8" y="325" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="295.79" y="335.5" ></text>
</g>
<g >
<title>dht::tri_compare (9 samples, 0.02%; -0.05%)</title><rect x="488.6" y="277" width="0.2" height="15.0" fill="rgb(152,152,255)" rx="2" ry="2" />
<text  x="491.56" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (40 samples, 0.08%; +0.02%)</title><rect x="678.2" y="453" width="1.0" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="681.20" y="463.5" ></text>
</g>
<g >
<title>operator new (60 samples, 0.12%; -0.00%)</title><rect x="968.2" y="373" width="1.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="971.17" y="383.5" ></text>
</g>
<g >
<title>operator delete (49 samples, 0.10%; -0.01%)</title><rect x="942.9" y="405" width="1.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="945.86" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (10 samples, 0.02%; +0.01%)</title><rect x="230.4" y="181" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="233.42" y="191.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (407 samples, 0.84%; -0.02%)</title><rect x="705.1" y="469" width="10.0" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="708.12" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (21 samples, 0.04%; +0.01%)</title><rect x="1149.2" y="485" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1152.17" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (27 samples, 0.06%; +0.01%)</title><rect x="698.0" y="453" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="701.04" y="463.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::function&lt;partition_presence_checker_result  (5 samples, 0.01%; +0.01%)</title><rect x="611.2" y="421" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="614.19" y="431.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (32 samples, 0.07%; -0.01%)</title><rect x="838.1" y="421" width="0.8" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="841.15" y="431.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (15 samples, 0.03%; -0.01%)</title><rect x="313.0" y="165" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="316.05" y="175.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (9 samples, 0.02%; 0.00%)</title><rect x="233.2" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="236.17" y="255.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (16 samples, 0.03%; +0.01%)</title><rect x="734.8" y="389" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="737.82" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (9 samples, 0.02%; +0.00%)</title><rect x="1142.8" y="261" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1145.75" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (21 samples, 0.04%; +0.01%)</title><rect x="941.0" y="373" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="943.98" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (14 samples, 0.03%; +0.02%)</title><rect x="798.7" y="213" width="0.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="801.66" y="223.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (479 samples, 0.99%; -0.00%)</title><rect x="690.8" y="501" width="11.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="693.82" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (12 samples, 0.02%; -0.00%)</title><rect x="203.6" y="101" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="206.57" y="111.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (25 samples, 0.05%; 0.00%)</title><rect x="1143.1" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.07" y="303.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (13 samples, 0.03%; +0.01%)</title><rect x="1005.0" y="293" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1007.99" y="303.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (41 samples, 0.08%; +0.01%)</title><rect x="1009.3" y="277" width="1.0" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1012.31" y="287.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (63 samples, 0.13%; +0.01%)</title><rect x="625.1" y="405" width="1.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="628.05" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (13 samples, 0.03%; +0.02%)</title><rect x="657.2" y="469" width="0.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="660.24" y="479.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (7 samples, 0.01%; +0.00%)</title><rect x="220.6" y="117" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="223.58" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (5 samples, 0.01%; +0.00%)</title><rect x="548.3" y="373" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="551.32" y="383.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (32 samples, 0.07%; -0.00%)</title><rect x="483.0" y="197" width="0.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="486.02" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; -0.00%)</title><rect x="1126.5" y="405" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1129.45" y="415.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (11 samples, 0.02%; +0.01%)</title><rect x="605.7" y="405" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="608.70" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (17 samples, 0.04%; -0.00%)</title><rect x="870.7" y="453" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="873.68" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (16 samples, 0.03%; +0.01%)</title><rect x="764.4" y="357" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="767.45" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (32 samples, 0.07%; +0.00%)</title><rect x="513.6" y="229" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="516.60" y="239.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (19 samples, 0.04%; -0.01%)</title><rect x="337.0" y="181" width="0.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="339.99" y="191.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (42 samples, 0.09%; -0.00%)</title><rect x="826.0" y="373" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="829.02" y="383.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (115 samples, 0.24%; 0.00%)</title><rect x="603.8" y="437" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="606.84" y="447.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (74 samples, 0.15%; -0.03%)</title><rect x="305.5" y="245" width="1.8" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="308.53" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (17 samples, 0.04%; -0.00%)</title><rect x="611.9" y="437" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="614.92" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (31 samples, 0.06%; -0.01%)</title><rect x="1156.2" y="453" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1159.18" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (7 samples, 0.01%; 0.00%)</title><rect x="24.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.23" y="511.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (1,931 samples, 3.99%; -0.02%)</title><rect x="777.8" y="389" width="47.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="780.77" y="399.5" >std:..</text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (23 samples, 0.05%; -0.00%)</title><rect x="1032.4" y="149" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1035.40" y="159.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (16 samples, 0.03%; -0.02%)</title><rect x="285.3" y="357" width="0.4" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="288.30" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (9 samples, 0.02%; 0.00%)</title><rect x="1107.2" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1110.25" y="399.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (11,047 samples, 22.85%; -0.05%)</title><rect x="872.3" y="485" width="269.6" height="15.0" fill="rgb(152,152,255)" rx="2" ry="2" />
<text  x="875.26" y="495.5" >seastar::concrete_execution_stage&lt;se..</text>
</g>
<g >
<title>seastar::internal::awaiter&lt;query::result_memory_accounter&gt;::awaiter (5 samples, 0.01%; -0.00%)</title><rect x="610.5" y="437" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="613.51" y="447.5" ></text>
</g>
<g >
<title>sstring_hash::operator (24 samples, 0.05%; -0.00%)</title><rect x="854.9" y="357" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="857.89" y="367.5" ></text>
</g>
<g >
<title>operator new (41 samples, 0.08%; -0.00%)</title><rect x="549.8" y="357" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="552.79" y="367.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%; +0.00%)</title><rect x="772.4" y="373" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="775.35" y="383.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (26 samples, 0.05%; +0.01%)</title><rect x="511.9" y="213" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="514.89" y="223.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (12 samples, 0.02%; -0.01%)</title><rect x="21.9" y="341" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="24.88" y="351.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (104 samples, 0.22%; +0.01%)</title><rect x="822.3" y="341" width="2.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="825.28" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (5 samples, 0.01%; +0.01%)</title><rect x="420.8" y="357" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="423.84" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (5 samples, 0.01%; -0.00%)</title><rect x="709.7" y="421" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="712.73" y="431.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (10 samples, 0.02%; -0.00%)</title><rect x="681.3" y="469" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="684.33" y="479.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (28 samples, 0.06%; +0.00%)</title><rect x="529.5" y="261" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="532.53" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type&gt; (6 samples, 0.01%; +0.00%)</title><rect x="970.8" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="973.80" y="383.5" ></text>
</g>
<g >
<title>malloc (21 samples, 0.04%; 0.00%)</title><rect x="601.7" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="604.70" y="383.5" ></text>
</g>
<g >
<title>operator delete (21 samples, 0.04%; -0.02%)</title><rect x="416.5" y="261" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="419.50" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (11 samples, 0.02%; +0.01%)</title><rect x="949.9" y="309" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="952.91" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (7 samples, 0.01%; +0.01%)</title><rect x="558.2" y="421" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="561.21" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (159 samples, 0.33%; +0.01%)</title><rect x="159.6" y="229" width="3.9" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="162.60" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (56 samples, 0.12%; +0.01%)</title><rect x="792.7" y="245" width="1.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="795.73" y="255.5" ></text>
</g>
<g >
<title>operator delete (55 samples, 0.11%; -0.01%)</title><rect x="582.8" y="341" width="1.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="585.83" y="351.5" ></text>
</g>
<g >
<title>database::find_column_family (109 samples, 0.23%; 0.00%)</title><rect x="1058.8" y="341" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1061.78" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (55 samples, 0.11%; +0.02%)</title><rect x="849.0" y="405" width="1.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="852.00" y="415.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (13 samples, 0.03%; 0.00%)</title><rect x="1142.7" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.68" y="287.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (6 samples, 0.01%; -0.01%)</title><rect x="606.0" y="405" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="608.97" y="415.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (206 samples, 0.43%; 0.00%)</title><rect x="17.8" y="453" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.76" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.01%)</title><rect x="942.2" y="373" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="945.18" y="383.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (12 samples, 0.02%; 0.00%)</title><rect x="809.3" y="85" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="812.30" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (29 samples, 0.06%; +0.01%)</title><rect x="1170.2" y="469" width="0.7" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1173.23" y="479.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (8 samples, 0.02%; +0.01%)</title><rect x="251.5" y="213" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="254.53" y="223.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (26 samples, 0.05%; -0.00%)</title><rect x="392.0" y="213" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="395.04" y="223.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (28 samples, 0.06%; -0.01%)</title><rect x="918.2" y="325" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="921.17" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (10 samples, 0.02%; 0.00%)</title><rect x="279.2" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="282.17" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.01%; 0.00%)</title><rect x="18.0" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.00" y="271.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (29 samples, 0.06%; -0.01%)</title><rect x="734.5" y="405" width="0.7" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="737.50" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (44 samples, 0.09%; 0.00%)</title><rect x="1021.2" y="229" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1024.22" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (40 samples, 0.08%; +0.01%)</title><rect x="270.5" y="357" width="1.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="273.54" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (49 samples, 0.10%; +0.01%)</title><rect x="446.1" y="229" width="1.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="449.12" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (72 samples, 0.15%; +0.01%)</title><rect x="917.1" y="341" width="1.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="920.09" y="351.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (10 samples, 0.02%; 0.00%)</title><rect x="870.8" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.82" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.01%; -0.01%)</title><rect x="483.7" y="181" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="486.65" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (44 samples, 0.09%; -0.01%)</title><rect x="945.7" y="405" width="1.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="948.67" y="415.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (8 samples, 0.02%; +0.01%)</title><rect x="408.5" y="213" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="411.52" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; +0.00%)</title><rect x="1044.6" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1047.55" y="271.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (5 samples, 0.01%; +0.01%)</title><rect x="1072.3" y="325" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1075.30" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (5 samples, 0.01%; +0.00%)</title><rect x="848.8" y="405" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="851.76" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (18 samples, 0.04%; +0.01%)</title><rect x="802.9" y="133" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="805.93" y="143.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (2,640 samples, 5.46%; -0.02%)</title><rect x="459.4" y="341" width="64.5" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="462.45" y="351.5" >memtabl..</text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (5 samples, 0.01%; 0.00%)</title><rect x="863.7" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.70" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (15 samples, 0.03%; 0.00%)</title><rect x="692.9" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="695.92" y="479.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (16 samples, 0.03%; -0.01%)</title><rect x="412.2" y="229" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="415.22" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (10 samples, 0.02%; +0.00%)</title><rect x="626.8" y="437" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="629.78" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (262 samples, 0.54%; +0.02%)</title><rect x="635.4" y="501" width="6.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="638.37" y="511.5" ></text>
</g>
<g >
<title>operator new (64 samples, 0.13%; 0.00%)</title><rect x="1070.7" y="325" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1073.71" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (26 samples, 0.05%; +0.02%)</title><rect x="946.7" y="405" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="949.74" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (47,301 samples, 97.82%; -0.00%)</title><rect x="24.4" y="533" width="1154.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="27.42" y="543.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>__start_context (7 samples, 0.01%; 0.00%)</title><rect x="24.2" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.23" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (65 samples, 0.13%; +0.00%)</title><rect x="696.5" y="453" width="1.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="699.46" y="463.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (13 samples, 0.03%; -0.01%)</title><rect x="449.1" y="277" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="452.12" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.01%)</title><rect x="1125.5" y="421" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1128.50" y="431.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;, &amp;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;::_link&gt;::expire (7 samples, 0.01%; +0.00%)</title><rect x="1178.3" y="437" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1181.33" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; +0.01%)</title><rect x="841.6" y="389" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="844.56" y="399.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (5 samples, 0.01%; +0.01%)</title><rect x="790.9" y="293" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="793.85" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (631 samples, 1.30%; -0.02%)</title><rect x="561.4" y="341" width="15.4" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="564.41" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (5,836 samples, 12.07%; -0.00%)</title><rect x="964.8" y="389" width="142.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="967.75" y="399.5" >service::storage_p..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (74 samples, 0.15%; -0.01%)</title><rect x="1105.0" y="373" width="1.8" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1107.98" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (6 samples, 0.01%; -0.03%)</title><rect x="299.0" y="293" width="0.2" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="302.01" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (15 samples, 0.03%; +0.01%)</title><rect x="809.8" y="213" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="812.76" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (17 samples, 0.04%; 0.00%)</title><rect x="1176.3" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.29" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.05%; +0.01%)</title><rect x="946.2" y="357" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="949.18" y="367.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (111 samples, 0.23%; +0.02%)</title><rect x="454.0" y="277" width="2.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="457.03" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (17 samples, 0.04%; -0.00%)</title><rect x="763.6" y="325" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="766.59" y="335.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.02%; +0.01%)</title><rect x="799.0" y="213" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="802.03" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (15 samples, 0.03%; +0.02%)</title><rect x="914.1" y="341" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="917.11" y="351.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (11 samples, 0.02%; 0.00%)</title><rect x="1176.3" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.29" y="415.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (7 samples, 0.01%; 0.00%)</title><rect x="24.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.23" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="964.3" y="389" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="967.26" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (8 samples, 0.02%; +0.01%)</title><rect x="654.4" y="453" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="657.41" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="1014.2" y="277" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1017.22" y="287.5" ></text>
</g>
<g >
<title>compound_type&lt; (84 samples, 0.17%; +0.02%)</title><rect x="922.8" y="373" width="2.0" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="925.75" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (22 samples, 0.05%; -0.00%)</title><rect x="1155.3" y="421" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1158.30" y="431.5" ></text>
</g>
<g >
<title>sstring_hash::operator (11 samples, 0.02%; -0.00%)</title><rect x="835.6" y="309" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="838.56" y="319.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (101 samples, 0.21%; +0.00%)</title><rect x="752.1" y="309" width="2.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="755.07" y="319.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (46 samples, 0.10%; +0.01%)</title><rect x="72.6" y="389" width="1.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="75.64" y="399.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (21 samples, 0.04%; 0.00%)</title><rect x="1141.9" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.92" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_S_do_relocate (6 samples, 0.01%; +0.00%)</title><rect x="540.8" y="325" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="543.76" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (9 samples, 0.02%; -0.01%)</title><rect x="232.3" y="213" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="235.27" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (5 samples, 0.01%; +0.01%)</title><rect x="1034.9" y="149" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1037.86" y="159.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (65 samples, 0.13%; +0.01%)</title><rect x="728.1" y="421" width="1.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="731.06" y="431.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (5 samples, 0.01%; -0.01%)</title><rect x="1098.1" y="293" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1101.12" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (28 samples, 0.06%; 0.00%)</title><rect x="1141.9" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.90" y="367.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (137 samples, 0.28%; +0.01%)</title><rect x="533.8" y="277" width="3.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="536.83" y="287.5" ></text>
</g>
<g >
<title>__start_context (278 samples, 0.57%; 0.00%)</title><rect x="17.3" y="613" width="6.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.30" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; -0.00%)</title><rect x="586.3" y="373" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="589.27" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (267 samples, 0.55%; +0.02%)</title><rect x="579.6" y="373" width="6.6" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="582.63" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.00%)</title><rect x="602.3" y="373" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="605.31" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (17 samples, 0.04%; -0.02%)</title><rect x="1024.1" y="213" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1027.05" y="223.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (505 samples, 1.04%; -0.00%)</title><rect x="1024.9" y="229" width="12.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1027.86" y="239.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (49 samples, 0.10%; +0.02%)</title><rect x="806.0" y="149" width="1.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="808.98" y="159.5" ></text>
</g>
<g >
<title>__dynamic_cast (26 samples, 0.05%; +0.03%)</title><rect x="650.4" y="469" width="0.7" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="653.43" y="479.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (15 samples, 0.03%; -0.07%)</title><rect x="228.3" y="165" width="0.4" height="15.0" fill="rgb(136,136,255)" rx="2" ry="2" />
<text  x="231.34" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (89 samples, 0.18%; +0.00%)</title><rect x="513.2" y="245" width="2.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="516.18" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (5 samples, 0.01%; +0.01%)</title><rect x="762.1" y="389" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="765.08" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (1,968 samples, 4.07%; -0.13%)</title><rect x="1005.3" y="293" width="48.0" height="15.0" fill="rgb(61,61,255)" rx="2" ry="2" />
<text  x="1008.31" y="303.5" >serv..</text>
</g>
<g >
<title>mutation_source::make_reader (4,631 samples, 9.58%; -0.04%)</title><rect x="428.3" y="405" width="113.0" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="431.28" y="415.5" >mutation_sour..</text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (50 samples, 0.10%; +0.05%)</title><rect x="239.2" y="165" width="1.2" height="15.0" fill="rgb(255,152,152)" rx="2" ry="2" />
<text  x="242.20" y="175.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.01%; +0.00%)</title><rect x="750.6" y="277" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="753.63" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (326 samples, 0.67%; +0.03%)</title><rect x="1156.9" y="469" width="8.0" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1159.93" y="479.5" ></text>
</g>
<g >
<title>operator new (39 samples, 0.08%; -0.01%)</title><rect x="1159.9" y="389" width="0.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1162.86" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (9 samples, 0.02%; -0.01%)</title><rect x="1028.0" y="197" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1030.96" y="207.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (14 samples, 0.03%; -0.01%)</title><rect x="214.1" y="149" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="217.09" y="159.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (33 samples, 0.07%; -0.01%)</title><rect x="935.4" y="357" width="0.8" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="938.44" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (13 samples, 0.03%; -0.01%)</title><rect x="609.4" y="437" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="612.43" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (25 samples, 0.05%; -0.01%)</title><rect x="613.5" y="437" width="0.6" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="616.53" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator::operator* (6 samples, 0.01%; +0.01%)</title><rect x="768.5" y="357" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="771.55" y="367.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.01%; 0.00%)</title><rect x="852.7" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="855.71" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (14 samples, 0.03%; -0.03%)</title><rect x="645.7" y="485" width="0.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="648.67" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.01%)</title><rect x="699.8" y="485" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="702.75" y="495.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (11 samples, 0.02%; +0.01%)</title><rect x="225.4" y="181" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="228.44" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (12 samples, 0.02%; -0.03%)</title><rect x="998.0" y="325" width="0.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1001.04" y="335.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (26 samples, 0.05%; +0.02%)</title><rect x="127.3" y="309" width="0.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="130.26" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (10 samples, 0.02%; +0.01%)</title><rect x="41.8" y="437" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="44.77" y="447.5" ></text>
</g>
<g >
<title>operator delete (29 samples, 0.06%; +0.00%)</title><rect x="910.2" y="309" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="913.19" y="319.5" ></text>
</g>
<g >
<title>partition_entry::read (81 samples, 0.17%; +0.01%)</title><rect x="518.7" y="309" width="2.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="521.75" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (6 samples, 0.01%; +0.01%)</title><rect x="234.3" y="261" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="237.32" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (7 samples, 0.01%; +0.01%)</title><rect x="212.4" y="101" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="215.36" y="111.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (11 samples, 0.02%; +0.02%)</title><rect x="322.6" y="149" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="325.56" y="159.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (30 samples, 0.06%; -0.01%)</title><rect x="657.7" y="469" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="660.65" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (130 samples, 0.27%; +0.02%)</title><rect x="830.0" y="325" width="3.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="833.04" y="335.5" ></text>
</g>
<g >
<title>free (102 samples, 0.21%; -0.06%)</title><rect x="402.0" y="181" width="2.4" height="15.0" fill="rgb(148,148,255)" rx="2" ry="2" />
<text  x="404.95" y="191.5" ></text>
</g>
<g >
<title>std::type_info::operator== (7 samples, 0.01%; +0.01%)</title><rect x="1075.7" y="293" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1078.72" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (15 samples, 0.03%; 0.00%)</title><rect x="437.6" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="440.63" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (53 samples, 0.11%; +0.07%)</title><rect x="79.1" y="453" width="1.3" height="15.0" fill="rgb(255,134,134)" rx="2" ry="2" />
<text  x="82.14" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (9 samples, 0.02%; +0.01%)</title><rect x="624.0" y="437" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="627.03" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (34 samples, 0.07%; -0.02%)</title><rect x="953.1" y="373" width="0.8" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="956.06" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (75 samples, 0.16%; -0.03%)</title><rect x="450.7" y="309" width="1.9" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="453.73" y="319.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (9 samples, 0.02%; +0.01%)</title><rect x="891.5" y="389" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="894.49" y="399.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (101 samples, 0.21%; +0.01%)</title><rect x="156.4" y="213" width="2.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="159.40" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (36 samples, 0.07%; +0.01%)</title><rect x="419.9" y="325" width="0.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="422.89" y="335.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (387 samples, 0.80%; -0.03%)</title><rect x="467.3" y="293" width="9.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="470.33" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; 0.00%)</title><rect x="1052.4" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1055.41" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (76 samples, 0.16%; +0.12%)</title><rect x="75.6" y="373" width="1.9" height="15.0" fill="rgb(255,75,75)" rx="2" ry="2" />
<text  x="78.60" y="383.5" ></text>
</g>
<g >
<title>operator delete (29 samples, 0.06%; -0.01%)</title><rect x="32.4" y="485" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="35.35" y="495.5" ></text>
</g>
<g >
<title>compound_type&lt; (82 samples, 0.17%; -0.00%)</title><rect x="925.5" y="357" width="2.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="928.49" y="367.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (6 samples, 0.01%; 0.00%)</title><rect x="1176.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.11" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (10 samples, 0.02%; -0.00%)</title><rect x="826.8" y="341" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="829.80" y="351.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (44 samples, 0.09%; -0.02%)</title><rect x="276.0" y="293" width="1.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="279.00" y="303.5" ></text>
</g>
<g >
<title>query::querier_base::close (1,231 samples, 2.55%; 0.00%)</title><rect x="558.0" y="437" width="30.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="560.96" y="447.5" >qu..</text>
</g>
<g >
<title>row::row (1,307 samples, 2.70%; -0.01%)</title><rect x="173.5" y="149" width="31.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="176.46" y="159.5" >ro..</text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (39 samples, 0.08%; -0.01%)</title><rect x="388.6" y="165" width="1.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="391.63" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (6 samples, 0.01%; 0.00%)</title><rect x="258.5" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="261.53" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="618.5" y="421" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="621.49" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (288 samples, 0.60%; +0.01%)</title><rect x="443.6" y="293" width="7.0" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="446.56" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (20 samples, 0.04%; -0.00%)</title><rect x="174.7" y="133" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="177.73" y="143.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (28 samples, 0.06%; 0.00%)</title><rect x="158.9" y="213" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="161.91" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (29 samples, 0.06%; +0.02%)</title><rect x="403.7" y="165" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="406.73" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (10 samples, 0.02%; +0.01%)</title><rect x="298.7" y="261" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="301.72" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.01%)</title><rect x="627.0" y="437" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="630.03" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (21 samples, 0.04%; -0.01%)</title><rect x="601.7" y="357" width="0.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="604.70" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (8 samples, 0.02%; -0.00%)</title><rect x="105.6" y="389" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="108.64" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (5 samples, 0.01%; +0.01%)</title><rect x="785.2" y="309" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="788.21" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (7 samples, 0.01%; +0.01%)</title><rect x="538.4" y="341" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="541.37" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (12 samples, 0.02%; +0.01%)</title><rect x="324.5" y="197" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="327.47" y="207.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (24 samples, 0.05%; 0.00%)</title><rect x="689.6" y="389" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.65" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (5 samples, 0.01%; 0.00%)</title><rect x="1176.4" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.41" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (9 samples, 0.02%; 0.00%)</title><rect x="701.1" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="704.14" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (20 samples, 0.04%; 0.00%)</title><rect x="870.7" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.68" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (14 samples, 0.03%; +0.01%)</title><rect x="83.8" y="453" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="86.80" y="463.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (9 samples, 0.02%; +0.01%)</title><rect x="953.6" y="341" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="956.65" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (740 samples, 1.53%; -0.01%)</title><rect x="128.1" y="309" width="18.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="131.09" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (32 samples, 0.07%; +0.01%)</title><rect x="802.7" y="149" width="0.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="805.69" y="159.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (11 samples, 0.02%; +0.00%)</title><rect x="564.0" y="325" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="566.97" y="335.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (256 samples, 0.53%; -0.00%)</title><rect x="17.7" y="501" width="6.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="20.71" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (64 samples, 0.13%; -0.02%)</title><rect x="301.6" y="261" width="1.5" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="304.55" y="271.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (84 samples, 0.17%; -0.00%)</title><rect x="822.8" y="325" width="2.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="825.77" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (33 samples, 0.07%; +0.01%)</title><rect x="126.5" y="309" width="0.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="129.46" y="319.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (14 samples, 0.03%; -0.01%)</title><rect x="1116.3" y="357" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1119.35" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (676 samples, 1.40%; -0.01%)</title><rect x="894.7" y="341" width="16.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="897.71" y="351.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (5 samples, 0.01%; 0.00%)</title><rect x="871.9" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.92" y="271.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (6 samples, 0.01%; +0.01%)</title><rect x="391.3" y="213" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="394.29" y="223.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (33 samples, 0.07%; +0.01%)</title><rect x="510.2" y="181" width="0.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="513.18" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (10 samples, 0.02%; 0.00%)</title><rect x="870.8" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.82" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (7 samples, 0.01%; 0.00%)</title><rect x="870.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.82" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (6 samples, 0.01%; +0.01%)</title><rect x="837.5" y="421" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="840.51" y="431.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (30 samples, 0.06%; -0.00%)</title><rect x="689.6" y="469" width="0.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="692.65" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (8 samples, 0.02%; -0.02%)</title><rect x="575.4" y="293" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="578.36" y="303.5" ></text>
</g>
<g >
<title>query_result_builder::consume (1,841 samples, 3.81%; +0.00%)</title><rect x="324.0" y="213" width="44.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="327.00" y="223.5" >quer..</text>
</g>
<g >
<title>logalloc::allocating_section::reserve (69 samples, 0.14%; -0.01%)</title><rect x="148.4" y="261" width="1.7" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="151.44" y="271.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (8 samples, 0.02%; -0.01%)</title><rect x="752.3" y="277" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="755.29" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (12 samples, 0.02%; +0.00%)</title><rect x="508.5" y="213" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="511.50" y="223.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (55 samples, 0.11%; +0.02%)</title><rect x="519.4" y="293" width="1.3" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="522.38" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (63 samples, 0.13%; 0.00%)</title><rect x="18.0" y="357" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.96" y="367.5" ></text>
</g>
<g >
<title>operator delete (85 samples, 0.18%; -0.05%)</title><rect x="97.8" y="437" width="2.1" height="15.0" fill="rgb(159,159,255)" rx="2" ry="2" />
<text  x="100.78" y="447.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (6 samples, 0.01%; -0.02%)</title><rect x="295.7" y="293" width="0.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="298.67" y="303.5" ></text>
</g>
<g >
<title>schema::column_at (63 samples, 0.13%; +0.02%)</title><rect x="202.3" y="117" width="1.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="205.33" y="127.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (5 samples, 0.01%; +0.01%)</title><rect x="819.5" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="822.45" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (66 samples, 0.14%; 0.00%)</title><rect x="864.1" y="469" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.06" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.06%; -0.01%)</title><rect x="917.5" y="309" width="0.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="920.48" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (22 samples, 0.05%; +0.00%)</title><rect x="1052.0" y="213" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1055.04" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (11 samples, 0.02%; 0.00%)</title><rect x="233.6" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="236.61" y="255.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (10 samples, 0.02%; +0.00%)</title><rect x="659.2" y="437" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="662.24" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (7 samples, 0.01%; -0.00%)</title><rect x="712.1" y="453" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="715.12" y="463.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (8 samples, 0.02%; +0.01%)</title><rect x="939.6" y="325" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="942.64" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (12 samples, 0.02%; +0.01%)</title><rect x="646.0" y="485" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="649.01" y="495.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (25 samples, 0.05%; +0.03%)</title><rect x="614.1" y="437" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="617.14" y="447.5" ></text>
</g>
<g >
<title>__tls_init (16 samples, 0.03%; 0.00%)</title><rect x="148.7" y="245" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="151.69" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (74 samples, 0.15%; -0.01%)</title><rect x="825.3" y="389" width="1.8" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="828.28" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (752 samples, 1.56%; +0.04%)</title><rect x="372.9" y="197" width="18.4" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="375.93" y="207.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (886 samples, 1.83%; +0.01%)</title><rect x="647.1" y="501" width="21.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="650.09" y="511.5" >s..</text>
</g>
<g >
<title>range_tombstone_list::slice (39 samples, 0.08%; -0.00%)</title><rect x="219.9" y="149" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="222.90" y="159.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (9 samples, 0.02%; 0.00%)</title><rect x="20.8" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.84" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (23 samples, 0.05%; +0.01%)</title><rect x="794.7" y="229" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="797.73" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (12 samples, 0.02%; -0.00%)</title><rect x="410.7" y="229" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="413.69" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (16 samples, 0.03%; -0.02%)</title><rect x="1131.7" y="373" width="0.4" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1134.70" y="383.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (12 samples, 0.02%; -0.00%)</title><rect x="707.2" y="453" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="710.19" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (8 samples, 0.02%; +0.01%)</title><rect x="1002.6" y="245" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1005.58" y="255.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (7 samples, 0.01%; +0.00%)</title><rect x="130.7" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="133.68" y="287.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (30 samples, 0.06%; 0.00%)</title><rect x="1122.3" y="389" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.33" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (6 samples, 0.01%; -0.00%)</title><rect x="133.9" y="261" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="136.95" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (457 samples, 0.95%; -0.06%)</title><rect x="134.3" y="277" width="11.1" height="15.0" fill="rgb(148,148,255)" rx="2" ry="2" />
<text  x="137.29" y="287.5" ></text>
</g>
<g >
<title>database::find_schema (74 samples, 0.15%; +0.01%)</title><rect x="762.2" y="389" width="1.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="765.20" y="399.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (5 samples, 0.01%; +0.01%)</title><rect x="1073.1" y="309" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1076.13" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (41 samples, 0.08%; 0.00%)</title><rect x="1142.7" y="325" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.68" y="335.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (16 samples, 0.03%; -0.01%)</title><rect x="515.0" y="229" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="517.96" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (9 samples, 0.02%; -0.00%)</title><rect x="1100.9" y="341" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1103.85" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (18 samples, 0.04%; +0.01%)</title><rect x="611.3" y="437" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="614.31" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (19 samples, 0.04%; +0.02%)</title><rect x="296.8" y="261" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="299.77" y="271.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (121 samples, 0.25%; -0.02%)</title><rect x="1114.9" y="389" width="3.0" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1117.93" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (6 samples, 0.01%; +0.01%)</title><rect x="1077.5" y="309" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1080.52" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (9 samples, 0.02%; +0.01%)</title><rect x="584.8" y="357" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="587.83" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (36 samples, 0.07%; +0.01%)</title><rect x="991.8" y="293" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="994.82" y="303.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (61 samples, 0.13%; -0.02%)</title><rect x="796.8" y="181" width="1.5" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="799.78" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (16 samples, 0.03%; 0.00%)</title><rect x="232.5" y="229" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="235.49" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (112 samples, 0.23%; +0.00%)</title><rect x="947.5" y="405" width="2.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="950.45" y="415.5" ></text>
</g>
<g >
<title>table::query (44 samples, 0.09%; +0.00%)</title><rect x="1176.0" y="501" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1179.04" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (20 samples, 0.04%; -0.01%)</title><rect x="298.2" y="245" width="0.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="301.21" y="255.5" ></text>
</g>
<g >
<title>database::find_uuid (166 samples, 0.34%; +0.01%)</title><rect x="829.4" y="357" width="4.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="832.41" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (24 samples, 0.05%; +0.00%)</title><rect x="451.9" y="293" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="454.88" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (41 samples, 0.08%; -0.01%)</title><rect x="659.0" y="453" width="1.0" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="662.00" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (33 samples, 0.07%; +0.00%)</title><rect x="588.9" y="421" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="591.86" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (9 samples, 0.02%; -0.01%)</title><rect x="553.0" y="277" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="556.01" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (23 samples, 0.05%; -0.02%)</title><rect x="1071.7" y="293" width="0.6" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1074.71" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (7 samples, 0.01%; -0.00%)</title><rect x="911.0" y="293" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="913.97" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (46 samples, 0.10%; -0.03%)</title><rect x="1161.0" y="421" width="1.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1164.03" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (50 samples, 0.10%; +0.00%)</title><rect x="910.0" y="325" width="1.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="912.99" y="335.5" ></text>
</g>
<g >
<title>operator new (71 samples, 0.15%; 0.00%)</title><rect x="1000.6" y="261" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1003.58" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (21 samples, 0.04%; +0.01%)</title><rect x="677.7" y="453" width="0.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="680.69" y="463.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (8 samples, 0.02%; -0.00%)</title><rect x="20.4" y="309" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="23.42" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (8 samples, 0.02%; 0.00%)</title><rect x="71.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.89" y="399.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (26 samples, 0.05%; +0.01%)</title><rect x="1040.5" y="245" width="0.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1043.50" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (6 samples, 0.01%; +0.01%)</title><rect x="42.8" y="469" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="45.80" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (11 samples, 0.02%; 0.00%)</title><rect x="544.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="547.27" y="431.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::set_latency (6 samples, 0.01%; +0.00%)</title><rect x="630.5" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="633.49" y="447.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (119 samples, 0.25%; +0.00%)</title><rect x="708.5" y="437" width="2.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="711.51" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (9 samples, 0.02%; -0.03%)</title><rect x="85.1" y="453" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="88.07" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (30 samples, 0.06%; -0.01%)</title><rect x="665.4" y="485" width="0.7" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="668.39" y="495.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (72 samples, 0.15%; +0.01%)</title><rect x="810.5" y="261" width="1.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="813.47" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (20 samples, 0.04%; -0.00%)</title><rect x="769.2" y="405" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="772.18" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.02%)</title><rect x="906.9" y="277" width="0.2" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="909.92" y="287.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (15 samples, 0.03%; +0.01%)</title><rect x="405.0" y="197" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="408.00" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (30 samples, 0.06%; +0.00%)</title><rect x="294.1" y="277" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="297.06" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (7 samples, 0.01%; -0.01%)</title><rect x="918.8" y="357" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="921.85" y="367.5" ></text>
</g>
<g >
<title>seastar::gate::leave (14 samples, 0.03%; +0.02%)</title><rect x="610.2" y="437" width="0.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="613.16" y="447.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (17 samples, 0.04%; +0.02%)</title><rect x="855.0" y="325" width="0.4" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="858.01" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (9 samples, 0.02%; +0.00%)</title><rect x="21.3" y="277" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="24.35" y="287.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (356 samples, 0.74%; -0.03%)</title><rect x="545.6" y="405" width="8.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="548.64" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (7 samples, 0.01%; -0.01%)</title><rect x="584.7" y="357" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="587.66" y="367.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (5 samples, 0.01%; -0.01%)</title><rect x="831.5" y="261" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="834.51" y="271.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (19 samples, 0.04%; +0.02%)</title><rect x="553.8" y="389" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="556.82" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (17 samples, 0.04%; +0.00%)</title><rect x="542.9" y="405" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="545.91" y="415.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (157 samples, 0.32%; -0.03%)</title><rect x="471.5" y="261" width="3.8" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="474.45" y="271.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (24 samples, 0.05%; 0.00%)</title><rect x="1178.0" y="501" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1181.02" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::future (13 samples, 0.03%; +0.02%)</title><rect x="970.0" y="373" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="973.05" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (43 samples, 0.09%; 0.00%)</title><rect x="1142.7" y="373" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.66" y="383.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.04%; -0.01%)</title><rect x="457.4" y="293" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="460.40" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (6 samples, 0.01%; -0.01%)</title><rect x="846.7" y="357" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="849.71" y="367.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (11 samples, 0.02%; +0.02%)</title><rect x="318.3" y="181" width="0.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="321.32" y="191.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (21 samples, 0.04%; +0.00%)</title><rect x="733.9" y="293" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="736.92" y="303.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (30 samples, 0.06%; +0.02%)</title><rect x="1169.5" y="469" width="0.7" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1172.50" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (10 samples, 0.02%; 0.00%)</title><rect x="548.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="550.98" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (7 samples, 0.01%; +0.00%)</title><rect x="228.0" y="117" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="231.02" y="127.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (10 samples, 0.02%; +0.00%)</title><rect x="854.3" y="325" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="857.35" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (7 samples, 0.01%; +0.00%)</title><rect x="773.4" y="341" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="776.40" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (6 samples, 0.01%; -0.00%)</title><rect x="108.4" y="421" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="111.40" y="431.5" ></text>
</g>
<g >
<title>main (47,302 samples, 97.83%; 0.00%)</title><rect x="24.4" y="613" width="1154.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.42" y="623.5" >main</text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (6 samples, 0.01%; +0.01%)</title><rect x="744.4" y="309" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="747.36" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; 0.00%)</title><rect x="785.1" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="788.09" y="271.5" ></text>
</g>
<g >
<title>operator new (55 samples, 0.11%; -0.00%)</title><rect x="1038.1" y="213" width="1.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1041.13" y="223.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (12 samples, 0.02%; +0.02%)</title><rect x="338.4" y="181" width="0.3" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="341.38" y="191.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (15 samples, 0.03%; 0.00%)</title><rect x="871.8" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.82" y="399.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (15 samples, 0.03%; +0.02%)</title><rect x="600.2" y="405" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="603.23" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (8 samples, 0.02%; -0.01%)</title><rect x="1053.8" y="293" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1056.80" y="303.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (5 samples, 0.01%; 0.00%)</title><rect x="533.0" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="536.05" y="319.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (166 samples, 0.34%; +0.00%)</title><rect x="471.2" y="277" width="4.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="474.23" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (31 samples, 0.06%; -0.01%)</title><rect x="912.0" y="277" width="0.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="915.04" y="287.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (20 samples, 0.04%; -0.00%)</title><rect x="1174.5" y="421" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1177.50" y="431.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (45 samples, 0.09%; +0.03%)</title><rect x="317.2" y="181" width="1.1" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="320.22" y="191.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (4,606 samples, 9.53%; -0.00%)</title><rect x="428.9" y="389" width="112.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="431.89" y="399.5" >std::function..</text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (5 samples, 0.01%; +0.00%)</title><rect x="626.6" y="405" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="629.59" y="415.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (30 samples, 0.06%; -0.00%)</title><rect x="580.9" y="357" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="583.93" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (5 samples, 0.01%; -0.00%)</title><rect x="840.1" y="389" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="843.07" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (97 samples, 0.20%; +0.02%)</title><rect x="1158.5" y="453" width="2.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1161.47" y="463.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (50 samples, 0.10%; -0.03%)</title><rect x="242.0" y="181" width="1.3" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="245.03" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (18 samples, 0.04%; 0.00%)</title><rect x="1052.1" y="197" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1055.14" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (12 samples, 0.02%; 0.00%)</title><rect x="851.9" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="854.88" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (6 samples, 0.01%; -0.01%)</title><rect x="850.4" y="421" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="853.40" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (14 samples, 0.03%; -0.03%)</title><rect x="687.3" y="437" width="0.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="690.33" y="447.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10 samples, 0.02%; +0.00%)</title><rect x="1159.4" y="405" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1162.37" y="415.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (33 samples, 0.07%; -0.01%)</title><rect x="1131.3" y="389" width="0.8" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1134.28" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (6 samples, 0.01%; -0.03%)</title><rect x="10.4" y="581" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="13.41" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (23 samples, 0.05%; +0.01%)</title><rect x="230.1" y="197" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="233.10" y="207.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (8 samples, 0.02%; -0.00%)</title><rect x="891.7" y="389" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="894.71" y="399.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (19 samples, 0.04%; -0.01%)</title><rect x="375.4" y="181" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="378.35" y="191.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.09%; 0.00%)</title><rect x="1188.9" y="629" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1191.90" y="639.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (38 samples, 0.08%; +0.01%)</title><rect x="923.4" y="357" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="926.41" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (20 samples, 0.04%; +0.00%)</title><rect x="988.5" y="293" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="991.52" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (7 samples, 0.01%; 0.00%)</title><rect x="690.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="693.40" y="511.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (21 samples, 0.04%; -0.00%)</title><rect x="854.1" y="341" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="857.08" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (8 samples, 0.02%; +0.01%)</title><rect x="1110.7" y="373" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1113.74" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (23 samples, 0.05%; -0.00%)</title><rect x="566.1" y="293" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="569.07" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (11 samples, 0.02%; +0.02%)</title><rect x="1030.5" y="149" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1033.52" y="159.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (8 samples, 0.02%; +0.01%)</title><rect x="588.0" y="437" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="591.01" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="1037.0" y="213" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1039.96" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (16 samples, 0.03%; +0.01%)</title><rect x="78.2" y="453" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="81.21" y="463.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (16 samples, 0.03%; +0.01%)</title><rect x="163.0" y="213" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="165.96" y="223.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (17 samples, 0.04%; -0.01%)</title><rect x="37.5" y="437" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="40.53" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (22 samples, 0.05%; +0.01%)</title><rect x="393.6" y="229" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="396.63" y="239.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (7 samples, 0.01%; +0.01%)</title><rect x="868.2" y="485" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="871.19" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (5,674 samples, 11.73%; +0.01%)</title><rect x="124.4" y="325" width="138.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="127.41" y="335.5" >mutation_reader_m..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (58 samples, 0.12%; +0.01%)</title><rect x="221.5" y="181" width="1.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="224.48" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (65 samples, 0.13%; +0.00%)</title><rect x="1128.6" y="389" width="1.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1131.58" y="399.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (43 samples, 0.09%; -0.02%)</title><rect x="507.2" y="213" width="1.0" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="510.16" y="223.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (35 samples, 0.07%; +0.01%)</title><rect x="832.4" y="309" width="0.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="835.36" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator::operator* (5 samples, 0.01%; +0.01%)</title><rect x="769.0" y="373" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="771.98" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (8 samples, 0.02%; +0.00%)</title><rect x="855.6" y="405" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="858.57" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (7 samples, 0.01%; +0.01%)</title><rect x="982.6" y="357" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="985.62" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.01%; 0.00%)</title><rect x="20.1" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.05" y="335.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (11 samples, 0.02%; +0.01%)</title><rect x="841.3" y="373" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="844.27" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (10,793 samples, 22.32%; +0.12%)</title><rect x="878.3" y="453" width="263.4" height="15.0" fill="rgb(255,75,75)" rx="2" ry="2" />
<text  x="881.34" y="463.5" >seastar::noncopyable_function&lt;seast..</text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (11 samples, 0.02%; -0.01%)</title><rect x="1150.7" y="485" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1153.73" y="495.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (75 samples, 0.16%; +0.00%)</title><rect x="796.4" y="197" width="1.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="799.44" y="207.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (16 samples, 0.03%; -0.01%)</title><rect x="929.2" y="357" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="932.22" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.01%; +0.01%)</title><rect x="637.9" y="469" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="640.86" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (67 samples, 0.14%; -0.01%)</title><rect x="246.7" y="213" width="1.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="249.67" y="223.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (23 samples, 0.05%; +0.02%)</title><rect x="82.5" y="453" width="0.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="85.53" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (33 samples, 0.07%; -0.01%)</title><rect x="136.9" y="245" width="0.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="139.85" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (475 samples, 0.98%; +0.02%)</title><rect x="648.5" y="485" width="11.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="651.53" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (5 samples, 0.01%; +0.01%)</title><rect x="1139.1" y="421" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1142.12" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; 0.00%)</title><rect x="565.2" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="568.24" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (20 samples, 0.04%; -0.03%)</title><rect x="201.3" y="117" width="0.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="204.28" y="127.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (31 samples, 0.06%; +0.01%)</title><rect x="830.9" y="293" width="0.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="833.87" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (7 samples, 0.01%; +0.01%)</title><rect x="559.7" y="357" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="562.67" y="367.5" ></text>
</g>
<g >
<title>row_tombstone::apply (17 samples, 0.04%; -0.01%)</title><rect x="391.4" y="213" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="394.43" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (235 samples, 0.49%; +0.01%)</title><rect x="748.9" y="341" width="5.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="751.88" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (8 samples, 0.02%; -0.01%)</title><rect x="530.5" y="309" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="533.51" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (30 samples, 0.06%; 0.00%)</title><rect x="152.9" y="245" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="155.86" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (130 samples, 0.27%; +0.01%)</title><rect x="1049.4" y="261" width="3.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1052.41" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (17 samples, 0.04%; 0.00%)</title><rect x="271.1" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="274.10" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (6 samples, 0.01%; +0.01%)</title><rect x="898.8" y="309" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="901.76" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (18 samples, 0.04%; -0.03%)</title><rect x="213.6" y="149" width="0.4" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="216.58" y="159.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (5 samples, 0.01%; +0.00%)</title><rect x="18.6" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="21.59" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="718.6" y="501" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="721.61" y="511.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (63 samples, 0.13%; +0.01%)</title><rect x="419.3" y="357" width="1.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="422.30" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (13 samples, 0.03%; +0.01%)</title><rect x="537.2" y="277" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="540.17" y="287.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (4,236 samples, 8.76%; +0.16%)</title><rect x="735.6" y="437" width="103.4" height="15.0" fill="rgb(255,38,38)" rx="2" ry="2" />
<text  x="738.60" y="447.5" >cql3::query_..</text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (562 samples, 1.16%; +0.01%)</title><rect x="702.5" y="501" width="13.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="705.51" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (5 samples, 0.01%; +0.01%)</title><rect x="997.8" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1000.82" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (73 samples, 0.15%; -0.01%)</title><rect x="666.8" y="453" width="1.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="669.81" y="463.5" ></text>
</g>
<g >
<title>range_tombstone_stream::empty (5 samples, 0.01%; -0.00%)</title><rect x="231.7" y="229" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="234.66" y="239.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (5 samples, 0.01%; +0.01%)</title><rect x="577.0" y="373" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="579.95" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (29 samples, 0.06%; -0.04%)</title><rect x="656.2" y="469" width="0.7" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="659.21" y="479.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (12 samples, 0.02%; +0.02%)</title><rect x="1034.3" y="165" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1037.25" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (23 samples, 0.05%; +0.04%)</title><rect x="80.4" y="453" width="0.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="83.43" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="508.2" y="229" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="511.20" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (22 samples, 0.05%; +0.01%)</title><rect x="543.5" y="405" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="546.54" y="415.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::operator= (6 samples, 0.01%; +0.00%)</title><rect x="912.8" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="915.85" y="319.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (80 samples, 0.17%; -0.04%)</title><rect x="366.2" y="165" width="2.0" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="369.20" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (5 samples, 0.01%; -0.01%)</title><rect x="229.0" y="181" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="232.00" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (15 samples, 0.03%; +0.01%)</title><rect x="1069.3" y="341" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1072.32" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (19 samples, 0.04%; -0.01%)</title><rect x="640.6" y="469" width="0.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="643.62" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (18 samples, 0.04%; -0.00%)</title><rect x="1126.9" y="421" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1129.87" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (5 samples, 0.01%; 0.00%)</title><rect x="20.5" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.49" y="255.5" ></text>
</g>
<g >
<title>operator delete (13 samples, 0.03%; +0.00%)</title><rect x="673.5" y="469" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="676.54" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (5 samples, 0.01%; 0.00%)</title><rect x="451.8" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="454.76" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (41 samples, 0.08%; +0.00%)</title><rect x="806.2" y="133" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="809.18" y="143.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (6 samples, 0.01%; -0.01%)</title><rect x="1062.0" y="309" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1064.98" y="319.5" ></text>
</g>
<g >
<title>operator delete (31 samples, 0.06%; -0.01%)</title><rect x="815.8" y="277" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="818.82" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (456 samples, 0.94%; -0.01%)</title><rect x="565.4" y="325" width="11.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="568.41" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (12 samples, 0.02%; -0.02%)</title><rect x="1039.2" y="181" width="0.3" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="1042.18" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.00%)</title><rect x="825.8" y="357" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="828.77" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.00%)</title><rect x="538.0" y="325" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="540.95" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt;::operator (11 samples, 0.02%; -0.01%)</title><rect x="74.3" y="389" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="77.28" y="399.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (15 samples, 0.03%; +0.01%)</title><rect x="1137.3" y="421" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1140.31" y="431.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (11 samples, 0.02%; -0.01%)</title><rect x="144.7" y="261" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="147.68" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (9 samples, 0.02%; +0.01%)</title><rect x="1121.2" y="341" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1124.23" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (13 samples, 0.03%; +0.02%)</title><rect x="769.7" y="405" width="0.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="772.67" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (108 samples, 0.22%; +0.00%)</title><rect x="852.9" y="389" width="2.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="855.86" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (24 samples, 0.05%; -0.01%)</title><rect x="949.6" y="325" width="0.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="952.60" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (25 samples, 0.05%; +0.03%)</title><rect x="352.7" y="149" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="355.68" y="159.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (213 samples, 0.44%; +0.00%)</title><rect x="674.1" y="485" width="5.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="677.10" y="495.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (2,403 samples, 4.97%; -0.01%)</title><rect x="997.0" y="341" width="58.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="999.99" y="351.5" >servic..</text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (16 samples, 0.03%; +0.01%)</title><rect x="556.6" y="421" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="559.65" y="431.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (5 samples, 0.01%; 0.00%)</title><rect x="1098.1" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1101.12" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (8 samples, 0.02%; +0.01%)</title><rect x="71.7" y="389" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="74.69" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.01%)</title><rect x="38.5" y="405" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="41.45" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (124 samples, 0.26%; -0.04%)</title><rect x="1073.3" y="309" width="3.0" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="1076.25" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (5 samples, 0.01%; +0.01%)</title><rect x="394.8" y="229" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="397.82" y="239.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (17 samples, 0.04%; -0.00%)</title><rect x="924.3" y="357" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="927.34" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (9 samples, 0.02%; +0.01%)</title><rect x="488.9" y="325" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="491.93" y="335.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (76 samples, 0.16%; +0.02%)</title><rect x="721.9" y="437" width="1.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="724.93" y="447.5" ></text>
</g>
<g >
<title>__dynamic_cast (11 samples, 0.02%; -0.01%)</title><rect x="14.1" y="581" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="17.15" y="591.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (123 samples, 0.25%; +0.01%)</title><rect x="363.2" y="165" width="3.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="366.20" y="175.5" ></text>
</g>
<g >
<title>table::make_reader (4,479 samples, 9.26%; -0.00%)</title><rect x="432.0" y="357" width="109.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="434.99" y="367.5" >table::make_r..</text>
</g>
<g >
<title>service::client_state::has_column_family_access (2,698 samples, 5.58%; +0.05%)</title><rect x="770.1" y="405" width="65.8" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="773.11" y="415.5" >service..</text>
</g>
<g >
<title>list_reader_selector::create_new_readers (41 samples, 0.08%; -0.00%)</title><rect x="443.9" y="277" width="1.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="446.93" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (13 samples, 0.03%; +0.01%)</title><rect x="522.2" y="325" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="525.21" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (7 samples, 0.01%; +0.00%)</title><rect x="174.4" y="133" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="177.36" y="143.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (8 samples, 0.02%; +0.01%)</title><rect x="1140.6" y="421" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1143.63" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (24 samples, 0.05%; +0.04%)</title><rect x="151.7" y="245" width="0.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="154.74" y="255.5" ></text>
</g>
<g >
<title>service::client_state::has_access (1,886 samples, 3.90%; -0.01%)</title><rect x="778.8" y="373" width="46.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="781.79" y="383.5" >serv..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (9 samples, 0.02%; +0.00%)</title><rect x="819.6" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="822.57" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.06%; 0.00%)</title><rect x="1141.9" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.90" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (15 samples, 0.03%; -0.01%)</title><rect x="745.3" y="293" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="748.34" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (57 samples, 0.12%; -0.00%)</title><rect x="263.2" y="325" width="1.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="266.19" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (27 samples, 0.06%; 0.00%)</title><rect x="940.8" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="943.84" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (19 samples, 0.04%; +0.00%)</title><rect x="1053.3" y="293" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1056.34" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (179 samples, 0.37%; -0.01%)</title><rect x="224.8" y="197" width="4.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="227.75" y="207.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (10,871 samples, 22.48%; +0.04%)</title><rect x="876.4" y="469" width="265.3" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="879.43" y="479.5" >seastar::noncopyable_function&lt;seast..</text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (14 samples, 0.03%; 0.00%)</title><rect x="824.5" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="827.45" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (10 samples, 0.02%; +0.02%)</title><rect x="65.6" y="437" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="68.62" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (211 samples, 0.44%; -0.04%)</title><rect x="255.6" y="293" width="5.2" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="258.62" y="303.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (63 samples, 0.13%; +0.00%)</title><rect x="20.3" y="341" width="1.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="23.35" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (21 samples, 0.04%; 0.00%)</title><rect x="463.9" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="466.91" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (5 samples, 0.01%; -0.01%)</title><rect x="107.3" y="405" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="110.35" y="415.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (5 samples, 0.01%; +0.01%)</title><rect x="689.5" y="485" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="692.48" y="495.5" ></text>
</g>
<g >
<title>operator new (47 samples, 0.10%; +0.00%)</title><rect x="535.9" y="261" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="538.93" y="271.5" ></text>
</g>
<g >
<title>[unknown] (591 samples, 1.22%; 0.00%)</title><rect x="10.0" y="629" width="14.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (588 samples, 1.22%; -0.00%)</title><rect x="795.8" y="229" width="14.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="798.78" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (25 samples, 0.05%; +0.01%)</title><rect x="672.0" y="485" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="674.95" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (7 samples, 0.01%; -0.00%)</title><rect x="390.9" y="165" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="393.94" y="175.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (43 samples, 0.09%; 0.00%)</title><rect x="1142.7" y="357" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.66" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.06%; 0.00%)</title><rect x="1141.9" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.90" y="431.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (23 samples, 0.05%; +0.03%)</title><rect x="411.0" y="245" width="0.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="413.98" y="255.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (13 samples, 0.03%; 0.00%)</title><rect x="1143.1" y="181" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.12" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (26 samples, 0.05%; +0.00%)</title><rect x="153.0" y="229" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="155.96" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (3,439 samples, 7.11%; -0.01%)</title><rect x="150.4" y="261" width="83.9" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="153.37" y="271.5" >partition..</text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (42 samples, 0.09%; -0.00%)</title><rect x="264.6" y="325" width="1.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="267.58" y="335.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::make&lt;managed_bytes&gt; (5 samples, 0.01%; +0.00%)</title><rect x="913.5" y="325" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="916.46" y="335.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (188 samples, 0.39%; 0.00%)</title><rect x="1128.3" y="421" width="4.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.26" y="431.5" ></text>
</g>
<g >
<title>database::find_keyspace (23 samples, 0.05%; +0.04%)</title><rect x="974.6" y="357" width="0.6" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="977.61" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (6 samples, 0.01%; +0.00%)</title><rect x="949.2" y="357" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="952.16" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (5 samples, 0.01%; +0.01%)</title><rect x="41.2" y="437" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="44.16" y="447.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (472 samples, 0.98%; +0.00%)</title><rect x="743.3" y="389" width="11.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="746.31" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (333 samples, 0.69%; +0.01%)</title><rect x="801.5" y="197" width="8.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="804.51" y="207.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (36 samples, 0.07%; +0.03%)</title><rect x="746.2" y="357" width="0.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="749.24" y="367.5" ></text>
</g>
<g >
<title>query_state::query_state (6 samples, 0.01%; +0.01%)</title><rect x="61.3" y="453" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="64.32" y="463.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (14 samples, 0.03%; +0.00%)</title><rect x="1067.1" y="341" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1070.08" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (738 samples, 1.53%; +0.01%)</title><rect x="498.9" y="293" width="18.0" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="501.88" y="303.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (6 samples, 0.01%; +0.00%)</title><rect x="1108.0" y="373" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1111.03" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.01%; -0.00%)</title><rect x="810.9" y="229" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="813.91" y="239.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.02%; -0.01%)</title><rect x="487.1" y="181" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="490.07" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (9 samples, 0.02%; +0.01%)</title><rect x="700.6" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="703.58" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (19 samples, 0.04%; -0.01%)</title><rect x="953.4" y="357" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="956.40" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (10 samples, 0.02%; -0.00%)</title><rect x="1036.2" y="213" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1039.18" y="223.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (946 samples, 1.96%; -0.01%)</title><rect x="791.3" y="277" width="23.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="794.34" y="287.5" >a..</text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (21 samples, 0.04%; +0.02%)</title><rect x="663.1" y="485" width="0.6" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="666.14" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_limit (22 samples, 0.05%; +0.02%)</title><rect x="1111.0" y="421" width="0.6" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1114.03" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (159 samples, 0.33%; -0.00%)</title><rect x="730.5" y="357" width="3.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="733.55" y="367.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (5 samples, 0.01%; +0.00%)</title><rect x="1046.1" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1049.07" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (9 samples, 0.02%; -0.01%)</title><rect x="688.0" y="437" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="691.01" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (16 samples, 0.03%; +0.01%)</title><rect x="390.6" y="149" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="393.55" y="159.5" ></text>
</g>
<g >
<title>compound_type&lt; (8 samples, 0.02%; +0.00%)</title><rect x="922.4" y="389" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="925.39" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (5 samples, 0.01%; 0.00%)</title><rect x="20.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.93" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (9 samples, 0.02%; +0.01%)</title><rect x="1077.7" y="325" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1080.67" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (63 samples, 0.13%; -0.01%)</title><rect x="370.2" y="197" width="1.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="373.15" y="207.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (40 samples, 0.08%; +0.01%)</title><rect x="843.5" y="421" width="1.0" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="846.51" y="431.5" ></text>
</g>
<g >
<title>operator delete (52 samples, 0.11%; +0.02%)</title><rect x="282.8" y="293" width="1.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="285.81" y="303.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (463 samples, 0.96%; +0.01%)</title><rect x="703.9" y="485" width="11.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="706.95" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (5 samples, 0.01%; -0.01%)</title><rect x="148.1" y="261" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="151.08" y="271.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (14 samples, 0.03%; -0.01%)</title><rect x="63.5" y="421" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="66.52" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (83 samples, 0.17%; +0.01%)</title><rect x="752.5" y="277" width="2.0" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="755.49" y="287.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (10 samples, 0.02%; -0.00%)</title><rect x="731.8" y="293" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="734.77" y="303.5" ></text>
</g>
<g >
<title>query::result::result (11 samples, 0.02%; +0.01%)</title><rect x="613.0" y="421" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="616.00" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (7 samples, 0.01%; 0.00%)</title><rect x="24.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.23" y="559.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (9 samples, 0.02%; -0.02%)</title><rect x="1064.1" y="261" width="0.2" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="1067.08" y="271.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (8 samples, 0.02%; +0.00%)</title><rect x="824.9" y="389" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="827.92" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (129 samples, 0.27%; -0.01%)</title><rect x="999.7" y="293" width="3.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1002.75" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (9 samples, 0.02%; -0.02%)</title><rect x="644.2" y="485" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="647.16" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1,200 samples, 2.48%; +0.02%)</title><rect x="558.5" y="405" width="29.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="561.48" y="415.5" >fl..</text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (6 samples, 0.01%; +0.00%)</title><rect x="1146.3" y="501" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1149.27" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (64 samples, 0.13%; -0.01%)</title><rect x="1159.3" y="421" width="1.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1162.28" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (12 samples, 0.02%; -0.01%)</title><rect x="412.6" y="229" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="415.61" y="239.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (18 samples, 0.04%; -0.02%)</title><rect x="636.3" y="485" width="0.5" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="639.35" y="495.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (26 samples, 0.05%; +0.02%)</title><rect x="214.5" y="165" width="0.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="217.46" y="175.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; -0.00%)</title><rect x="591.2" y="405" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="594.15" y="415.5" ></text>
</g>
<g >
<title>utils::array_search_gt (5 samples, 0.01%; +0.00%)</title><rect x="530.3" y="277" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="533.29" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (26 samples, 0.05%; +0.00%)</title><rect x="896.6" y="277" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="899.57" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (16 samples, 0.03%; -0.01%)</title><rect x="63.1" y="421" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="66.08" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (12 samples, 0.02%; +0.01%)</title><rect x="265.6" y="325" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="268.61" y="335.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (6 samples, 0.01%; 0.00%)</title><rect x="1142.8" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.80" y="255.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (9 samples, 0.02%; +0.01%)</title><rect x="249.3" y="229" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="252.33" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.00%)</title><rect x="36.1" y="453" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="39.14" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (7 samples, 0.01%; 0.00%)</title><rect x="20.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.88" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="1014.1" y="277" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1017.10" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (5 samples, 0.01%; 0.00%)</title><rect x="612.2" y="421" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="615.21" y="431.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (12 samples, 0.02%; -0.00%)</title><rect x="371.9" y="197" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="374.93" y="207.5" ></text>
</g>
<g >
<title>query::result::builder::builder (174 samples, 0.36%; -0.00%)</title><rect x="598.5" y="421" width="4.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="601.55" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (6 samples, 0.01%; +0.01%)</title><rect x="45.8" y="469" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="48.82" y="479.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; -0.05%)</title><rect x="581.7" y="357" width="0.7" height="15.0" fill="rgb(152,152,255)" rx="2" ry="2" />
<text  x="584.66" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (21 samples, 0.04%; -0.02%)</title><rect x="1075.2" y="293" width="0.5" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="1078.20" y="303.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (130 samples, 0.27%; +0.00%)</title><rect x="1153.8" y="469" width="3.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1156.76" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (20 samples, 0.04%; +0.04%)</title><rect x="908.9" y="293" width="0.5" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="911.92" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; +0.01%)</title><rect x="661.4" y="485" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="664.41" y="495.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (8 samples, 0.02%; +0.00%)</title><rect x="1143.2" y="149" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1146.22" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (13 samples, 0.03%; +0.01%)</title><rect x="1077.9" y="325" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1080.89" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (25 samples, 0.05%; +0.00%)</title><rect x="628.2" y="373" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="631.17" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (11 samples, 0.02%; -0.00%)</title><rect x="1143.7" y="485" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1146.71" y="495.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (13 samples, 0.03%; +0.02%)</title><rect x="523.3" y="325" width="0.4" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="526.34" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (5 samples, 0.01%; +0.01%)</title><rect x="117.5" y="389" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="120.47" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (6 samples, 0.01%; 0.00%)</title><rect x="636.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="639.94" y="495.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.01%; +0.01%)</title><rect x="289.3" y="389" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="292.30" y="399.5" ></text>
</g>
<g >
<title>operator delete (33 samples, 0.07%; -0.01%)</title><rect x="812.3" y="245" width="0.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="815.30" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (5 samples, 0.01%; -0.00%)</title><rect x="228.9" y="181" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="231.88" y="191.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (13 samples, 0.03%; -0.00%)</title><rect x="1178.3" y="453" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1181.26" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (70 samples, 0.14%; +0.02%)</title><rect x="895.5" y="293" width="1.7" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="898.49" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (11 samples, 0.02%; +0.00%)</title><rect x="672.6" y="485" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="675.61" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (11 samples, 0.02%; +0.01%)</title><rect x="489.1" y="325" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="492.15" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (5 samples, 0.01%; 0.00%)</title><rect x="399.4" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="402.41" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (22 samples, 0.05%; +0.02%)</title><rect x="989.8" y="341" width="0.5" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="992.77" y="351.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (152 samples, 0.31%; -0.05%)</title><rect x="349.6" y="165" width="3.7" height="15.0" fill="rgb(155,155,255)" rx="2" ry="2" />
<text  x="352.58" y="175.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (22 samples, 0.05%; +0.00%)</title><rect x="854.9" y="341" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="857.89" y="351.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (273 samples, 0.56%; 0.00%)</title><rect x="10.4" y="613" width="6.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.41" y="623.5" ></text>
</g>
<g >
<title>database::find_uuid (209 samples, 0.43%; -0.01%)</title><rect x="764.0" y="389" width="5.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="767.01" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (5 samples, 0.01%; +0.01%)</title><rect x="145.4" y="277" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="148.44" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (108 samples, 0.22%; -0.01%)</title><rect x="1000.1" y="277" width="2.7" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1003.14" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (14 samples, 0.03%; +0.02%)</title><rect x="540.9" y="341" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="543.91" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (15 samples, 0.03%; +0.01%)</title><rect x="313.7" y="165" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="316.73" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (34 samples, 0.07%; -0.01%)</title><rect x="637.3" y="485" width="0.9" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="640.33" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (40 samples, 0.08%; -0.00%)</title><rect x="629.2" y="405" width="1.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="632.17" y="415.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (194 samples, 0.40%; +0.02%)</title><rect x="548.5" y="389" width="4.8" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="551.52" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; -0.01%)</title><rect x="229.7" y="213" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="232.68" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="718.2" y="501" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="721.15" y="511.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (14 samples, 0.03%; 0.00%)</title><rect x="462.5" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="465.55" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (5 samples, 0.01%; -0.01%)</title><rect x="651.4" y="469" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="654.38" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (68 samples, 0.14%; -0.01%)</title><rect x="658.4" y="469" width="1.6" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="661.39" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="411.5" y="245" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="414.54" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (7 samples, 0.01%; -0.01%)</title><rect x="444.8" y="261" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="447.75" y="271.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (23 samples, 0.05%; -0.02%)</title><rect x="442.9" y="293" width="0.6" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="445.95" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.01%; +0.00%)</title><rect x="709.1" y="421" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="712.10" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (79 samples, 0.16%; -0.02%)</title><rect x="1121.7" y="405" width="1.9" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="1124.72" y="415.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (38 samples, 0.08%; -0.00%)</title><rect x="746.2" y="373" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="749.19" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (7 samples, 0.01%; 0.00%)</title><rect x="252.3" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="255.33" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (8 samples, 0.02%; +0.00%)</title><rect x="1075.5" y="277" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1078.52" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (6 samples, 0.01%; +0.01%)</title><rect x="1132.5" y="389" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1135.53" y="399.5" ></text>
</g>
<g >
<title>database::get_reader_concurrency_semaphore (6 samples, 0.01%; 0.00%)</title><rect x="1022.3" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1025.30" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (152 samples, 0.31%; 0.00%)</title><rect x="764.8" y="357" width="3.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="767.84" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (14 samples, 0.03%; -0.01%)</title><rect x="709.9" y="421" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="712.85" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1,770 samples, 3.66%; -0.01%)</title><rect x="172.1" y="181" width="43.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="175.11" y="191.5" >muta..</text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (121 samples, 0.25%; +0.01%)</title><rect x="1030.0" y="165" width="3.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1033.01" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (9 samples, 0.02%; +0.00%)</title><rect x="45.8" y="485" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="48.75" y="495.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (35 samples, 0.07%; +0.01%)</title><rect x="69.9" y="405" width="0.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="72.89" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (20 samples, 0.04%; +0.01%)</title><rect x="612.5" y="405" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="615.51" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (6,122 samples, 12.66%; -0.01%)</title><rect x="719.2" y="501" width="149.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="722.15" y="511.5" >seastar::internal::..</text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (246 samples, 0.51%; +0.02%)</title><rect x="1028.6" y="181" width="6.0" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="1031.59" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.00%)</title><rect x="521.2" y="309" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="524.16" y="319.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (19 samples, 0.04%; 0.00%)</title><rect x="1002.3" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1005.31" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (7 samples, 0.01%; -0.01%)</title><rect x="860.8" y="357" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="863.79" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (9 samples, 0.02%; +0.02%)</title><rect x="81.4" y="453" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="84.41" y="463.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (19 samples, 0.04%; +0.01%)</title><rect x="1109.9" y="389" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1112.93" y="399.5" ></text>
</g>
<g >
<title>database::find_column_family (60 samples, 0.12%; -0.01%)</title><rect x="762.5" y="373" width="1.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="765.54" y="383.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (8 samples, 0.02%; -0.00%)</title><rect x="568.5" y="293" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="571.48" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="919.1" y="373" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="922.14" y="383.5" ></text>
</g>
<g >
<title>seastar::gate::enter (5 samples, 0.01%; +0.00%)</title><rect x="81.3" y="453" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="84.28" y="463.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (19 samples, 0.04%; -0.01%)</title><rect x="766.3" y="309" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="769.28" y="319.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (346 samples, 0.72%; -0.03%)</title><rect x="379.2" y="165" width="8.4" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="382.21" y="175.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.01%; -0.01%)</title><rect x="488.1" y="213" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="491.14" y="223.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (117 samples, 0.24%; +0.00%)</title><rect x="19.5" y="373" width="2.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="22.54" y="383.5" ></text>
</g>
<g >
<title>service::client_state::has_access (5 samples, 0.01%; 0.00%)</title><rect x="23.8" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.81" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (6 samples, 0.01%; +0.00%)</title><rect x="655.9" y="437" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="658.90" y="447.5" ></text>
</g>
<g >
<title>cql3::to_managed_bytes_opt (14 samples, 0.03%; +0.02%)</title><rect x="914.6" y="357" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="917.55" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (8 samples, 0.02%; +0.01%)</title><rect x="259.7" y="261" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="262.68" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (39 samples, 0.08%; 0.00%)</title><rect x="200.2" y="69" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="203.23" y="79.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (16 samples, 0.03%; -0.00%)</title><rect x="1046.5" y="277" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1049.53" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5,165 samples, 10.68%; -0.01%)</title><rect x="292.4" y="357" width="126.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="295.35" y="367.5" >flat_mutation_r..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (28 samples, 0.06%; -0.00%)</title><rect x="871.6" y="453" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="874.58" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (14 samples, 0.03%; -0.00%)</title><rect x="1103.9" y="357" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1106.93" y="367.5" ></text>
</g>
<g >
<title>operator delete (20 samples, 0.04%; +0.01%)</title><rect x="36.8" y="453" width="0.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="39.80" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (17 samples, 0.04%; +0.00%)</title><rect x="751.7" y="293" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="754.66" y="303.5" ></text>
</g>
<g >
<title>schema::column_at (56 samples, 0.12%; -0.01%)</title><rect x="389.6" y="165" width="1.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="392.58" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.01%)</title><rect x="619.2" y="405" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="622.19" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="1106.8" y="373" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1109.78" y="383.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (14 samples, 0.03%; +0.00%)</title><rect x="689.7" y="309" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="692.72" y="319.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (60 samples, 0.12%; +0.01%)</title><rect x="758.0" y="389" width="1.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="761.03" y="399.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (223 samples, 0.46%; +0.04%)</title><rect x="693.9" y="469" width="5.4" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="696.89" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (6 samples, 0.01%; +0.00%)</title><rect x="993.7" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="996.67" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.01%; -0.00%)</title><rect x="695.2" y="453" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="698.16" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (8 samples, 0.02%; -0.02%)</title><rect x="413.9" y="261" width="0.2" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="416.88" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (5 samples, 0.01%; +0.01%)</title><rect x="428.2" y="405" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="431.16" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (47,140 samples, 97.49%; -0.04%)</title><rect x="26.9" y="517" width="1150.4" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="29.86" y="527.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>seastar::memory::allocate (43 samples, 0.09%; +0.01%)</title><rect x="851.1" y="389" width="1.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="854.13" y="399.5" ></text>
</g>
<g >
<title>__tls_init (5 samples, 0.01%; +0.00%)</title><rect x="147.8" y="261" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="150.83" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (22 samples, 0.05%; -0.00%)</title><rect x="450.0" y="277" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="453.03" y="287.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_digest_requests (10 samples, 0.02%; +0.01%)</title><rect x="1055.2" y="325" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1058.24" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (54 samples, 0.11%; +0.02%)</title><rect x="1163.3" y="453" width="1.3" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="1166.28" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (34 samples, 0.07%; +0.05%)</title><rect x="407.3" y="213" width="0.8" height="15.0" fill="rgb(255,159,159)" rx="2" ry="2" />
<text  x="410.29" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (7 samples, 0.01%; +0.00%)</title><rect x="630.7" y="437" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="633.69" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (6 samples, 0.01%; +0.00%)</title><rect x="858.2" y="389" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="861.23" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (138 samples, 0.29%; -0.01%)</title><rect x="985.8" y="341" width="3.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="988.84" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (7 samples, 0.01%; +0.00%)</title><rect x="838.0" y="421" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="840.97" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (18 samples, 0.04%; +0.02%)</title><rect x="33.3" y="485" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="36.26" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (10 samples, 0.02%; +0.01%)</title><rect x="715.9" y="485" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="718.86" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (106 samples, 0.22%; -0.01%)</title><rect x="61.9" y="453" width="2.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="64.93" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="404.4" y="181" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="407.44" y="191.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (67 samples, 0.14%; -0.01%)</title><rect x="773.2" y="357" width="1.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="776.18" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (29 samples, 0.06%; +0.00%)</title><rect x="655.2" y="437" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="658.19" y="447.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (65 samples, 0.13%; +0.00%)</title><rect x="799.2" y="213" width="1.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="802.22" y="223.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (18 samples, 0.04%; -0.05%)</title><rect x="205.6" y="149" width="0.4" height="15.0" fill="rgb(155,155,255)" rx="2" ry="2" />
<text  x="208.57" y="159.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (12 samples, 0.02%; +0.01%)</title><rect x="246.3" y="213" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="249.30" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (89 samples, 0.18%; +0.04%)</title><rect x="1059.3" y="309" width="2.1" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="1062.27" y="319.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (5 samples, 0.01%; -0.00%)</title><rect x="611.1" y="421" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="614.07" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (5 samples, 0.01%; -0.01%)</title><rect x="418.3" y="341" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="421.28" y="351.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (32 samples, 0.07%; 0.00%)</title><rect x="529.4" y="277" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="532.44" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (18 samples, 0.04%; +0.02%)</title><rect x="1027.5" y="165" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1030.52" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (17 samples, 0.04%; -0.02%)</title><rect x="792.3" y="229" width="0.4" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="795.31" y="239.5" ></text>
</g>
<g >
<title>query::querier&lt; (24 samples, 0.05%; +0.02%)</title><rect x="60.3" y="453" width="0.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="63.27" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (6 samples, 0.01%; -0.02%)</title><rect x="144.0" y="261" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="147.03" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (61 samples, 0.13%; -0.06%)</title><rect x="960.2" y="389" width="1.5" height="15.0" fill="rgb(141,141,255)" rx="2" ry="2" />
<text  x="963.24" y="399.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (12 samples, 0.02%; +0.00%)</title><rect x="232.9" y="245" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="235.88" y="255.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%; +0.01%)</title><rect x="642.2" y="485" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="645.23" y="495.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (6 samples, 0.01%; +0.01%)</title><rect x="1088.7" y="261" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1091.68" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (7 samples, 0.01%; 0.00%)</title><rect x="1132.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.31" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (6 samples, 0.01%; -0.00%)</title><rect x="63.6" y="405" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="66.64" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="1033.5" y="165" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1036.55" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (20 samples, 0.04%; 0.00%)</title><rect x="1108.2" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1111.17" y="383.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (5 samples, 0.01%; +0.00%)</title><rect x="74.4" y="373" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="77.38" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (14 samples, 0.03%; +0.02%)</title><rect x="661.1" y="469" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="664.07" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (15 samples, 0.03%; -0.02%)</title><rect x="554.4" y="389" width="0.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="557.40" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (70 samples, 0.14%; -0.02%)</title><rect x="582.5" y="357" width="1.7" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="585.47" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;boost::intrusive::detail::null_disposer, boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (5 samples, 0.01%; +0.00%)</title><rect x="568.9" y="293" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="571.87" y="303.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; 0.00%)</title><rect x="498.2" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="501.20" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (10 samples, 0.02%; +0.01%)</title><rect x="1035.1" y="197" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1038.13" y="207.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (33 samples, 0.07%; +0.01%)</title><rect x="39.2" y="405" width="0.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="42.19" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="588.7" y="421" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="591.69" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::move_it (8 samples, 0.02%; -0.00%)</title><rect x="781.7" y="341" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="784.67" y="351.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (295 samples, 0.61%; 0.00%)</title><rect x="747.6" y="373" width="7.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="750.63" y="383.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (15 samples, 0.03%; +0.02%)</title><rect x="249.0" y="229" width="0.3" height="15.0" fill="rgb(255,187,187)" rx="2" ry="2" />
<text  x="251.96" y="239.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (195 samples, 0.40%; 0.00%)</title><rect x="192.4" y="69" width="4.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="195.42" y="79.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (15 samples, 0.03%; +0.00%)</title><rect x="924.4" y="341" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="927.39" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.00%)</title><rect x="813.0" y="229" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="815.96" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (278 samples, 0.57%; -0.00%)</title><rect x="1114.7" y="405" width="6.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1117.67" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (22 samples, 0.05%; -0.01%)</title><rect x="711.5" y="437" width="0.6" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="714.51" y="447.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (25 samples, 0.05%; +0.04%)</title><rect x="1078.5" y="325" width="0.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1081.52" y="335.5" ></text>
</g>
<g >
<title>operator delete (28 samples, 0.06%; +0.01%)</title><rect x="639.9" y="469" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="642.86" y="479.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (6 samples, 0.01%; 0.00%)</title><rect x="46.8" y="501" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.80" y="511.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (5 samples, 0.01%; -0.01%)</title><rect x="246.2" y="213" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="249.18" y="223.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (753 samples, 1.56%; -0.02%)</title><rect x="1079.2" y="325" width="18.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1082.21" y="335.5" ></text>
</g>
<g >
<title>compound_type&lt; (57 samples, 0.12%; 0.00%)</title><rect x="546.8" y="357" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="549.84" y="367.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (5 samples, 0.01%; 0.00%)</title><rect x="958.8" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="961.77" y="399.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (11 samples, 0.02%; -0.00%)</title><rect x="358.5" y="165" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="361.49" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (13 samples, 0.03%; +0.01%)</title><rect x="258.8" y="277" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="261.77" y="287.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (6 samples, 0.01%; 0.00%)</title><rect x="871.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.92" y="303.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (131 samples, 0.27%; 0.00%)</title><rect x="977.8" y="341" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="980.78" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="761.1" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="764.05" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator_at (5 samples, 0.01%; +0.01%)</title><rect x="832.2" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="835.24" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (19 samples, 0.04%; +0.00%)</title><rect x="201.9" y="117" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="204.86" y="127.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (109 samples, 0.23%; +0.00%)</title><rect x="37.4" y="453" width="2.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="40.36" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (476 samples, 0.98%; +0.03%)</title><rect x="273.0" y="341" width="11.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="276.02" y="351.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (113 samples, 0.23%; -0.01%)</title><rect x="924.8" y="373" width="2.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="927.80" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (8 samples, 0.02%; -0.01%)</title><rect x="706.9" y="453" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="709.95" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (18 samples, 0.04%; 0.00%)</title><rect x="870.7" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.68" y="495.5" ></text>
</g>
<g >
<title>database::find_schema (250 samples, 0.52%; +0.00%)</title><rect x="827.4" y="373" width="6.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="830.36" y="383.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (9 samples, 0.02%; -0.01%)</title><rect x="609.2" y="421" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="612.16" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (50 samples, 0.10%; +0.00%)</title><rect x="621.4" y="389" width="1.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="624.37" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (10 samples, 0.02%; +0.00%)</title><rect x="795.3" y="229" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="798.29" y="239.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (9 samples, 0.02%; -0.02%)</title><rect x="919.9" y="389" width="0.2" height="15.0" fill="rgb(187,187,255)" rx="2" ry="2" />
<text  x="922.87" y="399.5" ></text>
</g>
<g >
<title>operator delete (17 samples, 0.04%; 0.00%)</title><rect x="1171.5" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1174.53" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (255 samples, 0.53%; +0.04%)</title><rect x="1089.2" y="277" width="6.3" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="1092.24" y="287.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (5 samples, 0.01%; -0.00%)</title><rect x="1068.5" y="341" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1071.54" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (26 samples, 0.05%; -0.01%)</title><rect x="836.9" y="421" width="0.6" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="839.88" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (16 samples, 0.03%; -0.02%)</title><rect x="951.1" y="405" width="0.4" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="954.06" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (34 samples, 0.07%; -0.01%)</title><rect x="1047.7" y="277" width="0.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1050.68" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (5 samples, 0.01%; +0.01%)</title><rect x="423.2" y="373" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="426.21" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (5 samples, 0.01%; 0.00%)</title><rect x="1176.4" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.41" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (8 samples, 0.02%; +0.01%)</title><rect x="426.7" y="405" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="429.67" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (9 samples, 0.02%; +0.01%)</title><rect x="888.2" y="421" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="891.25" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (20 samples, 0.04%; 0.00%)</title><rect x="689.7" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.70" y="367.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (9 samples, 0.02%; +0.01%)</title><rect x="1052.8" y="277" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1055.83" y="287.5" ></text>
</g>
<g >
<title>make_combined_reader (6 samples, 0.01%; +0.01%)</title><rect x="431.1" y="357" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="434.06" y="367.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (6 samples, 0.01%; +0.01%)</title><rect x="1078.3" y="325" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1081.33" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (872 samples, 1.80%; -0.01%)</title><rect x="1078.3" y="341" width="21.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1081.25" y="351.5" >s..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (7 samples, 0.01%; 0.00%)</title><rect x="24.2" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.23" y="623.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt; (6 samples, 0.01%; -0.01%)</title><rect x="914.0" y="341" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="916.97" y="351.5" ></text>
</g>
</g>
</svg>
