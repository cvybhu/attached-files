<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>seastar::net::inet_address::operator== (12 samples, 0.02%; +0.00%)</title><rect x="706.2" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="709.16" y="415.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (65 samples, 0.13%; -0.01%)</title><rect x="608.7" y="437" width="1.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="611.67" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (35 samples, 0.07%; -0.05%)</title><rect x="1165.7" y="453" width="0.8" height="15.0" fill="rgb(153,153,255)" rx="2" ry="2" />
<text  x="1168.69" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (5 samples, 0.01%; -0.00%)</title><rect x="408.7" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="411.68" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (5 samples, 0.01%; +0.00%)</title><rect x="835.4" y="437" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="838.40" y="447.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (5 samples, 0.01%; +0.00%)</title><rect x="857.1" y="469" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="860.06" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (24,190 samples, 49.01%; +0.02%)</title><rect x="47.7" y="485" width="578.3" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="50.73" y="495.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (7 samples, 0.01%; +0.01%)</title><rect x="883.1" y="389" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="886.10" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (37 samples, 0.07%; -0.01%)</title><rect x="1158.9" y="453" width="0.9" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1161.90" y="463.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (15 samples, 0.03%; -0.00%)</title><rect x="335.1" y="181" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="338.12" y="191.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (5 samples, 0.01%; -0.01%)</title><rect x="575.8" y="341" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="578.77" y="351.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (22 samples, 0.04%; -0.01%)</title><rect x="51.3" y="469" width="0.5" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="54.31" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (16 samples, 0.03%; -0.01%)</title><rect x="819.1" y="357" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="822.15" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (6 samples, 0.01%; 0.00%)</title><rect x="18.0" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.96" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="424.4" y="373" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="427.39" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (38 samples, 0.08%; +0.02%)</title><rect x="738.7" y="357" width="0.9" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="741.70" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (24 samples, 0.05%; -0.00%)</title><rect x="458.6" y="309" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="461.55" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (5 samples, 0.01%; -0.01%)</title><rect x="889.2" y="309" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="892.24" y="319.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (34 samples, 0.07%; +0.02%)</title><rect x="797.8" y="117" width="0.8" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="800.75" y="127.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (19 samples, 0.04%; -0.02%)</title><rect x="890.1" y="293" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="893.13" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (25 samples, 0.05%; -0.02%)</title><rect x="1051.0" y="213" width="0.6" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="1054.00" y="223.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (176 samples, 0.36%; +0.00%)</title><rect x="502.1" y="229" width="4.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="505.09" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (8 samples, 0.02%; +0.00%)</title><rect x="948.9" y="405" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="951.87" y="415.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (14 samples, 0.03%; -0.01%)</title><rect x="610.9" y="437" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="613.94" y="447.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.06%; +0.00%)</title><rect x="488.7" y="293" width="0.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="491.70" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.00%)</title><rect x="417.6" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="420.62" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (200 samples, 0.41%; -0.00%)</title><rect x="15.1" y="421" width="4.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="18.09" y="431.5" ></text>
</g>
<g >
<title>sstring_hash::operator (16 samples, 0.03%; -0.00%)</title><rect x="827.8" y="309" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="830.75" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (10 samples, 0.02%; -0.01%)</title><rect x="569.8" y="293" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="572.84" y="303.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.28" y="575.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (5 samples, 0.01%; +0.00%)</title><rect x="761.6" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="764.58" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (10 samples, 0.02%; -0.01%)</title><rect x="445.5" y="293" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="448.50" y="303.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (66 samples, 0.13%; +0.00%)</title><rect x="557.7" y="325" width="1.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="560.70" y="335.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (14 samples, 0.03%; -0.02%)</title><rect x="519.7" y="341" width="0.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="522.71" y="351.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (37 samples, 0.07%; -0.03%)</title><rect x="385.4" y="165" width="0.9" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="388.39" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (7 samples, 0.01%; +0.00%)</title><rect x="1036.0" y="213" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1039.01" y="223.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (23 samples, 0.05%; +0.03%)</title><rect x="175.1" y="133" width="0.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="178.06" y="143.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (38 samples, 0.08%; +0.01%)</title><rect x="572.6" y="357" width="0.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="575.61" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (6 samples, 0.01%; 0.00%)</title><rect x="668.3" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="671.29" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (353 samples, 0.72%; -0.00%)</title><rect x="436.3" y="309" width="8.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="439.29" y="319.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (7 samples, 0.01%; +0.00%)</title><rect x="768.4" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="771.39" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (13 samples, 0.03%; +0.00%)</title><rect x="1039.7" y="197" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1042.69" y="207.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (5 samples, 0.01%; +0.00%)</title><rect x="607.3" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="610.28" y="431.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.02%; +0.00%)</title><rect x="277.0" y="293" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="279.95" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (40 samples, 0.08%; +0.03%)</title><rect x="608.9" y="405" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="611.86" y="415.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (12 samples, 0.02%; -0.01%)</title><rect x="1112.9" y="389" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1115.85" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (9 samples, 0.02%; 0.00%)</title><rect x="1145.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.87" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (11 samples, 0.02%; 0.00%)</title><rect x="15.2" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.21" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (5 samples, 0.01%; +0.00%)</title><rect x="16.9" y="325" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="19.86" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (29 samples, 0.06%; -0.01%)</title><rect x="691.5" y="453" width="0.7" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="694.48" y="463.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (65 samples, 0.13%; +0.02%)</title><rect x="1167.1" y="469" width="1.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1170.07" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (19 samples, 0.04%; +0.02%)</title><rect x="137.9" y="245" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="140.88" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (13 samples, 0.03%; +0.00%)</title><rect x="1156.2" y="485" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1159.19" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (5 samples, 0.01%; +0.00%)</title><rect x="19.3" y="309" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="22.25" y="319.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (18 samples, 0.04%; +0.02%)</title><rect x="539.8" y="405" width="0.4" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="542.77" y="415.5" ></text>
</g>
<g >
<title>row::compact_and_expire (834 samples, 1.69%; -0.01%)</title><rect x="368.5" y="213" width="19.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="371.47" y="223.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (33 samples, 0.07%; +0.05%)</title><rect x="142.9" y="261" width="0.8" height="15.0" fill="rgb(255,153,153)" rx="2" ry="2" />
<text  x="145.88" y="271.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (9 samples, 0.02%; +0.00%)</title><rect x="110.6" y="421" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="113.63" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (18 samples, 0.04%; -0.01%)</title><rect x="566.9" y="277" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="569.90" y="287.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (23 samples, 0.05%; +0.00%)</title><rect x="649.6" y="469" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="652.60" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (11 samples, 0.02%; -0.01%)</title><rect x="656.5" y="485" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="659.51" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (12 samples, 0.02%; +0.01%)</title><rect x="1136.3" y="373" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1139.28" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (35 samples, 0.07%; +0.02%)</title><rect x="655.0" y="485" width="0.8" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="658.00" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (25 samples, 0.05%; -0.00%)</title><rect x="635.3" y="469" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="638.30" y="479.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (13 samples, 0.03%; -0.00%)</title><rect x="814.9" y="309" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="817.87" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (6 samples, 0.01%; -0.01%)</title><rect x="174.6" y="133" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="177.63" y="143.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (64 samples, 0.13%; -0.01%)</title><rect x="810.1" y="325" width="1.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="813.11" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_digest_requests (5 samples, 0.01%; +0.00%)</title><rect x="1054.7" y="325" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1057.73" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (11 samples, 0.02%; +0.00%)</title><rect x="527.3" y="309" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="530.31" y="319.5" ></text>
</g>
<g >
<title>operator delete (24 samples, 0.05%; -0.01%)</title><rect x="412.7" y="261" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="415.74" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (19 samples, 0.04%; +0.00%)</title><rect x="407.9" y="229" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="410.92" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (6 samples, 0.01%; -0.01%)</title><rect x="649.1" y="405" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="652.14" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (6 samples, 0.01%; +0.00%)</title><rect x="23.1" y="517" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="26.10" y="527.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (6 samples, 0.01%; +0.01%)</title><rect x="856.7" y="469" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="859.68" y="479.5" ></text>
</g>
<g >
<title>compound_type&lt; (5 samples, 0.01%; +0.00%)</title><rect x="476.2" y="229" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="479.17" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (11 samples, 0.02%; +0.01%)</title><rect x="332.9" y="165" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="335.89" y="175.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (27 samples, 0.05%; -0.06%)</title><rect x="274.6" y="293" width="0.7" height="15.0" fill="rgb(141,141,255)" rx="2" ry="2" />
<text  x="277.63" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.01%; -0.00%)</title><rect x="414.1" y="325" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="417.06" y="335.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (7 samples, 0.01%; -0.00%)</title><rect x="20.9" y="453" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="23.95" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (5 samples, 0.01%; 0.00%)</title><rect x="863.7" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.71" y="367.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (13 samples, 0.03%; -0.00%)</title><rect x="799.6" y="117" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="802.62" y="127.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (36 samples, 0.07%; 0.00%)</title><rect x="864.2" y="405" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.17" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (8 samples, 0.02%; -0.01%)</title><rect x="264.3" y="309" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="267.28" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (16 samples, 0.03%; 0.00%)</title><rect x="695.3" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.26" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (20 samples, 0.04%; +0.00%)</title><rect x="1080.2" y="309" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1083.19" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (30 samples, 0.06%; +0.02%)</title><rect x="783.9" y="229" width="0.7" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="786.93" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="569.6" y="293" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="572.60" y="303.5" ></text>
</g>
<g >
<title>row_cache::make_reader (512 samples, 1.04%; +0.00%)</title><rect x="521.6" y="341" width="12.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="524.57" y="351.5" ></text>
</g>
<g >
<title>validation::validate_column_family (22 samples, 0.04%; +0.04%)</title><rect x="828.7" y="405" width="0.5" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="831.71" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (42 samples, 0.09%; +0.01%)</title><rect x="943.9" y="373" width="1.0" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="946.94" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::stats (31 samples, 0.06%; -0.05%)</title><rect x="148.3" y="245" width="0.8" height="15.0" fill="rgb(146,146,255)" rx="2" ry="2" />
<text  x="151.33" y="255.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (8 samples, 0.02%; -0.01%)</title><rect x="457.4" y="325" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="460.38" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (24 samples, 0.05%; +0.02%)</title><rect x="220.7" y="149" width="0.6" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="223.72" y="159.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (5 samples, 0.01%; +0.01%)</title><rect x="848.7" y="341" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="851.75" y="351.5" ></text>
</g>
<g >
<title>operator new (80 samples, 0.16%; -0.00%)</title><rect x="547.4" y="341" width="1.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="550.42" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (17 samples, 0.03%; 0.00%)</title><rect x="864.6" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.57" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.00%)</title><rect x="282.2" y="277" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="285.19" y="287.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (14 samples, 0.03%; +0.00%)</title><rect x="597.5" y="405" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="600.53" y="415.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (11 samples, 0.02%; +0.01%)</title><rect x="1144.7" y="469" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1147.67" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; 0.00%)</title><rect x="911.7" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="914.67" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (9 samples, 0.02%; +0.01%)</title><rect x="261.2" y="293" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="264.22" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (5 samples, 0.01%; +0.00%)</title><rect x="436.2" y="309" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="439.17" y="319.5" ></text>
</g>
<g >
<title>operator new (56 samples, 0.11%; +0.00%)</title><rect x="841.7" y="421" width="1.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="844.69" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (16 samples, 0.03%; +0.01%)</title><rect x="690.0" y="453" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="693.02" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (120 samples, 0.24%; -0.00%)</title><rect x="945.9" y="405" width="2.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="948.93" y="415.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (208 samples, 0.42%; -0.03%)</title><rect x="353.7" y="165" width="5.0" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="356.72" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (133 samples, 0.27%; -0.01%)</title><rect x="565.6" y="293" width="3.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="568.59" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (52 samples, 0.11%; +0.01%)</title><rect x="603.1" y="437" width="1.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="606.07" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (20 samples, 0.04%; +0.02%)</title><rect x="234.4" y="229" width="0.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="237.37" y="239.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (52 samples, 0.11%; +0.00%)</title><rect x="15.5" y="309" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="18.47" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (24 samples, 0.05%; -0.00%)</title><rect x="401.0" y="165" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="404.03" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (10 samples, 0.02%; 0.00%)</title><rect x="631.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="634.59" y="495.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (37 samples, 0.07%; +0.01%)</title><rect x="816.0" y="293" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="818.97" y="303.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (8 samples, 0.02%; +0.01%)</title><rect x="921.9" y="373" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="924.90" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; -0.00%)</title><rect x="631.3" y="469" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="634.31" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,545 samples, 9.21%; +0.00%)</title><rect x="145.3" y="309" width="108.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="148.27" y="319.5" >partition_sna..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (84 samples, 0.17%; +0.00%)</title><rect x="1059.1" y="325" width="2.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1062.08" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (33 samples, 0.07%; +0.01%)</title><rect x="269.9" y="357" width="0.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="272.90" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (49 samples, 0.10%; -0.01%)</title><rect x="715.8" y="405" width="1.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="718.80" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (28 samples, 0.06%; +0.02%)</title><rect x="232.5" y="197" width="0.7" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="235.48" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (7 samples, 0.01%; -0.03%)</title><rect x="506.6" y="245" width="0.2" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="509.61" y="255.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (78 samples, 0.16%; +0.01%)</title><rect x="525.4" y="293" width="1.9" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="528.44" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (12 samples, 0.02%; +0.01%)</title><rect x="900.1" y="277" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="903.15" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (13 samples, 0.03%; +0.01%)</title><rect x="1153.6" y="485" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1156.59" y="495.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (26 samples, 0.05%; +0.01%)</title><rect x="1043.9" y="261" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1046.95" y="271.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (24 samples, 0.05%; -0.01%)</title><rect x="334.1" y="181" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="337.07" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (272 samples, 0.55%; -0.00%)</title><rect x="1093.3" y="277" width="6.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1096.32" y="287.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (21 samples, 0.04%; +0.00%)</title><rect x="795.8" y="117" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="798.81" y="127.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (8 samples, 0.02%; 0.00%)</title><rect x="18.8" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.75" y="255.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (4,284 samples, 8.68%; -0.04%)</title><rect x="730.1" y="437" width="102.5" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="733.14" y="447.5" >cql3::query_..</text>
</g>
<g >
<title>[unknown] (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.28" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; +0.01%)</title><rect x="811.3" y="277" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="814.28" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (36 samples, 0.07%; -0.00%)</title><rect x="631.9" y="485" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="634.93" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (68 samples, 0.14%; 0.00%)</title><rect x="15.2" y="373" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.16" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (11 samples, 0.02%; -0.00%)</title><rect x="904.2" y="309" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="907.19" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (25 samples, 0.05%; -0.02%)</title><rect x="900.7" y="277" width="0.6" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="903.70" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (19 samples, 0.04%; -0.01%)</title><rect x="1000.9" y="229" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1003.92" y="239.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (69 samples, 0.14%; +0.01%)</title><rect x="1009.8" y="277" width="1.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1012.81" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (6 samples, 0.01%; +0.00%)</title><rect x="493.5" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="496.53" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (14 samples, 0.03%; 0.00%)</title><rect x="1146.1" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.11" y="255.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::delay&lt;service::abstract_write_response_handler::signal (7 samples, 0.01%; 0.00%)</title><rect x="708.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.43" y="447.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (63 samples, 0.13%; +0.02%)</title><rect x="280.8" y="309" width="1.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="283.82" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (13 samples, 0.03%; -0.02%)</title><rect x="708.6" y="501" width="0.4" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="711.65" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (24 samples, 0.05%; -0.00%)</title><rect x="610.4" y="437" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="613.36" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (19 samples, 0.04%; +0.02%)</title><rect x="517.3" y="325" width="0.4" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="520.27" y="335.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.02%; -0.00%)</title><rect x="790.5" y="213" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="793.48" y="223.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (264 samples, 0.53%; 0.00%)</title><rect x="14.9" y="517" width="6.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.90" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (217 samples, 0.44%; -0.02%)</title><rect x="613.9" y="437" width="5.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="616.93" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (6,043 samples, 12.24%; -0.00%)</title><rect x="120.8" y="341" width="144.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="123.79" y="351.5" >mutation_fragment_..</text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (123 samples, 0.25%; -0.01%)</title><rect x="985.2" y="325" width="2.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="988.18" y="335.5" ></text>
</g>
<g >
<title>table::set_hit_rate (75 samples, 0.15%; +0.00%)</title><rect x="704.9" y="453" width="1.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="707.87" y="463.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (6 samples, 0.01%; +0.00%)</title><rect x="16.2" y="245" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="19.17" y="255.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (49 samples, 0.10%; -0.01%)</title><rect x="598.6" y="389" width="1.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="601.55" y="399.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; -0.01%)</title><rect x="615.0" y="421" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="618.03" y="431.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (1,060 samples, 2.15%; +0.02%)</title><rect x="487.0" y="325" width="25.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="489.98" y="335.5" >m..</text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (5 samples, 0.01%; -0.01%)</title><rect x="61.6" y="437" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="64.64" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (54 samples, 0.11%; -0.01%)</title><rect x="246.6" y="197" width="1.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="249.61" y="207.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (5 samples, 0.01%; -0.01%)</title><rect x="854.1" y="405" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="857.05" y="415.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (681 samples, 1.38%; 0.00%)</title><rect x="786.2" y="261" width="16.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="789.20" y="271.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (16 samples, 0.03%; -0.02%)</title><rect x="312.2" y="165" width="0.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="315.19" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (40 samples, 0.08%; -0.01%)</title><rect x="935.6" y="405" width="0.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="938.55" y="415.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (5 samples, 0.01%; 0.00%)</title><rect x="1177.2" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1180.16" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (27 samples, 0.05%; +0.03%)</title><rect x="1027.3" y="197" width="0.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1030.26" y="207.5" ></text>
</g>
<g >
<title>cql3::to_managed_bytes_opt (48 samples, 0.10%; +0.06%)</title><rect x="912.0" y="373" width="1.2" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="915.03" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (34 samples, 0.07%; -0.01%)</title><rect x="681.0" y="453" width="0.8" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="684.03" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (14 samples, 0.03%; 0.00%)</title><rect x="1146.1" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.11" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (53 samples, 0.11%; +0.03%)</title><rect x="843.8" y="389" width="1.2" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="846.77" y="399.5" ></text>
</g>
<g >
<title>database::has_keyspace (116 samples, 0.24%; -0.00%)</title><rect x="825.6" y="357" width="2.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="828.58" y="367.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (12 samples, 0.02%; -0.06%)</title><rect x="921.6" y="373" width="0.3" height="15.0" fill="rgb(141,141,255)" rx="2" ry="2" />
<text  x="924.61" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (10 samples, 0.02%; -0.04%)</title><rect x="265.0" y="325" width="0.2" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="267.97" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (159 samples, 0.32%; -0.00%)</title><rect x="588.5" y="421" width="3.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="591.51" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (12 samples, 0.02%; -0.00%)</title><rect x="151.0" y="245" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="153.98" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (48 samples, 0.10%; +0.01%)</title><rect x="1047.6" y="277" width="1.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1050.58" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (25 samples, 0.05%; -0.00%)</title><rect x="646.7" y="437" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="649.70" y="447.5" ></text>
</g>
<g >
<title>operator new (16 samples, 0.03%; 0.00%)</title><rect x="651.8" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="654.80" y="463.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (16 samples, 0.03%; -0.01%)</title><rect x="1101.2" y="261" width="0.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1104.21" y="271.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%; +0.00%)</title><rect x="616.8" y="389" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="619.77" y="399.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (83 samples, 0.17%; +0.00%)</title><rect x="774.6" y="325" width="2.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="777.58" y="335.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (31 samples, 0.06%; +0.00%)</title><rect x="758.1" y="325" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="761.09" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (16 samples, 0.03%; -0.00%)</title><rect x="621.8" y="437" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="624.79" y="447.5" ></text>
</g>
<g >
<title>__tls_init (13 samples, 0.03%; -0.00%)</title><rect x="497.2" y="245" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="500.23" y="255.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (40 samples, 0.08%; 0.00%)</title><rect x="864.1" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.09" y="479.5" ></text>
</g>
<g >
<title>schema_registry::learn (5 samples, 0.01%; 0.00%)</title><rect x="44.0" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.02" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%; +0.00%)</title><rect x="141.0" y="245" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="144.01" y="255.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (133 samples, 0.27%; -0.01%)</title><rect x="669.4" y="469" width="3.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="672.39" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (44 samples, 0.09%; +0.04%)</title><rect x="994.2" y="277" width="1.0" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="997.20" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (31 samples, 0.06%; -0.01%)</title><rect x="784.9" y="229" width="0.8" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="787.94" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (29 samples, 0.06%; +0.02%)</title><rect x="39.6" y="469" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="42.60" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (238 samples, 0.48%; +0.01%)</title><rect x="396.8" y="213" width="5.7" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="399.82" y="223.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (15 samples, 0.03%; -0.01%)</title><rect x="230.8" y="165" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="233.81" y="175.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,740 samples, 9.60%; +0.00%)</title><rect x="296.7" y="293" width="113.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="299.72" y="303.5" >seastar::repea..</text>
</g>
<g >
<title>memtable::apply (23 samples, 0.05%; -0.00%)</title><rect x="1145.0" y="261" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1147.98" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::push_back (9 samples, 0.02%; +0.01%)</title><rect x="1158.7" y="453" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1161.68" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (52 samples, 0.11%; -0.01%)</title><rect x="299.2" y="261" width="1.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="302.18" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (17 samples, 0.03%; +0.00%)</title><rect x="31.0" y="469" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="34.01" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (5 samples, 0.01%; +0.00%)</title><rect x="648.4" y="453" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="651.38" y="463.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.03%; +0.00%)</title><rect x="763.7" y="373" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="766.66" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (102 samples, 0.21%; -0.01%)</title><rect x="645.9" y="469" width="2.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="648.87" y="479.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (64 samples, 0.13%; -0.00%)</title><rect x="240.8" y="197" width="1.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="243.80" y="207.5" ></text>
</g>
<g >
<title>reader_permit::consume (8 samples, 0.02%; +0.00%)</title><rect x="162.4" y="197" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="165.39" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (6 samples, 0.01%; -0.05%)</title><rect x="981.8" y="357" width="0.2" height="15.0" fill="rgb(148,148,255)" rx="2" ry="2" />
<text  x="984.81" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (5,556 samples, 11.26%; +0.00%)</title><rect x="286.5" y="405" width="132.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="289.51" y="415.5" >seastar::future&lt;..</text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (12 samples, 0.02%; -0.00%)</title><rect x="824.1" y="293" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="827.10" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.01%; +0.00%)</title><rect x="632.6" y="469" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="635.57" y="479.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.01%; 0.00%)</title><rect x="44.0" y="501" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.02" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (29 samples, 0.06%; 0.00%)</title><rect x="888.0" y="277" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="891.03" y="287.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (39 samples, 0.08%; 0.00%)</title><rect x="840.1" y="357" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="843.11" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (197 samples, 0.40%; 0.00%)</title><rect x="15.2" y="389" width="4.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.16" y="399.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (15 samples, 0.03%; 0.00%)</title><rect x="1146.1" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.08" y="287.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (39 samples, 0.08%; 0.00%)</title><rect x="1078.3" y="293" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1081.33" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (15 samples, 0.03%; +0.01%)</title><rect x="484.5" y="325" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="487.47" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (33 samples, 0.07%; +0.02%)</title><rect x="607.9" y="437" width="0.7" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="610.85" y="447.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (286 samples, 0.58%; -0.01%)</title><rect x="849.6" y="453" width="6.8" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="852.56" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.00%)</title><rect x="583.1" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="586.06" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (26 samples, 0.05%; -0.01%)</title><rect x="258.4" y="277" width="0.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="261.42" y="287.5" ></text>
</g>
<g >
<title>schema::column_at (55 samples, 0.11%; -0.02%)</title><rect x="331.8" y="181" width="1.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="334.84" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (11 samples, 0.02%; 0.00%)</title><rect x="702.0" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.03" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (29 samples, 0.06%; +0.01%)</title><rect x="150.1" y="245" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="153.12" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (7 samples, 0.01%; -0.00%)</title><rect x="970.1" y="373" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="973.15" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (12 samples, 0.02%; 0.00%)</title><rect x="567.3" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="570.33" y="287.5" ></text>
</g>
<g >
<title>compound_type&lt; (87 samples, 0.18%; +0.02%)</title><rect x="919.4" y="357" width="2.1" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="922.39" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (14 samples, 0.03%; +0.01%)</title><rect x="687.3" y="469" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="690.25" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (6 samples, 0.01%; -0.02%)</title><rect x="283.3" y="357" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="286.31" y="367.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (23 samples, 0.05%; -0.00%)</title><rect x="1136.0" y="389" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1139.02" y="399.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (21 samples, 0.04%; +0.01%)</title><rect x="305.1" y="213" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="308.14" y="223.5" ></text>
</g>
<g >
<title>all (49,357 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (123 samples, 0.25%; -0.00%)</title><rect x="725.9" y="341" width="2.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="728.86" y="351.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (65 samples, 0.13%; +0.02%)</title><rect x="304.1" y="229" width="1.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="307.09" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (7 samples, 0.01%; -0.01%)</title><rect x="552.1" y="421" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="555.15" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (5 samples, 0.01%; +0.01%)</title><rect x="532.3" y="261" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="535.31" y="271.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (6 samples, 0.01%; 0.00%)</title><rect x="1145.6" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.56" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (52 samples, 0.11%; -0.01%)</title><rect x="1163.3" y="453" width="1.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1166.32" y="463.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (9 samples, 0.02%; -0.00%)</title><rect x="222.8" y="117" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="225.80" y="127.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (28 samples, 0.06%; +0.02%)</title><rect x="532.4" y="245" width="0.7" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="535.45" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="1075.7" y="325" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1078.65" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (9 samples, 0.02%; +0.01%)</title><rect x="947.3" y="357" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="950.27" y="367.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (6 samples, 0.01%; -0.00%)</title><rect x="725.6" y="293" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="728.60" y="303.5" ></text>
</g>
<g >
<title>seastar::gate::enter (10 samples, 0.02%; -0.01%)</title><rect x="1040.0" y="245" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1043.03" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;flat_mutation_reader&gt;::allocate (6 samples, 0.01%; +0.00%)</title><rect x="431.8" y="341" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="434.80" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (5 samples, 0.01%; -0.01%)</title><rect x="555.5" y="357" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="558.52" y="367.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (8 samples, 0.02%; +0.01%)</title><rect x="1111.4" y="389" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1114.42" y="399.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (23 samples, 0.05%; 0.00%)</title><rect x="505.2" y="197" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="508.24" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (146 samples, 0.30%; 0.00%)</title><rect x="404.9" y="261" width="3.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="407.88" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (19 samples, 0.04%; -0.01%)</title><rect x="646.8" y="421" width="0.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="649.85" y="431.5" ></text>
</g>
<g >
<title>[unknown] (488 samples, 0.99%; 0.00%)</title><rect x="10.0" y="629" width="11.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.02" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (13 samples, 0.03%; -0.01%)</title><rect x="830.2" y="405" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="833.19" y="415.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (38 samples, 0.08%; +0.01%)</title><rect x="67.1" y="405" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="70.07" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (63 samples, 0.13%; +0.00%)</title><rect x="754.3" y="357" width="1.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="757.33" y="367.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (56 samples, 0.11%; +0.01%)</title><rect x="1157.3" y="453" width="1.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1160.27" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (15 samples, 0.03%; +0.01%)</title><rect x="579.6" y="357" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="582.59" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (26 samples, 0.05%; +0.01%)</title><rect x="70.6" y="389" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="73.63" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (6 samples, 0.01%; +0.00%)</title><rect x="439.0" y="245" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="442.02" y="255.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (12 samples, 0.02%; +0.01%)</title><rect x="726.1" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="729.05" y="319.5" ></text>
</g>
<g >
<title>seastar::gate::leave (5 samples, 0.01%; +0.00%)</title><rect x="63.2" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="66.17" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.01%; +0.01%)</title><rect x="921.3" y="325" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="924.28" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (117 samples, 0.24%; -0.03%)</title><rect x="838.3" y="389" width="2.8" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="841.32" y="399.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (59 samples, 0.12%; +0.02%)</title><rect x="457.8" y="325" width="1.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="460.79" y="335.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (35 samples, 0.07%; -0.01%)</title><rect x="36.8" y="405" width="0.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="39.80" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (12 samples, 0.02%; -0.01%)</title><rect x="604.4" y="437" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="607.43" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.02%)</title><rect x="1130.0" y="405" width="0.1" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="1132.99" y="415.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (7 samples, 0.01%; +0.00%)</title><rect x="261.9" y="309" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="264.94" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (6 samples, 0.01%; 0.00%)</title><rect x="864.3" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.28" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (11 samples, 0.02%; +0.00%)</title><rect x="694.2" y="469" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="697.23" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (7 samples, 0.01%; -0.01%)</title><rect x="1123.7" y="325" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1126.73" y="335.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (8 samples, 0.02%; +0.01%)</title><rect x="948.2" y="341" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="951.15" y="351.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.02%; -0.01%)</title><rect x="790.7" y="213" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="793.75" y="223.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (74 samples, 0.15%; +0.03%)</title><rect x="147.3" y="261" width="1.8" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="150.30" y="271.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (72 samples, 0.15%; +0.04%)</title><rect x="10.2" y="581" width="1.7" height="15.0" fill="rgb(255,156,156)" rx="2" ry="2" />
<text  x="13.19" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (6 samples, 0.01%; -0.01%)</title><rect x="1121.6" y="389" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1124.58" y="399.5" ></text>
</g>
<g >
<title>operator new (23 samples, 0.05%; -0.00%)</title><rect x="100.7" y="389" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="103.73" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (5 samples, 0.01%; 0.00%)</title><rect x="1177.2" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1180.16" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (57 samples, 0.12%; -0.00%)</title><rect x="750.8" y="389" width="1.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="753.80" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (427 samples, 0.87%; +0.02%)</title><rect x="237.7" y="229" width="10.2" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="240.69" y="239.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (16 samples, 0.03%; -0.03%)</title><rect x="1170.9" y="469" width="0.3" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1173.85" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (7 samples, 0.01%; +0.00%)</title><rect x="706.4" y="421" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="709.45" y="431.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (12 samples, 0.02%; -0.04%)</title><rect x="435.3" y="325" width="0.3" height="15.0" fill="rgb(158,158,255)" rx="2" ry="2" />
<text  x="438.34" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (71 samples, 0.14%; +0.01%)</title><rect x="37.8" y="469" width="1.7" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="40.78" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (10 samples, 0.02%; -0.02%)</title><rect x="1079.9" y="293" width="0.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="1082.93" y="303.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (55 samples, 0.11%; +0.00%)</title><rect x="1177.8" y="517" width="1.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1180.76" y="527.5" ></text>
</g>
<g >
<title>row::row (30 samples, 0.06%; +0.00%)</title><rect x="252.0" y="197" width="0.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="255.04" y="207.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (6 samples, 0.01%; +0.01%)</title><rect x="1067.2" y="293" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1070.21" y="303.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (8 samples, 0.02%; +0.00%)</title><rect x="20.0" y="389" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="22.99" y="399.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (23 samples, 0.05%; +0.01%)</title><rect x="597.9" y="405" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="600.86" y="415.5" ></text>
</g>
<g >
<title>operator new (77 samples, 0.16%; 0.00%)</title><rect x="854.5" y="437" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="857.46" y="447.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (11 samples, 0.02%; +0.02%)</title><rect x="883.7" y="389" width="0.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="886.67" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (249 samples, 0.50%; +0.02%)</title><rect x="218.1" y="181" width="6.0" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="221.14" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (8 samples, 0.02%; +0.00%)</title><rect x="249.5" y="245" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="252.50" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.01%; -0.00%)</title><rect x="1161.1" y="453" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1164.07" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (66 samples, 0.13%; +0.01%)</title><rect x="722.0" y="421" width="1.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="724.99" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (9 samples, 0.02%; -0.00%)</title><rect x="575.9" y="341" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="578.89" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.07%; 0.00%)</title><rect x="1144.9" y="373" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.93" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (869 samples, 1.76%; -0.00%)</title><rect x="914.5" y="405" width="20.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="917.49" y="415.5" ></text>
</g>
<g >
<title>dht::tri_compare (79 samples, 0.16%; -0.01%)</title><rect x="473.2" y="261" width="1.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="476.21" y="271.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (124 samples, 0.25%; -0.00%)</title><rect x="814.0" y="341" width="2.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="816.96" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::~node_head (6 samples, 0.01%; +0.01%)</title><rect x="404.0" y="213" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="406.99" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (10 samples, 0.02%; -0.01%)</title><rect x="401.9" y="197" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="404.89" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (30 samples, 0.06%; +0.00%)</title><rect x="946.8" y="389" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="949.77" y="399.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (23 samples, 0.05%; -0.01%)</title><rect x="982.2" y="357" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="985.20" y="367.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (6 samples, 0.01%; +0.00%)</title><rect x="892.4" y="277" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="895.40" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (8 samples, 0.02%; +0.00%)</title><rect x="580.8" y="373" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="583.81" y="383.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (7 samples, 0.01%; +0.00%)</title><rect x="558.6" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="561.56" y="303.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20 samples, 0.04%; +0.01%)</title><rect x="743.2" y="277" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="746.24" y="287.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (52 samples, 0.11%; +0.07%)</title><rect x="173.4" y="133" width="1.2" height="15.0" fill="rgb(255,126,126)" rx="2" ry="2" />
<text  x="176.38" y="143.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (23 samples, 0.05%; +0.01%)</title><rect x="413.4" y="261" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="416.39" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (7 samples, 0.01%; -0.01%)</title><rect x="719.4" y="453" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="722.36" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (11 samples, 0.02%; +0.00%)</title><rect x="863.6" y="453" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="866.64" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; +0.01%)</title><rect x="670.0" y="437" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="673.01" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (24 samples, 0.05%; -0.00%)</title><rect x="944.4" y="341" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="947.35" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (8 samples, 0.02%; -0.01%)</title><rect x="239.8" y="213" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="242.75" y="223.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (10 samples, 0.02%; +0.01%)</title><rect x="758.3" y="309" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="761.33" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (5 samples, 0.01%; 0.00%)</title><rect x="17.7" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.67" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.01%)</title><rect x="590.5" y="373" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="593.52" y="383.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (18 samples, 0.04%; +0.00%)</title><rect x="800.9" y="85" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="803.91" y="95.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (220 samples, 0.45%; -0.00%)</title><rect x="153.9" y="229" width="5.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="156.85" y="239.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (5 samples, 0.01%; +0.01%)</title><rect x="146.2" y="277" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="149.20" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (10 samples, 0.02%; +0.00%)</title><rect x="166.1" y="213" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="169.12" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (12 samples, 0.02%; -0.00%)</title><rect x="858.6" y="421" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="861.59" y="431.5" ></text>
</g>
<g >
<title>operator new (85 samples, 0.17%; +0.00%)</title><rect x="159.5" y="213" width="2.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="162.54" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (5 samples, 0.01%; -0.01%)</title><rect x="829.8" y="421" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="832.83" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (38 samples, 0.08%; +0.02%)</title><rect x="722.3" y="389" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="725.32" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (71 samples, 0.14%; +0.00%)</title><rect x="989.7" y="309" width="1.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="992.73" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (20 samples, 0.04%; +0.01%)</title><rect x="575.1" y="357" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="578.08" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (11 samples, 0.02%; +0.02%)</title><rect x="623.3" y="389" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="626.35" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (16 samples, 0.03%; +0.01%)</title><rect x="282.5" y="325" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="285.54" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (434 samples, 0.88%; +0.00%)</title><rect x="643.5" y="485" width="10.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="646.48" y="495.5" ></text>
</g>
<g >
<title>schema::column_at (26 samples, 0.05%; +0.01%)</title><rect x="207.9" y="133" width="0.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="210.88" y="143.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.02%; -0.00%)</title><rect x="809.1" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="812.06" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (22 samples, 0.04%; +0.03%)</title><rect x="102.3" y="421" width="0.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="105.31" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (20 samples, 0.04%; -0.01%)</title><rect x="449.5" y="261" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="452.54" y="271.5" ></text>
</g>
<g >
<title>database::find_uuid (155 samples, 0.31%; -0.00%)</title><rect x="821.8" y="357" width="3.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="824.78" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::mhtraits&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, boost::intrusive::list_member_hook&lt;boost::intrusive::link_mode&lt; (7 samples, 0.01%; +0.01%)</title><rect x="723.4" y="389" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="726.40" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (159 samples, 0.32%; +0.01%)</title><rect x="249.7" y="245" width="3.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="252.70" y="255.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (10 samples, 0.02%; 0.00%)</title><rect x="20.9" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.93" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (25 samples, 0.05%; 0.00%)</title><rect x="684.2" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.24" y="367.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (5,169 samples, 10.47%; +0.02%)</title><rect x="290.6" y="341" width="123.6" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="293.60" y="351.5" >seastar::futuri..</text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (320 samples, 0.65%; +0.01%)</title><rect x="32.9" y="485" width="7.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="35.86" y="495.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (6 samples, 0.01%; -0.01%)</title><rect x="244.9" y="197" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="247.94" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (30 samples, 0.06%; +0.01%)</title><rect x="142.1" y="261" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="145.09" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (40 samples, 0.08%; +0.01%)</title><rect x="737.3" y="325" width="1.0" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="740.34" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (5 samples, 0.01%; +0.01%)</title><rect x="231.2" y="181" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="234.24" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (6 samples, 0.01%; 0.00%)</title><rect x="258.9" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="261.85" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (17 samples, 0.03%; -0.00%)</title><rect x="934.8" y="389" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="937.81" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (376 samples, 0.76%; -0.03%)</title><rect x="395.6" y="261" width="9.0" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="398.58" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (18 samples, 0.04%; -0.01%)</title><rect x="949.4" y="421" width="0.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="952.44" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (8 samples, 0.02%; -0.05%)</title><rect x="949.1" y="405" width="0.2" height="15.0" fill="rgb(151,151,255)" rx="2" ry="2" />
<text  x="952.06" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (9 samples, 0.02%; +0.00%)</title><rect x="811.4" y="277" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="814.43" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (2,653 samples, 5.38%; -0.02%)</title><rect x="881.5" y="421" width="63.4" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="884.52" y="431.5" >cql3::..</text>
</g>
<g >
<title>operator new (94 samples, 0.19%; -0.00%)</title><rect x="975.5" y="357" width="2.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="978.45" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (7 samples, 0.01%; +0.01%)</title><rect x="511.4" y="293" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="514.43" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_per_partition_limit (7 samples, 0.01%; +0.01%)</title><rect x="1114.2" y="421" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1117.24" y="431.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (20 samples, 0.04%; -0.00%)</title><rect x="1175.5" y="421" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1178.46" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (691 samples, 1.40%; +0.01%)</title><rect x="554.7" y="373" width="16.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="557.66" y="383.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (278 samples, 0.56%; -0.03%)</title><rect x="1085.9" y="245" width="6.7" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1088.93" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (5 samples, 0.01%; +0.00%)</title><rect x="697.6" y="469" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="700.65" y="479.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (116 samples, 0.24%; +0.01%)</title><rect x="714.7" y="469" width="2.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="717.74" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; +0.01%)</title><rect x="294.7" y="261" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="297.69" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (17 samples, 0.03%; +0.00%)</title><rect x="1109.1" y="357" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1112.07" y="367.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (37 samples, 0.07%; -0.02%)</title><rect x="192.2" y="69" width="0.9" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="195.20" y="79.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (261 samples, 0.53%; +0.00%)</title><rect x="989.3" y="341" width="6.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="992.32" y="351.5" ></text>
</g>
<g >
<title>database::find_schema (234 samples, 0.47%; -0.01%)</title><rect x="819.9" y="373" width="5.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="822.89" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (862 samples, 1.75%; -0.01%)</title><rect x="642.1" y="501" width="20.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="645.11" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::stats (30 samples, 0.06%; -0.01%)</title><rect x="486.1" y="309" width="0.8" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="489.14" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (5 samples, 0.01%; 0.00%)</title><rect x="17.7" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.67" y="223.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (43 samples, 0.09%; +0.01%)</title><rect x="727.5" y="293" width="1.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="730.46" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (21 samples, 0.04%; +0.01%)</title><rect x="955.9" y="357" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="958.92" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (12 samples, 0.02%; +0.01%)</title><rect x="369.0" y="197" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="371.99" y="207.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (6 samples, 0.01%; -0.00%)</title><rect x="190.4" y="85" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="193.41" y="95.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (16 samples, 0.03%; +0.00%)</title><rect x="402.1" y="197" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="405.13" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (30 samples, 0.06%; +0.01%)</title><rect x="1074.9" y="293" width="0.7" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1077.89" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (48,411 samples, 98.08%; -0.01%)</title><rect x="21.7" y="533" width="1157.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="24.71" y="543.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>operator new (32 samples, 0.06%; +0.00%)</title><rect x="291.5" y="293" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="294.46" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (18 samples, 0.04%; +0.02%)</title><rect x="144.8" y="277" width="0.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="147.84" y="287.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.06%; 0.00%)</title><rect x="532.4" y="261" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="535.43" y="271.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (12 samples, 0.02%; +0.01%)</title><rect x="1162.1" y="405" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1165.10" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (16 samples, 0.03%; -0.01%)</title><rect x="284.7" y="357" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="287.70" y="367.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; -0.00%)</title><rect x="410.8" y="293" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="413.76" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (62 samples, 0.13%; -0.01%)</title><rect x="127.0" y="293" width="1.5" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="130.00" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (12 samples, 0.02%; 0.00%)</title><rect x="943.6" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="946.59" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (5 samples, 0.01%; -0.01%)</title><rect x="391.9" y="245" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="394.95" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (329 samples, 0.67%; +0.00%)</title><rect x="396.6" y="229" width="7.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="399.61" y="239.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (10 samples, 0.02%; -0.00%)</title><rect x="1166.5" y="453" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1169.52" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume (23 samples, 0.05%; -0.01%)</title><rect x="392.7" y="229" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="395.71" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; 0.00%)</title><rect x="518.7" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="521.68" y="335.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (36 samples, 0.07%; -0.01%)</title><rect x="895.3" y="261" width="0.9" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="898.32" y="271.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (187 samples, 0.38%; -0.01%)</title><rect x="944.9" y="421" width="4.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="947.95" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (42 samples, 0.09%; -0.00%)</title><rect x="617.2" y="389" width="1.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="620.15" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (30 samples, 0.06%; -0.01%)</title><rect x="291.5" y="277" width="0.7" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="294.51" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (453 samples, 0.92%; -0.04%)</title><rect x="65.9" y="421" width="10.9" height="15.0" fill="rgb(158,158,255)" rx="2" ry="2" />
<text  x="68.94" y="431.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (92 samples, 0.19%; +0.02%)</title><rect x="361.4" y="165" width="2.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="364.44" y="175.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (138 samples, 0.28%; -0.01%)</title><rect x="530.2" y="309" width="3.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="533.18" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (200 samples, 0.41%; -0.01%)</title><rect x="741.1" y="357" width="4.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="744.11" y="367.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (41 samples, 0.08%; 0.00%)</title><rect x="836.4" y="437" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="839.41" y="447.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (6 samples, 0.01%; -0.00%)</title><rect x="684.4" y="261" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="687.43" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (70 samples, 0.14%; +0.01%)</title><rect x="999.7" y="245" width="1.7" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1002.70" y="255.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (24 samples, 0.05%; +0.01%)</title><rect x="289.4" y="373" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="292.36" y="383.5" ></text>
</g>
<g >
<title>dht::shard_of (31 samples, 0.06%; +0.01%)</title><rect x="1009.0" y="277" width="0.8" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1012.02" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (12 samples, 0.02%; -0.00%)</title><rect x="605.2" y="437" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="608.20" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (7 samples, 0.01%; +0.01%)</title><rect x="1054.1" y="293" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1057.11" y="303.5" ></text>
</g>
<g >
<title>__tls_init (7 samples, 0.01%; -0.01%)</title><rect x="485.9" y="309" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="488.93" y="319.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (15 samples, 0.03%; +0.01%)</title><rect x="222.4" y="117" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="225.44" y="127.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (8 samples, 0.02%; +0.01%)</title><rect x="869.2" y="469" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="872.19" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (8 samples, 0.02%; +0.00%)</title><rect x="1146.6" y="485" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1149.56" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (12 samples, 0.02%; -0.00%)</title><rect x="704.5" y="453" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="707.46" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (6 samples, 0.01%; 0.00%)</title><rect x="1051.6" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1054.62" y="255.5" ></text>
</g>
<g >
<title>operator new (84 samples, 0.17%; -0.01%)</title><rect x="1041.4" y="261" width="2.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1044.42" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (36 samples, 0.07%; -0.01%)</title><rect x="320.3" y="165" width="0.9" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="323.29" y="175.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (6 samples, 0.01%; +0.01%)</title><rect x="404.7" y="261" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="407.74" y="271.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (7 samples, 0.01%; +0.01%)</title><rect x="1004.8" y="293" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1007.84" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (5 samples, 0.01%; +0.00%)</title><rect x="262.6" y="309" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="265.56" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (58 samples, 0.12%; +0.01%)</title><rect x="402.5" y="213" width="1.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="405.51" y="223.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (20 samples, 0.04%; +0.02%)</title><rect x="600.4" y="437" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="603.37" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (16 samples, 0.03%; +0.01%)</title><rect x="260.2" y="277" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="263.17" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (45 samples, 0.09%; 0.00%)</title><rect x="73.7" y="389" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.69" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::shared_ptr_count_for&lt;cql3::metadata&amp;&gt; (5 samples, 0.01%; +0.00%)</title><rect x="651.5" y="453" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="654.48" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.01%; +0.00%)</title><rect x="917.9" y="341" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="920.91" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (23 samples, 0.05%; -0.00%)</title><rect x="637.3" y="485" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="640.33" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (15 samples, 0.03%; +0.01%)</title><rect x="607.1" y="437" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="610.14" y="447.5" ></text>
</g>
<g >
<title>__tls_init (14 samples, 0.03%; +0.01%)</title><rect x="528.5" y="293" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="531.53" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (9 samples, 0.02%; -0.01%)</title><rect x="996.6" y="325" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="999.56" y="335.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (9 samples, 0.02%; 0.00%)</title><rect x="863.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.69" y="431.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (106 samples, 0.21%; -0.02%)</title><rect x="530.6" y="277" width="2.6" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="533.63" y="287.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (7 samples, 0.01%; +0.00%)</title><rect x="750.2" y="357" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="753.15" y="367.5" ></text>
</g>
<g >
<title>operator new (37 samples, 0.07%; +0.01%)</title><rect x="546.4" y="357" width="0.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="549.36" y="367.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (26 samples, 0.05%; -0.02%)</title><rect x="243.9" y="181" width="0.6" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="246.89" y="191.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (7 samples, 0.01%; -0.00%)</title><rect x="955.6" y="373" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="958.56" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (18 samples, 0.04%; 0.00%)</title><rect x="684.2" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.24" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.01%; 0.00%)</title><rect x="15.2" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.24" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (42 samples, 0.09%; +0.01%)</title><rect x="535.7" y="341" width="1.0" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="538.65" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (76 samples, 0.15%; +0.01%)</title><rect x="571.7" y="373" width="1.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="574.71" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.01%)</title><rect x="653.6" y="437" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="656.64" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (89 samples, 0.18%; -0.00%)</title><rect x="674.8" y="485" width="2.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="677.82" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (414 samples, 0.84%; -0.00%)</title><rect x="662.7" y="501" width="9.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="665.75" y="511.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (124 samples, 0.25%; +0.01%)</title><rect x="1156.8" y="469" width="3.0" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1159.82" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (20 samples, 0.04%; -0.01%)</title><rect x="625.4" y="469" width="0.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="628.38" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (6 samples, 0.01%; -0.01%)</title><rect x="1119.8" y="357" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1122.81" y="367.5" ></text>
</g>
<g >
<title>reader_permit::consume (8 samples, 0.02%; +0.00%)</title><rect x="504.9" y="165" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="507.93" y="175.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (13 samples, 0.03%; -0.03%)</title><rect x="880.8" y="421" width="0.3" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="883.80" y="431.5" ></text>
</g>
<g >
<title>operator new (75 samples, 0.15%; 0.00%)</title><rect x="278.4" y="277" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="281.36" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (37 samples, 0.07%; -0.01%)</title><rect x="218.6" y="165" width="0.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="221.59" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (89 samples, 0.18%; +0.01%)</title><rect x="577.3" y="357" width="2.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="580.25" y="367.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (446 samples, 0.90%; +0.02%)</title><rect x="310.6" y="197" width="10.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="313.56" y="207.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (23 samples, 0.05%; -0.00%)</title><rect x="575.6" y="357" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="578.55" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (12 samples, 0.02%; -0.00%)</title><rect x="23.6" y="517" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="26.58" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (11 samples, 0.02%; -0.00%)</title><rect x="742.0" y="293" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="745.05" y="303.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%; +0.00%)</title><rect x="157.6" y="181" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="160.58" y="191.5" ></text>
</g>
<g >
<title>table::as_mutation_source (94 samples, 0.19%; -0.02%)</title><rect x="622.2" y="437" width="2.2" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="625.17" y="447.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%; -0.00%)</title><rect x="504.0" y="197" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="507.02" y="207.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.28" y="511.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (5 samples, 0.01%; -0.01%)</title><rect x="1101.5" y="245" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1104.47" y="255.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (41 samples, 0.08%; +0.00%)</title><rect x="955.5" y="389" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="958.47" y="399.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (67 samples, 0.14%; -0.00%)</title><rect x="780.9" y="293" width="1.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="783.90" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (16 samples, 0.03%; -0.01%)</title><rect x="99.9" y="405" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="102.89" y="415.5" ></text>
</g>
<g >
<title>__tls_init (7 samples, 0.01%; -0.00%)</title><rect x="496.0" y="261" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="498.97" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (29 samples, 0.06%; -0.00%)</title><rect x="803.7" y="229" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="806.73" y="239.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (50 samples, 0.10%; -0.02%)</title><rect x="232.0" y="229" width="1.2" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="234.96" y="239.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::got_cl (6 samples, 0.01%; -0.02%)</title><rect x="692.9" y="469" width="0.2" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="695.94" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (38 samples, 0.08%; +0.03%)</title><rect x="709.3" y="501" width="0.9" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="712.27" y="511.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (26 samples, 0.05%; +0.03%)</title><rect x="508.6" y="229" width="0.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="511.61" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (7 samples, 0.01%; +0.01%)</title><rect x="1146.2" y="117" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1149.15" y="127.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (9 samples, 0.02%; +0.01%)</title><rect x="825.7" y="325" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="828.75" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (86 samples, 0.17%; +0.01%)</title><rect x="440.0" y="261" width="2.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="442.98" y="271.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (18 samples, 0.04%; +0.00%)</title><rect x="244.5" y="181" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="247.51" y="191.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (13 samples, 0.03%; +0.01%)</title><rect x="1065.2" y="277" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1068.23" y="287.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (20 samples, 0.04%; -0.00%)</title><rect x="538.5" y="405" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="541.47" y="415.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.01%; 0.00%)</title><rect x="44.0" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.02" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (6 samples, 0.01%; 0.00%)</title><rect x="996.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="999.33" y="335.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (992 samples, 2.01%; -0.03%)</title><rect x="783.2" y="277" width="23.7" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="786.17" y="287.5" >a..</text>
</g>
<g >
<title>reader_permit::consume (6 samples, 0.01%; +0.01%)</title><rect x="162.0" y="181" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="164.98" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (415 samples, 0.84%; +0.00%)</title><rect x="560.8" y="325" width="9.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="563.78" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (21 samples, 0.04%; +0.01%)</title><rect x="806.1" y="229" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="809.14" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,616 samples, 9.35%; -0.01%)</title><rect x="298.0" y="277" width="110.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="301.01" y="287.5" >flat_mutation..</text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (10 samples, 0.02%; +0.02%)</title><rect x="994.0" y="245" width="0.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="996.96" y="255.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (12 samples, 0.02%; +0.01%)</title><rect x="744.4" y="261" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="747.39" y="271.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (40 samples, 0.08%; 0.00%)</title><rect x="274.4" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="277.39" y="319.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (6 samples, 0.01%; 0.00%)</title><rect x="529.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="532.94" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (28 samples, 0.06%; 0.00%)</title><rect x="690.8" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="693.81" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (112 samples, 0.23%; -0.02%)</title><rect x="211.9" y="117" width="2.7" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="214.95" y="127.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (21 samples, 0.04%; -0.00%)</title><rect x="234.8" y="229" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="237.85" y="239.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%; -0.00%)</title><rect x="1159.2" y="437" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1162.18" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (28 samples, 0.06%; +0.01%)</title><rect x="328.8" y="181" width="0.6" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="331.76" y="191.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (27 samples, 0.05%; -0.02%)</title><rect x="1028.1" y="181" width="0.7" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="1031.12" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (150 samples, 0.30%; +0.00%)</title><rect x="159.1" y="229" width="3.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="162.11" y="239.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (18 samples, 0.04%; -0.01%)</title><rect x="815.5" y="277" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="818.47" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (452 samples, 0.92%; -0.03%)</title><rect x="498.7" y="261" width="10.8" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="501.67" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (29 samples, 0.06%; -0.01%)</title><rect x="134.0" y="245" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="137.03" y="255.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (211 samples, 0.43%; +0.00%)</title><rect x="723.9" y="405" width="5.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="726.85" y="415.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (12 samples, 0.02%; -0.01%)</title><rect x="699.8" y="453" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="702.80" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (47 samples, 0.10%; +0.02%)</title><rect x="1152.5" y="485" width="1.1" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="1155.47" y="495.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (79 samples, 0.16%; -0.08%)</title><rect x="12.6" y="581" width="1.9" height="15.0" fill="rgb(109,109,255)" rx="2" ry="2" />
<text  x="15.61" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (7 samples, 0.01%; -0.01%)</title><rect x="78.7" y="453" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="81.66" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (8 samples, 0.02%; +0.01%)</title><rect x="139.9" y="213" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="142.87" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (125 samples, 0.25%; -0.01%)</title><rect x="1133.8" y="405" width="3.0" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1136.82" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (102 samples, 0.21%; +0.01%)</title><rect x="1122.0" y="373" width="2.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1125.01" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (35 samples, 0.07%; +0.01%)</title><rect x="768.1" y="373" width="0.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="771.06" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (5 samples, 0.01%; +0.01%)</title><rect x="66.9" y="405" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="69.95" y="415.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (18 samples, 0.04%; +0.02%)</title><rect x="236.1" y="245" width="0.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="239.07" y="255.5" ></text>
</g>
<g >
<title>tracing::add_table_name (18 samples, 0.04%; +0.01%)</title><rect x="1143.1" y="421" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1146.09" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; -0.01%)</title><rect x="565.1" y="277" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="568.11" y="287.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (31 samples, 0.06%; 0.00%)</title><rect x="420.9" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="423.87" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (8 samples, 0.02%; +0.01%)</title><rect x="592.1" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="595.10" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (84 samples, 0.17%; +0.01%)</title><rect x="978.3" y="325" width="2.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="981.35" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.00%)</title><rect x="158.9" y="181" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="161.94" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.00%)</title><rect x="668.2" y="453" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="671.17" y="463.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (28 samples, 0.06%; +0.02%)</title><rect x="371.8" y="181" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="374.77" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (92 samples, 0.19%; 0.00%)</title><rect x="651.6" y="469" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="654.60" y="479.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (14 samples, 0.03%; +0.01%)</title><rect x="1001.4" y="261" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1004.39" y="271.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (36 samples, 0.07%; +0.00%)</title><rect x="488.6" y="309" width="0.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="491.60" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; +0.00%)</title><rect x="847.6" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="850.65" y="335.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (530 samples, 1.07%; +0.02%)</title><rect x="308.7" y="213" width="12.7" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="311.70" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (42 samples, 0.09%; +0.01%)</title><rect x="408.8" y="277" width="1.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="411.80" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (27 samples, 0.05%; +0.01%)</title><rect x="1133.0" y="373" width="0.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1135.98" y="383.5" ></text>
</g>
<g >
<title>seastar::gate::enter (8 samples, 0.02%; -0.00%)</title><rect x="1041.1" y="229" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1044.08" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (7 samples, 0.01%; +0.01%)</title><rect x="1047.4" y="277" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1050.42" y="287.5" ></text>
</g>
<g >
<title>dht::tri_compare (13 samples, 0.03%; -0.01%)</title><rect x="1099.5" y="245" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1102.51" y="255.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (73 samples, 0.15%; -0.00%)</title><rect x="859.0" y="469" width="1.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="861.98" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (6 samples, 0.01%; +0.01%)</title><rect x="746.3" y="389" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="749.28" y="399.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (518 samples, 1.05%; +0.01%)</title><rect x="471.9" y="293" width="12.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="474.87" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (6 samples, 0.01%; -0.01%)</title><rect x="1124.3" y="341" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1127.30" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (16 samples, 0.03%; -0.00%)</title><rect x="954.8" y="405" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="957.82" y="415.5" ></text>
</g>
<g >
<title>operator delete (60 samples, 0.12%; -0.00%)</title><rect x="577.9" y="341" width="1.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="580.95" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (6 samples, 0.01%; +0.01%)</title><rect x="839.9" y="373" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="842.95" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (27 samples, 0.05%; +0.00%)</title><rect x="767.3" y="357" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="770.27" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (80 samples, 0.16%; +0.00%)</title><rect x="677.4" y="469" width="2.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="680.45" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (7 samples, 0.01%; -0.03%)</title><rect x="579.4" y="357" width="0.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="582.38" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (11 samples, 0.02%; +0.01%)</title><rect x="1142.7" y="405" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1145.73" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (25 samples, 0.05%; +0.02%)</title><rect x="791.7" y="165" width="0.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="794.75" y="175.5" ></text>
</g>
<g >
<title>free (21 samples, 0.04%; +0.00%)</title><rect x="35.7" y="421" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="38.72" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (31 samples, 0.06%; 0.00%)</title><rect x="1145.8" y="357" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.82" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (74 samples, 0.15%; +0.03%)</title><rect x="854.5" y="421" width="1.8" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="857.53" y="431.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.01%; 0.00%)</title><rect x="17.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.29" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (24 samples, 0.05%; -0.01%)</title><rect x="389.5" y="197" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="392.53" y="207.5" ></text>
</g>
<g >
<title>operator delete (47 samples, 0.10%; -0.00%)</title><rect x="559.6" y="325" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="562.63" y="335.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (29 samples, 0.06%; -0.00%)</title><rect x="800.1" y="101" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="803.07" y="111.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (8 samples, 0.02%; +0.01%)</title><rect x="1058.6" y="341" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1061.58" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (41 samples, 0.08%; +0.02%)</title><rect x="557.7" y="309" width="1.0" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="560.74" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (20 samples, 0.04%; 0.00%)</title><rect x="433.2" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="436.16" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (6 samples, 0.01%; +0.01%)</title><rect x="694.4" y="453" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="697.35" y="463.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (24 samples, 0.05%; +0.01%)</title><rect x="1069.4" y="341" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1072.36" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (9 samples, 0.02%; +0.01%)</title><rect x="571.2" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="574.18" y="383.5" ></text>
</g>
<g >
<title>operator new (47 samples, 0.10%; -0.00%)</title><rect x="1163.4" y="437" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1166.44" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (30 samples, 0.06%; +0.04%)</title><rect x="603.6" y="421" width="0.7" height="15.0" fill="rgb(255,158,158)" rx="2" ry="2" />
<text  x="606.60" y="431.5" ></text>
</g>
<g >
<title>sstring_hash::operator (40 samples, 0.08%; -0.00%)</title><rect x="840.1" y="373" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="843.11" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (71 samples, 0.14%; +0.00%)</title><rect x="646.3" y="453" width="1.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="649.32" y="463.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (11,707 samples, 23.72%; +0.01%)</title><rect x="865.0" y="485" width="279.9" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="868.05" y="495.5" >seastar::concrete_execution_stage&lt;sea..</text>
</g>
<g >
<title>operator delete (20 samples, 0.04%; -0.00%)</title><rect x="1151.6" y="485" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1154.56" y="495.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (9 samples, 0.02%; +0.00%)</title><rect x="551.5" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="554.50" y="415.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (9 samples, 0.02%; -0.00%)</title><rect x="914.3" y="389" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="917.28" y="399.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (457 samples, 0.93%; +0.03%)</title><rect x="522.6" y="325" width="11.0" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="525.65" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (103 samples, 0.21%; -0.00%)</title><rect x="506.8" y="245" width="2.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="509.77" y="255.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1,293 samples, 2.62%; +0.03%)</title><rect x="1015.1" y="277" width="30.9" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="1018.07" y="287.5" >se..</text>
</g>
<g >
<title>operator new (27 samples, 0.05%; -0.00%)</title><rect x="857.7" y="437" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="860.73" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (8 samples, 0.02%; +0.01%)</title><rect x="907.4" y="341" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="910.39" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (7 samples, 0.01%; +0.01%)</title><rect x="993.1" y="277" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="996.07" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (8 samples, 0.02%; +0.01%)</title><rect x="1100.2" y="293" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1103.23" y="303.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (11 samples, 0.02%; +0.01%)</title><rect x="882.8" y="405" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="885.77" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (5 samples, 0.01%; -0.05%)</title><rect x="246.0" y="213" width="0.2" height="15.0" fill="rgb(153,153,255)" rx="2" ry="2" />
<text  x="249.04" y="223.5" ></text>
</g>
<g >
<title>operator delete (68 samples, 0.14%; 0.00%)</title><rect x="405.1" y="245" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="408.12" y="255.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (24 samples, 0.05%; -0.01%)</title><rect x="1067.7" y="277" width="0.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1070.74" y="287.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (10 samples, 0.02%; -0.00%)</title><rect x="81.0" y="453" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="84.01" y="463.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (9 samples, 0.02%; +0.01%)</title><rect x="597.3" y="389" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="600.31" y="399.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (36 samples, 0.07%; +0.00%)</title><rect x="791.5" y="181" width="0.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="794.49" y="191.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (7 samples, 0.01%; -0.01%)</title><rect x="777.1" y="309" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="780.09" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (17 samples, 0.03%; -0.02%)</title><rect x="207.2" y="117" width="0.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="210.21" y="127.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (5 samples, 0.01%; -0.00%)</title><rect x="314.5" y="165" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="317.46" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (32 samples, 0.06%; 0.00%)</title><rect x="801.6" y="213" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="804.65" y="223.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (8 samples, 0.02%; +0.01%)</title><rect x="1053.6" y="277" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1056.56" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (10 samples, 0.02%; +0.00%)</title><rect x="458.9" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="461.89" y="303.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (6 samples, 0.01%; +0.00%)</title><rect x="223.2" y="149" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="226.16" y="159.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (10 samples, 0.02%; +0.01%)</title><rect x="694.5" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="697.49" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (90 samples, 0.18%; -0.01%)</title><rect x="788.1" y="213" width="2.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="791.07" y="223.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (17 samples, 0.03%; +0.02%)</title><rect x="60.4" y="453" width="0.4" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="63.37" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.01%)</title><rect x="615.5" y="405" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="618.46" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (5 samples, 0.01%; +0.01%)</title><rect x="1054.5" y="309" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1057.54" y="319.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.07%; 0.00%)</title><rect x="1144.9" y="469" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.93" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (5 samples, 0.01%; +0.01%)</title><rect x="253.0" y="213" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="256.02" y="223.5" ></text>
</g>
<g >
<title>[unknown] (183 samples, 0.37%; 0.00%)</title><rect x="10.1" y="597" width="4.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.12" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (7 samples, 0.01%; -0.02%)</title><rect x="540.8" y="405" width="0.1" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="543.77" y="415.5" ></text>
</g>
<g >
<title>__tls_init (7 samples, 0.01%; -0.01%)</title><rect x="486.7" y="293" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="489.69" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; -0.00%)</title><rect x="233.0" y="181" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="235.96" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (9 samples, 0.02%; -0.01%)</title><rect x="621.1" y="437" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="624.10" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (20 samples, 0.04%; -0.02%)</title><rect x="259.4" y="277" width="0.4" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="262.35" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (12 samples, 0.02%; -0.02%)</title><rect x="208.7" y="149" width="0.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="211.72" y="159.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (8 samples, 0.02%; 0.00%)</title><rect x="21.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.28" y="431.5" ></text>
</g>
<g >
<title>operator delete (13 samples, 0.03%; -0.00%)</title><rect x="562.5" y="277" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="565.55" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.00%)</title><rect x="1141.9" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1144.85" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (77 samples, 0.16%; +0.01%)</title><rect x="154.4" y="197" width="1.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="157.42" y="207.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (23 samples, 0.05%; +0.03%)</title><rect x="880.0" y="421" width="0.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="882.99" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.06%; 0.00%)</title><rect x="1145.8" y="389" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.80" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (529 samples, 1.07%; -0.01%)</title><rect x="695.7" y="501" width="12.7" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="698.71" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::syscall_pollfn::poll (5 samples, 0.01%; -0.00%)</title><rect x="1178.4" y="501" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1181.40" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (12 samples, 0.02%; +0.01%)</title><rect x="641.3" y="485" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="644.35" y="495.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (19 samples, 0.04%; +0.03%)</title><rect x="556.6" y="341" width="0.5" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="559.62" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.02%; +0.00%)</title><rect x="482.3" y="181" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="485.29" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (18 samples, 0.04%; +0.02%)</title><rect x="536.7" y="341" width="0.4" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="539.66" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (10 samples, 0.02%; +0.01%)</title><rect x="396.2" y="229" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="399.20" y="239.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (88 samples, 0.18%; 0.00%)</title><rect x="154.3" y="213" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="157.26" y="223.5" ></text>
</g>
<g >
<title>table::query (22 samples, 0.04%; +0.00%)</title><rect x="1177.0" y="501" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1180.02" y="511.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (7 samples, 0.01%; +0.01%)</title><rect x="1121.4" y="389" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1124.41" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (8 samples, 0.02%; +0.00%)</title><rect x="224.6" y="149" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="227.62" y="159.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (12 samples, 0.02%; 0.00%)</title><rect x="285.7" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="288.70" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (179 samples, 0.36%; -0.01%)</title><rect x="249.2" y="261" width="4.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="252.24" y="271.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (22 samples, 0.04%; -0.01%)</title><rect x="333.5" y="181" width="0.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="336.54" y="191.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (9 samples, 0.02%; +0.00%)</title><rect x="692.6" y="437" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="695.56" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (478 samples, 0.97%; -0.01%)</title><rect x="672.7" y="501" width="11.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="675.67" y="511.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (9 samples, 0.02%; +0.01%)</title><rect x="453.5" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="456.53" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (11 samples, 0.02%; +0.01%)</title><rect x="939.4" y="405" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="942.38" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (61 samples, 0.12%; -0.01%)</title><rect x="857.5" y="453" width="1.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="860.47" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; -0.00%)</title><rect x="806.3" y="213" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="809.29" y="223.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (12 samples, 0.02%; +0.01%)</title><rect x="174.8" y="133" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="177.77" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (87 samples, 0.18%; +0.01%)</title><rect x="1073.5" y="309" width="2.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1076.52" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (38 samples, 0.08%; -0.00%)</title><rect x="450.0" y="261" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="453.02" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (69 samples, 0.14%; +0.02%)</title><rect x="966.2" y="357" width="1.7" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="969.20" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (7 samples, 0.01%; +0.01%)</title><rect x="1080.5" y="293" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1083.50" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (149 samples, 0.30%; +0.01%)</title><rect x="34.2" y="469" width="3.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="37.22" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (51 samples, 0.10%; -0.01%)</title><rect x="823.2" y="309" width="1.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="826.16" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (260 samples, 0.53%; +0.04%)</title><rect x="135.4" y="261" width="6.2" height="15.0" fill="rgb(255,156,156)" rx="2" ry="2" />
<text  x="138.42" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (95 samples, 0.19%; +0.02%)</title><rect x="748.5" y="405" width="2.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="751.53" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (22 samples, 0.04%; +0.00%)</title><rect x="18.4" y="293" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="21.42" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (86 samples, 0.17%; +0.01%)</title><rect x="817.5" y="389" width="2.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="820.47" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (10 samples, 0.02%; +0.01%)</title><rect x="287.1" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="290.06" y="399.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (30 samples, 0.06%; +0.01%)</title><rect x="1100.9" y="277" width="0.8" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1103.94" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (12 samples, 0.02%; -0.00%)</title><rect x="549.4" y="389" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="552.35" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (48 samples, 0.10%; 0.00%)</title><rect x="1154.4" y="485" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1157.38" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (79 samples, 0.16%; +0.02%)</title><rect x="1059.2" y="309" width="1.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1062.20" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (133 samples, 0.27%; -0.01%)</title><rect x="941.8" y="405" width="3.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="944.77" y="415.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (55 samples, 0.11%; +0.01%)</title><rect x="461.3" y="293" width="1.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="464.25" y="303.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; 0.00%)</title><rect x="834.2" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="837.16" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (13 samples, 0.03%; -0.00%)</title><rect x="206.8" y="101" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="209.83" y="111.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (10 samples, 0.02%; 0.00%)</title><rect x="778.8" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="781.84" y="319.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (41 samples, 0.08%; 0.00%)</title><rect x="320.2" y="181" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="323.25" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.01%)</title><rect x="300.3" y="245" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="303.28" y="255.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (6 samples, 0.01%; 0.00%)</title><rect x="901.8" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="904.77" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (67 samples, 0.14%; 0.00%)</title><rect x="17.5" y="341" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.48" y="351.5" ></text>
</g>
<g >
<title>free (107 samples, 0.22%; 0.00%)</title><rect x="399.0" y="181" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="402.05" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (8 samples, 0.02%; +0.01%)</title><rect x="834.9" y="357" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="837.85" y="367.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (72 samples, 0.15%; +0.03%)</title><rect x="601.4" y="421" width="1.7" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="604.35" y="431.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (19 samples, 0.04%; +0.01%)</title><rect x="1005.5" y="293" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1008.51" y="303.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (268 samples, 0.54%; 0.00%)</title><rect x="14.8" y="565" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.83" y="575.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (11 samples, 0.02%; 0.00%)</title><rect x="482.5" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="485.48" y="191.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (17 samples, 0.03%; -0.03%)</title><rect x="901.3" y="277" width="0.4" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="904.29" y="287.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (242 samples, 0.49%; +0.00%)</title><rect x="1131.0" y="421" width="5.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1134.04" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (15 samples, 0.03%; -0.00%)</title><rect x="700.6" y="437" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="703.61" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (10 samples, 0.02%; +0.01%)</title><rect x="717.0" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="719.99" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (12 samples, 0.02%; -0.00%)</title><rect x="934.9" y="373" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="937.93" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (124 samples, 0.25%; +0.02%)</title><rect x="1011.7" y="261" width="3.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1014.75" y="271.5" ></text>
</g>
<g >
<title>schema_registry::get (132 samples, 0.27%; +0.01%)</title><rect x="977.7" y="357" width="3.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="980.70" y="367.5" ></text>
</g>
<g >
<title>reader_permit::consume (6 samples, 0.01%; 0.00%)</title><rect x="216.8" y="133" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="219.75" y="143.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (5 samples, 0.01%; -0.02%)</title><rect x="1054.3" y="293" width="0.1" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="1057.33" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (46 samples, 0.09%; +0.01%)</title><rect x="567.7" y="277" width="1.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="570.67" y="287.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (399 samples, 0.81%; 0.00%)</title><rect x="541.3" y="405" width="9.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="544.32" y="415.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (14 samples, 0.03%; +0.01%)</title><rect x="767.4" y="341" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="770.39" y="351.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (2,008 samples, 4.07%; +0.01%)</title><rect x="769.1" y="389" width="48.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="772.09" y="399.5" >std:..</text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (42 samples, 0.09%; -0.00%)</title><rect x="741.9" y="309" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="744.90" y="319.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (25 samples, 0.05%; -0.02%)</title><rect x="508.0" y="229" width="0.6" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="511.02" y="239.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (37 samples, 0.07%; -0.02%)</title><rect x="288.5" y="373" width="0.9" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="291.47" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (85 samples, 0.17%; -0.00%)</title><rect x="616.6" y="405" width="2.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="619.58" y="415.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (23 samples, 0.05%; -0.00%)</title><rect x="1145.0" y="277" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1147.98" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (200 samples, 0.41%; 0.00%)</title><rect x="15.1" y="405" width="4.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.09" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (13 samples, 0.03%; +0.00%)</title><rect x="934.0" y="357" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="936.98" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="490.4" y="309" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="493.44" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="261.4" y="293" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="264.43" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (22 samples, 0.04%; +0.02%)</title><rect x="821.3" y="293" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="824.25" y="303.5" ></text>
</g>
<g >
<title>db::filter_for_query (37 samples, 0.07%; -0.01%)</title><rect x="1070.0" y="341" width="0.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1072.98" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (6 samples, 0.01%; +0.01%)</title><rect x="687.7" y="469" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="690.73" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (5 samples, 0.01%; +0.00%)</title><rect x="736.5" y="373" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="739.52" y="383.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (10 samples, 0.02%; +0.00%)</title><rect x="327.7" y="181" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="330.73" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (7 samples, 0.01%; +0.01%)</title><rect x="1043.8" y="261" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1046.78" y="271.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (1,127 samples, 2.28%; +0.01%)</title><rect x="885.0" y="373" width="27.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="888.04" y="383.5" >_..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (93 samples, 0.19%; -0.02%)</title><rect x="480.5" y="197" width="2.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="483.52" y="207.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.01%; +0.01%)</title><rect x="1069.2" y="325" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1072.20" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (81 samples, 0.16%; 0.00%)</title><rect x="412.0" y="293" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="415.00" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (19 samples, 0.04%; +0.01%)</title><rect x="612.9" y="421" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="615.87" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (30 samples, 0.06%; -0.02%)</title><rect x="868.2" y="469" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="871.21" y="479.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (10 samples, 0.02%; 0.00%)</title><rect x="406.7" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="409.74" y="255.5" ></text>
</g>
<g >
<title>query::querier&lt; (17 samples, 0.03%; -0.10%)</title><rect x="59.8" y="453" width="0.4" height="15.0" fill="rgb(90,90,255)" rx="2" ry="2" />
<text  x="62.75" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (38 samples, 0.08%; +0.07%)</title><rect x="961.6" y="389" width="0.9" height="15.0" fill="rgb(255,124,124)" rx="2" ry="2" />
<text  x="964.64" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (8 samples, 0.02%; +0.01%)</title><rect x="803.5" y="229" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="806.54" y="239.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (12 samples, 0.02%; +0.01%)</title><rect x="1082.3" y="325" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1085.27" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (6 samples, 0.01%; +0.01%)</title><rect x="903.0" y="325" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="905.97" y="335.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (24 samples, 0.05%; +0.02%)</title><rect x="51.8" y="469" width="0.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="54.84" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.06%; 0.00%)</title><rect x="1145.8" y="437" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.80" y="447.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (251 samples, 0.51%; 0.00%)</title><rect x="14.9" y="485" width="6.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.92" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (8 samples, 0.02%; 0.00%)</title><rect x="701.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="704.62" y="431.5" ></text>
</g>
<g >
<title>operator new (52 samples, 0.11%; +0.01%)</title><rect x="537.2" y="405" width="1.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="540.23" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (7 samples, 0.01%; -0.01%)</title><rect x="321.9" y="197" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="324.94" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (29 samples, 0.06%; -0.01%)</title><rect x="990.7" y="293" width="0.7" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="993.73" y="303.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (144 samples, 0.29%; +0.02%)</title><rect x="392.1" y="245" width="3.4" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="395.06" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (9 samples, 0.02%; +0.01%)</title><rect x="818.8" y="357" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="821.84" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (52 samples, 0.11%; +0.00%)</title><rect x="808.0" y="293" width="1.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="811.01" y="303.5" ></text>
</g>
<g >
<title>operator new (53 samples, 0.11%; -0.00%)</title><rect x="843.8" y="405" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="846.77" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="584.2" y="421" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="587.23" y="431.5" ></text>
</g>
<g >
<title>__tls_init (14 samples, 0.03%; 0.00%)</title><rect x="147.9" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="150.85" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (12 samples, 0.02%; -0.01%)</title><rect x="618.3" y="373" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="621.28" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (14 samples, 0.03%; -0.08%)</title><rect x="387.4" y="149" width="0.3" height="15.0" fill="rgb(117,117,255)" rx="2" ry="2" />
<text  x="390.36" y="159.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (67 samples, 0.14%; -0.01%)</title><rect x="619.5" y="437" width="1.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="622.50" y="447.5" ></text>
</g>
<g >
<title>operator new (30 samples, 0.06%; -0.01%)</title><rect x="783.9" y="245" width="0.7" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="786.93" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (6 samples, 0.01%; +0.00%)</title><rect x="18.0" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="20.96" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (28 samples, 0.06%; +0.03%)</title><rect x="73.0" y="373" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="76.02" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,898 samples, 9.92%; +0.01%)</title><rect x="292.9" y="309" width="117.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="295.94" y="319.5" >std::__invoke_..</text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (6 samples, 0.01%; -0.00%)</title><rect x="958.7" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="961.72" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (5 samples, 0.01%; +0.00%)</title><rect x="554.0" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="556.97" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (13 samples, 0.03%; +0.00%)</title><rect x="315.6" y="165" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="318.61" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (18 samples, 0.04%; +0.01%)</title><rect x="270.3" y="341" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="273.26" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (20 samples, 0.04%; +0.02%)</title><rect x="168.6" y="197" width="0.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="171.60" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (7 samples, 0.01%; +0.01%)</title><rect x="819.6" y="389" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="822.60" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (13 samples, 0.03%; +0.02%)</title><rect x="260.9" y="277" width="0.3" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="263.86" y="287.5" ></text>
</g>
<g >
<title>operator new (74 samples, 0.15%; -0.00%)</title><rect x="966.1" y="373" width="1.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="969.08" y="383.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (46 samples, 0.09%; -0.01%)</title><rect x="525.9" y="277" width="1.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="528.92" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (16 samples, 0.03%; +0.03%)</title><rect x="1149.3" y="501" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1152.33" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (9 samples, 0.02%; -0.01%)</title><rect x="806.4" y="213" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="809.43" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="661.2" y="421" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="664.19" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (16 samples, 0.03%; -0.01%)</title><rect x="38.3" y="453" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="41.31" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (9 samples, 0.02%; -0.03%)</title><rect x="253.2" y="229" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="256.16" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (15 samples, 0.03%; +0.00%)</title><rect x="442.0" y="261" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="445.03" y="271.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (19 samples, 0.04%; +0.00%)</title><rect x="631.0" y="485" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="633.97" y="495.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (8 samples, 0.02%; +0.01%)</title><rect x="771.2" y="357" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="774.19" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (72 samples, 0.15%; -0.01%)</title><rect x="910.1" y="357" width="1.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="913.09" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (20 samples, 0.04%; +0.00%)</title><rect x="664.8" y="469" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="667.83" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt;::allocate (5 samples, 0.01%; -0.01%)</title><rect x="941.9" y="389" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="944.91" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (23 samples, 0.05%; -0.00%)</title><rect x="1173.4" y="453" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1176.43" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; 0.00%)</title><rect x="569.3" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="572.29" y="303.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (80 samples, 0.16%; -0.00%)</title><rect x="788.3" y="197" width="1.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="791.28" y="207.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; -0.01%)</title><rect x="650.0" y="453" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="653.03" y="463.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (6 samples, 0.01%; +0.01%)</title><rect x="239.8" y="197" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="242.80" y="207.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (328 samples, 0.66%; +0.00%)</title><rect x="476.3" y="229" width="7.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="479.29" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (9 samples, 0.02%; -0.00%)</title><rect x="389.2" y="213" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="392.20" y="223.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (6 samples, 0.01%; -0.00%)</title><rect x="739.9" y="357" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="742.87" y="367.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (7 samples, 0.01%; +0.01%)</title><rect x="703.7" y="421" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="706.70" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (552 samples, 1.12%; -0.05%)</title><rect x="131.3" y="277" width="13.2" height="15.0" fill="rgb(148,148,255)" rx="2" ry="2" />
<text  x="134.26" y="287.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (21 samples, 0.04%; +0.00%)</title><rect x="1071.7" y="341" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1074.68" y="351.5" ></text>
</g>
<g >
<title>database::find_schema (91 samples, 0.18%; +0.01%)</title><rect x="753.7" y="389" width="2.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="756.74" y="399.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (5 samples, 0.01%; 0.00%)</title><rect x="21.0" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.00" y="415.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (24 samples, 0.05%; -0.02%)</title><rect x="304.5" y="213" width="0.6" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="307.52" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,606 samples, 7.31%; +0.00%)</title><rect x="305.6" y="245" width="86.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="308.64" y="255.5" >flat_mutat..</text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (50 samples, 0.10%; +0.00%)</title><rect x="15.5" y="293" width="1.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="18.50" y="303.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (2,149 samples, 4.35%; +0.01%)</title><rect x="1003.2" y="309" width="51.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1006.16" y="319.5" >servi..</text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (8 samples, 0.02%; +0.01%)</title><rect x="1142.0" y="421" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1145.04" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (10 samples, 0.02%; +0.00%)</title><rect x="1037.2" y="229" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1040.16" y="239.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (34 samples, 0.07%; 0.00%)</title><rect x="1144.9" y="357" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.93" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (34 samples, 0.07%; -0.01%)</title><rect x="658.9" y="485" width="0.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="661.94" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (10 samples, 0.02%; +0.02%)</title><rect x="873.3" y="437" width="0.3" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="876.35" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (40 samples, 0.08%; -0.02%)</title><rect x="993.2" y="277" width="1.0" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="996.24" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (41 samples, 0.08%; +0.01%)</title><rect x="478.1" y="197" width="1.0" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="481.11" y="207.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (59 samples, 0.12%; +0.03%)</title><rect x="897.9" y="245" width="1.4" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="900.90" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (13 samples, 0.03%; +0.01%)</title><rect x="740.0" y="357" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="743.01" y="367.5" ></text>
</g>
<g >
<title>__dynamic_cast (10 samples, 0.02%; -0.01%)</title><rect x="12.4" y="581" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="15.37" y="591.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (16 samples, 0.03%; +0.01%)</title><rect x="816.4" y="261" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="819.45" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (564 samples, 1.14%; +0.01%)</title><rect x="889.4" y="325" width="13.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="892.41" y="335.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (23 samples, 0.05%; +0.02%)</title><rect x="50.6" y="469" width="0.6" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="53.64" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (5 samples, 0.01%; -0.02%)</title><rect x="533.2" y="277" width="0.1" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="536.17" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (45 samples, 0.09%; +0.03%)</title><rect x="759.3" y="325" width="1.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="762.33" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (11 samples, 0.02%; +0.00%)</title><rect x="856.4" y="453" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="859.40" y="463.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (8 samples, 0.02%; 0.00%)</title><rect x="242.3" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="245.33" y="207.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (9 samples, 0.02%; -0.02%)</title><rect x="902.7" y="293" width="0.2" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="905.68" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (7 samples, 0.01%; 0.00%)</title><rect x="1048.7" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1051.73" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (10 samples, 0.02%; -0.02%)</title><rect x="562.1" y="277" width="0.2" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="565.07" y="287.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (17 samples, 0.03%; +0.00%)</title><rect x="1138.2" y="421" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1141.17" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (18 samples, 0.04%; -0.00%)</title><rect x="216.5" y="149" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="219.51" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (12 samples, 0.02%; -0.02%)</title><rect x="632.8" y="485" width="0.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="635.84" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.01%; +0.01%)</title><rect x="785.9" y="261" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="788.89" y="271.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (45 samples, 0.09%; +0.00%)</title><rect x="734.6" y="389" width="1.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="737.59" y="399.5" ></text>
</g>
<g >
<title>[[vdso]] (228 samples, 0.46%; -0.06%)</title><rect x="1180.2" y="613" width="5.5" height="15.0" fill="rgb(139,139,255)" rx="2" ry="2" />
<text  x="1183.22" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (13 samples, 0.03%; +0.01%)</title><rect x="321.6" y="197" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="324.63" y="207.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (10 samples, 0.02%; -0.00%)</title><rect x="1034.0" y="181" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1036.96" y="191.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (88 samples, 0.18%; +0.01%)</title><rect x="547.2" y="357" width="2.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="550.25" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (11 samples, 0.02%; -0.00%)</title><rect x="18.7" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="21.68" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (12 samples, 0.02%; -0.01%)</title><rect x="679.8" y="453" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="682.82" y="463.5" ></text>
</g>
<g >
<title>operator delete (31 samples, 0.06%; +0.01%)</title><rect x="808.2" y="277" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="811.20" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (5 samples, 0.01%; 0.00%)</title><rect x="230.6" y="117" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="233.62" y="127.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (18 samples, 0.04%; +0.00%)</title><rect x="62.9" y="421" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="65.86" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (7 samples, 0.01%; +0.00%)</title><rect x="655.7" y="469" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="658.67" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (134 samples, 0.27%; +0.01%)</title><rect x="249.9" y="229" width="3.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="252.94" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (25 samples, 0.05%; +0.02%)</title><rect x="539.2" y="405" width="0.6" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="542.17" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (7 samples, 0.01%; 0.00%)</title><rect x="647.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="650.13" y="415.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (25 samples, 0.05%; +0.01%)</title><rect x="482.7" y="197" width="0.6" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="485.75" y="207.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (203 samples, 0.41%; +0.01%)</title><rect x="226.7" y="197" width="4.9" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="229.72" y="207.5" ></text>
</g>
<g >
<title>reader_permit::mark_unused (23 samples, 0.05%; +0.00%)</title><rect x="64.1" y="453" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="67.10" y="463.5" ></text>
</g>
<g >
<title>operator new (43 samples, 0.09%; +0.00%)</title><rect x="905.2" y="293" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="908.17" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (60 samples, 0.12%; 0.00%)</title><rect x="561.4" y="309" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="564.45" y="319.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (5 samples, 0.01%; 0.00%)</title><rect x="684.3" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.26" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (20 samples, 0.04%; 0.00%)</title><rect x="648.8" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="651.81" y="447.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (32 samples, 0.06%; +0.01%)</title><rect x="233.2" y="229" width="0.7" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="236.15" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (5 samples, 0.01%; -0.01%)</title><rect x="625.1" y="437" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="628.09" y="447.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (28 samples, 0.06%; +0.01%)</title><rect x="746.5" y="405" width="0.7" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="749.54" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (17 samples, 0.03%; +0.02%)</title><rect x="77.2" y="453" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="80.20" y="463.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (22 samples, 0.04%; +0.00%)</title><rect x="826.9" y="293" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="829.94" y="303.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (9 samples, 0.02%; 0.00%)</title><rect x="457.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="460.57" y="335.5" ></text>
</g>
<g >
<title>mutation_querier::consume (8 samples, 0.02%; -0.00%)</title><rect x="684.4" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="687.38" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (11 samples, 0.02%; +0.00%)</title><rect x="418.5" y="373" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="421.46" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (5 samples, 0.01%; -0.01%)</title><rect x="717.6" y="469" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="720.61" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (6 samples, 0.01%; +0.01%)</title><rect x="154.1" y="213" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="157.09" y="223.5" ></text>
</g>
<g >
<title>cql3::relation::to_restriction (8 samples, 0.02%; 0.00%)</title><rect x="20.3" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.26" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (9 samples, 0.02%; +0.01%)</title><rect x="22.2" y="517" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="25.19" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (8 samples, 0.02%; -0.01%)</title><rect x="80.3" y="453" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="83.31" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (67 samples, 0.14%; -0.01%)</title><rect x="705.0" y="437" width="1.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="708.04" y="447.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (16 samples, 0.03%; +0.01%)</title><rect x="659.8" y="469" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="662.83" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (27 samples, 0.05%; -0.01%)</title><rect x="656.9" y="485" width="0.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="659.89" y="495.5" ></text>
</g>
<g >
<title>service::client_state::has_access (1,958 samples, 3.97%; -0.04%)</title><rect x="770.2" y="373" width="46.8" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="773.21" y="383.5" >serv..</text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (86 samples, 0.17%; -0.00%)</title><rect x="663.9" y="485" width="2.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="666.89" y="495.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (9 samples, 0.02%; -0.01%)</title><rect x="415.8" y="341" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="418.83" y="351.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (30 samples, 0.06%; -0.01%)</title><rect x="68.0" y="405" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="70.98" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.00%)</title><rect x="790.2" y="213" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="793.22" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (29 samples, 0.06%; +0.01%)</title><rect x="247.1" y="165" width="0.7" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="250.09" y="175.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; +0.01%)</title><rect x="942.0" y="389" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="945.03" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (68 samples, 0.14%; 0.00%)</title><rect x="15.2" y="341" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.16" y="351.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (200 samples, 0.41%; -0.00%)</title><rect x="688.2" y="469" width="4.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="691.16" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="1176.0" y="421" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1178.99" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (26 samples, 0.05%; 0.00%)</title><rect x="161.6" y="213" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="164.60" y="223.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.01%; -0.01%)</title><rect x="927.7" y="341" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="930.69" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (5 samples, 0.01%; -0.05%)</title><rect x="1120.1" y="357" width="0.1" height="15.0" fill="rgb(151,151,255)" rx="2" ry="2" />
<text  x="1123.07" y="367.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (10 samples, 0.02%; +0.01%)</title><rect x="823.8" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="826.76" y="271.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (46 samples, 0.09%; -0.05%)</title><rect x="573.5" y="373" width="1.1" height="15.0" fill="rgb(151,151,255)" rx="2" ry="2" />
<text  x="576.52" y="383.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (22 samples, 0.04%; +0.01%)</title><rect x="848.2" y="341" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="851.22" y="351.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (650 samples, 1.32%; -0.04%)</title><rect x="555.6" y="357" width="15.6" height="15.0" fill="rgb(156,156,255)" rx="2" ry="2" />
<text  x="558.64" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.01%; 0.00%)</title><rect x="17.7" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.67" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (7 samples, 0.01%; -0.01%)</title><rect x="581.9" y="373" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="584.87" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (23 samples, 0.05%; +0.02%)</title><rect x="53.0" y="469" width="0.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="55.96" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.01%; 0.00%)</title><rect x="747.3" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="750.33" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="75.3" y="405" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="78.29" y="415.5" ></text>
</g>
<g >
<title>__tls_init (7 samples, 0.01%; +0.00%)</title><rect x="529.8" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="532.77" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (20 samples, 0.04%; -0.00%)</title><rect x="39.0" y="453" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="41.98" y="463.5" ></text>
</g>
<g >
<title>sstring_hash::operator (27 samples, 0.05%; 0.00%)</title><rect x="848.2" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="851.22" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;managed_bytes&gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="913.9" y="373" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="916.94" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (69 samples, 0.14%; -0.05%)</title><rect x="677.7" y="453" width="1.7" height="15.0" fill="rgb(153,153,255)" rx="2" ry="2" />
<text  x="680.71" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (125 samples, 0.25%; +0.02%)</title><rect x="194.2" y="37" width="3.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="197.18" y="47.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (45 samples, 0.09%; +0.01%)</title><rect x="127.2" y="277" width="1.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="130.24" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (35 samples, 0.07%; +0.02%)</title><rect x="831.6" y="405" width="0.8" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="834.56" y="415.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (8 samples, 0.02%; +0.01%)</title><rect x="602.3" y="405" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="605.28" y="415.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (8 samples, 0.02%; +0.00%)</title><rect x="244.3" y="165" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="247.32" y="175.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (24 samples, 0.05%; +0.00%)</title><rect x="519.1" y="341" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="522.13" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (14 samples, 0.03%; +0.02%)</title><rect x="1034.2" y="197" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1037.22" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (31 samples, 0.06%; -0.00%)</title><rect x="640.6" y="485" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="643.61" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (46 samples, 0.09%; +0.01%)</title><rect x="724.7" y="341" width="1.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="727.74" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (23 samples, 0.05%; +0.02%)</title><rect x="511.8" y="309" width="0.5" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="514.77" y="319.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (6,318 samples, 12.80%; +0.00%)</title><rect x="118.9" y="357" width="151.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="121.85" y="367.5" >mutation_fragment_m..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (11 samples, 0.02%; 0.00%)</title><rect x="268.8" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="271.80" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.03%; -0.01%)</title><rect x="763.7" y="357" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="766.71" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (5 samples, 0.01%; +0.00%)</title><rect x="1037.0" y="229" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1040.04" y="239.5" ></text>
</g>
<g >
<title>operator delete (33 samples, 0.07%; +0.02%)</title><rect x="661.9" y="421" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="664.86" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (6 samples, 0.01%; -0.00%)</title><rect x="856.8" y="469" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="859.83" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (21 samples, 0.04%; +0.01%)</title><rect x="911.3" y="309" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="914.31" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (18 samples, 0.04%; +0.01%)</title><rect x="1155.6" y="485" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1158.60" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (9 samples, 0.02%; -0.00%)</title><rect x="227.9" y="181" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="230.87" y="191.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (182 samples, 0.37%; -0.01%)</title><rect x="700.1" y="453" width="4.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="703.09" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (10 samples, 0.02%; +0.01%)</title><rect x="412.4" y="277" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="415.39" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (5 samples, 0.01%; 0.00%)</title><rect x="826.8" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="829.75" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (6 samples, 0.01%; +0.01%)</title><rect x="904.2" y="293" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="907.23" y="303.5" ></text>
</g>
<g >
<title>operator new (133 samples, 0.27%; 0.00%)</title><rect x="1011.6" y="277" width="3.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1014.55" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (33 samples, 0.07%; +0.02%)</title><rect x="1047.9" y="245" width="0.8" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1050.94" y="255.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (41 samples, 0.08%; +0.00%)</title><rect x="738.6" y="373" width="1.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="741.63" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (83 samples, 0.17%; +0.04%)</title><rect x="585.1" y="421" width="2.0" height="15.0" fill="rgb(255,158,158)" rx="2" ry="2" />
<text  x="588.14" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (10 samples, 0.02%; +0.01%)</title><rect x="510.1" y="277" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="513.10" y="287.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (129 samples, 0.26%; +0.01%)</title><rect x="530.2" y="293" width="3.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="533.20" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (103 samples, 0.21%; +0.01%)</title><rect x="726.3" y="309" width="2.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="729.34" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (13 samples, 0.03%; +0.00%)</title><rect x="277.5" y="293" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="280.52" y="303.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::done (7 samples, 0.01%; +0.01%)</title><rect x="593.8" y="421" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="596.80" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5,148 samples, 10.43%; -0.00%)</title><rect x="291.0" y="325" width="123.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="293.96" y="335.5" >seastar::intern..</text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (5 samples, 0.01%; 0.00%)</title><rect x="1102.2" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1105.24" y="303.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (14 samples, 0.03%; +0.01%)</title><rect x="980.4" y="341" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="983.36" y="351.5" ></text>
</g>
<g >
<title>compound_type&lt; (7 samples, 0.01%; -0.00%)</title><rect x="916.1" y="389" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="919.14" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (13 samples, 0.03%; +0.00%)</title><rect x="22.5" y="517" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="25.50" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (7 samples, 0.01%; -0.00%)</title><rect x="1033.2" y="165" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1036.21" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; 0.00%)</title><rect x="401.6" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="404.60" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::stats (6 samples, 0.01%; +0.00%)</title><rect x="518.5" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="521.54" y="335.5" ></text>
</g>
<g >
<title>operator new (91 samples, 0.18%; +0.01%)</title><rect x="1073.5" y="325" width="2.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1076.45" y="335.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (23 samples, 0.05%; +0.04%)</title><rect x="426.3" y="357" width="0.6" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="429.30" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (28 samples, 0.06%; +0.01%)</title><rect x="629.1" y="469" width="0.7" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="632.08" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (9 samples, 0.02%; 0.00%)</title><rect x="863.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.69" y="415.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::raw_value_view::validate (11 samples, 0.02%; +0.02%)</title><rect x="899.5" y="277" width="0.2" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="902.48" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.01%; -0.00%)</title><rect x="293.7" y="293" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="296.71" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (400 samples, 0.81%; +0.01%)</title><rect x="1025.8" y="213" width="9.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1028.80" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (13 samples, 0.03%; -0.01%)</title><rect x="641.6" y="485" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="644.63" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (21 samples, 0.04%; +0.02%)</title><rect x="80.5" y="453" width="0.5" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="83.50" y="463.5" ></text>
</g>
<g >
<title>database::do_apply (33 samples, 0.07%; 0.00%)</title><rect x="1144.9" y="341" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.93" y="351.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (12 samples, 0.02%; +0.00%)</title><rect x="211.7" y="117" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="214.66" y="127.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (26 samples, 0.05%; 0.00%)</title><rect x="684.2" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.24" y="399.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_ba202cd8bdcfd8c6f1dbb280f642f5ad31cbca7c] (12 samples, 0.02%; +0.02%)</title><rect x="97.8" y="421" width="0.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="100.84" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (196 samples, 0.40%; -0.00%)</title><rect x="756.0" y="373" width="4.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="759.03" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (5 samples, 0.01%; +0.01%)</title><rect x="640.2" y="485" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="643.15" y="495.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (7,121 samples, 14.43%; 0.00%)</title><rect x="114.9" y="389" width="170.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="117.88" y="399.5" >merging_reader&lt;mutatio..</text>
</g>
<g >
<title>bytes_view_hasher::update (13 samples, 0.03%; -0.01%)</title><rect x="728.5" y="293" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="731.49" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (10 samples, 0.02%; 0.00%)</title><rect x="82.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.99" y="463.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (48 samples, 0.10%; -0.01%)</title><rect x="330.1" y="181" width="1.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="333.12" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (40 samples, 0.08%; 0.00%)</title><rect x="661.7" y="437" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="664.72" y="447.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (5 samples, 0.01%; -0.01%)</title><rect x="1071.5" y="341" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1074.47" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (21 samples, 0.04%; -0.01%)</title><rect x="264.5" y="325" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="267.47" y="335.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (10 samples, 0.02%; +0.01%)</title><rect x="558.7" y="309" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="561.72" y="319.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (5 samples, 0.01%; +0.01%)</title><rect x="742.2" y="277" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="745.19" y="287.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (21 samples, 0.04%; -0.03%)</title><rect x="390.9" y="229" width="0.5" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="393.94" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (551 samples, 1.12%; +0.01%)</title><rect x="889.7" y="309" width="13.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="892.72" y="319.5" ></text>
</g>
<g >
<title>executor&lt;test_read (6,172 samples, 12.50%; +0.05%)</title><rect x="713.2" y="485" width="147.5" height="15.0" fill="rgb(255,151,151)" rx="2" ry="2" />
<text  x="716.17" y="495.5" >executor&lt;test_read</text>
</g>
<g >
<title>__tls_init (6 samples, 0.01%; -0.00%)</title><rect x="498.4" y="229" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="501.36" y="239.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (9 samples, 0.02%; +0.01%)</title><rect x="395.1" y="197" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="398.05" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (18 samples, 0.04%; +0.01%)</title><rect x="716.5" y="389" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="719.54" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (10 samples, 0.02%; -0.01%)</title><rect x="395.3" y="213" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="398.27" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (51 samples, 0.10%; +0.00%)</title><rect x="820.6" y="309" width="1.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="823.56" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (7 samples, 0.01%; -0.01%)</title><rect x="496.4" y="261" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="499.40" y="271.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (45 samples, 0.09%; -0.01%)</title><rect x="917.0" y="357" width="1.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="920.05" y="367.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (7 samples, 0.01%; -0.00%)</title><rect x="745.9" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="748.90" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (40 samples, 0.08%; -0.01%)</title><rect x="1147.6" y="501" width="0.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1150.56" y="511.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (106 samples, 0.21%; +0.00%)</title><rect x="542.1" y="389" width="2.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="545.06" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (51 samples, 0.10%; +0.01%)</title><rect x="440.8" y="229" width="1.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="443.79" y="239.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (176 samples, 0.36%; -0.03%)</title><rect x="447.5" y="293" width="4.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="450.53" y="303.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (5,508 samples, 11.16%; -0.02%)</title><rect x="287.5" y="389" width="131.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="290.49" y="399.5" >query::consume_p..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (11 samples, 0.02%; +0.00%)</title><rect x="983.0" y="357" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="985.96" y="367.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (31 samples, 0.06%; +0.02%)</title><rect x="240.1" y="197" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="243.06" y="207.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (17 samples, 0.03%; +0.00%)</title><rect x="593.3" y="405" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="596.34" y="415.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (14 samples, 0.03%; -0.00%)</title><rect x="675.2" y="469" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="678.25" y="479.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (94 samples, 0.19%; 0.00%)</title><rect x="393.3" y="229" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="396.26" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (489 samples, 0.99%; -0.01%)</title><rect x="237.5" y="245" width="11.7" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="240.50" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (15 samples, 0.03%; +0.02%)</title><rect x="79.3" y="453" width="0.3" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="82.26" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (7 samples, 0.01%; +0.01%)</title><rect x="484.3" y="325" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="487.30" y="335.5" ></text>
</g>
<g >
<title>operator new (36 samples, 0.07%; +0.00%)</title><rect x="516.4" y="325" width="0.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="519.41" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type&gt; (27 samples, 0.05%; +0.03%)</title><rect x="969.1" y="373" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="972.12" y="383.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (105 samples, 0.21%; +0.00%)</title><rect x="886.9" y="325" width="2.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="889.90" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (7 samples, 0.01%; +0.00%)</title><rect x="1124.6" y="389" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1127.57" y="399.5" ></text>
</g>
<g >
<title>compound_type&lt; (91 samples, 0.18%; -0.01%)</title><rect x="931.8" y="357" width="2.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="934.80" y="367.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (24 samples, 0.05%; +0.05%)</title><rect x="410.0" y="309" width="0.6" height="15.0" fill="rgb(255,153,153)" rx="2" ry="2" />
<text  x="413.04" y="319.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (29 samples, 0.06%; +0.05%)</title><rect x="316.9" y="181" width="0.7" height="15.0" fill="rgb(255,146,146)" rx="2" ry="2" />
<text  x="319.90" y="191.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1,238 samples, 2.51%; +0.00%)</title><rect x="554.1" y="421" width="29.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="557.09" y="431.5" >st..</text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (25 samples, 0.05%; 0.00%)</title><rect x="1145.9" y="325" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.87" y="335.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (53 samples, 0.11%; -0.00%)</title><rect x="241.1" y="181" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="244.07" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.01%; +0.01%)</title><rect x="1021.8" y="229" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1024.81" y="239.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (58 samples, 0.12%; -0.00%)</title><rect x="737.1" y="341" width="1.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="740.07" y="351.5" ></text>
</g>
<g >
<title>database::find_schema (67 samples, 0.14%; -0.00%)</title><rect x="820.2" y="357" width="1.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="823.18" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (53 samples, 0.11%; -0.00%)</title><rect x="820.5" y="325" width="1.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="823.51" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (23 samples, 0.05%; +0.01%)</title><rect x="665.3" y="469" width="0.6" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="668.30" y="479.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (337 samples, 0.68%; -0.01%)</title><rect x="721.9" y="437" width="8.0" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="724.87" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (12 samples, 0.02%; +0.01%)</title><rect x="621.5" y="437" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="624.50" y="447.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (8 samples, 0.02%; -0.01%)</title><rect x="827.9" y="277" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="830.90" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (13 samples, 0.03%; +0.01%)</title><rect x="1036.4" y="213" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1039.37" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (7 samples, 0.01%; -0.02%)</title><rect x="671.6" y="437" width="0.2" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="674.61" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (27 samples, 0.05%; -0.01%)</title><rect x="1062.3" y="309" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1065.29" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (17 samples, 0.03%; -0.00%)</title><rect x="998.0" y="293" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1000.98" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (18 samples, 0.04%; +0.01%)</title><rect x="624.7" y="437" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="627.66" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (36 samples, 0.07%; 0.00%)</title><rect x="826.6" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="829.61" y="319.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (6 samples, 0.01%; +0.01%)</title><rect x="980.9" y="357" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="983.86" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (8 samples, 0.02%; +0.01%)</title><rect x="830.3" y="389" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="833.31" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (39 samples, 0.08%; 0.00%)</title><rect x="864.1" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.09" y="447.5" ></text>
</g>
<g >
<title>query_result_builder::consume (1,820 samples, 3.69%; -0.00%)</title><rect x="321.5" y="213" width="43.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="324.54" y="223.5" >quer..</text>
</g>
<g >
<title>service::client_state::ensure_has_permission (1,691 samples, 3.43%; +0.01%)</title><rect x="772.0" y="357" width="40.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="774.98" y="367.5" >ser..</text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (8 samples, 0.02%; -0.00%)</title><rect x="453.3" y="325" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="456.34" y="335.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (60 samples, 0.12%; -0.00%)</title><rect x="929.0" y="373" width="1.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="932.00" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (7 samples, 0.01%; -0.01%)</title><rect x="77.6" y="453" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="80.61" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (15 samples, 0.03%; -0.02%)</title><rect x="1152.1" y="485" width="0.4" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="1155.11" y="495.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (92 samples, 0.19%; +0.01%)</title><rect x="138.8" y="245" width="2.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="141.81" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; -0.00%)</title><rect x="426.9" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="429.87" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (5 samples, 0.01%; +0.00%)</title><rect x="215.0" y="133" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="217.96" y="143.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.06%; 0.00%)</title><rect x="1145.8" y="421" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.80" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (7 samples, 0.01%; +0.00%)</title><rect x="1149.8" y="501" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1152.76" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (29 samples, 0.06%; 0.00%)</title><rect x="684.2" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.19" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.00%)</title><rect x="805.5" y="229" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="808.50" y="239.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (166 samples, 0.34%; -0.02%)</title><rect x="923.9" y="357" width="3.9" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="926.86" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (14 samples, 0.03%; +0.01%)</title><rect x="664.1" y="469" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="667.11" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (9 samples, 0.02%; -0.00%)</title><rect x="1110.2" y="389" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1113.24" y="399.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (135 samples, 0.27%; +0.00%)</title><rect x="850.8" y="405" width="3.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="853.83" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (23 samples, 0.05%; 0.00%)</title><rect x="1154.9" y="469" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1157.93" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (780 samples, 1.58%; -0.04%)</title><rect x="1083.1" y="325" width="18.6" height="15.0" fill="rgb(158,158,255)" rx="2" ry="2" />
<text  x="1086.09" y="335.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (15 samples, 0.03%; +0.01%)</title><rect x="618.7" y="421" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="621.66" y="431.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (31 samples, 0.06%; -0.00%)</title><rect x="737.6" y="309" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="740.55" y="319.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (104 samples, 0.21%; +0.00%)</title><rect x="1174.0" y="453" width="2.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1177.03" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (18 samples, 0.04%; -0.01%)</title><rect x="751.7" y="373" width="0.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="754.73" y="383.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (5 samples, 0.01%; +0.00%)</title><rect x="431.9" y="341" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="434.94" y="351.5" ></text>
</g>
<g >
<title>query::result::result (6 samples, 0.01%; 0.00%)</title><rect x="594.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="597.04" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (800 samples, 1.62%; -0.08%)</title><rect x="369.3" y="197" width="19.1" height="15.0" fill="rgb(109,109,255)" rx="2" ry="2" />
<text  x="372.28" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (11 samples, 0.02%; +0.02%)</title><rect x="144.5" y="277" width="0.2" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="147.48" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.01%; +0.01%)</title><rect x="683.9" y="485" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="686.88" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (6 samples, 0.01%; -0.00%)</title><rect x="549.1" y="277" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="552.14" y="287.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (6 samples, 0.01%; -0.00%)</title><rect x="588.4" y="405" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="591.37" y="415.5" ></text>
</g>
<g >
<title>query::result::result (41 samples, 0.08%; +0.01%)</title><rect x="592.8" y="421" width="1.0" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="595.82" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (13 samples, 0.03%; +0.00%)</title><rect x="260.6" y="277" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="263.55" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (66 samples, 0.13%; 0.00%)</title><rect x="910.2" y="341" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="913.24" y="351.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (125 samples, 0.25%; -0.02%)</title><rect x="312.9" y="181" width="3.0" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="315.93" y="191.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (14 samples, 0.03%; -0.00%)</title><rect x="723.2" y="405" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="726.23" y="415.5" ></text>
</g>
<g >
<title>cql3::to_managed_bytes_opt (21 samples, 0.04%; +0.00%)</title><rect x="907.8" y="357" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="910.82" y="367.5" ></text>
</g>
<g >
<title>database::apply_in_memory (24 samples, 0.05%; 0.00%)</title><rect x="1145.0" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.96" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (5 samples, 0.01%; -0.00%)</title><rect x="1113.5" y="373" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1116.54" y="383.5" ></text>
</g>
<g >
<title>database::query (133 samples, 0.27%; -0.01%)</title><rect x="40.7" y="501" width="3.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="43.70" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (23 samples, 0.05%; -0.02%)</title><rect x="452.7" y="309" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="455.69" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (5 samples, 0.01%; 0.00%)</title><rect x="1070.7" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1073.75" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (6 samples, 0.01%; 0.00%)</title><rect x="1145.9" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.91" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (6 samples, 0.01%; -0.01%)</title><rect x="1130.9" y="421" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1133.85" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (6,855 samples, 13.89%; +0.11%)</title><rect x="949.9" y="421" width="163.9" height="15.0" fill="rgb(255,75,75)" rx="2" ry="2" />
<text  x="952.87" y="431.5" >cql3::statements::sel..</text>
</g>
<g >
<title>reader_permit::impl::signal (19 samples, 0.04%; 0.00%)</title><rect x="572.1" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="575.11" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; +0.00%)</title><rect x="560.5" y="309" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="563.54" y="319.5" ></text>
</g>
<g >
<title>operator delete (18 samples, 0.04%; -0.02%)</title><rect x="810.3" y="309" width="0.4" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="813.25" y="319.5" ></text>
</g>
<g >
<title>dht::minimum_token (5 samples, 0.01%; -0.01%)</title><rect x="435.2" y="325" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="438.22" y="335.5" ></text>
</g>
<g >
<title>auth::resource::resource (72 samples, 0.15%; +0.01%)</title><rect x="766.2" y="373" width="1.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="769.19" y="383.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (10 samples, 0.02%; +0.00%)</title><rect x="353.5" y="165" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="356.48" y="175.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (38 samples, 0.08%; -0.00%)</title><rect x="793.9" y="149" width="1.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="796.95" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (5 samples, 0.01%; +0.01%)</title><rect x="79.6" y="453" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="82.62" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (903 samples, 1.83%; +0.00%)</title><rect x="886.2" y="357" width="21.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="889.21" y="367.5" >c..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (16 samples, 0.03%; 0.00%)</title><rect x="674.4" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="677.44" y="495.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (23 samples, 0.05%; +0.00%)</title><rect x="816.3" y="277" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="819.30" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (5 samples, 0.01%; 0.00%)</title><rect x="17.7" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.67" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; +0.01%)</title><rect x="928.1" y="373" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="931.09" y="383.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (85 samples, 0.17%; -0.00%)</title><rect x="897.4" y="261" width="2.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="900.44" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (128 samples, 0.26%; -0.00%)</title><rect x="502.9" y="213" width="3.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="505.92" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (7 samples, 0.01%; -0.01%)</title><rect x="271.6" y="341" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="274.57" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (7 samples, 0.01%; -0.01%)</title><rect x="1156.0" y="485" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1159.03" y="495.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (206 samples, 0.42%; 0.00%)</title><rect x="14.9" y="437" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.95" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="1120.0" y="357" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1122.95" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (13 samples, 0.03%; +0.01%)</title><rect x="988.4" y="341" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="991.44" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (11 samples, 0.02%; +0.01%)</title><rect x="35.2" y="421" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="38.22" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; +0.00%)</title><rect x="451.1" y="277" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="454.09" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (19 samples, 0.04%; -0.01%)</title><rect x="775.9" y="277" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="778.95" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (6 samples, 0.01%; +0.00%)</title><rect x="993.7" y="261" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="996.67" y="271.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (148 samples, 0.30%; -0.03%)</title><rect x="345.3" y="165" width="3.6" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="348.35" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (183 samples, 0.37%; -0.00%)</title><rect x="219.5" y="165" width="4.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="222.50" y="175.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (75 samples, 0.15%; 0.00%)</title><rect x="294.4" y="277" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="297.38" y="287.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (41 samples, 0.08%; -0.00%)</title><rect x="1167.6" y="453" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1170.62" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (9 samples, 0.02%; -0.01%)</title><rect x="791.1" y="197" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="794.06" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (5 samples, 0.01%; +0.00%)</title><rect x="249.1" y="229" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="252.07" y="239.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (99 samples, 0.20%; +0.00%)</title><rect x="524.9" y="309" width="2.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="527.94" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (23 samples, 0.05%; +0.00%)</title><rect x="1028.2" y="165" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1031.22" y="175.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (21 samples, 0.04%; -0.01%)</title><rect x="217.0" y="165" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="219.99" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (16 samples, 0.03%; +0.01%)</title><rect x="1126.0" y="373" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1129.05" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (16 samples, 0.03%; 0.00%)</title><rect x="1127.2" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.22" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (52 samples, 0.11%; +0.01%)</title><rect x="294.9" y="261" width="1.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="297.88" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (12 samples, 0.02%; +0.01%)</title><rect x="496.6" y="261" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="499.56" y="271.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; +0.00%)</title><rect x="794.4" y="117" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="797.36" y="127.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="81.3" y="453" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="84.27" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (38 samples, 0.08%; +0.00%)</title><rect x="285.1" y="389" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="288.13" y="399.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (88 samples, 0.18%; -0.02%)</title><rect x="1119.3" y="389" width="2.1" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="1122.31" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (11 samples, 0.02%; -0.01%)</title><rect x="496.1" y="261" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="499.13" y="271.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (10 samples, 0.02%; 0.00%)</title><rect x="17.6" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.55" y="319.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (6 samples, 0.01%; 0.00%)</title><rect x="1145.9" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.91" y="239.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (35 samples, 0.07%; 0.00%)</title><rect x="19.9" y="437" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.90" y="447.5" ></text>
</g>
<g >
<title>cql3::selection::simple_selection::is_aggregate (13 samples, 0.03%; -0.02%)</title><rect x="873.6" y="437" width="0.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="876.58" y="447.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (220 samples, 0.45%; +0.04%)</title><rect x="1075.8" y="325" width="5.3" height="15.0" fill="rgb(255,158,158)" rx="2" ry="2" />
<text  x="1078.82" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (29 samples, 0.06%; +0.02%)</title><rect x="494.9" y="277" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="497.87" y="287.5" ></text>
</g>
<g >
<title>main (48,413 samples, 98.09%; 0.00%)</title><rect x="21.7" y="613" width="1157.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.71" y="623.5" >main</text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (8 samples, 0.02%; +0.00%)</title><rect x="1034.0" y="165" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1036.96" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (9 samples, 0.02%; +0.01%)</title><rect x="38.5" y="437" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="41.47" y="447.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (74 samples, 0.15%; -0.03%)</title><rect x="351.7" y="165" width="1.8" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="354.71" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (143 samples, 0.29%; +0.05%)</title><rect x="98.9" y="421" width="3.4" height="15.0" fill="rgb(255,153,153)" rx="2" ry="2" />
<text  x="101.89" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (7 samples, 0.01%; +0.00%)</title><rect x="451.6" y="277" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="454.57" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (54 samples, 0.11%; +0.00%)</title><rect x="619.8" y="421" width="1.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="622.81" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::empty (7 samples, 0.01%; +0.01%)</title><rect x="948.6" y="389" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="951.58" y="399.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (61 samples, 0.12%; -0.01%)</title><rect x="791.0" y="213" width="1.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="793.96" y="223.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (239 samples, 0.48%; +0.02%)</title><rect x="922.1" y="373" width="5.7" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="925.12" y="383.5" ></text>
</g>
<g >
<title>__tls_init (8 samples, 0.02%; +0.01%)</title><rect x="457.0" y="325" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="460.02" y="335.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (14 samples, 0.03%; +0.00%)</title><rect x="1083.7" y="309" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1086.73" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (29 samples, 0.06%; +0.05%)</title><rect x="855.6" y="405" width="0.7" height="15.0" fill="rgb(255,151,151)" rx="2" ry="2" />
<text  x="858.61" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; +0.01%)</title><rect x="806.0" y="229" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="808.97" y="239.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (9 samples, 0.02%; 0.00%)</title><rect x="864.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.28" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (16 samples, 0.03%; -0.00%)</title><rect x="993.8" y="261" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="996.82" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (48 samples, 0.10%; -0.02%)</title><rect x="1013.6" y="245" width="1.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1016.56" y="255.5" ></text>
</g>
<g >
<title>sstring_hash::operator (22 samples, 0.04%; +0.01%)</title><rect x="1068.7" y="309" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1071.67" y="319.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (6 samples, 0.01%; +0.01%)</title><rect x="982.7" y="357" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="985.75" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.01%; 0.00%)</title><rect x="17.7" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.67" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (191 samples, 0.39%; -0.00%)</title><rect x="1171.9" y="485" width="4.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1174.95" y="495.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (5 samples, 0.01%; +0.01%)</title><rect x="222.7" y="101" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="225.68" y="111.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (437 samples, 0.89%; 0.00%)</title><rect x="186.8" y="101" width="10.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="189.80" y="111.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (12 samples, 0.02%; -0.02%)</title><rect x="626.2" y="469" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="629.17" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (12 samples, 0.02%; +0.01%)</title><rect x="591.1" y="373" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="594.12" y="383.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (16 samples, 0.03%; +0.02%)</title><rect x="286.1" y="405" width="0.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="289.13" y="415.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (68 samples, 0.14%; -0.00%)</title><rect x="736.8" y="357" width="1.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="739.83" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (7 samples, 0.01%; -0.01%)</title><rect x="900.4" y="277" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="903.43" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (21 samples, 0.04%; -0.01%)</title><rect x="504.0" y="181" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="507.02" y="191.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (5 samples, 0.01%; +0.00%)</title><rect x="1146.3" y="213" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1149.32" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (8 samples, 0.02%; +0.00%)</title><rect x="1034.7" y="197" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1037.72" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (13 samples, 0.03%; +0.00%)</title><rect x="650.3" y="469" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="653.29" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (12 samples, 0.02%; +0.01%)</title><rect x="1081.1" y="325" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1084.13" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (35 samples, 0.07%; +0.01%)</title><rect x="836.6" y="421" width="0.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="839.55" y="431.5" ></text>
</g>
<g >
<title>operator delete (48 samples, 0.10%; +0.00%)</title><rect x="936.9" y="405" width="1.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="939.92" y="415.5" ></text>
</g>
<g >
<title>schema::column_at (68 samples, 0.14%; -0.01%)</title><rect x="212.9" y="101" width="1.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="215.85" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (9 samples, 0.02%; +0.01%)</title><rect x="544.4" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="547.38" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (5 samples, 0.01%; -0.00%)</title><rect x="599.6" y="373" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="602.61" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (81 samples, 0.16%; +0.00%)</title><rect x="833.3" y="405" width="1.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="836.25" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (15 samples, 0.03%; +0.02%)</title><rect x="559.3" y="325" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="562.27" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="630.8" y="469" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="633.83" y="479.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (521 samples, 1.06%; -0.01%)</title><rect x="733.6" y="405" width="12.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="736.61" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (55 samples, 0.11%; +0.00%)</title><rect x="412.6" y="277" width="1.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="415.63" y="287.5" ></text>
</g>
<g >
<title>std::variant&lt;fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (21 samples, 0.04%; -0.01%)</title><rect x="906.4" y="309" width="0.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="909.36" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (129 samples, 0.26%; -0.02%)</title><rect x="439.5" y="277" width="3.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="442.52" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (10 samples, 0.02%; 0.00%)</title><rect x="15.2" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.24" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (13 samples, 0.03%; 0.00%)</title><rect x="443.8" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="446.80" y="287.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (183 samples, 0.37%; -0.00%)</title><rect x="466.2" y="277" width="4.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="469.18" y="287.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (26 samples, 0.05%; +0.02%)</title><rect x="127.7" y="261" width="0.6" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="130.70" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (20 samples, 0.04%; +0.01%)</title><rect x="318.1" y="181" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="321.12" y="191.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (5 samples, 0.01%; 0.00%)</title><rect x="21.0" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.00" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (6 samples, 0.01%; +0.01%)</title><rect x="125.4" y="309" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="128.40" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (60 samples, 0.12%; -0.02%)</title><rect x="781.0" y="261" width="1.4" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="784.02" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (8 samples, 0.02%; +0.01%)</title><rect x="414.7" y="357" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="417.68" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (13 samples, 0.03%; -0.01%)</title><rect x="620.5" y="389" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="623.55" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (9 samples, 0.02%; +0.01%)</title><rect x="503.8" y="197" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="506.81" y="207.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous, auth::get_permissions (5 samples, 0.01%; +0.01%)</title><rect x="807.8" y="293" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="810.79" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::io_queue_submission_pollfn::poll (6 samples, 0.01%; +0.00%)</title><rect x="1178.2" y="501" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1181.21" y="511.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (168 samples, 0.34%; -0.01%)</title><rect x="193.2" y="69" width="4.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="196.23" y="79.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (13 samples, 0.03%; +0.02%)</title><rect x="433.9" y="341" width="0.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="436.88" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (238 samples, 0.48%; -0.01%)</title><rect x="1062.9" y="309" width="5.7" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1065.93" y="319.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (9 samples, 0.02%; +0.01%)</title><rect x="388.9" y="181" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="391.91" y="191.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (43 samples, 0.09%; -0.03%)</title><rect x="319.2" y="181" width="1.0" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="322.22" y="191.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (91 samples, 0.18%; -0.01%)</title><rect x="1124.9" y="405" width="2.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1127.85" y="415.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1,050 samples, 2.13%; +0.00%)</title><rect x="459.2" y="325" width="25.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="462.20" y="335.5" >d..</text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (124 samples, 0.25%; +0.03%)</title><rect x="918.6" y="373" width="2.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="921.58" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (8 samples, 0.02%; -0.05%)</title><rect x="312.7" y="165" width="0.2" height="15.0" fill="rgb(153,153,255)" rx="2" ry="2" />
<text  x="315.69" y="175.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (34 samples, 0.07%; +0.00%)</title><rect x="1145.7" y="485" width="0.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1148.75" y="495.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (8 samples, 0.02%; -0.01%)</title><rect x="744.0" y="277" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="747.03" y="287.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (5 samples, 0.01%; +0.01%)</title><rect x="848.1" y="357" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="851.10" y="367.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (37 samples, 0.07%; -0.05%)</title><rect x="420.0" y="421" width="0.9" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="422.99" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (23 samples, 0.05%; +0.03%)</title><rect x="151.3" y="245" width="0.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="154.32" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (79 samples, 0.16%; +0.01%)</title><rect x="547.4" y="325" width="1.9" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="550.42" y="335.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (5 samples, 0.01%; +0.01%)</title><rect x="1077.0" y="309" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1079.97" y="319.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (7 samples, 0.01%; +0.00%)</title><rect x="1031.6" y="149" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1034.61" y="159.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (78 samples, 0.16%; -0.04%)</title><rect x="343.5" y="165" width="1.8" height="15.0" fill="rgb(156,156,255)" rx="2" ry="2" />
<text  x="346.49" y="175.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (23 samples, 0.05%; -0.00%)</title><rect x="1130.2" y="421" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1133.23" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (43 samples, 0.09%; -0.03%)</title><rect x="102.8" y="421" width="1.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="105.83" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (545 samples, 1.10%; -0.01%)</title><rect x="1156.5" y="485" width="13.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1159.51" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (7 samples, 0.01%; +0.01%)</title><rect x="251.7" y="197" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="254.73" y="207.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (6 samples, 0.01%; -0.00%)</title><rect x="509.2" y="245" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="512.24" y="255.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (368 samples, 0.75%; -0.06%)</title><rect x="462.6" y="293" width="8.8" height="15.0" fill="rgb(141,141,255)" rx="2" ry="2" />
<text  x="465.57" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (44 samples, 0.09%; +0.03%)</title><rect x="957.6" y="373" width="1.1" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="960.64" y="383.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (12 samples, 0.02%; +0.00%)</title><rect x="293.4" y="293" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="296.42" y="303.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (19 samples, 0.04%; +0.00%)</title><rect x="568.8" y="293" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="571.76" y="303.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (34 samples, 0.07%; 0.00%)</title><rect x="1144.9" y="405" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.93" y="415.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (46 samples, 0.09%; -0.01%)</title><rect x="415.4" y="357" width="1.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="418.35" y="367.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (85 samples, 0.17%; -0.04%)</title><rect x="1174.3" y="437" width="2.0" height="15.0" fill="rgb(156,156,255)" rx="2" ry="2" />
<text  x="1177.29" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (6 samples, 0.01%; -0.00%)</title><rect x="1143.5" y="421" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1146.52" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (33 samples, 0.07%; +0.02%)</title><rect x="1142.3" y="421" width="0.8" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1145.30" y="431.5" ></text>
</g>
<g >
<title>operator delete (18 samples, 0.04%; -0.01%)</title><rect x="41.9" y="485" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="44.87" y="495.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (1,616 samples, 3.27%; -0.01%)</title><rect x="773.3" y="341" width="38.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="776.29" y="351.5" >ser..</text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.04%; +0.00%)</title><rect x="551.0" y="389" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="553.98" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.28" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (9 samples, 0.02%; -0.00%)</title><rect x="42.8" y="485" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="45.75" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.01%; -0.01%)</title><rect x="1108.5" y="373" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1111.48" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (42 samples, 0.09%; +0.04%)</title><rect x="905.2" y="277" width="1.0" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="908.19" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (47 samples, 0.10%; +0.00%)</title><rect x="803.3" y="245" width="1.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="806.34" y="255.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (9 samples, 0.02%; -0.01%)</title><rect x="1034.9" y="197" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1037.91" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.05%; +0.01%)</title><rect x="492.9" y="277" width="0.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="495.88" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.01%; +0.01%)</title><rect x="101.3" y="389" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="104.28" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (36 samples, 0.07%; 0.00%)</title><rect x="1162.4" y="405" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.39" y="415.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (24 samples, 0.05%; -0.03%)</title><rect x="98.1" y="421" width="0.6" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="101.12" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (23 samples, 0.05%; -0.00%)</title><rect x="948.0" y="357" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="950.96" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.01%; -0.01%)</title><rect x="638.3" y="469" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="641.31" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (28 samples, 0.06%; +0.01%)</title><rect x="1079.3" y="293" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1082.26" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (437 samples, 0.89%; -0.01%)</title><rect x="685.3" y="501" width="10.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="688.27" y="511.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (113 samples, 0.23%; -0.01%)</title><rect x="349.0" y="165" width="2.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="352.01" y="175.5" ></text>
</g>
<g >
<title>seastar::gate::leave (6 samples, 0.01%; +0.01%)</title><rect x="43.7" y="469" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="46.73" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (17 samples, 0.03%; +0.00%)</title><rect x="694.9" y="469" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="697.85" y="479.5" ></text>
</g>
<g >
<title>reader_permit::consume (16 samples, 0.03%; -0.01%)</title><rect x="280.2" y="277" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="283.15" y="287.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (17 samples, 0.03%; 0.00%)</title><rect x="864.6" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.57" y="335.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (9 samples, 0.02%; +0.00%)</title><rect x="839.7" y="341" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="842.66" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (5 samples, 0.01%; +0.00%)</title><rect x="217.7" y="181" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="220.71" y="191.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (77 samples, 0.16%; +0.01%)</title><rect x="528.1" y="309" width="1.8" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="531.10" y="319.5" ></text>
</g>
<g >
<title>operator delete (28 samples, 0.06%; -0.02%)</title><rect x="158.4" y="197" width="0.7" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="161.39" y="207.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (13 samples, 0.03%; +0.02%)</title><rect x="686.4" y="485" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="689.41" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (25 samples, 0.05%; -0.01%)</title><rect x="1024.1" y="213" width="0.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1027.13" y="223.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (7 samples, 0.01%; 0.00%)</title><rect x="648.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="651.59" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (20 samples, 0.04%; +0.01%)</title><rect x="221.3" y="149" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="224.29" y="159.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (14 samples, 0.03%; +0.01%)</title><rect x="43.1" y="485" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="46.14" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (12 samples, 0.02%; -0.02%)</title><rect x="1108.8" y="357" width="0.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="1111.79" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (98 samples, 0.20%; -0.00%)</title><rect x="660.3" y="453" width="2.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="663.33" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (22 samples, 0.04%; -0.01%)</title><rect x="318.7" y="181" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="321.69" y="191.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (33 samples, 0.07%; +0.00%)</title><rect x="584.4" y="421" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="587.35" y="431.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (480 samples, 0.97%; -0.00%)</title><rect x="271.7" y="341" width="11.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="274.74" y="351.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (6 samples, 0.01%; +0.01%)</title><rect x="708.2" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="711.22" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (15 samples, 0.03%; 0.00%)</title><rect x="1146.1" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.08" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; +0.00%)</title><rect x="71.7" y="389" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="74.73" y="399.5" ></text>
</g>
<g >
<title>compound_type&lt; (85 samples, 0.17%; -0.02%)</title><rect x="916.5" y="373" width="2.1" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="919.55" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (5 samples, 0.01%; +0.01%)</title><rect x="820.1" y="357" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="823.06" y="367.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (11 samples, 0.02%; -0.01%)</title><rect x="758.6" y="309" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="761.57" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (38 samples, 0.08%; +0.00%)</title><rect x="1108.6" y="373" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1111.62" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (21 samples, 0.04%; -0.01%)</title><rect x="224.3" y="165" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="227.31" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (15 samples, 0.03%; +0.00%)</title><rect x="135.0" y="245" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="137.99" y="255.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (113 samples, 0.23%; -0.01%)</title><rect x="512.9" y="325" width="2.7" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="515.92" y="335.5" ></text>
</g>
<g >
<title>operator delete (31 samples, 0.06%; +0.01%)</title><rect x="572.8" y="341" width="0.7" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="575.76" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (14 samples, 0.03%; -0.02%)</title><rect x="298.8" y="261" width="0.4" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="301.85" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (11 samples, 0.02%; -0.00%)</title><rect x="438.9" y="261" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="441.90" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (11 samples, 0.02%; -0.01%)</title><rect x="1126.8" y="389" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1129.76" y="399.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (105 samples, 0.21%; -0.00%)</title><rect x="365.4" y="213" width="2.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="368.43" y="223.5" ></text>
</g>
<g >
<title>row_tombstone::apply (25 samples, 0.05%; -0.00%)</title><rect x="388.6" y="213" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="391.60" y="223.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (5 samples, 0.01%; -0.04%)</title><rect x="396.5" y="229" width="0.1" height="15.0" fill="rgb(156,156,255)" rx="2" ry="2" />
<text  x="399.49" y="239.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (18 samples, 0.04%; -0.01%)</title><rect x="79.8" y="453" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="82.81" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; -0.01%)</title><rect x="417.8" y="357" width="0.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="420.81" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (11 samples, 0.02%; -0.01%)</title><rect x="230.5" y="133" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="233.52" y="143.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; 0.00%)</title><rect x="810.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="813.95" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (58 samples, 0.12%; -0.01%)</title><rect x="843.7" y="421" width="1.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="846.68" y="431.5" ></text>
</g>
<g >
<title>operator delete (48 samples, 0.10%; -0.00%)</title><rect x="576.1" y="357" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="579.10" y="367.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10 samples, 0.02%; -0.01%)</title><rect x="679.6" y="453" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="682.58" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (6 samples, 0.01%; -0.01%)</title><rect x="689.5" y="453" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="692.47" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::operator== (5 samples, 0.01%; +0.00%)</title><rect x="797.0" y="149" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="800.03" y="159.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (26 samples, 0.05%; -0.01%)</title><rect x="470.7" y="277" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="473.74" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (18 samples, 0.04%; -0.01%)</title><rect x="755.4" y="325" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="758.41" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (17 samples, 0.03%; +0.01%)</title><rect x="96.0" y="421" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="99.04" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (21 samples, 0.04%; -0.00%)</title><rect x="702.4" y="421" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="705.36" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (106 samples, 0.21%; +0.00%)</title><rect x="985.4" y="309" width="2.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="988.35" y="319.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::done (7 samples, 0.01%; -0.01%)</title><rect x="692.8" y="453" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="695.77" y="463.5" ></text>
</g>
<g >
<title>operator delete (31 samples, 0.06%; +0.01%)</title><rect x="817.8" y="373" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="820.76" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (6 samples, 0.01%; +0.01%)</title><rect x="387.7" y="165" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="390.69" y="175.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (508 samples, 1.03%; -0.01%)</title><rect x="64.9" y="453" width="12.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="67.89" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; -0.00%)</title><rect x="551.7" y="421" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="554.72" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (8 samples, 0.02%; +0.00%)</title><rect x="956.2" y="341" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="959.23" y="351.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (7 samples, 0.01%; -0.00%)</title><rect x="22.0" y="517" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="25.03" y="527.5" ></text>
</g>
<g >
<title>query::querier&lt; (18,774 samples, 38.04%; +0.02%)</title><rect x="105.0" y="437" width="448.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="108.03" y="447.5" >query::querier&lt;</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (212 samples, 0.43%; -0.01%)</title><rect x="209.9" y="133" width="5.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="212.89" y="143.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="688.0" y="469" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="690.99" y="479.5" ></text>
</g>
<g >
<title>__tls_init (11 samples, 0.02%; +0.01%)</title><rect x="148.8" y="229" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="151.81" y="239.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (8 samples, 0.02%; -0.00%)</title><rect x="63.5" y="405" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="66.53" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (6 samples, 0.01%; 0.00%)</title><rect x="647.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="650.54" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (30 samples, 0.06%; 0.00%)</title><rect x="151.9" y="245" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="154.87" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.01%)</title><rect x="674.2" y="469" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="677.17" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt; (7 samples, 0.01%; +0.01%)</title><rect x="907.6" y="341" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="910.58" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (23 samples, 0.05%; -0.01%)</title><rect x="161.0" y="181" width="0.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="164.02" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (21 samples, 0.04%; -0.01%)</title><rect x="74.2" y="373" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="77.24" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (31 samples, 0.06%; 0.00%)</title><rect x="757.3" y="325" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="760.32" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.07%; 0.00%)</title><rect x="1144.9" y="453" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.93" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (5 samples, 0.01%; +0.00%)</title><rect x="619.1" y="437" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="622.11" y="447.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (197 samples, 0.40%; +0.01%)</title><rect x="544.6" y="389" width="4.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="547.64" y="399.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (16 samples, 0.03%; +0.01%)</title><rect x="365.0" y="213" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="368.05" y="223.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (216 samples, 0.44%; -0.03%)</title><rect x="447.1" y="309" width="5.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="450.12" y="319.5" ></text>
</g>
<g >
<title>operator delete (40 samples, 0.08%; +0.02%)</title><rect x="804.7" y="245" width="0.9" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="807.68" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (10 samples, 0.02%; +0.01%)</title><rect x="918.3" y="341" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="921.29" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (7 samples, 0.01%; +0.00%)</title><rect x="764.5" y="341" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="767.50" y="351.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (85 samples, 0.17%; -0.01%)</title><rect x="743.8" y="309" width="2.0" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="746.79" y="319.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (84 samples, 0.17%; +0.01%)</title><rect x="200.5" y="101" width="2.0" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="203.52" y="111.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (7 samples, 0.01%; -0.00%)</title><rect x="607.0" y="437" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="609.97" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (5 samples, 0.01%; -0.00%)</title><rect x="275.2" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="278.16" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (73 samples, 0.15%; -0.02%)</title><rect x="393.5" y="213" width="1.8" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="396.52" y="223.5" ></text>
</g>
<g >
<title>create_partitions (267 samples, 0.54%; +0.00%)</title><rect x="14.8" y="533" width="6.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="17.83" y="543.5" ></text>
</g>
<g >
<title>operator delete (15 samples, 0.03%; +0.00%)</title><rect x="661.0" y="437" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="663.95" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (128 samples, 0.26%; -0.01%)</title><rect x="985.1" y="341" width="3.0" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="988.07" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (45 samples, 0.09%; +0.01%)</title><rect x="775.3" y="309" width="1.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="778.35" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (32 samples, 0.06%; +0.01%)</title><rect x="552.3" y="421" width="0.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="555.32" y="431.5" ></text>
</g>
<g >
<title>utils::array_search_gt (8 samples, 0.02%; 0.00%)</title><rect x="470.6" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="473.55" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (59 samples, 0.12%; +0.01%)</title><rect x="754.4" y="341" width="1.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="757.43" y="351.5" ></text>
</g>
<g >
<title>make_combined_reader (809 samples, 1.64%; -0.02%)</title><rect x="434.2" y="341" width="19.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="437.19" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (55 samples, 0.11%; -0.02%)</title><rect x="263.2" y="325" width="1.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="266.16" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (12 samples, 0.02%; 0.00%)</title><rect x="863.6" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.64" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (12 samples, 0.02%; +0.02%)</title><rect x="236.9" y="261" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="239.88" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (66 samples, 0.13%; -0.02%)</title><rect x="777.3" y="309" width="1.5" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="780.26" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (8 samples, 0.02%; -0.02%)</title><rect x="98.7" y="421" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="101.70" y="431.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.06%; -0.00%)</title><rect x="1162.5" y="389" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1165.53" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (27 samples, 0.05%; +0.01%)</title><rect x="548.7" y="309" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="551.66" y="319.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (263 samples, 0.53%; +0.00%)</title><rect x="14.9" y="501" width="6.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="17.90" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (8 samples, 0.02%; +0.00%)</title><rect x="765.3" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="768.31" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (37 samples, 0.07%; +0.01%)</title><rect x="805.8" y="245" width="0.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="808.76" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (23 samples, 0.05%; -0.01%)</title><rect x="509.5" y="277" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="512.50" y="287.5" ></text>
</g>
<g >
<title>database::find_column_family (75 samples, 0.15%; +0.00%)</title><rect x="754.0" y="373" width="1.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="757.05" y="383.5" ></text>
</g>
<g >
<title>__start_context (276 samples, 0.56%; 0.00%)</title><rect x="14.6" y="613" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.64" y="623.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (5 samples, 0.01%; 0.00%)</title><rect x="16.9" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.86" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (36 samples, 0.07%; +0.01%)</title><rect x="979.5" y="309" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="982.49" y="319.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (20 samples, 0.04%; +0.02%)</title><rect x="407.4" y="229" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="410.44" y="239.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (50 samples, 0.10%; -0.02%)</title><rect x="1139.2" y="389" width="1.2" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="1142.24" y="399.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (6 samples, 0.01%; +0.01%)</title><rect x="1052.8" y="277" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1055.82" y="287.5" ></text>
</g>
<g >
<title>compound_type&lt; (179 samples, 0.36%; +0.02%)</title><rect x="479.1" y="213" width="4.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="482.14" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (29 samples, 0.06%; +0.00%)</title><rect x="1060.4" y="293" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1063.40" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (17 samples, 0.03%; -0.02%)</title><rect x="706.0" y="421" width="0.4" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="709.04" y="431.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (258 samples, 0.52%; -0.02%)</title><rect x="68.7" y="405" width="6.2" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="71.69" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.01%; 0.00%)</title><rect x="1106.9" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1109.95" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;managed_bytes&gt;::dispose (6 samples, 0.01%; +0.00%)</title><rect x="909.7" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="912.73" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (21 samples, 0.04%; -0.01%)</title><rect x="879.4" y="421" width="0.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="882.44" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (248 samples, 0.50%; +0.06%)</title><rect x="255.2" y="293" width="6.0" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="258.24" y="303.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (71 samples, 0.14%; -0.06%)</title><rect x="1138.7" y="405" width="1.7" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="1141.74" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (7 samples, 0.01%; +0.00%)</title><rect x="1049.0" y="277" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1051.97" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; -0.01%)</title><rect x="807.0" y="277" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="809.98" y="287.5" ></text>
</g>
<g >
<title>tombstone::apply (20 samples, 0.04%; +0.01%)</title><rect x="388.6" y="197" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="391.65" y="207.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (6 samples, 0.01%; -0.00%)</title><rect x="718.9" y="453" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="721.88" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (14 samples, 0.03%; -0.01%)</title><rect x="742.3" y="293" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="745.31" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (32 samples, 0.06%; +0.01%)</title><rect x="942.8" y="357" width="0.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="945.82" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (8 samples, 0.02%; +0.01%)</title><rect x="830.6" y="421" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="833.55" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (60 samples, 0.12%; -0.02%)</title><rect x="1101.7" y="325" width="1.5" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="1104.73" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (9 samples, 0.02%; +0.01%)</title><rect x="888.8" y="309" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="891.79" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (19 samples, 0.04%; -0.01%)</title><rect x="1002.1" y="293" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1005.11" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.01%)</title><rect x="1136.1" y="373" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1139.14" y="383.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (12 samples, 0.02%; -0.00%)</title><rect x="886.4" y="341" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="889.38" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (11 samples, 0.02%; -0.01%)</title><rect x="207.6" y="133" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="210.62" y="143.5" ></text>
</g>
<g >
<title>freeze (9 samples, 0.02%; 0.00%)</title><rect x="1146.1" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.11" y="207.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (10 samples, 0.02%; 0.00%)</title><rect x="745.6" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="748.58" y="271.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (5 samples, 0.01%; -0.00%)</title><rect x="758.9" y="341" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="761.88" y="351.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (21 samples, 0.04%; -0.01%)</title><rect x="1082.6" y="325" width="0.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1085.56" y="335.5" ></text>
</g>
<g >
<title>operator delete (32 samples, 0.06%; +0.01%)</title><rect x="663.0" y="485" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="665.98" y="495.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (11 samples, 0.02%; +0.02%)</title><rect x="1068.3" y="277" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1071.31" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (5 samples, 0.01%; +0.01%)</title><rect x="451.4" y="277" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="454.36" y="287.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_ba202cd8bdcfd8c6f1dbb280f642f5ad31cbca7c] (9 samples, 0.02%; +0.02%)</title><rect x="343.3" y="165" width="0.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="346.27" y="175.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (23 samples, 0.05%; +0.04%)</title><rect x="673.1" y="485" width="0.5" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="676.07" y="495.5" ></text>
</g>
<g >
<title>auth::get_permissions (5 samples, 0.01%; 0.00%)</title><rect x="21.0" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.00" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (30 samples, 0.06%; -0.01%)</title><rect x="224.1" y="181" width="0.7" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="227.09" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (16 samples, 0.03%; 0.00%)</title><rect x="863.6" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.59" y="511.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (25 samples, 0.05%; -0.01%)</title><rect x="911.2" y="325" width="0.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="914.22" y="335.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (5 samples, 0.01%; +0.00%)</title><rect x="527.2" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="530.19" y="287.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (87 samples, 0.18%; +0.00%)</title><rect x="242.9" y="197" width="2.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="245.86" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; -0.01%)</title><rect x="1046.0" y="277" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1048.98" y="287.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (9 samples, 0.02%; +0.00%)</title><rect x="228.1" y="181" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="231.08" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (264 samples, 0.53%; -0.01%)</title><rect x="225.6" y="229" width="6.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="228.65" y="239.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (19 samples, 0.04%; -0.01%)</title><rect x="504.7" y="181" width="0.5" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="507.74" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (20 samples, 0.04%; +0.00%)</title><rect x="988.7" y="341" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="991.75" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (56 samples, 0.11%; +0.02%)</title><rect x="366.6" y="181" width="1.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="369.60" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (13 samples, 0.03%; -0.02%)</title><rect x="606.1" y="437" width="0.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="609.13" y="447.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (37 samples, 0.07%; -0.00%)</title><rect x="933.1" y="341" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="936.09" y="351.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.04%; -0.02%)</title><rect x="96.0" y="437" width="0.4" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="98.97" y="447.5" ></text>
</g>
<g >
<title>dht::tri_compare (34 samples, 0.07%; -0.02%)</title><rect x="1085.1" y="245" width="0.8" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="1088.12" y="255.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (44 samples, 0.09%; +0.01%)</title><rect x="797.5" y="133" width="1.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="800.51" y="143.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (9 samples, 0.02%; -0.01%)</title><rect x="367.6" y="149" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="370.58" y="159.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (88 samples, 0.18%; +0.02%)</title><rect x="444.7" y="309" width="2.1" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="447.73" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (13 samples, 0.03%; -0.01%)</title><rect x="232.1" y="213" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="235.05" y="223.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (21 samples, 0.04%; -0.01%)</title><rect x="1066.6" y="261" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1069.57" y="271.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (23 samples, 0.05%; +0.00%)</title><rect x="803.9" y="213" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="806.87" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; -0.00%)</title><rect x="505.8" y="197" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="508.84" y="207.5" ></text>
</g>
<g >
<title>std::type_info::operator== (5 samples, 0.01%; +0.00%)</title><rect x="700.0" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="702.97" y="447.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (223 samples, 0.45%; +0.00%)</title><rect x="894.1" y="277" width="5.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="897.15" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (25 samples, 0.05%; +0.01%)</title><rect x="204.5" y="117" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="207.51" y="127.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (17 samples, 0.03%; +0.01%)</title><rect x="831.0" y="421" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="834.01" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (37 samples, 0.07%; 0.00%)</title><rect x="648.5" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="651.50" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (443 samples, 0.90%; -0.01%)</title><rect x="696.9" y="485" width="10.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="699.88" y="495.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (26 samples, 0.05%; 0.00%)</title><rect x="684.2" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.24" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (109 samples, 0.22%; -0.01%)</title><rect x="61.5" y="453" width="2.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="64.50" y="463.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (29 samples, 0.06%; +0.00%)</title><rect x="389.4" y="213" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="392.41" y="223.5" ></text>
</g>
<g >
<title>operator new (43 samples, 0.09%; -0.00%)</title><rect x="215.5" y="165" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="218.46" y="175.5" ></text>
</g>
<g >
<title>bytes_ostream::view (6 samples, 0.01%; +0.00%)</title><rect x="593.6" y="389" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="596.60" y="399.5" ></text>
</g>
<g >
<title>operator delete (37 samples, 0.07%; -0.02%)</title><rect x="589.8" y="389" width="0.8" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="592.76" y="399.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; 0.00%)</title><rect x="1005.1" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1008.10" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (115 samples, 0.23%; +0.02%)</title><rect x="999.1" y="277" width="2.7" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1002.08" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (5 samples, 0.01%; -0.00%)</title><rect x="1079.8" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1082.81" y="287.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; +0.01%)</title><rect x="50.1" y="469" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="53.07" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (12 samples, 0.02%; +0.01%)</title><rect x="1048.4" y="229" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1051.44" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (35 samples, 0.07%; -0.00%)</title><rect x="823.3" y="293" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="826.26" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (15 samples, 0.03%; -0.01%)</title><rect x="1178.7" y="485" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1181.67" y="495.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.04%; +0.01%)</title><rect x="668.5" y="469" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="671.46" y="479.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (8 samples, 0.02%; +0.00%)</title><rect x="234.2" y="229" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="237.18" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (12 samples, 0.02%; +0.02%)</title><rect x="686.7" y="485" width="0.3" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="689.72" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (10 samples, 0.02%; 0.00%)</title><rect x="17.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.55" y="335.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (194 samples, 0.39%; +0.02%)</title><rect x="849.8" y="437" width="4.7" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="852.82" y="447.5" ></text>
</g>
<g >
<title>operator new (64 samples, 0.13%; 0.00%)</title><rect x="1122.4" y="357" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.37" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (176 samples, 0.36%; -0.01%)</title><rect x="545.1" y="373" width="4.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="548.14" y="383.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (7 samples, 0.01%; +0.00%)</title><rect x="1110.8" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1113.79" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (37 samples, 0.07%; -0.01%)</title><rect x="101.4" y="405" width="0.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="104.42" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (28 samples, 0.06%; +0.01%)</title><rect x="910.5" y="309" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="913.55" y="319.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (23 samples, 0.05%; +0.00%)</title><rect x="902.0" y="293" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="904.96" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (30 samples, 0.06%; +0.01%)</title><rect x="1030.9" y="149" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1033.90" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (7 samples, 0.01%; -0.00%)</title><rect x="38.7" y="453" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="41.71" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (20 samples, 0.04%; 0.00%)</title><rect x="707.6" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="710.60" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (22 samples, 0.04%; +0.00%)</title><rect x="1046.3" y="277" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1049.27" y="287.5" ></text>
</g>
<g >
<title>query::result::builder::build (69 samples, 0.14%; -0.03%)</title><rect x="592.3" y="437" width="1.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="595.31" y="447.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.01%; -0.00%)</title><rect x="757.7" y="293" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="760.71" y="303.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (24 samples, 0.05%; +0.01%)</title><rect x="63.3" y="421" width="0.6" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="66.34" y="431.5" ></text>
</g>
<g >
<title>partition_entry::read (84 samples, 0.17%; -0.00%)</title><rect x="513.5" y="309" width="2.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="516.51" y="319.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (13 samples, 0.03%; +0.01%)</title><rect x="1053.0" y="277" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1055.96" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (5,772 samples, 11.69%; +0.02%)</title><rect x="970.5" y="373" width="138.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="973.48" y="383.5" >service::storage_..</text>
</g>
<g >
<title>managed_bytes::~managed_bytes (17 samples, 0.03%; +0.01%)</title><rect x="936.5" y="405" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="939.51" y="415.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (9 samples, 0.02%; +0.01%)</title><rect x="1158.2" y="405" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1161.18" y="415.5" ></text>
</g>
<g >
<title>row::row (1,497 samples, 3.03%; +0.03%)</title><rect x="172.7" y="149" width="35.8" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="175.71" y="159.5" >row..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.00%)</title><rect x="443.1" y="261" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="446.08" y="271.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (6 samples, 0.01%; 0.00%)</title><rect x="1145.6" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.56" y="319.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (7 samples, 0.01%; 0.00%)</title><rect x="1146.2" y="165" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.15" y="175.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (52 samples, 0.11%; +0.02%)</title><rect x="221.8" y="149" width="1.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="224.82" y="159.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (9 samples, 0.02%; +0.01%)</title><rect x="955.0" y="389" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="957.99" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (36 samples, 0.07%; +0.02%)</title><rect x="115.8" y="373" width="0.9" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="118.84" y="383.5" ></text>
</g>
<g >
<title>tombstone::apply (5 samples, 0.01%; +0.01%)</title><rect x="390.1" y="213" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="393.10" y="223.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_limit (20 samples, 0.04%; 0.00%)</title><rect x="1113.8" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1116.76" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (6 samples, 0.01%; -0.00%)</title><rect x="265.3" y="341" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="268.26" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (31 samples, 0.06%; +0.01%)</title><rect x="976.9" y="325" width="0.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="979.94" y="335.5" ></text>
</g>
<g >
<title>TLS init function for cql3::statements::select_statement::_default_parameters (6 samples, 0.01%; +0.00%)</title><rect x="748.8" y="389" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="751.81" y="399.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (9 samples, 0.02%; +0.01%)</title><rect x="1047.2" y="277" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1050.20" y="287.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (14 samples, 0.03%; +0.01%)</title><rect x="734.0" y="389" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="737.01" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (6 samples, 0.01%; +0.01%)</title><rect x="649.5" y="469" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="652.45" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; -0.01%)</title><rect x="411.3" y="277" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="414.31" y="287.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (28 samples, 0.06%; +0.01%)</title><rect x="743.1" y="309" width="0.6" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="746.05" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (40 samples, 0.08%; -0.01%)</title><rect x="567.8" y="261" width="1.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="570.81" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (13 samples, 0.03%; -0.00%)</title><rect x="565.3" y="293" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="568.27" y="303.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (42 samples, 0.09%; 0.00%)</title><rect x="675.9" y="469" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.94" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (47 samples, 0.10%; +0.00%)</title><rect x="537.4" y="389" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="540.35" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (15 samples, 0.03%; +0.00%)</title><rect x="666.8" y="485" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="669.81" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (21 samples, 0.04%; -0.02%)</title><rect x="778.3" y="277" width="0.5" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="781.29" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (8 samples, 0.02%; +0.00%)</title><rect x="806.7" y="261" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="809.69" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (10 samples, 0.02%; +0.01%)</title><rect x="389.9" y="181" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="392.87" y="191.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (1,040 samples, 2.11%; +0.01%)</title><rect x="782.9" y="293" width="24.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="785.86" y="303.5" >s..</text>
</g>
<g >
<title>schema::get_partitioner (21 samples, 0.04%; +0.02%)</title><rect x="938.3" y="405" width="0.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="941.25" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (6 samples, 0.01%; -0.01%)</title><rect x="969.0" y="373" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="971.98" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (29 samples, 0.06%; -0.01%)</title><rect x="778.1" y="293" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="781.10" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (16 samples, 0.03%; 0.00%)</title><rect x="447.8" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="450.84" y="287.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (8 samples, 0.02%; +0.01%)</title><rect x="938.1" y="405" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="941.06" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (6 samples, 0.01%; 0.00%)</title><rect x="582.2" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="585.20" y="399.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1,177 samples, 2.38%; -0.10%)</title><rect x="335.5" y="181" width="28.1" height="15.0" fill="rgb(87,87,255)" rx="2" ry="2" />
<text  x="338.50" y="191.5" >w..</text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (11 samples, 0.02%; +0.01%)</title><rect x="843.2" y="421" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="846.15" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (15 samples, 0.03%; +0.02%)</title><rect x="849.1" y="437" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="852.06" y="447.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (6 samples, 0.01%; -0.06%)</title><rect x="235.4" y="245" width="0.1" height="15.0" fill="rgb(141,141,255)" rx="2" ry="2" />
<text  x="238.35" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (11 samples, 0.02%; +0.00%)</title><rect x="134.7" y="245" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="137.73" y="255.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.28" y="543.5" ></text>
</g>
<g >
<title>schema::column_at (18 samples, 0.04%; +0.00%)</title><rect x="363.7" y="197" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="366.69" y="207.5" ></text>
</g>
<g >
<title>dht::shard_of (20 samples, 0.04%; +0.01%)</title><rect x="1004.3" y="293" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1007.33" y="303.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%; 0.00%)</title><rect x="774.8" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="777.75" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (27 samples, 0.05%; -0.01%)</title><rect x="944.3" y="357" width="0.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="947.28" y="367.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::make_temporary (108 samples, 0.22%; +0.01%)</title><rect x="904.4" y="341" width="2.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="907.45" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (151 samples, 0.31%; -0.01%)</title><rect x="821.8" y="341" width="3.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="824.80" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; +0.01%)</title><rect x="544.1" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="547.14" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (30 samples, 0.06%; -0.01%)</title><rect x="31.4" y="485" width="0.8" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="34.44" y="495.5" ></text>
</g>
<g >
<title>operator new (95 samples, 0.19%; +0.00%)</title><rect x="956.4" y="405" width="2.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="959.45" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; -0.00%)</title><rect x="628.3" y="485" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="631.29" y="495.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (17 samples, 0.03%; -0.00%)</title><rect x="364.2" y="197" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="367.19" y="207.5" ></text>
</g>
<g >
<title>query::result::result (16 samples, 0.03%; +0.02%)</title><rect x="609.8" y="421" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="612.81" y="431.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (17 samples, 0.03%; 0.00%)</title><rect x="684.2" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.24" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (18 samples, 0.04%; -0.00%)</title><rect x="1158.0" y="421" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1160.96" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (22 samples, 0.04%; +0.02%)</title><rect x="1113.1" y="389" width="0.6" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="1116.14" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (5 samples, 0.01%; -0.01%)</title><rect x="589.5" y="405" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="592.54" y="415.5" ></text>
</g>
<g >
<title>operator new (30 samples, 0.06%; 0.00%)</title><rect x="247.1" y="181" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="250.07" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (29 samples, 0.06%; +0.01%)</title><rect x="328.1" y="181" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="331.06" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (38 samples, 0.08%; +0.04%)</title><rect x="46.8" y="485" width="0.9" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="49.82" y="495.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (19 samples, 0.04%; +0.01%)</title><rect x="560.9" y="309" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="563.92" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::stats (36 samples, 0.07%; +0.02%)</title><rect x="497.6" y="245" width="0.9" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="500.64" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (5 samples, 0.01%; -0.01%)</title><rect x="312.6" y="165" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="315.57" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (43 samples, 0.09%; +0.03%)</title><rect x="215.5" y="149" width="1.0" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="218.46" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.05%; -0.01%)</title><rect x="1162.5" y="373" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1165.53" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="489.7" y="309" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="492.66" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (8 samples, 0.02%; +0.01%)</title><rect x="591.4" y="389" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="594.43" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (11 samples, 0.02%; +0.01%)</title><rect x="262.1" y="309" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="265.10" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (12 samples, 0.02%; -0.01%)</title><rect x="636.2" y="453" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="639.16" y="463.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (216 samples, 0.44%; -0.01%)</title><rect x="747.4" y="421" width="5.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="750.45" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.04%; +0.02%)</title><rect x="834.2" y="357" width="0.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="837.21" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (155 samples, 0.31%; +0.01%)</title><rect x="398.2" y="197" width="3.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="401.19" y="207.5" ></text>
</g>
<g >
<title>operator delete (29 samples, 0.06%; +0.00%)</title><rect x="669.6" y="453" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="672.56" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (5 samples, 0.01%; +0.01%)</title><rect x="296.2" y="277" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="299.17" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (5 samples, 0.01%; -0.01%)</title><rect x="801.4" y="149" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="804.43" y="159.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (8 samples, 0.02%; -0.01%)</title><rect x="551.8" y="421" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="554.84" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="1033.8" y="181" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1036.84" y="191.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (65 samples, 0.13%; +0.02%)</title><rect x="477.6" y="213" width="1.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="480.58" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (25 samples, 0.05%; 0.00%)</title><rect x="172.1" y="149" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="175.12" y="159.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (119 samples, 0.24%; -0.00%)</title><rect x="825.5" y="373" width="2.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="828.51" y="383.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (24 samples, 0.05%; +0.01%)</title><rect x="517.7" y="325" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="520.72" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (280 samples, 0.57%; +0.01%)</title><rect x="190.5" y="85" width="6.7" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="193.55" y="95.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (12 samples, 0.02%; -0.01%)</title><rect x="212.6" y="101" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="215.57" y="111.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (7 samples, 0.01%; -0.01%)</title><rect x="115.7" y="373" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="118.67" y="383.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (78 samples, 0.16%; +0.00%)</title><rect x="414.9" y="373" width="1.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="417.94" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (23,920 samples, 48.46%; -0.08%)</title><rect x="53.5" y="469" width="571.9" height="15.0" fill="rgb(114,114,255)" rx="2" ry="2" />
<text  x="56.51" y="479.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (73 samples, 0.15%; 0.00%)</title><rect x="246.2" y="213" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="249.16" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (17 samples, 0.03%; +0.01%)</title><rect x="689.6" y="453" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="692.62" y="463.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (6 samples, 0.01%; 0.00%)</title><rect x="1102.2" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1105.21" y="319.5" ></text>
</g>
<g >
<title>operator delete (34 samples, 0.07%; +0.02%)</title><rect x="417.0" y="373" width="0.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="419.98" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (20 samples, 0.04%; 0.00%)</title><rect x="864.5" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.55" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state_base::future_state_base (5 samples, 0.01%; +0.00%)</title><rect x="786.0" y="261" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="789.04" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (10 samples, 0.02%; +0.00%)</title><rect x="656.1" y="469" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="659.15" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (20 samples, 0.04%; -0.00%)</title><rect x="647.3" y="437" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="650.30" y="447.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (73 samples, 0.15%; +0.02%)</title><rect x="71.9" y="389" width="1.8" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="74.94" y="399.5" ></text>
</g>
<g >
<title>operator new (57 samples, 0.12%; +0.01%)</title><rect x="440.6" y="245" width="1.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="443.64" y="255.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (17 samples, 0.03%; -0.01%)</title><rect x="823.7" y="277" width="0.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="826.69" y="287.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (34 samples, 0.07%; +0.02%)</title><rect x="1031.8" y="149" width="0.8" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1034.78" y="159.5" ></text>
</g>
<g >
<title>operator delete (11 samples, 0.02%; -0.01%)</title><rect x="44.3" y="501" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="47.26" y="511.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (17 samples, 0.03%; +0.00%)</title><rect x="331.4" y="181" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="334.44" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (10 samples, 0.02%; +0.01%)</title><rect x="669.1" y="469" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="672.06" y="479.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::set_latency (9 samples, 0.02%; +0.02%)</title><rect x="624.4" y="437" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="627.45" y="447.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (326 samples, 0.66%; -0.00%)</title><rect x="1084.8" y="261" width="7.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1087.78" y="271.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (15 samples, 0.03%; -0.00%)</title><rect x="725.4" y="309" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="728.38" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (9 samples, 0.02%; +0.00%)</title><rect x="776.9" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="779.88" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (14 samples, 0.03%; -0.01%)</title><rect x="78.2" y="453" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="81.23" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (31 samples, 0.06%; +0.01%)</title><rect x="986.7" y="261" width="0.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="989.71" y="271.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (6 samples, 0.01%; -0.00%)</title><rect x="670.4" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="673.44" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (21 samples, 0.04%; -0.02%)</title><rect x="967.3" y="341" width="0.6" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="970.35" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (43 samples, 0.09%; +0.01%)</title><rect x="100.4" y="405" width="1.0" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="103.39" y="415.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (651 samples, 1.32%; +0.01%)</title><rect x="1084.5" y="293" width="15.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1087.50" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%; +0.00%)</title><rect x="197.2" y="101" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="200.24" y="111.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (24 samples, 0.05%; +0.01%)</title><rect x="540.4" y="421" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="543.36" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (52 samples, 0.11%; +0.00%)</title><rect x="955.2" y="405" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="958.20" y="415.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (11 samples, 0.02%; -0.00%)</title><rect x="235.5" y="245" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="238.50" y="255.5" ></text>
</g>
<g >
<title>operator new (37 samples, 0.07%; -0.00%)</title><rect x="514.6" y="277" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="517.61" y="287.5" ></text>
</g>
<g >
<title>sstring_hash::operator (20 samples, 0.04%; +0.04%)</title><rect x="841.1" y="389" width="0.5" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="844.14" y="399.5" ></text>
</g>
<g >
<title>operator delete (24 samples, 0.05%; +0.01%)</title><rect x="1172.4" y="453" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1175.36" y="463.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (32 samples, 0.06%; -0.00%)</title><rect x="684.2" y="469" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="687.19" y="479.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (41 samples, 0.08%; +0.01%)</title><rect x="831.4" y="421" width="1.0" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="834.41" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (18 samples, 0.04%; -0.00%)</title><rect x="1171.2" y="469" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1174.23" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="818.4" y="357" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="821.36" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (193 samples, 0.39%; -0.00%)</title><rect x="741.3" y="341" width="4.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="744.26" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (11 samples, 0.02%; +0.01%)</title><rect x="1143.7" y="421" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1146.67" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (6 samples, 0.01%; +0.00%)</title><rect x="390.2" y="229" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="393.22" y="239.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (6 samples, 0.01%; +0.01%)</title><rect x="582.3" y="389" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="585.34" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (8 samples, 0.02%; -0.01%)</title><rect x="1130.6" y="405" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1133.59" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (15 samples, 0.03%; +0.00%)</title><rect x="1146.1" y="261" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1149.08" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (19 samples, 0.04%; +0.01%)</title><rect x="248.3" y="229" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="251.29" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::future (12 samples, 0.02%; -0.01%)</title><rect x="981.2" y="357" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="984.17" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; +0.00%)</title><rect x="1159.2" y="421" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1162.21" y="431.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; -0.00%)</title><rect x="725.5" y="293" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="728.45" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (35 samples, 0.07%; -0.01%)</title><rect x="1169.5" y="485" width="0.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1172.54" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (30 samples, 0.06%; +0.02%)</title><rect x="446.0" y="293" width="0.7" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="449.00" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (276 samples, 0.56%; +0.00%)</title><rect x="438.0" y="293" width="6.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="440.97" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (11 samples, 0.02%; +0.00%)</title><rect x="1081.9" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1084.87" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (6 samples, 0.01%; +0.00%)</title><rect x="858.7" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="861.74" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (6 samples, 0.01%; -0.00%)</title><rect x="863.7" y="373" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="866.71" y="383.5" ></text>
</g>
<g >
<title>operator delete (96 samples, 0.19%; +0.02%)</title><rect x="93.7" y="437" width="2.3" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="96.68" y="447.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt; &gt; (8 samples, 0.02%; +0.01%)</title><rect x="809.8" y="325" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="812.75" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (109 samples, 0.22%; -0.00%)</title><rect x="589.7" y="405" width="2.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="592.68" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (253 samples, 0.51%; -0.00%)</title><rect x="574.6" y="373" width="6.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="577.62" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (68 samples, 0.14%; +0.01%)</title><rect x="757.2" y="341" width="1.6" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="760.20" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (5 samples, 0.01%; +0.01%)</title><rect x="862.2" y="501" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="865.23" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (24 samples, 0.05%; -0.04%)</title><rect x="165.8" y="229" width="0.6" height="15.0" fill="rgb(158,158,255)" rx="2" ry="2" />
<text  x="168.78" y="239.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (131 samples, 0.27%; -0.02%)</title><rect x="924.6" y="341" width="3.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="927.56" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (20 samples, 0.04%; -0.00%)</title><rect x="1173.0" y="453" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1175.95" y="463.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (22 samples, 0.04%; -0.00%)</title><rect x="815.4" y="293" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="818.44" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (20 samples, 0.04%; -0.03%)</title><rect x="604.7" y="437" width="0.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="607.72" y="447.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (5 samples, 0.01%; +0.01%)</title><rect x="1101.4" y="245" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1104.35" y="255.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; -0.00%)</title><rect x="673.6" y="485" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="676.62" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (7 samples, 0.01%; -0.00%)</title><rect x="853.9" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="856.89" y="367.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (10 samples, 0.02%; +0.00%)</title><rect x="437.7" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="440.70" y="303.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.09%; 0.00%)</title><rect x="1188.9" y="629" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1191.85" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,338 samples, 4.74%; -0.04%)</title><rect x="169.1" y="197" width="55.9" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="172.13" y="207.5" >parti..</text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (6 samples, 0.01%; +0.00%)</title><rect x="760.4" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="763.41" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (24 samples, 0.05%; +0.01%)</title><rect x="657.5" y="485" width="0.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="660.53" y="495.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (132 samples, 0.27%; -0.04%)</title><rect x="1185.7" y="613" width="3.1" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="1188.67" y="623.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.01%; +0.01%)</title><rect x="933.8" y="309" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="936.76" y="319.5" ></text>
</g>
<g >
<title>operator delete (17 samples, 0.03%; +0.00%)</title><rect x="636.9" y="485" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="639.88" y="495.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (44 samples, 0.09%; +0.02%)</title><rect x="526.0" y="261" width="1.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="528.97" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (16 samples, 0.03%; +0.00%)</title><rect x="411.5" y="293" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="414.48" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (6 samples, 0.01%; +0.00%)</title><rect x="124.8" y="293" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="127.80" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (7 samples, 0.01%; +0.01%)</title><rect x="620.7" y="373" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="623.69" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (10 samples, 0.02%; -0.00%)</title><rect x="600.8" y="437" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="603.85" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (14 samples, 0.03%; -0.00%)</title><rect x="1052.2" y="213" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1055.20" y="223.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (4,746 samples, 9.62%; +0.01%)</title><rect x="423.8" y="389" width="113.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="426.77" y="399.5" >std::function&lt;..</text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (15 samples, 0.03%; 0.00%)</title><rect x="1146.1" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.08" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (20 samples, 0.04%; +0.03%)</title><rect x="419.3" y="405" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="422.34" y="415.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (886 samples, 1.80%; +0.01%)</title><rect x="490.6" y="309" width="21.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="493.59" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (47 samples, 0.10%; +0.02%)</title><rect x="1164.6" y="453" width="1.1" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="1167.56" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (5 samples, 0.01%; 0.00%)</title><rect x="19.3" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.25" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (21 samples, 0.04%; -0.03%)</title><rect x="209.0" y="149" width="0.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="212.01" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,475 samples, 5.01%; -0.01%)</title><rect x="166.5" y="229" width="59.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="169.47" y="239.5" >partit..</text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (20 samples, 0.04%; -0.00%)</title><rect x="636.0" y="469" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="638.97" y="479.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (53 samples, 0.11%; +0.07%)</title><rect x="520.2" y="341" width="1.3" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="523.23" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (21 samples, 0.04%; -0.00%)</title><rect x="356.9" y="149" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="359.87" y="159.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (5 samples, 0.01%; 0.00%)</title><rect x="225.4" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="228.38" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (46 samples, 0.09%; -0.01%)</title><rect x="1157.5" y="437" width="1.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1160.46" y="447.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (7 samples, 0.01%; +0.01%)</title><rect x="749.0" y="389" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="751.96" y="399.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (37 samples, 0.07%; -0.00%)</title><rect x="461.7" y="277" width="0.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="464.68" y="287.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (29 samples, 0.06%; +0.02%)</title><rect x="1040.6" y="245" width="0.7" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="1043.58" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; +0.01%)</title><rect x="628.8" y="469" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="631.84" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (118 samples, 0.24%; +0.04%)</title><rect x="228.3" y="181" width="2.9" height="15.0" fill="rgb(255,158,158)" rx="2" ry="2" />
<text  x="231.35" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (100 samples, 0.20%; -0.00%)</title><rect x="239.9" y="213" width="2.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="242.94" y="223.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (11 samples, 0.02%; +0.01%)</title><rect x="221.5" y="133" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="224.51" y="143.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (10 samples, 0.02%; -0.00%)</title><rect x="531.9" y="245" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="534.90" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (79 samples, 0.16%; -0.00%)</title><rect x="764.0" y="373" width="1.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="767.02" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (53 samples, 0.11%; -0.00%)</title><rect x="17.8" y="325" width="1.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="20.79" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.28" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (13 samples, 0.03%; -0.02%)</title><rect x="858.1" y="405" width="0.3" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="861.07" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (11 samples, 0.02%; -0.00%)</title><rect x="19.1" y="341" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="22.11" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (7 samples, 0.01%; +0.01%)</title><rect x="939.1" y="405" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="942.12" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.01%; 0.00%)</title><rect x="17.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.29" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (30 samples, 0.06%; 0.00%)</title><rect x="684.2" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.19" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (11 samples, 0.02%; 0.00%)</title><rect x="19.1" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.11" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (34 samples, 0.07%; +0.01%)</title><rect x="766.5" y="357" width="0.8" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="769.46" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (15 samples, 0.03%; +0.02%)</title><rect x="1032.2" y="133" width="0.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1035.23" y="143.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (13 samples, 0.03%; +0.01%)</title><rect x="311.9" y="165" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="314.88" y="175.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (5 samples, 0.01%; -0.01%)</title><rect x="945.8" y="405" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="948.81" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.01%)</title><rect x="1002.0" y="277" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1004.97" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (19 samples, 0.04%; +0.04%)</title><rect x="156.7" y="197" width="0.5" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="159.70" y="207.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (8 samples, 0.02%; +0.01%)</title><rect x="767.7" y="341" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="770.72" y="351.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (129 samples, 0.26%; -0.03%)</title><rect x="1077.1" y="309" width="3.1" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1080.09" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (16 samples, 0.03%; -0.01%)</title><rect x="927.9" y="389" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="930.93" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (328 samples, 0.66%; -0.00%)</title><rect x="1061.4" y="325" width="7.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1064.35" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (11 samples, 0.02%; 0.00%)</title><rect x="518.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="521.87" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (12 samples, 0.02%; +0.02%)</title><rect x="801.7" y="197" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="804.70" y="207.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (121 samples, 0.25%; 0.00%)</title><rect x="725.9" y="325" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.91" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (52 samples, 0.11%; -0.00%)</title><rect x="1170.5" y="485" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1173.47" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, auth::role_or_anonymous&amp;&amp;, auth::get_permissions (5 samples, 0.01%; -0.01%)</title><rect x="809.4" y="309" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="812.42" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="907.3" y="341" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="910.27" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (12 samples, 0.02%; +0.00%)</title><rect x="992.0" y="293" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="995.05" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (11 samples, 0.02%; 0.00%)</title><rect x="259.1" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="262.09" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (8 samples, 0.02%; +0.00%)</title><rect x="803.1" y="245" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="806.11" y="255.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (2,734 samples, 5.54%; +0.05%)</title><rect x="453.8" y="341" width="65.3" height="15.0" fill="rgb(255,148,148)" rx="2" ry="2" />
<text  x="456.77" y="351.5" >memtabl..</text>
</g>
<g >
<title>reader_permit::~reader_permit (12 samples, 0.02%; +0.02%)</title><rect x="424.1" y="373" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="427.10" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (12 samples, 0.02%; +0.01%)</title><rect x="1137.0" y="421" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1140.02" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::optional&lt;auth::resource&gt;&amp;&amp;, service::client_state::check_has_permission (5 samples, 0.01%; +0.01%)</title><rect x="812.2" y="341" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="815.24" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (11 samples, 0.02%; +0.00%)</title><rect x="1147.1" y="501" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1150.09" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.01%; -0.01%)</title><rect x="680.8" y="469" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="683.80" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (5 samples, 0.01%; 0.00%)</title><rect x="591.6" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="594.62" y="399.5" ></text>
</g>
<g >
<title>sstring_hash::operator (35 samples, 0.07%; 0.00%)</title><rect x="1067.7" y="293" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1070.74" y="303.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (113 samples, 0.23%; 0.00%)</title><rect x="701.2" y="437" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="704.16" y="447.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (12 samples, 0.02%; +0.01%)</title><rect x="848.5" y="325" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="851.46" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (94 samples, 0.19%; -0.01%)</title><rect x="851.8" y="373" width="2.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="854.81" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (12 samples, 0.02%; +0.02%)</title><rect x="909.4" y="341" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="912.45" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (29 samples, 0.06%; +0.00%)</title><rect x="1163.9" y="405" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1166.87" y="415.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (261 samples, 0.53%; -0.00%)</title><rect x="723.7" y="421" width="6.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="726.66" y="431.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (536 samples, 1.09%; +0.00%)</title><rect x="471.5" y="309" width="12.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="474.49" y="319.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::raw_value_view (9 samples, 0.02%; +0.01%)</title><rect x="907.0" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="910.03" y="351.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (629 samples, 1.27%; +0.02%)</title><rect x="787.4" y="229" width="15.0" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="790.37" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (244 samples, 0.49%; -0.00%)</title><rect x="1118.6" y="405" width="5.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1121.61" y="415.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::signal (8 samples, 0.02%; +0.00%)</title><rect x="708.4" y="453" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="711.41" y="463.5" ></text>
</g>
<g >
<title>std::type_info::operator== (8 samples, 0.02%; +0.01%)</title><rect x="1005.8" y="277" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1008.77" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (29 samples, 0.06%; +0.01%)</title><rect x="546.6" y="341" width="0.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="549.55" y="351.5" ></text>
</g>
<g >
<title>local_schema_registry (25 samples, 0.05%; +0.01%)</title><rect x="974.9" y="357" width="0.6" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="977.86" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (17 samples, 0.03%; 0.00%)</title><rect x="864.6" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.57" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (3,023 samples, 6.12%; -0.11%)</title><rect x="163.1" y="245" width="72.3" height="15.0" fill="rgb(80,80,255)" rx="2" ry="2" />
<text  x="166.08" y="255.5" >partitio..</text>
</g>
<g >
<title>partition_key_view::legacy_form (7 samples, 0.01%; -0.05%)</title><rect x="934.5" y="389" width="0.2" height="15.0" fill="rgb(153,153,255)" rx="2" ry="2" />
<text  x="937.50" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (15 samples, 0.03%; +0.01%)</title><rect x="439.2" y="261" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="442.16" y="271.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (653 samples, 1.32%; +0.02%)</title><rect x="181.8" y="117" width="15.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="184.80" y="127.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (57 samples, 0.12%; -0.03%)</title><rect x="833.7" y="389" width="1.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="836.71" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (28 samples, 0.06%; 0.00%)</title><rect x="1145.8" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.82" y="351.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (7 samples, 0.01%; +0.00%)</title><rect x="703.5" y="421" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="706.53" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (36 samples, 0.07%; 0.00%)</title><rect x="684.1" y="501" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.09" y="511.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (5,875 samples, 11.90%; +0.02%)</title><rect x="122.2" y="325" width="140.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="125.22" y="335.5" >mutation_reader_m..</text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (119 samples, 0.24%; -0.01%)</title><rect x="743.0" y="325" width="2.8" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="745.98" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (19 samples, 0.04%; +0.02%)</title><rect x="527.6" y="309" width="0.4" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="530.57" y="319.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; 0.00%)</title><rect x="520.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="523.04" y="351.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (41 samples, 0.08%; +0.01%)</title><rect x="199.4" y="101" width="1.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="202.37" y="111.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (52 samples, 0.11%; +0.00%)</title><rect x="1100.5" y="309" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1103.49" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (8 samples, 0.02%; 0.00%)</title><rect x="20.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.99" y="415.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (8 samples, 0.02%; +0.01%)</title><rect x="827.1" y="277" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="830.06" y="287.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (279 samples, 0.57%; +0.02%)</title><rect x="208.5" y="165" width="6.7" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="211.50" y="175.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (61 samples, 0.12%; +0.02%)</title><rect x="530.8" y="261" width="1.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="533.85" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (32 samples, 0.06%; +0.01%)</title><rect x="516.5" y="309" width="0.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="519.50" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (14 samples, 0.03%; +0.00%)</title><rect x="681.9" y="453" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="684.94" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (170 samples, 0.34%; -0.03%)</title><rect x="756.5" y="357" width="4.1" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="759.49" y="367.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (17 samples, 0.03%; -0.00%)</title><rect x="616.1" y="405" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="619.15" y="415.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (122 samples, 0.25%; -0.01%)</title><rect x="242.5" y="213" width="3.0" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="245.55" y="223.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (208 samples, 0.42%; -0.00%)</title><rect x="14.9" y="469" width="5.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="17.92" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (66 samples, 0.13%; -0.00%)</title><rect x="15.2" y="325" width="1.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="18.19" y="335.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (18 samples, 0.04%; -0.01%)</title><rect x="1124.0" y="357" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1127.02" y="367.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.06%; -0.00%)</title><rect x="942.8" y="373" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="945.82" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (4,713 samples, 9.55%; +0.06%)</title><rect x="424.5" y="373" width="112.7" height="15.0" fill="rgb(255,139,139)" rx="2" ry="2" />
<text  x="427.51" y="383.5" >std::_Functio..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (13 samples, 0.03%; +0.01%)</title><rect x="570.8" y="341" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="573.82" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (136 samples, 0.28%; -0.01%)</title><rect x="1049.3" y="261" width="3.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1052.33" y="271.5" ></text>
</g>
<g >
<title>database::find_column_family (31 samples, 0.06%; +0.00%)</title><rect x="1021.7" y="245" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1024.69" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (8 samples, 0.02%; +0.01%)</title><rect x="836.2" y="437" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="839.22" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (14 samples, 0.03%; +0.01%)</title><rect x="512.4" y="325" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="515.39" y="335.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (697 samples, 1.41%; +0.02%)</title><rect x="128.6" y="293" width="16.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="131.60" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (16 samples, 0.03%; -0.01%)</title><rect x="367.4" y="165" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="370.42" y="175.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (66 samples, 0.13%; +0.00%)</title><rect x="815.3" y="309" width="1.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="818.27" y="319.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (8 samples, 0.02%; +0.01%)</title><rect x="282.4" y="325" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="285.35" y="335.5" ></text>
</g>
<g >
<title>service::client_state::validate_login (9 samples, 0.02%; +0.01%)</title><rect x="812.4" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="815.41" y="367.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (19 samples, 0.04%; -0.01%)</title><rect x="839.4" y="357" width="0.5" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="842.42" y="367.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (38 samples, 0.08%; +0.00%)</title><rect x="818.6" y="373" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="821.62" y="383.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (171 samples, 0.35%; +0.01%)</title><rect x="850.2" y="421" width="4.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="853.18" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (16 samples, 0.03%; +0.02%)</title><rect x="296.3" y="293" width="0.4" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="299.34" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.04%; -0.01%)</title><rect x="940.5" y="357" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="943.45" y="367.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (5 samples, 0.01%; -0.00%)</title><rect x="423.6" y="389" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="426.65" y="399.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (1,235 samples, 2.50%; +0.00%)</title><rect x="884.7" y="389" width="29.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="887.65" y="399.5" >_Z..</text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (14 samples, 0.03%; +0.01%)</title><rect x="168.0" y="197" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="170.98" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (53 samples, 0.11%; -0.01%)</title><rect x="652.5" y="453" width="1.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="655.49" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (5 samples, 0.01%; +0.00%)</title><rect x="104.9" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="107.91" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restriction, false&gt;::make&lt;column_definition const&amp;&gt; (5 samples, 0.01%; 0.00%)</title><rect x="20.3" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.28" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (5 samples, 0.01%; +0.00%)</title><rect x="166.4" y="229" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="169.35" y="239.5" ></text>
</g>
<g >
<title>seastar::preempt_io_context::reset_preemption_monitor (7 samples, 0.01%; -0.00%)</title><rect x="1147.3" y="501" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1150.35" y="511.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (35 samples, 0.07%; -0.02%)</title><rect x="676.1" y="453" width="0.8" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="679.11" y="463.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (16 samples, 0.03%; +0.01%)</title><rect x="1046.8" y="277" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1049.82" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (100 samples, 0.20%; -0.02%)</title><rect x="293.9" y="293" width="2.4" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="296.95" y="303.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (20 samples, 0.04%; -0.01%)</title><rect x="216.5" y="165" width="0.5" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="219.49" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (26 samples, 0.05%; +0.00%)</title><rect x="666.0" y="485" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="669.04" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (11 samples, 0.02%; +0.01%)</title><rect x="868.9" y="469" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="871.92" y="479.5" ></text>
</g>
<g >
<title>database::find_schema (321 samples, 0.65%; -0.01%)</title><rect x="753.3" y="405" width="7.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="756.33" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (8 samples, 0.02%; -0.00%)</title><rect x="693.9" y="485" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="696.90" y="495.5" ></text>
</g>
<g >
<title>operator delete (19 samples, 0.04%; +0.01%)</title><rect x="37.9" y="453" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="40.85" y="463.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (7 samples, 0.01%; +0.01%)</title><rect x="742.7" y="293" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="745.74" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (8 samples, 0.02%; +0.01%)</title><rect x="1058.9" y="325" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1061.89" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (131 samples, 0.27%; +0.01%)</title><rect x="992.4" y="293" width="3.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="995.43" y="303.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (67 samples, 0.14%; +0.04%)</title><rect x="892.5" y="277" width="1.6" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="895.54" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (9 samples, 0.02%; 0.00%)</title><rect x="1178.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1181.76" y="463.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (17 samples, 0.03%; 0.00%)</title><rect x="626.0" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.05" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (22 samples, 0.04%; -0.04%)</title><rect x="746.7" y="389" width="0.5" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="749.68" y="399.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.05%; -0.00%)</title><rect x="634.6" y="469" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="637.63" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (113 samples, 0.23%; +0.00%)</title><rect x="35.0" y="453" width="2.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="38.01" y="463.5" ></text>
</g>
<g >
<title>service::client_state::has_access (6 samples, 0.01%; +0.00%)</title><rect x="21.0" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="23.97" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::stats (42 samples, 0.09%; +0.01%)</title><rect x="528.9" y="293" width="1.0" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="531.94" y="303.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (8 samples, 0.02%; -0.02%)</title><rect x="506.1" y="213" width="0.1" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="509.06" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (75 samples, 0.15%; -0.03%)</title><rect x="626.5" y="485" width="1.7" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="629.45" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (17 samples, 0.03%; +0.00%)</title><rect x="138.3" y="245" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="141.34" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (11 samples, 0.02%; -0.00%)</title><rect x="844.8" y="373" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="847.78" y="383.5" ></text>
</g>
<g >
<title>operator delete (27 samples, 0.05%; -0.00%)</title><rect x="442.6" y="277" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="445.61" y="287.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (490 samples, 0.99%; +0.04%)</title><rect x="459.7" y="309" width="11.7" height="15.0" fill="rgb(255,156,156)" rx="2" ry="2" />
<text  x="462.72" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (11 samples, 0.02%; 0.00%)</title><rect x="15.2" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.21" y="303.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (22 samples, 0.04%; -0.00%)</title><rect x="602.5" y="405" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="605.55" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (10 samples, 0.02%; -0.03%)</title><rect x="880.5" y="421" width="0.3" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="883.54" y="431.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (206 samples, 0.42%; -0.01%)</title><rect x="724.0" y="389" width="4.9" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="726.97" y="399.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (17 samples, 0.03%; +0.02%)</title><rect x="652.8" y="437" width="0.4" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="655.80" y="447.5" ></text>
</g>
<g >
<title>posix_memalign (63 samples, 0.13%; +0.00%)</title><rect x="200.7" y="85" width="1.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="203.66" y="95.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (81 samples, 0.16%; +0.01%)</title><rect x="715.3" y="437" width="2.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="718.34" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; 0.00%)</title><rect x="941.4" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="944.36" y="399.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (208 samples, 0.42%; 0.00%)</title><rect x="14.9" y="453" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.92" y="463.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (10 samples, 0.02%; -0.01%)</title><rect x="851.1" y="389" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="854.11" y="399.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (5 samples, 0.01%; 0.00%)</title><rect x="333.2" y="181" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="336.23" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (6 samples, 0.01%; +0.01%)</title><rect x="246.5" y="197" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="249.47" y="207.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (6 samples, 0.01%; +0.00%)</title><rect x="309.8" y="197" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="312.85" y="207.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (20 samples, 0.04%; +0.01%)</title><rect x="562.4" y="293" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="565.41" y="303.5" ></text>
</g>
<g >
<title>operator new (57 samples, 0.12%; 0.00%)</title><rect x="852.5" y="357" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="855.47" y="367.5" ></text>
</g>
<g >
<title>row::external_memory_usage (236 samples, 0.48%; -0.00%)</title><rect x="209.5" y="149" width="5.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="212.53" y="159.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (167 samples, 0.34%; +0.01%)</title><rect x="845.1" y="421" width="4.0" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="848.06" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (22 samples, 0.04%; +0.01%)</title><rect x="794.1" y="133" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="797.14" y="143.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (53 samples, 0.11%; +0.00%)</title><rect x="764.2" y="357" width="1.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="767.23" y="367.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (5 samples, 0.01%; +0.00%)</title><rect x="233.7" y="197" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="236.73" y="207.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (276 samples, 0.56%; +0.00%)</title><rect x="14.6" y="581" width="6.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="17.64" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (8 samples, 0.02%; 0.00%)</title><rect x="284.2" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="287.22" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (30 samples, 0.06%; +0.02%)</title><rect x="143.7" y="261" width="0.7" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="146.67" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (21 samples, 0.04%; +0.02%)</title><rect x="861.6" y="501" width="0.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="864.56" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (117 samples, 0.24%; +0.01%)</title><rect x="639.3" y="501" width="2.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="642.32" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (357 samples, 0.72%; -0.00%)</title><rect x="396.0" y="245" width="8.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="398.99" y="255.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (6 samples, 0.01%; +0.01%)</title><rect x="878.6" y="421" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="881.56" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.01%)</title><rect x="808.8" y="261" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="811.82" y="271.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::raw_value_view (93 samples, 0.19%; +0.01%)</title><rect x="904.6" y="325" width="2.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="907.64" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (10 samples, 0.02%; +0.01%)</title><rect x="968.5" y="373" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="971.52" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (6 samples, 0.01%; -0.01%)</title><rect x="620.9" y="389" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="623.86" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (13 samples, 0.03%; +0.01%)</title><rect x="1137.3" y="421" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1140.31" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (45 samples, 0.09%; -0.00%)</title><rect x="648.3" y="469" width="1.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="651.31" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (6 samples, 0.01%; 0.00%)</title><rect x="563.7" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="566.72" y="303.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (6 samples, 0.01%; +0.01%)</title><rect x="498.5" y="261" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="501.50" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (27 samples, 0.05%; -0.02%)</title><rect x="151.9" y="229" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="154.94" y="239.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (48,241 samples, 97.74%; -0.02%)</title><rect x="24.3" y="517" width="1153.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="27.32" y="527.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (15 samples, 0.03%; -0.01%)</title><rect x="200.0" y="85" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="202.99" y="95.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (8 samples, 0.02%; -0.00%)</title><rect x="1145.9" y="261" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1148.89" y="271.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (5 samples, 0.01%; +0.00%)</title><rect x="1158.4" y="421" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1161.44" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (6 samples, 0.01%; +0.00%)</title><rect x="570.5" y="309" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="573.46" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (15 samples, 0.03%; 0.00%)</title><rect x="928.3" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="931.31" y="399.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (39 samples, 0.08%; +0.01%)</title><rect x="728.9" y="405" width="0.9" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="731.90" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (8 samples, 0.02%; +0.01%)</title><rect x="629.5" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="632.54" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (40 samples, 0.08%; 0.00%)</title><rect x="19.9" y="469" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.90" y="479.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (104 samples, 0.21%; -0.02%)</title><rect x="977.9" y="341" width="2.5" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="980.87" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (10 samples, 0.02%; -0.00%)</title><rect x="261.7" y="309" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="264.70" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (19 samples, 0.04%; +0.01%)</title><rect x="32.2" y="485" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="35.16" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (10 samples, 0.02%; +0.01%)</title><rect x="1028.8" y="197" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1031.77" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (7 samples, 0.01%; +0.01%)</title><rect x="533.6" y="325" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="536.64" y="335.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (60 samples, 0.12%; -0.01%)</title><rect x="1065.6" y="277" width="1.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1068.63" y="287.5" ></text>
</g>
<g >
<title>operator new (73 samples, 0.15%; +0.00%)</title><rect x="999.6" y="261" width="1.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1002.65" y="271.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (5 samples, 0.01%; 0.00%)</title><rect x="506.3" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="509.34" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (33 samples, 0.07%; +0.01%)</title><rect x="650.8" y="469" width="0.8" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="653.82" y="479.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (49 samples, 0.10%; +0.09%)</title><rect x="1044.8" y="261" width="1.2" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="1047.81" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (20 samples, 0.04%; +0.03%)</title><rect x="432.7" y="341" width="0.5" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="435.68" y="351.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (8 samples, 0.02%; +0.00%)</title><rect x="817.2" y="389" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="820.24" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; -0.01%)</title><rect x="1103.6" y="341" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1106.57" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; +0.00%)</title><rect x="1052.4" y="181" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1055.36" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (19 samples, 0.04%; -0.01%)</title><rect x="283.8" y="357" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="286.76" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (16 samples, 0.03%; -0.00%)</title><rect x="786.8" y="229" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="789.80" y="239.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (5 samples, 0.01%; 0.00%)</title><rect x="334.6" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="337.64" y="191.5" ></text>
</g>
<g >
<title>operator new (93 samples, 0.19%; +0.00%)</title><rect x="1022.5" y="245" width="2.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1025.50" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (11 samples, 0.02%; -0.01%)</title><rect x="277.3" y="293" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="280.26" y="303.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (32 samples, 0.06%; 0.00%)</title><rect x="1145.8" y="405" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.80" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (6 samples, 0.01%; +0.01%)</title><rect x="847.4" y="341" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="850.41" y="351.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (15 samples, 0.03%; +0.03%)</title><rect x="317.6" y="181" width="0.4" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="320.59" y="191.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (129 samples, 0.26%; -0.01%)</title><rect x="381.7" y="149" width="3.0" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="384.67" y="159.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (10 samples, 0.02%; -0.01%)</title><rect x="484.9" y="325" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="487.87" y="335.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (26 samples, 0.05%; +0.03%)</title><rect x="550.2" y="389" width="0.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="553.21" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.01%; -0.01%)</title><rect x="1105.2" y="357" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1108.25" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (32 samples, 0.06%; +0.01%)</title><rect x="611.4" y="437" width="0.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="614.39" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (23 samples, 0.05%; +0.02%)</title><rect x="1107.9" y="357" width="0.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="1110.85" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (7 samples, 0.01%; -0.00%)</title><rect x="778.9" y="293" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="781.91" y="303.5" ></text>
</g>
<g >
<title>TLS init function for seastar::testing::local_random_engine (5 samples, 0.01%; +0.01%)</title><rect x="859.1" y="453" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="862.07" y="463.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (348 samples, 0.71%; -0.07%)</title><rect x="376.4" y="165" width="8.3" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="379.43" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (16 samples, 0.03%; +0.01%)</title><rect x="420.5" y="405" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="423.49" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (6 samples, 0.01%; -0.01%)</title><rect x="838.2" y="389" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="841.18" y="399.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (276 samples, 0.56%; 0.00%)</title><rect x="14.6" y="597" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.64" y="607.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (13 samples, 0.03%; -0.00%)</title><rect x="43.6" y="485" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="46.57" y="495.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (37 samples, 0.07%; +0.01%)</title><rect x="501.1" y="213" width="0.9" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="504.08" y="223.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (394 samples, 0.80%; -0.01%)</title><rect x="1179.4" y="629" width="9.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1182.41" y="639.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (19 samples, 0.04%; -0.01%)</title><rect x="933.4" y="325" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="936.45" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (18 samples, 0.04%; 0.00%)</title><rect x="20.2" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.21" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (15 samples, 0.03%; -0.00%)</title><rect x="651.8" y="437" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="654.82" y="447.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (17 samples, 0.03%; +0.01%)</title><rect x="556.2" y="341" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="559.21" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (5 samples, 0.01%; +0.00%)</title><rect x="833.6" y="389" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="836.59" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (349 samples, 0.71%; -0.01%)</title><rect x="793.2" y="197" width="8.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="796.21" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; -0.00%)</title><rect x="1175.3" y="421" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1178.34" y="431.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (5 samples, 0.01%; -0.00%)</title><rect x="611.3" y="437" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="614.27" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (176 samples, 0.36%; +0.01%)</title><rect x="724.6" y="357" width="4.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="727.59" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (101 samples, 0.20%; +0.01%)</title><rect x="379.3" y="149" width="2.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="382.25" y="159.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (11 samples, 0.02%; +0.01%)</title><rect x="1130.3" y="405" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1133.33" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1,224 samples, 2.48%; +0.01%)</title><rect x="554.2" y="405" width="29.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="557.18" y="415.5" >fl..</text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (8 samples, 0.02%; +0.01%)</title><rect x="1141.4" y="421" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1144.44" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::restriction::restriction (5 samples, 0.01%; 0.00%)</title><rect x="20.3" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.28" y="351.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (8 samples, 0.02%; +0.01%)</title><rect x="63.7" y="405" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="66.72" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (32 samples, 0.06%; +0.02%)</title><rect x="534.4" y="341" width="0.8" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="537.41" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (1,979 samples, 4.01%; +0.00%)</title><rect x="1006.0" y="293" width="47.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1008.96" y="303.5" >serv..</text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (40 samples, 0.08%; -0.00%)</title><rect x="788.9" y="149" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="791.88" y="159.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (5 samples, 0.01%; 0.00%)</title><rect x="807.4" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="810.43" y="287.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (11 samples, 0.02%; -0.01%)</title><rect x="483.7" y="213" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="486.70" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (19 samples, 0.04%; +0.02%)</title><rect x="729.4" y="389" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="732.38" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (5 samples, 0.01%; -0.01%)</title><rect x="315.5" y="165" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="318.49" y="175.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (19 samples, 0.04%; -0.01%)</title><rect x="192.6" y="53" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="195.63" y="63.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1,540 samples, 3.12%; +0.01%)</title><rect x="171.7" y="165" width="36.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="174.69" y="175.5" >clu..</text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (6 samples, 0.01%; -0.00%)</title><rect x="43.0" y="485" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="45.99" y="495.5" ></text>
</g>
<g >
<title>compound_type&lt; (147 samples, 0.30%; -0.04%)</title><rect x="930.9" y="373" width="3.5" height="15.0" fill="rgb(156,156,255)" rx="2" ry="2" />
<text  x="933.87" y="383.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (20 samples, 0.04%; -0.00%)</title><rect x="1032.6" y="149" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1035.59" y="159.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (25 samples, 0.05%; -0.05%)</title><rect x="796.3" y="117" width="0.6" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="799.32" y="127.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (5,423 samples, 10.99%; +0.04%)</title><rect x="719.8" y="453" width="129.7" height="15.0" fill="rgb(255,156,156)" rx="2" ry="2" />
<text  x="722.81" y="463.5" >single_node_cql_..</text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.06%; 0.00%)</title><rect x="1145.8" y="469" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.80" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (71 samples, 0.14%; +0.01%)</title><rect x="278.5" y="261" width="1.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="281.46" y="271.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (15 samples, 0.03%; -0.01%)</title><rect x="233.5" y="213" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="236.49" y="223.5" ></text>
</g>
<g >
<title>[unknown] (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.28" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (11 samples, 0.02%; +0.00%)</title><rect x="638.6" y="485" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="641.55" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (5 samples, 0.01%; +0.01%)</title><rect x="1032.7" y="133" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1035.71" y="143.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (12 samples, 0.02%; -0.02%)</title><rect x="738.0" y="293" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="741.01" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (6 samples, 0.01%; +0.01%)</title><rect x="773.1" y="341" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="776.15" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (13 samples, 0.03%; 0.00%)</title><rect x="300.0" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="302.97" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (38 samples, 0.08%; +0.00%)</title><rect x="1047.8" y="261" width="0.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1050.82" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (8 samples, 0.02%; 0.00%)</title><rect x="819.3" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="822.34" y="351.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (70 samples, 0.14%; -0.01%)</title><rect x="749.1" y="389" width="1.7" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="752.12" y="399.5" ></text>
</g>
<g >
<title>dht::tri_compare (151 samples, 0.31%; +0.06%)</title><rect x="1089.0" y="229" width="3.6" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="1091.97" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (13 samples, 0.03%; +0.00%)</title><rect x="1052.2" y="197" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1055.22" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (11 samples, 0.02%; -0.01%)</title><rect x="1127.6" y="405" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1130.60" y="415.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (447 samples, 0.91%; +0.01%)</title><rect x="571.5" y="389" width="10.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="574.51" y="399.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (58 samples, 0.12%; -0.00%)</title><rect x="800.0" y="117" width="1.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="803.05" y="127.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (13 samples, 0.03%; 0.00%)</title><rect x="863.6" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.62" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (388 samples, 0.79%; +0.02%)</title><rect x="273.1" y="325" width="9.2" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="276.05" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (10 samples, 0.02%; 0.00%)</title><rect x="20.9" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.93" y="495.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (481 samples, 0.97%; +0.02%)</title><rect x="837.6" y="437" width="11.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="840.56" y="447.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (6 samples, 0.01%; 0.00%)</title><rect x="570.2" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="573.20" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.03%; -0.01%)</title><rect x="451.8" y="277" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="454.83" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::run (48,412 samples, 98.09%; 0.00%)</title><rect x="21.7" y="549" width="1157.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.71" y="559.5" >seastar::reactor::run</text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (43 samples, 0.09%; -0.02%)</title><rect x="940.0" y="405" width="1.0" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="942.98" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (30 samples, 0.06%; +0.01%)</title><rect x="766.6" y="341" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="769.55" y="351.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (11 samples, 0.02%; +0.01%)</title><rect x="248.7" y="229" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="251.74" y="239.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; -0.00%)</title><rect x="452.7" y="325" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="455.67" y="335.5" ></text>
</g>
<g >
<title>operator new (42 samples, 0.09%; -0.00%)</title><rect x="608.8" y="421" width="1.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="611.81" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (7 samples, 0.01%; 0.00%)</title><rect x="1146.2" y="133" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.15" y="143.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (22 samples, 0.04%; -0.00%)</title><rect x="30.9" y="485" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="33.90" y="495.5" ></text>
</g>
<g >
<title>operator new (23 samples, 0.05%; +0.00%)</title><rect x="622.8" y="389" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="625.77" y="399.5" ></text>
</g>
<g >
<title>__dynamic_cast (11 samples, 0.02%; -0.01%)</title><rect x="645.2" y="469" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="648.17" y="479.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (19 samples, 0.04%; +0.02%)</title><rect x="601.8" y="405" width="0.5" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="604.83" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (7 samples, 0.01%; +0.01%)</title><rect x="42.8" y="469" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="45.80" y="479.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (5 samples, 0.01%; +0.01%)</title><rect x="35.5" y="437" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="38.49" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (84 samples, 0.17%; +0.02%)</title><rect x="159.6" y="197" width="2.0" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="162.57" y="207.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (5 samples, 0.01%; +0.00%)</title><rect x="673.0" y="485" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="675.95" y="495.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (9 samples, 0.02%; -0.00%)</title><rect x="1145.9" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1148.87" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (231 samples, 0.47%; -0.00%)</title><rect x="226.4" y="213" width="5.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="229.43" y="223.5" ></text>
</g>
<g >
<title>sstables::noop_write_monitor::~noop_write_monitor (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.28" y="623.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (27 samples, 0.05%; +0.00%)</title><rect x="739.7" y="373" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="742.68" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (5 samples, 0.01%; +0.00%)</title><rect x="1144.6" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1147.55" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (23 samples, 0.05%; +0.04%)</title><rect x="1061.7" y="309" width="0.6" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="1064.74" y="319.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (7,040 samples, 14.26%; +0.01%)</title><rect x="116.8" y="373" width="168.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="119.77" y="383.5" >seastar::repeat&lt;mergi..</text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (11 samples, 0.02%; +0.01%)</title><rect x="703.3" y="421" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="706.27" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%; +0.01%)</title><rect x="635.0" y="453" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="637.99" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (17 samples, 0.03%; 0.00%)</title><rect x="580.2" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="583.17" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (6 samples, 0.01%; -0.02%)</title><rect x="962.5" y="389" width="0.2" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="965.54" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (100 samples, 0.20%; 0.00%)</title><rect x="1138.6" y="421" width="2.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.58" y="431.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (12 samples, 0.02%; 0.00%)</title><rect x="921.2" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="924.16" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; -0.00%)</title><rect x="774.8" y="293" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="777.78" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (45 samples, 0.09%; +0.02%)</title><rect x="883.3" y="405" width="1.0" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="886.27" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (28 samples, 0.06%; -0.00%)</title><rect x="955.8" y="373" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="958.75" y="383.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (15 samples, 0.03%; +0.00%)</title><rect x="1104.1" y="341" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1107.12" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="42.5" y="485" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="45.51" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (57 samples, 0.12%; +0.01%)</title><rect x="680.9" y="469" width="1.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="683.91" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (9 samples, 0.02%; -0.00%)</title><rect x="1177.2" y="453" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1180.16" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="502.0" y="229" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="504.97" y="239.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (686 samples, 1.39%; +0.01%)</title><rect x="1084.1" y="309" width="16.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1087.07" y="319.5" ></text>
</g>
<g >
<title>seastar::app_template::run (48,413 samples, 98.09%; 0.00%)</title><rect x="21.7" y="597" width="1157.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.71" y="607.5" >seastar::app_template::run</text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (36 samples, 0.07%; -0.00%)</title><rect x="1027.9" y="197" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1030.91" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (19 samples, 0.04%; 0.00%)</title><rect x="1052.1" y="229" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1055.08" y="239.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (5 samples, 0.01%; 0.00%)</title><rect x="17.1" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.05" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (5 samples, 0.01%; +0.00%)</title><rect x="682.4" y="485" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="685.37" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (21 samples, 0.04%; +0.00%)</title><rect x="140.5" y="229" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="143.51" y="239.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (16 samples, 0.03%; -0.04%)</title><rect x="245.1" y="197" width="0.4" height="15.0" fill="rgb(156,156,255)" rx="2" ry="2" />
<text  x="248.08" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (8 samples, 0.02%; +0.01%)</title><rect x="492.6" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="495.64" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (102 samples, 0.21%; +0.00%)</title><rect x="846.4" y="373" width="2.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="849.43" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (7 samples, 0.01%; -0.01%)</title><rect x="16.4" y="261" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="19.38" y="271.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (27 samples, 0.05%; +0.04%)</title><rect x="476.9" y="213" width="0.7" height="15.0" fill="rgb(255,158,158)" rx="2" ry="2" />
<text  x="479.94" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (7 samples, 0.01%; 0.00%)</title><rect x="1099.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1102.89" y="287.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (13 samples, 0.03%; +0.00%)</title><rect x="162.3" y="213" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="165.27" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (10 samples, 0.02%; +0.01%)</title><rect x="217.9" y="181" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="220.88" y="191.5" ></text>
</g>
<g >
<title>do_cql_test (268 samples, 0.54%; 0.00%)</title><rect x="14.8" y="549" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.83" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (113 samples, 0.23%; 0.00%)</title><rect x="448.2" y="277" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="451.22" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (24,478 samples, 49.59%; +0.00%)</title><rect x="44.5" y="501" width="585.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="47.55" y="511.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (25 samples, 0.05%; -0.02%)</title><rect x="580.0" y="357" width="0.6" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="582.98" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (2,082 samples, 4.22%; -0.01%)</title><rect x="1055.2" y="357" width="49.8" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1058.21" y="367.5" >servi..</text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (7 samples, 0.01%; -0.00%)</title><rect x="899.3" y="245" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="902.31" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="408.5" y="277" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="411.47" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (6 samples, 0.01%; +0.01%)</title><rect x="871.5" y="453" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="874.46" y="463.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (7 samples, 0.01%; +0.01%)</title><rect x="507.1" y="229" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="510.06" y="239.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (3,521 samples, 7.13%; +0.00%)</title><rect x="306.0" y="229" width="84.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="309.05" y="239.5" >compact_m..</text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (27 samples, 0.05%; +0.00%)</title><rect x="605.5" y="437" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="608.49" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.01%)</title><rect x="260.4" y="261" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="263.43" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (35 samples, 0.07%; -0.00%)</title><rect x="690.6" y="453" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="693.65" y="463.5" ></text>
</g>
<g >
<title>operator new (87 samples, 0.18%; -0.00%)</title><rect x="1049.5" y="245" width="2.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1052.52" y="255.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (11,836 samples, 23.98%; -0.01%)</title><rect x="864.0" y="501" width="283.0" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="867.02" y="511.5" >seastar::lambda_task&lt;seastar::executi..</text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (53 samples, 0.11%; -0.01%)</title><rect x="75.5" y="405" width="1.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="78.48" y="415.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (6 samples, 0.01%; -0.00%)</title><rect x="16.4" y="245" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="19.41" y="255.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (73 samples, 0.15%; +0.02%)</title><rect x="802.7" y="261" width="1.8" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="805.72" y="271.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (55 samples, 0.11%; +0.01%)</title><rect x="357.4" y="149" width="1.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="360.38" y="159.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (92 samples, 0.19%; +0.01%)</title><rect x="133.1" y="261" width="2.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="136.15" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (36 samples, 0.07%; +0.01%)</title><rect x="229.9" y="149" width="0.9" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="232.95" y="159.5" ></text>
</g>
<g >
<title>operator delete (32 samples, 0.06%; +0.01%)</title><rect x="582.5" y="389" width="0.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="585.49" y="399.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (6 samples, 0.01%; +0.01%)</title><rect x="583.4" y="405" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="586.44" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (392 samples, 0.79%; -0.02%)</title><rect x="697.9" y="469" width="9.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="700.87" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (9 samples, 0.02%; 0.00%)</title><rect x="1177.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1180.16" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (59 samples, 0.12%; -0.04%)</title><rect x="200.8" y="69" width="1.4" height="15.0" fill="rgb(158,158,255)" rx="2" ry="2" />
<text  x="203.76" y="79.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (64 samples, 0.13%; -0.02%)</title><rect x="383.2" y="133" width="1.5" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="386.22" y="143.5" ></text>
</g>
<g >
<title>operator delete (17 samples, 0.03%; +0.00%)</title><rect x="667.9" y="469" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="670.89" y="479.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (277 samples, 0.56%; +0.02%)</title><rect x="629.8" y="501" width="6.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="632.82" y="511.5" ></text>
</g>
<g >
<title>database::find_keyspace (346 samples, 0.70%; +0.00%)</title><rect x="1061.1" y="341" width="8.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1064.09" y="351.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (2,423 samples, 4.91%; -0.03%)</title><rect x="996.8" y="325" width="57.9" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="999.80" y="335.5" >servic..</text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (323 samples, 0.65%; +0.02%)</title><rect x="254.0" y="309" width="7.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="256.98" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (12 samples, 0.02%; -0.01%)</title><rect x="908.3" y="357" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="911.32" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (5 samples, 0.01%; -0.00%)</title><rect x="37.5" y="389" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="40.52" y="399.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (709 samples, 1.44%; +0.00%)</title><rect x="554.6" y="389" width="16.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="557.56" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (3,667 samples, 7.43%; -0.01%)</title><rect x="149.2" y="261" width="87.7" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="152.19" y="271.5" >partition_..</text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (46 samples, 0.09%; +0.01%)</title><rect x="75.6" y="373" width="1.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="78.65" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (25 samples, 0.05%; +0.01%)</title><rect x="683.1" y="485" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="686.07" y="495.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;dht::token const&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, db::read_repair_decision&amp;&gt; (17 samples, 0.03%; +0.02%)</title><rect x="1071.1" y="341" width="0.4" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="1074.06" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (12 samples, 0.02%; -0.00%)</title><rect x="478.8" y="181" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="481.80" y="191.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (6 samples, 0.01%; 0.00%)</title><rect x="533.3" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="536.29" y="303.5" ></text>
</g>
<g >
<title>query_result_builder::query_result_builder (8 samples, 0.02%; +0.01%)</title><rect x="60.8" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="63.78" y="463.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (18 samples, 0.04%; -0.02%)</title><rect x="239.2" y="213" width="0.5" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="242.25" y="223.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (62 samples, 0.13%; -0.01%)</title><rect x="598.4" y="405" width="1.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="601.41" y="415.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (21 samples, 0.04%; +0.02%)</title><rect x="712.7" y="485" width="0.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="715.66" y="495.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (162 samples, 0.33%; -0.01%)</title><rect x="991.7" y="309" width="3.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="994.69" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (24 samples, 0.05%; +0.01%)</title><rect x="830.0" y="421" width="0.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="832.98" y="431.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (56 samples, 0.11%; +0.01%)</title><rect x="1119.4" y="373" width="1.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1122.38" y="383.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.01%; -0.00%)</title><rect x="932.9" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="935.90" y="351.5" ></text>
</g>
<g >
<title>std::type_info::operator== (14 samples, 0.03%; +0.01%)</title><rect x="1078.9" y="277" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1081.93" y="287.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (11 samples, 0.02%; +0.01%)</title><rect x="814.6" y="309" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="817.61" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (9 samples, 0.02%; +0.01%)</title><rect x="987.7" y="277" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="990.67" y="287.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::find_bucket_index (6 samples, 0.01%; +0.00%)</title><rect x="675.7" y="453" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="678.73" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (57 samples, 0.12%; -0.02%)</title><rect x="485.5" y="325" width="1.4" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="488.50" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.00%)</title><rect x="779.2" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="782.25" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (33 samples, 0.07%; +0.03%)</title><rect x="896.3" y="261" width="0.8" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="899.34" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.06%; +0.00%)</title><rect x="1145.8" y="373" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1148.80" y="383.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (26 samples, 0.05%; +0.00%)</title><rect x="1092.6" y="277" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1095.65" y="287.5" ></text>
</g>
<g >
<title>range_tombstone_stream::empty (6 samples, 0.01%; -0.00%)</title><rect x="234.0" y="229" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="236.99" y="239.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (13 samples, 0.03%; 0.00%)</title><rect x="1102.4" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1105.43" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (35 samples, 0.07%; -0.00%)</title><rect x="764.7" y="341" width="0.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="767.66" y="351.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (9 samples, 0.02%; +0.02%)</title><rect x="1103.3" y="325" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="1106.34" y="335.5" ></text>
</g>
<g >
<title>__libc_start_main (48,413 samples, 98.09%; 0.00%)</title><rect x="21.7" y="629" width="1157.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.71" y="639.5" >__libc_start_main</text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (217 samples, 0.44%; -0.01%)</title><rect x="275.4" y="309" width="5.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="278.40" y="319.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1,948 samples, 3.95%; +0.02%)</title><rect x="171.1" y="181" width="46.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="174.14" y="191.5" >muta..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (5 samples, 0.01%; 0.00%)</title><rect x="684.7" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.67" y="335.5" ></text>
</g>
<g >
<title>query::result::builder::builder (171 samples, 0.35%; +0.02%)</title><rect x="596.2" y="421" width="4.1" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="599.16" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (34 samples, 0.07%; +0.00%)</title><rect x="947.7" y="373" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="950.72" y="383.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (25 samples, 0.05%; -0.01%)</title><rect x="1148.6" y="501" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1151.57" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (14 samples, 0.03%; +0.01%)</title><rect x="1103.8" y="341" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1106.79" y="351.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (16 samples, 0.03%; +0.01%)</title><rect x="61.1" y="453" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="64.11" y="463.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (11 samples, 0.02%; 0.00%)</title><rect x="221.0" y="133" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="224.03" y="143.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (6 samples, 0.01%; 0.00%)</title><rect x="1153.9" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1156.90" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (11,422 samples, 23.14%; +0.04%)</title><rect x="871.6" y="453" width="273.1" height="15.0" fill="rgb(255,158,158)" rx="2" ry="2" />
<text  x="874.60" y="463.5" >seastar::noncopyable_function&lt;seasta..</text>
</g>
<g >
<title>utils::tuple_hash::operator (65 samples, 0.13%; +0.01%)</title><rect x="759.0" y="341" width="1.6" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="762.00" y="351.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (17 samples, 0.03%; -0.00%)</title><rect x="923.5" y="357" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="926.46" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.04%; -0.00%)</title><rect x="157.7" y="165" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="160.65" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (7 samples, 0.01%; -0.01%)</title><rect x="747.3" y="405" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="750.28" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%; +0.00%)</title><rect x="33.9" y="453" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="36.93" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (7 samples, 0.01%; -0.01%)</title><rect x="710.2" y="501" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="713.23" y="511.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (5 samples, 0.01%; 0.00%)</title><rect x="1177.2" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1180.16" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (49 samples, 0.10%; +0.00%)</title><rect x="841.9" y="405" width="1.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="844.86" y="415.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (107 samples, 0.22%; 0.00%)</title><rect x="763.4" y="389" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="766.42" y="399.5" ></text>
</g>
<g >
<title>compound_type&lt; (68 samples, 0.14%; -0.00%)</title><rect x="542.5" y="357" width="1.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="545.51" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (38 samples, 0.08%; -0.04%)</title><rect x="1168.6" y="469" width="0.9" height="15.0" fill="rgb(156,156,255)" rx="2" ry="2" />
<text  x="1171.63" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="719.6" y="453" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="722.64" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.01%; 0.00%)</title><rect x="740.2" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="743.21" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (14 samples, 0.03%; +0.00%)</title><rect x="768.6" y="357" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="771.56" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (10 samples, 0.02%; +0.00%)</title><rect x="612.2" y="437" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="615.16" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (9 samples, 0.02%; 0.00%)</title><rect x="863.7" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.69" y="447.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (15 samples, 0.03%; +0.01%)</title><rect x="364.7" y="197" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="367.69" y="207.5" ></text>
</g>
<g >
<title>operator delete (37 samples, 0.07%; +0.03%)</title><rect x="1129.3" y="421" width="0.8" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1132.25" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.00%)</title><rect x="157.2" y="197" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="160.15" y="207.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (116 samples, 0.24%; +0.00%)</title><rect x="798.7" y="149" width="2.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="801.66" y="159.5" ></text>
</g>
<g >
<title>database::find_uuid (213 samples, 0.43%; 0.00%)</title><rect x="755.9" y="389" width="5.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="758.91" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (17 samples, 0.03%; +0.00%)</title><rect x="1035.4" y="213" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1038.37" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (76 samples, 0.15%; -0.00%)</title><rect x="736.7" y="373" width="1.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="739.71" y="383.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,527 samples, 9.17%; -0.01%)</title><rect x="145.7" y="293" width="108.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="148.70" y="303.5" >seastar::do_u..</text>
</g>
<g >
<title>mutation_reader_merger::close (5 samples, 0.01%; -0.00%)</title><rect x="1177.2" y="421" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1180.16" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.01%; +0.01%)</title><rect x="539.0" y="405" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="541.98" y="415.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (6 samples, 0.01%; -0.01%)</title><rect x="510.3" y="277" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="513.34" y="287.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (13 samples, 0.03%; +0.01%)</title><rect x="1102.7" y="309" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1105.74" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="235.9" y="245" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="238.85" y="255.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (7 samples, 0.01%; 0.00%)</title><rect x="75.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.12" y="415.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (47 samples, 0.10%; 0.00%)</title><rect x="438.4" y="277" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="441.40" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (53 samples, 0.11%; +0.01%)</title><rect x="667.2" y="485" width="1.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="670.17" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (21 samples, 0.04%; 0.00%)</title><rect x="223.4" y="149" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="226.37" y="159.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (23 samples, 0.05%; +0.01%)</title><rect x="858.4" y="437" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="861.38" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (6 samples, 0.01%; +0.00%)</title><rect x="569.5" y="293" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="572.46" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (36 samples, 0.07%; +0.01%)</title><rect x="581.0" y="373" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="584.01" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (19 samples, 0.04%; +0.00%)</title><rect x="1154.5" y="469" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1157.47" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (5 samples, 0.01%; +0.00%)</title><rect x="253.4" y="229" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="256.38" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.02%; -0.04%)</title><rect x="416.1" y="325" width="0.3" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="419.09" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (109 samples, 0.22%; -0.00%)</title><rect x="832.7" y="437" width="2.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="835.68" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; +0.01%)</title><rect x="403.6" y="181" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="406.64" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (9 samples, 0.02%; 0.00%)</title><rect x="752.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="755.16" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; +0.00%)</title><rect x="699.1" y="453" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="702.08" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (117 samples, 0.24%; -0.02%)</title><rect x="636.4" y="501" width="2.8" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="639.45" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (33 samples, 0.07%; +0.01%)</title><rect x="507.2" y="229" width="0.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="510.23" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (23 samples, 0.05%; -0.00%)</title><rect x="638.0" y="485" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="640.98" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (7 samples, 0.01%; +0.00%)</title><rect x="836.1" y="437" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="839.05" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (17 samples, 0.03%; -0.00%)</title><rect x="684.2" y="325" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="687.24" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (11 samples, 0.02%; +0.01%)</title><rect x="1107.4" y="357" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1110.45" y="367.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (40 samples, 0.08%; -0.00%)</title><rect x="36.8" y="421" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="39.75" y="431.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::response (8 samples, 0.02%; 0.00%)</title><rect x="708.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.41" y="479.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (13 samples, 0.03%; +0.01%)</title><rect x="603.3" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="606.29" y="431.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (33 samples, 0.07%; 0.00%)</title><rect x="1144.9" y="325" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.93" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; -0.00%)</title><rect x="544.0" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="546.97" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5,198 samples, 10.53%; -0.00%)</title><rect x="290.2" y="357" width="124.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="293.22" y="367.5" >flat_mutation_r..</text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (8 samples, 0.02%; 0.00%)</title><rect x="615.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="618.91" y="415.5" ></text>
</g>
<g >
<title>query_state::query_state (250 samples, 0.51%; -0.01%)</title><rect x="594.4" y="437" width="5.9" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="597.37" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; +0.00%)</title><rect x="819.2" y="341" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="822.20" y="351.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (9 samples, 0.02%; -0.00%)</title><rect x="675.7" y="469" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="678.66" y="479.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (482 samples, 0.98%; -0.01%)</title><rect x="916.3" y="389" width="11.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="919.31" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (744 samples, 1.51%; 0.00%)</title><rect x="886.7" y="341" width="17.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.66" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (9 samples, 0.02%; -0.01%)</title><rect x="553.2" y="421" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="556.20" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.00%)</title><rect x="569.7" y="293" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="572.72" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (183 samples, 0.37%; -0.00%)</title><rect x="1172.1" y="469" width="4.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1175.14" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="929.3" y="357" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="932.31" y="367.5" ></text>
</g>
<g >
<title>operator delete (48 samples, 0.10%; +0.04%)</title><rect x="58.6" y="453" width="1.1" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="61.58" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume (5 samples, 0.01%; +0.00%)</title><rect x="277.1" y="293" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="280.14" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; +0.00%)</title><rect x="944.7" y="309" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="947.71" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (10 samples, 0.02%; -0.01%)</title><rect x="760.7" y="373" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="763.72" y="383.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (38 samples, 0.08%; -0.01%)</title><rect x="929.5" y="357" width="0.9" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="932.53" y="367.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (12,927 samples, 26.19%; +0.00%)</title><rect x="110.9" y="421" width="309.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="113.94" y="431.5" >query::consume_page&lt;</text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (12 samples, 0.02%; 0.00%)</title><rect x="572.2" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="575.18" y="351.5" ></text>
</g>
<g >
<title>__dynamic_cast (17 samples, 0.03%; -0.01%)</title><rect x="878.7" y="421" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="881.73" y="431.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (13 samples, 0.03%; -0.01%)</title><rect x="35.2" y="437" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="38.17" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (9 samples, 0.02%; +0.01%)</title><rect x="696.7" y="485" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="699.67" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (7 samples, 0.01%; +0.00%)</title><rect x="452.5" y="325" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="455.46" y="335.5" ></text>
</g>
<g >
<title>table::make_reader (4,601 samples, 9.32%; -0.01%)</title><rect x="427.2" y="357" width="110.0" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="430.18" y="367.5" >table::make_r..</text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,451 samples, 4.97%; +0.01%)</title><rect x="166.8" y="213" width="58.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="169.79" y="223.5" >logall..</text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (6 samples, 0.01%; +0.01%)</title><rect x="214.5" y="101" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="217.48" y="111.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (12 samples, 0.02%; +0.02%)</title><rect x="282.9" y="325" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="285.93" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (69 samples, 0.14%; +0.01%)</title><rect x="496.9" y="261" width="1.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="499.85" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; 0.00%)</title><rect x="577.1" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="580.08" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (5 samples, 0.01%; 0.00%)</title><rect x="17.7" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.67" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (15 samples, 0.03%; -0.01%)</title><rect x="1162.8" y="357" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1165.82" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; -0.01%)</title><rect x="752.5" y="405" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="755.49" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (126 samples, 0.26%; +0.02%)</title><rect x="633.4" y="485" width="3.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="636.43" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (47 samples, 0.10%; -0.01%)</title><rect x="1163.4" y="421" width="1.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1166.44" y="431.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (40 samples, 0.08%; -0.01%)</title><rect x="722.3" y="405" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="725.27" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (93 samples, 0.19%; -0.01%)</title><rect x="975.5" y="341" width="2.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="978.45" y="351.5" ></text>
</g>
<g >
<title>operator new (95 samples, 0.19%; -0.00%)</title><rect x="1131.4" y="405" width="2.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1134.36" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (17 samples, 0.03%; -0.01%)</title><rect x="1022.0" y="213" width="0.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1025.03" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (6 samples, 0.01%; 0.00%)</title><rect x="664.6" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="667.56" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.01%; 0.00%)</title><rect x="15.2" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.24" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (12 samples, 0.02%; +0.00%)</title><rect x="699.5" y="453" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="702.47" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (7 samples, 0.01%; -0.01%)</title><rect x="1034.6" y="197" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1037.55" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (92 samples, 0.19%; +0.01%)</title><rect x="804.5" y="261" width="2.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="807.47" y="271.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (8 samples, 0.02%; -0.00%)</title><rect x="333.3" y="181" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="336.35" y="191.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (104 samples, 0.21%; +0.00%)</title><rect x="715.0" y="453" width="2.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="717.98" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; -0.01%)</title><rect x="835.1" y="389" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="838.07" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (23 samples, 0.05%; +0.03%)</title><rect x="409.3" y="261" width="0.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="412.25" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (11 samples, 0.02%; +0.00%)</title><rect x="1141.2" y="421" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1144.16" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (504 samples, 1.02%; +0.00%)</title><rect x="237.2" y="261" width="12.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="240.19" y="271.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (15 samples, 0.03%; +0.02%)</title><rect x="599.9" y="405" width="0.4" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="602.89" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::validate (7 samples, 0.01%; 0.00%)</title><rect x="829.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="832.31" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (15 samples, 0.03%; +0.00%)</title><rect x="16.0" y="261" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="19.02" y="271.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (7 samples, 0.01%; -0.01%)</title><rect x="450.9" y="277" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="453.93" y="287.5" ></text>
</g>
<g >
<title>database::query (19 samples, 0.04%; 0.00%)</title><rect x="1008.6" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1011.57" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (644 samples, 1.30%; +0.00%)</title><rect x="372.4" y="181" width="15.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="375.44" y="191.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (6 samples, 0.01%; 0.00%)</title><rect x="20.3" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.26" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.00%)</title><rect x="566.7" y="261" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="569.71" y="271.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (8 samples, 0.02%; 0.00%)</title><rect x="388.4" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="391.41" y="223.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (100 samples, 0.20%; -0.01%)</title><rect x="799.0" y="133" width="2.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="802.04" y="143.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (6 samples, 0.01%; -0.01%)</title><rect x="367.8" y="165" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="370.80" y="175.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (24 samples, 0.05%; +0.01%)</title><rect x="531.3" y="245" width="0.6" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="534.33" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (29 samples, 0.06%; 0.00%)</title><rect x="684.2" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.19" y="447.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (71 samples, 0.14%; -0.02%)</title><rect x="788.5" y="181" width="1.7" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="791.50" y="191.5" ></text>
</g>
<g >
<title>mutation_querier::consume (1,722 samples, 3.49%; -0.05%)</title><rect x="322.5" y="197" width="41.1" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="325.47" y="207.5" >mut..</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (8 samples, 0.02%; +0.01%)</title><rect x="939.6" y="405" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="942.64" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (55 samples, 0.11%; -0.01%)</title><rect x="903.1" y="325" width="1.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="906.13" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (18 samples, 0.04%; +0.00%)</title><rect x="789.4" y="133" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="792.41" y="143.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (25 samples, 0.05%; 0.00%)</title><rect x="1145.0" y="309" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.96" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (7 samples, 0.01%; -0.01%)</title><rect x="582.0" y="373" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="585.03" y="383.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (29 samples, 0.06%; 0.00%)</title><rect x="684.2" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.19" y="431.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (83 samples, 0.17%; +0.00%)</title><rect x="601.1" y="437" width="2.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="604.09" y="447.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (7 samples, 0.01%; -0.02%)</title><rect x="794.5" y="117" width="0.2" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="797.50" y="127.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (18 samples, 0.04%; -0.01%)</title><rect x="77.8" y="453" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="80.78" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (15 samples, 0.03%; -0.01%)</title><rect x="236.5" y="245" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="239.50" y="255.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (4,784 samples, 9.69%; -0.04%)</title><rect x="422.9" y="405" width="114.3" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="425.86" y="415.5" >mutation_sourc..</text>
</g>
<g >
<title>utils::tuple_hash::operator (37 samples, 0.07%; -0.01%)</title><rect x="824.5" y="309" width="0.9" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="827.53" y="319.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (8 samples, 0.02%; 0.00%)</title><rect x="21.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.28" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (10 samples, 0.02%; -0.00%)</title><rect x="269.5" y="341" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="272.52" y="351.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;long, std::allocator&lt;long&gt; &gt;::push_back_impl&lt;long const&amp;&gt; (5 samples, 0.01%; +0.01%)</title><rect x="676.8" y="437" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="679.83" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (9 samples, 0.02%; 0.00%)</title><rect x="682.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.06" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (94 samples, 0.19%; +0.01%)</title><rect x="826.0" y="325" width="2.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="828.96" y="335.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (34 samples, 0.07%; 0.00%)</title><rect x="1144.9" y="485" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.93" y="495.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (5 samples, 0.01%; -0.00%)</title><rect x="21.0" y="421" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="24.00" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (88 samples, 0.18%; -0.00%)</title><rect x="35.6" y="437" width="2.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="38.60" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (15 samples, 0.03%; +0.00%)</title><rect x="591.7" y="389" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="594.74" y="399.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; 0.00%)</title><rect x="550.9" y="405" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="553.93" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (6 samples, 0.01%; 0.00%)</title><rect x="962.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="965.83" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (6 samples, 0.01%; +0.00%)</title><rect x="839.3" y="357" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="842.28" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.00%)</title><rect x="134.6" y="229" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="137.61" y="239.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::optional&lt;auth::resource&gt;&amp;&amp;, service::client_state::check_has_permission (7 samples, 0.01%; -0.01%)</title><rect x="809.9" y="325" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="812.94" y="335.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (6 samples, 0.01%; +0.01%)</title><rect x="148.2" y="245" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="151.19" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;managed_bytes&gt;::dispose (24 samples, 0.05%; +0.01%)</title><rect x="913.4" y="373" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="916.37" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (149 samples, 0.30%; -0.01%)</title><rect x="838.1" y="405" width="3.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="841.06" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (83 samples, 0.17%; +0.03%)</title><rect x="1041.4" y="245" width="2.0" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1044.44" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.01%)</title><rect x="38.1" y="437" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="41.14" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (5 samples, 0.01%; -0.01%)</title><rect x="330.2" y="165" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="333.19" y="175.5" ></text>
</g>
<g >
<title>query_result_builder::consume (8 samples, 0.02%; 0.00%)</title><rect x="684.4" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.38" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (5 samples, 0.01%; 0.00%)</title><rect x="16.9" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.86" y="351.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (23 samples, 0.05%; +0.00%)</title><rect x="623.6" y="405" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="626.61" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (11 samples, 0.02%; +0.01%)</title><rect x="22.8" y="517" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="25.84" y="527.5" ></text>
</g>
<g >
<title>operator delete (55 samples, 0.11%; -0.00%)</title><rect x="564.0" y="293" width="1.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="566.96" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; -0.01%)</title><rect x="939.0" y="405" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="941.97" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (35 samples, 0.07%; +0.01%)</title><rect x="612.5" y="437" width="0.8" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="615.49" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="300.4" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="303.43" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (14 samples, 0.03%; +0.01%)</title><rect x="23.2" y="517" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="26.24" y="527.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.06%; -0.00%)</title><rect x="492.8" y="293" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="495.83" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (29 samples, 0.06%; -0.00%)</title><rect x="670.6" y="437" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="673.59" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (528 samples, 1.07%; +0.01%)</title><rect x="270.7" y="357" width="12.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="273.69" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (17 samples, 0.03%; +0.03%)</title><rect x="658.5" y="485" width="0.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="661.54" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (21 samples, 0.04%; +0.02%)</title><rect x="1155.0" y="453" width="0.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="1157.98" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (14 samples, 0.03%; +0.01%)</title><rect x="692.4" y="453" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="695.44" y="463.5" ></text>
</g>
<g >
<title>operator new (72 samples, 0.15%; -0.00%)</title><rect x="989.7" y="325" width="1.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="992.70" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (9 samples, 0.02%; +0.01%)</title><rect x="231.4" y="181" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="234.36" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (15 samples, 0.03%; +0.02%)</title><rect x="416.5" y="357" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="419.45" y="367.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (35 samples, 0.07%; +0.07%)</title><rect x="309.0" y="197" width="0.8" height="15.0" fill="rgb(255,126,126)" rx="2" ry="2" />
<text  x="312.01" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; -0.00%)</title><rect x="1043.7" y="261" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1046.66" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (24 samples, 0.05%; -0.07%)</title><rect x="1120.8" y="373" width="0.6" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="1123.81" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; +0.02%)</title><rect x="935.4" y="405" width="0.2" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="938.36" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (15 samples, 0.03%; -0.02%)</title><rect x="269.2" y="325" width="0.3" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="272.16" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%; 0.00%)</title><rect x="416.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="419.81" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%; -0.01%)</title><rect x="150.8" y="245" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="153.81" y="255.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (9 samples, 0.02%; 0.00%)</title><rect x="1146.1" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.11" y="191.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (24 samples, 0.05%; -0.00%)</title><rect x="847.3" y="357" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="850.31" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (6 samples, 0.01%; 0.00%)</title><rect x="827.5" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="830.54" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (16 samples, 0.03%; -0.00%)</title><rect x="860.7" y="485" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="863.75" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (1,261 samples, 2.55%; -0.03%)</title><rect x="884.3" y="405" width="30.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="887.34" y="415.5" >cq..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (6 samples, 0.01%; 0.00%)</title><rect x="794.9" y="149" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="797.86" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (88 samples, 0.18%; +0.01%)</title><rect x="680.3" y="485" width="2.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="683.27" y="495.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.03%; +0.00%)</title><rect x="416.0" y="341" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="419.04" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (118 samples, 0.24%; -0.00%)</title><rect x="677.3" y="485" width="2.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="680.28" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (79 samples, 0.16%; -0.00%)</title><rect x="17.2" y="357" width="1.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="20.22" y="367.5" ></text>
</g>
<g >
<title>free (43 samples, 0.09%; +0.02%)</title><rect x="402.8" y="197" width="1.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="405.85" y="207.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (345 samples, 0.70%; -0.01%)</title><rect x="793.3" y="181" width="8.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="796.30" y="191.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (9 samples, 0.02%; 0.00%)</title><rect x="17.3" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.27" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (14 samples, 0.03%; +0.02%)</title><rect x="771.6" y="357" width="0.3" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="774.57" y="367.5" ></text>
</g>
<g >
<title>seastar::app_template::run (48,413 samples, 98.09%; 0.00%)</title><rect x="21.7" y="581" width="1157.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.71" y="591.5" >seastar::app_template::run</text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (5 samples, 0.01%; 0.00%)</title><rect x="21.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.33" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (50 samples, 0.10%; +0.00%)</title><rect x="587.3" y="421" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="590.32" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (18 samples, 0.04%; 0.00%)</title><rect x="1178.6" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1181.60" y="511.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (418 samples, 0.85%; +0.00%)</title><rect x="736.1" y="389" width="10.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="739.07" y="399.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (5 samples, 0.01%; 0.00%)</title><rect x="17.1" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.05" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; -0.00%)</title><rect x="908.5" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="911.49" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (725 samples, 1.47%; +0.01%)</title><rect x="493.7" y="293" width="17.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="496.67" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (9 samples, 0.02%; 0.00%)</title><rect x="577.7" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="580.73" y="351.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (64 samples, 0.13%; +0.00%)</title><rect x="859.2" y="453" width="1.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="862.19" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (12 samples, 0.02%; -0.00%)</title><rect x="697.3" y="469" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="700.29" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (8 samples, 0.02%; -0.00%)</title><rect x="262.4" y="309" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="265.37" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.00%)</title><rect x="663.6" y="469" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="666.63" y="479.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (8 samples, 0.02%; +0.00%)</title><rect x="921.0" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="923.97" y="335.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (5 samples, 0.01%; -0.01%)</title><rect x="527.0" y="277" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="530.02" y="287.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (5 samples, 0.01%; 0.00%)</title><rect x="837.4" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="840.39" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (473 samples, 0.96%; +0.02%)</title><rect x="890.6" y="293" width="11.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="893.61" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (43 samples, 0.09%; -0.02%)</title><rect x="862.4" y="501" width="1.1" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="865.44" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (113 samples, 0.23%; -0.00%)</title><rect x="1121.7" y="389" width="2.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1124.74" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (11 samples, 0.02%; -0.00%)</title><rect x="633.1" y="485" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="636.12" y="495.5" ></text>
</g>
<g >
<title>query::querier_base::close (1,247 samples, 2.53%; -0.01%)</title><rect x="553.9" y="437" width="29.8" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="556.87" y="447.5" >qu..</text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (10 samples, 0.02%; +0.00%)</title><rect x="1128.8" y="421" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1131.77" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (8 samples, 0.02%; +0.00%)</title><rect x="445.8" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="448.78" y="303.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (36 samples, 0.07%; +0.00%)</title><rect x="18.1" y="309" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="21.10" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (8 samples, 0.02%; +0.00%)</title><rect x="220.5" y="149" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="223.53" y="159.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (10 samples, 0.02%; -0.00%)</title><rect x="563.5" y="293" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="566.48" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (6,380 samples, 12.93%; +0.04%)</title><rect x="959.1" y="405" width="152.5" height="15.0" fill="rgb(255,158,158)" rx="2" ry="2" />
<text  x="962.08" y="415.5" >service::storage_pr..</text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (65 samples, 0.13%; -0.00%)</title><rect x="694.1" y="485" width="1.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="697.09" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (5 samples, 0.01%; +0.00%)</title><rect x="131.1" y="277" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="134.14" y="287.5" ></text>
</g>
<g >
<title>compound_type&lt; (7 samples, 0.01%; +0.00%)</title><rect x="543.8" y="341" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="546.81" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (12 samples, 0.02%; -0.01%)</title><rect x="746.1" y="405" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="749.13" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (12 samples, 0.02%; +0.01%)</title><rect x="283.5" y="357" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="286.48" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (8 samples, 0.02%; +0.01%)</title><rect x="489.5" y="309" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="492.46" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (41 samples, 0.08%; -0.02%)</title><rect x="734.7" y="373" width="1.0" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="737.68" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (87 samples, 0.18%; +0.01%)</title><rect x="1049.5" y="229" width="2.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1052.52" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (7 samples, 0.01%; +0.00%)</title><rect x="418.8" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="421.79" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (59 samples, 0.12%; +0.01%)</title><rect x="386.3" y="165" width="1.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="389.28" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (5 samples, 0.01%; -0.00%)</title><rect x="811.7" y="325" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="814.69" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="650.1" y="469" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="653.15" y="479.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (6 samples, 0.01%; -0.01%)</title><rect x="14.5" y="613" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="17.49" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (16 samples, 0.03%; +0.02%)</title><rect x="653.2" y="437" width="0.4" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="656.23" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (62 samples, 0.13%; -0.02%)</title><rect x="887.2" y="293" width="1.5" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="890.24" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (5 samples, 0.01%; 0.00%)</title><rect x="811.8" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="814.81" y="335.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (32 samples, 0.06%; +0.01%)</title><rect x="590.6" y="389" width="0.8" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="593.64" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (32 samples, 0.06%; +0.02%)</title><rect x="671.8" y="453" width="0.8" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="674.81" y="463.5" ></text>
</g>
<g >
<title>schema::column_at (13 samples, 0.03%; 0.00%)</title><rect x="214.6" y="117" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="217.65" y="127.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (192 samples, 0.39%; +0.00%)</title><rect x="724.3" y="373" width="4.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="727.31" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (12 samples, 0.02%; -0.00%)</title><rect x="444.3" y="277" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="447.28" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (7 samples, 0.01%; -0.00%)</title><rect x="38.3" y="437" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="41.31" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (66 samples, 0.13%; +0.02%)</title><rect x="741.4" y="325" width="1.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="744.40" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (27 samples, 0.05%; +0.01%)</title><rect x="295.4" y="245" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="298.41" y="255.5" ></text>
</g>
<g >
<title>operator delete (25 samples, 0.05%; +0.01%)</title><rect x="587.7" y="405" width="0.6" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="590.68" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (67 samples, 0.14%; -0.02%)</title><rect x="744.2" y="277" width="1.6" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="747.22" y="287.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (6 samples, 0.01%; +0.01%)</title><rect x="290.8" y="325" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="293.82" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (125 samples, 0.25%; +0.01%)</title><rect x="822.4" y="325" width="3.0" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="825.42" y="335.5" ></text>
</g>
<g >
<title>database::query (1,045 samples, 2.12%; -0.02%)</title><rect x="1016.3" y="261" width="25.0" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="1019.29" y="271.5" >d..</text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::make&lt;managed_bytes&gt; (48 samples, 0.10%; 0.00%)</title><rect x="905.1" y="309" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="908.07" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (112 samples, 0.23%; +0.00%)</title><rect x="825.6" y="341" width="2.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="828.63" y="351.5" ></text>
</g>
<g >
<title>db::is_serial_consistency (6 samples, 0.01%; +0.01%)</title><rect x="1144.2" y="437" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1147.19" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (20 samples, 0.04%; +0.01%)</title><rect x="651.0" y="437" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="653.98" y="447.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (6 samples, 0.01%; -0.03%)</title><rect x="1179.2" y="629" width="0.1" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="1182.17" y="639.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (27 samples, 0.05%; +0.01%)</title><rect x="504.5" y="197" width="0.7" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="507.55" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (13 samples, 0.03%; +0.00%)</title><rect x="39.1" y="437" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="42.14" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (27 samples, 0.05%; -0.02%)</title><rect x="1111.6" y="405" width="0.7" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="1114.61" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.01%)</title><rect x="802.3" y="181" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="805.29" y="191.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (115 samples, 0.23%; -0.01%)</title><rect x="277.8" y="293" width="2.8" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="280.84" y="303.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (17 samples, 0.03%; +0.02%)</title><rect x="883.9" y="389" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="886.94" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (40 samples, 0.08%; -0.02%)</title><rect x="1125.5" y="389" width="0.9" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="1128.47" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="930.4" y="373" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="933.44" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (8 samples, 0.02%; -0.01%)</title><rect x="756.3" y="357" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="759.27" y="367.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (12 samples, 0.02%; -0.01%)</title><rect x="892.1" y="277" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="895.11" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (17 samples, 0.03%; +0.01%)</title><rect x="1111.0" y="373" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1113.96" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (39 samples, 0.08%; 0.00%)</title><rect x="670.4" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="673.37" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (22 samples, 0.04%; -0.00%)</title><rect x="139.5" y="229" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="142.53" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (20 samples, 0.04%; -0.05%)</title><rect x="501.3" y="181" width="0.5" height="15.0" fill="rgb(148,148,255)" rx="2" ry="2" />
<text  x="504.35" y="191.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (11 samples, 0.02%; +0.01%)</title><rect x="52.7" y="469" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="55.65" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (6 samples, 0.01%; 0.00%)</title><rect x="645.6" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="648.56" y="479.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (89 samples, 0.18%; +0.01%)</title><rect x="542.3" y="373" width="2.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="545.25" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (426 samples, 0.86%; +0.04%)</title><rect x="152.9" y="245" width="10.2" height="15.0" fill="rgb(255,156,156)" rx="2" ry="2" />
<text  x="155.89" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (95 samples, 0.19%; +0.04%)</title><rect x="1131.4" y="389" width="2.2" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="1134.36" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; 0.00%)</title><rect x="532.1" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="535.14" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.04%; -0.01%)</title><rect x="100.8" y="373" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="103.75" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (7 samples, 0.01%; +0.01%)</title><rect x="1144.0" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1147.03" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (6,156 samples, 12.47%; -0.04%)</title><rect x="963.0" y="389" width="147.1" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="965.97" y="399.5" >service::storage_p..</text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (15 samples, 0.03%; 0.00%)</title><rect x="1080.7" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1083.72" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (43 samples, 0.09%; +0.00%)</title><rect x="784.6" y="245" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="787.65" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (13 samples, 0.03%; +0.01%)</title><rect x="406.4" y="229" width="0.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="409.43" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (21 samples, 0.04%; +0.03%)</title><rect x="95.5" y="421" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="98.47" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (6 samples, 0.01%; +0.01%)</title><rect x="801.2" y="69" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="804.19" y="79.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (893 samples, 1.81%; +0.00%)</title><rect x="1082.2" y="341" width="21.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1085.20" y="351.5" >s..</text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (52 samples, 0.11%; +0.01%)</title><rect x="628.5" y="485" width="1.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="631.51" y="495.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (19 samples, 0.04%; +0.00%)</title><rect x="140.1" y="229" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="143.06" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; +0.00%)</title><rect x="599.0" y="357" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="601.98" y="367.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (10 samples, 0.02%; 0.00%)</title><rect x="1145.2" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.22" y="255.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (19 samples, 0.04%; +0.01%)</title><rect x="245.6" y="213" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="248.58" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7 samples, 0.01%; +0.01%)</title><rect x="980.7" y="341" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="983.69" y="351.5" ></text>
</g>
<g >
<title>operator delete (34 samples, 0.07%; +0.01%)</title><rect x="695.9" y="485" width="0.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="698.86" y="495.5" ></text>
</g>
<g >
<title>db::block_for (5 samples, 0.01%; +0.01%)</title><rect x="1069.8" y="325" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1072.82" y="335.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (115 samples, 0.23%; +0.01%)</title><rect x="358.7" y="165" width="2.7" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="361.69" y="175.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (17 samples, 0.03%; +0.01%)</title><rect x="561.9" y="293" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="564.90" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (22 samples, 0.04%; -0.00%)</title><rect x="743.2" y="293" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="746.19" y="303.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (5 samples, 0.01%; +0.01%)</title><rect x="75.0" y="405" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="78.00" y="415.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (12 samples, 0.02%; 0.00%)</title><rect x="1178.7" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1181.69" y="479.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (12 samples, 0.02%; -0.01%)</title><rect x="168.3" y="197" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="171.32" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (9 samples, 0.02%; +0.01%)</title><rect x="414.3" y="341" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="417.27" y="351.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (12 samples, 0.02%; +0.01%)</title><rect x="1107.1" y="341" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1110.11" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (77 samples, 0.16%; -0.01%)</title><rect x="250.9" y="213" width="1.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="253.94" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (70 samples, 0.14%; -0.01%)</title><rect x="366.3" y="197" width="1.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="369.27" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (5 samples, 0.01%; +0.01%)</title><rect x="1128.6" y="405" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1131.63" y="415.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (5 samples, 0.01%; +0.00%)</title><rect x="1035.9" y="213" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1038.89" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (143 samples, 0.29%; 0.00%)</title><rect x="1049.2" y="277" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1052.16" y="287.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (13 samples, 0.03%; +0.02%)</title><rect x="305.3" y="197" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="308.33" y="207.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (18 samples, 0.04%; +0.01%)</title><rect x="584.7" y="405" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="587.71" y="415.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (33 samples, 0.07%; +0.00%)</title><rect x="158.3" y="213" width="0.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="161.32" y="223.5" ></text>
</g>
<g >
<title>auth::get_permissions (1,200 samples, 2.43%; +0.00%)</title><rect x="780.6" y="309" width="28.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="783.56" y="319.5" >au..</text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (19 samples, 0.04%; -0.00%)</title><rect x="11.9" y="581" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="14.91" y="591.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (33 samples, 0.07%; -0.01%)</title><rect x="232.4" y="213" width="0.8" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="235.36" y="223.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (12 samples, 0.02%; -0.01%)</title><rect x="483.4" y="213" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="486.42" y="223.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%; -0.00%)</title><rect x="417.8" y="373" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="420.79" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (19 samples, 0.04%; +0.02%)</title><rect x="141.2" y="245" width="0.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="144.18" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (13 samples, 0.03%; +0.01%)</title><rect x="223.6" y="133" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="226.57" y="143.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::reserve (18 samples, 0.04%; +0.03%)</title><rect x="1109.7" y="373" width="0.4" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="1112.72" y="383.5" ></text>
</g>
<g >
<title>abstract_type::bound_value_needs_to_be_reserialized (10 samples, 0.02%; -0.00%)</title><rect x="889.9" y="293" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="892.89" y="303.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (32 samples, 0.06%; -0.02%)</title><rect x="243.1" y="181" width="0.8" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="246.12" y="191.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (240 samples, 0.49%; -0.00%)</title><rect x="740.3" y="373" width="5.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="743.32" y="383.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (5 samples, 0.01%; 0.00%)</title><rect x="21.0" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.00" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (7 samples, 0.01%; +0.01%)</title><rect x="511.6" y="293" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="514.60" y="303.5" ></text>
</g>
<g >
<title>__start_context (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.28" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (9 samples, 0.02%; +0.01%)</title><rect x="152.6" y="245" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="155.58" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (9 samples, 0.02%; +0.00%)</title><rect x="214.3" y="85" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="217.27" y="95.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (11,295 samples, 22.88%; +0.06%)</title><rect x="873.9" y="437" width="270.0" height="15.0" fill="rgb(255,139,139)" rx="2" ry="2" />
<text  x="876.90" y="447.5" >cql3::statements::select_statement::..</text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (7 samples, 0.01%; 0.00%)</title><rect x="1146.2" y="149" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.15" y="159.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (18 samples, 0.04%; +0.01%)</title><rect x="161.7" y="197" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="164.72" y="207.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (13 samples, 0.03%; +0.01%)</title><rect x="995.2" y="277" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="998.25" y="287.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (30 samples, 0.06%; +0.01%)</title><rect x="1065.8" y="261" width="0.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1068.85" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (12 samples, 0.02%; +0.01%)</title><rect x="46.4" y="485" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="49.43" y="495.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (10 samples, 0.02%; +0.01%)</title><rect x="331.6" y="165" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="334.60" y="175.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (34 samples, 0.07%; 0.00%)</title><rect x="684.1" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.14" y="495.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.01%; -0.00%)</title><rect x="845.7" y="405" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="848.71" y="415.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (142 samples, 0.29%; +0.07%)</title><rect x="302.2" y="245" width="3.4" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="305.24" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; -0.00%)</title><rect x="516.2" y="309" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="519.22" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; +0.01%)</title><rect x="295.8" y="229" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="298.84" y="239.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (2,480 samples, 5.02%; -0.01%)</title><rect x="995.6" y="341" width="59.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="998.63" y="351.5" >servic..</text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (5 samples, 0.01%; 0.00%)</title><rect x="21.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.33" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (60 samples, 0.12%; +0.01%)</title><rect x="1112.3" y="405" width="1.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1115.32" y="415.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (1,263 samples, 2.56%; +0.01%)</title><rect x="779.5" y="325" width="30.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="782.49" y="335.5" >st..</text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (8 samples, 0.02%; -0.01%)</title><rect x="892.2" y="261" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="895.21" y="271.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (40 samples, 0.08%; +0.00%)</title><rect x="15.7" y="277" width="0.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="18.67" y="287.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (610 samples, 1.24%; -0.00%)</title><rect x="732.9" y="421" width="14.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="735.87" y="431.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (216 samples, 0.44%; +0.01%)</title><rect x="1029.1" y="197" width="5.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1032.06" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (64 samples, 0.13%; +0.01%)</title><rect x="1122.4" y="341" width="1.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1125.37" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (21 samples, 0.04%; +0.01%)</title><rect x="947.0" y="373" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="949.98" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (18 samples, 0.04%; +0.01%)</title><rect x="1140.4" y="405" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1143.44" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (35 samples, 0.07%; 0.00%)</title><rect x="19.9" y="453" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.90" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (18 samples, 0.04%; +0.01%)</title><rect x="510.5" y="277" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="513.48" y="287.5" ></text>
</g>
<g >
<title>operator delete (13 samples, 0.03%; +0.00%)</title><rect x="34.7" y="453" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="37.70" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="658.2" y="485" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="661.15" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; -0.02%)</title><rect x="1136.8" y="421" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="1139.83" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (58 samples, 0.12%; +0.01%)</title><rect x="1161.9" y="437" width="1.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1164.86" y="447.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; -0.00%)</title><rect x="839.5" y="341" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="842.52" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (10 samples, 0.02%; -0.00%)</title><rect x="322.2" y="197" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="325.23" y="207.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (20 samples, 0.04%; -0.00%)</title><rect x="71.3" y="389" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="74.25" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.01%)</title><rect x="269.8" y="341" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="272.75" y="351.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (288 samples, 0.58%; +0.01%)</title><rect x="97.0" y="437" width="6.9" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="99.98" y="447.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (24 samples, 0.05%; +0.02%)</title><rect x="800.1" y="85" width="0.6" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="803.12" y="95.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (23 samples, 0.05%; +0.00%)</title><rect x="725.3" y="325" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="728.26" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (84 samples, 0.17%; +0.01%)</title><rect x="1065.1" y="293" width="2.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1068.06" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (633 samples, 1.28%; -0.01%)</title><rect x="1024.9" y="245" width="15.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1027.90" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.06%; 0.00%)</title><rect x="1145.8" y="453" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.80" y="463.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (83 samples, 0.17%; 0.00%)</title><rect x="783.8" y="261" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="786.76" y="271.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (9 samples, 0.02%; -0.00%)</title><rect x="391.6" y="229" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="394.63" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="896.2" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="899.18" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (6 samples, 0.01%; +0.01%)</title><rect x="750.7" y="373" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="753.65" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (6 samples, 0.01%; +0.01%)</title><rect x="231.8" y="197" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="234.81" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (11 samples, 0.02%; +0.01%)</title><rect x="981.5" y="357" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="984.46" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (6 samples, 0.01%; -0.01%)</title><rect x="1171.5" y="453" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1174.52" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (27 samples, 0.05%; -0.01%)</title><rect x="384.7" y="165" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="387.75" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (15 samples, 0.03%; +0.00%)</title><rect x="701.9" y="421" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="704.93" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="583.3" y="389" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="586.32" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (123 samples, 0.25%; +0.00%)</title><rect x="846.0" y="389" width="2.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="848.97" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (12 samples, 0.02%; +0.00%)</title><rect x="449.1" y="261" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="452.11" y="271.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (384 samples, 0.78%; -0.01%)</title><rect x="792.4" y="213" width="9.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="795.42" y="223.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,493 samples, 9.10%; +0.02%)</title><rect x="146.3" y="277" width="107.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="149.34" y="287.5" >logalloc::all..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="710.7" y="501" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="713.66" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (10 samples, 0.02%; +0.01%)</title><rect x="1126.4" y="389" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1129.43" y="399.5" ></text>
</g>
<g >
<title>reader_permit::consume (15 samples, 0.03%; +0.02%)</title><rect x="217.1" y="149" width="0.4" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="220.13" y="159.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (40 samples, 0.08%; +0.02%)</title><rect x="330.3" y="165" width="1.0" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="333.31" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; -0.00%)</title><rect x="1033.0" y="117" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1035.95" y="127.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (11 samples, 0.02%; +0.01%)</title><rect x="539.5" y="389" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="542.50" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (10 samples, 0.02%; +0.00%)</title><rect x="703.0" y="405" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="706.03" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (6 samples, 0.01%; +0.00%)</title><rect x="1067.1" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1070.07" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (8 samples, 0.02%; +0.01%)</title><rect x="42.3" y="485" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="45.30" y="495.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (11 samples, 0.02%; -0.00%)</title><rect x="835.7" y="437" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="838.69" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1,339 samples, 2.71%; +0.10%)</title><rect x="175.6" y="133" width="32.0" height="15.0" fill="rgb(255,90,90)" rx="2" ry="2" />
<text  x="178.61" y="143.5" >co..</text>
</g>
<g >
<title>operator delete (33 samples, 0.07%; +0.00%)</title><rect x="617.4" y="373" width="0.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="620.37" y="383.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (6 samples, 0.01%; -0.00%)</title><rect x="1041.3" y="261" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1044.27" y="271.5" ></text>
</g>
<g >
<title>__strlen_avx2 (117 samples, 0.24%; -0.06%)</title><rect x="1018.9" y="245" width="2.8" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="1021.89" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (19 samples, 0.04%; +0.00%)</title><rect x="811.2" y="293" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="814.19" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (10 samples, 0.02%; +0.00%)</title><rect x="699.2" y="453" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="702.23" y="463.5" ></text>
</g>
<g >
<title>table::query (8 samples, 0.02%; +0.01%)</title><rect x="625.9" y="469" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="628.86" y="479.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (11 samples, 0.02%; +0.02%)</title><rect x="789.9" y="165" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="792.93" y="175.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (13 samples, 0.03%; -0.00%)</title><rect x="847.6" y="341" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="850.57" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (199 samples, 0.40%; +0.00%)</title><rect x="997.8" y="309" width="4.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1000.83" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (5 samples, 0.01%; +0.01%)</title><rect x="776.4" y="309" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="779.45" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (31 samples, 0.06%; -0.00%)</title><rect x="775.7" y="293" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="778.66" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (307 samples, 0.62%; +0.03%)</title><rect x="499.1" y="245" width="7.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="502.12" y="255.5" ></text>
</g>
<g >
<title>malloc (24 samples, 0.05%; 0.00%)</title><rect x="599.0" y="373" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="601.98" y="383.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (378 samples, 0.77%; +0.01%)</title><rect x="475.1" y="261" width="9.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="478.10" y="271.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.01%; -0.00%)</title><rect x="764.4" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="767.38" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (5 samples, 0.01%; +0.01%)</title><rect x="322.1" y="197" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="325.11" y="207.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (82 samples, 0.17%; +0.00%)</title><rect x="622.3" y="421" width="2.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="625.29" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (8 samples, 0.02%; +0.01%)</title><rect x="247.9" y="229" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="250.90" y="239.5" ></text>
</g>
<g >
<title>operator delete (31 samples, 0.06%; +0.01%)</title><rect x="588.8" y="405" width="0.7" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="591.80" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (14 samples, 0.03%; -0.01%)</title><rect x="538.6" y="389" width="0.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="541.62" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (11 samples, 0.02%; -0.01%)</title><rect x="1105.0" y="357" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1107.99" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (11 samples, 0.02%; -0.00%)</title><rect x="846.1" y="373" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="849.12" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (17 samples, 0.03%; +0.00%)</title><rect x="20.2" y="405" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="23.23" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; 0.00%)</title><rect x="662.5" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="665.53" y="415.5" ></text>
</g>
<g >
<title>perf_simple_que (49,357 samples, 100.00%; 0.00%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >perf_simple_que</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.28" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (7 samples, 0.01%; -0.00%)</title><rect x="444.1" y="277" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="447.11" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (5 samples, 0.01%; +0.01%)</title><rect x="682.2" y="421" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="685.16" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (17 samples, 0.03%; +0.01%)</title><rect x="782.0" y="245" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="785.04" y="255.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (10 samples, 0.02%; +0.00%)</title><rect x="864.6" y="309" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="867.57" y="319.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (17 samples, 0.03%; +0.01%)</title><rect x="918.1" y="357" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="921.12" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.05%; -0.02%)</title><rect x="857.8" y="421" width="0.6" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="860.76" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (12 samples, 0.02%; -0.00%)</title><rect x="1153.3" y="469" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1156.30" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (31 samples, 0.06%; +0.03%)</title><rect x="1127.9" y="405" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1130.86" y="415.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (36 samples, 0.07%; +0.02%)</title><rect x="356.0" y="149" width="0.9" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="359.01" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (17 samples, 0.03%; -0.01%)</title><rect x="1038.9" y="181" width="0.4" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1041.93" y="191.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (14 samples, 0.03%; +0.00%)</title><rect x="568.9" y="277" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="571.88" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (71 samples, 0.14%; +0.03%)</title><rect x="1037.6" y="197" width="1.7" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="1040.64" y="207.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (29 samples, 0.06%; +0.01%)</title><rect x="329.4" y="181" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="332.43" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;query::result_memory_accounter&gt;::awaiter (6 samples, 0.01%; +0.00%)</title><rect x="606.8" y="437" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="609.78" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (477 samples, 0.97%; +0.00%)</title><rect x="1025.4" y="229" width="11.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1028.37" y="239.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (23 samples, 0.05%; +0.02%)</title><rect x="443.3" y="277" width="0.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="446.25" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (17 samples, 0.03%; -0.01%)</title><rect x="618.2" y="389" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="621.16" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (6,270 samples, 12.70%; -0.01%)</title><rect x="711.5" y="501" width="149.9" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="714.54" y="511.5" >seastar::internal::..</text>
</g>
<g >
<title>operator new (22 samples, 0.04%; -0.01%)</title><rect x="940.5" y="373" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="943.45" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (83 samples, 0.17%; +0.01%)</title><rect x="1105.4" y="357" width="2.0" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1108.42" y="367.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (10 samples, 0.02%; +0.01%)</title><rect x="757.8" y="293" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="760.83" y="303.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (9 samples, 0.02%; +0.00%)</title><rect x="729.9" y="437" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="732.93" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (18 samples, 0.04%; +0.01%)</title><rect x="936.0" y="389" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="938.98" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; +0.01%)</title><rect x="559.0" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="561.96" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (127 samples, 0.26%; +0.00%)</title><rect x="615.6" y="421" width="3.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="618.58" y="431.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (18 samples, 0.04%; +0.00%)</title><rect x="368.0" y="213" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="371.04" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; -0.01%)</title><rect x="1144.8" y="453" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1147.81" y="463.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (79 samples, 0.16%; -0.01%)</title><rect x="156.4" y="213" width="1.9" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="159.39" y="223.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (9 samples, 0.02%; 0.00%)</title><rect x="708.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.38" y="511.5" ></text>
</g>
<g >
<title>operator new (63 samples, 0.13%; +0.00%)</title><rect x="887.2" y="309" width="1.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="890.21" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::move_it (8 samples, 0.02%; -0.01%)</title><rect x="772.9" y="341" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="775.93" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (5 samples, 0.01%; +0.00%)</title><rect x="664.7" y="469" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="667.71" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (24 samples, 0.05%; -0.02%)</title><rect x="682.5" y="485" width="0.6" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="685.49" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (18 samples, 0.04%; +0.01%)</title><rect x="81.5" y="453" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="84.48" y="463.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (7 samples, 0.01%; +0.00%)</title><rect x="457.2" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="460.21" y="335.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (5 samples, 0.01%; -0.00%)</title><rect x="1103.0" y="309" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1106.05" y="319.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (41 samples, 0.08%; -0.01%)</title><rect x="1100.7" y="293" width="1.0" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1103.68" y="303.5" ></text>
</g>
<g >
<title>auth::resource::parent (104 samples, 0.21%; -0.01%)</title><rect x="776.6" y="325" width="2.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="779.59" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (17 samples, 0.03%; +0.01%)</title><rect x="671.4" y="453" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="674.40" y="463.5" ></text>
</g>
<g >
<title>operator delete (19 samples, 0.04%; +0.00%)</title><rect x="639.7" y="485" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="642.70" y="495.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (48,413 samples, 98.09%; 0.00%)</title><rect x="21.7" y="565" width="1157.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.71" y="575.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>service::storage_proxy::got_response (8 samples, 0.02%; 0.00%)</title><rect x="708.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.41" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (8 samples, 0.02%; 0.00%)</title><rect x="511.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="514.00" y="303.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (35 samples, 0.07%; -0.01%)</title><rect x="222.2" y="133" width="0.8" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="225.18" y="143.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (18 samples, 0.04%; +0.01%)</title><rect x="125.0" y="309" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="127.97" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (21 samples, 0.04%; +0.01%)</title><rect x="1053.3" y="293" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1056.27" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (6 samples, 0.01%; +0.01%)</title><rect x="1081.7" y="325" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1084.72" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (578 samples, 1.17%; -0.01%)</title><rect x="495.7" y="277" width="13.8" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="498.68" y="287.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (22 samples, 0.04%; +0.01%)</title><rect x="1120.2" y="357" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1123.19" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%; +0.01%)</title><rect x="614.9" y="421" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="617.86" y="431.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (9 samples, 0.02%; +0.01%)</title><rect x="827.3" y="277" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="830.25" y="287.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (6 samples, 0.01%; -0.00%)</title><rect x="265.4" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="268.40" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (5 samples, 0.01%; +0.01%)</title><rect x="604.3" y="437" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="607.32" y="447.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (38 samples, 0.08%; +0.01%)</title><rect x="744.7" y="261" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="747.68" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (68 samples, 0.14%; -0.01%)</title><rect x="985.8" y="277" width="1.7" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="988.83" y="287.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (13 samples, 0.03%; +0.00%)</title><rect x="834.7" y="373" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="837.74" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (9 samples, 0.02%; -0.00%)</title><rect x="1030.6" y="149" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1033.59" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (12 samples, 0.02%; -0.00%)</title><rect x="292.2" y="293" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="295.23" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (21 samples, 0.04%; 0.00%)</title><rect x="1021.9" y="229" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1024.93" y="239.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (676 samples, 1.37%; -0.01%)</title><rect x="786.3" y="245" width="16.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="789.32" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (6 samples, 0.01%; -0.02%)</title><rect x="102.2" y="389" width="0.1" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="105.16" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (7 samples, 0.01%; +0.00%)</title><rect x="911.8" y="357" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="914.81" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.07%; 0.00%)</title><rect x="1144.9" y="389" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.93" y="399.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (11 samples, 0.02%; +0.01%)</title><rect x="286.8" y="389" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="289.80" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (13 samples, 0.03%; +0.01%)</title><rect x="553.4" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="556.42" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (31 samples, 0.06%; +0.01%)</title><rect x="681.1" y="437" width="0.7" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="684.11" y="447.5" ></text>
</g>
<g >
<title>query::querier_base::close (9 samples, 0.02%; 0.00%)</title><rect x="1177.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1180.16" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (5 samples, 0.01%; -0.00%)</title><rect x="422.7" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="425.74" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (10 samples, 0.02%; -0.02%)</title><rect x="52.4" y="469" width="0.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="55.41" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (21 samples, 0.04%; 0.00%)</title><rect x="941.0" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="944.00" y="415.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (14 samples, 0.03%; +0.01%)</title><rect x="827.8" y="293" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="830.75" y="303.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (28 samples, 0.06%; +0.00%)</title><rect x="824.6" y="293" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="827.65" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (7 samples, 0.01%; -0.00%)</title><rect x="864.8" y="309" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="867.81" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="640.3" y="485" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="643.27" y="495.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (23 samples, 0.05%; +0.02%)</title><rect x="432.1" y="341" width="0.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="435.06" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (54 samples, 0.11%; +0.00%)</title><rect x="69.1" y="389" width="1.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="72.15" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (68 samples, 0.14%; 0.00%)</title><rect x="15.2" y="357" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.16" y="367.5" ></text>
</g>
<g >
<title>operator new (60 samples, 0.12%; -0.00%)</title><rect x="781.0" y="277" width="1.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="784.02" y="287.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (12 samples, 0.02%; +0.02%)</title><rect x="1067.5" y="293" width="0.2" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="1070.45" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (7 samples, 0.01%; -0.00%)</title><rect x="1176.2" y="421" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1179.16" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (13 samples, 0.03%; -0.00%)</title><rect x="613.3" y="437" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="616.33" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (33 samples, 0.07%; +0.01%)</title><rect x="124.2" y="309" width="0.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="127.18" y="319.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (2,791 samples, 5.65%; -0.01%)</title><rect x="761.7" y="405" width="66.7" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="764.70" y="415.5" >service..</text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (599 samples, 1.21%; +0.04%)</title><rect x="1114.4" y="421" width="14.3" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="1117.43" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (11 samples, 0.02%; -0.00%)</title><rect x="23.9" y="517" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="26.89" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (67 samples, 0.14%; +0.02%)</title><rect x="795.3" y="133" width="1.6" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="798.31" y="143.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5,226 samples, 10.59%; +0.01%)</title><rect x="289.9" y="373" width="125.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="292.93" y="383.5" >flat_mutation_r..</text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (5 samples, 0.01%; +0.00%)</title><rect x="1172.0" y="469" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1175.02" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (11 samples, 0.02%; -0.01%)</title><rect x="941.5" y="405" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="944.51" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (22 samples, 0.04%; +0.02%)</title><rect x="1042.9" y="229" width="0.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="1045.90" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (5 samples, 0.01%; -0.00%)</title><rect x="734.4" y="389" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="737.40" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (574 samples, 1.16%; -0.00%)</title><rect x="557.1" y="341" width="13.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="560.07" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (18 samples, 0.04%; +0.00%)</title><rect x="898.9" y="229" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="901.88" y="239.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; 0.00%)</title><rect x="742.4" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="745.38" y="287.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (38 samples, 0.08%; +0.00%)</title><rect x="810.7" y="309" width="0.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="813.73" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="558.4" y="293" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="561.44" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (8 samples, 0.02%; 0.00%)</title><rect x="685.0" y="501" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.96" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.01%)</title><rect x="1036.2" y="213" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1039.20" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (22 samples, 0.04%; -0.01%)</title><rect x="703.9" y="437" width="0.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="706.91" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (18 samples, 0.04%; +0.01%)</title><rect x="802.0" y="197" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="804.98" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; 0.00%)</title><rect x="407.1" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="410.10" y="255.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (95 samples, 0.19%; +0.04%)</title><rect x="61.8" y="437" width="2.2" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="64.76" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (56 samples, 0.11%; +0.01%)</title><rect x="852.5" y="341" width="1.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="855.50" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (11 samples, 0.02%; +0.02%)</title><rect x="1002.6" y="309" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1005.59" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (79 samples, 0.16%; +0.00%)</title><rect x="743.9" y="293" width="1.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="746.93" y="303.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (51 samples, 0.10%; +0.01%)</title><rect x="797.4" y="149" width="1.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="800.44" y="159.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (11 samples, 0.02%; +0.01%)</title><rect x="1054.9" y="357" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1057.92" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (7 samples, 0.01%; +0.00%)</title><rect x="624.0" y="389" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="626.99" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (6 samples, 0.01%; 0.00%)</title><rect x="1145.9" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.91" y="223.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1,109 samples, 2.25%; -0.06%)</title><rect x="1150.0" y="501" width="26.5" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="1153.00" y="511.5" >s..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (38 samples, 0.08%; 0.00%)</title><rect x="1110.5" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1113.51" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (31 samples, 0.06%; +0.04%)</title><rect x="109.8" y="421" width="0.7" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="112.77" y="431.5" ></text>
</g>
<g >
<title>database::has_keyspace (132 samples, 0.27%; +0.00%)</title><rect x="845.9" y="405" width="3.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="848.85" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (39 samples, 0.08%; 0.00%)</title><rect x="864.1" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.09" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (36 samples, 0.07%; +0.02%)</title><rect x="514.6" y="261" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="517.64" y="271.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (11 samples, 0.02%; +0.00%)</title><rect x="897.1" y="261" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="900.13" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (9 samples, 0.02%; -0.02%)</title><rect x="442.4" y="261" width="0.2" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="445.39" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (411 samples, 0.83%; +0.02%)</title><rect x="1072.3" y="341" width="9.8" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="1075.30" y="351.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (7 samples, 0.01%; +0.01%)</title><rect x="484.0" y="213" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="486.97" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (6 samples, 0.01%; 0.00%)</title><rect x="18.0" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.96" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (5 samples, 0.01%; -0.01%)</title><rect x="1136.7" y="389" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1139.66" y="399.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (15 samples, 0.03%; -0.00%)</title><rect x="1068.0" y="261" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1070.95" y="271.5" ></text>
</g>
<g >
<title>operator delete (39 samples, 0.08%; +0.02%)</title><rect x="903.3" y="309" width="0.9" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="906.25" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.01%)</title><rect x="63.9" y="421" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="66.91" y="431.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (15 samples, 0.03%; -0.02%)</title><rect x="315.1" y="165" width="0.4" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="318.13" y="175.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (160 samples, 0.32%; +0.02%)</title><rect x="183.0" y="101" width="3.8" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="185.97" y="111.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (87 samples, 0.18%; -0.01%)</title><rect x="1022.6" y="229" width="2.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1025.65" y="239.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (12 samples, 0.02%; +0.01%)</title><rect x="946.4" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="949.36" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.28" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (7 samples, 0.01%; 0.00%)</title><rect x="648.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="651.14" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (156 samples, 0.32%; +0.01%)</title><rect x="998.4" y="293" width="3.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1001.38" y="303.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (118 samples, 0.24%; +0.01%)</title><rect x="1030.3" y="165" width="2.8" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1033.25" y="175.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (17 samples, 0.03%; +0.02%)</title><rect x="638.8" y="485" width="0.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="641.81" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (5 samples, 0.01%; -0.00%)</title><rect x="854.3" y="421" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="857.34" y="431.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.02%; -0.00%)</title><rect x="623.8" y="389" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="626.78" y="399.5" ></text>
</g>
<g >
<title>schema::column_at (85 samples, 0.17%; +0.05%)</title><rect x="205.1" y="117" width="2.0" height="15.0" fill="rgb(255,151,151)" rx="2" ry="2" />
<text  x="208.11" y="127.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (13 samples, 0.03%; +0.02%)</title><rect x="899.8" y="277" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="902.79" y="287.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (11 samples, 0.02%; +0.01%)</title><rect x="843.4" y="421" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="846.41" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (8 samples, 0.02%; +0.00%)</title><rect x="103.7" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="106.67" y="415.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.04%; +0.01%)</title><rect x="630.4" y="485" width="0.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="633.45" y="495.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (6 samples, 0.01%; 0.00%)</title><rect x="1033.5" y="165" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1036.48" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (18 samples, 0.04%; 0.00%)</title><rect x="656.0" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="658.96" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (8 samples, 0.02%; 0.00%)</title><rect x="18.8" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.75" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (7 samples, 0.01%; -0.00%)</title><rect x="549.1" y="293" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="552.11" y="303.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (8 samples, 0.02%; +0.00%)</title><rect x="771.4" y="357" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="774.38" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (6 samples, 0.01%; -0.00%)</title><rect x="1001.8" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1004.82" y="287.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (66 samples, 0.13%; +0.01%)</title><rect x="311.3" y="181" width="1.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="314.31" y="191.5" ></text>
</g>
<g >
<title>operator new (71 samples, 0.14%; 0.00%)</title><rect x="1037.6" y="213" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1040.64" y="223.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (14 samples, 0.03%; +0.00%)</title><rect x="647.4" y="421" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="650.40" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (164 samples, 0.33%; +0.02%)</title><rect x="265.6" y="341" width="3.9" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="268.59" y="351.5" ></text>
</g>
<g >
<title>operator delete (45 samples, 0.09%; +0.02%)</title><rect x="33.1" y="469" width="1.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="36.12" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.07%; 0.00%)</title><rect x="1144.9" y="437" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.93" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (19 samples, 0.04%; -0.02%)</title><rect x="944.5" y="325" width="0.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="947.47" y="335.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.03%; 0.00%)</title><rect x="451.8" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="454.79" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (5 samples, 0.01%; +0.01%)</title><rect x="489.9" y="309" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="492.87" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (8 samples, 0.02%; -0.01%)</title><rect x="1114.0" y="405" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1117.00" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.01%; +0.00%)</title><rect x="754.2" y="357" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="757.22" y="367.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (358 samples, 0.73%; -0.00%)</title><rect x="583.8" y="437" width="8.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="586.75" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; +0.00%)</title><rect x="868.8" y="437" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="871.76" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (86 samples, 0.17%; +0.01%)</title><rect x="267.0" y="325" width="2.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="270.01" y="335.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (6 samples, 0.01%; +0.00%)</title><rect x="404.3" y="213" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="407.33" y="223.5" ></text>
</g>
<g >
<title>database::find_column_family (7 samples, 0.01%; -0.00%)</title><rect x="974.1" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="977.12" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::term&gt;::~shared_ptr (21 samples, 0.04%; -0.00%)</title><rect x="1137.6" y="421" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1140.62" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (144 samples, 0.29%; +0.00%)</title><rect x="199.1" y="117" width="3.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="202.08" y="127.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (11 samples, 0.02%; -0.00%)</title><rect x="446.5" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="449.45" y="287.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (5 samples, 0.01%; 0.00%)</title><rect x="245.5" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="248.46" y="223.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (48 samples, 0.10%; -0.01%)</title><rect x="407.2" y="245" width="1.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="410.22" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (11 samples, 0.02%; +0.01%)</title><rect x="130.9" y="261" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="133.88" y="271.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (8 samples, 0.02%; +0.00%)</title><rect x="303.8" y="229" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="306.80" y="239.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (6 samples, 0.01%; -0.01%)</title><rect x="331.3" y="181" width="0.1" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="334.27" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (22 samples, 0.04%; +0.01%)</title><rect x="761.0" y="405" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="764.00" y="415.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (33 samples, 0.07%; 0.00%)</title><rect x="130.4" y="277" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="133.35" y="287.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (49 samples, 0.10%; -0.04%)</title><rect x="103.9" y="437" width="1.1" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="106.86" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (19 samples, 0.04%; +0.00%)</title><rect x="868.5" y="453" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="871.47" y="463.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (474 samples, 0.96%; +0.00%)</title><rect x="65.7" y="437" width="11.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="68.70" y="447.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (5 samples, 0.01%; +0.00%)</title><rect x="571.4" y="373" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="574.39" y="383.5" ></text>
</g>
<g >
<title>operator new (51 samples, 0.10%; -0.00%)</title><rect x="715.8" y="421" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="718.77" y="431.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (44 samples, 0.09%; -0.02%)</title><rect x="749.5" y="373" width="1.0" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="752.48" y="383.5" ></text>
</g>
<g >
<title>make_combined_reader (704 samples, 1.43%; +0.01%)</title><rect x="435.6" y="325" width="16.9" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="438.62" y="335.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (341 samples, 0.69%; +0.00%)</title><rect x="476.0" y="245" width="8.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="478.98" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (13 samples, 0.03%; -0.01%)</title><rect x="1081.4" y="325" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1084.41" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (27 samples, 0.05%; -0.01%)</title><rect x="679.5" y="469" width="0.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="682.46" y="479.5" ></text>
</g>
<g >
<title>database::find_column_family (59 samples, 0.12%; -0.00%)</title><rect x="820.4" y="341" width="1.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="823.37" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (24 samples, 0.05%; -0.02%)</title><rect x="693.3" y="485" width="0.5" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="696.27" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (6 samples, 0.01%; -0.01%)</title><rect x="579.8" y="341" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="582.81" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (103 samples, 0.21%; -0.00%)</title><rect x="660.2" y="469" width="2.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="663.21" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (19 samples, 0.04%; -0.01%)</title><rect x="490.0" y="309" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="492.99" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (7 samples, 0.01%; +0.00%)</title><rect x="710.8" y="501" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="713.78" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (11 samples, 0.02%; +0.00%)</title><rect x="677.0" y="485" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="680.02" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (12 samples, 0.02%; +0.00%)</title><rect x="82.2" y="453" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="85.22" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (10 samples, 0.02%; -0.01%)</title><rect x="813.6" y="341" width="0.3" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="816.65" y="351.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (6 samples, 0.01%; 0.00%)</title><rect x="1145.9" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.91" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (49 samples, 0.10%; -0.01%)</title><rect x="229.6" y="165" width="1.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="232.64" y="175.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (12 samples, 0.02%; +0.02%)</title><rect x="284.4" y="357" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="287.41" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (15 samples, 0.03%; +0.02%)</title><rect x="202.2" y="85" width="0.3" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="205.17" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (70 samples, 0.14%; -0.00%)</title><rect x="857.3" y="469" width="1.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="860.26" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (9 samples, 0.02%; +0.00%)</title><rect x="629.3" y="453" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="632.32" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (6 samples, 0.01%; +0.01%)</title><rect x="280.6" y="309" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="283.58" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="1176.3" y="437" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1179.32" y="447.5" ></text>
</g>
<g >
<title>operator new (22 samples, 0.04%; -0.01%)</title><rect x="501.3" y="197" width="0.5" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="504.30" y="207.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (336 samples, 0.68%; -0.00%)</title><rect x="1084.6" y="277" width="8.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1087.62" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (7 samples, 0.01%; -0.01%)</title><rect x="1046.1" y="277" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1049.10" y="287.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (37 samples, 0.07%; +0.01%)</title><rect x="620.1" y="405" width="0.9" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="623.12" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (825 samples, 1.67%; +0.01%)</title><rect x="125.5" y="309" width="19.8" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="128.54" y="319.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%; 0.00%)</title><rect x="536.0" y="325" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="539.04" y="335.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (22 samples, 0.04%; +0.04%)</title><rect x="96.4" y="437" width="0.6" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="99.45" y="447.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (7 samples, 0.01%; +0.01%)</title><rect x="128.3" y="277" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="131.32" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (124 samples, 0.25%; -0.01%)</title><rect x="659.8" y="485" width="2.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="662.76" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (14 samples, 0.03%; +0.01%)</title><rect x="608.3" y="421" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="611.31" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.00%)</title><rect x="579.2" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="582.19" y="335.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (6 samples, 0.01%; -0.01%)</title><rect x="801.0" y="69" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="804.05" y="79.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (32 samples, 0.06%; -0.00%)</title><rect x="940.2" y="389" width="0.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="943.24" y="399.5" ></text>
</g>
<g >
<title>table::query (22,700 samples, 45.99%; -0.06%)</title><rect x="82.6" y="453" width="542.7" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="85.61" y="463.5" >table::query</text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (18 samples, 0.04%; +0.01%)</title><rect x="987.5" y="293" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="990.46" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::take (5 samples, 0.01%; +0.00%)</title><rect x="690.5" y="453" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="693.48" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="686.3" y="469" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="689.29" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (7 samples, 0.01%; +0.00%)</title><rect x="421.4" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="424.45" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.00%)</title><rect x="1172.7" y="437" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1175.74" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (15 samples, 0.03%; +0.01%)</title><rect x="65.3" y="437" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="68.35" y="447.5" ></text>
</g>
<g >
<title>operator delete (48 samples, 0.10%; +0.00%)</title><rect x="565.8" y="277" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="568.75" y="287.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (41 samples, 0.08%; +0.05%)</title><rect x="315.9" y="181" width="1.0" height="15.0" fill="rgb(255,148,148)" rx="2" ry="2" />
<text  x="318.92" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (5 samples, 0.01%; 0.00%)</title><rect x="684.7" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.67" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; +0.01%)</title><rect x="588.1" y="389" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="591.06" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (11 samples, 0.02%; -0.01%)</title><rect x="607.5" y="437" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="610.49" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (5 samples, 0.01%; +0.01%)</title><rect x="1036.8" y="229" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1039.78" y="239.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (46 samples, 0.09%; +0.01%)</title><rect x="622.5" y="405" width="1.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="625.51" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (143 samples, 0.29%; +0.01%)</title><rect x="410.6" y="309" width="3.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="413.62" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (110 samples, 0.22%; 0.00%)</title><rect x="1037.4" y="229" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1040.40" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (175 samples, 0.35%; -0.01%)</title><rect x="668.5" y="485" width="4.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="671.46" y="495.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (31 samples, 0.06%; -0.04%)</title><rect x="241.6" y="165" width="0.7" height="15.0" fill="rgb(156,156,255)" rx="2" ry="2" />
<text  x="244.59" y="175.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (24 samples, 0.05%; +0.02%)</title><rect x="1010.9" y="261" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1013.89" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (7,228 samples, 14.64%; +0.00%)</title><rect x="113.3" y="405" width="172.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="116.33" y="415.5" >flat_mutation_reader::..</text>
</g>
<g >
<title>query::result::builder::add_partition (24 samples, 0.05%; +0.05%)</title><rect x="310.0" y="197" width="0.6" height="15.0" fill="rgb(255,153,153)" rx="2" ry="2" />
<text  x="312.99" y="207.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,975 samples, 8.05%; +0.01%)</title><rect x="300.5" y="261" width="95.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="303.55" y="271.5" >mutation_fr..</text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (183 samples, 0.37%; 0.00%)</title><rect x="10.1" y="613" width="4.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.12" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (11 samples, 0.02%; +0.02%)</title><rect x="500.7" y="213" width="0.2" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="503.65" y="223.5" ></text>
</g>
<g >
<title>operator delete (40 samples, 0.08%; -0.01%)</title><rect x="685.5" y="485" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="688.46" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (18 samples, 0.04%; -0.01%)</title><rect x="535.2" y="341" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="538.22" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.01%)</title><rect x="988.0" y="309" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="990.98" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (92 samples, 0.19%; +0.01%)</title><rect x="833.0" y="421" width="2.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="835.99" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (52 samples, 0.11%; -0.01%)</title><rect x="919.9" y="341" width="1.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="922.92" y="351.5" ></text>
</g>
<g >
<title>operator delete (33 samples, 0.07%; +0.01%)</title><rect x="515.6" y="325" width="0.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="518.62" y="335.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (180 samples, 0.36%; -0.01%)</title><rect x="1029.4" y="181" width="4.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1032.41" y="191.5" ></text>
</g>
<g >
<title>database::has_keyspace (157 samples, 0.32%; -0.01%)</title><rect x="837.9" y="421" width="3.8" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="840.94" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (13 samples, 0.03%; 0.00%)</title><rect x="613.0" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="616.02" y="415.5" ></text>
</g>
<g >
<title>operator delete (48 samples, 0.10%; +0.01%)</title><rect x="281.2" y="293" width="1.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="284.18" y="303.5" ></text>
</g>
<g >
<title>auth::resource::resource (122 samples, 0.25%; -0.00%)</title><rect x="766.0" y="389" width="2.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="768.98" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (19 samples, 0.04%; +0.00%)</title><rect x="864.5" y="373" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="867.55" y="383.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (42 samples, 0.09%; +0.01%)</title><rect x="157.3" y="197" width="1.0" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="160.27" y="207.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (27 samples, 0.05%; +0.01%)</title><rect x="348.2" y="149" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="351.24" y="159.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (8 samples, 0.02%; +0.00%)</title><rect x="968.8" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="971.78" y="383.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (5 samples, 0.01%; +0.00%)</title><rect x="390.4" y="229" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="393.37" y="239.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.06%; -0.00%)</title><rect x="910.5" y="325" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="913.45" y="335.5" ></text>
</g>
<g >
<title>database::find_column_family (97 samples, 0.20%; +0.00%)</title><rect x="1058.8" y="341" width="2.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1061.77" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (117 samples, 0.24%; +0.02%)</title><rect x="942.2" y="389" width="2.7" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="945.15" y="399.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (80 samples, 0.16%; -0.02%)</title><rect x="928.7" y="389" width="1.9" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="931.67" y="399.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (4,962 samples, 10.05%; -0.01%)</title><rect x="421.6" y="421" width="118.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="424.61" y="431.5" >query::querier..</text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (24 samples, 0.05%; +0.01%)</title><rect x="533.8" y="341" width="0.6" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="536.81" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (5 samples, 0.01%; +0.01%)</title><rect x="446.7" y="293" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="449.72" y="303.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (11 samples, 0.02%; +0.01%)</title><rect x="390.5" y="229" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="393.53" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (7 samples, 0.01%; 0.00%)</title><rect x="863.7" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.69" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (292 samples, 0.59%; +0.01%)</title><rect x="1159.8" y="469" width="7.0" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1162.78" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (17 samples, 0.03%; +0.01%)</title><rect x="765.5" y="357" width="0.4" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="768.50" y="367.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (5 samples, 0.01%; -0.02%)</title><rect x="500.2" y="229" width="0.1" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="503.20" y="239.5" ></text>
</g>
<g >
<title>operator delete (27 samples, 0.05%; +0.01%)</title><rect x="30.1" y="485" width="0.7" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="33.11" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (21 samples, 0.04%; +0.01%)</title><rect x="622.8" y="373" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="625.82" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_per_partition_limit (12 samples, 0.02%; 0.00%)</title><rect x="1124.5" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.47" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (6 samples, 0.01%; 0.00%)</title><rect x="909.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="912.95" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.01%)</title><rect x="786.6" y="229" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="789.59" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (12 samples, 0.02%; -0.01%)</title><rect x="767.0" y="325" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="769.98" y="335.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (7 samples, 0.01%; +0.00%)</title><rect x="714.5" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="717.50" y="479.5" ></text>
</g>
<g >
<title>validation::validate_column_family (359 samples, 0.73%; -0.01%)</title><rect x="819.8" y="389" width="8.6" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="822.77" y="399.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (83 samples, 0.17%; -0.01%)</title><rect x="795.0" y="149" width="2.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="798.00" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (16 samples, 0.03%; +0.01%)</title><rect x="262.8" y="325" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="265.77" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (14 samples, 0.03%; -0.00%)</title><rect x="661.4" y="437" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="664.38" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (5 samples, 0.01%; -0.02%)</title><rect x="419.1" y="373" width="0.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="422.06" y="383.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.04%; -0.00%)</title><rect x="651.0" y="453" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="653.98" y="463.5" ></text>
</g>
<g >
<title>operator new (70 samples, 0.14%; -0.00%)</title><rect x="985.8" y="293" width="1.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="988.78" y="303.5" ></text>
</g>
<g >
<title>operator delete (44 samples, 0.09%; +0.01%)</title><rect x="908.7" y="357" width="1.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="911.68" y="367.5" ></text>
</g>
<g >
<title>database::find_keyspace (15 samples, 0.03%; +0.02%)</title><rect x="974.3" y="357" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="977.28" y="367.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (67 samples, 0.14%; -0.01%)</title><rect x="500.4" y="229" width="1.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="503.37" y="239.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (48 samples, 0.10%; -0.00%)</title><rect x="75.6" y="389" width="1.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="78.60" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (8 samples, 0.02%; -0.00%)</title><rect x="320.9" y="149" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="323.94" y="159.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="540.9" y="421" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="543.94" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume (13 samples, 0.03%; +0.00%)</title><rect x="505.5" y="181" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="508.48" y="191.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (40 samples, 0.08%; 0.00%)</title><rect x="864.1" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.09" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (220 samples, 0.45%; +0.03%)</title><rect x="1094.6" y="261" width="5.2" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1097.56" y="271.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (475 samples, 0.96%; -0.00%)</title><rect x="472.8" y="277" width="11.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="475.78" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (53 samples, 0.11%; -0.02%)</title><rect x="1162.0" y="421" width="1.2" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="1164.98" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (90 samples, 0.18%; -0.01%)</title><rect x="956.5" y="389" width="2.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="959.54" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (26 samples, 0.05%; +0.00%)</title><rect x="365.6" y="197" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="368.65" y="207.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (5 samples, 0.01%; -0.00%)</title><rect x="742.5" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="745.52" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (14 samples, 0.03%; -0.00%)</title><rect x="881.1" y="421" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="884.12" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (180 samples, 0.36%; -0.00%)</title><rect x="797.2" y="165" width="4.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="800.25" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.00%)</title><rect x="409.9" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="412.90" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (46 samples, 0.09%; -0.01%)</title><rect x="947.5" y="389" width="1.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="950.48" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (171 samples, 0.35%; -0.00%)</title><rect x="991.5" y="325" width="4.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="994.47" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (19 samples, 0.04%; +0.02%)</title><rect x="1104.5" y="341" width="0.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="1107.53" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (86 samples, 0.17%; +0.01%)</title><rect x="1161.2" y="453" width="2.0" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1164.19" y="463.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (9 samples, 0.02%; +0.00%)</title><rect x="1032.9" y="133" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1035.86" y="143.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (47 samples, 0.10%; 0.00%)</title><rect x="791.3" y="197" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="794.30" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (28 samples, 0.06%; +0.02%)</title><rect x="502.3" y="213" width="0.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="505.25" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (298 samples, 0.60%; -0.02%)</title><rect x="563.0" y="309" width="7.1" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="565.96" y="319.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (19 samples, 0.04%; +0.01%)</title><rect x="605.7" y="421" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="608.68" y="431.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (14 samples, 0.03%; -0.01%)</title><rect x="334.8" y="181" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="337.78" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (79 samples, 0.16%; +0.07%)</title><rect x="202.5" y="117" width="1.9" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="205.53" y="127.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (6 samples, 0.01%; +0.01%)</title><rect x="1120.6" y="341" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1123.57" y="351.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (15 samples, 0.03%; +0.02%)</title><rect x="735.7" y="389" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="738.71" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="172.6" y="133" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="175.57" y="143.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (11 samples, 0.02%; +0.01%)</title><rect x="19.9" y="421" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="22.92" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (11,515 samples, 23.33%; +0.02%)</title><rect x="869.4" y="469" width="275.3" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="872.38" y="479.5" >seastar::noncopyable_function&lt;seasta..</text>
</g>
<g >
<title>operator delete (46 samples, 0.09%; +0.02%)</title><rect x="653.9" y="485" width="1.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="656.85" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="652.3" y="453" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="655.32" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::execution_stage_manager::flush (8 samples, 0.02%; +0.01%)</title><rect x="1177.9" y="501" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1180.90" y="511.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (446 samples, 0.90%; -0.02%)</title><rect x="541.1" y="421" width="10.6" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="544.06" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (18 samples, 0.04%; -0.00%)</title><rect x="757.6" y="309" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="760.63" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (21 samples, 0.04%; -0.01%)</title><rect x="36.3" y="421" width="0.5" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="39.25" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (15 samples, 0.03%; +0.00%)</title><rect x="552.7" y="405" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="555.72" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (5 samples, 0.01%; +0.01%)</title><rect x="1141.0" y="421" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="1143.97" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.01%; -0.01%)</title><rect x="348.9" y="165" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="351.89" y="175.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (27 samples, 0.05%; -0.01%)</title><rect x="1039.4" y="213" width="0.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1042.36" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (9 samples, 0.02%; +0.00%)</title><rect x="993.5" y="261" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="996.46" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (14 samples, 0.03%; -0.00%)</title><rect x="259.8" y="277" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="262.83" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (8 samples, 0.02%; -0.01%)</title><rect x="242.3" y="213" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="245.33" y="223.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (8 samples, 0.02%; +0.01%)</title><rect x="368.3" y="197" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="371.28" y="207.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (22 samples, 0.04%; +0.02%)</title><rect x="726.9" y="293" width="0.6" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="729.94" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (13 samples, 0.03%; +0.01%)</title><rect x="485.1" y="325" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="488.11" y="335.5" ></text>
</g>
<g >
<title>reader_permit::max_result_size (6 samples, 0.01%; +0.01%)</title><rect x="64.7" y="453" width="0.1" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="67.65" y="463.5" ></text>
</g>
<g >
<title>operator new (57 samples, 0.12%; 0.00%)</title><rect x="750.8" y="405" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="753.80" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.01%; -0.02%)</title><rect x="623.8" y="373" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="626.80" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (153 samples, 0.31%; -0.02%)</title><rect x="793.5" y="165" width="3.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="796.49" y="175.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (5,807 samples, 11.77%; -0.02%)</title><rect x="717.9" y="469" width="138.8" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="720.85" y="479.5" >single_node_cql_e..</text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (9 samples, 0.02%; +0.01%)</title><rect x="292.7" y="309" width="0.2" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="295.68" y="319.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (9 samples, 0.02%; 0.00%)</title><rect x="1146.1" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.11" y="223.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (41 samples, 0.08%; -0.01%)</title><rect x="1135.0" y="389" width="1.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1138.04" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (177 samples, 0.36%; -0.01%)</title><rect x="812.7" y="357" width="4.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="815.69" y="367.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (177 samples, 0.36%; +0.01%)</title><rect x="466.3" y="261" width="4.3" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="469.32" y="271.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (258 samples, 0.52%; -0.00%)</title><rect x="687.0" y="485" width="6.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="690.01" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (9 samples, 0.02%; -0.01%)</title><rect x="219.2" y="149" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="222.19" y="159.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (2,987 samples, 6.05%; -0.01%)</title><rect x="983.5" y="357" width="71.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="986.51" y="367.5" >service:..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.07%; 0.00%)</title><rect x="1144.9" y="421" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.93" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.02%; -0.01%)</title><rect x="483.1" y="181" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="486.13" y="191.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; +0.01%)</title><rect x="829.6" y="421" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="832.57" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::future (27 samples, 0.05%; +0.00%)</title><rect x="967.9" y="373" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="970.88" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (24 samples, 0.05%; -0.00%)</title><rect x="387.8" y="181" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="390.83" y="191.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (7 samples, 0.01%; +0.01%)</title><rect x="948.3" y="341" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="951.34" y="351.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (23 samples, 0.05%; +0.01%)</title><rect x="314.6" y="165" width="0.5" height="15.0" fill="rgb(255,200,200)" rx="2" ry="2" />
<text  x="317.58" y="175.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (7 samples, 0.01%; +0.01%)</title><rect x="879.1" y="421" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="882.13" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (7 samples, 0.01%; -0.02%)</title><rect x="215.3" y="165" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="218.29" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (29 samples, 0.06%; +0.01%)</title><rect x="488.8" y="277" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="491.77" y="287.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (34 samples, 0.07%; +0.00%)</title><rect x="1051.8" y="245" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1054.77" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (6 samples, 0.01%; +0.01%)</title><rect x="664.3" y="453" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="667.30" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (10 samples, 0.02%; -0.01%)</title><rect x="1052.6" y="277" width="0.2" height="15.0" fill="rgb(200,200,255)" rx="2" ry="2" />
<text  x="1055.58" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (30 samples, 0.06%; +0.01%)</title><rect x="839.2" y="373" width="0.7" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="842.16" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (10 samples, 0.02%; -0.00%)</title><rect x="883.0" y="405" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="886.03" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (6 samples, 0.01%; +0.01%)</title><rect x="709.0" y="501" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="712.03" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (111 samples, 0.22%; +0.00%)</title><rect x="16.8" y="373" width="2.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="19.81" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (16 samples, 0.03%; +0.00%)</title><rect x="822.0" y="325" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="824.97" y="335.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (7 samples, 0.01%; +0.01%)</title><rect x="511.2" y="293" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="514.20" y="303.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (24 samples, 0.05%; +0.02%)</title><rect x="549.6" y="389" width="0.6" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="552.64" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (68 samples, 0.14%; -0.02%)</title><rect x="513.9" y="293" width="1.6" height="15.0" fill="rgb(185,185,255)" rx="2" ry="2" />
<text  x="516.90" y="303.5" ></text>
</g>
<g >
<title>__tls_init (8 samples, 0.02%; +0.01%)</title><rect x="146.8" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="149.85" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (40 samples, 0.08%; 0.00%)</title><rect x="864.1" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.09" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (22 samples, 0.04%; +0.03%)</title><rect x="1135.5" y="373" width="0.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1138.49" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (6 samples, 0.01%; +0.00%)</title><rect x="115.5" y="373" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="118.53" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (6 samples, 0.01%; -0.03%)</title><rect x="449.4" y="261" width="0.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="452.40" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (70 samples, 0.14%; +0.02%)</title><rect x="197.4" y="117" width="1.7" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="200.41" y="127.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (7 samples, 0.01%; +0.01%)</title><rect x="1024.7" y="245" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1027.73" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (54 samples, 0.11%; +0.02%)</title><rect x="926.4" y="325" width="1.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="929.40" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (8 samples, 0.02%; +0.01%)</title><rect x="70.4" y="389" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="73.44" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (49 samples, 0.10%; +0.00%)</title><rect x="788.7" y="165" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="791.67" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (7 samples, 0.01%; +0.00%)</title><rect x="1053.9" y="293" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1056.92" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (109 samples, 0.22%; +0.01%)</title><rect x="814.2" y="325" width="2.7" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="817.25" y="335.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (28 samples, 0.06%; -0.01%)</title><rect x="800.8" y="101" width="0.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="803.76" y="111.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (6 samples, 0.01%; 0.00%)</title><rect x="518.4" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="521.37" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (19 samples, 0.04%; 0.00%)</title><rect x="141.6" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="144.63" y="271.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (453 samples, 0.92%; +0.01%)</title><rect x="29.8" y="501" width="10.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="32.77" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (9 samples, 0.02%; 0.00%)</title><rect x="1145.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.87" y="303.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (6 samples, 0.01%; +0.00%)</title><rect x="1176.8" y="501" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1179.76" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (10 samples, 0.02%; +0.00%)</title><rect x="889.0" y="309" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="892.01" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (6 samples, 0.01%; -0.03%)</title><rect x="134.5" y="229" width="0.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="137.46" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; 0.00%)</title><rect x="536.1" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="539.06" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (108 samples, 0.22%; +0.00%)</title><rect x="851.5" y="389" width="2.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="854.47" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (5 samples, 0.01%; -0.01%)</title><rect x="930.3" y="341" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="933.32" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (3,205 samples, 6.49%; +0.00%)</title><rect x="752.6" y="421" width="76.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="755.61" y="431.5" >cql3::st..</text>
</g>
<g >
<title>reader_permit::consume (5 samples, 0.01%; +0.00%)</title><rect x="501.8" y="197" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="504.82" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (7 samples, 0.01%; +0.00%)</title><rect x="1127.1" y="405" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1130.05" y="415.5" ></text>
</g>
<g >
<title>posix_memalign (150 samples, 0.30%; 0.00%)</title><rect x="193.6" y="53" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="196.59" y="63.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;current_deleter&lt;range_tombstone_entry&gt; (5 samples, 0.01%; -0.00%)</title><rect x="569.1" y="261" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="572.10" y="271.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (14 samples, 0.03%; -0.01%)</title><rect x="702.9" y="421" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="705.93" y="431.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (56 samples, 0.11%; +0.01%)</title><rect x="291.3" y="309" width="1.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="294.27" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (12 samples, 0.02%; 0.00%)</title><rect x="649.0" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="652.00" y="431.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (8 samples, 0.02%; -0.01%)</title><rect x="512.7" y="325" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="515.73" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="683.7" y="485" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="686.71" y="495.5" ></text>
</g>
<g >
<title>query::digester::digester (34 samples, 0.07%; +0.02%)</title><rect x="596.7" y="405" width="0.8" height="15.0" fill="rgb(255,185,185)" rx="2" ry="2" />
<text  x="599.71" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (19 samples, 0.04%; +0.01%)</title><rect x="706.7" y="453" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="709.73" y="463.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (162 samples, 0.33%; +0.00%)</title><rect x="930.6" y="389" width="3.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="933.63" y="399.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (31 samples, 0.06%; +0.02%)</title><rect x="840.3" y="341" width="0.7" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="843.31" y="351.5" ></text>
</g>
</g>
</svg>
