<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>managed_bytes::managed_bytes (19 samples, 0.04%; +0.01%)</title><rect x="289.0" y="245" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="291.98" y="255.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (257 samples, 0.54%; +0.01%)</title><rect x="563.5" y="373" width="6.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="566.49" y="383.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (302 samples, 0.63%; -0.00%)</title><rect x="532.1" y="421" width="7.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="535.13" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (30 samples, 0.06%; -0.01%)</title><rect x="443.3" y="261" width="0.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="446.27" y="271.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (5 samples, 0.01%; +0.01%)</title><rect x="388.9" y="197" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="391.92" y="207.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (8 samples, 0.02%; +0.00%)</title><rect x="1140.4" y="165" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1143.40" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (8 samples, 0.02%; -0.01%)</title><rect x="712.1" y="453" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="715.06" y="463.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (305 samples, 0.64%; +0.01%)</title><rect x="572.4" y="437" width="7.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="575.36" y="447.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.03%; +0.02%)</title><rect x="481.1" y="309" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="484.07" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.01%)</title><rect x="823.0" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="826.01" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (18 samples, 0.04%; +0.02%)</title><rect x="628.1" y="485" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="631.08" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (5 samples, 0.01%; 0.00%)</title><rect x="643.6" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="646.60" y="479.5" ></text>
</g>
<g >
<title>make_combined_reader (735 samples, 1.54%; -0.01%)</title><rect x="427.3" y="325" width="18.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="430.29" y="335.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (6 samples, 0.01%; 0.00%)</title><rect x="1140.5" y="149" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.45" y="159.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.01%; +0.01%)</title><rect x="1061.0" y="341" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1063.96" y="351.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (6 samples, 0.01%; -0.00%)</title><rect x="829.7" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="832.72" y="447.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (41 samples, 0.09%; -0.00%)</title><rect x="546.1" y="325" width="1.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="549.14" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (8 samples, 0.02%; -0.00%)</title><rect x="686.8" y="469" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="689.83" y="479.5" ></text>
</g>
<g >
<title>dht::tri_compare (27 samples, 0.06%; +0.01%)</title><rect x="1075.2" y="245" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1078.16" y="255.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (51 samples, 0.11%; 0.00%)</title><rect x="17.7" y="325" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.71" y="335.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (19 samples, 0.04%; +0.02%)</title><rect x="1059.1" y="341" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1062.13" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (41 samples, 0.09%; +0.00%)</title><rect x="15.5" y="277" width="1.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="18.45" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (39 samples, 0.08%; -0.01%)</title><rect x="661.0" y="453" width="1.0" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="664.05" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (64 samples, 0.13%; +0.01%)</title><rect x="561.2" y="373" width="1.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="564.18" y="383.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (14 samples, 0.03%; +0.02%)</title><rect x="571.9" y="405" width="0.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="574.94" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (6 samples, 0.01%; -0.00%)</title><rect x="675.2" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="678.15" y="287.5" ></text>
</g>
<g >
<title>row::compact_and_expire (776 samples, 1.63%; +0.02%)</title><rect x="362.1" y="213" width="19.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="365.15" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (18 samples, 0.04%; -0.01%)</title><rect x="262.4" y="341" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="265.38" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.01%; +0.01%)</title><rect x="1116.2" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1119.23" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (58 samples, 0.12%; -0.01%)</title><rect x="850.1" y="453" width="1.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="853.10" y="463.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (7 samples, 0.01%; -0.00%)</title><rect x="765.1" y="357" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="768.06" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (23 samples, 0.05%; +0.01%)</title><rect x="502.2" y="277" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="505.24" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (19 samples, 0.04%; 0.00%)</title><rect x="1140.4" y="229" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.40" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (12 samples, 0.03%; +0.00%)</title><rect x="307.1" y="165" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="310.07" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (25 samples, 0.05%; -0.01%)</title><rect x="761.3" y="373" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="764.29" y="383.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (172 samples, 0.36%; -0.07%)</title><rect x="1025.1" y="181" width="4.2" height="15.0" fill="rgb(138,138,255)" rx="2" ry="2" />
<text  x="1028.07" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="982.7" y="309" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="985.71" y="319.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (6 samples, 0.01%; 0.00%)</title><rect x="694.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.14" y="431.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (45 samples, 0.09%; 0.00%)</title><rect x="727.1" y="389" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="730.08" y="399.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; -0.01%)</title><rect x="576.7" y="405" width="0.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="579.70" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (6 samples, 0.01%; +0.01%)</title><rect x="215.3" y="181" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="218.31" y="191.5" ></text>
</g>
<g >
<title>row::row (1,406 samples, 2.95%; +0.01%)</title><rect x="165.6" y="149" width="34.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="168.61" y="159.5" >ro..</text>
</g>
<g >
<title>database::find_uuid (267 samples, 0.56%; +0.01%)</title><rect x="748.6" y="389" width="6.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="751.60" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.01%)</title><rect x="998.2" y="277" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1001.22" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (5 samples, 0.01%; -0.00%)</title><rect x="975.0" y="357" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="977.97" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (27 samples, 0.06%; 0.00%)</title><rect x="1139.4" y="373" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.36" y="383.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (82 samples, 0.17%; +0.02%)</title><rect x="1118.3" y="405" width="2.0" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="1121.27" y="415.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (11 samples, 0.02%; -0.02%)</title><rect x="538.8" y="389" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="541.78" y="399.5" ></text>
</g>
<g >
<title>sstring_hash::operator (16 samples, 0.03%; +0.00%)</title><rect x="822.2" y="309" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="825.24" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%; +0.01%)</title><rect x="660.6" y="437" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="663.55" y="447.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (5 samples, 0.01%; 0.00%)</title><rect x="397.8" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="400.76" y="271.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (11,358 samples, 23.86%; -0.00%)</title><rect x="857.8" y="485" width="281.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="860.81" y="495.5" >seastar::concrete_execution_stage&lt;sea..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (7 samples, 0.01%; 0.00%)</title><rect x="655.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="658.40" y="479.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (7 samples, 0.01%; +0.01%)</title><rect x="322.9" y="181" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="325.93" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (5 samples, 0.01%; -0.00%)</title><rect x="847.3" y="421" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="850.30" y="431.5" ></text>
</g>
<g >
<title>compound_type&lt; (5 samples, 0.01%; +0.01%)</title><rect x="467.6" y="229" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="470.64" y="239.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%; +0.00%)</title><rect x="493.1" y="197" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="496.09" y="207.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (14 samples, 0.03%; -0.00%)</title><rect x="738.7" y="261" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="741.66" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (36 samples, 0.08%; 0.00%)</title><rect x="856.9" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.92" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (90 samples, 0.19%; +0.03%)</title><rect x="650.8" y="453" width="2.2" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="653.76" y="463.5" ></text>
</g>
<g >
<title>database::find_column_family (39 samples, 0.08%; +0.01%)</title><rect x="747.6" y="373" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="750.56" y="383.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (116 samples, 0.24%; +0.05%)</title><rect x="174.3" y="101" width="2.9" height="15.0" fill="rgb(255,155,155)" rx="2" ry="2" />
<text  x="177.31" y="111.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (38 samples, 0.08%; -0.00%)</title><rect x="674.7" y="357" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="677.71" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (77 samples, 0.16%; -0.00%)</title><rect x="811.3" y="389" width="1.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="814.31" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (62 samples, 0.13%; 0.00%)</title><rect x="15.1" y="373" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.06" y="383.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (6 samples, 0.01%; +0.01%)</title><rect x="674.0" y="485" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="676.99" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (18 samples, 0.04%; -0.00%)</title><rect x="982.2" y="293" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="985.16" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (5 samples, 0.01%; 0.00%)</title><rect x="16.6" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.62" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (5 samples, 0.01%; -0.02%)</title><rect x="1032.1" y="229" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1035.08" y="239.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::function&lt;partition_presence_checker_result  (5 samples, 0.01%; -0.00%)</title><rect x="595.8" y="421" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="598.84" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (12 samples, 0.03%; -0.04%)</title><rect x="362.9" y="197" width="0.3" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="365.89" y="207.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (202 samples, 0.42%; +0.02%)</title><rect x="130.7" y="261" width="5.0" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="133.74" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (20 samples, 0.04%; +0.02%)</title><rect x="527.7" y="341" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="530.70" y="351.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (1,024 samples, 2.15%; +0.03%)</title><rect x="478.1" y="325" width="25.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="481.07" y="335.5" >m..</text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.01%; +0.01%)</title><rect x="781.6" y="149" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="784.64" y="159.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (19 samples, 0.04%; -0.00%)</title><rect x="942.6" y="373" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="945.63" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (30 samples, 0.06%; 0.00%)</title><rect x="1140.1" y="325" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.13" y="335.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (39 samples, 0.08%; +0.03%)</title><rect x="884.2" y="261" width="1.0" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="887.23" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="923.1" y="357" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="926.10" y="367.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (214 samples, 0.45%; 0.00%)</title><rect x="14.8" y="453" width="5.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.76" y="463.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (5 samples, 0.01%; 0.00%)</title><rect x="1139.4" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.39" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (10 samples, 0.02%; +0.01%)</title><rect x="71.4" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="74.40" y="399.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (35 samples, 0.07%; +0.00%)</title><rect x="479.8" y="309" width="0.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="482.83" y="319.5" ></text>
</g>
<g >
<title>query_state::query_state (271 samples, 0.57%; +0.01%)</title><rect x="582.4" y="437" width="6.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="585.43" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (13 samples, 0.03%; +0.01%)</title><rect x="992.7" y="325" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="995.75" y="335.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (63 samples, 0.13%; +0.01%)</title><rect x="586.7" y="389" width="1.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="589.74" y="399.5" ></text>
</g>
<g >
<title>operator delete (27 samples, 0.06%; +0.01%)</title><rect x="811.4" y="373" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="814.38" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (5 samples, 0.01%; +0.00%)</title><rect x="635.1" y="469" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="638.12" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (14 samples, 0.03%; +0.01%)</title><rect x="1070.4" y="325" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1073.35" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (9 samples, 0.02%; -0.00%)</title><rect x="732.7" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="735.71" y="367.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (122 samples, 0.26%; -0.00%)</title><rect x="736.0" y="325" width="3.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="739.03" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (280 samples, 0.59%; -0.01%)</title><rect x="246.7" y="309" width="7.0" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="249.74" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (32 samples, 0.07%; +0.00%)</title><rect x="898.9" y="277" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="901.90" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (783 samples, 1.64%; +0.00%)</title><rect x="878.7" y="341" width="19.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="881.65" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (21 samples, 0.04%; -0.02%)</title><rect x="556.4" y="261" width="0.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="559.38" y="271.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (125 samples, 0.26%; +0.08%)</title><rect x="62.3" y="437" width="3.1" height="15.0" fill="rgb(255,125,125)" rx="2" ry="2" />
<text  x="65.28" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.01%)</title><rect x="689.6" y="469" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="692.55" y="479.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (200 samples, 0.42%; -0.01%)</title><rect x="716.1" y="389" width="5.0" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="719.13" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (6 samples, 0.01%; +0.00%)</title><rect x="998.1" y="277" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1001.08" y="287.5" ></text>
</g>
<g >
<title>posix_memalign (59 samples, 0.12%; -0.01%)</title><rect x="193.8" y="85" width="1.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="196.82" y="95.5" ></text>
</g>
<g >
<title>[[vdso]] (252 samples, 0.53%; -0.03%)</title><rect x="1179.4" y="613" width="6.2" height="15.0" fill="rgb(179,179,255)" rx="2" ry="2" />
<text  x="1182.37" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (23 samples, 0.05%; +0.01%)</title><rect x="32.3" y="485" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="35.26" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (42 samples, 0.09%; -0.00%)</title><rect x="716.9" y="341" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="719.94" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (5 samples, 0.01%; -0.00%)</title><rect x="962.2" y="373" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="965.18" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="702.0" y="485" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="705.05" y="495.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (6 samples, 0.01%; -0.01%)</title><rect x="155.2" y="213" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="158.23" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (6 samples, 0.01%; +0.00%)</title><rect x="851.5" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="854.54" y="479.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (9 samples, 0.02%; +0.00%)</title><rect x="16.2" y="261" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="19.20" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (40 samples, 0.08%; 0.00%)</title><rect x="1140.1" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.05" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (34 samples, 0.07%; 0.00%)</title><rect x="787.0" y="149" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="789.97" y="159.5" ></text>
</g>
<g >
<title>operator new (64 samples, 0.13%; -0.01%)</title><rect x="271.1" y="277" width="1.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="274.13" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (14 samples, 0.03%; 0.00%)</title><rect x="856.3" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.32" y="479.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (7 samples, 0.01%; +0.01%)</title><rect x="159.3" y="229" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="162.29" y="239.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1,144 samples, 2.40%; +0.02%)</title><rect x="1011.6" y="277" width="28.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1014.61" y="287.5" >se..</text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (5 samples, 0.01%; +0.01%)</title><rect x="524.3" y="325" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="527.30" y="335.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (8 samples, 0.02%; +0.00%)</title><rect x="787.5" y="117" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="790.46" y="127.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (8 samples, 0.02%; +0.01%)</title><rect x="818.6" y="261" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="821.62" y="271.5" ></text>
</g>
<g >
<title>abstract_type::bound_value_needs_to_be_reserialized (5 samples, 0.01%; 0.00%)</title><rect x="884.0" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.96" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (7 samples, 0.01%; 0.00%)</title><rect x="855.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="858.03" y="511.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (7 samples, 0.01%; -0.04%)</title><rect x="590.6" y="405" width="0.2" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="593.63" y="415.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.01%)</title><rect x="783.0" y="197" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="786.00" y="207.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (5 samples, 0.01%; +0.01%)</title><rect x="1039.7" y="261" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1042.69" y="271.5" ></text>
</g>
<g >
<title>reader_permit::consume (17 samples, 0.04%; -0.01%)</title><rect x="272.7" y="277" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="275.72" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (22 samples, 0.05%; +0.00%)</title><rect x="639.3" y="421" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="642.29" y="431.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (113 samples, 0.24%; 0.00%)</title><rect x="343.5" y="165" width="2.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="346.48" y="175.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (282 samples, 0.59%; 0.00%)</title><rect x="14.2" y="597" width="7.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.21" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="1143.9" y="501" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1146.90" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (8 samples, 0.02%; +0.02%)</title><rect x="1053.1" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1056.08" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.05%; +0.01%)</title><rect x="611.4" y="373" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="614.43" y="383.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (33 samples, 0.07%; -0.00%)</title><rect x="617.0" y="485" width="0.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="619.98" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (5 samples, 0.01%; 0.00%)</title><rect x="310.1" y="181" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="313.12" y="191.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (6 samples, 0.01%; -0.01%)</title><rect x="275.1" y="325" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="278.14" y="335.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (67 samples, 0.14%; -0.01%)</title><rect x="781.2" y="197" width="1.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="784.17" y="207.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (344 samples, 0.72%; +0.03%)</title><rect x="369.7" y="165" width="8.6" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="372.73" y="175.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (57 samples, 0.12%; -0.04%)</title><rect x="821.2" y="325" width="1.4" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="824.22" y="335.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (636 samples, 1.34%; -0.00%)</title><rect x="724.9" y="421" width="15.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="727.93" y="431.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (5 samples, 0.01%; +0.00%)</title><rect x="1072.5" y="325" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1075.54" y="335.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (46,664 samples, 98.02%; 0.00%)</title><rect x="21.7" y="565" width="1156.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.67" y="575.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (6 samples, 0.01%; +0.00%)</title><rect x="675.2" y="261" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="678.15" y="271.5" ></text>
</g>
<g >
<title>free (90 samples, 0.19%; -0.04%)</title><rect x="392.8" y="181" width="2.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="395.81" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (7 samples, 0.01%; +0.00%)</title><rect x="1070.7" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1073.70" y="335.5" ></text>
</g>
<g >
<title>std::type_info::operator== (7 samples, 0.01%; +0.01%)</title><rect x="1069.0" y="293" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1072.02" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (9 samples, 0.02%; -0.00%)</title><rect x="1070.9" y="325" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1073.87" y="335.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (277 samples, 0.58%; +0.00%)</title><rect x="618.0" y="501" width="6.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="621.00" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (24 samples, 0.05%; +0.02%)</title><rect x="1037.2" y="229" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1040.16" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (10 samples, 0.02%; +0.00%)</title><rect x="436.6" y="261" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="439.56" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (152 samples, 0.32%; +0.02%)</title><rect x="807.0" y="357" width="3.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="809.99" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (13 samples, 0.03%; +0.02%)</title><rect x="1151.7" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1154.70" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1,207 samples, 2.54%; -0.01%)</title><rect x="542.4" y="421" width="29.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="545.37" y="431.5" >st..</text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (18 samples, 0.04%; +0.01%)</title><rect x="916.1" y="357" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="919.11" y="367.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (13 samples, 0.03%; -0.00%)</title><rect x="1001.9" y="293" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1004.87" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (150 samples, 0.32%; -0.01%)</title><rect x="217.1" y="197" width="3.7" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="220.09" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (9 samples, 0.02%; -0.01%)</title><rect x="824.1" y="405" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="827.15" y="415.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (40 samples, 0.08%; -0.01%)</title><rect x="74.3" y="389" width="1.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="77.27" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.01%; +0.00%)</title><rect x="743.4" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="746.44" y="335.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; +0.00%)</title><rect x="597.0" y="421" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="599.98" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (37 samples, 0.08%; +0.04%)</title><rect x="319.7" y="181" width="0.9" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="322.71" y="191.5" ></text>
</g>
<g >
<title>reader_permit::set_max_result_size (6 samples, 0.01%; -0.01%)</title><rect x="66.3" y="453" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="69.34" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.00%)</title><rect x="130.2" y="229" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="133.22" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (7 samples, 0.01%; +0.01%)</title><rect x="534.8" y="373" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="537.81" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (11 samples, 0.02%; 0.00%)</title><rect x="395.3" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="398.29" y="207.5" ></text>
</g>
<g >
<title>tombstone::apply (8 samples, 0.02%; -0.01%)</title><rect x="382.4" y="197" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="385.40" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (14 samples, 0.03%; +0.01%)</title><rect x="624.5" y="469" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="627.51" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (7 samples, 0.01%; 0.00%)</title><rect x="1176.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.00" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (10 samples, 0.02%; +0.01%)</title><rect x="928.4" y="357" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="931.42" y="367.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (124 samples, 0.26%; -0.00%)</title><rect x="839.4" y="421" width="3.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="842.44" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (69 samples, 0.14%; -0.02%)</title><rect x="373.7" y="149" width="1.7" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="376.70" y="159.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%; -0.00%)</title><rect x="562.3" y="341" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="565.35" y="351.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (9 samples, 0.02%; +0.01%)</title><rect x="79.8" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="82.82" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (603 samples, 1.27%; -0.03%)</title><rect x="366.0" y="181" width="14.9" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="368.99" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (6 samples, 0.01%; -0.01%)</title><rect x="442.3" y="261" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="445.28" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (9 samples, 0.02%; 0.00%)</title><rect x="952.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="955.49" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (8 samples, 0.02%; -0.01%)</title><rect x="211.6" y="117" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="214.57" y="127.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (60 samples, 0.13%; +0.06%)</title><rect x="485.8" y="277" width="1.5" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="488.83" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (21 samples, 0.04%; -0.01%)</title><rect x="819.7" y="293" width="0.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="822.73" y="303.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (25 samples, 0.05%; -0.07%)</title><rect x="1071.9" y="325" width="0.6" height="15.0" fill="rgb(138,138,255)" rx="2" ry="2" />
<text  x="1074.92" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.01%; 0.00%)</title><rect x="17.3" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.26" y="335.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (697 samples, 1.46%; -0.00%)</title><rect x="172.9" y="117" width="17.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="175.92" y="127.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.03%; -0.00%)</title><rect x="828.0" y="373" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="831.01" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (5 samples, 0.01%; +0.00%)</title><rect x="1093.8" y="341" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1096.80" y="351.5" ></text>
</g>
<g >
<title>operator new (77 samples, 0.16%; -0.00%)</title><rect x="1159.4" y="437" width="1.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1162.36" y="447.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (6 samples, 0.01%; 0.00%)</title><rect x="408.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="411.03" y="351.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (52 samples, 0.11%; +0.00%)</title><rect x="1131.9" y="389" width="1.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1134.85" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (26 samples, 0.05%; +0.01%)</title><rect x="252.5" y="277" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="255.51" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (41 samples, 0.09%; +0.01%)</title><rect x="1057.0" y="293" width="1.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1060.04" y="303.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (81 samples, 0.17%; -0.00%)</title><rect x="757.3" y="389" width="2.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="760.35" y="399.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (21 samples, 0.04%; +0.00%)</title><rect x="909.0" y="357" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="912.04" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (450 samples, 0.95%; +0.00%)</title><rect x="663.4" y="501" width="11.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="666.40" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; +0.01%)</title><rect x="34.3" y="453" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="37.29" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,228 samples, 4.68%; -0.02%)</title><rect x="160.8" y="213" width="55.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="163.78" y="223.5" >logal..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (9 samples, 0.02%; +0.01%)</title><rect x="1134.7" y="421" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1137.68" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (10 samples, 0.02%; +0.01%)</title><rect x="657.6" y="485" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="660.60" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (172 samples, 0.36%; +0.01%)</title><rect x="1113.8" y="373" width="4.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1116.78" y="383.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (18 samples, 0.04%; -0.00%)</title><rect x="137.0" y="261" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="139.98" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (11 samples, 0.02%; -0.00%)</title><rect x="511.0" y="325" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="513.97" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (129 samples, 0.27%; +0.01%)</title><rect x="667.3" y="485" width="3.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="670.27" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (8 samples, 0.02%; +0.00%)</title><rect x="217.7" y="181" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="220.69" y="191.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (8 samples, 0.02%; -0.02%)</title><rect x="792.4" y="117" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="795.44" y="127.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (9 samples, 0.02%; 0.00%)</title><rect x="856.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.39" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (2,743 samples, 5.76%; +0.07%)</title><rect x="872.3" y="421" width="68.0" height="15.0" fill="rgb(255,134,134)" rx="2" ry="2" />
<text  x="875.33" y="431.5" >cql3::r..</text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (26 samples, 0.05%; 0.00%)</title><rect x="309.5" y="181" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="312.47" y="191.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (20 samples, 0.04%; 0.00%)</title><rect x="857.3" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.29" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (19 samples, 0.04%; -0.02%)</title><rect x="321.3" y="181" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="324.30" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (22 samples, 0.05%; +0.00%)</title><rect x="382.9" y="197" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="385.87" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (16 samples, 0.03%; +0.01%)</title><rect x="58.2" y="437" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="61.19" y="447.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (8 samples, 0.02%; +0.01%)</title><rect x="415.7" y="389" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="418.71" y="399.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (20 samples, 0.04%; +0.01%)</title><rect x="223.6" y="213" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="226.59" y="223.5" ></text>
</g>
<g >
<title>std::variant&lt;fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (21 samples, 0.04%; +0.01%)</title><rect x="899.8" y="309" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="902.82" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (12 samples, 0.03%; 0.00%)</title><rect x="664.4" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="667.45" y="495.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (168 samples, 0.35%; +0.01%)</title><rect x="843.3" y="437" width="4.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="846.26" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (34 samples, 0.07%; -0.01%)</title><rect x="682.3" y="453" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="685.32" y="463.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (21 samples, 0.04%; +0.01%)</title><rect x="1102.7" y="389" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1105.70" y="399.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (12 samples, 0.03%; +0.01%)</title><rect x="876.3" y="389" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="879.35" y="399.5" ></text>
</g>
<g >
<title>operator delete (36 samples, 0.08%; -0.00%)</title><rect x="577.7" y="389" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="580.72" y="399.5" ></text>
</g>
<g >
<title>operator new (26 samples, 0.05%; +0.00%)</title><rect x="1155.2" y="437" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1158.22" y="447.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (11 samples, 0.02%; -0.01%)</title><rect x="1082.4" y="277" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1085.43" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (7 samples, 0.01%; +0.01%)</title><rect x="770.4" y="309" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="773.41" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (16 samples, 0.03%; +0.03%)</title><rect x="1120.7" y="405" width="0.4" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="1123.72" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (49 samples, 0.10%; +0.00%)</title><rect x="930.1" y="405" width="1.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="933.11" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; +0.01%)</title><rect x="961.9" y="373" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="964.89" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (55 samples, 0.12%; -0.01%)</title><rect x="1032.8" y="197" width="1.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1035.75" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (19 samples, 0.04%; -0.01%)</title><rect x="593.1" y="437" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="596.08" y="447.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.01%; -0.02%)</title><rect x="752.2" y="293" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="755.22" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (568 samples, 1.19%; +0.01%)</title><rect x="1020.7" y="245" width="14.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1023.73" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (65 samples, 0.14%; +0.01%)</title><rect x="817.7" y="309" width="1.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="820.65" y="319.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (7 samples, 0.01%; 0.00%)</title><rect x="894.5" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="897.52" y="303.5" ></text>
</g>
<g >
<title>cql3::to_managed_bytes_opt (20 samples, 0.04%; -0.01%)</title><rect x="901.3" y="357" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="904.28" y="367.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (5 samples, 0.01%; -0.02%)</title><rect x="875.3" y="405" width="0.1" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="878.28" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (26 samples, 0.05%; +0.01%)</title><rect x="207.0" y="149" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="209.98" y="159.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (347 samples, 0.73%; +0.01%)</title><rect x="785.8" y="197" width="8.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="788.83" y="207.5" ></text>
</g>
<g >
<title>operator delete (52 samples, 0.11%; +0.03%)</title><rect x="273.6" y="293" width="1.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="276.61" y="303.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (19 samples, 0.04%; -0.00%)</title><rect x="94.5" y="437" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="97.50" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (29 samples, 0.06%; +0.01%)</title><rect x="682.4" y="437" width="0.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="685.44" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.01%)</title><rect x="1040.0" y="277" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1042.97" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (12 samples, 0.03%; +0.00%)</title><rect x="1152.1" y="485" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1155.05" y="495.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (26 samples, 0.05%; +0.00%)</title><rect x="809.6" y="293" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="812.65" y="303.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (17 samples, 0.04%; 0.00%)</title><rect x="642.9" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.86" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (21 samples, 0.04%; +0.02%)</title><rect x="31.0" y="469" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="34.02" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (10 samples, 0.02%; +0.00%)</title><rect x="77.8" y="453" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="80.82" y="463.5" ></text>
</g>
<g >
<title>operator new (66 samples, 0.14%; +0.00%)</title><rect x="980.5" y="293" width="1.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="983.53" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (36 samples, 0.08%; +0.03%)</title><rect x="198.8" y="117" width="0.8" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="201.75" y="127.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (89 samples, 0.19%; -0.00%)</title><rect x="840.1" y="389" width="2.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="843.13" y="399.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (5 samples, 0.01%; 0.00%)</title><rect x="1061.3" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1064.28" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; -0.00%)</title><rect x="933.2" y="389" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="936.23" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (1,803 samples, 3.79%; -0.04%)</title><rect x="1050.1" y="357" width="44.7" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="1053.13" y="367.5" >serv..</text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (29 samples, 0.06%; +0.01%)</title><rect x="307.8" y="181" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="310.76" y="191.5" ></text>
</g>
<g >
<title>db::block_for (6 samples, 0.01%; 0.00%)</title><rect x="1059.6" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1062.60" y="351.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::make&lt;managed_bytes&gt; (6 samples, 0.01%; +0.01%)</title><rect x="900.3" y="325" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="903.34" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (609 samples, 1.28%; +0.01%)</title><rect x="1152.4" y="485" width="15.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1155.40" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (11,004 samples, 23.11%; -0.06%)</title><rect x="865.4" y="437" width="272.8" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="868.44" y="447.5" >cql3::statements::select_statement::..</text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (365 samples, 0.77%; -0.02%)</title><rect x="428.0" y="309" width="9.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="431.00" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.02%; -0.00%)</title><rect x="1018.0" y="197" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1021.00" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (14 samples, 0.03%; -0.01%)</title><rect x="828.0" y="357" width="0.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="831.04" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="1065.0" y="325" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1068.05" y="335.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (17 samples, 0.04%; +0.02%)</title><rect x="308.5" y="181" width="0.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="311.51" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (9 samples, 0.02%; -0.01%)</title><rect x="270.0" y="293" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="273.04" y="303.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (6 samples, 0.01%; 0.00%)</title><rect x="21.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.30" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (40 samples, 0.08%; +0.02%)</title><rect x="153.9" y="181" width="1.0" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="156.94" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (20 samples, 0.04%; +0.02%)</title><rect x="406.7" y="373" width="0.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="409.69" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (81 samples, 0.17%; -0.00%)</title><rect x="38.6" y="469" width="2.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="41.60" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (24 samples, 0.05%; +0.01%)</title><rect x="73.0" y="389" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="75.96" y="399.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (4,188 samples, 8.80%; -0.04%)</title><rect x="722.2" y="437" width="103.8" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="725.20" y="447.5" >cql3::query_..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (51 samples, 0.11%; -0.01%)</title><rect x="218.7" y="165" width="1.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="221.70" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (114 samples, 0.24%; +0.01%)</title><rect x="826.3" y="437" width="2.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="829.25" y="447.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (109 samples, 0.23%; +0.01%)</title><rect x="718.2" y="325" width="2.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="721.23" y="335.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (8 samples, 0.02%; -0.01%)</title><rect x="1046.9" y="277" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1049.88" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (152 samples, 0.32%; +0.00%)</title><rect x="979.2" y="341" width="3.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="982.19" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (11 samples, 0.02%; -0.02%)</title><rect x="79.3" y="453" width="0.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="82.30" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (25 samples, 0.05%; +0.00%)</title><rect x="623.8" y="469" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="626.80" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (69 samples, 0.14%; 0.00%)</title><rect x="903.1" y="357" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="906.07" y="367.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (192 samples, 0.40%; 0.00%)</title><rect x="1124.4" y="421" width="4.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.36" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (105 samples, 0.22%; +0.02%)</title><rect x="980.0" y="309" width="2.6" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="983.03" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (5 samples, 0.01%; +0.00%)</title><rect x="444.7" y="277" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="447.71" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (201 samples, 0.42%; +0.00%)</title><rect x="15.0" y="389" width="5.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="18.01" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (11 samples, 0.02%; +0.01%)</title><rect x="711.8" y="453" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="714.79" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (51 samples, 0.11%; -0.02%)</title><rect x="845.6" y="341" width="1.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="848.61" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (38 samples, 0.08%; -0.05%)</title><rect x="971.9" y="309" width="0.9" height="15.0" fill="rgb(158,158,255)" rx="2" ry="2" />
<text  x="974.88" y="319.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (65 samples, 0.14%; 0.00%)</title><rect x="230.7" y="181" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="233.65" y="191.5" ></text>
</g>
<g >
<title>main (46,664 samples, 98.02%; 0.00%)</title><rect x="21.7" y="613" width="1156.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.67" y="623.5" >main</text>
</g>
<g >
<title>reader_permit::consume (6 samples, 0.01%; +0.01%)</title><rect x="493.6" y="197" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="496.62" y="207.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (12,310 samples, 25.86%; +0.03%)</title><rect x="107.1" y="421" width="305.1" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="110.07" y="431.5" >query::consume_page&lt;</text>
</g>
<g >
<title>mutation_fragment::operator= (22 samples, 0.05%; -0.00%)</title><rect x="133.5" y="229" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="136.46" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (11,117 samples, 23.35%; -0.04%)</title><rect x="863.5" y="453" width="275.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="866.48" y="463.5" >seastar::noncopyable_function&lt;seasta..</text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (6 samples, 0.01%; +0.01%)</title><rect x="715.7" y="421" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="718.68" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (237 samples, 0.50%; +0.04%)</title><rect x="1082.7" y="277" width="5.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1085.72" y="287.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (29 samples, 0.06%; -0.00%)</title><rect x="562.8" y="373" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="565.77" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (6 samples, 0.01%; +0.01%)</title><rect x="562.1" y="341" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="565.10" y="351.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;long, std::allocator&lt;long&gt; &gt;::push_back_impl&lt;long const&amp;&gt; (5 samples, 0.01%; +0.01%)</title><rect x="591.6" y="389" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="594.62" y="399.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (603 samples, 1.27%; -0.02%)</title><rect x="780.6" y="229" width="15.0" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="783.65" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (43 samples, 0.09%; +0.01%)</title><rect x="875.6" y="405" width="1.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="878.58" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (6,397 samples, 13.44%; -0.02%)</title><rect x="945.2" y="421" width="158.6" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="948.21" y="431.5" >cql3::statements::se..</text>
</g>
<g >
<title>reader_permit::~reader_permit (15 samples, 0.03%; +0.01%)</title><rect x="522.2" y="245" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="525.22" y="255.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (5 samples, 0.01%; -0.01%)</title><rect x="193.3" y="85" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="196.30" y="95.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1,770 samples, 3.72%; -0.01%)</title><rect x="164.5" y="181" width="43.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="167.52" y="191.5" >muta..</text>
</g>
<g >
<title>mutation_reader_merger::add_readers (149 samples, 0.31%; +0.01%)</title><rect x="431.4" y="277" width="3.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="434.35" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (9 samples, 0.02%; -0.01%)</title><rect x="596.0" y="437" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="598.96" y="447.5" ></text>
</g>
<g >
<title>operator new (82 samples, 0.17%; +0.00%)</title><rect x="1035.7" y="261" width="2.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1038.73" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (8 samples, 0.02%; +0.00%)</title><rect x="1175.0" y="421" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1177.95" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (218 samples, 0.46%; +0.00%)</title><rect x="733.8" y="357" width="5.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="736.77" y="367.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (8 samples, 0.02%; +0.01%)</title><rect x="406.3" y="357" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="409.34" y="367.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (864 samples, 1.81%; -0.04%)</title><rect x="481.8" y="309" width="21.4" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="484.82" y="319.5" >s..</text>
</g>
<g >
<title>schema_registry_entry::get_schema (12 samples, 0.03%; +0.02%)</title><rect x="972.8" y="341" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="975.82" y="351.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (9 samples, 0.02%; 0.00%)</title><rect x="594.2" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="597.22" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (31 samples, 0.07%; 0.00%)</title><rect x="72.2" y="373" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.19" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%; -0.00%)</title><rect x="1139.2" y="453" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1142.19" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (23 samples, 0.05%; +0.04%)</title><rect x="871.1" y="421" width="0.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="874.09" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (6 samples, 0.01%; +0.01%)</title><rect x="730.0" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="733.03" y="319.5" ></text>
</g>
<g >
<title>seastar::app_template::run (46,664 samples, 98.02%; 0.00%)</title><rect x="21.7" y="597" width="1156.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.67" y="607.5" >seastar::app_template::run</text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (91 samples, 0.19%; -0.02%)</title><rect x="718.7" y="309" width="2.2" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="721.68" y="319.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (23 samples, 0.05%; 0.00%)</title><rect x="1139.4" y="309" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.39" y="319.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; -0.00%)</title><rect x="653.4" y="485" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="656.39" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (312 samples, 0.66%; -0.03%)</title><rect x="182.2" y="85" width="7.8" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="185.24" y="95.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (6 samples, 0.01%; +0.00%)</title><rect x="1028.8" y="165" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1031.79" y="175.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (23 samples, 0.05%; 0.00%)</title><rect x="585.8" y="405" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="588.85" y="415.5" ></text>
</g>
<g >
<title>operator new (14 samples, 0.03%; +0.00%)</title><rect x="539.1" y="405" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="542.07" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (8 samples, 0.02%; -0.01%)</title><rect x="861.8" y="453" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="864.82" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (7 samples, 0.01%; +0.01%)</title><rect x="519.1" y="309" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="522.07" y="319.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.06%; 0.00%)</title><rect x="1139.3" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.34" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (22 samples, 0.05%; +0.01%)</title><rect x="672.4" y="453" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="675.38" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (6 samples, 0.01%; 0.00%)</title><rect x="277.5" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="280.55" y="367.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (7 samples, 0.01%; +0.01%)</title><rect x="608.5" y="421" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="611.45" y="431.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (11 samples, 0.02%; +0.01%)</title><rect x="882.2" y="293" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="885.25" y="303.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (123 samples, 0.26%; +0.08%)</title><rect x="1130.1" y="405" width="3.0" height="15.0" fill="rgb(255,125,125)" rx="2" ry="2" />
<text  x="1133.09" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (91 samples, 0.19%; -0.00%)</title><rect x="635.8" y="453" width="2.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="638.77" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (114 samples, 0.24%; -0.00%)</title><rect x="604.4" y="405" width="2.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="607.36" y="415.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (51 samples, 0.11%; +0.00%)</title><rect x="793.0" y="117" width="1.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="796.01" y="127.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (11 samples, 0.02%; -0.01%)</title><rect x="252.0" y="277" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="254.97" y="287.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (7 samples, 0.01%; +0.01%)</title><rect x="928.9" y="389" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="931.87" y="399.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (15 samples, 0.03%; +0.01%)</title><rect x="511.2" y="341" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="514.24" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (121 samples, 0.25%; -0.01%)</title><rect x="941.3" y="405" width="3.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="944.26" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::take_value (5 samples, 0.01%; +0.00%)</title><rect x="531.8" y="405" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="534.76" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (96 samples, 0.20%; -0.03%)</title><rect x="218.1" y="181" width="2.3" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="221.06" y="191.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (6 samples, 0.01%; -0.01%)</title><rect x="604.0" y="405" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="607.04" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (30 samples, 0.06%; +0.04%)</title><rect x="685.2" y="485" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="688.17" y="495.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (6 samples, 0.01%; +0.00%)</title><rect x="783.0" y="213" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="785.98" y="223.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (33 samples, 0.07%; +0.01%)</title><rect x="206.8" y="165" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="209.81" y="175.5" ></text>
</g>
<g >
<title>locator::token_metadata::is_any_node_being_replaced (5 samples, 0.01%; 0.00%)</title><rect x="1088.9" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1091.89" y="303.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (89 samples, 0.19%; -0.01%)</title><rect x="11.7" y="581" width="2.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="14.74" y="591.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (54 samples, 0.11%; -0.02%)</title><rect x="665.7" y="469" width="1.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="668.71" y="479.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (5 samples, 0.01%; +0.00%)</title><rect x="513.9" y="325" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="516.87" y="335.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (28 samples, 0.06%; 0.00%)</title><rect x="1139.3" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.34" y="495.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (24 samples, 0.05%; +0.01%)</title><rect x="348.3" y="165" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="351.34" y="175.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (877 samples, 1.84%; -0.00%)</title><rect x="1071.6" y="341" width="21.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1074.64" y="351.5" >s..</text>
</g>
<g >
<title>memtable::make_flat_reader (2,598 samples, 5.46%; -0.02%)</title><rect x="446.8" y="341" width="64.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="449.84" y="351.5" >memtabl..</text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (600 samples, 1.26%; -0.02%)</title><rect x="124.6" y="293" width="14.9" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="127.59" y="303.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (33 samples, 0.07%; -0.00%)</title><rect x="150.0" y="197" width="0.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="153.05" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.01%)</title><rect x="151.8" y="181" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="154.78" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (169 samples, 0.35%; -0.01%)</title><rect x="217.0" y="213" width="4.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="219.97" y="223.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (209 samples, 0.44%; -0.01%)</title><rect x="390.7" y="213" width="5.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="393.65" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (26 samples, 0.05%; -0.01%)</title><rect x="930.7" y="389" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="933.66" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (193 samples, 0.41%; +0.03%)</title><rect x="1129.7" y="421" width="4.8" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1132.72" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; -0.00%)</title><rect x="929.9" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="932.89" y="415.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (134 samples, 0.28%; +0.00%)</title><rect x="304.4" y="181" width="3.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="307.44" y="191.5" ></text>
</g>
<g >
<title>operator delete (34 samples, 0.07%; -0.01%)</title><rect x="554.1" y="277" width="0.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="557.09" y="287.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (24 samples, 0.05%; +0.00%)</title><rect x="549.2" y="293" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="552.21" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (20 samples, 0.04%; +0.00%)</title><rect x="63.7" y="421" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="66.74" y="431.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (5 samples, 0.01%; +0.00%)</title><rect x="636.7" y="405" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="639.68" y="415.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (3,408 samples, 7.16%; -0.10%)</title><rect x="299.0" y="229" width="84.5" height="15.0" fill="rgb(103,103,255)" rx="2" ry="2" />
<text  x="302.04" y="239.5" >compact_m..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (14 samples, 0.03%; +0.02%)</title><rect x="378.3" y="165" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="381.26" y="175.5" ></text>
</g>
<g >
<title>abstract_type::bound_value_needs_to_be_reserialized (9 samples, 0.02%; +0.00%)</title><rect x="882.0" y="293" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="885.02" y="303.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (655 samples, 1.38%; -0.01%)</title><rect x="543.7" y="357" width="16.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="546.73" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; -0.00%)</title><rect x="1099.5" y="373" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1102.48" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="683.7" y="453" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="686.70" y="463.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (41 samples, 0.09%; -0.00%)</title><rect x="674.7" y="373" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="677.71" y="383.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (38 samples, 0.08%; +0.07%)</title><rect x="75.7" y="453" width="1.0" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="78.71" y="463.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (29 samples, 0.06%; +0.00%)</title><rect x="835.1" y="357" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="838.08" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (584 samples, 1.23%; +0.01%)</title><rect x="227.3" y="261" width="14.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="230.33" y="271.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (25 samples, 0.05%; +0.01%)</title><rect x="61.4" y="437" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="64.43" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (13 samples, 0.03%; +0.01%)</title><rect x="620.7" y="469" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="623.72" y="479.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (22 samples, 0.05%; -0.02%)</title><rect x="236.0" y="197" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="239.01" y="207.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (9 samples, 0.02%; -0.07%)</title><rect x="462.8" y="277" width="0.2" height="15.0" fill="rgb(138,138,255)" rx="2" ry="2" />
<text  x="465.76" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (84 samples, 0.18%; -0.02%)</title><rect x="1091.1" y="325" width="2.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1094.10" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (8 samples, 0.02%; +0.00%)</title><rect x="904.8" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="907.78" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (64 samples, 0.13%; -0.04%)</title><rect x="980.6" y="277" width="1.6" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="983.58" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (44 samples, 0.09%; +0.00%)</title><rect x="753.9" y="325" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="756.88" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (255 samples, 0.54%; -0.01%)</title><rect x="748.8" y="373" width="6.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="751.84" y="383.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (7 samples, 0.01%; +0.01%)</title><rect x="636.1" y="437" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="639.06" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (24 samples, 0.05%; +0.03%)</title><rect x="854.4" y="501" width="0.6" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="857.44" y="511.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.05%; +0.01%)</title><rect x="603.2" y="421" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="606.20" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (27 samples, 0.06%; +0.03%)</title><rect x="434.0" y="261" width="0.7" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="437.00" y="271.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation::data&gt;::operator (5 samples, 0.01%; 0.00%)</title><rect x="1140.9" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.92" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="928.7" y="373" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="931.75" y="383.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (58 samples, 0.12%; +0.01%)</title><rect x="922.5" y="373" width="1.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="925.53" y="383.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (13 samples, 0.03%; -0.00%)</title><rect x="810.4" y="277" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="813.44" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.02%; -0.02%)</title><rect x="642.1" y="437" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="645.11" y="447.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (364 samples, 0.76%; +0.01%)</title><rect x="66.5" y="453" width="9.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="69.49" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;range_tombstone*&gt;::allocate (6 samples, 0.01%; +0.01%)</title><rect x="535.4" y="373" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="538.38" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (42 samples, 0.09%; -0.00%)</title><rect x="401.8" y="277" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="404.76" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (31 samples, 0.07%; +0.03%)</title><rect x="996.9" y="229" width="0.8" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="999.94" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.01%; -0.00%)</title><rect x="383.5" y="229" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="386.51" y="239.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (36 samples, 0.08%; -0.00%)</title><rect x="796.6" y="229" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="799.61" y="239.5" ></text>
</g>
<g >
<title>make_combined_reader (872 samples, 1.83%; +0.00%)</title><rect x="425.1" y="341" width="21.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="428.13" y="351.5" >m..</text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (19 samples, 0.04%; 0.00%)</title><rect x="1140.4" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.40" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (14 samples, 0.03%; -0.01%)</title><rect x="438.8" y="277" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="441.81" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (14 samples, 0.03%; -0.00%)</title><rect x="1047.5" y="293" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1050.45" y="303.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (5 samples, 0.01%; 0.00%)</title><rect x="1071.8" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1074.79" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; +0.01%)</title><rect x="794.9" y="197" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="797.87" y="207.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1,228 samples, 2.58%; -0.01%)</title><rect x="1144.9" y="501" width="30.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1147.89" y="511.5" >se..</text>
</g>
<g >
<title>single_node_cql_env::local_qp (6 samples, 0.01%; -0.01%)</title><rect x="842.8" y="453" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="845.76" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (7 samples, 0.01%; -0.01%)</title><rect x="659.1" y="469" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="662.09" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (11 samples, 0.02%; -0.00%)</title><rect x="1100.8" y="373" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1103.82" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (34 samples, 0.07%; +0.01%)</title><rect x="731.6" y="357" width="0.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="734.62" y="367.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (13 samples, 0.03%; 0.00%)</title><rect x="1140.4" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.40" y="223.5" ></text>
</g>
<g >
<title>schema::column_at (30 samples, 0.06%; -0.01%)</title><rect x="199.7" y="133" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="202.72" y="143.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (13 samples, 0.03%; -0.01%)</title><rect x="1111.2" y="373" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1114.18" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (20 samples, 0.04%; +0.01%)</title><rect x="936.4" y="405" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="939.43" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.00%)</title><rect x="629.2" y="469" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="632.22" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (15 samples, 0.03%; +0.01%)</title><rect x="411.8" y="405" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="414.79" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (40 samples, 0.08%; 0.00%)</title><rect x="1140.1" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.05" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (1,179 samples, 2.48%; -0.01%)</title><rect x="876.6" y="405" width="29.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="879.65" y="415.5" >cq..</text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (6 samples, 0.01%; -0.00%)</title><rect x="1029.0" y="165" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1031.96" y="175.5" ></text>
</g>
<g >
<title>operator delete (43 samples, 0.09%; +0.01%)</title><rect x="797.7" y="245" width="1.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="800.70" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (6 samples, 0.01%; -0.02%)</title><rect x="559.1" y="309" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="562.08" y="319.5" ></text>
</g>
<g >
<title>operator new (84 samples, 0.18%; -0.01%)</title><rect x="984.3" y="325" width="2.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="987.27" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (67 samples, 0.14%; -0.03%)</title><rect x="476.1" y="325" width="1.7" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="479.12" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (8 samples, 0.02%; +0.01%)</title><rect x="900.8" y="341" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="903.84" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (47 samples, 0.10%; -0.01%)</title><rect x="528.6" y="389" width="1.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="531.56" y="399.5" ></text>
</g>
<g >
<title>query::digester::digester (38 samples, 0.08%; +0.03%)</title><rect x="584.5" y="405" width="1.0" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="587.53" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (8 samples, 0.02%; -0.00%)</title><rect x="1098.3" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1101.26" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (76 samples, 0.16%; -0.00%)</title><rect x="840.5" y="373" width="1.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="843.46" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (6 samples, 0.01%; +0.01%)</title><rect x="853.9" y="485" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="856.94" y="495.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (15 samples, 0.03%; +0.00%)</title><rect x="323.2" y="181" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="326.18" y="191.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (5 samples, 0.01%; -0.01%)</title><rect x="518.4" y="277" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="521.38" y="287.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (7 samples, 0.01%; +0.01%)</title><rect x="636.9" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="639.88" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (13 samples, 0.03%; +0.00%)</title><rect x="1098.5" y="373" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1101.51" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,868 samples, 8.13%; +0.04%)</title><rect x="293.5" y="261" width="95.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="296.49" y="271.5" >mutation_fr..</text>
</g>
<g >
<title>operator new (21 samples, 0.04%; -0.00%)</title><rect x="239.0" y="181" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="241.98" y="191.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (5 samples, 0.01%; 0.00%)</title><rect x="18.7" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.68" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (7 samples, 0.01%; -0.00%)</title><rect x="709.5" y="437" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="712.46" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (14 samples, 0.03%; -0.01%)</title><rect x="121.2" y="309" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="124.17" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (20 samples, 0.04%; -0.01%)</title><rect x="39.8" y="453" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="42.82" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (12 samples, 0.03%; -0.00%)</title><rect x="736.3" y="277" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="739.25" y="287.5" ></text>
</g>
<g >
<title>operator new (38 samples, 0.08%; -0.00%)</title><rect x="535.9" y="357" width="0.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="538.90" y="367.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (5 samples, 0.01%; +0.01%)</title><rect x="800.7" y="277" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="803.70" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (8 samples, 0.02%; +0.01%)</title><rect x="208.2" y="165" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="211.20" y="175.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (195 samples, 0.41%; -0.01%)</title><rect x="986.6" y="309" width="4.9" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="989.62" y="319.5" ></text>
</g>
<g >
<title>operator new (17 samples, 0.04%; +0.03%)</title><rect x="937.6" y="389" width="0.4" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="940.60" y="399.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (15 samples, 0.03%; -0.01%)</title><rect x="1174.5" y="421" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1177.46" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (10 samples, 0.02%; +0.01%)</title><rect x="760.8" y="341" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="763.77" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (9 samples, 0.02%; -0.00%)</title><rect x="949.1" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="952.12" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; +0.00%)</title><rect x="619.1" y="469" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="622.14" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (18 samples, 0.04%; +0.00%)</title><rect x="861.6" y="469" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="864.58" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (22 samples, 0.05%; +0.01%)</title><rect x="1172.2" y="453" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1175.15" y="463.5" ></text>
</g>
<g >
<title>dht::maximum_token (5 samples, 0.01%; +0.01%)</title><rect x="429.8" y="277" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="432.81" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (20 samples, 0.04%; +0.01%)</title><rect x="760.6" y="357" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="763.64" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (24 samples, 0.05%; +0.03%)</title><rect x="1023.2" y="197" width="0.6" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="1026.21" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (8 samples, 0.02%; -0.00%)</title><rect x="619.4" y="485" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="622.43" y="495.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (20 samples, 0.04%; +0.01%)</title><rect x="665.0" y="469" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="667.97" y="479.5" ></text>
</g>
<g >
<title>do_cql_test (273 samples, 0.57%; 0.00%)</title><rect x="14.4" y="549" width="6.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.44" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (14 samples, 0.03%; -0.01%)</title><rect x="529.9" y="389" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="532.90" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (17 samples, 0.04%; +0.01%)</title><rect x="1128.4" y="389" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1131.43" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (7 samples, 0.01%; +0.00%)</title><rect x="664.3" y="485" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="667.27" y="495.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (257 samples, 0.54%; -0.01%)</title><rect x="732.9" y="373" width="6.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="735.93" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (209 samples, 0.44%; +0.04%)</title><rect x="679.4" y="469" width="5.2" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="682.44" y="479.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (66 samples, 0.14%; +0.03%)</title><rect x="450.4" y="325" width="1.6" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="453.41" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (14 samples, 0.03%; -0.01%)</title><rect x="736.2" y="293" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="739.20" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (17 samples, 0.04%; +0.00%)</title><rect x="441.9" y="261" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="444.86" y="271.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (10 samples, 0.02%; +0.01%)</title><rect x="15.8" y="245" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="18.80" y="255.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (31 samples, 0.07%; +0.01%)</title><rect x="894.7" y="293" width="0.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="897.69" y="303.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (11 samples, 0.02%; +0.00%)</title><rect x="53.2" y="469" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="56.20" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (23 samples, 0.05%; -0.01%)</title><rect x="776.6" y="229" width="0.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="779.61" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (111 samples, 0.23%; +0.01%)</title><rect x="650.3" y="485" width="2.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="653.32" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (521 samples, 1.09%; -0.03%)</title><rect x="177.2" y="101" width="12.9" height="15.0" fill="rgb(179,179,255)" rx="2" ry="2" />
<text  x="180.19" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (34 samples, 0.07%; -0.01%)</title><rect x="1155.0" y="453" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1158.03" y="463.5" ></text>
</g>
<g >
<title>operator new (69 samples, 0.14%; -0.00%)</title><rect x="959.5" y="373" width="1.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="962.46" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (36 samples, 0.08%; 0.00%)</title><rect x="856.9" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.92" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (97 samples, 0.20%; +0.00%)</title><rect x="470.7" y="197" width="2.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="473.66" y="207.5" ></text>
</g>
<g >
<title>dht::shard_of (40 samples, 0.08%; +0.00%)</title><rect x="1005.4" y="277" width="1.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1008.44" y="287.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.06%; 0.00%)</title><rect x="97.8" y="389" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="100.84" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,152 samples, 4.52%; 0.00%)</title><rect x="162.4" y="197" width="53.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="165.41" y="207.5" >parti..</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (7 samples, 0.01%; -0.01%)</title><rect x="438.3" y="277" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="441.27" y="287.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (8 samples, 0.02%; +0.00%)</title><rect x="613.9" y="437" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="616.91" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;flat_mutation_reader&gt;::allocate (11 samples, 0.02%; -0.04%)</title><rect x="423.5" y="341" width="0.3" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="426.52" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (8 samples, 0.02%; +0.01%)</title><rect x="321.8" y="165" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="324.79" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (11 samples, 0.02%; -0.02%)</title><rect x="1120.4" y="405" width="0.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1123.45" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (7 samples, 0.01%; -0.03%)</title><rect x="703.4" y="501" width="0.2" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="706.41" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (6 samples, 0.01%; 0.00%)</title><rect x="579.2" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="582.18" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (6 samples, 0.01%; -0.00%)</title><rect x="78.9" y="453" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="81.91" y="463.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (244 samples, 0.51%; +0.03%)</title><rect x="60.2" y="453" width="6.0" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="63.19" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (9 samples, 0.02%; -0.01%)</title><rect x="53.8" y="469" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="56.85" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (43 samples, 0.09%; +0.04%)</title><rect x="195.4" y="117" width="1.0" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="198.38" y="127.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (6 samples, 0.01%; +0.00%)</title><rect x="427.9" y="309" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="430.86" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (84 samples, 0.18%; +0.00%)</title><rect x="1159.2" y="453" width="2.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1162.21" y="463.5" ></text>
</g>
<g >
<title>partition_entry::read (100 samples, 0.21%; +0.02%)</title><rect x="504.9" y="309" width="2.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="507.92" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (44 samples, 0.09%; +0.01%)</title><rect x="790.4" y="133" width="1.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="793.36" y="143.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (21 samples, 0.04%; -0.00%)</title><rect x="618.7" y="485" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="621.74" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (85 samples, 0.18%; 0.00%)</title><rect x="845.0" y="373" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="847.99" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (40 samples, 0.08%; +0.01%)</title><rect x="1017.2" y="213" width="1.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1020.24" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (16 samples, 0.03%; -0.01%)</title><rect x="112.4" y="373" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="115.39" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="677.9" y="485" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="680.90" y="495.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (21 samples, 0.04%; -0.00%)</title><rect x="550.0" y="293" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="552.96" y="303.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (28 samples, 0.06%; +0.00%)</title><rect x="793.1" y="101" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="796.06" y="111.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (19 samples, 0.04%; -0.05%)</title><rect x="874.7" y="405" width="0.5" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="877.74" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.06%; -0.00%)</title><rect x="445.9" y="309" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="448.90" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (10 samples, 0.02%; 0.00%)</title><rect x="510.4" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="513.37" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (9 samples, 0.02%; -0.01%)</title><rect x="304.2" y="165" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="307.22" y="175.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (20 samples, 0.04%; +0.01%)</title><rect x="306.2" y="165" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="309.23" y="175.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (11 samples, 0.02%; -0.00%)</title><rect x="1057.2" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1060.17" y="287.5" ></text>
</g>
<g >
<title>database::query (174 samples, 0.37%; +0.06%)</title><rect x="41.7" y="501" width="4.3" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="44.65" y="511.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (13 samples, 0.03%; +0.01%)</title><rect x="737.2" y="261" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="740.22" y="271.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (416 samples, 0.87%; 0.00%)</title><rect x="690.6" y="469" width="10.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="693.62" y="479.5" ></text>
</g>
<g >
<title>db::validate_for_read (5 samples, 0.01%; +0.01%)</title><rect x="1122.0" y="421" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1124.99" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (123 samples, 0.26%; -0.02%)</title><rect x="1066.4" y="309" width="3.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1069.41" y="319.5" ></text>
</g>
<g >
<title>compound_type&lt; (104 samples, 0.22%; +0.03%)</title><rect x="925.8" y="357" width="2.6" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="928.85" y="367.5" ></text>
</g>
<g >
<title>query::result::builder::build (77 samples, 0.16%; +0.02%)</title><rect x="579.9" y="437" width="1.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="582.92" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (15 samples, 0.03%; -0.01%)</title><rect x="473.3" y="181" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="476.29" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (7 samples, 0.01%; +0.01%)</title><rect x="1093.6" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1096.60" y="351.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (5 samples, 0.01%; +0.01%)</title><rect x="1126.4" y="405" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1129.40" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (19 samples, 0.04%; -0.00%)</title><rect x="1140.4" y="309" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1143.40" y="319.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (16 samples, 0.03%; +0.00%)</title><rect x="841.3" y="341" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="844.27" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (38 samples, 0.08%; 0.00%)</title><rect x="1041.5" y="277" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1044.50" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (11 samples, 0.02%; +0.02%)</title><rect x="896.0" y="325" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="899.03" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (51 samples, 0.11%; +0.01%)</title><rect x="432.6" y="229" width="1.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="435.64" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (27 samples, 0.06%; -0.00%)</title><rect x="451.3" y="309" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="454.33" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (9 samples, 0.02%; +0.01%)</title><rect x="1112.8" y="389" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1115.84" y="399.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (5 samples, 0.01%; -0.03%)</title><rect x="73.8" y="405" width="0.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="76.80" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (17 samples, 0.04%; -0.03%)</title><rect x="206.3" y="149" width="0.4" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="209.31" y="159.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (5 samples, 0.01%; +0.00%)</title><rect x="397.6" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="400.59" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (6 samples, 0.01%; 0.00%)</title><rect x="1120.3" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.30" y="415.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; +0.01%)</title><rect x="29.7" y="485" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="32.73" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (13 samples, 0.03%; 0.00%)</title><rect x="816.0" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="818.97" y="335.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (47 samples, 0.10%; -0.01%)</title><rect x="321.8" y="181" width="1.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="324.77" y="191.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (446 samples, 0.94%; 0.00%)</title><rect x="463.6" y="293" width="11.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="466.62" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (17 samples, 0.04%; -0.01%)</title><rect x="943.4" y="357" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="946.45" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (411 samples, 0.86%; +0.05%)</title><rect x="1107.9" y="405" width="10.1" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="1110.86" y="415.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (5 samples, 0.01%; 0.00%)</title><rect x="1176.2" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.19" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (6 samples, 0.01%; +0.00%)</title><rect x="543.5" y="357" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="546.49" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (66 samples, 0.14%; +0.01%)</title><rect x="959.5" y="357" width="1.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="962.53" y="367.5" ></text>
</g>
<g >
<title>database::find_column_family (78 samples, 0.16%; -0.00%)</title><rect x="1053.3" y="341" width="1.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1056.28" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (80 samples, 0.17%; +0.01%)</title><rect x="1063.1" y="309" width="1.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1066.07" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (8 samples, 0.02%; -0.01%)</title><rect x="799.8" y="213" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="802.78" y="223.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (6 samples, 0.01%; +0.01%)</title><rect x="306.1" y="165" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="309.08" y="175.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.01%; 0.00%)</title><rect x="287.2" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="290.24" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (13 samples, 0.03%; +0.00%)</title><rect x="198.4" y="101" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="201.38" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (24 samples, 0.05%; -0.02%)</title><rect x="661.4" y="437" width="0.6" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="664.40" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (38 samples, 0.08%; +0.00%)</title><rect x="159.5" y="229" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="162.54" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (6 samples, 0.01%; 0.00%)</title><rect x="631.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="634.01" y="495.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.09%; 0.00%)</title><rect x="1188.8" y="629" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1191.84" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.00%)</title><rect x="413.0" y="405" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="415.96" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (25 samples, 0.05%; -0.01%)</title><rect x="569.1" y="357" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="572.14" y="367.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (16 samples, 0.03%; 0.00%)</title><rect x="818.9" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.87" y="303.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (16 samples, 0.03%; -0.01%)</title><rect x="720.5" y="293" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="723.54" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; +0.01%)</title><rect x="587.4" y="357" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="590.41" y="367.5" ></text>
</g>
<g >
<title>reader_permit::consume (21 samples, 0.04%; +0.01%)</title><rect x="496.6" y="181" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="499.59" y="191.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (10 samples, 0.02%; 0.00%)</title><rect x="15.1" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.11" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (53 samples, 0.11%; 0.00%)</title><rect x="360.3" y="181" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="363.34" y="191.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (9 samples, 0.02%; -0.01%)</title><rect x="361.9" y="197" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="364.92" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (18 samples, 0.04%; +0.03%)</title><rect x="254.3" y="309" width="0.4" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="257.30" y="319.5" ></text>
</g>
<g >
<title>operator delete (28 samples, 0.06%; +0.01%)</title><rect x="409.1" y="373" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="412.12" y="383.5" ></text>
</g>
<g >
<title>operator delete (67 samples, 0.14%; +0.00%)</title><rect x="931.8" y="405" width="1.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="934.82" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (11 samples, 0.02%; -0.00%)</title><rect x="616.4" y="485" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="619.41" y="495.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (28 samples, 0.06%; -0.01%)</title><rect x="1027.5" y="149" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1030.52" y="159.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (17 samples, 0.04%; -0.00%)</title><rect x="39.1" y="453" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="42.10" y="463.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (30 samples, 0.06%; +0.01%)</title><rect x="303.3" y="165" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="306.28" y="175.5" ></text>
</g>
<g >
<title>sstring_hash::operator (18 samples, 0.04%; -0.00%)</title><rect x="841.8" y="357" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="844.82" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%; -0.01%)</title><rect x="227.1" y="245" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="230.06" y="255.5" ></text>
</g>
<g >
<title>row_tombstone::apply (17 samples, 0.04%; +0.00%)</title><rect x="382.2" y="213" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="385.20" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (145 samples, 0.30%; +0.02%)</title><rect x="96.3" y="421" width="3.6" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="99.28" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (5,983 samples, 12.57%; +0.01%)</title><rect x="952.9" y="405" width="148.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="955.86" y="415.5" >service::storage_p..</text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (24 samples, 0.05%; -0.01%)</title><rect x="943.3" y="373" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="946.27" y="383.5" ></text>
</g>
<g >
<title>__tls_init (5 samples, 0.01%; +0.01%)</title><rect x="518.8" y="293" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="521.77" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (18 samples, 0.04%; -0.01%)</title><rect x="1068.6" y="293" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1071.57" y="303.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (7 samples, 0.01%; +0.01%)</title><rect x="546.8" y="293" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="549.78" y="303.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (42 samples, 0.09%; -0.00%)</title><rect x="400.4" y="245" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="403.37" y="255.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (7 samples, 0.01%; +0.00%)</title><rect x="822.8" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="825.78" y="415.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (6 samples, 0.01%; 0.00%)</title><rect x="1049.3" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1052.29" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (456 samples, 0.96%; -0.05%)</title><rect x="126.8" y="277" width="11.3" height="15.0" fill="rgb(155,155,255)" rx="2" ry="2" />
<text  x="129.77" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (24 samples, 0.05%; +0.03%)</title><rect x="1010.9" y="277" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1013.94" y="287.5" ></text>
</g>
<g >
<title>operator new (27 samples, 0.06%; -0.00%)</title><rect x="480.0" y="293" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="483.01" y="303.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (24 samples, 0.05%; +0.00%)</title><rect x="473.1" y="197" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="476.07" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (30 samples, 0.06%; -0.00%)</title><rect x="747.8" y="357" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="750.78" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (8 samples, 0.02%; +0.01%)</title><rect x="795.4" y="181" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="798.39" y="191.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (47 samples, 0.10%; 0.00%)</title><rect x="674.7" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="677.66" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (5 samples, 0.01%; -0.01%)</title><rect x="406.2" y="341" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="409.22" y="351.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (16 samples, 0.03%; +0.01%)</title><rect x="1093.9" y="341" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1096.93" y="351.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (7 samples, 0.01%; +0.01%)</title><rect x="477.9" y="325" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="480.90" y="335.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (143 samples, 0.30%; -0.02%)</title><rect x="339.7" y="165" width="3.5" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="342.69" y="175.5" ></text>
</g>
<g >
<title>operator delete (51 samples, 0.11%; +0.04%)</title><rect x="643.7" y="485" width="1.3" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="646.72" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (5 samples, 0.01%; 0.00%)</title><rect x="246.0" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="249.04" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (101 samples, 0.21%; 0.00%)</title><rect x="36.0" y="437" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.00" y="447.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (8 samples, 0.02%; +0.01%)</title><rect x="122.9" y="293" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="125.90" y="303.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (191 samples, 0.40%; +0.01%)</title><rect x="693.2" y="453" width="4.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="696.20" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (92 samples, 0.19%; -0.03%)</title><rect x="938.0" y="389" width="2.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="941.02" y="399.5" ></text>
</g>
<g >
<title>table::set_hit_rate (92 samples, 0.19%; +0.00%)</title><rect x="698.3" y="453" width="2.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="701.28" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (28 samples, 0.06%; +0.00%)</title><rect x="285.6" y="277" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="288.60" y="287.5" ></text>
</g>
<g >
<title>schema::column_at (54 samples, 0.11%; -0.00%)</title><rect x="204.0" y="101" width="1.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="206.98" y="111.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (262 samples, 0.55%; -0.01%)</title><rect x="467.8" y="229" width="6.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="470.76" y="239.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (18 samples, 0.04%; -0.01%)</title><rect x="562.3" y="357" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="565.32" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (7 samples, 0.01%; -0.00%)</title><rect x="830.5" y="437" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="833.49" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (28 samples, 0.06%; +0.00%)</title><rect x="669.8" y="469" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="672.77" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%; 0.00%)</title><rect x="260.7" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="263.74" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7 samples, 0.01%; +0.00%)</title><rect x="973.1" y="341" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="976.12" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (9 samples, 0.02%; 0.00%)</title><rect x="39.2" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.20" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (68 samples, 0.14%; -0.01%)</title><rect x="827.1" y="405" width="1.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="830.15" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (208 samples, 0.44%; 0.00%)</title><rect x="14.9" y="405" width="5.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.91" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (5 samples, 0.01%; +0.01%)</title><rect x="385.8" y="229" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="388.84" y="239.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (64 samples, 0.13%; +0.01%)</title><rect x="783.4" y="213" width="1.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="786.40" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (47 samples, 0.10%; 0.00%)</title><rect x="674.7" y="437" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="677.66" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (58 samples, 0.12%; -0.01%)</title><rect x="376.8" y="133" width="1.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="379.82" y="143.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (19 samples, 0.04%; -0.00%)</title><rect x="841.2" y="357" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="844.20" y="367.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (47 samples, 0.10%; -0.02%)</title><rect x="517.4" y="293" width="1.2" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="520.41" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (7 samples, 0.01%; +0.01%)</title><rect x="1037.9" y="261" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1040.93" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (23 samples, 0.05%; +0.00%)</title><rect x="509.4" y="325" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="512.35" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (25 samples, 0.05%; +0.01%)</title><rect x="1046.3" y="277" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1049.26" y="287.5" ></text>
</g>
<g >
<title>row_cache::make_reader (19 samples, 0.04%; +0.03%)</title><rect x="418.2" y="357" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="421.24" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (105 samples, 0.22%; +0.01%)</title><rect x="808.2" y="341" width="2.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="811.16" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (17 samples, 0.04%; +0.01%)</title><rect x="929.3" y="373" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="932.34" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (12 samples, 0.03%; +0.01%)</title><rect x="1144.2" y="501" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1147.22" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (7 samples, 0.01%; +0.00%)</title><rect x="610.1" y="405" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="613.14" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; -0.02%)</title><rect x="534.6" y="357" width="0.2" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="537.59" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (96 samples, 0.20%; +0.02%)</title><rect x="1095.1" y="357" width="2.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1098.09" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (41 samples, 0.09%; +0.05%)</title><rect x="483.5" y="277" width="1.0" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="486.45" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (5 samples, 0.01%; 0.00%)</title><rect x="578.9" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="581.86" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (24 samples, 0.05%; +0.02%)</title><rect x="167.1" y="133" width="0.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="170.12" y="143.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (440 samples, 0.92%; 0.00%)</title><rect x="548.5" y="325" width="10.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="551.54" y="335.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (110 samples, 0.23%; +0.01%)</title><rect x="520.9" y="277" width="2.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="523.88" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (163 samples, 0.34%; -0.00%)</title><rect x="659.4" y="485" width="4.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="662.36" y="495.5" ></text>
</g>
<g >
<title>__tls_init (16 samples, 0.03%; +0.01%)</title><rect x="489.1" y="245" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="492.13" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (6 samples, 0.01%; 0.00%)</title><rect x="1140.9" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.90" y="351.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (20 samples, 0.04%; -0.01%)</title><rect x="497.7" y="213" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="500.68" y="223.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (7 samples, 0.01%; +0.01%)</title><rect x="216.0" y="213" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="219.00" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (33 samples, 0.07%; 0.00%)</title><rect x="671.5" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="674.53" y="463.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (45 samples, 0.09%; +0.01%)</title><rect x="737.5" y="261" width="1.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="740.54" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (125 samples, 0.26%; -0.02%)</title><rect x="979.7" y="325" width="3.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="982.73" y="335.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (12 samples, 0.03%; -0.00%)</title><rect x="325.2" y="181" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="328.19" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (31 samples, 0.07%; +0.00%)</title><rect x="674.7" y="341" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="677.73" y="351.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.04%; +0.00%)</title><rect x="206.3" y="165" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="209.26" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (50 samples, 0.11%; -0.00%)</title><rect x="404.8" y="277" width="1.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="407.80" y="287.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (11 samples, 0.02%; -0.01%)</title><rect x="1135.1" y="421" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1138.12" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (5 samples, 0.01%; -0.00%)</title><rect x="263.8" y="341" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="266.77" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (10 samples, 0.02%; +0.01%)</title><rect x="193.4" y="101" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="196.45" y="111.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (19 samples, 0.04%; +0.01%)</title><rect x="810.3" y="293" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="813.29" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (188 samples, 0.39%; -0.00%)</title><rect x="1170.7" y="485" width="4.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1173.67" y="495.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%; 0.00%)</title><rect x="935.7" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="938.69" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (27 samples, 0.06%; +0.02%)</title><rect x="697.3" y="437" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="700.26" y="447.5" ></text>
</g>
<g >
<title>operator delete (17 samples, 0.04%; -0.02%)</title><rect x="663.9" y="485" width="0.4" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="666.85" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (6 samples, 0.01%; -0.01%)</title><rect x="1097.9" y="341" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1100.89" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (18 samples, 0.04%; +0.00%)</title><rect x="821.7" y="309" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="824.69" y="319.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (204 samples, 0.43%; +0.03%)</title><rect x="1065.2" y="325" width="5.1" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1068.22" y="335.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (35 samples, 0.07%; -0.01%)</title><rect x="887.9" y="261" width="0.9" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="890.92" y="271.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (7 samples, 0.01%; 0.00%)</title><rect x="14.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.51" y="511.5" ></text>
</g>
<g >
<title>operator new (45 samples, 0.09%; 0.00%)</title><rect x="838.3" y="405" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="841.30" y="415.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (214 samples, 0.45%; 0.00%)</title><rect x="14.8" y="469" width="5.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.76" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (101 samples, 0.21%; -0.03%)</title><rect x="1126.6" y="405" width="2.5" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="1129.60" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="904.7" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="907.65" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (3,391 samples, 7.12%; -0.03%)</title><rect x="143.2" y="261" width="84.0" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="146.18" y="271.5" >partition..</text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (5 samples, 0.01%; -0.00%)</title><rect x="874.6" y="405" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="877.61" y="415.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (44 samples, 0.09%; -0.00%)</title><rect x="611.2" y="405" width="1.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="614.23" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (89 samples, 0.19%; -0.00%)</title><rect x="230.1" y="213" width="2.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="233.06" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (10 samples, 0.02%; -0.03%)</title><rect x="79.6" y="453" width="0.2" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="82.58" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (13 samples, 0.03%; +0.00%)</title><rect x="380.5" y="149" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="383.51" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (17 samples, 0.04%; -0.02%)</title><rect x="444.9" y="277" width="0.4" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="447.88" y="287.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (115 samples, 0.24%; +0.02%)</title><rect x="375.4" y="149" width="2.9" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="378.41" y="159.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (1,046 samples, 2.20%; +0.01%)</title><rect x="775.4" y="293" width="25.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="778.42" y="303.5" >s..</text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (6 samples, 0.01%; +0.01%)</title><rect x="949.6" y="373" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="952.59" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (65 samples, 0.14%; -0.01%)</title><rect x="141.4" y="261" width="1.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="144.37" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (12 samples, 0.03%; +0.00%)</title><rect x="1042.1" y="229" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1045.15" y="239.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (8 samples, 0.02%; 0.00%)</title><rect x="16.7" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.74" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (20 samples, 0.04%; -0.00%)</title><rect x="683.2" y="453" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="686.16" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (11,158 samples, 23.44%; -0.03%)</title><rect x="862.5" y="469" width="276.5" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="865.47" y="479.5" >seastar::noncopyable_function&lt;seastar..</text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (34 samples, 0.07%; -0.07%)</title><rect x="74.4" y="373" width="0.9" height="15.0" fill="rgb(142,142,255)" rx="2" ry="2" />
<text  x="77.42" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.00%)</title><rect x="606.3" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="609.35" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="319.6" y="181" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="322.59" y="191.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (7 samples, 0.01%; -0.05%)</title><rect x="230.2" y="197" width="0.1" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="233.16" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (16 samples, 0.03%; +0.01%)</title><rect x="1158.6" y="357" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1161.62" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (5 samples, 0.01%; +0.01%)</title><rect x="424.9" y="341" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="427.93" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (32 samples, 0.07%; +0.02%)</title><rect x="1125.6" y="373" width="0.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1128.60" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (19 samples, 0.04%; +0.02%)</title><rect x="609.6" y="389" width="0.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="612.59" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (11 samples, 0.02%; -0.00%)</title><rect x="612.9" y="389" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="615.86" y="399.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (8 samples, 0.02%; +0.01%)</title><rect x="489.5" y="245" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="492.53" y="255.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::make&lt;managed_bytes&gt; (38 samples, 0.08%; -0.01%)</title><rect x="898.8" y="309" width="0.9" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="901.78" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (9 samples, 0.02%; +0.01%)</title><rect x="1141.6" y="485" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1144.57" y="495.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (913 samples, 1.92%; +0.01%)</title><rect x="452.0" y="325" width="22.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="455.05" y="335.5" >d..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (13 samples, 0.03%; -0.01%)</title><rect x="1045.9" y="197" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1048.89" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (7 samples, 0.01%; -0.00%)</title><rect x="438.4" y="293" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="441.44" y="303.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (9 samples, 0.02%; -0.00%)</title><rect x="838.0" y="421" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="841.00" y="431.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (5 samples, 0.01%; +0.00%)</title><rect x="722.1" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="725.07" y="447.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (12 samples, 0.03%; +0.00%)</title><rect x="912.1" y="341" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="915.09" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (121 samples, 0.25%; -0.01%)</title><rect x="535.6" y="373" width="3.0" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="538.55" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (26 samples, 0.05%; -0.01%)</title><rect x="405.4" y="261" width="0.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="408.40" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (16 samples, 0.03%; 0.00%)</title><rect x="254.8" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="257.84" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (117 samples, 0.25%; -0.02%)</title><rect x="1055.9" y="309" width="2.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1058.90" y="319.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (278 samples, 0.58%; -0.00%)</title><rect x="678.0" y="485" width="6.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="681.03" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (26 samples, 0.05%; -0.00%)</title><rect x="561.6" y="357" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="564.61" y="367.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; -0.01%)</title><rect x="628.8" y="485" width="0.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="631.80" y="495.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (17 samples, 0.04%; +0.03%)</title><rect x="588.5" y="405" width="0.5" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="591.55" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (13 samples, 0.03%; -0.01%)</title><rect x="1045.9" y="213" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1048.89" y="223.5" ></text>
</g>
<g >
<title>malloc (7 samples, 0.01%; +0.01%)</title><rect x="588.3" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="591.30" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (44 samples, 0.09%; +0.00%)</title><rect x="744.1" y="389" width="1.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="747.06" y="399.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (5 samples, 0.01%; -0.00%)</title><rect x="213.3" y="149" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="216.28" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (8 samples, 0.02%; +0.00%)</title><rect x="935.3" y="389" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="938.34" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (9 samples, 0.02%; -0.01%)</title><rect x="313.4" y="197" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="316.37" y="207.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (19 samples, 0.04%; +0.01%)</title><rect x="678.4" y="469" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="681.35" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (5 samples, 0.01%; -0.01%)</title><rect x="312.0" y="213" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="315.00" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.01%)</title><rect x="35.3" y="437" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="38.26" y="447.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (18 samples, 0.04%; -0.01%)</title><rect x="1040.7" y="277" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1043.71" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (80 samples, 0.17%; -0.02%)</title><rect x="737.0" y="277" width="2.0" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="740.02" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (5 samples, 0.01%; +0.00%)</title><rect x="905.3" y="373" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="908.35" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (35 samples, 0.07%; -0.01%)</title><rect x="935.6" y="389" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="938.56" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (10 samples, 0.02%; +0.01%)</title><rect x="842.5" y="437" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="845.51" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (18 samples, 0.04%; 0.00%)</title><rect x="1045.0" y="213" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1048.00" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (23 samples, 0.05%; -0.01%)</title><rect x="150.2" y="165" width="0.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="153.19" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (130 samples, 0.27%; +0.00%)</title><rect x="553.7" y="293" width="3.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="556.70" y="303.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (45 samples, 0.09%; 0.00%)</title><rect x="812.1" y="373" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="815.10" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (5 samples, 0.01%; +0.00%)</title><rect x="679.1" y="469" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="682.12" y="479.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (15 samples, 0.03%; +0.01%)</title><rect x="1047.1" y="277" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1050.08" y="287.5" ></text>
</g>
<g >
<title>auth::resource::resource (64 samples, 0.13%; +0.01%)</title><rect x="759.6" y="373" width="1.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="762.55" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (104 samples, 0.22%; -0.01%)</title><rect x="192.8" y="117" width="2.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="195.80" y="127.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (126 samples, 0.26%; -0.01%)</title><rect x="635.3" y="469" width="3.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="638.30" y="479.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.02%; -0.00%)</title><rect x="642.1" y="453" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="645.09" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (7 samples, 0.01%; +0.00%)</title><rect x="518.9" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="521.90" y="319.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (69 samples, 0.14%; +0.01%)</title><rect x="221.2" y="229" width="1.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="224.18" y="239.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (35 samples, 0.07%; -0.01%)</title><rect x="282.8" y="373" width="0.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="285.80" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (24 samples, 0.05%; -0.00%)</title><rect x="137.4" y="261" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="140.43" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (15 samples, 0.03%; -0.01%)</title><rect x="641.4" y="437" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="644.37" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::run (46,663 samples, 98.02%; 0.00%)</title><rect x="21.7" y="549" width="1156.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.67" y="559.5" >seastar::reactor::run</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (5 samples, 0.01%; +0.01%)</title><rect x="755.3" y="405" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="758.29" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (24 samples, 0.05%; +0.01%)</title><rect x="793.1" y="85" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="796.14" y="95.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (10 samples, 0.02%; -0.01%)</title><rect x="301.8" y="197" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="304.84" y="207.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (15 samples, 0.03%; 0.00%)</title><rect x="1028.2" y="149" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1031.22" y="159.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (36 samples, 0.08%; +0.02%)</title><rect x="591.7" y="437" width="0.9" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="594.75" y="447.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (117 samples, 0.25%; -0.02%)</title><rect x="295.4" y="245" width="2.9" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="298.37" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (83 samples, 0.17%; -0.01%)</title><rect x="566.6" y="357" width="2.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="569.61" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (54 samples, 0.11%; 0.00%)</title><rect x="674.6" y="501" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="677.58" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (5 samples, 0.01%; +0.01%)</title><rect x="1138.3" y="437" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1141.29" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (6 samples, 0.01%; +0.01%)</title><rect x="627.7" y="469" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="630.66" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (34 samples, 0.07%; -0.01%)</title><rect x="652.2" y="437" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="655.15" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (20 samples, 0.04%; +0.00%)</title><rect x="1177.7" y="485" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1180.66" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.02%; +0.01%)</title><rect x="472.5" y="181" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="475.55" y="191.5" ></text>
</g>
<g >
<title>database::query (14 samples, 0.03%; -0.02%)</title><rect x="1005.1" y="277" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1008.09" y="287.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (10 samples, 0.02%; +0.01%)</title><rect x="718.4" y="309" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="721.43" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (3,130 samples, 6.57%; -0.01%)</title><rect x="745.8" y="421" width="77.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="748.77" y="431.5" >cql3::st..</text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (17 samples, 0.04%; +0.01%)</title><rect x="291.6" y="261" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="294.63" y="271.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (5 samples, 0.01%; +0.00%)</title><rect x="45.8" y="485" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="48.84" y="495.5" ></text>
</g>
<g >
<title>auth::resource::parent (67 samples, 0.14%; -0.01%)</title><rect x="770.0" y="325" width="1.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="772.99" y="335.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (26 samples, 0.05%; -0.01%)</title><rect x="325.5" y="181" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="328.49" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (5 samples, 0.01%; -0.01%)</title><rect x="538.4" y="277" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="541.36" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (48 samples, 0.10%; +0.02%)</title><rect x="97.4" y="405" width="1.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="100.42" y="415.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (71 samples, 0.15%; -0.00%)</title><rect x="922.2" y="389" width="1.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="925.23" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; 0.00%)</title><rect x="929.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="932.64" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (11 samples, 0.02%; 0.00%)</title><rect x="681.6" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="684.62" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (11 samples, 0.02%; 0.00%)</title><rect x="473.7" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="476.74" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (147 samples, 0.31%; +0.00%)</title><rect x="1055.4" y="325" width="3.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1058.36" y="335.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (63 samples, 0.13%; +0.02%)</title><rect x="781.3" y="181" width="1.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="784.27" y="191.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (83 samples, 0.17%; +0.01%)</title><rect x="488.6" y="261" width="2.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="491.58" y="271.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (10 samples, 0.02%; +0.02%)</title><rect x="707.2" y="469" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="710.23" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (7 samples, 0.01%; -0.01%)</title><rect x="677.7" y="485" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="680.73" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (35 samples, 0.07%; +0.02%)</title><rect x="714.5" y="389" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="717.54" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (7 samples, 0.01%; -0.01%)</title><rect x="79.1" y="453" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="82.06" y="463.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (37 samples, 0.08%; -0.00%)</title><rect x="856.9" y="485" width="0.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="859.89" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (52 samples, 0.11%; +0.08%)</title><rect x="239.6" y="229" width="1.3" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="242.65" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (11 samples, 0.02%; -0.01%)</title><rect x="1135.7" y="421" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1138.74" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.04%; +0.01%)</title><rect x="94.0" y="421" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="97.03" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (48 samples, 0.10%; 0.00%)</title><rect x="674.7" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="677.66" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (34 samples, 0.07%; 0.00%)</title><rect x="794.7" y="213" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="797.75" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (162 samples, 0.34%; +0.04%)</title><rect x="257.5" y="341" width="4.0" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="260.52" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.02%; -0.01%)</title><rect x="469.1" y="181" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="472.05" y="191.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (30 samples, 0.06%; +0.03%)</title><rect x="625.9" y="485" width="0.7" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="628.85" y="495.5" ></text>
</g>
<g >
<title>operator delete (42 samples, 0.09%; -0.01%)</title><rect x="33.5" y="469" width="1.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="36.47" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (32 samples, 0.07%; 0.00%)</title><rect x="949.6" y="389" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="952.57" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (10 samples, 0.02%; +0.00%)</title><rect x="595.5" y="437" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="598.49" y="447.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (99 samples, 0.21%; 0.00%)</title><rect x="791.8" y="133" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="794.82" y="143.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (161 samples, 0.34%; +0.04%)</title><rect x="816.3" y="325" width="4.0" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="819.34" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (9 samples, 0.02%; -0.01%)</title><rect x="703.7" y="501" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="706.71" y="511.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (12 samples, 0.03%; +0.01%)</title><rect x="472.8" y="181" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="475.77" y="191.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (13 samples, 0.03%; +0.02%)</title><rect x="609.3" y="389" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="612.27" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (483 samples, 1.01%; +0.02%)</title><rect x="882.5" y="293" width="12.0" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="885.54" y="303.5" ></text>
</g>
<g >
<title>operator delete (34 samples, 0.07%; +0.02%)</title><rect x="652.2" y="421" width="0.8" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="655.15" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (99 samples, 0.21%; +0.01%)</title><rect x="736.6" y="309" width="2.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="739.60" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (6 samples, 0.01%; -0.00%)</title><rect x="141.1" y="261" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="144.07" y="271.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (5 samples, 0.01%; -0.01%)</title><rect x="1093.1" y="309" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1096.06" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,696 samples, 9.86%; +0.00%)</title><rect x="286.7" y="309" width="116.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="289.74" y="319.5" >std::__invoke_..</text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (47 samples, 0.10%; +0.02%)</title><rect x="1009.8" y="245" width="1.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1012.75" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (9 samples, 0.02%; -0.01%)</title><rect x="292.9" y="245" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="295.94" y="255.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (46 samples, 0.10%; +0.00%)</title><rect x="519.2" y="309" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="522.24" y="319.5" ></text>
</g>
<g >
<title>__strlen_avx2 (96 samples, 0.20%; -0.02%)</title><rect x="1014.5" y="245" width="2.4" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="1017.53" y="255.5" ></text>
</g>
<g >
<title>bytes_ostream::view (5 samples, 0.01%; +0.01%)</title><rect x="581.6" y="405" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="584.61" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (62 samples, 0.13%; -0.00%)</title><rect x="671.4" y="469" width="1.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="674.39" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.02%; +0.01%)</title><rect x="921.2" y="341" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="924.21" y="351.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (13 samples, 0.03%; -0.00%)</title><rect x="423.9" y="341" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="426.87" y="351.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (40 samples, 0.08%; +0.04%)</title><rect x="214.3" y="165" width="1.0" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="217.32" y="175.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (314 samples, 0.66%; +0.07%)</title><rect x="913.6" y="373" width="7.8" height="15.0" fill="rgb(255,142,142)" rx="2" ry="2" />
<text  x="916.63" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (9 samples, 0.02%; +0.01%)</title><rect x="524.6" y="325" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="527.62" y="335.5" ></text>
</g>
<g >
<title>operator new (73 samples, 0.15%; +0.00%)</title><rect x="1124.6" y="405" width="1.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1127.59" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (13 samples, 0.03%; 0.00%)</title><rect x="569.4" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="572.44" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (37 samples, 0.08%; 0.00%)</title><rect x="20.1" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.09" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (5 samples, 0.01%; -0.01%)</title><rect x="765.2" y="357" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="768.23" y="367.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (84 samples, 0.18%; +0.01%)</title><rect x="357.0" y="165" width="2.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="359.97" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (8 samples, 0.02%; +0.01%)</title><rect x="39.5" y="453" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="42.52" y="463.5" ></text>
</g>
<g >
<title>operator delete (17 samples, 0.04%; +0.00%)</title><rect x="35.0" y="453" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="38.03" y="463.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%; -0.00%)</title><rect x="418.1" y="357" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="421.11" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (312 samples, 0.66%; +0.00%)</title><rect x="550.6" y="309" width="7.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="553.60" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (50 samples, 0.11%; +0.06%)</title><rect x="1109.2" y="357" width="1.3" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="1112.24" y="367.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (9 samples, 0.02%; +0.01%)</title><rect x="62.1" y="437" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="65.05" y="447.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (417 samples, 0.88%; +0.01%)</title><rect x="832.2" y="437" width="10.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="835.18" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (24 samples, 0.05%; 0.00%)</title><rect x="36.7" y="421" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.67" y="431.5" ></text>
</g>
<g >
<title>__dynamic_cast (8 samples, 0.02%; -0.01%)</title><rect x="11.5" y="581" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="14.54" y="591.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (74 samples, 0.16%; +0.00%)</title><rect x="533.0" y="373" width="1.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="535.98" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (28 samples, 0.06%; +0.02%)</title><rect x="540.2" y="421" width="0.7" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="543.21" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (965 samples, 2.03%; -0.01%)</title><rect x="905.9" y="405" width="23.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="908.87" y="415.5" >c..</text>
</g>
<g >
<title>operator delete (24 samples, 0.05%; -0.01%)</title><rect x="403.5" y="293" width="0.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="406.47" y="303.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (7 samples, 0.01%; +0.00%)</title><rect x="824.7" y="421" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="827.74" y="431.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (6,730 samples, 14.14%; -0.01%)</title><rect x="111.2" y="389" width="166.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="114.23" y="399.5" >merging_reader&lt;mutati..</text>
</g>
<g >
<title>reader_permit::~reader_permit (6 samples, 0.01%; +0.00%)</title><rect x="75.5" y="453" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="78.51" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (34 samples, 0.07%; +0.04%)</title><rect x="442.4" y="261" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="445.43" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (7 samples, 0.01%; +0.00%)</title><rect x="596.5" y="421" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="599.51" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (5,522 samples, 11.60%; +0.01%)</title><rect x="117.9" y="325" width="136.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="120.87" y="335.5" >mutation_reader_m..</text>
</g>
<g >
<title>cql3::statements::select_statement::execute (91 samples, 0.19%; +0.01%)</title><rect x="741.7" y="405" width="2.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="744.71" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (734 samples, 1.54%; +0.05%)</title><rect x="363.2" y="197" width="18.2" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="366.19" y="207.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (12 samples, 0.03%; 0.00%)</title><rect x="567.0" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="569.96" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (54 samples, 0.11%; +0.00%)</title><rect x="214.0" y="181" width="1.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="216.97" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (6 samples, 0.01%; -0.01%)</title><rect x="1119.3" y="373" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1122.31" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (16 samples, 0.03%; +0.01%)</title><rect x="1042.7" y="277" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1045.69" y="287.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (12 samples, 0.03%; +0.01%)</title><rect x="241.3" y="229" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="244.34" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; 0.00%)</title><rect x="451.8" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="454.77" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (124 samples, 0.26%; -0.02%)</title><rect x="494.2" y="213" width="3.1" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="497.19" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (39 samples, 0.08%; -0.01%)</title><rect x="781.6" y="165" width="1.0" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="784.64" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (15 samples, 0.03%; +0.00%)</title><rect x="277.2" y="357" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="280.18" y="367.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (6 samples, 0.01%; +0.01%)</title><rect x="1027.4" y="149" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1030.37" y="159.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,284 samples, 9.00%; +0.01%)</title><rect x="140.3" y="277" width="106.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="143.33" y="287.5" >logalloc::al..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (44 samples, 0.09%; -0.01%)</title><rect x="920.1" y="325" width="1.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="923.12" y="335.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (19 samples, 0.04%; -0.00%)</title><rect x="1123.5" y="421" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1126.47" y="431.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; 0.00%)</title><rect x="743.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="746.44" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (9 samples, 0.02%; +0.01%)</title><rect x="945.0" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="947.98" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (15 samples, 0.03%; -0.00%)</title><rect x="853.6" y="485" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="856.57" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (7 samples, 0.01%; -0.01%)</title><rect x="828.5" y="357" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="831.53" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (16 samples, 0.03%; -0.01%)</title><rect x="927.9" y="325" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="930.90" y="335.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (37 samples, 0.08%; +0.00%)</title><rect x="1067.6" y="293" width="0.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1070.60" y="303.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (5 samples, 0.01%; +0.00%)</title><rect x="245.8" y="229" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="248.82" y="239.5" ></text>
</g>
<g >
<title>seastar::schedule (5 samples, 0.01%; 0.00%)</title><rect x="1143.4" y="501" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.43" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (527 samples, 1.11%; -0.01%)</title><rect x="262.8" y="357" width="13.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="265.83" y="367.5" ></text>
</g>
<g >
<title>schema_registry::learn (5 samples, 0.01%; 0.00%)</title><rect x="46.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.14" y="479.5" ></text>
</g>
<g >
<title>operator delete (31 samples, 0.07%; -0.02%)</title><rect x="1122.5" y="421" width="0.8" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="1125.51" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (9 samples, 0.02%; -0.02%)</title><rect x="893.3" y="277" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="896.33" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (9 samples, 0.02%; +0.01%)</title><rect x="1048.2" y="293" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1051.22" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (9 samples, 0.02%; -0.01%)</title><rect x="503.2" y="309" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="506.23" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (53 samples, 0.11%; +0.03%)</title><rect x="123.2" y="293" width="1.3" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="126.20" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (15 samples, 0.03%; +0.00%)</title><rect x="1115.9" y="325" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1118.86" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (48 samples, 0.10%; +0.00%)</title><rect x="796.4" y="245" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="799.36" y="255.5" ></text>
</g>
<g >
<title>operator new (111 samples, 0.23%; -0.01%)</title><rect x="1008.2" y="277" width="2.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1011.16" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (6 samples, 0.01%; 0.00%)</title><rect x="1149.3" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1152.30" y="495.5" ></text>
</g>
<g >
<title>table::query (21,484 samples, 45.13%; -0.20%)</title><rect x="81.6" y="453" width="532.5" height="15.0" fill="rgb(0,0,255)" rx="2" ry="2" />
<text  x="84.58" y="463.5" >table::query</text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (17 samples, 0.04%; +0.01%)</title><rect x="732.5" y="373" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="735.51" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (8 samples, 0.02%; +0.00%)</title><rect x="944.5" y="405" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="947.49" y="415.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (35 samples, 0.07%; -0.01%)</title><rect x="927.6" y="341" width="0.8" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="930.56" y="351.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (25 samples, 0.05%; +0.03%)</title><rect x="544.5" y="341" width="0.6" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="547.45" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (19 samples, 0.04%; -0.01%)</title><rect x="647.5" y="485" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="650.47" y="495.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (5 samples, 0.01%; -0.01%)</title><rect x="224.1" y="213" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="227.08" y="223.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (16 samples, 0.03%; -0.01%)</title><rect x="549.3" y="277" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="552.34" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (9 samples, 0.02%; -0.00%)</title><rect x="595.7" y="437" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="598.74" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (28 samples, 0.06%; -0.01%)</title><rect x="825.2" y="405" width="0.7" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="828.19" y="415.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (23 samples, 0.05%; +0.01%)</title><rect x="412.2" y="421" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="415.19" y="431.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (40 samples, 0.08%; 0.00%)</title><rect x="1140.1" y="405" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.05" y="415.5" ></text>
</g>
<g >
<title>schema::column_at (64 samples, 0.13%; -0.02%)</title><rect x="379.2" y="165" width="1.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="382.25" y="175.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (1,670 samples, 3.51%; +0.01%)</title><rect x="765.5" y="357" width="41.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="768.48" y="367.5" >ser..</text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (18 samples, 0.04%; +0.00%)</title><rect x="1033.7" y="181" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1036.67" y="191.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.30" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (24 samples, 0.05%; -0.00%)</title><rect x="1098.9" y="373" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1101.88" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (56 samples, 0.12%; +0.00%)</title><rect x="292.0" y="261" width="1.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="295.05" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (68 samples, 0.14%; +0.00%)</title><rect x="1053.5" y="325" width="1.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1056.52" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (76 samples, 0.16%; +0.01%)</title><rect x="780.9" y="213" width="1.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="783.94" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (17 samples, 0.04%; +0.01%)</title><rect x="805.7" y="293" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="808.73" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (57 samples, 0.12%; +0.02%)</title><rect x="1166.1" y="469" width="1.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1169.08" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_bound_terms (5 samples, 0.01%; +0.01%)</title><rect x="711.6" y="453" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="714.64" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (9 samples, 0.02%; +0.00%)</title><rect x="413.1" y="405" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="416.11" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (25 samples, 0.05%; -0.01%)</title><rect x="739.8" y="389" width="0.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="742.77" y="399.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (66 samples, 0.14%; -0.01%)</title><rect x="193.7" y="101" width="1.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="196.74" y="111.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (7 samples, 0.01%; +0.01%)</title><rect x="1042.4" y="277" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1045.44" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (14 samples, 0.03%; +0.01%)</title><rect x="209.9" y="149" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="212.88" y="159.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="498.5" y="245" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="501.50" y="255.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (52 samples, 0.11%; -0.00%)</title><rect x="674.6" y="485" width="1.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="677.63" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (25 samples, 0.05%; +0.00%)</title><rect x="637.1" y="437" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="640.08" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (89 samples, 0.19%; -0.03%)</title><rect x="1018.5" y="229" width="2.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1021.45" y="239.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (48 samples, 0.10%; +0.00%)</title><rect x="596.7" y="437" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="599.73" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.00%)</title><rect x="601.2" y="389" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="604.16" y="399.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (7 samples, 0.01%; -0.00%)</title><rect x="1091.8" y="293" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1094.77" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (25 samples, 0.05%; +0.01%)</title><rect x="474.8" y="325" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="477.75" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (22 samples, 0.05%; -0.01%)</title><rect x="1121.1" y="405" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1124.12" y="415.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (9 samples, 0.02%; +0.00%)</title><rect x="444.0" y="277" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="447.02" y="287.5" ></text>
</g>
<g >
<title>operator new (16 samples, 0.03%; +0.00%)</title><rect x="612.5" y="389" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="615.47" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (5 samples, 0.01%; 0.00%)</title><rect x="14.2" y="565" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.21" y="575.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (7 samples, 0.01%; -0.00%)</title><rect x="469.3" y="197" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="472.27" y="207.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (73 samples, 0.15%; -0.00%)</title><rect x="296.5" y="229" width="1.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="299.46" y="239.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (8 samples, 0.02%; 0.00%)</title><rect x="1140.2" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.15" y="287.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.01%; -0.01%)</title><rect x="695.0" y="421" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="698.01" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (12 samples, 0.03%; +0.01%)</title><rect x="313.1" y="197" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="316.07" y="207.5" ></text>
</g>
<g >
<title>operator delete (39 samples, 0.08%; +0.02%)</title><rect x="804.4" y="309" width="0.9" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="807.37" y="319.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (10 samples, 0.02%; +0.01%)</title><rect x="1049.8" y="357" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1052.83" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (13 samples, 0.03%; -0.01%)</title><rect x="1122.1" y="421" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1125.11" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (71 samples, 0.15%; +0.01%)</title><rect x="1043.7" y="229" width="1.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1046.68" y="239.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (32 samples, 0.07%; -0.01%)</title><rect x="893.7" y="277" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="896.72" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (16 samples, 0.03%; -0.02%)</title><rect x="361.1" y="165" width="0.4" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="364.13" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; +0.01%)</title><rect x="558.8" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="561.78" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.01%; -0.01%)</title><rect x="671.2" y="469" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="674.24" y="479.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (46 samples, 0.10%; +0.04%)</title><rect x="37.3" y="405" width="1.2" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="40.34" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.00%)</title><rect x="659.7" y="453" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="662.66" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.04%; -0.01%)</title><rect x="493.1" y="181" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="496.14" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (39 samples, 0.08%; 0.00%)</title><rect x="769.0" y="293" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="771.97" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.00%)</title><rect x="508.2" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="511.19" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%; -0.00%)</title><rect x="541.1" y="421" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="544.13" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (43 samples, 0.09%; +0.00%)</title><rect x="1017.2" y="229" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1020.16" y="239.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::make_temporary (104 samples, 0.22%; -0.01%)</title><rect x="898.1" y="341" width="2.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="901.06" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (5 samples, 0.01%; +0.00%)</title><rect x="41.4" y="469" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="44.36" y="479.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (5 samples, 0.01%; -0.00%)</title><rect x="241.0" y="229" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="243.99" y="239.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (5 samples, 0.01%; -0.00%)</title><rect x="20.2" y="421" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="23.21" y="431.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (6 samples, 0.01%; +0.00%)</title><rect x="696.7" y="421" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="699.67" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (216 samples, 0.45%; -0.06%)</title><rect x="602.2" y="437" width="5.4" height="15.0" fill="rgb(151,151,255)" rx="2" ry="2" />
<text  x="605.23" y="447.5" ></text>
</g>
<g >
<title>compound_type&lt; (93 samples, 0.20%; +0.01%)</title><rect x="910.1" y="357" width="2.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="913.13" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (12 samples, 0.03%; +0.02%)</title><rect x="1113.4" y="373" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1116.36" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (404 samples, 0.85%; +0.02%)</title><rect x="146.1" y="245" width="10.0" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="149.05" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.00%)</title><rect x="289.3" y="229" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="292.30" y="239.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (42 samples, 0.09%; -0.02%)</title><rect x="71.9" y="389" width="1.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="74.92" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (47 samples, 0.10%; +0.04%)</title><rect x="1160.1" y="405" width="1.2" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="1163.11" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (5 samples, 0.01%; 0.00%)</title><rect x="702.3" y="501" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.27" y="511.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (31 samples, 0.07%; -0.06%)</title><rect x="233.8" y="181" width="0.7" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="236.75" y="191.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (1,146 samples, 2.41%; -0.01%)</title><rect x="877.1" y="389" width="28.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="880.09" y="399.5" >_Z..</text>
</g>
<g >
<title>query::querier&lt; (17,740 samples, 37.26%; +0.05%)</title><rect x="101.8" y="437" width="439.8" height="15.0" fill="rgb(255,158,158)" rx="2" ry="2" />
<text  x="104.84" y="447.5" >query::querier&lt;</text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (10 samples, 0.02%; -0.00%)</title><rect x="213.6" y="149" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="216.60" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (44 samples, 0.09%; 0.00%)</title><rect x="620.0" y="485" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="623.00" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (9 samples, 0.02%; +0.01%)</title><rect x="987.0" y="293" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="989.97" y="303.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.01%; +0.01%)</title><rect x="58.6" y="453" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="61.58" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (20 samples, 0.04%; 0.00%)</title><rect x="136.2" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="139.21" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.05%; -0.03%)</title><rect x="408.2" y="325" width="0.5" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="411.20" y="335.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (214 samples, 0.45%; -0.01%)</title><rect x="886.8" y="277" width="5.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="889.76" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (7 samples, 0.01%; +0.01%)</title><rect x="895.9" y="325" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="898.86" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (139 samples, 0.29%; -0.01%)</title><rect x="152.1" y="229" width="3.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="155.05" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (12 samples, 0.03%; -0.00%)</title><rect x="424.4" y="341" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="427.41" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (178 samples, 0.37%; +0.01%)</title><rect x="1170.9" y="469" width="4.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1173.91" y="479.5" ></text>
</g>
<g >
<title>validation::validate_column_family (375 samples, 0.79%; +0.00%)</title><rect x="813.5" y="389" width="9.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="816.46" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; 0.00%)</title><rect x="931.2" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="934.18" y="383.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (45 samples, 0.09%; -0.00%)</title><rect x="310.8" y="181" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="313.76" y="191.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (83 samples, 0.17%; -0.12%)</title><rect x="889.9" y="245" width="2.1" height="15.0" fill="rgb(88,88,255)" rx="2" ry="2" />
<text  x="892.91" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.00%)</title><rect x="653.9" y="469" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="656.94" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (5 samples, 0.01%; -0.00%)</title><rect x="402.8" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="405.80" y="287.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%; 0.00%)</title><rect x="850.3" y="437" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="853.30" y="447.5" ></text>
</g>
<g >
<title>operator new (60 samples, 0.13%; +0.01%)</title><rect x="879.4" y="309" width="1.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="882.45" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (21 samples, 0.04%; +0.01%)</title><rect x="77.2" y="453" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="80.17" y="463.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (5,614 samples, 11.79%; -0.01%)</title><rect x="710.2" y="469" width="139.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="713.15" y="479.5" >single_node_cql_e..</text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (68 samples, 0.14%; -0.01%)</title><rect x="536.9" y="357" width="1.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="539.87" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (5 samples, 0.01%; 0.00%)</title><rect x="827.5" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="830.47" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (5 samples, 0.01%; -0.01%)</title><rect x="952.3" y="405" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="955.27" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (64 samples, 0.13%; +0.02%)</title><rect x="1053.6" y="309" width="1.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1056.62" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (10 samples, 0.02%; 0.00%)</title><rect x="488.0" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="490.96" y="271.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (8 samples, 0.02%; +0.01%)</title><rect x="1001.7" y="293" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1004.67" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (13 samples, 0.03%; -0.00%)</title><rect x="828.4" y="373" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="831.39" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (44 samples, 0.09%; +0.01%)</title><rect x="838.3" y="389" width="1.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="841.33" y="399.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (14 samples, 0.03%; -0.01%)</title><rect x="614.3" y="485" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="617.28" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (6 samples, 0.01%; -0.00%)</title><rect x="121.5" y="309" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="124.52" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (6 samples, 0.01%; -0.01%)</title><rect x="704.7" y="501" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="707.70" y="511.5" ></text>
</g>
<g >
<title>dht::shard_of (21 samples, 0.04%; +0.01%)</title><rect x="1000.1" y="293" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1003.08" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (14 samples, 0.03%; +0.01%)</title><rect x="610.3" y="437" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="613.31" y="447.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (12 samples, 0.03%; +0.01%)</title><rect x="661.1" y="437" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="664.10" y="447.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.01%; -0.01%)</title><rect x="783.2" y="213" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="786.22" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (6 samples, 0.01%; -0.01%)</title><rect x="23.5" y="517" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="26.46" y="527.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (15 samples, 0.03%; +0.01%)</title><rect x="699.9" y="405" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="702.94" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (10 samples, 0.02%; +0.00%)</title><rect x="488.3" y="261" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="491.34" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="1001.3" y="293" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1004.27" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (6 samples, 0.01%; 0.00%)</title><rect x="1140.7" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.72" y="223.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (7 samples, 0.01%; +0.01%)</title><rect x="445.7" y="325" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="448.73" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (54 samples, 0.11%; +0.02%)</title><rect x="255.2" y="325" width="1.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="258.24" y="335.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (11 samples, 0.02%; 0.00%)</title><rect x="857.3" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.29" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (45 samples, 0.09%; 0.00%)</title><rect x="15.4" y="309" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.35" y="319.5" ></text>
</g>
<g >
<title>auth::get_permissions (1,226 samples, 2.58%; -0.01%)</title><rect x="772.9" y="309" width="30.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="775.91" y="319.5" >au..</text>
</g>
<g >
<title>operator new (7 samples, 0.01%; 0.00%)</title><rect x="106.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.89" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; -0.00%)</title><rect x="684.9" y="485" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="687.92" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="487.2" y="261" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="490.17" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (8 samples, 0.02%; -0.00%)</title><rect x="895.6" y="293" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="898.58" y="303.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (6 samples, 0.01%; -0.02%)</title><rect x="878.5" y="341" width="0.2" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="881.50" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (11 samples, 0.02%; -0.01%)</title><rect x="44.9" y="485" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="47.90" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (8 samples, 0.02%; +0.00%)</title><rect x="304.0" y="165" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="307.02" y="175.5" ></text>
</g>
<g >
<title>std::type_info::operator== (10 samples, 0.02%; -0.00%)</title><rect x="1068.3" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1071.27" y="287.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (21 samples, 0.04%; +0.03%)</title><rect x="912.7" y="373" width="0.6" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="915.73" y="383.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (11 samples, 0.02%; +0.00%)</title><rect x="715.4" y="405" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="718.41" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%; 0.00%)</title><rect x="997.9" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1000.90" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (80 samples, 0.17%; -0.00%)</title><rect x="1157.1" y="453" width="2.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1160.11" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; -0.00%)</title><rect x="901.9" y="341" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="904.85" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (35 samples, 0.07%; -0.01%)</title><rect x="262.0" y="357" width="0.8" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="264.96" y="367.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (96 samples, 0.20%; +0.00%)</title><rect x="776.4" y="261" width="2.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="779.38" y="271.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (26 samples, 0.05%; 0.00%)</title><rect x="1139.4" y="325" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.39" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (7 samples, 0.01%; -0.01%)</title><rect x="35.8" y="421" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="38.75" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (34 samples, 0.07%; 0.00%)</title><rect x="758.4" y="341" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="761.39" y="351.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (10 samples, 0.02%; 0.00%)</title><rect x="232.4" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="235.39" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (10 samples, 0.02%; +0.00%)</title><rect x="942.9" y="357" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="945.85" y="367.5" ></text>
</g>
<g >
<title>operator delete (36 samples, 0.08%; +0.01%)</title><rect x="801.8" y="277" width="0.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="804.81" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (12 samples, 0.03%; -0.01%)</title><rect x="573.3" y="405" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="576.30" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (23 samples, 0.05%; -0.01%)</title><rect x="495.7" y="181" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="498.70" y="191.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (87 samples, 0.18%; -0.01%)</title><rect x="147.1" y="213" width="2.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="150.07" y="223.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (9 samples, 0.02%; +0.01%)</title><rect x="530.7" y="405" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="533.75" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume (13 samples, 0.03%; -0.01%)</title><rect x="495.9" y="165" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="498.95" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (23 samples, 0.05%; +0.02%)</title><rect x="93.4" y="421" width="0.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="96.36" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (37 samples, 0.08%; +0.00%)</title><rect x="1023.8" y="197" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1026.80" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (21 samples, 0.04%; -0.00%)</title><rect x="239.0" y="165" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="241.98" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (5 samples, 0.01%; +0.01%)</title><rect x="1144.7" y="501" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1147.74" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (15 samples, 0.03%; +0.00%)</title><rect x="352.1" y="149" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="355.06" y="159.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (5 samples, 0.01%; -0.00%)</title><rect x="1028.5" y="133" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1031.46" y="143.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (27 samples, 0.06%; 0.00%)</title><rect x="1045.6" y="245" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1048.59" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (12 samples, 0.03%; -0.01%)</title><rect x="40.3" y="453" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="43.31" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (10 samples, 0.02%; -0.01%)</title><rect x="681.9" y="453" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="684.90" y="463.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (7 samples, 0.01%; 0.00%)</title><rect x="1176.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.00" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (11 samples, 0.02%; +0.00%)</title><rect x="293.2" y="245" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="296.16" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (16 samples, 0.03%; +0.00%)</title><rect x="949.9" y="357" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="952.92" y="367.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (6 samples, 0.01%; -0.02%)</title><rect x="1039.8" y="261" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1042.82" y="271.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (21 samples, 0.04%; -0.01%)</title><rect x="454.0" y="277" width="0.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="456.98" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::stats (37 samples, 0.08%; +0.01%)</title><rect x="489.7" y="245" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="492.72" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,909 samples, 10.31%; 0.00%)</title><rect x="284.7" y="357" width="121.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="287.66" y="367.5" >flat_mutation_r..</text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (139 samples, 0.29%; -0.01%)</title><rect x="603.7" y="421" width="3.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="606.74" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (14 samples, 0.03%; -0.00%)</title><rect x="1069.9" y="309" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1072.93" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; +0.00%)</title><rect x="30.2" y="469" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="33.23" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (30 samples, 0.06%; +0.00%)</title><rect x="646.2" y="485" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="649.15" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (286 samples, 0.60%; -0.02%)</title><rect x="491.3" y="245" width="7.1" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="494.33" y="255.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_28has_slice_or_needs_filteringERKNS2_10expressionEEUlRKNS2_15binary_operatorEE_EEPS8_S6_T_EUlS9_E_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_8constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_11conjunctionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_12column_valueEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_5tokenEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13function_callEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4castEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_15field_selectionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4nullEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13bind_variableEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_16untyped_constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_17tuple_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_22collection_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSI_S7_SM_SQ_SU_SY_S12_S16_S1A_S1E_S1I_S1M_SE_S1Q_S1U_S1Y_EEEENSt13invoke_resultISC_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSC_DpOS28_ (7 samples, 0.01%; +0.01%)</title><rect x="636.3" y="437" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="639.26" y="447.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (60 samples, 0.13%; +0.07%)</title><rect x="885.3" y="277" width="1.5" height="15.0" fill="rgb(255,142,142)" rx="2" ry="2" />
<text  x="888.27" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (16 samples, 0.03%; 0.00%)</title><rect x="735.4" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="738.44" y="303.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (6 samples, 0.01%; -0.01%)</title><rect x="224.6" y="229" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="227.55" y="239.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (14 samples, 0.03%; +0.01%)</title><rect x="22.3" y="517" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="25.27" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (557 samples, 1.17%; -0.01%)</title><rect x="882.0" y="309" width="13.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="884.97" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (553 samples, 1.16%; 0.00%)</title><rect x="487.3" y="277" width="13.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="490.32" y="287.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (6 samples, 0.01%; +0.00%)</title><rect x="565.4" y="341" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="568.37" y="351.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (17 samples, 0.04%; +0.00%)</title><rect x="361.7" y="213" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="364.72" y="223.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt; (6 samples, 0.01%; +0.00%)</title><rect x="608.1" y="437" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="611.08" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (11 samples, 0.02%; +0.00%)</title><rect x="805.9" y="277" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="808.88" y="287.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.03%; -0.00%)</title><rect x="641.4" y="453" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="644.37" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (28 samples, 0.06%; -0.01%)</title><rect x="598.0" y="437" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="601.04" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (20 samples, 0.04%; +0.01%)</title><rect x="275.3" y="325" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="278.29" y="335.5" ></text>
</g>
<g >
<title>sstables::noop_write_monitor::~noop_write_monitor (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.30" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (6 samples, 0.01%; -0.00%)</title><rect x="829.6" y="437" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="832.58" y="447.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (7 samples, 0.01%; +0.00%)</title><rect x="213.0" y="117" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="215.98" y="127.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (5 samples, 0.01%; -0.11%)</title><rect x="548.7" y="309" width="0.1" height="15.0" fill="rgb(93,93,255)" rx="2" ry="2" />
<text  x="551.72" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (153 samples, 0.32%; -0.00%)</title><rect x="994.7" y="309" width="3.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="997.66" y="319.5" ></text>
</g>
<g >
<title>all (47,606 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (46,515 samples, 97.71%; -0.03%)</title><rect x="23.9" y="517" width="1152.9" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="26.88" y="527.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (96 samples, 0.20%; +0.01%)</title><rect x="670.6" y="485" width="2.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="673.57" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; -0.00%)</title><rect x="440.9" y="261" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="443.94" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (22 samples, 0.05%; +0.00%)</title><rect x="525.0" y="341" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="527.97" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (6 samples, 0.01%; +0.01%)</title><rect x="1028.6" y="165" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1031.59" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (10 samples, 0.02%; +0.01%)</title><rect x="685.9" y="485" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="688.94" y="495.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (6 samples, 0.01%; 0.00%)</title><rect x="1029.5" y="165" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1032.48" y="175.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (6 samples, 0.01%; +0.01%)</title><rect x="253.8" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="256.83" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (9 samples, 0.02%; -0.03%)</title><rect x="771.3" y="277" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="774.33" y="287.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (10 samples, 0.02%; -0.01%)</title><rect x="155.0" y="197" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="157.95" y="207.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.01%; +0.01%)</title><rect x="821.9" y="277" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="824.87" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (58 samples, 0.12%; +0.05%)</title><rect x="193.8" y="69" width="1.5" height="15.0" fill="rgb(255,153,153)" rx="2" ry="2" />
<text  x="196.84" y="79.5" ></text>
</g>
<g >
<title>database::has_keyspace (145 samples, 0.30%; -0.01%)</title><rect x="832.6" y="421" width="3.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="835.65" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (83 samples, 0.17%; +0.01%)</title><rect x="729.2" y="373" width="2.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="732.24" y="383.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (24 samples, 0.05%; +0.01%)</title><rect x="365.4" y="181" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="368.39" y="191.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (18 samples, 0.04%; +0.00%)</title><rect x="326.8" y="181" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="329.82" y="191.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.01%; 0.00%)</title><rect x="15.2" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.23" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (27 samples, 0.06%; +0.01%)</title><rect x="1150.3" y="469" width="0.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1153.32" y="479.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (32 samples, 0.07%; -0.01%)</title><rect x="781.8" y="149" width="0.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="784.81" y="159.5" ></text>
</g>
<g >
<title>operator delete (14 samples, 0.03%; -0.02%)</title><rect x="571.5" y="389" width="0.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="574.50" y="399.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, auth::role_or_anonymous&amp;&amp;, auth::get_permissions (5 samples, 0.01%; +0.00%)</title><rect x="803.7" y="309" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="806.67" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="679.3" y="469" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="682.32" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (5 samples, 0.01%; -0.01%)</title><rect x="881.5" y="309" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="884.50" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (31 samples, 0.07%; +0.05%)</title><rect x="1048.5" y="293" width="0.7" height="15.0" fill="rgb(255,155,155)" rx="2" ry="2" />
<text  x="1051.47" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (10 samples, 0.02%; +0.00%)</title><rect x="990.3" y="245" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="993.34" y="255.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (36 samples, 0.08%; -0.01%)</title><rect x="234.5" y="181" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="237.52" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (23 samples, 0.05%; +0.02%)</title><rect x="795.0" y="197" width="0.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="798.02" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (86 samples, 0.18%; +0.02%)</title><rect x="698.4" y="437" width="2.1" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="701.38" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (30 samples, 0.06%; -0.02%)</title><rect x="951.5" y="373" width="0.8" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="954.53" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (87 samples, 0.18%; +0.02%)</title><rect x="826.7" y="421" width="2.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="829.72" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (5 samples, 0.01%; +0.00%)</title><rect x="361.5" y="165" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="364.53" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (9 samples, 0.02%; -0.00%)</title><rect x="1140.1" y="309" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1143.13" y="319.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (20 samples, 0.04%; -0.01%)</title><rect x="556.9" y="293" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="559.92" y="303.5" ></text>
</g>
<g >
<title>dht::tri_compare (66 samples, 0.14%; +0.00%)</title><rect x="464.9" y="261" width="1.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="467.86" y="271.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (19 samples, 0.04%; -0.00%)</title><rect x="565.2" y="357" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="568.17" y="367.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (13 samples, 0.03%; +0.02%)</title><rect x="202.3" y="117" width="0.4" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="205.35" y="127.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (12 samples, 0.03%; +0.01%)</title><rect x="1031.4" y="213" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1034.44" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (71 samples, 0.15%; -0.01%)</title><rect x="1102.0" y="405" width="1.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1105.01" y="415.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (60 samples, 0.13%; +0.01%)</title><rect x="492.3" y="229" width="1.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="495.28" y="239.5" ></text>
</g>
<g >
<title>operator delete (40 samples, 0.08%; -0.01%)</title><rect x="676.7" y="485" width="1.0" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="679.74" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (9 samples, 0.02%; +0.00%)</title><rect x="310.2" y="181" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="313.24" y="191.5" ></text>
</g>
<g >
<title>operator new (51 samples, 0.11%; 0.00%)</title><rect x="845.6" y="357" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="848.61" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (475 samples, 1.00%; +0.02%)</title><rect x="227.9" y="229" width="11.7" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="230.88" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (18 samples, 0.04%; -0.00%)</title><rect x="596.2" y="437" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="599.23" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (8 samples, 0.02%; +0.01%)</title><rect x="524.4" y="325" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="527.43" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (89 samples, 0.19%; -0.01%)</title><rect x="808.6" y="325" width="2.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="811.56" y="335.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (117 samples, 0.25%; +0.01%)</title><rect x="718.1" y="341" width="2.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="721.08" y="351.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (6 samples, 0.01%; +0.01%)</title><rect x="976.1" y="357" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="979.09" y="367.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (591 samples, 1.24%; 0.00%)</title><rect x="1074.2" y="293" width="14.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1077.17" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.01%; 0.00%)</title><rect x="643.4" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="646.38" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; -0.00%)</title><rect x="780.4" y="229" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="783.45" y="239.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (5 samples, 0.01%; -0.00%)</title><rect x="928.3" y="325" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="931.30" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (46,663 samples, 98.02%; +0.00%)</title><rect x="21.7" y="533" width="1156.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="24.67" y="543.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (27 samples, 0.06%; +0.00%)</title><rect x="1136.8" y="421" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1139.76" y="431.5" ></text>
</g>
<g >
<title>sstring_hash::operator (27 samples, 0.06%; 0.00%)</title><rect x="1058.1" y="293" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1061.13" y="303.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (440 samples, 0.92%; +0.01%)</title><rect x="728.4" y="389" width="10.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="731.40" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (206 samples, 0.43%; +0.01%)</title><rect x="986.4" y="325" width="5.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="989.35" y="335.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (46 samples, 0.10%; +0.01%)</title><rect x="831.0" y="437" width="1.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="833.99" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (31 samples, 0.07%; +0.03%)</title><rect x="531.3" y="421" width="0.8" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="534.32" y="431.5" ></text>
</g>
<g >
<title>database::find_column_family (53 samples, 0.11%; -0.01%)</title><rect x="1016.9" y="245" width="1.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1019.91" y="255.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (9 samples, 0.02%; +0.01%)</title><rect x="684.0" y="437" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="687.03" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (415 samples, 0.87%; -0.02%)</title><rect x="490.7" y="261" width="10.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="493.74" y="271.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (13 samples, 0.03%; +0.01%)</title><rect x="235.1" y="165" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="238.09" y="175.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (14 samples, 0.03%; -0.02%)</title><rect x="15.7" y="261" width="0.4" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="18.73" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.06%; 0.00%)</title><rect x="1139.3" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.34" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (16 samples, 0.03%; -0.01%)</title><rect x="1045.8" y="229" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1048.82" y="239.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (12 samples, 0.03%; 0.00%)</title><rect x="991.2" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="994.16" y="287.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (10 samples, 0.02%; +0.01%)</title><rect x="792.6" y="117" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="795.64" y="127.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (160 samples, 0.34%; -0.01%)</title><rect x="34.6" y="469" width="4.0" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="37.64" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (97 samples, 0.20%; +0.03%)</title><rect x="970.4" y="325" width="2.4" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="973.41" y="335.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (68 samples, 0.14%; +0.03%)</title><rect x="851.8" y="453" width="1.7" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="854.81" y="463.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (23 samples, 0.05%; -0.01%)</title><rect x="412.8" y="421" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="415.76" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (39 samples, 0.08%; -0.01%)</title><rect x="645.0" y="485" width="1.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="647.99" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (23 samples, 0.05%; -0.01%)</title><rect x="1169.7" y="469" width="0.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1172.70" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (11 samples, 0.02%; -0.01%)</title><rect x="901.8" y="357" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="904.78" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (22,595 samples, 47.46%; -0.09%)</title><rect x="54.1" y="469" width="560.0" height="15.0" fill="rgb(116,116,255)" rx="2" ry="2" />
<text  x="57.07" y="479.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (10 samples, 0.02%; +0.00%)</title><rect x="15.1" y="277" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="18.11" y="287.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (16 samples, 0.03%; 0.00%)</title><rect x="1147.5" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1150.52" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.01%; 0.00%)</title><rect x="1134.6" y="421" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1137.55" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (75 samples, 0.16%; +0.01%)</title><rect x="243.4" y="213" width="1.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="246.39" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; -0.03%)</title><rect x="934.3" y="405" width="0.1" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="937.30" y="415.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (6 samples, 0.01%; -0.02%)</title><rect x="279.3" y="405" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="282.33" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.01%)</title><rect x="52.0" y="453" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="54.99" y="463.5" ></text>
</g>
<g >
<title>schema::position (8 samples, 0.02%; +0.00%)</title><rect x="934.1" y="405" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="937.05" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (21 samples, 0.04%; +0.04%)</title><rect x="99.4" y="389" width="0.5" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="102.36" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (32 samples, 0.07%; -0.03%)</title><rect x="101.0" y="437" width="0.8" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="104.04" y="447.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (6 samples, 0.01%; -0.00%)</title><rect x="213.4" y="149" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="216.40" y="159.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.01%; 0.00%)</title><rect x="928.2" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="931.18" y="319.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (420 samples, 0.88%; 0.00%)</title><rect x="301.6" y="213" width="10.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="304.59" y="223.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::got_cl (9 samples, 0.02%; +0.01%)</title><rect x="684.6" y="469" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="687.62" y="479.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (9 samples, 0.02%; 0.00%)</title><rect x="856.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.39" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (50 samples, 0.11%; +0.03%)</title><rect x="288.3" y="261" width="1.2" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="291.28" y="271.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (12 samples, 0.03%; -0.00%)</title><rect x="211.5" y="133" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="214.47" y="143.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (10 samples, 0.02%; -0.00%)</title><rect x="226.0" y="245" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="228.99" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (58 samples, 0.12%; -0.00%)</title><rect x="714.2" y="421" width="1.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="717.24" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (4,505 samples, 9.46%; +0.04%)</title><rect x="416.6" y="373" width="111.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="419.63" y="383.5" >std::_Functio..</text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (19 samples, 0.04%; +0.01%)</title><rect x="1040.2" y="277" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1043.21" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (5 samples, 0.01%; -0.01%)</title><rect x="250.8" y="261" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="253.83" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (6 samples, 0.01%; -0.01%)</title><rect x="813.3" y="389" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="816.32" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="439.4" y="309" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="442.36" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (37 samples, 0.08%; +0.01%)</title><rect x="276.0" y="357" width="0.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="278.99" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (10 samples, 0.02%; +0.00%)</title><rect x="112.1" y="373" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="115.15" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (6 samples, 0.01%; +0.01%)</title><rect x="1055.5" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1058.53" y="319.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (885 samples, 1.86%; +0.00%)</title><rect x="631.2" y="501" width="21.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="634.16" y="511.5" >s..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; -0.01%)</title><rect x="921.7" y="389" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="924.68" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (10 samples, 0.02%; +0.01%)</title><rect x="832.9" y="389" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="835.90" y="399.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (150 samples, 0.32%; -0.07%)</title><rect x="458.6" y="261" width="3.7" height="15.0" fill="rgb(142,142,255)" rx="2" ry="2" />
<text  x="461.62" y="271.5" ></text>
</g>
<g >
<title>operator new (82 samples, 0.17%; 0.00%)</title><rect x="1063.0" y="325" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1066.02" y="335.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (8 samples, 0.02%; -0.01%)</title><rect x="942.0" y="389" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="945.03" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (57 samples, 0.12%; +0.00%)</title><rect x="1157.7" y="421" width="1.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1160.68" y="431.5" ></text>
</g>
<g >
<title>operator new (18 samples, 0.04%; +0.00%)</title><rect x="444.9" y="293" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="447.86" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (6 samples, 0.01%; -0.01%)</title><rect x="253.7" y="309" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="256.68" y="319.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (8 samples, 0.02%; +0.01%)</title><rect x="500.6" y="245" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="503.63" y="255.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (23 samples, 0.05%; +0.01%)</title><rect x="904.2" y="325" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="907.21" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (16 samples, 0.03%; -0.01%)</title><rect x="557.0" y="277" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="560.02" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::future (42 samples, 0.09%; +0.02%)</title><rect x="973.9" y="357" width="1.0" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="976.91" y="367.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (32 samples, 0.07%; +0.01%)</title><rect x="721.1" y="405" width="0.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="724.08" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (6 samples, 0.01%; -0.02%)</title><rect x="551.6" y="293" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="554.57" y="303.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (113 samples, 0.24%; +0.03%)</title><rect x="354.2" y="165" width="2.8" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="357.16" y="175.5" ></text>
</g>
<g >
<title>db::block_for (5 samples, 0.01%; +0.00%)</title><rect x="1059.5" y="325" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1062.47" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (44 samples, 0.09%; -0.01%)</title><rect x="727.1" y="373" width="1.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="730.11" y="383.5" ></text>
</g>
<g >
<title>service::client_state::has_access (1,907 samples, 4.01%; -0.02%)</title><rect x="763.5" y="373" width="47.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="766.54" y="383.5" >serv..</text>
</g>
<g >
<title>utils::tuple_hash::operator (33 samples, 0.07%; +0.01%)</title><rect x="819.5" y="309" width="0.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="822.51" y="319.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (5 samples, 0.01%; +0.00%)</title><rect x="285.1" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="288.13" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (19 samples, 0.04%; +0.00%)</title><rect x="662.1" y="453" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="665.07" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (5 samples, 0.01%; -0.01%)</title><rect x="617.5" y="453" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="620.55" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (31 samples, 0.07%; +0.05%)</title><rect x="555.2" y="277" width="0.8" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="558.21" y="287.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (52 samples, 0.11%; +0.02%)</title><rect x="1164.8" y="469" width="1.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1167.79" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (22 samples, 0.05%; +0.01%)</title><rect x="815.0" y="293" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="817.98" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (26 samples, 0.05%; +0.02%)</title><rect x="1149.7" y="469" width="0.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1152.67" y="479.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (28 samples, 0.06%; +0.01%)</title><rect x="184.2" y="53" width="0.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="187.18" y="63.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (5 samples, 0.01%; +0.01%)</title><rect x="759.2" y="357" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="762.23" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (7 samples, 0.01%; +0.01%)</title><rect x="645.8" y="469" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="648.78" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (5 samples, 0.01%; +0.00%)</title><rect x="493.0" y="197" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="495.97" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; 0.00%)</title><rect x="196.4" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="199.45" y="127.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (17 samples, 0.04%; +0.00%)</title><rect x="841.8" y="341" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="844.82" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (16 samples, 0.03%; 0.00%)</title><rect x="19.0" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.00" y="351.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (5 samples, 0.01%; +0.00%)</title><rect x="595.6" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="598.56" y="431.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (6 samples, 0.01%; 0.00%)</title><rect x="326.7" y="181" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="329.65" y="191.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (9 samples, 0.02%; 0.00%)</title><rect x="676.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.97" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (30 samples, 0.06%; 0.00%)</title><rect x="251.2" y="277" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="254.23" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (40 samples, 0.08%; +0.01%)</title><rect x="1100.1" y="389" width="1.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1103.10" y="399.5" ></text>
</g>
<g >
<title>[unknown] (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.30" y="607.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (5 samples, 0.01%; +0.01%)</title><rect x="765.4" y="357" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="768.35" y="367.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (21 samples, 0.04%; -0.01%)</title><rect x="793.8" y="101" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="796.76" y="111.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (5 samples, 0.01%; 0.00%)</title><rect x="676.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="679.05" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (26 samples, 0.05%; +0.01%)</title><rect x="521.6" y="245" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="524.57" y="255.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (51 samples, 0.11%; -0.01%)</title><rect x="98.6" y="405" width="1.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="101.61" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (547 samples, 1.15%; +0.00%)</title><rect x="688.7" y="501" width="13.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="691.69" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (10 samples, 0.02%; 0.00%)</title><rect x="735.2" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="738.19" y="303.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (12 samples, 0.03%; +0.02%)</title><rect x="404.5" y="277" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="407.51" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (12 samples, 0.03%; -0.01%)</title><rect x="278.8" y="373" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="281.84" y="383.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (15 samples, 0.03%; +0.01%)</title><rect x="585.1" y="389" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="588.10" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="660.8" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="663.83" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,873 samples, 10.24%; -0.02%)</title><rect x="285.3" y="325" width="120.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="288.26" y="335.5" >seastar::intern..</text>
</g>
<g >
<title>auth::permissions_cache::get (994 samples, 2.09%; 0.00%)</title><rect x="775.6" y="277" width="24.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="778.59" y="287.5" >a..</text>
</g>
<g >
<title>operator new (30 samples, 0.06%; +0.01%)</title><rect x="494.8" y="197" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="497.78" y="207.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (8 samples, 0.02%; 0.00%)</title><rect x="499.0" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="501.97" y="239.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (29 samples, 0.06%; -0.01%)</title><rect x="382.7" y="213" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="385.69" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (5 samples, 0.01%; -0.00%)</title><rect x="538.4" y="261" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="541.36" y="271.5" ></text>
</g>
<g >
<title>row_cache::make_reader (492 samples, 1.03%; -0.01%)</title><rect x="512.7" y="341" width="12.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="515.65" y="351.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (13 samples, 0.03%; 0.00%)</title><rect x="592.1" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="595.14" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (11 samples, 0.02%; -0.00%)</title><rect x="636.8" y="405" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="639.81" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="627.0" y="485" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="629.99" y="495.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (16 samples, 0.03%; +0.00%)</title><rect x="818.4" y="277" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="821.42" y="287.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (5 samples, 0.01%; -0.01%)</title><rect x="739.2" y="357" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="742.18" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.01%)</title><rect x="403.9" y="277" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="406.94" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.05%; -0.00%)</title><rect x="522.8" y="245" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="525.84" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (5 samples, 0.01%; +0.00%)</title><rect x="1103.8" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1106.77" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (9 samples, 0.02%; +0.01%)</title><rect x="166.6" y="133" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="169.55" y="143.5" ></text>
</g>
<g >
<title>operator delete (47 samples, 0.10%; -0.03%)</title><rect x="547.4" y="325" width="1.1" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="550.38" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (7 samples, 0.01%; 0.00%)</title><rect x="1055.7" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1058.71" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::take (9 samples, 0.02%; +0.01%)</title><rect x="681.4" y="437" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="684.40" y="447.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.30" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (7 samples, 0.01%; -0.04%)</title><rect x="99.9" y="421" width="0.2" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="102.88" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (16 samples, 0.03%; +0.01%)</title><rect x="640.7" y="469" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="643.72" y="479.5" ></text>
</g>
<g >
<title>query_result_builder::consume (9 samples, 0.02%; 0.00%)</title><rect x="674.9" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="677.93" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (63 samples, 0.13%; +0.02%)</title><rect x="573.6" y="421" width="1.6" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="576.63" y="431.5" ></text>
</g>
<g >
<title>operator delete (18 samples, 0.04%; -0.01%)</title><rect x="550.0" y="277" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="553.03" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (11 samples, 0.02%; -0.00%)</title><rect x="438.2" y="293" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="441.17" y="303.5" ></text>
</g>
<g >
<title>reader_permit::consume (24 samples, 0.05%; +0.01%)</title><rect x="386.0" y="229" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="388.97" y="239.5" ></text>
</g>
<g >
<title>operator delete (20 samples, 0.04%; -0.00%)</title><rect x="658.6" y="469" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="661.60" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (18 samples, 0.04%; -0.02%)</title><rect x="40.7" y="469" width="0.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="43.71" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (18 samples, 0.04%; -0.01%)</title><rect x="1119.0" y="389" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1122.01" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (5 samples, 0.01%; -0.02%)</title><rect x="205.2" y="85" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="208.20" y="95.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (22 samples, 0.05%; -0.01%)</title><rect x="1171.6" y="453" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1174.61" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.06%; -0.01%)</title><rect x="935.7" y="357" width="0.7" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="938.71" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (5 samples, 0.01%; 0.00%)</title><rect x="16.6" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.62" y="367.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous&gt; (6 samples, 0.01%; +0.01%)</title><rect x="803.5" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="806.52" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (75 samples, 0.16%; +0.01%)</title><rect x="1035.9" y="245" width="1.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1038.90" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (59 samples, 0.12%; +0.01%)</title><rect x="836.3" y="405" width="1.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="839.32" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (9 samples, 0.02%; -0.01%)</title><rect x="44.9" y="469" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="47.95" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (12 samples, 0.03%; 0.00%)</title><rect x="277.7" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="280.70" y="367.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (9 samples, 0.02%; 0.00%)</title><rect x="905.6" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="908.65" y="399.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (4,581 samples, 9.62%; +0.01%)</title><rect x="414.9" y="405" width="113.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="417.92" y="415.5" >mutation_sourc..</text>
</g>
<g >
<title>seastar::memory::allocate (35 samples, 0.07%; +0.01%)</title><rect x="536.0" y="341" width="0.8" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="538.98" y="351.5" ></text>
</g>
<g >
<title>query::result::builder::builder (197 samples, 0.41%; +0.01%)</title><rect x="584.1" y="421" width="4.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="587.09" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (67 samples, 0.14%; +0.01%)</title><rect x="734.4" y="325" width="1.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="737.37" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,933 samples, 10.36%; +0.00%)</title><rect x="284.4" y="373" width="122.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="287.41" y="383.5" >flat_mutation_r..</text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (65 samples, 0.14%; +0.01%)</title><rect x="149.3" y="213" width="1.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="152.25" y="223.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (77 samples, 0.16%; +0.01%)</title><rect x="742.1" y="389" width="1.9" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="745.05" y="399.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (23 samples, 0.05%; +0.00%)</title><rect x="752.7" y="325" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="755.74" y="335.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (5 samples, 0.01%; -0.01%)</title><rect x="1049.7" y="325" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1052.71" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (27 samples, 0.06%; +0.02%)</title><rect x="320.6" y="181" width="0.7" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="323.63" y="191.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (5 samples, 0.01%; +0.00%)</title><rect x="477.8" y="325" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="480.78" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (9 samples, 0.02%; -0.04%)</title><rect x="1141.8" y="485" width="0.2" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="1144.79" y="495.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (29 samples, 0.06%; -0.00%)</title><rect x="496.4" y="197" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="499.39" y="207.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%; -0.01%)</title><rect x="559.4" y="325" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="562.45" y="335.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (23 samples, 0.05%; -0.01%)</title><rect x="517.8" y="277" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="520.81" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (6 samples, 0.01%; 0.00%)</title><rect x="141.2" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="144.22" y="271.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (11 samples, 0.02%; +0.00%)</title><rect x="822.4" y="277" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="825.36" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (33 samples, 0.07%; +0.02%)</title><rect x="1101.2" y="405" width="0.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1104.16" y="415.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (5 samples, 0.01%; +0.00%)</title><rect x="1090.8" y="245" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1093.83" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (8 samples, 0.02%; +0.00%)</title><rect x="570.7" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="573.70" y="383.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (9 samples, 0.02%; -0.01%)</title><rect x="225.5" y="245" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="228.47" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1,288 samples, 2.71%; +0.01%)</title><rect x="167.7" y="133" width="31.9" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="170.72" y="143.5" >co..</text>
</g>
<g >
<title>operator delete (37 samples, 0.08%; -0.03%)</title><rect x="57.7" y="453" width="0.9" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="60.67" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt;::operator (7 samples, 0.01%; 0.00%)</title><rect x="73.6" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.55" y="399.5" ></text>
</g>
<g >
<title>[unknown] (147 samples, 0.31%; 0.00%)</title><rect x="10.3" y="597" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.30" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (6 samples, 0.01%; +0.00%)</title><rect x="1094.9" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1097.94" y="367.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (6,660 samples, 13.99%; -0.01%)</title><rect x="112.9" y="373" width="165.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="115.91" y="383.5" >seastar::repeat&lt;mergi..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (192 samples, 0.40%; +0.01%)</title><rect x="815.7" y="341" width="4.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="818.67" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (6 samples, 0.01%; +0.01%)</title><rect x="829.2" y="437" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="832.20" y="447.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (30 samples, 0.06%; +0.02%)</title><rect x="687.2" y="469" width="0.7" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="690.15" y="479.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (10 samples, 0.02%; -0.00%)</title><rect x="913.3" y="373" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="916.26" y="383.5" ></text>
</g>
<g >
<title>freeze (12 samples, 0.03%; 0.00%)</title><rect x="1140.4" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.40" y="207.5" ></text>
</g>
<g >
<title>operator new (94 samples, 0.20%; +0.00%)</title><rect x="966.4" y="357" width="2.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="969.40" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (8 samples, 0.02%; +0.01%)</title><rect x="1060.7" y="325" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1063.66" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (34 samples, 0.07%; +0.01%)</title><rect x="759.8" y="357" width="0.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="762.80" y="367.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (9 samples, 0.02%; -0.01%)</title><rect x="576.3" y="405" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="579.30" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; 0.00%)</title><rect x="550.4" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="553.35" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (22 samples, 0.05%; +0.02%)</title><rect x="1071.1" y="341" width="0.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="1074.10" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (7 samples, 0.01%; -0.01%)</title><rect x="655.2" y="469" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="658.22" y="479.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (5 samples, 0.01%; -0.00%)</title><rect x="59.6" y="453" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="62.65" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.01%)</title><rect x="800.3" y="277" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="803.33" y="287.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (30 samples, 0.06%; +0.01%)</title><rect x="283.7" y="373" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="286.67" y="383.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; +0.00%)</title><rect x="752.9" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="755.91" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (196 samples, 0.41%; -0.01%)</title><rect x="216.3" y="229" width="4.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="219.33" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (6 samples, 0.01%; -0.01%)</title><rect x="850.8" y="405" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="853.77" y="415.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (6 samples, 0.01%; -0.00%)</title><rect x="735.3" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="738.29" y="287.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (105 samples, 0.22%; -0.01%)</title><rect x="628.6" y="501" width="2.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="631.55" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (8 samples, 0.02%; 0.00%)</title><rect x="570.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="573.01" y="383.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (14 samples, 0.03%; -0.01%)</title><rect x="500.1" y="229" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="503.08" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (93 samples, 0.20%; -0.02%)</title><rect x="664.7" y="485" width="2.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="667.74" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (5 samples, 0.01%; 0.00%)</title><rect x="592.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="595.64" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (13 samples, 0.03%; -0.00%)</title><rect x="1177.8" y="453" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1180.78" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (18 samples, 0.04%; -0.01%)</title><rect x="802.9" y="277" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="805.86" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (6,024 samples, 12.65%; -0.03%)</title><rect x="705.0" y="501" width="149.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="708.05" y="511.5" >seastar::internal::..</text>
</g>
<g >
<title>range_tombstone_accumulator::clear (71 samples, 0.15%; +0.00%)</title><rect x="359.9" y="213" width="1.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="362.89" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (17 samples, 0.04%; -0.01%)</title><rect x="824.0" y="421" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="827.05" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (8 samples, 0.02%; -0.00%)</title><rect x="410.7" y="373" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="413.65" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (38 samples, 0.08%; +0.01%)</title><rect x="68.6" y="405" width="1.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="71.65" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (64 samples, 0.13%; +0.03%)</title><rect x="1162.5" y="453" width="1.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1165.54" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (98 samples, 0.21%; +0.00%)</title><rect x="844.7" y="389" width="2.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="847.67" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (57 samples, 0.12%; +0.03%)</title><rect x="751.3" y="325" width="1.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="754.32" y="335.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;, &amp;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;::_link&gt;::expire (6 samples, 0.01%; -0.02%)</title><rect x="1177.9" y="437" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1180.88" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (6 samples, 0.01%; -0.00%)</title><rect x="803.2" y="261" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="806.15" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (6 samples, 0.01%; +0.00%)</title><rect x="419.1" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="422.11" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (14 samples, 0.03%; -0.00%)</title><rect x="612.5" y="373" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="615.52" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (18 samples, 0.04%; -0.01%)</title><rect x="1154.2" y="421" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1157.18" y="431.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (202 samples, 0.42%; -0.02%)</title><rect x="268.2" y="309" width="5.0" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="271.18" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (7 samples, 0.01%; 0.00%)</title><rect x="1176.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.00" y="399.5" ></text>
</g>
<g >
<title>mutation_querier::consume (7 samples, 0.01%; +0.00%)</title><rect x="675.0" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="677.96" y="287.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; +0.00%)</title><rect x="841.4" y="325" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="844.40" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.05%; -0.00%)</title><rect x="480.0" y="277" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="483.03" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (17 samples, 0.04%; +0.01%)</title><rect x="909.1" y="341" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="912.14" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (7 samples, 0.01%; 0.00%)</title><rect x="571.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="574.32" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="534.4" y="341" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="537.44" y="351.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (415 samples, 0.87%; -0.00%)</title><rect x="653.1" y="501" width="10.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="656.12" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (22 samples, 0.05%; -0.02%)</title><rect x="438.6" y="293" width="0.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="441.61" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (24 samples, 0.05%; +0.01%)</title><rect x="646.3" y="469" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="649.30" y="479.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt; &gt; (5 samples, 0.01%; -0.00%)</title><rect x="803.9" y="325" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="806.90" y="335.5" ></text>
</g>
<g >
<title>operator delete (54 samples, 0.11%; -0.03%)</title><rect x="567.3" y="341" width="1.3" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="570.26" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (77 samples, 0.16%; -0.01%)</title><rect x="1114.3" y="341" width="1.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1117.33" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (37 samples, 0.08%; +0.02%)</title><rect x="501.0" y="277" width="0.9" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="504.03" y="287.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (33 samples, 0.07%; +0.05%)</title><rect x="381.4" y="213" width="0.8" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="384.38" y="223.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (20 samples, 0.04%; -0.02%)</title><rect x="517.9" y="261" width="0.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="520.88" y="271.5" ></text>
</g>
<g >
<title>operator new (41 samples, 0.09%; -0.00%)</title><rect x="483.5" y="293" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="486.45" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (14 samples, 0.03%; +0.02%)</title><rect x="892.8" y="277" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="895.81" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (92 samples, 0.19%; -0.00%)</title><rect x="287.4" y="293" width="2.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="290.44" y="303.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (6 samples, 0.01%; -0.00%)</title><rect x="676.0" y="485" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="679.02" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (119 samples, 0.25%; +0.00%)</title><rect x="16.6" y="373" width="2.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="19.59" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (53 samples, 0.11%; +0.02%)</title><rect x="1153.5" y="437" width="1.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="1156.51" y="447.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (12 samples, 0.03%; 0.00%)</title><rect x="551.3" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="554.27" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (32 samples, 0.07%; 0.00%)</title><rect x="857.0" y="405" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.01" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (24 samples, 0.05%; -0.02%)</title><rect x="641.3" y="469" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="644.27" y="479.5" ></text>
</g>
<g >
<title>schema::get_partitioner (19 samples, 0.04%; +0.02%)</title><rect x="933.5" y="405" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="936.53" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (11 samples, 0.02%; +0.00%)</title><rect x="600.0" y="437" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="602.95" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (8 samples, 0.02%; -0.00%)</title><rect x="579.0" y="373" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="581.98" y="383.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (16 samples, 0.03%; 0.00%)</title><rect x="1177.7" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1180.73" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (28 samples, 0.06%; 0.00%)</title><rect x="903.5" y="309" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="906.51" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::stats (30 samples, 0.06%; -0.02%)</title><rect x="477.0" y="309" width="0.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="480.03" y="319.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (16 samples, 0.03%; +0.02%)</title><rect x="924.0" y="389" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="926.99" y="399.5" ></text>
</g>
<g >
<title>compound_type&lt; (73 samples, 0.15%; +0.01%)</title><rect x="907.8" y="373" width="1.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="910.78" y="383.5" ></text>
</g>
<g >
<title>operator delete (21 samples, 0.04%; -0.04%)</title><rect x="404.9" y="261" width="0.5" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="407.85" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (20 samples, 0.04%; +0.02%)</title><rect x="1141.0" y="485" width="0.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1144.05" y="495.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (9 samples, 0.02%; +0.00%)</title><rect x="287.0" y="293" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="290.02" y="303.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (20 samples, 0.04%; +0.04%)</title><rect x="429.1" y="293" width="0.5" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="432.12" y="303.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (264 samples, 0.55%; +0.02%)</title><rect x="1075.8" y="245" width="6.6" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="1078.83" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (16 samples, 0.03%; 0.00%)</title><rect x="219.5" y="133" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="222.55" y="143.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (141 samples, 0.30%; -0.03%)</title><rect x="70.2" y="405" width="3.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="73.23" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (6 samples, 0.01%; 0.00%)</title><rect x="327.5" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="330.54" y="191.5" ></text>
</g>
<g >
<title>table::make_reader (7 samples, 0.01%; 0.00%)</title><rect x="528.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="531.29" y="383.5" ></text>
</g>
<g >
<title>reader_permit::consume (7 samples, 0.01%; +0.01%)</title><rect x="269.9" y="293" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="272.86" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (37 samples, 0.08%; 0.00%)</title><rect x="856.9" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.89" y="463.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (163 samples, 0.34%; -0.00%)</title><rect x="458.3" y="277" width="4.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="461.29" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.30" y="463.5" ></text>
</g>
<g >
<title>operator new (30 samples, 0.06%; +0.00%)</title><rect x="1158.3" y="389" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1161.30" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::stats (21 samples, 0.04%; -0.03%)</title><rect x="519.9" y="293" width="0.5" height="15.0" fill="rgb(179,179,255)" rx="2" ry="2" />
<text  x="522.86" y="303.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (6 samples, 0.01%; -0.00%)</title><rect x="243.2" y="213" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="246.24" y="223.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (5 samples, 0.01%; -0.01%)</title><rect x="1093.4" y="341" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1096.38" y="351.5" ></text>
</g>
<g >
<title>perf_simple_que (47,605 samples, 100.00%; 0.00%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >perf_simple_que</text>
</g>
<g >
<title>cql3::query_processor::execute_direct (259 samples, 0.54%; 0.00%)</title><rect x="14.7" y="501" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.71" y="511.5" ></text>
</g>
<g >
<title>operator new (27 samples, 0.06%; -0.00%)</title><rect x="445.9" y="325" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="448.90" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (5 samples, 0.01%; -0.01%)</title><rect x="1068.9" y="277" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1071.89" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (5 samples, 0.01%; -0.00%)</title><rect x="988.0" y="277" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="991.04" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (5 samples, 0.01%; +0.00%)</title><rect x="439.2" y="293" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="442.16" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (19 samples, 0.04%; +0.01%)</title><rect x="1024.3" y="165" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1027.25" y="175.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (6 samples, 0.01%; 0.00%)</title><rect x="659.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="662.12" y="463.5" ></text>
</g>
<g >
<title>malloc (24 samples, 0.05%; 0.00%)</title><rect x="587.4" y="373" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="590.41" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (25 samples, 0.05%; +0.00%)</title><rect x="1034.2" y="213" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1037.17" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (17 samples, 0.04%; +0.01%)</title><rect x="1094.4" y="341" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1097.40" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (17 samples, 0.04%; +0.00%)</title><rect x="708.9" y="389" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="711.91" y="399.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (87 samples, 0.18%; +0.02%)</title><rect x="589.6" y="437" width="2.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="592.59" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (62 samples, 0.13%; 0.00%)</title><rect x="15.1" y="357" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.06" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (8 samples, 0.02%; -0.00%)</title><rect x="840.2" y="373" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="843.23" y="383.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (41 samples, 0.09%; -0.01%)</title><rect x="468.4" y="213" width="1.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="471.43" y="223.5" ></text>
</g>
<g >
<title>row::compact_and_expire (6 samples, 0.01%; 0.00%)</title><rect x="675.2" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.15" y="303.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.01%; +0.01%)</title><rect x="208.5" y="181" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="211.49" y="191.5" ></text>
</g>
<g >
<title>compound_type&lt; (168 samples, 0.35%; +0.01%)</title><rect x="924.6" y="373" width="4.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="927.56" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (1,826 samples, 3.84%; -0.06%)</title><rect x="1002.2" y="293" width="45.3" height="15.0" fill="rgb(151,151,255)" rx="2" ry="2" />
<text  x="1005.19" y="303.5" >serv..</text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (6 samples, 0.01%; -0.02%)</title><rect x="674.4" y="485" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="677.41" y="495.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; +0.00%)</title><rect x="735.5" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="738.46" y="287.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (11 samples, 0.02%; -0.02%)</title><rect x="921.4" y="389" width="0.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="924.41" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (41 samples, 0.09%; -0.01%)</title><rect x="1147.9" y="485" width="1.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1150.91" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (14 samples, 0.03%; 0.00%)</title><rect x="856.3" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.32" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (19 samples, 0.04%; +0.00%)</title><rect x="782.1" y="133" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="785.13" y="143.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; -0.00%)</title><rect x="892.4" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="895.41" y="287.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (14 samples, 0.03%; +0.02%)</title><rect x="510.6" y="325" width="0.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="513.62" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; +0.01%)</title><rect x="798.5" y="229" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="801.52" y="239.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (270 samples, 0.57%; -0.02%)</title><rect x="532.4" y="405" width="6.7" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="535.38" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (9 samples, 0.02%; +0.01%)</title><rect x="836.0" y="405" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="839.02" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (5 samples, 0.01%; +0.01%)</title><rect x="841.7" y="357" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="844.70" y="367.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (22 samples, 0.05%; 0.00%)</title><rect x="1139.4" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.39" y="287.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (8 samples, 0.02%; +0.01%)</title><rect x="806.4" y="341" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="809.37" y="351.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.03%; -0.00%)</title><rect x="757.4" y="373" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="760.45" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (8 samples, 0.02%; 0.00%)</title><rect x="389.0" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="392.04" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (92 samples, 0.19%; +0.03%)</title><rect x="966.4" y="341" width="2.3" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="969.45" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="39.0" y="437" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="41.98" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (5 samples, 0.01%; -0.00%)</title><rect x="1094.8" y="357" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1097.82" y="367.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.06%; -0.00%)</title><rect x="506.6" y="277" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="509.63" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (113 samples, 0.24%; +0.01%)</title><rect x="403.2" y="309" width="2.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="406.24" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (20 samples, 0.04%; +0.00%)</title><rect x="1089.0" y="293" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1092.02" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (12 samples, 0.03%; +0.01%)</title><rect x="830.7" y="437" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="833.67" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (24 samples, 0.05%; +0.01%)</title><rect x="939.7" y="341" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="942.70" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (176 samples, 0.37%; +0.01%)</title><rect x="716.6" y="357" width="4.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="719.62" y="367.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (14 samples, 0.03%; +0.02%)</title><rect x="450.0" y="325" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="452.99" y="335.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (128 samples, 0.27%; +0.00%)</title><rect x="504.3" y="325" width="3.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="507.30" y="335.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (143 samples, 0.30%; +0.02%)</title><rect x="535.0" y="389" width="3.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="538.01" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (18 samples, 0.04%; +0.02%)</title><rect x="196.6" y="117" width="0.4" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="199.59" y="127.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (6 samples, 0.01%; 0.00%)</title><rect x="124.2" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="127.24" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (137 samples, 0.29%; -0.01%)</title><rect x="576.5" y="421" width="3.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="579.53" y="431.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (5 samples, 0.01%; -0.00%)</title><rect x="18.7" y="245" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="21.68" y="255.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (36 samples, 0.08%; 0.00%)</title><rect x="10.4" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.37" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (5 samples, 0.01%; -0.00%)</title><rect x="613.8" y="437" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="616.78" y="447.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (104 samples, 0.22%; -0.01%)</title><rect x="889.5" y="261" width="2.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="892.48" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (5 samples, 0.01%; +0.00%)</title><rect x="160.5" y="229" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="163.48" y="239.5" ></text>
</g>
<g >
<title>table::query (33 samples, 0.07%; 0.00%)</title><rect x="1175.9" y="501" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1178.87" y="511.5" ></text>
</g>
<g >
<title>tracing::add_table_name (24 samples, 0.05%; +0.04%)</title><rect x="1137.4" y="421" width="0.6" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="1140.43" y="431.5" ></text>
</g>
<g >
<title>table::as_mutation_source (103 samples, 0.22%; -0.01%)</title><rect x="611.0" y="437" width="2.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="613.98" y="447.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (6 samples, 0.01%; 0.00%)</title><rect x="717.8" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="720.81" y="303.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (652 samples, 1.37%; +0.01%)</title><rect x="779.6" y="245" width="16.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="782.56" y="255.5" ></text>
</g>
<g >
<title>operator delete (13 samples, 0.03%; -0.00%)</title><rect x="46.3" y="501" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="49.34" y="511.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (23 samples, 0.05%; +0.01%)</title><rect x="1057.5" y="277" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1060.49" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (19 samples, 0.04%; -0.03%)</title><rect x="1020.2" y="213" width="0.5" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="1023.19" y="223.5" ></text>
</g>
<g >
<title>database::has_keyspace (92 samples, 0.19%; -0.00%)</title><rect x="840.1" y="405" width="2.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="843.08" y="415.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (7 samples, 0.01%; 0.00%)</title><rect x="235.8" y="165" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="238.76" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (29 samples, 0.06%; +0.01%)</title><rect x="687.9" y="469" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="690.89" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (111 samples, 0.23%; +0.00%)</title><rect x="202.7" y="117" width="2.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="205.67" y="127.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (13 samples, 0.03%; +0.00%)</title><rect x="697.9" y="453" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="700.93" y="463.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (8 samples, 0.02%; +0.01%)</title><rect x="436.8" y="293" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="439.83" y="303.5" ></text>
</g>
<g >
<title>database::find_column_family (59 samples, 0.12%; -0.00%)</title><rect x="814.1" y="341" width="1.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="817.06" y="351.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (8 samples, 0.02%; +0.01%)</title><rect x="577.3" y="405" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="580.27" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (46 samples, 0.10%; +0.07%)</title><rect x="1116.9" y="341" width="1.1" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="1119.90" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (10 samples, 0.02%; -0.01%)</title><rect x="531.1" y="421" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="534.07" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (28 samples, 0.06%; +0.01%)</title><rect x="752.0" y="309" width="0.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="755.04" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (37 samples, 0.08%; +0.01%)</title><rect x="649.3" y="485" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="652.33" y="495.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (98 samples, 0.21%; +0.01%)</title><rect x="654.4" y="485" width="2.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="657.36" y="495.5" ></text>
</g>
<g >
<title>seastar::gate::enter (9 samples, 0.02%; -0.00%)</title><rect x="1035.2" y="229" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1038.23" y="239.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (150 samples, 0.32%; +0.04%)</title><rect x="917.5" y="341" width="3.7" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="920.49" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (13 samples, 0.03%; 0.00%)</title><rect x="45.5" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.47" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (26 samples, 0.05%; +0.01%)</title><rect x="1119.7" y="389" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1122.66" y="399.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (41 samples, 0.09%; +0.07%)</title><rect x="1133.5" y="405" width="1.0" height="15.0" fill="rgb(255,134,134)" rx="2" ry="2" />
<text  x="1136.49" y="415.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (1,288 samples, 2.71%; -0.01%)</title><rect x="771.9" y="325" width="31.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="774.92" y="335.5" >st..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (8 samples, 0.02%; -0.00%)</title><rect x="1061.9" y="341" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1064.88" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (66 samples, 0.14%; +0.02%)</title><rect x="548.8" y="309" width="1.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="551.84" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (7 samples, 0.01%; -0.03%)</title><rect x="1037.8" y="261" width="0.1" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="1040.76" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="112.8" y="373" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="115.79" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (5 samples, 0.01%; -0.00%)</title><rect x="676.0" y="453" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="679.05" y="463.5" ></text>
</g>
<g >
<title>table::make_reader (4,399 samples, 9.24%; -0.04%)</title><rect x="419.3" y="357" width="109.0" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="422.25" y="367.5" >table::make_r..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (7 samples, 0.01%; +0.01%)</title><rect x="681.1" y="453" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="684.08" y="463.5" ></text>
</g>
<g >
<title>operator delete (21 samples, 0.04%; -0.02%)</title><rect x="435.0" y="277" width="0.6" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="438.04" y="287.5" ></text>
</g>
<g >
<title>operator new (72 samples, 0.15%; +0.00%)</title><rect x="1043.7" y="245" width="1.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1046.66" y="255.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (9 samples, 0.02%; -0.01%)</title><rect x="468.2" y="213" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="471.21" y="223.5" ></text>
</g>
<g >
<title>seastar::preempt_io_context::reset_preemption_monitor (10 samples, 0.02%; 0.00%)</title><rect x="1142.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.78" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (13 samples, 0.03%; 0.00%)</title><rect x="518.6" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="521.58" y="319.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (75 samples, 0.16%; -0.00%)</title><rect x="407.2" y="373" width="1.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="410.18" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (42 samples, 0.09%; +0.00%)</title><rect x="783.9" y="197" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="786.94" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::reserve (5 samples, 0.01%; +0.00%)</title><rect x="1099.7" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1102.73" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (78 samples, 0.16%; +0.00%)</title><rect x="404.1" y="293" width="1.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="407.11" y="303.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (7 samples, 0.01%; +0.00%)</title><rect x="834.7" y="341" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="837.68" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%; +0.00%)</title><rect x="139.3" y="277" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="142.29" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (6 samples, 0.01%; +0.00%)</title><rect x="900.7" y="341" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="903.69" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (6 samples, 0.01%; -0.03%)</title><rect x="424.3" y="341" width="0.1" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="427.26" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::~modification_statement (5 samples, 0.01%; -0.00%)</title><rect x="631.0" y="469" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="634.01" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (27 samples, 0.06%; +0.02%)</title><rect x="593.8" y="437" width="0.6" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="596.78" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.00%)</title><rect x="769.8" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="772.81" y="271.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (31 samples, 0.07%; +0.00%)</title><rect x="453.7" y="293" width="0.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="456.73" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (6 samples, 0.01%; +0.00%)</title><rect x="189.8" y="53" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="192.83" y="63.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (7 samples, 0.01%; 0.00%)</title><rect x="696.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.82" y="431.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (45 samples, 0.09%; 0.00%)</title><rect x="212.2" y="149" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="215.16" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; +0.01%)</title><rect x="677.5" y="469" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="680.51" y="479.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (78 samples, 0.16%; -0.01%)</title><rect x="230.3" y="197" width="2.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="233.33" y="207.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (11 samples, 0.02%; -0.00%)</title><rect x="11.3" y="581" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="14.26" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (6 samples, 0.01%; +0.01%)</title><rect x="140.9" y="261" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="143.92" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (7 samples, 0.01%; -0.00%)</title><rect x="33.0" y="485" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="35.98" y="495.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (44 samples, 0.09%; -0.01%)</title><rect x="183.8" y="69" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="186.78" y="79.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (289 samples, 0.61%; -0.01%)</title><rect x="429.6" y="293" width="7.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="432.64" y="303.5" ></text>
</g>
<g >
<title>operator delete (19 samples, 0.04%; +0.01%)</title><rect x="38.6" y="453" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="41.63" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (8 samples, 0.02%; -0.01%)</title><rect x="739.4" y="405" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="742.40" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (28 samples, 0.06%; -0.02%)</title><rect x="790.7" y="117" width="0.7" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="793.71" y="127.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (6 samples, 0.01%; -0.01%)</title><rect x="384.4" y="229" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="387.43" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (12 samples, 0.03%; -0.02%)</title><rect x="361.2" y="149" width="0.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="364.23" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (5 samples, 0.01%; 0.00%)</title><rect x="18.0" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.98" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (10 samples, 0.02%; +0.01%)</title><rect x="672.6" y="437" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="675.63" y="447.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (6 samples, 0.01%; +0.01%)</title><rect x="1047.3" y="261" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1050.30" y="271.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (162 samples, 0.34%; -0.00%)</title><rect x="1108.7" y="389" width="4.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1111.70" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (15 samples, 0.03%; -0.01%)</title><rect x="1148.9" y="485" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1151.93" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (5,494 samples, 11.54%; -0.01%)</title><rect x="962.3" y="373" width="136.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="965.33" y="383.5" >service::storage_..</text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (16 samples, 0.03%; +0.02%)</title><rect x="752.3" y="293" width="0.4" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="755.34" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (566 samples, 1.19%; +0.01%)</title><rect x="227.6" y="245" width="14.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="230.60" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (302 samples, 0.63%; -0.00%)</title><rect x="984.0" y="341" width="7.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="987.00" y="351.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (13 samples, 0.03%; +0.01%)</title><rect x="319.3" y="181" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="322.26" y="191.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (14 samples, 0.03%; +0.00%)</title><rect x="426.9" y="325" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="429.94" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; -0.01%)</title><rect x="49.5" y="485" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="52.53" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (23,041 samples, 48.40%; +0.05%)</title><rect x="46.7" y="501" width="571.1" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="49.68" y="511.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>operator new (9 samples, 0.02%; -0.01%)</title><rect x="511.7" y="341" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="514.71" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (17 samples, 0.04%; +0.02%)</title><rect x="475.4" y="325" width="0.4" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="478.37" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (45 samples, 0.09%; 0.00%)</title><rect x="15.4" y="293" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.35" y="303.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (2,714 samples, 5.70%; -0.03%)</title><rect x="755.5" y="405" width="67.3" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="758.51" y="415.5" >service..</text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (7 samples, 0.01%; 0.00%)</title><rect x="14.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.51" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (8 samples, 0.02%; -0.01%)</title><rect x="862.1" y="469" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="865.15" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (6 samples, 0.01%; -0.05%)</title><rect x="286.3" y="293" width="0.1" height="15.0" fill="rgb(158,158,255)" rx="2" ry="2" />
<text  x="289.30" y="303.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (175 samples, 0.37%; -0.00%)</title><rect x="790.1" y="165" width="4.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="793.07" y="175.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (495 samples, 1.04%; +0.00%)</title><rect x="676.4" y="501" width="12.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="679.42" y="511.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (47 samples, 0.10%; -0.01%)</title><rect x="74.1" y="405" width="1.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="77.10" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (6 samples, 0.01%; 0.00%)</title><rect x="783.7" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="786.74" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1,192 samples, 2.50%; -0.00%)</title><rect x="542.4" y="405" width="29.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="545.37" y="415.5" >fl..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (73 samples, 0.15%; +0.01%)</title><rect x="667.8" y="453" width="1.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="670.84" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (10 samples, 0.02%; +0.00%)</title><rect x="954.6" y="389" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="957.58" y="399.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (15 samples, 0.03%; +0.02%)</title><rect x="585.5" y="405" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="588.47" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (56 samples, 0.12%; +0.06%)</title><rect x="988.9" y="261" width="1.4" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="991.88" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (24 samples, 0.05%; -0.00%)</title><rect x="541.8" y="421" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="544.78" y="431.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (191 samples, 0.40%; -0.01%)</title><rect x="440.1" y="293" width="4.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="443.10" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (5 samples, 0.01%; -0.00%)</title><rect x="488.2" y="261" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="491.21" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (5,842 samples, 12.27%; +0.04%)</title><rect x="955.0" y="389" width="144.9" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="958.05" y="399.5" >service::storage_p..</text>
</g>
<g >
<title>reader_permit::impl::signal (48 samples, 0.10%; +0.00%)</title><rect x="266.8" y="309" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="269.84" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (208 samples, 0.44%; 0.00%)</title><rect x="14.9" y="421" width="5.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.91" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (13 samples, 0.03%; +0.00%)</title><rect x="630.1" y="485" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="633.14" y="495.5" ></text>
</g>
<g >
<title>db::is_serial_consistency (6 samples, 0.01%; +0.00%)</title><rect x="1138.4" y="437" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1141.42" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (39 samples, 0.08%; +0.01%)</title><rect x="221.9" y="213" width="1.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="224.93" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (19 samples, 0.04%; +0.01%)</title><rect x="701.4" y="485" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="704.40" y="495.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (8 samples, 0.02%; 0.00%)</title><rect x="811.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="814.06" y="399.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (25 samples, 0.05%; 0.00%)</title><rect x="1058.1" y="277" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1061.13" y="287.5" ></text>
</g>
<g >
<title>operator delete (48 samples, 0.10%; -0.01%)</title><rect x="605.3" y="373" width="1.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="608.30" y="383.5" ></text>
</g>
<g >
<title>operator new (23 samples, 0.05%; +0.00%)</title><rect x="408.2" y="341" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="411.18" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (26 samples, 0.05%; 0.00%)</title><rect x="834.3" y="373" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="837.26" y="383.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (6 samples, 0.01%; 0.00%)</title><rect x="498.3" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="501.28" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (7 samples, 0.01%; -0.00%)</title><rect x="961.3" y="373" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="964.34" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (31 samples, 0.07%; +0.02%)</title><rect x="546.2" y="309" width="0.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="549.19" y="319.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (75 samples, 0.16%; -0.00%)</title><rect x="768.1" y="325" width="1.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="771.13" y="335.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (263 samples, 0.55%; +0.00%)</title><rect x="14.7" y="517" width="6.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="17.68" y="527.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (134 samples, 0.28%; -0.00%)</title><rect x="520.5" y="293" width="3.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="523.51" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (15 samples, 0.03%; +0.01%)</title><rect x="503.6" y="325" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="506.55" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (23 samples, 0.05%; +0.02%)</title><rect x="537.9" y="309" width="0.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="540.93" y="319.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (45 samples, 0.09%; +0.01%)</title><rect x="884.1" y="277" width="1.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="887.08" y="287.5" ></text>
</g>
<g >
<title>database::do_apply (26 samples, 0.05%; 0.00%)</title><rect x="1139.4" y="341" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.39" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (13 samples, 0.03%; 0.00%)</title><rect x="1176.0" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.00" y="479.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (51 samples, 0.11%; +0.01%)</title><rect x="790.3" y="149" width="1.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="793.26" y="159.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (18 samples, 0.04%; +0.01%)</title><rect x="834.5" y="357" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="837.46" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (9 samples, 0.02%; -0.01%)</title><rect x="1148.7" y="469" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1151.71" y="479.5" ></text>
</g>
<g >
<title>operator delete (21 samples, 0.04%; -0.01%)</title><rect x="575.5" y="405" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="578.54" y="415.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (18 samples, 0.04%; -0.01%)</title><rect x="166.1" y="133" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="169.11" y="143.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (15 samples, 0.03%; +0.01%)</title><rect x="212.6" y="117" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="215.61" y="127.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (12 samples, 0.03%; -0.01%)</title><rect x="1143.5" y="501" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1146.55" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (13 samples, 0.03%; +0.01%)</title><rect x="630.5" y="485" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="633.46" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (10 samples, 0.02%; 0.00%)</title><rect x="15.1" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.11" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (6 samples, 0.01%; 0.00%)</title><rect x="1140.2" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.18" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (13 samples, 0.03%; +0.01%)</title><rect x="897.3" y="293" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="900.29" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (17 samples, 0.04%; 0.00%)</title><rect x="857.3" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.29" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (9 samples, 0.02%; -0.02%)</title><rect x="523.6" y="277" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="526.61" y="287.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (5,253 samples, 11.03%; +0.05%)</title><rect x="281.2" y="389" width="130.2" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="284.17" y="399.5" >query::consume_p..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (5 samples, 0.01%; -0.01%)</title><rect x="796.1" y="245" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="799.09" y="255.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (6 samples, 0.01%; 0.00%)</title><rect x="613.2" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="616.21" y="431.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (313 samples, 0.66%; +0.00%)</title><rect x="466.5" y="261" width="7.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="469.50" y="271.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (35 samples, 0.07%; -0.01%)</title><rect x="322.1" y="165" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="325.07" y="175.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (718 samples, 1.51%; +0.02%)</title><rect x="121.7" y="309" width="17.8" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="124.66" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (6 samples, 0.01%; -0.03%)</title><rect x="130.1" y="229" width="0.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="133.07" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (56 samples, 0.12%; -0.00%)</title><rect x="935.0" y="405" width="1.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="938.04" y="415.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (105 samples, 0.22%; +0.00%)</title><rect x="1172.7" y="453" width="2.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1175.72" y="463.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (7 samples, 0.01%; +0.01%)</title><rect x="787.3" y="117" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="790.29" y="127.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (9 samples, 0.02%; +0.00%)</title><rect x="717.6" y="293" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="720.59" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (54 samples, 0.11%; +0.01%)</title><rect x="910.8" y="341" width="1.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="913.75" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (76 samples, 0.16%; +0.01%)</title><rect x="820.8" y="341" width="1.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="823.78" y="351.5" ></text>
</g>
<g >
<title>operator new (55 samples, 0.12%; -0.00%)</title><rect x="1032.8" y="213" width="1.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1035.75" y="223.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (5 samples, 0.01%; +0.01%)</title><rect x="965.8" y="357" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="968.80" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (36 samples, 0.08%; -0.00%)</title><rect x="770.7" y="309" width="0.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="773.71" y="319.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (11 samples, 0.02%; 0.00%)</title><rect x="581.3" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="584.34" y="415.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.01%; 0.00%)</title><rect x="46.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.14" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (22 samples, 0.05%; +0.03%)</title><rect x="402.3" y="261" width="0.5" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="405.25" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (9 samples, 0.02%; +0.01%)</title><rect x="160.3" y="213" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="163.26" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; -0.01%)</title><rect x="1123.1" y="405" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1126.10" y="415.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (319 samples, 0.67%; -0.02%)</title><rect x="1074.5" y="261" width="7.9" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="1077.47" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="576.1" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="579.08" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (9 samples, 0.02%; +0.00%)</title><rect x="76.9" y="453" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="79.90" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (40 samples, 0.08%; -0.01%)</title><rect x="600.3" y="437" width="1.0" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="603.32" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="253.5" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="256.46" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (30 samples, 0.06%; +0.02%)</title><rect x="572.9" y="421" width="0.7" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="575.88" y="431.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (466 samples, 0.98%; +0.00%)</title><rect x="463.1" y="309" width="11.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="466.13" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (32 samples, 0.07%; 0.00%)</title><rect x="1140.1" y="341" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.10" y="351.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (75 samples, 0.16%; +0.00%)</title><rect x="773.3" y="293" width="1.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="776.31" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (30 samples, 0.06%; +0.00%)</title><rect x="784.2" y="181" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="787.22" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="731.3" y="373" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="734.30" y="383.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (23 samples, 0.05%; -0.09%)</title><rect x="95.6" y="421" width="0.6" height="15.0" fill="rgb(112,112,255)" rx="2" ry="2" />
<text  x="98.61" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (10 samples, 0.02%; +0.00%)</title><rect x="436.1" y="277" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="439.06" y="287.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (26 samples, 0.05%; -0.03%)</title><rect x="923.3" y="357" width="0.7" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="926.32" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (8 samples, 0.02%; +0.01%)</title><rect x="418.9" y="357" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="421.91" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (37 samples, 0.08%; 0.00%)</title><rect x="856.9" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.89" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (9 samples, 0.02%; +0.01%)</title><rect x="810.5" y="261" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="813.54" y="271.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (11 samples, 0.02%; +0.00%)</title><rect x="13.9" y="613" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="16.94" y="623.5" ></text>
</g>
<g >
<title>database::query (905 samples, 1.90%; -0.02%)</title><rect x="1013.0" y="261" width="22.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1016.02" y="271.5" >d..</text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (12 samples, 0.03%; +0.00%)</title><rect x="1123.5" y="405" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1126.55" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (9 samples, 0.02%; -0.03%)</title><rect x="547.2" y="325" width="0.2" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="550.15" y="335.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (22 samples, 0.05%; -0.01%)</title><rect x="126.1" y="277" width="0.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="129.13" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (30 samples, 0.06%; +0.02%)</title><rect x="981.4" y="261" width="0.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="984.42" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (21 samples, 0.04%; +0.01%)</title><rect x="695.4" y="405" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="698.35" y="415.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (86 samples, 0.18%; -0.00%)</title><rect x="586.4" y="405" width="2.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="589.42" y="415.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (92 samples, 0.19%; -0.02%)</title><rect x="1108.9" y="373" width="2.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="1111.90" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (10 samples, 0.02%; +0.00%)</title><rect x="261.7" y="341" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="264.71" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (5 samples, 0.01%; -0.01%)</title><rect x="851.3" y="405" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="854.34" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.01%; +0.00%)</title><rect x="1053.4" y="325" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1056.40" y="335.5" ></text>
</g>
<g >
<title>__tls_init (12 samples, 0.03%; +0.00%)</title><rect x="141.6" y="245" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="144.64" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (20 samples, 0.04%; -0.01%)</title><rect x="774.5" y="245" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="777.52" y="255.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (12 samples, 0.03%; 0.00%)</title><rect x="193.1" y="101" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="196.12" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (28 samples, 0.06%; -0.00%)</title><rect x="699.6" y="421" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="702.62" y="431.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (87 samples, 0.18%; +0.00%)</title><rect x="707.6" y="453" width="2.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="710.60" y="463.5" ></text>
</g>
<g >
<title>__tls_init (9 samples, 0.02%; -0.00%)</title><rect x="519.6" y="293" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="522.59" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (12 samples, 0.03%; -0.01%)</title><rect x="614.3" y="469" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="617.33" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (105 samples, 0.22%; +0.01%)</title><rect x="190.2" y="117" width="2.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="193.20" y="127.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (26 samples, 0.05%; -0.00%)</title><rect x="378.6" y="165" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="381.60" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; +0.00%)</title><rect x="548.3" y="309" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="551.29" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (7 samples, 0.01%; +0.01%)</title><rect x="261.5" y="341" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="264.54" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="648.5" y="485" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="651.51" y="495.5" ></text>
</g>
<g >
<title>seastar::app_template::run (46,664 samples, 98.02%; 0.00%)</title><rect x="21.7" y="581" width="1156.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.67" y="591.5" >seastar::app_template::run</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (297 samples, 0.62%; -0.01%)</title><rect x="390.0" y="245" width="7.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="392.98" y="255.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (61 samples, 0.13%; -0.02%)</title><rect x="707.9" y="437" width="1.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="710.92" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (25 samples, 0.05%; 0.00%)</title><rect x="695.3" y="421" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.26" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (19 samples, 0.04%; -0.00%)</title><rect x="1140.4" y="261" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1143.40" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (338 samples, 0.71%; +0.01%)</title><rect x="786.0" y="181" width="8.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="789.02" y="191.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (201 samples, 0.42%; -0.00%)</title><rect x="716.1" y="405" width="5.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="719.10" y="415.5" ></text>
</g>
<g >
<title>__tls_init (6 samples, 0.01%; +0.00%)</title><rect x="487.8" y="261" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="490.81" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; +0.00%)</title><rect x="494.9" y="181" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="497.93" y="191.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (9 samples, 0.02%; -0.00%)</title><rect x="950.1" y="341" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="953.09" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (17 samples, 0.04%; -0.04%)</title><rect x="132.5" y="245" width="0.5" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="135.55" y="255.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (5,677 samples, 11.92%; -0.00%)</title><rect x="116.5" y="341" width="140.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="119.48" y="351.5" >mutation_fragment..</text>
</g>
<g >
<title>gms::gossiper::is_alive (16 samples, 0.03%; +0.01%)</title><rect x="1090.6" y="261" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1093.56" y="271.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (30 samples, 0.06%; 0.00%)</title><rect x="18.1" y="309" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.11" y="319.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (110 samples, 0.23%; -0.00%)</title><rect x="694.5" y="437" width="2.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="697.46" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (58 samples, 0.12%; +0.02%)</title><rect x="657.9" y="485" width="1.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="660.85" y="495.5" ></text>
</g>
<g >
<title>operator delete (15 samples, 0.03%; -0.03%)</title><rect x="659.4" y="469" width="0.4" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="662.44" y="479.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (32 samples, 0.07%; -0.03%)</title><rect x="560.0" y="373" width="0.8" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="563.04" y="383.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (54 samples, 0.11%; +0.01%)</title><rect x="430.0" y="277" width="1.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="433.01" y="287.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (7 samples, 0.01%; -0.00%)</title><rect x="1091.8" y="309" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1094.77" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (14 samples, 0.03%; 0.00%)</title><rect x="921.9" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="924.88" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (9 samples, 0.02%; +0.01%)</title><rect x="1170.0" y="453" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1173.05" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (7 samples, 0.01%; -0.01%)</title><rect x="22.7" y="517" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="25.67" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (16 samples, 0.03%; +0.01%)</title><rect x="411.0" y="373" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="413.98" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (7 samples, 0.01%; +0.01%)</title><rect x="830.2" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="833.22" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (30 samples, 0.06%; +0.02%)</title><rect x="525.7" y="341" width="0.7" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="528.66" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (12 samples, 0.03%; -0.01%)</title><rect x="530.4" y="405" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="533.45" y="415.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_a24d06c195bd126a1ed21a4439682d7f2fceb96c] (5 samples, 0.01%; +0.01%)</title><rect x="336.7" y="165" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="339.69" y="175.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (44 samples, 0.09%; +0.01%)</title><rect x="296.7" y="213" width="1.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="299.71" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (174 samples, 0.37%; +0.03%)</title><rect x="1084.3" y="261" width="4.3" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1087.28" y="271.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (15 samples, 0.03%; -0.00%)</title><rect x="207.6" y="165" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="210.63" y="175.5" ></text>
</g>
<g >
<title>__tls_init (14 samples, 0.03%; +0.01%)</title><rect x="476.6" y="309" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="479.56" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (22 samples, 0.05%; +0.01%)</title><rect x="647.9" y="485" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="650.94" y="495.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (9 samples, 0.02%; -0.01%)</title><rect x="975.9" y="357" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="978.87" y="367.5" ></text>
</g>
<g >
<title>schema::column_at (9 samples, 0.02%; +0.00%)</title><rect x="359.1" y="197" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="362.15" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; -0.02%)</title><rect x="850.3" y="421" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="853.32" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (11 samples, 0.02%; -0.02%)</title><rect x="554.9" y="277" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="557.94" y="287.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (14 samples, 0.03%; -0.01%)</title><rect x="829.9" y="437" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="832.87" y="447.5" ></text>
</g>
<g >
<title>memtable::apply (22 samples, 0.05%; 0.00%)</title><rect x="1139.4" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.39" y="271.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (23 samples, 0.05%; +0.00%)</title><rect x="18.3" y="293" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="21.28" y="303.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (35 samples, 0.07%; +0.03%)</title><rect x="134.0" y="229" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="137.01" y="239.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (147 samples, 0.31%; 0.00%)</title><rect x="10.3" y="613" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.30" y="623.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (13 samples, 0.03%; -0.01%)</title><rect x="59.9" y="453" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="62.87" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (12 samples, 0.03%; +0.00%)</title><rect x="783.6" y="197" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="786.60" y="207.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (32 samples, 0.07%; +0.00%)</title><rect x="825.1" y="421" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="828.09" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (37 samples, 0.08%; -0.00%)</title><rect x="799.1" y="245" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="802.06" y="255.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (197 samples, 0.41%; -0.01%)</title><rect x="185.1" y="69" width="4.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="188.09" y="79.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (7 samples, 0.01%; -0.01%)</title><rect x="502.1" y="277" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="505.07" y="287.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (111 samples, 0.23%; +0.00%)</title><rect x="270.4" y="293" width="2.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="273.43" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (25 samples, 0.05%; -0.01%)</title><rect x="1090.4" y="277" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1093.38" y="287.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (5 samples, 0.01%; 0.00%)</title><rect x="16.6" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.62" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::optional&lt;auth::resource&gt;&amp;&amp;, service::client_state::check_has_permission (6 samples, 0.01%; +0.01%)</title><rect x="804.1" y="325" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="807.07" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;query::result_memory_accounter&gt;::awaiter (5 samples, 0.01%; 0.00%)</title><rect x="595.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="598.34" y="447.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (21 samples, 0.04%; -0.02%)</title><rect x="835.3" y="341" width="0.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="838.28" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (19 samples, 0.04%; +0.01%)</title><rect x="1103.2" y="389" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1106.22" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (8 samples, 0.02%; 0.00%)</title><rect x="1110.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1113.56" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (10 samples, 0.02%; +0.00%)</title><rect x="541.3" y="421" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="544.30" y="431.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (18 samples, 0.04%; +0.03%)</title><rect x="941.6" y="389" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="944.59" y="399.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (7 samples, 0.01%; +0.01%)</title><rect x="934.5" y="405" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="937.55" y="415.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (157 samples, 0.33%; +0.00%)</title><rect x="385.3" y="245" width="3.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="388.35" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (18 samples, 0.04%; -0.02%)</title><rect x="636.6" y="421" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="639.63" y="431.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (11 samples, 0.02%; 0.00%)</title><rect x="1129.4" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.45" y="431.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (8 samples, 0.02%; -0.00%)</title><rect x="1178.3" y="629" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1181.33" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (26 samples, 0.05%; -0.00%)</title><rect x="636.4" y="437" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="639.44" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (142 samples, 0.30%; +0.00%)</title><rect x="186.3" y="37" width="3.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="189.31" y="47.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (24 samples, 0.05%; +0.00%)</title><rect x="1177.6" y="501" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1180.56" y="511.5" ></text>
</g>
<g >
<title>database::find_schema (349 samples, 0.73%; +0.00%)</title><rect x="746.6" y="405" width="8.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="749.56" y="415.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (53 samples, 0.11%; +0.00%)</title><rect x="1089.8" y="309" width="1.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1092.79" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (16 samples, 0.03%; +0.02%)</title><rect x="307.4" y="165" width="0.4" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="310.37" y="175.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (335 samples, 0.70%; +0.03%)</title><rect x="67.2" y="437" width="8.3" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="70.21" y="447.5" ></text>
</g>
<g >
<title>operator delete (29 samples, 0.06%; +0.00%)</title><rect x="902.2" y="357" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="905.15" y="367.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (45 samples, 0.09%; -0.01%)</title><rect x="758.1" y="357" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="761.11" y="367.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (161 samples, 0.34%; +0.01%)</title><rect x="987.5" y="293" width="4.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="990.47" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (5 samples, 0.01%; +0.01%)</title><rect x="140.1" y="277" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="143.11" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (9 samples, 0.02%; -0.00%)</title><rect x="1142.6" y="501" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1145.56" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.02%; +0.01%)</title><rect x="927.3" y="341" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="930.31" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (5 samples, 0.01%; -0.00%)</title><rect x="1059.0" y="325" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1062.00" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (15 samples, 0.03%; +0.02%)</title><rect x="23.0" y="517" width="0.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="26.04" y="527.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (241 samples, 0.51%; -0.00%)</title><rect x="842.9" y="453" width="6.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="845.94" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (7 samples, 0.01%; +0.00%)</title><rect x="626.6" y="485" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="629.65" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (6 samples, 0.01%; -0.02%)</title><rect x="253.2" y="277" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="256.16" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (93 samples, 0.20%; -0.00%)</title><rect x="1032.5" y="229" width="2.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1035.50" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (7 samples, 0.01%; +0.01%)</title><rect x="654.2" y="485" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="657.16" y="495.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (11 samples, 0.02%; +0.01%)</title><rect x="297.9" y="197" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="300.95" y="207.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%; -0.00%)</title><rect x="903.5" y="325" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="906.51" y="335.5" ></text>
</g>
<g >
<title>schema::column_at (18 samples, 0.04%; +0.02%)</title><rect x="380.9" y="181" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="383.93" y="191.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (12 samples, 0.03%; +0.02%)</title><rect x="310.5" y="181" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="313.47" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (5 samples, 0.01%; +0.00%)</title><rect x="406.6" y="357" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="409.56" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (86 samples, 0.18%; +0.06%)</title><rect x="386.9" y="213" width="2.1" height="15.0" fill="rgb(255,151,151)" rx="2" ry="2" />
<text  x="389.91" y="223.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (4,890 samples, 10.27%; +0.00%)</title><rect x="285.0" y="341" width="121.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="287.98" y="351.5" >seastar::futuri..</text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (8 samples, 0.02%; -0.01%)</title><rect x="263.6" y="341" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="266.57" y="351.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; +0.01%)</title><rect x="775.2" y="293" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="778.24" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (17 samples, 0.04%; -0.04%)</title><rect x="409.9" y="357" width="0.4" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="412.86" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (142 samples, 0.30%; 0.00%)</title><rect x="210.3" y="165" width="3.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="213.33" y="175.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (21 samples, 0.04%; -0.00%)</title><rect x="1169.2" y="469" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1172.18" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (15 samples, 0.03%; +0.00%)</title><rect x="822.3" y="293" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="825.26" y="303.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (21 samples, 0.04%; -0.02%)</title><rect x="529.7" y="405" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="532.73" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (12 samples, 0.03%; -0.01%)</title><rect x="904.5" y="309" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="907.48" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (30 samples, 0.06%; -0.03%)</title><rect x="985.6" y="293" width="0.8" height="15.0" fill="rgb(179,179,255)" rx="2" ry="2" />
<text  x="988.61" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,326 samples, 9.09%; -0.02%)</title><rect x="139.5" y="309" width="107.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="142.46" y="319.5" >partition_sna..</text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (6 samples, 0.01%; +0.01%)</title><rect x="130.3" y="245" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="133.34" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (17 samples, 0.04%; -0.01%)</title><rect x="960.7" y="341" width="0.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="963.75" y="351.5" ></text>
</g>
<g >
<title>operator delete (14 samples, 0.03%; +0.00%)</title><rect x="651.4" y="437" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="654.43" y="447.5" ></text>
</g>
<g >
<title>table::estimate_read_memory_cost (6 samples, 0.01%; -0.00%)</title><rect x="1039.5" y="261" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1042.54" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (19 samples, 0.04%; +0.01%)</title><rect x="225.0" y="229" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="228.00" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (8 samples, 0.02%; -0.00%)</title><rect x="1099.9" y="389" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1102.90" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (10 samples, 0.02%; +0.00%)</title><rect x="244.2" y="197" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="247.16" y="207.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (11 samples, 0.02%; -0.01%)</title><rect x="161.9" y="197" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="164.92" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; -0.01%)</title><rect x="782.8" y="213" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="785.83" y="223.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (5 samples, 0.01%; +0.00%)</title><rect x="870.7" y="421" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="873.70" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (16 samples, 0.03%; +0.03%)</title><rect x="66.8" y="437" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="69.81" y="447.5" ></text>
</g>
<g >
<title>operator new (38 samples, 0.08%; +0.01%)</title><rect x="508.4" y="325" width="0.9" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="511.36" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (13 samples, 0.03%; -0.00%)</title><rect x="612.0" y="389" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="615.00" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (282 samples, 0.59%; 0.00%)</title><rect x="14.2" y="581" width="7.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.21" y="591.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (11 samples, 0.02%; -0.00%)</title><rect x="842.0" y="325" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="844.97" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (212 samples, 0.45%; +0.01%)</title><rect x="208.7" y="181" width="5.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="211.72" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,466 samples, 9.38%; -0.00%)</title><rect x="290.7" y="277" width="110.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="293.71" y="287.5" >flat_mutation..</text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (31 samples, 0.07%; -0.01%)</title><rect x="855.5" y="501" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="858.45" y="511.5" ></text>
</g>
<g >
<title>operator delete (32 samples, 0.07%; -0.05%)</title><rect x="565.6" y="357" width="0.8" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="568.65" y="367.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (395 samples, 0.83%; -0.03%)</title><rect x="302.1" y="197" width="9.8" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="305.09" y="207.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (4,747 samples, 9.97%; +0.05%)</title><rect x="413.3" y="421" width="117.7" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="416.33" y="431.5" >query::querier..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (133 samples, 0.28%; 0.00%)</title><rect x="832.7" y="405" width="3.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="835.72" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (19 samples, 0.04%; 0.00%)</title><rect x="1140.4" y="245" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.40" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="549.8" y="293" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="552.83" y="303.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (9 samples, 0.02%; -0.00%)</title><rect x="1157.9" y="405" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1160.88" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (7 samples, 0.01%; -0.00%)</title><rect x="576.3" y="389" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="579.33" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (16 samples, 0.03%; +0.01%)</title><rect x="221.5" y="213" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="224.53" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (93 samples, 0.20%; +0.02%)</title><rect x="751.0" y="341" width="2.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="754.00" y="351.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (50 samples, 0.11%; -0.00%)</title><rect x="674.7" y="469" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="677.66" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (28 samples, 0.06%; +0.02%)</title><rect x="769.2" y="277" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="772.24" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,504 samples, 7.36%; -0.01%)</title><rect x="298.3" y="245" width="86.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="301.27" y="255.5" >flat_mutat..</text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (5 samples, 0.01%; -0.01%)</title><rect x="841.5" y="325" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="844.55" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (49 samples, 0.10%; +0.07%)</title><rect x="890.7" y="229" width="1.3" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="893.75" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.01%)</title><rect x="274.7" y="277" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="277.70" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (17 samples, 0.04%; +0.01%)</title><rect x="394.6" y="165" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="397.62" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (6 samples, 0.01%; 0.00%)</title><rect x="220.7" y="181" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="223.66" y="191.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (186 samples, 0.39%; +0.01%)</title><rect x="940.3" y="421" width="4.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="943.32" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (15 samples, 0.03%; +0.00%)</title><rect x="651.8" y="437" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="654.78" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (24 samples, 0.05%; -0.01%)</title><rect x="222.3" y="197" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="225.30" y="207.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (6 samples, 0.01%; 0.00%)</title><rect x="589.2" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="592.19" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.30" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (10 samples, 0.02%; +0.01%)</title><rect x="892.2" y="277" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="895.16" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (9 samples, 0.02%; -0.01%)</title><rect x="593.6" y="437" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="596.56" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; -0.02%)</title><rect x="1048.0" y="293" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1051.05" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation::data, std::default_delete&lt;mutation::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; 0.00%)</title><rect x="1140.9" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.90" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::get_value (6 samples, 0.01%; +0.00%)</title><rect x="704.6" y="501" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="707.55" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (8 samples, 0.02%; 0.00%)</title><rect x="1140.2" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.15" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.30" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (18 samples, 0.04%; +0.03%)</title><rect x="313.6" y="197" width="0.4" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="316.59" y="207.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (5 samples, 0.01%; +0.01%)</title><rect x="632.4" y="485" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="635.45" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (9 samples, 0.02%; -0.01%)</title><rect x="558.1" y="293" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="561.11" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (31 samples, 0.07%; -0.01%)</title><rect x="939.5" y="357" width="0.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="942.53" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (8 samples, 0.02%; +0.00%)</title><rect x="531.9" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="534.89" y="415.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (7 samples, 0.01%; +0.01%)</title><rect x="513.4" y="325" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="516.39" y="335.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (7 samples, 0.01%; +0.01%)</title><rect x="701.1" y="469" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="704.06" y="479.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (7 samples, 0.01%; -0.02%)</title><rect x="1121.8" y="421" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="1124.79" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (5 samples, 0.01%; +0.00%)</title><rect x="829.1" y="437" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="832.08" y="447.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (7 samples, 0.01%; +0.00%)</title><rect x="323.4" y="165" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="326.38" y="175.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (7 samples, 0.01%; +0.01%)</title><rect x="16.2" y="245" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="19.25" y="255.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::raw_value_view (84 samples, 0.18%; +0.01%)</title><rect x="898.3" y="325" width="2.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="901.26" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (13 samples, 0.03%; 0.00%)</title><rect x="683.9" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.93" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (23 samples, 0.05%; -0.01%)</title><rect x="717.4" y="325" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="720.42" y="335.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (5 samples, 0.01%; 0.00%)</title><rect x="857.4" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.36" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="727.0" y="389" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="729.96" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (8 samples, 0.02%; 0.00%)</title><rect x="667.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="670.07" y="495.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (64 samples, 0.13%; +0.01%)</title><rect x="1153.3" y="453" width="1.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1156.29" y="463.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (19 samples, 0.04%; +0.01%)</title><rect x="220.0" y="165" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="222.97" y="175.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (8 samples, 0.02%; -0.02%)</title><rect x="590.8" y="405" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="593.80" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (7 samples, 0.01%; -0.00%)</title><rect x="254.1" y="309" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="257.05" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (28 samples, 0.06%; +0.01%)</title><rect x="129.6" y="245" width="0.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="132.65" y="255.5" ></text>
</g>
<g >
<title>schema::column_at (55 samples, 0.12%; +0.02%)</title><rect x="323.6" y="181" width="1.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="326.55" y="191.5" ></text>
</g>
<g >
<title>executor&lt;test_read (5,937 samples, 12.47%; -0.00%)</title><rect x="706.3" y="485" width="147.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="709.34" y="495.5" >executor&lt;test_read</text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (46 samples, 0.10%; -0.00%)</title><rect x="827.6" y="389" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="830.59" y="399.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (8 samples, 0.02%; +0.00%)</title><rect x="1170.7" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1173.72" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (5 samples, 0.01%; 0.00%)</title><rect x="17.1" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.14" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (8 samples, 0.02%; +0.00%)</title><rect x="588.1" y="373" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="591.10" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (8 samples, 0.02%; -0.01%)</title><rect x="849.7" y="469" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="852.68" y="479.5" ></text>
</g>
<g >
<title>[unknown] (470 samples, 0.99%; 0.00%)</title><rect x="10.0" y="629" width="11.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>service::client_state::validate_login (5 samples, 0.01%; +0.00%)</title><rect x="806.9" y="357" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="809.87" y="367.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (17 samples, 0.04%; -0.00%)</title><rect x="1110.8" y="357" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1113.76" y="367.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (52 samples, 0.11%; +0.08%)</title><rect x="236.6" y="213" width="1.2" height="15.0" fill="rgb(255,123,123)" rx="2" ry="2" />
<text  x="239.55" y="223.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (7 samples, 0.01%; +0.01%)</title><rect x="509.9" y="325" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="512.92" y="335.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%; -0.02%)</title><rect x="604.7" y="389" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="607.66" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.00%)</title><rect x="813.1" y="325" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="816.09" y="335.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (83 samples, 0.17%; +0.04%)</title><rect x="346.3" y="165" width="2.0" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="349.28" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; +0.00%)</title><rect x="1046.0" y="181" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1049.04" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (7 samples, 0.01%; 0.00%)</title><rect x="200.8" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="203.78" y="159.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (8 samples, 0.02%; -0.00%)</title><rect x="697.0" y="421" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="699.99" y="431.5" ></text>
</g>
<g >
<title>query::querier&lt; (19 samples, 0.04%; +0.01%)</title><rect x="58.8" y="453" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="61.81" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (49 samples, 0.10%; -0.00%)</title><rect x="838.2" y="421" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="841.23" y="431.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (8 samples, 0.02%; -0.00%)</title><rect x="545.1" y="341" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="548.07" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (74 samples, 0.16%; -0.03%)</title><rect x="950.4" y="389" width="1.9" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="953.44" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (10 samples, 0.02%; -0.00%)</title><rect x="73.2" y="373" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="76.21" y="383.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (460 samples, 0.97%; -0.01%)</title><rect x="689.9" y="485" width="11.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="692.85" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (17 samples, 0.04%; -0.01%)</title><rect x="124.0" y="277" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="126.97" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (35 samples, 0.07%; +0.02%)</title><rect x="639.0" y="437" width="0.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="641.96" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (124 samples, 0.26%; +0.00%)</title><rect x="621.8" y="485" width="3.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="624.79" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (18 samples, 0.04%; +0.01%)</title><rect x="134.9" y="229" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="137.88" y="239.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::set_latency (9 samples, 0.02%; +0.01%)</title><rect x="613.5" y="437" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="616.53" y="447.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (35 samples, 0.07%; -0.01%)</title><rect x="731.6" y="373" width="0.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="734.59" y="383.5" ></text>
</g>
<g >
<title>make_random_seq (5 samples, 0.01%; +0.00%)</title><rect x="709.9" y="469" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="712.88" y="479.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (6 samples, 0.01%; -0.00%)</title><rect x="80.8" y="453" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="83.77" y="463.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (6 samples, 0.01%; +0.01%)</title><rect x="296.3" y="229" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="299.29" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (15 samples, 0.03%; +0.01%)</title><rect x="434.7" y="261" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="437.67" y="271.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous&gt; (12 samples, 0.03%; +0.01%)</title><rect x="801.4" y="293" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="804.39" y="303.5" ></text>
</g>
<g >
<title>__tls_init (12 samples, 0.03%; 0.00%)</title><rect x="449.7" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="452.67" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (5 samples, 0.01%; +0.00%)</title><rect x="848.8" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="851.79" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (22 samples, 0.05%; +0.01%)</title><rect x="784.4" y="165" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="787.41" y="175.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (71 samples, 0.15%; -0.00%)</title><rect x="729.5" y="357" width="1.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="732.54" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (21 samples, 0.04%; -0.01%)</title><rect x="949.8" y="373" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="952.79" y="383.5" ></text>
</g>
<g >
<title>row::row (15 samples, 0.03%; -0.02%)</title><rect x="244.8" y="197" width="0.4" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="247.78" y="207.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (6 samples, 0.01%; +0.01%)</title><rect x="905.5" y="389" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="908.50" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (12 samples, 0.03%; -0.01%)</title><rect x="730.8" y="293" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="733.80" y="303.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (4,541 samples, 9.54%; -0.00%)</title><rect x="415.9" y="389" width="112.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="418.91" y="399.5" >std::function..</text>
</g>
<g >
<title>flat_mutation_reader::peek (8 samples, 0.02%; +0.01%)</title><rect x="106.5" y="421" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="109.47" y="431.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (24 samples, 0.05%; +0.01%)</title><rect x="1024.1" y="181" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1027.13" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (29 samples, 0.06%; +0.00%)</title><rect x="759.9" y="341" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="762.92" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (84 samples, 0.18%; +0.01%)</title><rect x="667.6" y="469" width="2.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="670.57" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (2,800 samples, 5.88%; +0.03%)</title><rect x="156.1" y="245" width="69.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="159.07" y="255.5" >partiti..</text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (5 samples, 0.01%; -0.00%)</title><rect x="1089.7" y="309" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1092.66" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (13 samples, 0.03%; 0.00%)</title><rect x="1176.0" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.00" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (24 samples, 0.05%; +0.01%)</title><rect x="929.2" y="389" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="932.17" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%; 0.00%)</title><rect x="610.9" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="613.86" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.01%; -0.01%)</title><rect x="889.2" y="261" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="892.19" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (6,842 samples, 14.37%; 0.00%)</title><rect x="109.7" y="405" width="169.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.74" y="415.5" >flat_mutation_reader:..</text>
</g>
<g >
<title>clustering_row::clustering_row (1,440 samples, 3.02%; -0.03%)</title><rect x="164.8" y="165" width="35.7" height="15.0" fill="rgb(179,179,255)" rx="2" ry="2" />
<text  x="167.77" y="175.5" >clu..</text>
</g>
<g >
<title>seastar::memory::allocate (25 samples, 0.05%; +0.01%)</title><rect x="938.4" y="357" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="941.41" y="367.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (411 samples, 0.86%; +0.07%)</title><rect x="514.0" y="325" width="10.2" height="15.0" fill="rgb(255,134,134)" rx="2" ry="2" />
<text  x="517.01" y="335.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (496 samples, 1.04%; +0.01%)</title><rect x="29.3" y="501" width="12.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="32.33" y="511.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; +0.01%)</title><rect x="623.1" y="469" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="626.10" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (12 samples, 0.03%; +0.00%)</title><rect x="694.0" y="437" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="696.99" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (7 samples, 0.01%; 0.00%)</title><rect x="857.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.09" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (9 samples, 0.02%; -0.01%)</title><rect x="53.5" y="469" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="56.53" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (199 samples, 0.42%; +0.01%)</title><rect x="1113.1" y="389" width="4.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1116.11" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; +0.00%)</title><rect x="940.1" y="309" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="943.10" y="319.5" ></text>
</g>
<g >
<title>operator delete (19 samples, 0.04%; +0.01%)</title><rect x="51.7" y="469" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="54.67" y="479.5" ></text>
</g>
<g >
<title>reader_permit::signal (6 samples, 0.01%; +0.01%)</title><rect x="268.0" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="271.03" y="319.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (9 samples, 0.02%; -0.00%)</title><rect x="215.1" y="149" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="218.09" y="159.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (9 samples, 0.02%; 0.00%)</title><rect x="856.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.39" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume (13 samples, 0.03%; +0.01%)</title><rect x="207.3" y="133" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="210.25" y="143.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; +0.00%)</title><rect x="611.4" y="389" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="614.38" y="399.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (5 samples, 0.01%; +0.00%)</title><rect x="1093.3" y="325" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1096.26" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (6 samples, 0.01%; +0.01%)</title><rect x="411.5" y="389" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="414.55" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (9 samples, 0.02%; -0.02%)</title><rect x="50.3" y="485" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="53.30" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (6 samples, 0.01%; -0.01%)</title><rect x="289.7" y="293" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="292.74" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (52 samples, 0.11%; -0.05%)</title><rect x="847.5" y="421" width="1.3" height="15.0" fill="rgb(155,155,255)" rx="2" ry="2" />
<text  x="850.50" y="431.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (5 samples, 0.01%; +0.00%)</title><rect x="889.3" y="261" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="892.34" y="271.5" ></text>
</g>
<g >
<title>posix_memalign (6 samples, 0.01%; +0.00%)</title><rect x="184.9" y="69" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="187.95" y="79.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (13 samples, 0.03%; +0.02%)</title><rect x="601.3" y="437" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="604.31" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (23 samples, 0.05%; +0.04%)</title><rect x="49.7" y="485" width="0.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="52.66" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.00%)</title><rect x="771.7" y="325" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="774.72" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (114 samples, 0.24%; -0.02%)</title><rect x="995.3" y="277" width="2.8" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="998.25" y="287.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (49 samples, 0.10%; +0.03%)</title><rect x="719.3" y="293" width="1.2" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="722.32" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (5 samples, 0.01%; -0.01%)</title><rect x="565.5" y="341" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="568.52" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (30 samples, 0.06%; +0.01%)</title><rect x="1041.7" y="261" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1044.70" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (22 samples, 0.05%; -0.00%)</title><rect x="968.2" y="325" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="971.18" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (17 samples, 0.04%; +0.00%)</title><rect x="655.6" y="469" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="658.57" y="479.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (10 samples, 0.02%; +0.01%)</title><rect x="1091.9" y="309" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1094.94" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (14 samples, 0.03%; +0.01%)</title><rect x="888.8" y="261" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="891.79" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (7 samples, 0.01%; -0.01%)</title><rect x="624.7" y="453" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="627.66" y="463.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (5 samples, 0.01%; -0.01%)</title><rect x="476.9" y="309" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="479.91" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (24 samples, 0.05%; -0.03%)</title><rect x="648.6" y="485" width="0.6" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="651.63" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (5 samples, 0.01%; -0.01%)</title><rect x="696.5" y="405" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="699.54" y="415.5" ></text>
</g>
<g >
<title>db::filter_for_query (45 samples, 0.09%; +0.03%)</title><rect x="1059.7" y="341" width="1.2" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1062.75" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (18 samples, 0.04%; +0.01%)</title><rect x="848.3" y="405" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="851.34" y="415.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (7 samples, 0.01%; +0.00%)</title><rect x="217.9" y="181" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="220.89" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (7 samples, 0.01%; +0.00%)</title><rect x="112.0" y="373" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="114.97" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (40 samples, 0.08%; 0.00%)</title><rect x="1140.1" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.05" y="463.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (9 samples, 0.02%; -0.01%)</title><rect x="225.7" y="245" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="228.69" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (45 samples, 0.09%; +0.03%)</title><rect x="1111.5" y="373" width="1.1" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1114.50" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; -0.00%)</title><rect x="812.5" y="357" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="815.47" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (10 samples, 0.02%; +0.00%)</title><rect x="475.8" y="325" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="478.79" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (5,940 samples, 12.48%; -0.03%)</title><rect x="114.7" y="357" width="147.3" height="15.0" fill="rgb(179,179,255)" rx="2" ry="2" />
<text  x="117.72" y="367.5" >mutation_fragment_..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (5 samples, 0.01%; 0.00%)</title><rect x="242.0" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="244.98" y="255.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (11 samples, 0.02%; +0.02%)</title><rect x="582.1" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="585.05" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (19 samples, 0.04%; +0.01%)</title><rect x="399.6" y="229" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="402.65" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (102 samples, 0.21%; +0.04%)</title><rect x="152.4" y="197" width="2.5" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="155.40" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.01%)</title><rect x="625.6" y="469" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="628.63" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (21 samples, 0.04%; -0.01%)</title><rect x="261.0" y="325" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="264.02" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::empty (9 samples, 0.02%; +0.02%)</title><rect x="944.3" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="947.26" y="415.5" ></text>
</g>
<g >
<title>free (33 samples, 0.07%; -0.01%)</title><rect x="396.0" y="197" width="0.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="399.03" y="207.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (6 samples, 0.01%; +0.01%)</title><rect x="161.8" y="197" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="164.77" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (10 samples, 0.02%; +0.01%)</title><rect x="540.7" y="405" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="543.66" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (16 samples, 0.03%; +0.01%)</title><rect x="871.9" y="421" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="874.89" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (6 samples, 0.01%; 0.00%)</title><rect x="257.4" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="260.37" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (13 samples, 0.03%; -0.01%)</title><rect x="990.3" y="261" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="993.27" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (5 samples, 0.01%; +0.00%)</title><rect x="1144.6" y="501" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1147.62" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (5 samples, 0.01%; 0.00%)</title><rect x="17.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.14" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (25 samples, 0.05%; +0.03%)</title><rect x="749.1" y="357" width="0.6" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="752.07" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (9 samples, 0.02%; -0.01%)</title><rect x="670.2" y="453" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="673.22" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.00%)</title><rect x="523.5" y="261" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="526.46" y="271.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (23 samples, 0.05%; +0.00%)</title><rect x="578.6" y="389" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="581.61" y="399.5" ></text>
</g>
<g >
<title>db::block_for (5 samples, 0.01%; 0.00%)</title><rect x="1060.5" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1063.54" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (50 samples, 0.11%; +0.00%)</title><rect x="37.3" y="421" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="40.27" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.00%)</title><rect x="778.5" y="213" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="781.51" y="223.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (27 samples, 0.06%; 0.00%)</title><rect x="1139.4" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.36" y="367.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (28 samples, 0.06%; -0.02%)</title><rect x="1127.7" y="389" width="0.7" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="1130.74" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (32 samples, 0.07%; -0.01%)</title><rect x="662.5" y="453" width="0.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="665.54" y="463.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.04%; -0.00%)</title><rect x="768.3" y="309" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="771.25" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="41.2" y="469" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="44.16" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (11 samples, 0.02%; -0.03%)</title><rect x="412.5" y="405" width="0.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="415.49" y="415.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (13 samples, 0.03%; -0.02%)</title><rect x="1035.1" y="245" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1038.13" y="255.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (27 samples, 0.06%; -0.00%)</title><rect x="1038.9" y="261" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1041.85" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (50 samples, 0.11%; +0.03%)</title><rect x="1161.3" y="453" width="1.2" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="1164.30" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (90 samples, 0.19%; -0.03%)</title><rect x="437.1" y="309" width="2.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="440.05" y="319.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (139 samples, 0.29%; -0.01%)</title><rect x="520.5" y="309" width="3.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="523.51" y="319.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (86 samples, 0.18%; +0.00%)</title><rect x="1173.0" y="437" width="2.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1176.02" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (6 samples, 0.01%; -0.02%)</title><rect x="538.6" y="389" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="541.55" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (18 samples, 0.04%; +0.00%)</title><rect x="931.3" y="405" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="934.33" y="415.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (87 samples, 0.18%; -0.01%)</title><rect x="820.6" y="373" width="2.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="823.60" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (35 samples, 0.07%; +0.02%)</title><rect x="508.4" y="309" width="0.9" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="511.44" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (6 samples, 0.01%; +0.00%)</title><rect x="280.8" y="389" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="283.82" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (77 samples, 0.16%; +0.02%)</title><rect x="1159.4" y="421" width="1.9" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1162.36" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (52 samples, 0.11%; 0.00%)</title><rect x="526.4" y="341" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="529.41" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (24 samples, 0.05%; +0.01%)</title><rect x="983.4" y="341" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="986.40" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (11 samples, 0.02%; -0.01%)</title><rect x="252.2" y="277" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="255.24" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (7 samples, 0.01%; +0.00%)</title><rect x="530.6" y="389" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="533.57" y="399.5" ></text>
</g>
<g >
<title>__dynamic_cast (33 samples, 0.07%; +0.02%)</title><rect x="869.9" y="421" width="0.8" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="872.88" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (8 samples, 0.02%; +0.00%)</title><rect x="210.0" y="133" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="213.03" y="143.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (63 samples, 0.13%; +0.00%)</title><rect x="801.7" y="293" width="1.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="804.74" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.01%)</title><rect x="554.8" y="261" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="557.76" y="271.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (14 samples, 0.03%; +0.01%)</title><rect x="1133.1" y="405" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1136.14" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (18 samples, 0.04%; 0.00%)</title><rect x="1092.2" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1095.24" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (16 samples, 0.03%; +0.03%)</title><rect x="435.7" y="277" width="0.4" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="438.66" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (14 samples, 0.03%; -0.03%)</title><rect x="744.8" y="373" width="0.4" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="747.80" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (12 samples, 0.03%; +0.00%)</title><rect x="619.6" y="485" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="622.63" y="495.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (11 samples, 0.02%; +0.01%)</title><rect x="696.4" y="421" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="699.40" y="431.5" ></text>
</g>
<g >
<title>operator new (54 samples, 0.11%; -0.01%)</title><rect x="432.6" y="245" width="1.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="435.57" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (16 samples, 0.03%; -0.02%)</title><rect x="629.7" y="485" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="632.67" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="644.8" y="469" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="647.84" y="479.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (9 samples, 0.02%; +0.02%)</title><rect x="558.3" y="309" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="561.33" y="319.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (40 samples, 0.08%; 0.00%)</title><rect x="1140.1" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.05" y="479.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (8 samples, 0.02%; 0.00%)</title><rect x="1176.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.00" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (30 samples, 0.06%; 0.00%)</title><rect x="20.2" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.16" y="463.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%; 0.00%)</title><rect x="285.6" y="293" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="288.60" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (7 samples, 0.01%; 0.00%)</title><rect x="856.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.39" y="399.5" ></text>
</g>
<g >
<title>[unknown] (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.30" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (76 samples, 0.16%; 0.00%)</title><rect x="17.1" y="357" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (8 samples, 0.02%; +0.01%)</title><rect x="982.4" y="277" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="985.41" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (42 samples, 0.09%; +0.00%)</title><rect x="674.7" y="389" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="677.68" y="399.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (19 samples, 0.04%; 0.00%)</title><rect x="1058.3" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1061.28" y="271.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (279 samples, 0.59%; -0.00%)</title><rect x="467.3" y="245" width="7.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="470.34" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; -0.01%)</title><rect x="1029.0" y="149" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1031.99" y="159.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.01%; -0.00%)</title><rect x="761.0" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="764.01" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; +0.01%)</title><rect x="769.1" y="277" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="772.10" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (50 samples, 0.11%; +0.00%)</title><rect x="575.3" y="421" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="578.29" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; -0.05%)</title><rect x="614.1" y="469" width="0.2" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="617.13" y="479.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (6 samples, 0.01%; +0.01%)</title><rect x="777.5" y="229" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="780.55" y="239.5" ></text>
</g>
<g >
<title>operator delete (74 samples, 0.16%; -0.02%)</title><rect x="398.3" y="245" width="1.8" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="401.29" y="255.5" ></text>
</g>
<g >
<title>operator new (63 samples, 0.13%; 0.00%)</title><rect x="773.5" y="277" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="776.46" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (5 samples, 0.01%; +0.01%)</title><rect x="224.4" y="229" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="227.38" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (45 samples, 0.09%; +0.02%)</title><rect x="138.1" y="277" width="1.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="141.07" y="287.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (1,970 samples, 4.14%; +0.04%)</title><rect x="762.1" y="389" width="48.8" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="765.08" y="399.5" >std:..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (10 samples, 0.02%; -0.01%)</title><rect x="761.7" y="357" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="764.66" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (10 samples, 0.02%; -0.01%)</title><rect x="880.9" y="309" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="883.93" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (18 samples, 0.04%; +0.00%)</title><rect x="203.5" y="101" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="206.54" y="111.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (20 samples, 0.04%; -0.00%)</title><rect x="857.3" y="389" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="860.29" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (11 samples, 0.02%; -0.02%)</title><rect x="276.9" y="357" width="0.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="279.90" y="367.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (23 samples, 0.05%; +0.04%)</title><rect x="52.6" y="469" width="0.6" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="55.63" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (5 samples, 0.01%; -0.02%)</title><rect x="45.2" y="485" width="0.1" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="48.22" y="495.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (97 samples, 0.20%; -0.01%)</title><rect x="707.5" y="469" width="2.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="710.48" y="479.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (94 samples, 0.20%; +0.00%)</title><rect x="133.0" y="245" width="2.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="135.99" y="255.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (9 samples, 0.02%; +0.00%)</title><rect x="637.4" y="405" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="640.43" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (6 samples, 0.01%; +0.01%)</title><rect x="743.7" y="357" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="746.69" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,248 samples, 4.72%; -0.02%)</title><rect x="160.6" y="229" width="55.7" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="163.60" y="239.5" >parti..</text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (7 samples, 0.01%; -0.00%)</title><rect x="325.0" y="181" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="328.02" y="191.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (7 samples, 0.01%; +0.00%)</title><rect x="844.5" y="389" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="847.50" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (13 samples, 0.03%; +0.01%)</title><rect x="983.1" y="341" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="986.08" y="351.5" ></text>
</g>
<g >
<title>__start_context (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.30" y="559.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (42 samples, 0.09%; -0.00%)</title><rect x="1090.0" y="293" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1092.96" y="303.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (9 samples, 0.02%; +0.01%)</title><rect x="211.9" y="133" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="214.91" y="143.5" ></text>
</g>
<g >
<title>operator delete (29 samples, 0.06%; +0.01%)</title><rect x="689.0" y="485" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="691.96" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (54 samples, 0.11%; -0.01%)</title><rect x="814.2" y="309" width="1.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="817.18" y="319.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (254 samples, 0.53%; 0.00%)</title><rect x="14.7" y="485" width="6.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.73" y="495.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (1,599 samples, 3.36%; -0.01%)</title><rect x="766.7" y="341" width="39.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="769.74" y="351.5" >ser..</text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (113 samples, 0.24%; -0.00%)</title><rect x="791.5" y="149" width="2.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="794.53" y="159.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (7 samples, 0.01%; +0.01%)</title><rect x="390.1" y="229" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="393.08" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (9 samples, 0.02%; -0.00%)</title><rect x="1135.5" y="421" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1138.49" y="431.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (17 samples, 0.04%; -0.05%)</title><rect x="280.4" y="389" width="0.4" height="15.0" fill="rgb(155,155,255)" rx="2" ry="2" />
<text  x="283.40" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (57 samples, 0.12%; +0.01%)</title><rect x="1149.6" y="485" width="1.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1152.57" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (149 samples, 0.31%; +0.00%)</title><rect x="624.9" y="501" width="3.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="627.86" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (60 samples, 0.13%; -0.01%)</title><rect x="271.2" y="261" width="1.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="274.23" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (9 samples, 0.02%; +0.00%)</title><rect x="662.3" y="437" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="665.29" y="447.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (561 samples, 1.18%; +0.01%)</title><rect x="907.5" y="389" width="13.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="910.50" y="399.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (7 samples, 0.01%; +0.00%)</title><rect x="513.7" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="516.69" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; 0.00%)</title><rect x="547.0" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="550.01" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (19 samples, 0.04%; +0.04%)</title><rect x="601.8" y="437" width="0.4" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="604.76" y="447.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (6 samples, 0.01%; +0.01%)</title><rect x="220.4" y="181" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="223.44" y="191.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (688 samples, 1.45%; -0.01%)</title><rect x="542.9" y="373" width="17.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="545.92" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (6 samples, 0.01%; +0.01%)</title><rect x="678.2" y="469" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="681.20" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.01%)</title><rect x="658.9" y="453" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="661.92" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.01%; +0.00%)</title><rect x="912.4" y="357" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="915.44" y="367.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (39 samples, 0.08%; -0.00%)</title><rect x="714.4" y="405" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="717.44" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.04%; -0.01%)</title><rect x="768.3" y="293" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="771.25" y="303.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (342 samples, 0.72%; -0.05%)</title><rect x="454.5" y="293" width="8.5" height="15.0" fill="rgb(155,155,255)" rx="2" ry="2" />
<text  x="457.50" y="303.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,568 samples, 9.60%; -0.01%)</title><rect x="289.9" y="293" width="113.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="292.92" y="303.5" >seastar::repe..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; +0.01%)</title><rect x="383.2" y="181" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="386.19" y="191.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (5 samples, 0.01%; +0.01%)</title><rect x="523.8" y="293" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="526.83" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (25 samples, 0.05%; +0.01%)</title><rect x="80.9" y="453" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="83.92" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (9 samples, 0.02%; +0.01%)</title><rect x="607.7" y="437" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="610.73" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (7 samples, 0.01%; -0.02%)</title><rect x="132.4" y="245" width="0.1" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="135.37" y="255.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (15 samples, 0.03%; -0.01%)</title><rect x="719.0" y="293" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="721.95" y="303.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (5 samples, 0.01%; +0.01%)</title><rect x="800.9" y="277" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="803.92" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (15 samples, 0.03%; +0.00%)</title><rect x="211.8" y="149" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="214.76" y="159.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (392 samples, 0.82%; -0.00%)</title><rect x="785.0" y="213" width="9.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="787.98" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.05%; -0.02%)</title><rect x="1158.4" y="373" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1161.37" y="383.5" ></text>
</g>
<g >
<title>query_result_builder::consume (5 samples, 0.01%; -0.00%)</title><rect x="384.1" y="229" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="387.06" y="239.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (235 samples, 0.49%; -0.01%)</title><rect x="247.5" y="293" width="5.8" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="250.48" y="303.5" ></text>
</g>
<g >
<title>row::compact_and_expire (5 samples, 0.01%; +0.00%)</title><rect x="384.3" y="229" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="387.31" y="239.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (744 samples, 1.56%; -0.02%)</title><rect x="1072.7" y="325" width="18.4" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="1075.66" y="335.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (130 samples, 0.27%; +0.01%)</title><rect x="1185.6" y="613" width="3.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1188.61" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (11 samples, 0.02%; -0.00%)</title><rect x="627.8" y="485" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="630.81" y="495.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (13 samples, 0.03%; -0.00%)</title><rect x="692.9" y="453" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="695.88" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (6 samples, 0.01%; 0.00%)</title><rect x="1099.2" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1102.23" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (7 samples, 0.01%; +0.01%)</title><rect x="38.3" y="389" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="41.31" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (98 samples, 0.21%; -0.01%)</title><rect x="988.2" y="277" width="2.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="991.16" y="287.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (83 samples, 0.17%; -0.02%)</title><rect x="302.4" y="181" width="2.0" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="305.38" y="191.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (18 samples, 0.04%; 0.00%)</title><rect x="637.2" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="640.23" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (18 samples, 0.04%; +0.00%)</title><rect x="809.8" y="277" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="812.80" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="709.6" y="437" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="712.63" y="447.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (70 samples, 0.15%; +0.01%)</title><rect x="352.4" y="149" width="1.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="355.43" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (17 samples, 0.04%; -0.00%)</title><rect x="647.0" y="485" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="650.05" y="495.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (15 samples, 0.03%; -0.00%)</title><rect x="503.9" y="325" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="506.93" y="335.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (545 samples, 1.14%; +0.01%)</title><rect x="725.8" y="405" width="13.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="728.79" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (5 samples, 0.01%; +0.01%)</title><rect x="539.9" y="421" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="542.87" y="431.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (417 samples, 0.88%; +0.01%)</title><rect x="452.7" y="309" width="10.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="455.72" y="319.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (5 samples, 0.01%; 0.00%)</title><rect x="1176.3" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.32" y="495.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%; +0.00%)</title><rect x="522.8" y="261" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="525.76" y="271.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (726 samples, 1.53%; -0.01%)</title><rect x="542.8" y="389" width="18.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="545.84" y="399.5" ></text>
</g>
<g >
<title>operator new (51 samples, 0.11%; 0.00%)</title><rect x="528.5" y="405" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="531.47" y="415.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (15 samples, 0.03%; +0.01%)</title><rect x="706.0" y="485" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="708.96" y="495.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (5,256 samples, 11.04%; -0.01%)</title><rect x="712.5" y="453" width="130.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="715.48" y="463.5" >single_node_cql_..</text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (79 samples, 0.17%; +0.01%)</title><rect x="787.9" y="149" width="1.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="790.88" y="159.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (108 samples, 0.23%; +0.00%)</title><rect x="386.6" y="229" width="2.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="389.56" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (9 samples, 0.02%; -0.00%)</title><rect x="1124.1" y="421" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1127.07" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (132 samples, 0.28%; -0.01%)</title><rect x="392.0" y="197" width="3.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="395.01" y="207.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (27 samples, 0.06%; -0.01%)</title><rect x="739.7" y="405" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="742.72" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (9 samples, 0.02%; +0.01%)</title><rect x="829.4" y="437" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="832.35" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (15 samples, 0.03%; +0.00%)</title><rect x="232.3" y="213" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="235.26" y="223.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (40 samples, 0.08%; +0.00%)</title><rect x="1140.1" y="389" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1143.05" y="399.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (119 samples, 0.25%; +0.00%)</title><rect x="844.1" y="405" width="3.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="847.15" y="415.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (12 samples, 0.03%; 0.00%)</title><rect x="1140.4" y="181" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.40" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (12 samples, 0.03%; -0.01%)</title><rect x="135.4" y="245" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="138.45" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (43 samples, 0.09%; -0.00%)</title><rect x="395.8" y="213" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="398.83" y="223.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,313 samples, 9.06%; -0.01%)</title><rect x="139.8" y="293" width="106.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="142.78" y="303.5" >seastar::do_u..</text>
</g>
<g >
<title>partition_version_ref::operator* (8 samples, 0.02%; +0.01%)</title><rect x="500.4" y="229" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="503.43" y="239.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (44 samples, 0.09%; +0.01%)</title><rect x="64.3" y="421" width="1.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="67.28" y="431.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (47 samples, 0.10%; -0.00%)</title><rect x="285.4" y="309" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="288.43" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (6 samples, 0.01%; +0.00%)</title><rect x="821.0" y="325" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="824.00" y="335.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (53 samples, 0.11%; +0.03%)</title><rect x="222.9" y="229" width="1.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="225.89" y="239.5" ></text>
</g>
<g >
<title>std::type_info::operator== (7 samples, 0.01%; +0.00%)</title><rect x="1174.7" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1177.66" y="415.5" ></text>
</g>
<g >
<title>operator delete (18 samples, 0.04%; -0.02%)</title><rect x="625.4" y="485" width="0.4" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="628.36" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (64 samples, 0.13%; +0.01%)</title><rect x="536.9" y="325" width="1.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="539.92" y="335.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%; +0.00%)</title><rect x="618.3" y="485" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="621.29" y="495.5" ></text>
</g>
<g >
<title>operator new (26 samples, 0.05%; 0.00%)</title><rect x="938.4" y="373" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="941.39" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (18 samples, 0.04%; +0.01%)</title><rect x="673.1" y="485" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="676.07" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::needs_filtering (5 samples, 0.01%; +0.00%)</title><rect x="871.7" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="874.66" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (14 samples, 0.03%; +0.00%)</title><rect x="570.9" y="373" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="573.90" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (14 samples, 0.03%; +0.00%)</title><rect x="997.7" y="261" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1000.70" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (71 samples, 0.15%; -0.01%)</title><rect x="1124.6" y="389" width="1.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1127.64" y="399.5" ></text>
</g>
<g >
<title>free (23 samples, 0.05%; +0.01%)</title><rect x="36.1" y="421" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="39.08" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (40 samples, 0.08%; +0.03%)</title><rect x="817.8" y="293" width="1.0" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="820.83" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (13 samples, 0.03%; -0.00%)</title><rect x="1069.6" y="309" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1072.59" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (8 samples, 0.02%; +0.01%)</title><rect x="646.7" y="453" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="649.70" y="463.5" ></text>
</g>
<g >
<title>sstring_hash::operator (32 samples, 0.07%; +0.00%)</title><rect x="835.1" y="373" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="838.05" y="383.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (5 samples, 0.01%; +0.01%)</title><rect x="219.8" y="117" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="222.82" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (93 samples, 0.20%; -0.01%)</title><rect x="650.7" y="469" width="2.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="653.69" y="479.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (87 samples, 0.18%; +0.00%)</title><rect x="611.1" y="421" width="2.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="614.05" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (61 samples, 0.13%; -0.01%)</title><rect x="903.3" y="341" width="1.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="906.27" y="351.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (8 samples, 0.02%; -0.00%)</title><rect x="1029.5" y="181" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1032.48" y="191.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (196 samples, 0.41%; +0.03%)</title><rect x="916.6" y="357" width="4.8" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="919.55" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%; +0.01%)</title><rect x="143.0" y="261" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="146.01" y="271.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (11 samples, 0.02%; +0.01%)</title><rect x="327.3" y="181" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="330.27" y="191.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.01%; -0.01%)</title><rect x="912.2" y="325" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="915.24" y="335.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (6 samples, 0.01%; -0.02%)</title><rect x="474.0" y="213" width="0.2" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="477.01" y="223.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (64 samples, 0.13%; +0.04%)</title><rect x="742.3" y="373" width="1.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="745.28" y="383.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (30 samples, 0.06%; -0.05%)</title><rect x="1165.3" y="453" width="0.7" height="15.0" fill="rgb(158,158,255)" rx="2" ry="2" />
<text  x="1168.29" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (15 samples, 0.03%; +0.01%)</title><rect x="681.3" y="453" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="684.25" y="463.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (115 samples, 0.24%; 0.00%)</title><rect x="1153.0" y="469" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1156.02" y="479.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.05%; +0.02%)</title><rect x="43.7" y="485" width="0.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="46.66" y="495.5" ></text>
</g>
<g >
<title>create_partitions (273 samples, 0.57%; 0.00%)</title><rect x="14.4" y="533" width="6.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.44" y="543.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (13 samples, 0.03%; +0.01%)</title><rect x="1100.5" y="373" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1103.49" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (7 samples, 0.01%; +0.00%)</title><rect x="410.3" y="373" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="413.33" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (110 samples, 0.23%; -0.01%)</title><rect x="833.2" y="389" width="2.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="836.17" y="399.5" ></text>
</g>
<g >
<title>cql3::selection::simple_selection::is_aggregate (13 samples, 0.03%; +0.02%)</title><rect x="865.1" y="437" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="868.12" y="447.5" ></text>
</g>
<g >
<title>operator delete (9 samples, 0.02%; +0.02%)</title><rect x="397.4" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="400.37" y="271.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (23 samples, 0.05%; -0.02%)</title><rect x="640.1" y="469" width="0.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="643.13" y="479.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (63 samples, 0.13%; +0.01%)</title><rect x="753.5" y="341" width="1.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="756.53" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (120 samples, 0.25%; +0.01%)</title><rect x="1043.3" y="261" width="3.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1046.29" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.01%)</title><rect x="135.3" y="245" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="138.32" y="255.5" ></text>
</g>
<g >
<title>operator new (94 samples, 0.20%; +0.01%)</title><rect x="1018.3" y="245" width="2.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1021.33" y="255.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (420 samples, 0.88%; +0.02%)</title><rect x="560.8" y="389" width="10.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="563.84" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (7 samples, 0.01%; +0.01%)</title><rect x="80.1" y="453" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="83.07" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (5 samples, 0.01%; +0.01%)</title><rect x="221.0" y="197" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="224.03" y="207.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (2,055 samples, 4.32%; +0.03%)</title><rect x="998.6" y="309" width="51.0" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="1001.62" y="319.5" >servi..</text>
</g>
<g >
<title>operator delete (38 samples, 0.08%; +0.02%)</title><rect x="151.0" y="197" width="1.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="154.04" y="207.5" ></text>
</g>
<g >
<title>dht::tri_compare (119 samples, 0.25%; +0.05%)</title><rect x="1079.4" y="229" width="3.0" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="1082.43" y="239.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (152 samples, 0.32%; +0.01%)</title><rect x="786.2" y="165" width="3.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="789.25" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%; -0.00%)</title><rect x="270.3" y="293" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="273.26" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (68 samples, 0.14%; -0.01%)</title><rect x="1168.7" y="485" width="1.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1171.68" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (7 samples, 0.01%; +0.01%)</title><rect x="414.7" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="417.74" y="415.5" ></text>
</g>
<g >
<title>seastar::gate::enter (10 samples, 0.02%; +0.02%)</title><rect x="78.1" y="453" width="0.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="81.09" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (5 samples, 0.01%; -0.01%)</title><rect x="1138.8" y="437" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1141.82" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (13 samples, 0.03%; -0.01%)</title><rect x="592.8" y="437" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="595.76" y="447.5" ></text>
</g>
<g >
<title>database::find_schema (8 samples, 0.02%; +0.01%)</title><rect x="823.7" y="421" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="826.65" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; +0.00%)</title><rect x="1038.6" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1041.55" y="271.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (32 samples, 0.07%; +0.01%)</title><rect x="212.4" y="133" width="0.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="215.36" y="143.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; 0.00%)</title><rect x="522.6" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="525.59" y="255.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (565 samples, 1.19%; +0.00%)</title><rect x="881.8" y="325" width="14.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="884.78" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (9 samples, 0.02%; +0.00%)</title><rect x="568.9" y="341" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="571.92" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (24 samples, 0.05%; +0.03%)</title><rect x="796.9" y="213" width="0.6" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="799.91" y="223.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (5 samples, 0.01%; +0.01%)</title><rect x="266.7" y="309" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="269.72" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (18 samples, 0.04%; +0.01%)</title><rect x="673.5" y="485" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="676.52" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (34 samples, 0.07%; +0.02%)</title><rect x="942.3" y="389" width="0.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="945.26" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (26 samples, 0.05%; +0.01%)</title><rect x="656.0" y="469" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="658.99" y="479.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.01%; +0.01%)</title><rect x="550.5" y="309" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="553.48" y="319.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (87 samples, 0.18%; -0.00%)</title><rect x="532.8" y="389" width="2.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="535.83" y="399.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.01%; +0.00%)</title><rect x="840.0" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="842.96" y="415.5" ></text>
</g>
<g >
<title>utils::array_search_gt (17 samples, 0.04%; +0.02%)</title><rect x="462.3" y="277" width="0.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="465.33" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (6 samples, 0.01%; +0.00%)</title><rect x="1041.4" y="277" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1044.35" y="287.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (13 samples, 0.03%; 0.00%)</title><rect x="821.8" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="824.82" y="303.5" ></text>
</g>
<g >
<title>schema_registry::get (184 samples, 0.39%; -0.01%)</title><rect x="968.7" y="357" width="4.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="971.73" y="367.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.01%; -0.01%)</title><rect x="782.7" y="165" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="785.68" y="175.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (29 samples, 0.06%; 0.00%)</title><rect x="789.1" y="117" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="792.07" y="127.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (10 samples, 0.02%; -0.00%)</title><rect x="851.2" y="421" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="854.21" y="431.5" ></text>
</g>
<g >
<title>__start_context (282 samples, 0.59%; 0.00%)</title><rect x="14.2" y="613" width="7.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.21" y="623.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.07%; -0.00%)</title><rect x="898.9" y="293" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="901.90" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (7 samples, 0.01%; 0.00%)</title><rect x="21.5" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.45" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (6 samples, 0.01%; -0.03%)</title><rect x="748.4" y="325" width="0.1" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="751.37" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (11 samples, 0.02%; -0.00%)</title><rect x="1069.2" y="293" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1072.19" y="303.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (27 samples, 0.06%; +0.01%)</title><rect x="591.1" y="405" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="594.08" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (5 samples, 0.01%; -0.00%)</title><rect x="897.8" y="293" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="900.81" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (40 samples, 0.08%; -0.00%)</title><rect x="209.3" y="165" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="212.26" y="175.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (14 samples, 0.03%; -0.01%)</title><rect x="35.6" y="437" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="38.58" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (364 samples, 0.76%; -0.00%)</title><rect x="1062.1" y="341" width="9.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1065.08" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (176 samples, 0.37%; -0.01%)</title><rect x="241.8" y="261" width="4.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="244.81" y="271.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (6 samples, 0.01%; -0.00%)</title><rect x="1001.4" y="293" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1004.42" y="303.5" ></text>
</g>
<g >
<title>schema::column_at (67 samples, 0.14%; -0.01%)</title><rect x="197.0" y="117" width="1.7" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="200.04" y="127.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (5 samples, 0.01%; +0.00%)</title><rect x="22.0" y="517" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="25.02" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="704.2" y="501" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="707.18" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (19 samples, 0.04%; +0.02%)</title><rect x="594.5" y="437" width="0.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="597.50" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="578.5" y="373" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="581.49" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (63 samples, 0.13%; -0.03%)</title><rect x="773.5" y="261" width="1.5" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="776.46" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (7 samples, 0.01%; -0.01%)</title><rect x="324.7" y="165" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="327.74" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (16 samples, 0.03%; +0.01%)</title><rect x="80.3" y="453" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="83.34" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (6 samples, 0.01%; +0.01%)</title><rect x="978.9" y="341" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="981.92" y="351.5" ></text>
</g>
<g >
<title>__dynamic_cast (14 samples, 0.03%; -0.00%)</title><rect x="634.5" y="469" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="637.53" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (7 samples, 0.01%; -0.00%)</title><rect x="538.3" y="293" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="541.33" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (81 samples, 0.17%; +0.01%)</title><rect x="804.2" y="325" width="2.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="807.22" y="335.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (76 samples, 0.16%; +0.04%)</title><rect x="505.5" y="293" width="1.9" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="508.51" y="303.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (18 samples, 0.04%; +0.01%)</title><rect x="897.6" y="309" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="900.62" y="319.5" ></text>
</g>
<g >
<title>operator delete (40 samples, 0.08%; +0.01%)</title><rect x="896.6" y="309" width="1.0" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="899.62" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="805.2" y="293" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="808.21" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (6 samples, 0.01%; -0.01%)</title><rect x="824.9" y="421" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="827.94" y="431.5" ></text>
</g>
<g >
<title>dht::tri_compare (12 samples, 0.03%; 0.00%)</title><rect x="474.3" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="477.33" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (60 samples, 0.13%; +0.00%)</title><rect x="605.1" y="389" width="1.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="608.06" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::future (5 samples, 0.01%; 0.00%)</title><rect x="979.1" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="982.06" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (218 samples, 0.46%; +0.02%)</title><rect x="749.7" y="357" width="5.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="752.69" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (6 samples, 0.01%; +0.00%)</title><rect x="1103.5" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1106.54" y="383.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (142 samples, 0.30%; +0.00%)</title><rect x="843.8" y="421" width="3.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="846.75" y="431.5" ></text>
</g>
<g >
<title>__libc_start_main (46,664 samples, 98.02%; 0.00%)</title><rect x="21.7" y="629" width="1156.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.67" y="639.5" >__libc_start_main</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (35 samples, 0.07%; +0.03%)</title><rect x="65.4" y="437" width="0.8" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="68.37" y="447.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; +0.00%)</title><rect x="639.9" y="469" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="642.91" y="479.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (23 samples, 0.05%; +0.00%)</title><rect x="674.8" y="309" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="677.78" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (7 samples, 0.01%; -0.02%)</title><rect x="241.6" y="245" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="244.63" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (68 samples, 0.14%; +0.01%)</title><rect x="608.6" y="421" width="1.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="611.63" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (5 samples, 0.01%; -0.01%)</title><rect x="808.0" y="341" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="811.04" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (5 samples, 0.01%; +0.01%)</title><rect x="695.9" y="421" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="698.88" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (10 samples, 0.02%; +0.01%)</title><rect x="76.7" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="79.65" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.01%; +0.00%)</title><rect x="800.6" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="803.57" y="271.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (17 samples, 0.04%; 0.00%)</title><rect x="19.0" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.00" y="367.5" ></text>
</g>
<g >
<title>database::find_uuid (204 samples, 0.43%; +0.00%)</title><rect x="815.5" y="357" width="5.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="818.52" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; -0.00%)</title><rect x="397.1" y="213" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="400.14" y="223.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (324 samples, 0.68%; -0.00%)</title><rect x="714.0" y="437" width="8.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="717.04" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (105 samples, 0.22%; -0.04%)</title><rect x="1008.3" y="261" width="2.6" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="1011.31" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; 0.00%)</title><rect x="222.7" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="225.70" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (8 samples, 0.02%; -0.00%)</title><rect x="418.7" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="421.71" y="367.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; +0.02%)</title><rect x="1146.7" y="485" width="0.7" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1149.70" y="495.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (480 samples, 1.01%; +0.02%)</title><rect x="263.9" y="341" width="11.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="266.89" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (20 samples, 0.04%; -0.00%)</title><rect x="312.6" y="197" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="315.57" y="207.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (7 samples, 0.01%; +0.00%)</title><rect x="17.9" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="20.93" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (70 samples, 0.15%; -0.01%)</title><rect x="641.9" y="469" width="1.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="644.86" y="479.5" ></text>
</g>
<g >
<title>operator new (77 samples, 0.16%; +0.00%)</title><rect x="950.4" y="405" width="1.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="953.36" y="415.5" ></text>
</g>
<g >
<title>dht::sharder::shard_of (13 samples, 0.03%; +0.01%)</title><rect x="1000.6" y="293" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1003.60" y="303.5" ></text>
</g>
<g >
<title>reader_permit::consume (11 samples, 0.02%; +0.01%)</title><rect x="207.7" y="149" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="210.72" y="159.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="992.4" y="325" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="995.42" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (583 samples, 1.22%; +0.01%)</title><rect x="545.3" y="341" width="14.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="548.27" y="351.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (5 samples, 0.01%; -0.02%)</title><rect x="389.2" y="245" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="392.24" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (29 samples, 0.06%; +0.00%)</title><rect x="97.8" y="373" width="0.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="100.84" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (12 samples, 0.03%; +0.00%)</title><rect x="256.8" y="325" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="259.83" y="335.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (11 samples, 0.02%; -0.01%)</title><rect x="154.9" y="213" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="157.93" y="223.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (2,352 samples, 4.94%; +0.02%)</title><rect x="991.5" y="341" width="58.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="994.53" y="351.5" >servic..</text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (101 samples, 0.21%; +0.01%)</title><rect x="233.4" y="197" width="2.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="236.43" y="207.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.01%)</title><rect x="759.1" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="762.11" y="335.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (44 samples, 0.09%; -0.03%)</title><rect x="609.0" y="405" width="1.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="611.97" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (47 samples, 0.10%; 0.00%)</title><rect x="674.7" y="405" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="677.66" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (7 samples, 0.01%; +0.01%)</title><rect x="1136.0" y="421" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1139.01" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%; 0.00%)</title><rect x="246.4" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="249.39" y="271.5" ></text>
</g>
<g >
<title>operator new (81 samples, 0.17%; +0.01%)</title><rect x="1114.2" y="357" width="2.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1117.23" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (390 samples, 0.82%; -0.02%)</title><rect x="265.3" y="325" width="9.7" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="268.30" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.01%; +0.01%)</title><rect x="796.5" y="229" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="799.48" y="239.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (5 samples, 0.01%; +0.00%)</title><rect x="711.5" y="453" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="714.52" y="463.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (12 samples, 0.03%; -0.00%)</title><rect x="224.7" y="229" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="227.70" y="239.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (70 samples, 0.15%; +0.01%)</title><rect x="795.8" y="261" width="1.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="798.82" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (60 samples, 0.13%; 0.00%)</title><rect x="15.1" y="325" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.06" y="335.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (412 samples, 0.87%; -0.03%)</title><rect x="1178.6" y="629" width="10.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1181.62" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (22 samples, 0.05%; 0.00%)</title><rect x="400.9" y="229" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="403.86" y="239.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (330 samples, 0.69%; -0.01%)</title><rect x="1074.2" y="277" width="8.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1077.25" y="287.5" ></text>
</g>
<g >
<title>validation::validate_column_family (8 samples, 0.02%; -0.00%)</title><rect x="823.2" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="826.16" y="415.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (21 samples, 0.04%; +0.00%)</title><rect x="235.4" y="181" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="238.41" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (19 samples, 0.04%; -0.01%)</title><rect x="1054.7" y="293" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1057.74" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (44 samples, 0.09%; -0.03%)</title><rect x="1167.5" y="485" width="1.1" height="15.0" fill="rgb(179,179,255)" rx="2" ry="2" />
<text  x="1170.49" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (6 samples, 0.01%; +0.00%)</title><rect x="700.3" y="421" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="703.31" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (6 samples, 0.01%; -0.00%)</title><rect x="629.4" y="485" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="632.40" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.06%; 0.00%)</title><rect x="1139.3" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.34" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (44 samples, 0.09%; -0.02%)</title><rect x="564.1" y="357" width="1.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="567.08" y="367.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (6 samples, 0.01%; +0.00%)</title><rect x="257.2" y="341" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="260.20" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (20 samples, 0.04%; +0.00%)</title><rect x="436.3" y="277" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="439.31" y="287.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (9 samples, 0.02%; 0.00%)</title><rect x="16.7" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.74" y="367.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (59 samples, 0.12%; -0.01%)</title><rect x="590.3" y="421" width="1.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="593.28" y="431.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (9 samples, 0.02%; -0.00%)</title><rect x="1057.7" y="261" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1060.74" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (30 samples, 0.06%; +0.03%)</title><rect x="143.9" y="245" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="146.87" y="255.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::mhtraits&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, boost::intrusive::list_member_hook&lt;boost::intrusive::link_mode&lt; (7 samples, 0.01%; +0.00%)</title><rect x="715.5" y="389" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="718.51" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (41 samples, 0.09%; +0.01%)</title><rect x="949.3" y="405" width="1.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="952.35" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (22 samples, 0.05%; +0.01%)</title><rect x="1151.2" y="485" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1154.16" y="495.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (5 samples, 0.01%; +0.00%)</title><rect x="876.2" y="389" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="879.22" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (6 samples, 0.01%; +0.01%)</title><rect x="220.9" y="197" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="223.89" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (21 samples, 0.04%; +0.01%)</title><rect x="211.2" y="149" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="214.24" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (342 samples, 0.72%; -0.02%)</title><rect x="1155.9" y="469" width="8.4" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1158.87" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (24 samples, 0.05%; 0.00%)</title><rect x="1041.8" y="245" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1044.85" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; +0.01%)</title><rect x="1155.3" y="421" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1158.27" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (33 samples, 0.07%; -0.01%)</title><rect x="120.4" y="309" width="0.8" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="123.35" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (62 samples, 0.13%; 0.00%)</title><rect x="15.1" y="341" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.06" y="351.5" ></text>
</g>
<g >
<title>query::result::builder::build (11 samples, 0.02%; +0.01%)</title><rect x="59.4" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="62.38" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (32 samples, 0.07%; -0.00%)</title><rect x="702.5" y="501" width="0.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="705.47" y="511.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (30 samples, 0.06%; +0.03%)</title><rect x="302.5" y="165" width="0.8" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="305.53" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (15 samples, 0.03%; +0.00%)</title><rect x="848.9" y="453" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="851.91" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (21 samples, 0.04%; -0.01%)</title><rect x="1127.9" y="373" width="0.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1130.91" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (12 samples, 0.03%; -0.00%)</title><rect x="621.1" y="485" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="624.09" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (38 samples, 0.08%; +0.00%)</title><rect x="145.0" y="245" width="1.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="148.04" y="255.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (15 samples, 0.03%; +0.01%)</title><rect x="400.5" y="229" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="403.49" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (7 samples, 0.01%; +0.01%)</title><rect x="162.2" y="197" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="165.24" y="207.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (8 samples, 0.02%; -0.01%)</title><rect x="911.9" y="325" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="914.89" y="335.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (6 samples, 0.01%; -0.01%)</title><rect x="809.2" y="309" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="812.20" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (8 samples, 0.02%; 0.00%)</title><rect x="800.5" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="803.50" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (16 samples, 0.03%; +0.00%)</title><rect x="606.7" y="373" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="609.72" y="383.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (45 samples, 0.09%; -0.00%)</title><rect x="150.9" y="213" width="1.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="153.94" y="223.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.01%; 0.00%)</title><rect x="46.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.14" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (10 samples, 0.02%; +0.01%)</title><rect x="849.3" y="469" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="852.31" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; +0.00%)</title><rect x="165.4" y="133" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="168.39" y="143.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (81 samples, 0.17%; +0.04%)</title><rect x="128.6" y="261" width="2.0" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="131.63" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::validate (8 samples, 0.02%; 0.00%)</title><rect x="823.5" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="826.45" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (5 samples, 0.01%; 0.00%)</title><rect x="944.8" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="947.76" y="415.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (52 samples, 0.11%; -0.01%)</title><rect x="407.6" y="357" width="1.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="410.60" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (7 samples, 0.01%; -0.01%)</title><rect x="875.4" y="405" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="878.41" y="415.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (111 samples, 0.23%; +0.01%)</title><rect x="879.0" y="325" width="2.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="882.02" y="335.5" ></text>
</g>
<g >
<title>database::find_schema (70 samples, 0.15%; 0.00%)</title><rect x="813.8" y="357" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="816.79" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (77 samples, 0.16%; 0.00%)</title><rect x="498.7" y="245" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="501.72" y="255.5" ></text>
</g>
<g >
<title>std::optional&lt;seastar::promise&lt;void&gt; &gt;::operator=&lt;seastar::promise&lt;void&gt; &gt; (5 samples, 0.01%; +0.00%)</title><rect x="616.9" y="485" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="619.86" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (5 samples, 0.01%; +0.00%)</title><rect x="755.0" y="325" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="757.97" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (33 samples, 0.07%; +0.02%)</title><rect x="556.1" y="277" width="0.8" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="559.08" y="287.5" ></text>
</g>
<g >
<title>operator new (62 samples, 0.13%; -0.01%)</title><rect x="836.2" y="421" width="1.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="839.24" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (23 samples, 0.05%; +0.01%)</title><rect x="440.5" y="277" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="443.50" y="287.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (19 samples, 0.04%; +0.01%)</title><rect x="384.7" y="229" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="387.65" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="992.6" y="325" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="995.57" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (6 samples, 0.01%; +0.01%)</title><rect x="397.0" y="213" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="400.00" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (27 samples, 0.06%; +0.01%)</title><rect x="600.6" y="421" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="603.64" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (11 samples, 0.02%; 0.00%)</title><rect x="760.4" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="763.37" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (19 samples, 0.04%; -0.01%)</title><rect x="135.7" y="261" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="138.74" y="271.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (5 samples, 0.01%; +0.01%)</title><rect x="291.4" y="261" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="294.43" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.00%)</title><rect x="130.5" y="245" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="133.49" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (18 samples, 0.04%; +0.00%)</title><rect x="939.9" y="325" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="942.85" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::done (15 samples, 0.03%; +0.01%)</title><rect x="684.3" y="453" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="687.25" y="463.5" ></text>
</g>
<g >
<title>compound_type&lt; (173 samples, 0.36%; 0.00%)</title><rect x="469.4" y="213" width="4.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="472.45" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="623.7" y="469" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="626.67" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (37 samples, 0.08%; +0.01%)</title><rect x="831.2" y="421" width="0.9" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="834.21" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (9 samples, 0.02%; -0.01%)</title><rect x="540.0" y="421" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="542.99" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (10 samples, 0.02%; +0.01%)</title><rect x="245.6" y="213" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="248.57" y="223.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (5 samples, 0.01%; -0.00%)</title><rect x="1049.4" y="293" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1052.43" y="303.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (62 samples, 0.13%; +0.00%)</title><rect x="521.2" y="261" width="1.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="524.23" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.06%; +0.00%)</title><rect x="1139.3" y="389" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1142.34" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (11 samples, 0.02%; +0.01%)</title><rect x="892.5" y="277" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="895.53" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (24 samples, 0.05%; -0.01%)</title><rect x="342.6" y="149" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="345.64" y="159.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (6 samples, 0.01%; -0.01%)</title><rect x="21.8" y="517" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="24.85" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (20 samples, 0.04%; +0.01%)</title><rect x="657.0" y="485" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="660.03" y="495.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (238 samples, 0.50%; +0.00%)</title><rect x="439.5" y="309" width="5.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="442.53" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (61 samples, 0.13%; -0.01%)</title><rect x="1116.5" y="357" width="1.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1119.53" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (7 samples, 0.01%; +0.00%)</title><rect x="1128.6" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1131.60" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (7 samples, 0.01%; -0.00%)</title><rect x="213.7" y="133" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="216.67" y="143.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.30" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (9 samples, 0.02%; -0.03%)</title><rect x="256.6" y="325" width="0.2" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="259.60" y="335.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (12 samples, 0.03%; +0.01%)</title><rect x="1139.0" y="469" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1142.04" y="479.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (10 samples, 0.02%; +0.01%)</title><rect x="638.7" y="437" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="641.67" y="447.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (5 samples, 0.01%; +0.00%)</title><rect x="124.4" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="127.39" y="287.5" ></text>
</g>
<g >
<title>operator delete (24 samples, 0.05%; -0.03%)</title><rect x="660.2" y="453" width="0.6" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="663.23" y="463.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (10 samples, 0.02%; +0.01%)</title><rect x="753.1" y="309" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="756.06" y="319.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (5 samples, 0.01%; +0.00%)</title><rect x="384.2" y="229" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="387.18" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (44 samples, 0.09%; -0.00%)</title><rect x="708.2" y="405" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="711.24" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (307 samples, 0.64%; 0.00%)</title><rect x="67.7" y="421" width="7.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.68" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (17 samples, 0.04%; 0.00%)</title><rect x="856.3" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.32" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (210 samples, 0.44%; +0.01%)</title><rect x="734.0" y="341" width="5.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="736.97" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (23 samples, 0.05%; -0.00%)</title><rect x="812.6" y="357" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="815.65" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (13 samples, 0.03%; +0.01%)</title><rect x="639.5" y="405" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="642.51" y="415.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (66 samples, 0.14%; 0.00%)</title><rect x="516.9" y="309" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="519.94" y="319.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (18 samples, 0.04%; +0.00%)</title><rect x="1007.7" y="261" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1010.72" y="271.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.04%; 0.00%)</title><rect x="409.8" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="412.81" y="383.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (64 samples, 0.13%; -0.00%)</title><rect x="729.7" y="341" width="1.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="732.71" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (18 samples, 0.04%; -0.00%)</title><rect x="780.0" y="229" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="782.95" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (5 samples, 0.01%; 0.00%)</title><rect x="968.6" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="971.60" y="319.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (6 samples, 0.01%; +0.01%)</title><rect x="949.0" y="405" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="951.97" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (12 samples, 0.03%; +0.01%)</title><rect x="799.5" y="213" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="802.48" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (13 samples, 0.03%; +0.01%)</title><rect x="881.2" y="309" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="884.18" y="319.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (6 samples, 0.01%; 0.00%)</title><rect x="857.3" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.34" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (5 samples, 0.01%; +0.00%)</title><rect x="779.0" y="261" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="782.03" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (59 samples, 0.12%; +0.02%)</title><rect x="238.2" y="197" width="1.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="241.19" y="207.5" ></text>
</g>
<g >
<title>operator new (47 samples, 0.10%; +0.01%)</title><rect x="708.2" y="421" width="1.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="711.17" y="431.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (92 samples, 0.19%; -0.00%)</title><rect x="1026.3" y="165" width="2.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1029.31" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.00%)</title><rect x="802.6" y="261" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="805.56" y="271.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (7 samples, 0.01%; -0.02%)</title><rect x="1041.2" y="277" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1044.16" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (7 samples, 0.01%; +0.01%)</title><rect x="494.6" y="197" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="497.61" y="207.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (7 samples, 0.01%; -0.00%)</title><rect x="1034.6" y="197" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1037.56" y="207.5" ></text>
</g>
<g >
<title>operator new (66 samples, 0.14%; +0.00%)</title><rect x="536.9" y="341" width="1.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="539.89" y="351.5" ></text>
</g>
<g >
<title>__tls_init (5 samples, 0.01%; +0.00%)</title><rect x="140.8" y="261" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="143.78" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (31 samples, 0.07%; -0.03%)</title><rect x="351.3" y="149" width="0.8" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="354.29" y="159.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (122 samples, 0.26%; -0.01%)</title><rect x="909.6" y="373" width="3.0" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="912.59" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (19 samples, 0.04%; +0.00%)</title><rect x="787.2" y="133" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="790.19" y="143.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (39 samples, 0.08%; 0.00%)</title><rect x="1140.1" y="373" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.08" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (18 samples, 0.04%; +0.03%)</title><rect x="1142.0" y="485" width="0.5" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1145.04" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (10 samples, 0.02%; +0.00%)</title><rect x="589.3" y="437" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="592.34" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (6 samples, 0.01%; 0.00%)</title><rect x="20.5" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.48" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (98 samples, 0.21%; -0.00%)</title><rect x="686.2" y="485" width="2.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="689.18" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (5 samples, 0.01%; -0.01%)</title><rect x="672.5" y="437" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="675.50" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (37 samples, 0.08%; +0.01%)</title><rect x="499.2" y="229" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="502.17" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="44.5" y="485" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="47.48" y="495.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (7 samples, 0.01%; -0.00%)</title><rect x="819.1" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="822.09" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (70 samples, 0.15%; -0.04%)</title><rect x="614.6" y="485" width="1.8" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="617.62" y="495.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (16 samples, 0.03%; -0.02%)</title><rect x="1061.4" y="341" width="0.4" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="1064.41" y="351.5" ></text>
</g>
<g >
<title>operator delete (72 samples, 0.15%; +0.02%)</title><rect x="551.8" y="293" width="1.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="554.84" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (116 samples, 0.24%; +0.04%)</title><rect x="336.8" y="165" width="2.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="339.81" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;query::result_memory_accounter&gt;::awaiter (8 samples, 0.02%; +0.01%)</title><rect x="78.4" y="453" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="81.39" y="463.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (73 samples, 0.15%; -0.01%)</title><rect x="851.7" y="469" width="1.8" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="854.69" y="479.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (17 samples, 0.04%; +0.01%)</title><rect x="52.2" y="469" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="55.19" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (11 samples, 0.02%; -0.01%)</title><rect x="481.4" y="309" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="484.44" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (6 samples, 0.01%; -0.03%)</title><rect x="408.9" y="357" width="0.1" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="411.89" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (26 samples, 0.05%; 0.00%)</title><rect x="674.8" y="325" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="677.78" y="335.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (7 samples, 0.01%; +0.01%)</title><rect x="599.0" y="437" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="602.01" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (33 samples, 0.07%; +0.01%)</title><rect x="226.2" y="245" width="0.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="229.24" y="255.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (214 samples, 0.45%; 0.00%)</title><rect x="14.8" y="437" width="5.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.76" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (17 samples, 0.04%; 0.00%)</title><rect x="857.3" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.29" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (7 samples, 0.01%; -0.02%)</title><rect x="494.0" y="213" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="497.01" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (7 samples, 0.01%; +0.01%)</title><rect x="1175.3" y="501" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1178.33" y="511.5" ></text>
</g>
<g >
<title>operator delete (78 samples, 0.16%; -0.01%)</title><rect x="92.0" y="437" width="1.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="94.99" y="447.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (10 samples, 0.02%; +0.01%)</title><rect x="607.2" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="610.19" y="431.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (14 samples, 0.03%; -0.00%)</title><rect x="306.7" y="165" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="309.72" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (25 samples, 0.05%; -0.00%)</title><rect x="165.0" y="149" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="167.99" y="159.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (13 samples, 0.03%; +0.00%)</title><rect x="20.4" y="405" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="23.41" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (9 samples, 0.02%; +0.01%)</title><rect x="402.9" y="277" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="405.92" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (22 samples, 0.05%; -0.02%)</title><rect x="1026.8" y="149" width="0.6" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="1029.83" y="159.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%; -0.01%)</title><rect x="1171.2" y="453" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1174.16" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (9 samples, 0.02%; -0.01%)</title><rect x="445.5" y="325" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="448.50" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (23 samples, 0.05%; -0.01%)</title><rect x="1064.5" y="293" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1067.48" y="303.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (9 samples, 0.02%; +0.01%)</title><rect x="764.8" y="357" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="767.83" y="367.5" ></text>
</g>
<g >
<title>[unknown] (10 samples, 0.02%; 0.00%)</title><rect x="10.0" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.02" y="623.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (84 samples, 0.18%; 0.00%)</title><rect x="608.2" y="437" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="611.23" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (8 samples, 0.02%; +0.01%)</title><rect x="745.6" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="748.57" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (70 samples, 0.15%; +0.01%)</title><rect x="237.9" y="213" width="1.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="240.91" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (15 samples, 0.03%; -0.02%)</title><rect x="757.4" y="357" width="0.4" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="760.45" y="367.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (14 samples, 0.03%; -0.01%)</title><rect x="297.9" y="213" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="300.87" y="223.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (343 samples, 0.72%; +0.01%)</title><rect x="1022.0" y="213" width="8.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1025.04" y="223.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (39 samples, 0.08%; +0.00%)</title><rect x="1140.1" y="357" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1143.08" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; -0.00%)</title><rect x="812.7" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="815.67" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (25 samples, 0.05%; +0.01%)</title><rect x="430.6" y="261" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="433.58" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (143 samples, 0.30%; -0.01%)</title><rect x="242.3" y="229" width="3.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="245.28" y="239.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (721 samples, 1.51%; +0.10%)</title><rect x="1103.9" y="421" width="17.9" height="15.0" fill="rgb(255,110,110)" rx="2" ry="2" />
<text  x="1106.89" y="431.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (221 samples, 0.46%; -0.01%)</title><rect x="200.5" y="165" width="5.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="203.46" y="175.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (22 samples, 0.05%; +0.01%)</title><rect x="851.0" y="437" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="853.99" y="447.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (6 samples, 0.01%; +0.01%)</title><rect x="711.4" y="453" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="714.37" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (27 samples, 0.06%; +0.01%)</title><rect x="30.9" y="485" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="33.87" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (34 samples, 0.07%; +0.01%)</title><rect x="145.1" y="229" width="0.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="148.14" y="239.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (6 samples, 0.01%; +0.00%)</title><rect x="613.4" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="616.38" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (5 samples, 0.01%; +0.00%)</title><rect x="1140.5" y="133" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1143.48" y="143.5" ></text>
</g>
<g >
<title>query::querier_base::close (1,240 samples, 2.60%; 0.00%)</title><rect x="541.6" y="437" width="30.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="544.55" y="447.5" >qu..</text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (5 samples, 0.01%; +0.01%)</title><rect x="1154.6" y="421" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1157.63" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (8 samples, 0.02%; +0.00%)</title><rect x="1029.7" y="197" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1032.68" y="207.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (64 samples, 0.13%; -0.02%)</title><rect x="288.0" y="277" width="1.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="290.96" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (123 samples, 0.26%; -0.01%)</title><rect x="35.5" y="453" width="3.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="38.46" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (6 samples, 0.01%; +0.01%)</title><rect x="1118.0" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1121.04" y="415.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (10 samples, 0.02%; +0.01%)</title><rect x="943.5" y="341" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="946.52" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (19 samples, 0.04%; +0.01%)</title><rect x="600.8" y="405" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="603.84" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (16 samples, 0.03%; +0.01%)</title><rect x="579.4" y="389" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="582.35" y="399.5" ></text>
</g>
<g >
<title>database::find_keyspace (158 samples, 0.33%; 0.00%)</title><rect x="1055.2" y="341" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1058.21" y="351.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (26 samples, 0.05%; +0.04%)</title><rect x="64.4" y="405" width="0.7" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="67.43" y="415.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (12 samples, 0.03%; +0.00%)</title><rect x="1098.9" y="357" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1101.93" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (10 samples, 0.02%; 0.00%)</title><rect x="18.6" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.60" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.01%)</title><rect x="144.6" y="245" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="147.62" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (67 samples, 0.14%; -0.01%)</title><rect x="896.4" y="325" width="1.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="899.40" y="335.5" ></text>
</g>
<g >
<title>query::result::result (40 samples, 0.08%; +0.00%)</title><rect x="580.7" y="421" width="1.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="583.74" y="431.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (6 samples, 0.01%; -0.02%)</title><rect x="229.6" y="213" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="232.56" y="223.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (12 samples, 0.03%; +0.02%)</title><rect x="416.2" y="373" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="419.16" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (9 samples, 0.02%; +0.00%)</title><rect x="1097.2" y="341" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1100.25" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (135 samples, 0.28%; +0.00%)</title><rect x="660.0" y="469" width="3.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="662.98" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (5 samples, 0.01%; +0.00%)</title><rect x="45.3" y="485" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="48.35" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (18 samples, 0.04%; +0.02%)</title><rect x="309.0" y="181" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="311.98" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (16 samples, 0.03%; +0.01%)</title><rect x="1038.2" y="261" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1041.16" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (6 samples, 0.01%; +0.00%)</title><rect x="431.2" y="261" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="434.20" y="271.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (50 samples, 0.11%; +0.01%)</title><rect x="665.8" y="453" width="1.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="668.81" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (38 samples, 0.08%; +0.02%)</title><rect x="777.7" y="229" width="0.9" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="780.70" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (10 samples, 0.02%; -0.01%)</title><rect x="1030.1" y="197" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1033.13" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (48 samples, 0.10%; +0.04%)</title><rect x="278.0" y="389" width="1.2" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="281.04" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (741 samples, 1.56%; +0.00%)</title><rect x="484.5" y="293" width="18.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="487.49" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (14 samples, 0.03%; +0.01%)</title><rect x="686.5" y="469" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="689.48" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; -0.01%)</title><rect x="1031.8" y="213" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1034.76" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (14 samples, 0.03%; +0.00%)</title><rect x="40.0" y="437" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="42.97" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (50 samples, 0.11%; +0.01%)</title><rect x="768.7" y="309" width="1.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="771.72" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (423 samples, 0.89%; -0.00%)</title><rect x="1021.4" y="229" width="10.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1024.43" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="416.5" y="373" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="419.45" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (6 samples, 0.01%; +0.01%)</title><rect x="1029.9" y="197" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1032.88" y="207.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (5 samples, 0.01%; +0.00%)</title><rect x="913.5" y="373" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="916.50" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (19 samples, 0.04%; +0.01%)</title><rect x="692.4" y="453" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="695.38" y="463.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (9 samples, 0.02%; +0.01%)</title><rect x="646.5" y="453" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="649.48" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (6 samples, 0.01%; +0.00%)</title><rect x="1100.9" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1103.94" y="367.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (11 samples, 0.02%; +0.01%)</title><rect x="794.4" y="197" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="797.43" y="207.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (14 samples, 0.03%; +0.00%)</title><rect x="1139.5" y="245" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1142.53" y="255.5" ></text>
</g>
<g >
<title>query::result::result (12 samples, 0.03%; -0.00%)</title><rect x="597.6" y="421" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="600.57" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (9 samples, 0.02%; -0.01%)</title><rect x="839.2" y="373" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="842.19" y="383.5" ></text>
</g>
<g >
<title>database::find_schema (56 samples, 0.12%; +0.00%)</title><rect x="747.2" y="389" width="1.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="750.21" y="399.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (44 samples, 0.09%; -0.01%)</title><rect x="939.2" y="373" width="1.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="942.21" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (93 samples, 0.20%; +0.00%)</title><rect x="577.5" y="405" width="2.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="580.54" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::stats (38 samples, 0.08%; +0.01%)</title><rect x="142.0" y="245" width="1.0" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="145.04" y="255.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (211 samples, 0.44%; 0.00%)</title><rect x="348.9" y="165" width="5.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="351.93" y="175.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (6 samples, 0.01%; -0.00%)</title><rect x="311.6" y="149" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="314.58" y="159.5" ></text>
</g>
<g >
<title>database::find_schema (281 samples, 0.59%; -0.00%)</title><rect x="813.6" y="373" width="7.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="816.61" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.06%; 0.00%)</title><rect x="1139.3" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.34" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (19 samples, 0.04%; +0.01%)</title><rect x="570.2" y="373" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="573.21" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (14 samples, 0.03%; +0.00%)</title><rect x="166.8" y="133" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="169.78" y="143.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (6 samples, 0.01%; -0.01%)</title><rect x="824.5" y="421" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="827.47" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (13 samples, 0.03%; -0.01%)</title><rect x="700.6" y="453" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="703.56" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (15 samples, 0.03%; +0.01%)</title><rect x="568.8" y="357" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="571.77" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (5 samples, 0.01%; -0.01%)</title><rect x="1129.3" y="421" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1132.32" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (6 samples, 0.01%; -0.07%)</title><rect x="132.2" y="245" width="0.1" height="15.0" fill="rgb(138,138,255)" rx="2" ry="2" />
<text  x="135.17" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (10 samples, 0.02%; +0.01%)</title><rect x="136.7" y="261" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="139.71" y="271.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (9 samples, 0.02%; +0.00%)</title><rect x="735.6" y="277" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="738.61" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (119 samples, 0.25%; -0.01%)</title><rect x="441.1" y="277" width="2.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="444.07" y="287.5" ></text>
</g>
<g >
<title>operator delete (36 samples, 0.08%; +0.01%)</title><rect x="507.5" y="325" width="0.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="510.47" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (25 samples, 0.05%; +0.01%)</title><rect x="627.2" y="485" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="630.19" y="495.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (6 samples, 0.01%; +0.01%)</title><rect x="809.3" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="812.35" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (16 samples, 0.03%; +0.01%)</title><rect x="812.8" y="341" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="815.82" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (31 samples, 0.07%; -0.01%)</title><rect x="599.2" y="437" width="0.8" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="602.18" y="447.5" ></text>
</g>
<g >
<title>operator new (23 samples, 0.05%; -0.02%)</title><rect x="93.9" y="437" width="0.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="96.93" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (39 samples, 0.08%; +0.00%)</title><rect x="1158.1" y="405" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1161.12" y="415.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (11 samples, 0.02%; -0.01%)</title><rect x="1035.5" y="261" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1038.45" y="271.5" ></text>
</g>
<g >
<title>compound_type&lt; (59 samples, 0.12%; -0.01%)</title><rect x="533.1" y="357" width="1.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="536.13" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (15 samples, 0.03%; +0.02%)</title><rect x="621.4" y="485" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="624.39" y="495.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (28 samples, 0.06%; 0.00%)</title><rect x="1139.3" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.34" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (59 samples, 0.12%; -0.00%)</title><rect x="1157.6" y="437" width="1.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1160.63" y="447.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (19 samples, 0.04%; 0.00%)</title><rect x="1140.4" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.40" y="287.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (12 samples, 0.03%; +0.02%)</title><rect x="312.2" y="213" width="0.2" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="315.15" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (15 samples, 0.03%; -0.01%)</title><rect x="721.5" y="389" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="724.50" y="399.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (5 samples, 0.01%; +0.00%)</title><rect x="675.0" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="678.00" y="271.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (5 samples, 0.01%; -0.01%)</title><rect x="736.9" y="277" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="739.90" y="287.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (639 samples, 1.34%; +0.00%)</title><rect x="1073.7" y="309" width="15.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1076.73" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (14 samples, 0.03%; +0.01%)</title><rect x="654.9" y="469" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="657.85" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (23 samples, 0.05%; -0.02%)</title><rect x="880.4" y="277" width="0.5" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="883.36" y="287.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.01%; +0.01%)</title><rect x="431.9" y="261" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="434.90" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (18 samples, 0.04%; -0.00%)</title><rect x="1097.6" y="357" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1100.59" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.01%)</title><rect x="1147.3" y="469" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1150.32" y="479.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (13 samples, 0.03%; -0.01%)</title><rect x="793.9" y="85" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="796.93" y="95.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (10 samples, 0.02%; +0.01%)</title><rect x="690.2" y="469" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="693.22" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (12 samples, 0.03%; -0.02%)</title><rect x="539.1" y="389" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="542.12" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (34 samples, 0.07%; -0.01%)</title><rect x="943.1" y="389" width="0.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="946.10" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (12 samples, 0.03%; -0.02%)</title><rect x="437.8" y="293" width="0.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="440.82" y="303.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (8 samples, 0.02%; +0.01%)</title><rect x="244.6" y="197" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="247.58" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (5,329 samples, 11.19%; -0.07%)</title><rect x="279.6" y="405" width="132.1" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="282.61" y="415.5" >seastar::future&lt;..</text>
</g>
<g >
<title>seastar::reactor::add_task (14 samples, 0.03%; -0.00%)</title><rect x="696.0" y="421" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="699.00" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (15 samples, 0.03%; +0.00%)</title><rect x="1030.6" y="213" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1033.62" y="223.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (50 samples, 0.11%; 0.00%)</title><rect x="1177.0" y="517" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.99" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; 0.00%)</title><rect x="557.7" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="560.74" y="303.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1,265 samples, 2.66%; +0.01%)</title><rect x="327.7" y="181" width="31.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="330.69" y="191.5" >wr..</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (8 samples, 0.02%; +0.00%)</title><rect x="650.5" y="469" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="653.49" y="479.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (9 samples, 0.02%; -0.00%)</title><rect x="1073.5" y="309" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1076.50" y="319.5" ></text>
</g>
<g >
<title>operator new (102 samples, 0.21%; -0.01%)</title><rect x="152.4" y="213" width="2.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="155.40" y="223.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (5 samples, 0.01%; +0.00%)</title><rect x="190.0" y="85" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="192.98" y="95.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (450 samples, 0.95%; +0.02%)</title><rect x="632.6" y="485" width="11.1" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="635.57" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (5 samples, 0.01%; 0.00%)</title><rect x="862.0" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.02" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (5 samples, 0.01%; +0.00%)</title><rect x="854.1" y="485" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="857.11" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (8 samples, 0.02%; +0.01%)</title><rect x="824.2" y="389" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="827.17" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (8 samples, 0.02%; +0.01%)</title><rect x="557.4" y="293" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="560.44" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (10 samples, 0.02%; 0.00%)</title><rect x="206.0" y="165" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="209.01" y="175.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (37 samples, 0.08%; +0.00%)</title><rect x="267.1" y="293" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="270.06" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (16 samples, 0.03%; +0.02%)</title><rect x="936.9" y="405" width="0.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="939.93" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (14 samples, 0.03%; +0.00%)</title><rect x="1027.9" y="133" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1030.87" y="143.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (6 samples, 0.01%; 0.00%)</title><rect x="20.5" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.48" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (16 samples, 0.03%; +0.03%)</title><rect x="497.3" y="213" width="0.4" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="500.26" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.02%; +0.01%)</title><rect x="1097.0" y="341" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1100.02" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (194 samples, 0.41%; +0.01%)</title><rect x="716.3" y="373" width="4.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="719.27" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (54 samples, 0.11%; 0.00%)</title><rect x="814.2" y="325" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="817.18" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (23 samples, 0.05%; -0.02%)</title><rect x="990.6" y="277" width="0.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="993.59" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (40 samples, 0.08%; +0.02%)</title><rect x="100.1" y="421" width="0.9" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="103.05" y="431.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (6 samples, 0.01%; -0.00%)</title><rect x="822.0" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="824.99" y="287.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%; -0.01%)</title><rect x="503.0" y="293" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="505.96" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; -0.00%)</title><rect x="1040.1" y="277" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1043.09" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (8 samples, 0.02%; 0.00%)</title><rect x="857.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.09" y="399.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.01%; -0.02%)</title><rect x="819.0" y="277" width="0.1" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="821.97" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (17 samples, 0.04%; +0.00%)</title><rect x="988.5" y="261" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="991.46" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (21 samples, 0.04%; +0.01%)</title><rect x="1150.5" y="453" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1153.47" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.01%; -0.01%)</title><rect x="912.6" y="373" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="915.61" y="383.5" ></text>
</g>
<g >
<title>compound_type&lt; (5 samples, 0.01%; 0.00%)</title><rect x="534.3" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="537.32" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (7 samples, 0.01%; +0.01%)</title><rect x="616.7" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="619.68" y="495.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (23 samples, 0.05%; +0.03%)</title><rect x="973.3" y="357" width="0.6" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="976.29" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (186 samples, 0.39%; -0.10%)</title><rect x="201.1" y="133" width="4.6" height="15.0" fill="rgb(110,110,255)" rx="2" ry="2" />
<text  x="204.11" y="143.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%; +0.00%)</title><rect x="121.0" y="293" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="124.00" y="303.5" ></text>
</g>
<g >
<title>row::external_memory_usage (201 samples, 0.42%; -0.03%)</title><rect x="201.0" y="149" width="4.9" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="203.96" y="159.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="976.6" y="357" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="979.59" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (5 samples, 0.01%; 0.00%)</title><rect x="21.5" y="421" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.45" y="431.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (17 samples, 0.04%; +0.01%)</title><rect x="788.7" y="117" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="791.65" y="127.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (14 samples, 0.03%; +0.00%)</title><rect x="856.3" y="453" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="859.32" y="463.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (205 samples, 0.43%; -0.00%)</title><rect x="740.7" y="421" width="5.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="743.69" y="431.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (9 samples, 0.02%; +0.01%)</title><rect x="1000.9" y="293" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1003.93" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (6 samples, 0.01%; 0.00%)</title><rect x="881.6" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.63" y="319.5" ></text>
</g>
<g >
<title>database::has_keyspace (82 samples, 0.17%; -0.00%)</title><rect x="820.7" y="357" width="2.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="823.73" y="367.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (198 samples, 0.42%; +0.01%)</title><rect x="1024.8" y="197" width="4.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1027.77" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (62 samples, 0.13%; -0.00%)</title><rect x="850.0" y="469" width="1.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="853.00" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (11 samples, 0.02%; -0.00%)</title><rect x="794.0" y="69" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="796.98" y="79.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (9 samples, 0.02%; -0.01%)</title><rect x="200.6" y="149" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="203.56" y="159.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (5 samples, 0.01%; +0.01%)</title><rect x="1112.7" y="389" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1115.71" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (18 samples, 0.04%; -0.01%)</title><rect x="561.7" y="341" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="564.65" y="351.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (26 samples, 0.05%; -0.01%)</title><rect x="69.6" y="405" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="72.59" y="415.5" ></text>
</g>
<g >
<title>database::apply_in_memory (22 samples, 0.05%; -0.00%)</title><rect x="1139.4" y="293" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1142.39" y="303.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.01%; 0.00%)</title><rect x="17.3" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.26" y="319.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; +0.00%)</title><rect x="776.6" y="245" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="779.58" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (5 samples, 0.01%; +0.01%)</title><rect x="1134.9" y="421" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1137.95" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (12 samples, 0.03%; +0.01%)</title><rect x="65.1" y="405" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="68.08" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (26 samples, 0.05%; +0.01%)</title><rect x="31.6" y="485" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="34.61" y="495.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (15 samples, 0.03%; +0.01%)</title><rect x="1092.7" y="309" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1095.69" y="319.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (41 samples, 0.09%; 0.00%)</title><rect x="1140.0" y="485" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.03" y="495.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; -0.01%)</title><rect x="150.2" y="181" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="153.17" y="191.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (9 samples, 0.02%; -0.01%)</title><rect x="229.7" y="213" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="232.71" y="223.5" ></text>
</g>
<g >
<title>operator new (30 samples, 0.06%; +0.01%)</title><rect x="526.8" y="325" width="0.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="529.83" y="335.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (17 samples, 0.04%; +0.01%)</title><rect x="383.6" y="229" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="386.64" y="239.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (30 samples, 0.06%; -0.01%)</title><rect x="805.4" y="309" width="0.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="808.41" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (5 samples, 0.01%; +0.00%)</title><rect x="849.9" y="469" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="852.88" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (22 samples, 0.05%; +0.00%)</title><rect x="799.4" y="229" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="802.43" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="630.8" y="485" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="633.83" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (5 samples, 0.01%; -0.01%)</title><rect x="847.0" y="357" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="849.98" y="367.5" ></text>
</g>
<g >
<title>query::querier_base::close (13 samples, 0.03%; 0.00%)</title><rect x="1176.0" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.00" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (6 samples, 0.01%; +0.01%)</title><rect x="987.2" y="293" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="990.19" y="303.5" ></text>
</g>
<g >
<title>posix_memalign (171 samples, 0.36%; +0.04%)</title><rect x="185.6" y="53" width="4.2" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="188.59" y="63.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (7 samples, 0.01%; -0.08%)</title><rect x="1116.4" y="357" width="0.1" height="15.0" fill="rgb(125,125,255)" rx="2" ry="2" />
<text  x="1119.36" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.05%; -0.02%)</title><rect x="597.0" y="405" width="0.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="600.03" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (43 samples, 0.09%; +0.01%)</title><rect x="218.9" y="149" width="1.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="221.90" y="159.5" ></text>
</g>
<g >
<title>local_schema_registry (14 samples, 0.03%; +0.00%)</title><rect x="966.0" y="357" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="969.00" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; +0.00%)</title><rect x="444.2" y="277" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="447.24" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (27 samples, 0.06%; -0.02%)</title><rect x="468.6" y="197" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="471.61" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (127 samples, 0.27%; -0.00%)</title><rect x="1043.1" y="277" width="3.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1046.11" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.01%; +0.01%)</title><rect x="962.0" y="373" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="965.01" y="383.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (24 samples, 0.05%; -0.00%)</title><rect x="908.4" y="357" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="911.45" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (7 samples, 0.01%; -0.00%)</title><rect x="1026.6" y="149" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1029.63" y="159.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.01%)</title><rect x="779.4" y="245" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="782.36" y="255.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (33 samples, 0.07%; 0.00%)</title><rect x="612.3" y="405" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="615.32" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (120 samples, 0.25%; -0.01%)</title><rect x="937.3" y="405" width="3.0" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="940.32" y="415.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.01%; -0.01%)</title><rect x="1123.3" y="421" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1126.27" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (30 samples, 0.06%; -0.01%)</title><rect x="671.6" y="437" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="674.61" y="447.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (10 samples, 0.02%; -0.01%)</title><rect x="743.4" y="357" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="746.37" y="367.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (399 samples, 0.84%; +0.00%)</title><rect x="464.4" y="277" width="9.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="467.44" y="287.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (18 samples, 0.04%; -0.00%)</title><rect x="512.1" y="341" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="515.08" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (16 samples, 0.03%; 0.00%)</title><rect x="20.4" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.39" y="431.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (13 samples, 0.03%; -0.00%)</title><rect x="359.6" y="213" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="362.57" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (10 samples, 0.02%; -0.01%)</title><rect x="251.0" y="277" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="253.98" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (143 samples, 0.30%; -0.00%)</title><rect x="994.8" y="293" width="3.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="997.83" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (5 samples, 0.01%; +0.01%)</title><rect x="704.0" y="501" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="707.01" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (22,742 samples, 47.77%; 0.00%)</title><rect x="50.6" y="485" width="563.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.58" y="495.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (59 samples, 0.12%; +0.01%)</title><rect x="777.2" y="245" width="1.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="780.18" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (8 samples, 0.02%; -0.01%)</title><rect x="559.8" y="341" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="562.77" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (10 samples, 0.02%; +0.01%)</title><rect x="728.9" y="373" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="731.89" y="383.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (156 samples, 0.33%; +0.03%)</title><rect x="232.7" y="213" width="3.9" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="235.68" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.00%)</title><rect x="30.7" y="485" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="33.67" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.05%; -0.01%)</title><rect x="526.9" y="309" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="529.93" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (78 samples, 0.16%; +0.01%)</title><rect x="432.1" y="261" width="1.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="435.07" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (5 samples, 0.01%; -0.00%)</title><rect x="444.6" y="277" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="447.59" y="287.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (11 samples, 0.02%; +0.01%)</title><rect x="1154.4" y="405" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1157.36" y="415.5" ></text>
</g>
<g >
<title>free (16 samples, 0.03%; +0.03%)</title><rect x="391.6" y="197" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="394.62" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (62 samples, 0.13%; +0.02%)</title><rect x="757.8" y="373" width="1.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="760.82" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (17 samples, 0.04%; +0.01%)</title><rect x="692.0" y="453" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="694.96" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (46 samples, 0.10%; +0.01%)</title><rect x="734.8" y="309" width="1.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="737.82" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (6 samples, 0.01%; -0.01%)</title><rect x="22.9" y="517" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="25.89" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (7 samples, 0.01%; 0.00%)</title><rect x="241.1" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="244.11" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (7 samples, 0.01%; +0.00%)</title><rect x="205.7" y="133" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="208.72" y="143.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (5 samples, 0.01%; +0.00%)</title><rect x="275.0" y="325" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="277.97" y="335.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (7 samples, 0.01%; -0.00%)</title><rect x="182.1" y="85" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="185.07" y="95.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (14 samples, 0.03%; -0.01%)</title><rect x="771.2" y="293" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="774.20" y="303.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (5 samples, 0.01%; -0.04%)</title><rect x="279.5" y="405" width="0.1" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="282.48" y="415.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (11 samples, 0.02%; +0.01%)</title><rect x="395.6" y="197" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="398.56" y="207.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (91 samples, 0.19%; -0.00%)</title><rect x="736.7" y="293" width="2.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="739.75" y="303.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (5 samples, 0.01%; +0.01%)</title><rect x="639.4" y="405" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="642.39" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (8 samples, 0.02%; -0.00%)</title><rect x="431.0" y="245" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="434.00" y="255.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (74 samples, 0.16%; -0.00%)</title><rect x="259.1" y="325" width="1.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="262.08" y="335.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (6 samples, 0.01%; 0.00%)</title><rect x="21.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.30" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; -0.01%)</title><rect x="799.2" y="229" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="802.24" y="239.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (61 samples, 0.13%; +0.00%)</title><rect x="17.5" y="341" width="1.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="20.46" y="351.5" ></text>
</g>
<g >
<title>operator new (49 samples, 0.10%; +0.00%)</title><rect x="744.0" y="405" width="1.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="746.96" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (56 samples, 0.12%; -0.01%)</title><rect x="879.5" y="293" width="1.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="882.55" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (23 samples, 0.05%; +0.04%)</title><rect x="1136.2" y="421" width="0.6" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="1139.19" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (83 samples, 0.17%; +0.04%)</title><rect x="995.6" y="245" width="2.1" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="998.65" y="255.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (273 samples, 0.57%; 0.00%)</title><rect x="14.4" y="565" width="6.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.44" y="575.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (7 samples, 0.01%; -0.00%)</title><rect x="382.4" y="181" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="385.42" y="191.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (10 samples, 0.02%; +0.01%)</title><rect x="343.2" y="165" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="346.23" y="175.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (154 samples, 0.32%; -0.03%)</title><rect x="969.0" y="341" width="3.8" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="972.00" y="351.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (248 samples, 0.52%; -0.01%)</title><rect x="715.8" y="421" width="6.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="718.83" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (77 samples, 0.16%; +0.02%)</title><rect x="147.2" y="197" width="2.0" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="150.24" y="207.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (5 samples, 0.01%; +0.01%)</title><rect x="144.8" y="245" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="147.82" y="255.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (11 samples, 0.02%; 0.00%)</title><rect x="598.7" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="601.74" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (17 samples, 0.04%; -0.01%)</title><rect x="717.5" y="309" width="0.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="720.54" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (57 samples, 0.12%; -0.00%)</title><rect x="360.2" y="197" width="1.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="363.24" y="207.5" ></text>
</g>
<g >
<title>schema::column_at (11 samples, 0.02%; -0.03%)</title><rect x="205.4" y="117" width="0.3" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="208.44" y="127.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (7 samples, 0.01%; -0.03%)</title><rect x="592.5" y="421" width="0.1" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="595.46" y="431.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (21 samples, 0.04%; 0.00%)</title><rect x="326.1" y="181" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="329.13" y="191.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (5 samples, 0.01%; -0.04%)</title><rect x="512.5" y="341" width="0.2" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="515.53" y="351.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (5 samples, 0.01%; +0.01%)</title><rect x="987.3" y="293" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="990.34" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (52 samples, 0.11%; -0.01%)</title><rect x="638.6" y="453" width="1.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="641.62" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (7 samples, 0.01%; +0.01%)</title><rect x="1137.2" y="405" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1140.18" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (27 samples, 0.06%; +0.00%)</title><rect x="70.7" y="389" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="73.73" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (45 samples, 0.09%; -0.00%)</title><rect x="642.5" y="453" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="645.48" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (29 samples, 0.06%; -0.01%)</title><rect x="747.8" y="341" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="750.80" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (13 samples, 0.03%; 0.00%)</title><rect x="17.1" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.14" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (13 samples, 0.03%; -0.01%)</title><rect x="976.3" y="357" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="979.26" y="367.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (32 samples, 0.07%; 0.00%)</title><rect x="495.5" y="197" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="498.55" y="207.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (13 samples, 0.03%; 0.00%)</title><rect x="21.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.30" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (99 samples, 0.21%; +0.01%)</title><rect x="797.6" y="261" width="2.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="800.55" y="271.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (49 samples, 0.10%; 0.00%)</title><rect x="809.5" y="309" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="812.55" y="319.5" ></text>
</g>
<g >
<title>query_result_builder::consume (1,901 samples, 3.99%; -0.00%)</title><rect x="312.4" y="213" width="47.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="315.45" y="223.5" >quer..</text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (17 samples, 0.04%; +0.03%)</title><rect x="979.3" y="325" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="982.31" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (51 samples, 0.11%; +0.00%)</title><rect x="729.9" y="325" width="1.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="732.91" y="335.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (181 samples, 0.38%; +0.00%)</title><rect x="924.4" y="389" width="4.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="927.38" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (29 samples, 0.06%; +0.01%)</title><rect x="506.6" y="261" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="509.63" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (8 samples, 0.02%; +0.00%)</title><rect x="480.9" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="483.87" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::take (6 samples, 0.01%; -0.00%)</title><rect x="692.7" y="437" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="695.70" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (7 samples, 0.01%; +0.00%)</title><rect x="701.9" y="485" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="704.87" y="495.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (6 samples, 0.01%; +0.01%)</title><rect x="808.4" y="325" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="811.36" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (7 samples, 0.01%; 0.00%)</title><rect x="480.7" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="483.70" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%; -0.00%)</title><rect x="553.4" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="556.35" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (9 samples, 0.02%; +0.00%)</title><rect x="91.8" y="437" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="94.77" y="447.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (16 samples, 0.03%; 0.00%)</title><rect x="857.3" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.29" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (341 samples, 0.72%; -0.00%)</title><rect x="33.2" y="485" width="8.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="36.15" y="495.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (245 samples, 0.51%; -0.01%)</title><rect x="95.0" y="437" width="6.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="97.97" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (20 samples, 0.04%; -0.00%)</title><rect x="617.3" y="469" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="620.30" y="479.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (177 samples, 0.37%; +0.00%)</title><rect x="493.8" y="229" width="4.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="496.84" y="239.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (2,282 samples, 4.79%; +0.07%)</title><rect x="993.1" y="325" width="56.5" height="15.0" fill="rgb(255,134,134)" rx="2" ry="2" />
<text  x="996.07" y="335.5" >servi..</text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (1,114 samples, 2.34%; -0.03%)</title><rect x="877.4" y="373" width="27.6" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="880.36" y="383.5" >_..</text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (926 samples, 1.95%; 0.00%)</title><rect x="878.3" y="357" width="23.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="881.31" y="367.5" >c..</text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (37 samples, 0.08%; +0.01%)</title><rect x="730.2" y="309" width="0.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="733.18" y="319.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (663 samples, 1.39%; +0.01%)</title><rect x="779.3" y="261" width="16.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="782.28" y="271.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (6 samples, 0.01%; -0.01%)</title><rect x="665.5" y="469" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="668.54" y="479.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (11,529 samples, 24.22%; +0.00%)</title><rect x="856.7" y="501" width="285.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="859.74" y="511.5" >seastar::lambda_task&lt;seastar::executio..</text>
</g>
<g >
<title>operator new (55 samples, 0.12%; +0.00%)</title><rect x="847.4" y="437" width="1.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="850.42" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (11 samples, 0.02%; -0.01%)</title><rect x="1143.2" y="501" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1146.15" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (8 samples, 0.02%; +0.01%)</title><rect x="401.5" y="277" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="404.51" y="287.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (5 samples, 0.01%; +0.00%)</title><rect x="22.1" y="517" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="25.15" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (8 samples, 0.02%; +0.00%)</title><rect x="740.5" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="743.49" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (29 samples, 0.06%; -0.00%)</title><rect x="20.2" y="437" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="23.19" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (59 samples, 0.12%; -0.01%)</title><rect x="788.3" y="133" width="1.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="791.33" y="143.5" ></text>
</g>
<g >
<title>auth::resource::resource (103 samples, 0.22%; -0.01%)</title><rect x="759.4" y="389" width="2.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="762.35" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (6 samples, 0.01%; +0.00%)</title><rect x="1170.4" y="485" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1173.44" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (15 samples, 0.03%; +0.02%)</title><rect x="975.4" y="357" width="0.4" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="978.42" y="367.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (9 samples, 0.02%; +0.00%)</title><rect x="670.0" y="453" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="673.00" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (284 samples, 0.60%; +0.00%)</title><rect x="390.3" y="229" width="7.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="393.30" y="239.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (47 samples, 0.10%; -0.01%)</title><rect x="231.1" y="165" width="1.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="234.10" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (8 samples, 0.02%; -0.01%)</title><rect x="1088.6" y="277" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1091.62" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (23 samples, 0.05%; +0.01%)</title><rect x="606.5" y="389" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="609.54" y="399.5" ></text>
</g>
<g >
<title>dht::tri_compare (10 samples, 0.02%; +0.01%)</title><rect x="1088.3" y="245" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1091.35" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (219 samples, 0.46%; +0.01%)</title><rect x="146.6" y="229" width="5.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="149.62" y="239.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (7 samples, 0.01%; +0.00%)</title><rect x="801.0" y="277" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="804.05" y="287.5" ></text>
</g>
<g >
<title>mutation_querier::consume (1,816 samples, 3.81%; -0.03%)</title><rect x="314.0" y="197" width="45.0" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="317.03" y="207.5" >muta..</text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (68 samples, 0.14%; +0.01%)</title><rect x="1006.5" y="277" width="1.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1009.48" y="287.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (2,942 samples, 6.18%; -0.00%)</title><rect x="976.9" y="357" width="72.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="979.91" y="367.5" >service:..</text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (40 samples, 0.08%; +0.00%)</title><rect x="492.8" y="213" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="495.77" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (41 samples, 0.09%; -0.01%)</title><rect x="310.8" y="165" width="1.0" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="313.81" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (160 samples, 0.34%; +0.00%)</title><rect x="242.2" y="245" width="4.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="245.20" y="255.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (323 samples, 0.68%; +0.01%)</title><rect x="389.4" y="261" width="8.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="392.36" y="271.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (16 samples, 0.03%; +0.00%)</title><rect x="736.2" y="309" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="739.15" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (24 samples, 0.05%; -0.00%)</title><rect x="250.4" y="277" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="253.36" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (60 samples, 0.13%; -0.00%)</title><rect x="638.4" y="469" width="1.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="641.42" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (83 samples, 0.17%; +0.01%)</title><rect x="984.3" y="309" width="2.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="987.29" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (7 samples, 0.01%; +0.01%)</title><rect x="1047.9" y="293" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1050.87" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (9 samples, 0.02%; +0.00%)</title><rect x="1164.1" y="453" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1167.12" y="463.5" ></text>
</g>
<g >
<title>operator new (85 samples, 0.18%; +0.00%)</title><rect x="995.6" y="261" width="2.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="998.60" y="271.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (8 samples, 0.02%; -0.00%)</title><rect x="726.6" y="389" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="729.56" y="399.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (69 samples, 0.14%; -0.00%)</title><rect x="273.3" y="309" width="1.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="276.26" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (142 samples, 0.30%; +0.01%)</title><rect x="397.9" y="261" width="3.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="400.89" y="271.5" ></text>
</g>
</g>
</svg>
