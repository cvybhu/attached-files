<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (5 samples, 0.01%; +0.00%)</title><rect x="239.9" y="197" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="242.93" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (7 samples, 0.01%; 0.00%)</title><rect x="1143.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.08" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (6 samples, 0.01%; +0.00%)</title><rect x="75.2" y="453" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="78.21" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (16 samples, 0.03%; +0.00%)</title><rect x="208.9" y="165" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="211.91" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (9 samples, 0.02%; -0.01%)</title><rect x="440.3" y="293" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="443.34" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="154.0" y="181" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="157.02" y="191.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (14 samples, 0.03%; +0.03%)</title><rect x="635.6" y="389" width="0.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="638.56" y="399.5" ></text>
</g>
<g >
<title>posix_memalign (36 samples, 0.08%; -0.00%)</title><rect x="195.6" y="85" width="0.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="198.56" y="95.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (60 samples, 0.13%; -0.00%)</title><rect x="122.7" y="293" width="1.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="125.73" y="303.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (6 samples, 0.01%; +0.01%)</title><rect x="547.2" y="325" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="550.25" y="335.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (107 samples, 0.23%; 0.00%)</title><rect x="706.8" y="469" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="709.79" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (6 samples, 0.01%; -0.01%)</title><rect x="810.7" y="261" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="813.70" y="271.5" ></text>
</g>
<g >
<title>operator delete (79 samples, 0.17%; -0.04%)</title><rect x="401.4" y="245" width="2.0" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="404.43" y="255.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (5 samples, 0.01%; -0.08%)</title><rect x="362.5" y="197" width="0.2" height="15.0" fill="rgb(110,110,255)" rx="2" ry="2" />
<text  x="365.53" y="207.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (6 samples, 0.01%; +0.01%)</title><rect x="985.2" y="309" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="988.19" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.06%; -0.02%)</title><rect x="98.6" y="373" width="0.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="101.63" y="383.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (13 samples, 0.03%; -0.02%)</title><rect x="54.1" y="469" width="0.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="57.07" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (12 samples, 0.03%; +0.01%)</title><rect x="599.6" y="437" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="602.56" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (13 samples, 0.03%; -0.06%)</title><rect x="530.8" y="421" width="0.3" height="15.0" fill="rgb(141,141,255)" rx="2" ry="2" />
<text  x="533.75" y="431.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (14 samples, 0.03%; -0.00%)</title><rect x="613.7" y="485" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="616.68" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (15 samples, 0.03%; +0.00%)</title><rect x="801.0" y="277" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="804.02" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (12 samples, 0.03%; -0.00%)</title><rect x="729.9" y="293" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="732.86" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (134 samples, 0.28%; +0.04%)</title><rect x="620.5" y="485" width="3.3" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="623.46" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1,754 samples, 3.72%; -0.02%)</title><rect x="166.2" y="181" width="43.9" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="169.22" y="191.5" >muta..</text>
</g>
<g >
<title>operator delete (53 samples, 0.11%; +0.05%)</title><rect x="605.4" y="373" width="1.4" height="15.0" fill="rgb(255,152,152)" rx="2" ry="2" />
<text  x="608.44" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (307 samples, 0.65%; -0.01%)</title><rect x="393.1" y="261" width="7.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="396.05" y="271.5" ></text>
</g>
<g >
<title>__start_context (300 samples, 0.64%; 0.00%)</title><rect x="16.4" y="613" width="7.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.37" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (13 samples, 0.03%; +0.01%)</title><rect x="581.4" y="389" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="584.39" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (10 samples, 0.02%; +0.00%)</title><rect x="213.4" y="117" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="216.39" y="127.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (12 samples, 0.03%; +0.02%)</title><rect x="803.0" y="277" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="805.97" y="287.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (28 samples, 0.06%; 0.00%)</title><rect x="836.1" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="839.14" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (43 samples, 0.09%; +0.01%)</title><rect x="1134.4" y="421" width="1.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1137.39" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (19 samples, 0.04%; +0.03%)</title><rect x="881.7" y="373" width="0.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="884.73" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (20 samples, 0.04%; +0.03%)</title><rect x="933.7" y="405" width="0.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="936.72" y="415.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (7 samples, 0.01%; +0.01%)</title><rect x="504.7" y="293" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="507.73" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::future (9 samples, 0.02%; +0.01%)</title><rect x="975.6" y="357" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="978.64" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (9 samples, 0.02%; -0.00%)</title><rect x="1119.5" y="389" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1122.51" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (11 samples, 0.02%; +0.01%)</title><rect x="1072.8" y="325" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1075.82" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (6 samples, 0.01%; 0.00%)</title><rect x="21.4" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.37" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (224 samples, 0.47%; -0.00%)</title><rect x="148.6" y="229" width="5.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="151.60" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,889 samples, 10.36%; 0.00%)</title><rect x="288.8" y="357" width="122.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="291.85" y="367.5" >flat_mutation_r..</text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (20 samples, 0.04%; -0.00%)</title><rect x="67.2" y="405" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="70.21" y="415.5" ></text>
</g>
<g >
<title>operator new (53 samples, 0.11%; -0.01%)</title><rect x="850.6" y="437" width="1.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="853.61" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (192 samples, 0.41%; -0.01%)</title><rect x="634.0" y="469" width="4.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="637.01" y="479.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (705 samples, 1.49%; +0.00%)</title><rect x="779.2" y="261" width="17.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="782.20" y="271.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (61 samples, 0.13%; +0.00%)</title><rect x="494.6" y="213" width="1.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="497.61" y="223.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (8 samples, 0.02%; -0.01%)</title><rect x="738.5" y="357" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="741.51" y="367.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (701 samples, 1.48%; -0.02%)</title><rect x="779.3" y="245" width="17.5" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="782.30" y="255.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,308 samples, 9.13%; +0.01%)</title><rect x="141.6" y="293" width="107.7" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="144.57" y="303.5" >seastar::do_u..</text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (11 samples, 0.02%; +0.02%)</title><rect x="944.3" y="405" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="947.30" y="415.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (5 samples, 0.01%; +0.01%)</title><rect x="875.8" y="421" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="878.78" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (26 samples, 0.06%; +0.03%)</title><rect x="572.7" y="373" width="0.6" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="575.67" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.01%)</title><rect x="158.3" y="229" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="161.30" y="239.5" ></text>
</g>
<g >
<title>query_state::query_state (175 samples, 0.37%; +0.01%)</title><rect x="584.3" y="437" width="4.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="587.27" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (15 samples, 0.03%; +0.02%)</title><rect x="619.7" y="485" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="622.73" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.01%; +0.00%)</title><rect x="772.5" y="325" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="775.45" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::query_options, false&gt;::make&lt;cql3::query_options&amp;&gt; (5 samples, 0.01%; 0.00%)</title><rect x="23.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.65" y="511.5" ></text>
</g>
<g >
<title>__tls_init (18 samples, 0.04%; +0.02%)</title><rect x="143.4" y="245" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="146.40" y="255.5" ></text>
</g>
<g >
<title>row_tombstone::apply (27 samples, 0.06%; +0.01%)</title><rect x="385.3" y="213" width="0.6" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="388.25" y="223.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (554 samples, 1.17%; -0.00%)</title><rect x="488.9" y="277" width="13.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="491.93" y="287.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (55 samples, 0.12%; +0.01%)</title><rect x="1175.1" y="517" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1178.08" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (183 samples, 0.39%; +0.01%)</title><rect x="243.7" y="261" width="4.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="246.66" y="271.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (160 samples, 0.34%; -0.02%)</title><rect x="913.3" y="341" width="4.0" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="916.30" y="351.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (463 samples, 0.98%; -0.01%)</title><rect x="32.8" y="501" width="11.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="35.85" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (624 samples, 1.32%; -0.04%)</title><rect x="546.6" y="341" width="15.6" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="549.62" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (6 samples, 0.01%; -0.01%)</title><rect x="489.7" y="261" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="492.73" y="271.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (67 samples, 0.14%; 0.00%)</title><rect x="784.5" y="213" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="787.48" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (10 samples, 0.02%; -0.00%)</title><rect x="538.7" y="293" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="541.70" y="303.5" ></text>
</g>
<g >
<title>table::estimate_read_memory_cost (8 samples, 0.02%; -0.00%)</title><rect x="1039.7" y="261" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1042.70" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (48 samples, 0.10%; +0.02%)</title><rect x="1159.5" y="453" width="1.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1162.51" y="463.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (22 samples, 0.05%; +0.01%)</title><rect x="123.6" y="261" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="126.58" y="271.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (207 samples, 0.44%; +0.01%)</title><rect x="441.7" y="309" width="5.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="444.72" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (32 samples, 0.07%; +0.03%)</title><rect x="595.3" y="437" width="0.8" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="598.26" y="447.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (662 samples, 1.40%; -0.01%)</title><rect x="124.3" y="293" width="16.5" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="127.28" y="303.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (664 samples, 1.41%; -0.03%)</title><rect x="1076.6" y="309" width="16.6" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1079.62" y="319.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (31 samples, 0.07%; +0.03%)</title><rect x="167.8" y="133" width="0.8" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="170.79" y="143.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (13 samples, 0.03%; +0.02%)</title><rect x="608.1" y="421" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="611.09" y="431.5" ></text>
</g>
<g >
<title>query_result_builder::consume (1,817 samples, 3.85%; -0.00%)</title><rect x="317.2" y="213" width="45.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="320.24" y="223.5" >quer..</text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (6 samples, 0.01%; +0.00%)</title><rect x="976.1" y="357" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="979.14" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (17 samples, 0.04%; +0.00%)</title><rect x="771.5" y="277" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="774.48" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (14 samples, 0.03%; +0.03%)</title><rect x="943.7" y="389" width="0.3" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="946.70" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (10 samples, 0.02%; -0.01%)</title><rect x="299.9" y="245" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="302.94" y="255.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (58 samples, 0.12%; +0.00%)</title><rect x="752.6" y="341" width="1.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="755.58" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (21 samples, 0.04%; -0.01%)</title><rect x="796.2" y="213" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="799.20" y="223.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.05%; 0.00%)</title><rect x="1140.1" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.13" y="447.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (7 samples, 0.01%; +0.01%)</title><rect x="1168.4" y="469" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1171.40" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (12 samples, 0.03%; +0.01%)</title><rect x="926.2" y="405" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="929.15" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (9 samples, 0.02%; 0.00%)</title><rect x="17.5" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.52" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (465 samples, 0.98%; -0.06%)</title><rect x="230.0" y="229" width="11.7" height="15.0" fill="rgb(136,136,255)" rx="2" ry="2" />
<text  x="233.03" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (6 samples, 0.01%; +0.00%)</title><rect x="1130.3" y="389" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1133.29" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (95 samples, 0.20%; +0.00%)</title><rect x="650.6" y="485" width="2.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="653.63" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (10 samples, 0.02%; 0.00%)</title><rect x="860.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.39" y="399.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (12 samples, 0.03%; -0.00%)</title><rect x="784.2" y="213" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="787.18" y="223.5" ></text>
</g>
<g >
<title>operator delete (14 samples, 0.03%; -0.01%)</title><rect x="46.1" y="485" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="49.07" y="495.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (9 samples, 0.02%; 0.00%)</title><rect x="590.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="593.21" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (30 samples, 0.06%; -0.01%)</title><rect x="509.5" y="309" width="0.8" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="512.50" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (5 samples, 0.01%; +0.00%)</title><rect x="596.2" y="421" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="599.24" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (11 samples, 0.02%; -0.00%)</title><rect x="1031.3" y="213" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1034.31" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (20 samples, 0.04%; +0.02%)</title><rect x="427.8" y="341" width="0.5" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="430.85" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (347 samples, 0.74%; +0.01%)</title><rect x="787.1" y="181" width="8.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="790.13" y="191.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (17 samples, 0.04%; -0.01%)</title><rect x="1117.1" y="357" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1120.09" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (139 samples, 0.29%; -0.01%)</title><rect x="668.2" y="485" width="3.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="671.25" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (9 samples, 0.02%; +0.01%)</title><rect x="34.1" y="485" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="37.12" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.06%; -0.02%)</title><rect x="596.7" y="405" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="599.74" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="703.1" y="501" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="706.14" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (13 samples, 0.03%; +0.01%)</title><rect x="749.0" y="357" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="752.01" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.01%)</title><rect x="781.4" y="197" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="784.40" y="207.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (43 samples, 0.09%; -0.04%)</title><rect x="587.2" y="389" width="1.1" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="590.19" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (40 samples, 0.08%; +0.01%)</title><rect x="1156.4" y="405" width="1.0" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1159.36" y="415.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (12 samples, 0.03%; -0.00%)</title><rect x="417.2" y="421" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="420.25" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (11 samples, 0.02%; +0.00%)</title><rect x="976.8" y="357" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="979.77" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (21 samples, 0.04%; +0.02%)</title><rect x="927.4" y="405" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="930.35" y="415.5" ></text>
</g>
<g >
<title>utils::array_search_gt (16 samples, 0.03%; +0.02%)</title><rect x="463.1" y="277" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="466.09" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (21 samples, 0.04%; +0.02%)</title><rect x="1023.2" y="165" width="0.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1026.18" y="175.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (11 samples, 0.02%; +0.01%)</title><rect x="641.6" y="453" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="644.58" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (105 samples, 0.22%; +0.00%)</title><rect x="842.1" y="389" width="2.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="845.07" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.02%; -0.01%)</title><rect x="94.2" y="421" width="0.3" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="97.23" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (5 samples, 0.01%; +0.01%)</title><rect x="422.0" y="357" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="425.05" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (18 samples, 0.04%; +0.03%)</title><rect x="1137.7" y="421" width="0.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1140.73" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (27 samples, 0.06%; +0.00%)</title><rect x="404.2" y="229" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="407.17" y="239.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (5 samples, 0.01%; 0.00%)</title><rect x="1140.2" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.16" y="223.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (19 samples, 0.04%; -0.01%)</title><rect x="209.4" y="165" width="0.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="212.36" y="175.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%; +0.01%)</title><rect x="48.1" y="501" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="51.12" y="511.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (9 samples, 0.02%; +0.01%)</title><rect x="843.7" y="325" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="846.74" y="335.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (44 samples, 0.09%; -0.00%)</title><rect x="596.4" y="437" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="599.44" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (6 samples, 0.01%; +0.01%)</title><rect x="800.5" y="277" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="803.52" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (32 samples, 0.07%; 0.00%)</title><rect x="663.1" y="453" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="666.05" y="463.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (16 samples, 0.03%; +0.00%)</title><rect x="388.2" y="229" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="391.23" y="239.5" ></text>
</g>
<g >
<title>operator new (47 samples, 0.10%; -0.00%)</title><rect x="1157.6" y="437" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1160.56" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (10 samples, 0.02%; -0.02%)</title><rect x="1113.8" y="373" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1116.81" y="383.5" ></text>
</g>
<g >
<title>database::find_schema (64 samples, 0.14%; +0.00%)</title><rect x="814.3" y="357" width="1.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="817.27" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.00%)</title><rect x="652.8" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="655.78" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_digest_requests (9 samples, 0.02%; 0.00%)</title><rect x="1049.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1052.55" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (18 samples, 0.04%; 0.00%)</title><rect x="1041.9" y="245" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1044.88" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (24 samples, 0.05%; +0.00%)</title><rect x="933.1" y="405" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="936.12" y="415.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (12 samples, 0.03%; +0.01%)</title><rect x="795.9" y="197" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="798.85" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (14 samples, 0.03%; +0.01%)</title><rect x="784.6" y="197" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="787.55" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (13 samples, 0.03%; +0.02%)</title><rect x="626.7" y="485" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="629.68" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (5 samples, 0.01%; 0.00%)</title><rect x="24.0" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.97" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (21 samples, 0.04%; -0.04%)</title><rect x="147.1" y="229" width="0.5" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="150.12" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (5 samples, 0.01%; +0.00%)</title><rect x="754.2" y="373" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="757.18" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (566 samples, 1.20%; -0.00%)</title><rect x="229.5" y="261" width="14.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="232.51" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (5 samples, 0.01%; -0.01%)</title><rect x="539.0" y="389" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="541.97" y="399.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (111 samples, 0.24%; +0.00%)</title><rect x="735.6" y="325" width="2.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="738.61" y="335.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (5 samples, 0.01%; +0.01%)</title><rect x="1133.9" y="421" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1136.89" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (12 samples, 0.03%; -0.00%)</title><rect x="693.6" y="437" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="696.64" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (7 samples, 0.01%; -0.01%)</title><rect x="553.8" y="293" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="556.85" y="303.5" ></text>
</g>
<g >
<title>schema::column_at (15 samples, 0.03%; -0.00%)</title><rect x="206.9" y="117" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="209.86" y="127.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (6 samples, 0.01%; +0.01%)</title><rect x="428.6" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="431.62" y="351.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (8 samples, 0.02%; +0.00%)</title><rect x="718.1" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="721.11" y="319.5" ></text>
</g>
<g >
<title>row::row (1,354 samples, 2.87%; +0.00%)</title><rect x="167.3" y="149" width="33.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="170.30" y="159.5" >ro..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::operator== (5 samples, 0.01%; +0.00%)</title><rect x="791.2" y="149" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="794.18" y="159.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (35 samples, 0.07%; 0.00%)</title><rect x="20.2" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.25" y="319.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (91 samples, 0.19%; +0.01%)</title><rect x="232.3" y="197" width="2.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="235.26" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (56 samples, 0.12%; 0.00%)</title><rect x="1156.0" y="437" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1158.96" y="447.5" ></text>
</g>
<g >
<title>posix_memalign (11 samples, 0.02%; +0.01%)</title><rect x="187.7" y="69" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="190.67" y="79.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (11 samples, 0.02%; -0.10%)</title><rect x="232.0" y="197" width="0.3" height="15.0" fill="rgb(81,81,255)" rx="2" ry="2" />
<text  x="234.98" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (101 samples, 0.21%; +0.01%)</title><rect x="847.7" y="373" width="2.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="850.74" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; -0.01%)</title><rect x="896.6" y="341" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="899.63" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (35 samples, 0.07%; +0.01%)</title><rect x="565.7" y="357" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="568.72" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (11 samples, 0.02%; +0.02%)</title><rect x="255.6" y="261" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="258.63" y="271.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (5 samples, 0.01%; +0.01%)</title><rect x="1095.6" y="293" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1098.59" y="303.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (35 samples, 0.07%; +0.00%)</title><rect x="498.3" y="197" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="501.28" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (13 samples, 0.03%; -0.00%)</title><rect x="437.3" y="261" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="440.27" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (12 samples, 0.03%; -0.00%)</title><rect x="310.1" y="165" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="313.07" y="175.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,357 samples, 9.23%; +0.02%)</title><rect x="297.2" y="293" width="108.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="300.22" y="303.5" >seastar::repe..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (5 samples, 0.01%; +0.00%)</title><rect x="779.1" y="261" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="782.08" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (8 samples, 0.02%; +0.00%)</title><rect x="1173.4" y="501" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1176.43" y="511.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (6 samples, 0.01%; -0.01%)</title><rect x="522.2" y="245" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="525.18" y="255.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (7 samples, 0.01%; 0.00%)</title><rect x="676.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="679.75" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (18 samples, 0.04%; -0.03%)</title><rect x="757.5" y="357" width="0.4" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="760.46" y="367.5" ></text>
</g>
<g >
<title>database::find_uuid (245 samples, 0.52%; +0.01%)</title><rect x="748.3" y="389" width="6.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="751.28" y="399.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (17 samples, 0.04%; +0.03%)</title><rect x="780.4" y="229" width="0.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="783.43" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (9 samples, 0.02%; +0.01%)</title><rect x="1055.9" y="309" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1058.90" y="319.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (83 samples, 0.18%; -0.02%)</title><rect x="411.4" y="373" width="2.0" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="414.37" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (17 samples, 0.04%; +0.03%)</title><rect x="97.9" y="405" width="0.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="100.88" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (10 samples, 0.02%; -0.09%)</title><rect x="987.6" y="261" width="0.2" height="15.0" fill="rgb(102,102,255)" rx="2" ry="2" />
<text  x="990.59" y="271.5" ></text>
</g>
<g >
<title>local_schema_registry (11 samples, 0.02%; +0.02%)</title><rect x="968.1" y="357" width="0.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="971.07" y="367.5" ></text>
</g>
<g >
<title>table::as_mutation_source (109 samples, 0.23%; -0.01%)</title><rect x="610.1" y="437" width="2.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="613.14" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; -0.00%)</title><rect x="1133.6" y="421" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1136.56" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (6 samples, 0.01%; +0.00%)</title><rect x="676.7" y="453" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="679.75" y="463.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (8 samples, 0.02%; +0.00%)</title><rect x="427.5" y="341" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="430.50" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (20 samples, 0.04%; +0.02%)</title><rect x="433.4" y="261" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="436.42" y="271.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (30 samples, 0.06%; -0.04%)</title><rect x="409.5" y="261" width="0.7" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="412.47" y="271.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (84 samples, 0.18%; -0.01%)</title><rect x="302.1" y="245" width="2.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="305.09" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (3,181 samples, 6.74%; -0.00%)</title><rect x="745.6" y="421" width="79.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="748.56" y="431.5" >cql3::sta..</text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (22 samples, 0.05%; -0.01%)</title><rect x="559.3" y="293" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="562.32" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (85 samples, 0.18%; +0.00%)</title><rect x="638.8" y="469" width="2.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="641.81" y="479.5" ></text>
</g>
<g >
<title>db::block_for (6 samples, 0.01%; 0.00%)</title><rect x="1061.8" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1064.85" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (15 samples, 0.03%; +0.01%)</title><rect x="440.9" y="277" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="443.92" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (31 samples, 0.07%; +0.00%)</title><rect x="130.7" y="245" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="133.68" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (39 samples, 0.08%; -0.03%)</title><rect x="752.9" y="325" width="1.0" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="755.93" y="335.5" ></text>
</g>
<g >
<title>reader_permit::consume (6 samples, 0.01%; +0.01%)</title><rect x="157.2" y="181" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="160.17" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; -0.01%)</title><rect x="653.8" y="469" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="656.78" y="479.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (68 samples, 0.14%; 0.00%)</title><rect x="294.5" y="277" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="297.55" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (47 samples, 0.10%; 0.00%)</title><rect x="747.0" y="357" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="750.03" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.02%; -0.02%)</title><rect x="476.5" y="213" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="479.51" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (12 samples, 0.03%; 0.00%)</title><rect x="24.0" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.97" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (67 samples, 0.14%; +0.00%)</title><rect x="853.2" y="469" width="1.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="856.21" y="479.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (24 samples, 0.05%; -0.01%)</title><rect x="1023.1" y="181" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1026.11" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (23 samples, 0.05%; 0.00%)</title><rect x="661.7" y="453" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="664.73" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (12 samples, 0.03%; -0.01%)</title><rect x="617.9" y="485" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="620.93" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (11 samples, 0.02%; +0.01%)</title><rect x="1032.1" y="229" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1035.06" y="239.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (21 samples, 0.04%; -0.01%)</title><rect x="788.2" y="133" width="0.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="791.23" y="143.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="1119.7" y="405" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1122.74" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.02%; +0.00%)</title><rect x="475.0" y="181" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="477.99" y="191.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (11 samples, 0.02%; +0.00%)</title><rect x="1030.3" y="197" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1033.26" y="207.5" ></text>
</g>
<g >
<title>database::find_column_family (40 samples, 0.08%; -0.00%)</title><rect x="1014.2" y="245" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1017.21" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; +0.01%)</title><rect x="1030.1" y="197" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1033.08" y="207.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (33 samples, 0.07%; +0.01%)</title><rect x="475.6" y="197" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="478.59" y="207.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (18 samples, 0.04%; +0.01%)</title><rect x="214.5" y="117" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="217.46" y="127.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (15 samples, 0.03%; +0.02%)</title><rect x="78.3" y="453" width="0.3" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="81.26" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%; +0.00%)</title><rect x="550.0" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="552.97" y="319.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (33 samples, 0.07%; -0.00%)</title><rect x="1139.3" y="325" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1142.31" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (199 samples, 0.42%; +0.00%)</title><rect x="733.5" y="341" width="5.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="736.51" y="351.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (6 samples, 0.01%; +0.01%)</title><rect x="1047.3" y="277" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1050.25" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (6 samples, 0.01%; 0.00%)</title><rect x="1174.5" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1177.45" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (15 samples, 0.03%; +0.00%)</title><rect x="166.9" y="149" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="169.92" y="159.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (6 samples, 0.01%; -0.00%)</title><rect x="1042.5" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1045.50" y="287.5" ></text>
</g>
<g >
<title>__tls_init (10 samples, 0.02%; -0.00%)</title><rect x="490.7" y="245" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="493.68" y="255.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (29 samples, 0.06%; +0.02%)</title><rect x="731.6" y="373" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="734.59" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (14 samples, 0.03%; -0.00%)</title><rect x="562.9" y="357" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="565.92" y="367.5" ></text>
</g>
<g >
<title>reader_permit::consume (13 samples, 0.03%; +0.00%)</title><rect x="209.5" y="149" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="212.51" y="159.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (67 samples, 0.14%; -0.02%)</title><rect x="362.9" y="213" width="1.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="365.93" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (13 samples, 0.03%; 0.00%)</title><rect x="256.5" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="259.50" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; -0.01%)</title><rect x="452.5" y="293" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="455.54" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (7 samples, 0.01%; +0.01%)</title><rect x="446.0" y="277" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="448.99" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="957.2" y="389" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="960.19" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (6 samples, 0.01%; +0.01%)</title><rect x="1028.2" y="165" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1031.23" y="175.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (9 samples, 0.02%; -0.00%)</title><rect x="824.2" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="827.22" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (7 samples, 0.01%; 0.00%)</title><rect x="24.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.10" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (26 samples, 0.06%; +0.01%)</title><rect x="820.0" y="293" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="823.05" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (7 samples, 0.01%; +0.01%)</title><rect x="1114.2" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1117.21" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (30 samples, 0.06%; -0.03%)</title><rect x="1158.8" y="453" width="0.7" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1161.76" y="463.5" ></text>
</g>
<g >
<title>operator new (158 samples, 0.33%; -0.00%)</title><rect x="1015.3" y="245" width="4.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1018.33" y="255.5" ></text>
</g>
<g >
<title>operator new (41 samples, 0.09%; +0.00%)</title><rect x="207.8" y="165" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="210.79" y="175.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (39 samples, 0.08%; -0.01%)</title><rect x="326.4" y="181" width="1.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="329.44" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (11 samples, 0.02%; -0.00%)</title><rect x="674.1" y="453" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="677.10" y="463.5" ></text>
</g>
<g >
<title>database::query (133 samples, 0.28%; -0.01%)</title><rect x="44.5" y="501" width="3.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="47.47" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (12 samples, 0.03%; -0.02%)</title><rect x="298.8" y="261" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="301.84" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (6 samples, 0.01%; -0.01%)</title><rect x="1107.8" y="373" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1110.79" y="383.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (57 samples, 0.12%; -0.00%)</title><rect x="302.8" y="229" width="1.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="305.77" y="239.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (73 samples, 0.15%; -0.01%)</title><rect x="589.5" y="437" width="1.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="592.49" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; 0.00%)</title><rect x="691.6" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="694.60" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (9 samples, 0.02%; -0.04%)</title><rect x="111.5" y="373" width="0.3" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="114.53" y="383.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (33 samples, 0.07%; -0.02%)</title><rect x="564.5" y="373" width="0.8" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="567.49" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="933.6" y="389" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="936.60" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (18 samples, 0.04%; 0.00%)</title><rect x="936.7" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="939.75" y="351.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (6 samples, 0.01%; +0.00%)</title><rect x="195.1" y="85" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="198.09" y="95.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (330 samples, 0.70%; +0.01%)</title><rect x="552.7" y="309" width="8.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="555.72" y="319.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (27 samples, 0.06%; +0.01%)</title><rect x="818.8" y="293" width="0.7" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="821.82" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (162 samples, 0.34%; -0.01%)</title><rect x="578.1" y="421" width="4.0" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="581.09" y="431.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (7 samples, 0.01%; +0.01%)</title><rect x="594.9" y="421" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="597.86" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (14 samples, 0.03%; -0.00%)</title><rect x="779.7" y="229" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="782.68" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (17 samples, 0.04%; +0.00%)</title><rect x="769.4" y="277" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="772.43" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; +0.01%)</title><rect x="867.5" y="469" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="870.49" y="479.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (5 samples, 0.01%; +0.01%)</title><rect x="766.3" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="769.33" y="351.5" ></text>
</g>
<g >
<title>operator new (67 samples, 0.14%; -0.00%)</title><rect x="1036.3" y="261" width="1.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1039.25" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (11 samples, 0.02%; +0.00%)</title><rect x="636.0" y="389" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="639.01" y="399.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (17 samples, 0.04%; +0.01%)</title><rect x="550.3" y="309" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="553.32" y="319.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (58 samples, 0.12%; 0.00%)</title><rect x="607.9" y="437" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="610.94" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (16 samples, 0.03%; -0.01%)</title><rect x="137.3" y="245" width="0.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="140.30" y="255.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (312 samples, 0.66%; -0.00%)</title><rect x="469.4" y="245" width="7.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="472.41" y="255.5" ></text>
</g>
<g >
<title>table::query (21,317 samples, 45.15%; +0.14%)</title><rect x="80.6" y="453" width="532.8" height="15.0" fill="rgb(255,39,39)" rx="2" ry="2" />
<text  x="83.56" y="463.5" >table::query</text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (23 samples, 0.05%; 0.00%)</title><rect x="1175.7" y="469" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1178.73" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.05%; -0.00%)</title><rect x="1140.1" y="389" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1143.13" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; 0.00%)</title><rect x="678.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="681.95" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (9 samples, 0.02%; +0.00%)</title><rect x="19.7" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="22.72" y="335.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (91 samples, 0.19%; +0.01%)</title><rect x="308.4" y="181" width="2.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="311.37" y="191.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (116 samples, 0.25%; +0.03%)</title><rect x="356.3" y="165" width="2.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="359.26" y="175.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (10 samples, 0.02%; +0.00%)</title><rect x="861.4" y="341" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="864.44" y="351.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (57 samples, 0.12%; 0.00%)</title><rect x="17.5" y="373" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.47" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (30 samples, 0.06%; +0.01%)</title><rect x="538.2" y="309" width="0.8" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="541.22" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (40 samples, 0.08%; -0.00%)</title><rect x="399.0" y="213" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="402.00" y="223.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (38 samples, 0.08%; -0.00%)</title><rect x="195.5" y="101" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="198.51" y="111.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.06%; 0.00%)</title><rect x="522.5" y="245" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="525.53" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (5 samples, 0.01%; +0.00%)</title><rect x="852.0" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="855.01" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6 samples, 0.01%; -0.02%)</title><rect x="736.8" y="261" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="739.79" y="271.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (37 samples, 0.08%; +0.00%)</title><rect x="381.8" y="165" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="384.78" y="175.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (298 samples, 0.63%; +0.00%)</title><rect x="574.7" y="437" width="7.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="577.69" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (40 samples, 0.08%; -0.01%)</title><rect x="215.8" y="181" width="1.0" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="218.84" y="191.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (176 samples, 0.37%; 0.00%)</title><rect x="520.3" y="309" width="4.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="523.30" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="245.4" y="213" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="248.41" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (8 samples, 0.02%; 0.00%)</title><rect x="17.5" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.52" y="287.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (9 samples, 0.02%; +0.01%)</title><rect x="317.0" y="213" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="320.02" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (35 samples, 0.07%; -0.00%)</title><rect x="502.8" y="277" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="505.78" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (233 samples, 0.49%; +0.01%)</title><rect x="938.4" y="405" width="5.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="941.42" y="415.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.03%; +0.00%)</title><rect x="94.1" y="437" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="97.13" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (19 samples, 0.04%; +0.01%)</title><rect x="551.4" y="277" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="554.42" y="287.5" ></text>
</g>
<g >
<title>std::type_info::operator== (7 samples, 0.01%; +0.01%)</title><rect x="1041.2" y="261" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1044.20" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (6 samples, 0.01%; +0.00%)</title><rect x="925.2" y="389" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="928.23" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (6 samples, 0.01%; -0.01%)</title><rect x="262.5" y="325" width="0.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="265.45" y="335.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (11 samples, 0.02%; -0.00%)</title><rect x="847.0" y="389" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="850.02" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="594.4" y="437" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="597.36" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; -0.01%)</title><rect x="901.1" y="373" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="904.11" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (5 samples, 0.01%; 0.00%)</title><rect x="24.0" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.97" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (6 samples, 0.01%; +0.01%)</title><rect x="446.9" y="309" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="449.89" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,908 samples, 10.40%; -0.00%)</title><rect x="288.6" y="373" width="122.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="291.65" y="383.5" >flat_mutation_r..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (149 samples, 0.32%; +0.01%)</title><rect x="203.1" y="117" width="3.7" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="206.09" y="127.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (448 samples, 0.95%; -0.00%)</title><rect x="63.9" y="453" width="11.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="66.91" y="463.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (26 samples, 0.06%; -0.00%)</title><rect x="308.8" y="165" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="311.79" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; -0.00%)</title><rect x="568.1" y="341" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="571.07" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (21 samples, 0.04%; +0.01%)</title><rect x="68.7" y="389" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="71.66" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (13 samples, 0.03%; 0.00%)</title><rect x="594.8" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="597.76" y="447.5" ></text>
</g>
<g >
<title>make_combined_reader (5 samples, 0.01%; -0.00%)</title><rect x="421.3" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="424.35" y="367.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (145 samples, 0.31%; -0.02%)</title><rect x="67.7" y="405" width="3.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="70.71" y="415.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (343 samples, 0.73%; -0.03%)</title><rect x="468.6" y="261" width="8.6" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="471.64" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (14 samples, 0.03%; +0.01%)</title><rect x="42.8" y="437" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="45.84" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (5 samples, 0.01%; 0.00%)</title><rect x="19.1" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.10" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (62 samples, 0.13%; +0.01%)</title><rect x="408.7" y="277" width="1.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="411.67" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (530 samples, 1.12%; -0.00%)</title><rect x="1150.9" y="485" width="13.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1153.93" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (57 samples, 0.12%; 0.00%)</title><rect x="17.5" y="341" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.47" y="351.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; -0.01%)</title><rect x="508.8" y="325" width="0.7" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="511.75" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (19 samples, 0.04%; -0.01%)</title><rect x="156.3" y="181" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="159.35" y="191.5" ></text>
</g>
<g >
<title>schema::column_at (81 samples, 0.17%; +0.06%)</title><rect x="204.7" y="101" width="2.0" height="15.0" fill="rgb(255,133,133)" rx="2" ry="2" />
<text  x="207.66" y="111.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (43 samples, 0.09%; +0.03%)</title><rect x="272.2" y="293" width="1.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="275.18" y="303.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (5 samples, 0.01%; 0.00%)</title><rect x="24.0" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.97" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (29 samples, 0.06%; 0.00%)</title><rect x="822.6" y="309" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="825.57" y="319.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (5 samples, 0.01%; 0.00%)</title><rect x="24.0" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.97" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (74 samples, 0.16%; +0.02%)</title><rect x="478.7" y="325" width="1.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="481.71" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (19 samples, 0.04%; -0.00%)</title><rect x="1149.1" y="469" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1152.06" y="479.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (18 samples, 0.04%; +0.03%)</title><rect x="293.3" y="293" width="0.5" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="296.35" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (73 samples, 0.15%; -0.04%)</title><rect x="537.1" y="325" width="1.9" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="540.15" y="335.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (13 samples, 0.03%; +0.01%)</title><rect x="997.9" y="293" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1000.91" y="303.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (232 samples, 0.49%; +0.04%)</title><rect x="1067.0" y="325" width="5.8" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1069.97" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (44 samples, 0.09%; +0.00%)</title><rect x="577.0" y="421" width="1.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="579.99" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (154 samples, 0.33%; -0.01%)</title><rect x="716.5" y="373" width="3.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="719.49" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (31 samples, 0.07%; -0.05%)</title><rect x="195.7" y="69" width="0.8" height="15.0" fill="rgb(152,152,255)" rx="2" ry="2" />
<text  x="198.69" y="79.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.05%; 0.00%)</title><rect x="1140.1" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.13" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,255 samples, 9.01%; -0.00%)</title><rect x="142.3" y="277" width="106.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="145.30" y="287.5" >logalloc::all..</text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (10 samples, 0.02%; +0.02%)</title><rect x="504.5" y="293" width="0.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="507.48" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (124 samples, 0.26%; +0.00%)</title><rect x="1114.4" y="389" width="3.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1117.41" y="399.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (35 samples, 0.07%; 0.00%)</title><rect x="729.3" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="732.29" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (75 samples, 0.16%; +0.02%)</title><rect x="1053.5" y="309" width="1.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1056.45" y="319.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (6 samples, 0.01%; +0.00%)</title><rect x="557.9" y="277" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="560.92" y="287.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (118 samples, 0.25%; -0.05%)</title><rect x="310.7" y="181" width="2.9" height="15.0" fill="rgb(149,149,255)" rx="2" ry="2" />
<text  x="313.69" y="191.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (67 samples, 0.14%; +0.03%)</title><rect x="639.1" y="437" width="1.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="642.08" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (407 samples, 0.86%; +0.02%)</title><rect x="1063.6" y="341" width="10.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1066.57" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (26 samples, 0.06%; +0.00%)</title><rect x="799.6" y="245" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="802.62" y="255.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; +0.00%)</title><rect x="625.0" y="485" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="627.98" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (94 samples, 0.20%; +0.03%)</title><rect x="294.0" y="293" width="2.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="296.97" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (15 samples, 0.03%; -0.01%)</title><rect x="893.3" y="261" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="896.33" y="271.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (46 samples, 0.10%; +0.09%)</title><rect x="523.5" y="293" width="1.2" height="15.0" fill="rgb(255,97,97)" rx="2" ry="2" />
<text  x="526.50" y="303.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10 samples, 0.02%; -0.01%)</title><rect x="661.8" y="437" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="664.80" y="447.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (6 samples, 0.01%; +0.00%)</title><rect x="717.7" y="293" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="720.67" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (59 samples, 0.12%; -0.00%)</title><rect x="757.9" y="373" width="1.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="760.91" y="383.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (5 samples, 0.01%; 0.00%)</title><rect x="1140.2" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.16" y="287.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (52 samples, 0.11%; +0.01%)</title><rect x="1002.7" y="277" width="1.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1005.66" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_Optional_payload_base (10 samples, 0.02%; +0.01%)</title><rect x="292.0" y="293" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="295.05" y="303.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (266 samples, 0.56%; -0.00%)</title><rect x="16.9" y="501" width="6.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="19.95" y="511.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (202 samples, 0.43%; +0.01%)</title><rect x="740.5" y="421" width="5.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="743.51" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (5 samples, 0.01%; +0.00%)</title><rect x="894.7" y="309" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="897.68" y="319.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (185 samples, 0.39%; 0.00%)</title><rect x="680.1" y="469" width="4.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="683.10" y="479.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (6 samples, 0.01%; +0.00%)</title><rect x="329.0" y="181" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="331.96" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (2,729 samples, 5.78%; -0.03%)</title><rect x="158.5" y="245" width="68.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="161.50" y="255.5" >partiti..</text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (82 samples, 0.17%; +0.01%)</title><rect x="949.8" y="341" width="2.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="952.85" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; +0.01%)</title><rect x="611.7" y="373" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="614.74" y="383.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.01%; -0.01%)</title><rect x="909.5" y="325" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="912.50" y="335.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (51 samples, 0.11%; +0.02%)</title><rect x="507.1" y="293" width="1.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="510.11" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (25 samples, 0.05%; +0.00%)</title><rect x="346.0" y="149" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="348.96" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (31 samples, 0.07%; +0.01%)</title><rect x="482.3" y="277" width="0.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="485.31" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (10,789 samples, 22.85%; +0.04%)</title><rect x="869.4" y="453" width="269.7" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="872.39" y="463.5" >seastar::noncopyable_function&lt;seasta..</text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (5 samples, 0.01%; -0.00%)</title><rect x="857.7" y="469" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="860.71" y="479.5" ></text>
</g>
<g >
<title>operator new (83 samples, 0.18%; 0.00%)</title><rect x="1064.7" y="325" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1067.75" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (14 samples, 0.03%; +0.00%)</title><rect x="215.4" y="149" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="218.39" y="159.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.01%; 0.00%)</title><rect x="47.9" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.92" y="495.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (33 samples, 0.07%; -0.01%)</title><rect x="470.9" y="213" width="0.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="473.86" y="223.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (197 samples, 0.42%; +0.01%)</title><rect x="845.7" y="437" width="4.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="848.69" y="447.5" ></text>
</g>
<g >
<title>__dynamic_cast (33 samples, 0.07%; +0.04%)</title><rect x="875.0" y="421" width="0.8" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="877.96" y="431.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (7 samples, 0.01%; -0.01%)</title><rect x="517.7" y="277" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="520.65" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (20 samples, 0.04%; +0.01%)</title><rect x="610.6" y="373" width="0.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="613.59" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (6 samples, 0.01%; -0.03%)</title><rect x="239.5" y="213" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="242.53" y="223.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (16 samples, 0.03%; +0.01%)</title><rect x="689.2" y="469" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="692.22" y="479.5" ></text>
</g>
<g >
<title>operator new (34 samples, 0.07%; +0.00%)</title><rect x="240.6" y="181" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="243.58" y="191.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (11 samples, 0.02%; +0.02%)</title><rect x="783.5" y="197" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="786.50" y="207.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (11 samples, 0.02%; -0.02%)</title><rect x="315.4" y="181" width="0.3" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="318.39" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (45 samples, 0.10%; -0.01%)</title><rect x="785.0" y="197" width="1.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="788.03" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (441 samples, 0.93%; -0.01%)</title><rect x="491.7" y="261" width="11.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="494.73" y="271.5" ></text>
</g>
<g >
<title>make_combined_reader (664 samples, 1.41%; +0.02%)</title><rect x="430.5" y="325" width="16.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="433.52" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (22 samples, 0.05%; -0.00%)</title><rect x="813.1" y="357" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="816.10" y="367.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (636 samples, 1.35%; +0.00%)</title><rect x="1076.8" y="293" width="15.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1079.82" y="303.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (5 samples, 0.01%; 0.00%)</title><rect x="21.0" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.97" y="255.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::needs_filtering (5 samples, 0.01%; +0.01%)</title><rect x="638.4" y="453" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="641.36" y="463.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (5 samples, 0.01%; +0.01%)</title><rect x="791.3" y="165" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="794.30" y="175.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (542 samples, 1.15%; -0.01%)</title><rect x="464.1" y="309" width="13.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="467.14" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (28 samples, 0.06%; +0.01%)</title><rect x="134.7" y="245" width="0.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="137.73" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (163 samples, 0.35%; +0.01%)</title><rect x="406.5" y="309" width="4.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="409.52" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (16 samples, 0.03%; 0.00%)</title><rect x="221.6" y="133" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="224.63" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; 0.00%)</title><rect x="617.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="620.71" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (31 samples, 0.07%; 0.00%)</title><rect x="861.0" y="469" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.01" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (27 samples, 0.06%; -0.00%)</title><rect x="717.1" y="325" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="720.14" y="335.5" ></text>
</g>
<g >
<title>__tls_init (6 samples, 0.01%; 0.00%)</title><rect x="480.4" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="483.41" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (6 samples, 0.01%; +0.01%)</title><rect x="72.9" y="389" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="75.89" y="399.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (17 samples, 0.04%; 0.00%)</title><rect x="157.4" y="213" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="160.40" y="223.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (434 samples, 0.92%; +0.04%)</title><rect x="453.3" y="309" width="10.8" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="456.27" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (12 samples, 0.03%; +0.01%)</title><rect x="1073.1" y="325" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1076.10" y="335.5" ></text>
</g>
<g >
<title>operator delete (79 samples, 0.17%; +0.00%)</title><rect x="568.9" y="341" width="2.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="571.94" y="351.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (18 samples, 0.04%; +0.01%)</title><rect x="427.0" y="341" width="0.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="430.05" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (17 samples, 0.04%; +0.01%)</title><rect x="444.3" y="261" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="447.29" y="271.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (14 samples, 0.03%; +0.01%)</title><rect x="591.6" y="421" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="594.61" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (5 samples, 0.01%; 0.00%)</title><rect x="955.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="958.54" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (12 samples, 0.03%; 0.00%)</title><rect x="24.0" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.97" y="543.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (6 samples, 0.01%; -0.00%)</title><rect x="633.5" y="469" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="636.48" y="479.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (109 samples, 0.23%; +0.01%)</title><rect x="235.7" y="197" width="2.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="238.66" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (103 samples, 0.22%; +0.02%)</title><rect x="934.6" y="389" width="2.6" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="937.62" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (44 samples, 0.09%; 0.00%)</title><rect x="22.1" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.15" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="561.2" y="309" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="564.24" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (6 samples, 0.01%; -0.00%)</title><rect x="576.8" y="421" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="579.84" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (34 samples, 0.07%; -0.01%)</title><rect x="600.0" y="437" width="0.9" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="603.01" y="447.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (34 samples, 0.07%; +0.00%)</title><rect x="736.9" y="261" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="739.94" y="271.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (12 samples, 0.03%; +0.00%)</title><rect x="839.3" y="421" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="842.34" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (12 samples, 0.03%; +0.00%)</title><rect x="157.0" y="197" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="160.05" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (8 samples, 0.02%; +0.01%)</title><rect x="637.5" y="373" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="640.51" y="383.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10 samples, 0.02%; +0.01%)</title><rect x="671.1" y="453" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="674.15" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,397 samples, 7.20%; +0.02%)</title><rect x="304.2" y="245" width="84.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="307.19" y="255.5" >flat_muta..</text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (204 samples, 0.43%; +0.00%)</title><rect x="17.0" y="453" width="5.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="20.05" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (22 samples, 0.05%; +0.02%)</title><rect x="906.4" y="341" width="0.6" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="909.40" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (6 samples, 0.01%; +0.00%)</title><rect x="1174.3" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1177.25" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (119 samples, 0.25%; +0.03%)</title><rect x="834.0" y="389" width="3.0" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="837.02" y="399.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (350 samples, 0.74%; -0.03%)</title><rect x="455.3" y="293" width="8.7" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="458.27" y="303.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (5 samples, 0.01%; +0.01%)</title><rect x="831.6" y="437" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="834.57" y="447.5" ></text>
</g>
<g >
<title>database::find_keyspace (195 samples, 0.41%; 0.00%)</title><rect x="1055.3" y="341" width="4.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1058.33" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::stats (42 samples, 0.09%; +0.03%)</title><rect x="143.9" y="245" width="1.1" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="146.95" y="255.5" ></text>
</g>
<g >
<title>dht::sharder::shard_of (5 samples, 0.01%; +0.01%)</title><rect x="997.5" y="293" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1000.51" y="303.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%; +0.00%)</title><rect x="932.4" y="373" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="935.42" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (339 samples, 0.72%; +0.03%)</title><rect x="184.1" y="85" width="8.4" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="187.07" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (95 samples, 0.20%; 0.00%)</title><rect x="1165.5" y="485" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1168.45" y="495.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (8 samples, 0.02%; +0.00%)</title><rect x="574.4" y="405" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="577.37" y="415.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (14 samples, 0.03%; +0.03%)</title><rect x="998.3" y="293" width="0.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1001.31" y="303.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (6 samples, 0.01%; +0.01%)</title><rect x="364.6" y="213" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="367.61" y="223.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (91 samples, 0.19%; -0.01%)</title><rect x="707.1" y="453" width="2.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="710.07" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (8 samples, 0.02%; 0.00%)</title><rect x="816.2" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="819.22" y="335.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (6 samples, 0.01%; +0.00%)</title><rect x="735.4" y="293" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="738.36" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (11 samples, 0.02%; +0.01%)</title><rect x="1028.5" y="149" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1031.53" y="159.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (6 samples, 0.01%; -0.00%)</title><rect x="441.6" y="309" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="444.57" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (63 samples, 0.13%; -0.00%)</title><rect x="1094.3" y="325" width="1.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1097.32" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (5 samples, 0.01%; +0.01%)</title><rect x="950.3" y="325" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="953.32" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (76 samples, 0.16%; 0.00%)</title><rect x="750.3" y="341" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="753.31" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (62 samples, 0.13%; -0.01%)</title><rect x="643.3" y="469" width="1.5" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="646.25" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (42 samples, 0.09%; +0.08%)</title><rect x="709.6" y="469" width="1.0" height="15.0" fill="rgb(255,110,110)" rx="2" ry="2" />
<text  x="712.57" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.02%; +0.01%)</title><rect x="800.7" y="277" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="803.72" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (7 samples, 0.01%; +0.01%)</title><rect x="42.2" y="437" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="45.24" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (11 samples, 0.02%; +0.01%)</title><rect x="995.1" y="245" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="998.06" y="255.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (5 samples, 0.01%; 0.00%)</title><rect x="16.4" y="565" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.40" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (13 samples, 0.03%; -0.01%)</title><rect x="525.2" y="341" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="528.15" y="351.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (23 samples, 0.05%; +0.01%)</title><rect x="686.8" y="469" width="0.6" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="689.85" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (111 samples, 0.24%; -0.01%)</title><rect x="38.5" y="453" width="2.8" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="41.54" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (12 samples, 0.03%; -0.00%)</title><rect x="1118.9" y="373" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1121.91" y="383.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (12 samples, 0.03%; -0.01%)</title><rect x="1129.8" y="389" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1132.79" y="399.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (11,229 samples, 23.79%; -0.01%)</title><rect x="860.9" y="501" width="280.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="863.89" y="511.5" >seastar::lambda_task&lt;seastar::executi..</text>
</g>
<g >
<title>operator new (10 samples, 0.02%; +0.01%)</title><rect x="292.3" y="309" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="295.32" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (9 samples, 0.02%; -0.01%)</title><rect x="1032.5" y="229" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1035.48" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (8 samples, 0.02%; +0.00%)</title><rect x="414.8" y="373" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="417.80" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.02%; -0.03%)</title><rect x="1152.7" y="421" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="1155.66" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (213 samples, 0.45%; +0.01%)</title><rect x="733.2" y="357" width="5.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="736.19" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (557 samples, 1.18%; +0.11%)</title><rect x="178.6" y="101" width="13.9" height="15.0" fill="rgb(255,78,78)" rx="2" ry="2" />
<text  x="181.62" y="111.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (6 samples, 0.01%; +0.00%)</title><rect x="102.1" y="421" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="105.13" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (16 samples, 0.03%; +0.00%)</title><rect x="852.8" y="469" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="855.81" y="479.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.02%; +0.01%)</title><rect x="434.6" y="261" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="437.59" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (27 samples, 0.06%; -0.01%)</title><rect x="281.9" y="357" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="284.92" y="367.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (10 samples, 0.02%; -0.00%)</title><rect x="513.1" y="341" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="516.05" y="351.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (68 samples, 0.14%; +0.01%)</title><rect x="350.0" y="165" width="1.7" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="352.99" y="175.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (6 samples, 0.01%; -0.03%)</title><rect x="761.7" y="357" width="0.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="764.68" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (19 samples, 0.04%; +0.03%)</title><rect x="975.1" y="357" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="978.07" y="367.5" ></text>
</g>
<g >
<title>schema::column_at (79 samples, 0.17%; +0.02%)</title><rect x="382.7" y="165" width="2.0" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="385.70" y="175.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (59 samples, 0.12%; +0.02%)</title><rect x="1146.5" y="485" width="1.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1149.53" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (650 samples, 1.38%; +0.03%)</title><rect x="368.5" y="181" width="16.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="371.53" y="191.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (22 samples, 0.05%; 0.00%)</title><rect x="1058.8" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1061.75" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (8 samples, 0.02%; +0.00%)</title><rect x="608.9" y="389" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="611.91" y="399.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (22 samples, 0.05%; +0.00%)</title><rect x="836.3" y="341" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="839.29" y="351.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (25 samples, 0.05%; 0.00%)</title><rect x="1026.8" y="149" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1029.76" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (131 samples, 0.28%; -0.00%)</title><rect x="1042.7" y="277" width="3.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1045.68" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="227.5" y="245" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="230.48" y="255.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (29 samples, 0.06%; +0.06%)</title><rect x="895.1" y="309" width="0.7" height="15.0" fill="rgb(255,133,133)" rx="2" ry="2" />
<text  x="898.06" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (8 samples, 0.02%; +0.01%)</title><rect x="543.0" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="546.05" y="431.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (21 samples, 0.04%; -0.01%)</title><rect x="463.5" y="277" width="0.5" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="466.49" y="287.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (6 samples, 0.01%; -0.00%)</title><rect x="879.4" y="405" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="882.38" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (5 samples, 0.01%; +0.00%)</title><rect x="1133.8" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1136.76" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (19 samples, 0.04%; +0.03%)</title><rect x="580.8" y="373" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="583.82" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (133 samples, 0.28%; -0.01%)</title><rect x="395.3" y="197" width="3.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="398.28" y="207.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (5 samples, 0.01%; 0.00%)</title><rect x="19.1" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.10" y="239.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (7 samples, 0.01%; 0.00%)</title><rect x="909.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="912.48" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; +0.00%)</title><rect x="745.3" y="405" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="748.33" y="415.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (16 samples, 0.03%; +0.01%)</title><rect x="974.1" y="341" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="977.09" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (150 samples, 0.32%; +0.01%)</title><rect x="716.6" y="357" width="3.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="719.57" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (7 samples, 0.01%; 0.00%)</title><rect x="686.5" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.47" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (290 samples, 0.61%; 0.00%)</title><rect x="16.6" y="565" width="7.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.62" y="575.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (17 samples, 0.04%; +0.00%)</title><rect x="194.8" y="101" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="197.81" y="111.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (19 samples, 0.04%; -0.00%)</title><rect x="388.6" y="229" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="391.63" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (10 samples, 0.02%; 0.00%)</title><rect x="575.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="578.67" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (36 samples, 0.08%; -0.01%)</title><rect x="575.9" y="421" width="0.9" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="578.92" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (5,509 samples, 11.67%; -0.05%)</title><rect x="964.2" y="373" width="137.7" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="967.19" y="383.5" >service::storage_..</text>
</g>
<g >
<title>gms::gossiper::is_alive (16 samples, 0.03%; -0.00%)</title><rect x="1093.8" y="261" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1096.82" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (36 samples, 0.08%; +0.04%)</title><rect x="536.1" y="341" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="539.10" y="351.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (5 samples, 0.01%; +0.01%)</title><rect x="387.7" y="229" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="390.65" y="239.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (37 samples, 0.08%; -0.00%)</title><rect x="1069.3" y="293" width="1.0" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1072.35" y="303.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (8 samples, 0.02%; +0.01%)</title><rect x="239.1" y="213" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="242.06" y="223.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (235 samples, 0.50%; +0.00%)</title><rect x="1023.9" y="197" width="5.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1026.93" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; +0.00%)</title><rect x="575.2" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="578.17" y="431.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (19 samples, 0.04%; +0.03%)</title><rect x="476.7" y="213" width="0.5" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="479.74" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; -0.01%)</title><rect x="678.3" y="469" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="681.30" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (38 samples, 0.08%; +0.02%)</title><rect x="580.3" y="389" width="1.0" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="583.34" y="399.5" ></text>
</g>
<g >
<title>operator new (33 samples, 0.07%; -0.00%)</title><rect x="495.0" y="197" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="497.96" y="207.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (146 samples, 0.31%; +0.01%)</title><rect x="535.3" y="373" width="3.7" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="538.32" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (10 samples, 0.02%; +0.01%)</title><rect x="294.7" y="261" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="297.72" y="271.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, query::querier&lt; (7 samples, 0.01%; +0.00%)</title><rect x="677.0" y="501" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="680.00" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (12 samples, 0.03%; -0.00%)</title><rect x="18.2" y="261" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="21.20" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (46 samples, 0.10%; +0.01%)</title><rect x="734.4" y="309" width="1.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="737.36" y="319.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (17 samples, 0.04%; +0.01%)</title><rect x="329.2" y="181" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="332.24" y="191.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (46 samples, 0.10%; +0.01%)</title><rect x="791.7" y="133" width="1.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="794.65" y="143.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (155 samples, 0.33%; 0.00%)</title><rect x="37.6" y="469" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.64" y="479.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (5 samples, 0.01%; +0.01%)</title><rect x="706.6" y="469" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="709.64" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (50 samples, 0.11%; -0.00%)</title><rect x="837.8" y="405" width="1.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="840.82" y="415.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (300 samples, 0.64%; 0.00%)</title><rect x="16.4" y="597" width="7.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.37" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (12 samples, 0.03%; 0.00%)</title><rect x="24.0" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.97" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (121 samples, 0.26%; +0.03%)</title><rect x="992.4" y="277" width="3.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="995.39" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_value (5 samples, 0.01%; +0.01%)</title><rect x="628.2" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="631.23" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (28 samples, 0.06%; -0.02%)</title><rect x="785.4" y="165" width="0.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="788.43" y="175.5" ></text>
</g>
<g >
<title>__dynamic_cast (15 samples, 0.03%; +0.00%)</title><rect x="633.1" y="469" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="636.11" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (50 samples, 0.11%; +0.02%)</title><rect x="814.6" y="309" width="1.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="817.62" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_M_reset (6 samples, 0.01%; +0.00%)</title><rect x="388.1" y="229" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="391.05" y="239.5" ></text>
</g>
<g >
<title>dht::tri_compare (125 samples, 0.26%; -0.00%)</title><rect x="1082.1" y="229" width="3.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1085.15" y="239.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (15 samples, 0.03%; +0.00%)</title><rect x="794.6" y="101" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="797.60" y="111.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (8 samples, 0.02%; -0.01%)</title><rect x="385.9" y="213" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="388.93" y="223.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (14 samples, 0.03%; +0.00%)</title><rect x="11.6" y="581" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="14.62" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (18 samples, 0.04%; 0.00%)</title><rect x="1174.0" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1176.98" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (2,382 samples, 5.05%; -0.01%)</title><rect x="877.7" y="421" width="59.5" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="880.71" y="431.5" >cql3::..</text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (6 samples, 0.01%; +0.00%)</title><rect x="854.2" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="857.19" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (639 samples, 1.35%; -0.00%)</title><rect x="1019.3" y="245" width="16.0" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1022.33" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (77 samples, 0.16%; 0.00%)</title><rect x="1053.4" y="325" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1056.40" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt;::operator (5 samples, 0.01%; 0.00%)</title><rect x="71.2" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.21" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="726.2" y="389" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="729.24" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (97 samples, 0.21%; -0.01%)</title><rect x="781.4" y="213" width="2.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="784.35" y="223.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (39 samples, 0.08%; -0.08%)</title><rect x="99.4" y="405" width="0.9" height="15.0" fill="rgb(110,110,255)" rx="2" ry="2" />
<text  x="102.36" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (32 samples, 0.07%; -0.00%)</title><rect x="769.1" y="309" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="772.11" y="319.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (24 samples, 0.05%; -0.03%)</title><rect x="326.8" y="165" width="0.6" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="329.81" y="175.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (6 samples, 0.01%; +0.00%)</title><rect x="33.0" y="485" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="35.97" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (32 samples, 0.07%; 0.00%)</title><rect x="17.9" y="277" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.92" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (68 samples, 0.14%; +0.01%)</title><rect x="220.4" y="165" width="1.7" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="223.41" y="175.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (79 samples, 0.17%; +0.03%)</title><rect x="61.1" y="437" width="2.0" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="64.12" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (16 samples, 0.03%; +0.02%)</title><rect x="611.2" y="389" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="614.16" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (7 samples, 0.01%; -0.00%)</title><rect x="478.4" y="325" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="481.39" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (28 samples, 0.06%; -0.02%)</title><rect x="682.7" y="437" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="685.75" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (16 samples, 0.03%; +0.00%)</title><rect x="363.1" y="181" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="366.13" y="191.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (18 samples, 0.04%; -0.00%)</title><rect x="589.0" y="437" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="592.04" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (47 samples, 0.10%; -0.01%)</title><rect x="1164.2" y="485" width="1.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1167.18" y="495.5" ></text>
</g>
<g >
<title>operator new (73 samples, 0.15%; +0.00%)</title><rect x="993.1" y="261" width="1.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="996.11" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (20 samples, 0.04%; -0.03%)</title><rect x="969.8" y="325" width="0.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="972.84" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (19 samples, 0.04%; +0.00%)</title><rect x="22.5" y="405" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="25.55" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (10 samples, 0.02%; +0.01%)</title><rect x="281.7" y="357" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="284.67" y="367.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (7 samples, 0.01%; -0.01%)</title><rect x="806.4" y="341" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="809.45" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (6,148 samples, 13.02%; +0.00%)</title><rect x="704.5" y="501" width="153.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="707.52" y="511.5" >seastar::internal::..</text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (8 samples, 0.02%; +0.00%)</title><rect x="47.6" y="485" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="50.59" y="495.5" ></text>
</g>
<g >
<title>operator delete (53 samples, 0.11%; -0.07%)</title><rect x="554.2" y="293" width="1.3" height="15.0" fill="rgb(128,128,255)" rx="2" ry="2" />
<text  x="557.22" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; +0.00%)</title><rect x="665.4" y="485" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="668.38" y="495.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (71 samples, 0.15%; +0.10%)</title><rect x="889.2" y="293" width="1.7" height="15.0" fill="rgb(255,89,89)" rx="2" ry="2" />
<text  x="892.16" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.01%; 0.00%)</title><rect x="285.5" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="288.47" y="399.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (7 samples, 0.01%; -0.02%)</title><rect x="590.4" y="405" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="593.44" y="415.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%; 0.00%)</title><rect x="610.6" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="613.56" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (34 samples, 0.07%; -0.01%)</title><rect x="598.7" y="437" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="601.71" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (10 samples, 0.02%; -0.01%)</title><rect x="448.2" y="325" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="451.17" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (7 samples, 0.01%; 0.00%)</title><rect x="638.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="641.61" y="463.5" ></text>
</g>
<g >
<title>partition_entry::read (74 samples, 0.16%; +0.01%)</title><rect x="506.5" y="309" width="1.9" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="509.53" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (24 samples, 0.05%; +0.02%)</title><rect x="261.9" y="325" width="0.6" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="264.85" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (82 samples, 0.17%; -0.04%)</title><rect x="842.6" y="373" width="2.0" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="845.59" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (7 samples, 0.01%; +0.01%)</title><rect x="571.3" y="357" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="574.29" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (154 samples, 0.33%; +0.01%)</title><rect x="401.0" y="261" width="3.8" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="404.00" y="271.5" ></text>
</g>
<g >
<title>operator new (17 samples, 0.04%; -0.01%)</title><rect x="446.4" y="293" width="0.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="449.37" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; 0.00%)</title><rect x="53.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.04" y="463.5" ></text>
</g>
<g >
<title>executor&lt;test_read (6,059 samples, 12.83%; +0.03%)</title><rect x="705.7" y="485" width="151.5" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="708.72" y="495.5" >executor&lt;test_read</text>
</g>
<g >
<title>cql3::expr::evaluate (428 samples, 0.91%; +0.01%)</title><rect x="885.1" y="325" width="10.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="888.08" y="335.5" ></text>
</g>
<g >
<title>operator new (79 samples, 0.17%; -0.00%)</title><rect x="968.4" y="357" width="1.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="971.37" y="367.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (11 samples, 0.02%; +0.02%)</title><rect x="202.8" y="117" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="205.81" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (7 samples, 0.01%; -0.01%)</title><rect x="900.4" y="357" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="903.43" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (6 samples, 0.01%; +0.00%)</title><rect x="275.1" y="293" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="278.15" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (9 samples, 0.02%; -0.01%)</title><rect x="300.2" y="245" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="303.19" y="255.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (5,305 samples, 11.24%; +0.04%)</title><rect x="712.5" y="453" width="132.6" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="715.52" y="463.5" >single_node_cql_..</text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (64 samples, 0.14%; +0.01%)</title><rect x="728.8" y="341" width="1.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="731.84" y="351.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (40 samples, 0.08%; -0.00%)</title><rect x="101.3" y="437" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="104.28" y="447.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (57 samples, 0.12%; +0.00%)</title><rect x="73.0" y="389" width="1.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="76.04" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.01%)</title><rect x="413.4" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="416.45" y="383.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (528 samples, 1.12%; -0.01%)</title><rect x="904.4" y="389" width="13.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="907.43" y="399.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (5 samples, 0.01%; 0.00%)</title><rect x="24.1" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.10" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (17 samples, 0.04%; +0.01%)</title><rect x="80.0" y="453" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="83.04" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (7 samples, 0.01%; +0.01%)</title><rect x="637.1" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="640.13" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (7 samples, 0.01%; +0.01%)</title><rect x="882.2" y="373" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="885.21" y="383.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (65 samples, 0.14%; -0.01%)</title><rect x="918.9" y="373" width="1.7" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="921.93" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (13 samples, 0.03%; -0.01%)</title><rect x="674.9" y="485" width="0.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="677.95" y="495.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (10 samples, 0.02%; -0.02%)</title><rect x="1113.4" y="357" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1116.39" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (9 samples, 0.02%; -0.01%)</title><rect x="1104.5" y="389" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1107.47" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (102 samples, 0.22%; -0.01%)</title><rect x="627.3" y="501" width="2.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="630.33" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (14 samples, 0.03%; +0.02%)</title><rect x="265.7" y="309" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="268.65" y="319.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%; -0.00%)</title><rect x="1156.7" y="389" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1159.66" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (12 samples, 0.03%; +0.02%)</title><rect x="579.0" y="405" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="582.04" y="415.5" ></text>
</g>
<g >
<title>operator new (86 samples, 0.18%; +0.00%)</title><rect x="154.7" y="213" width="2.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="157.67" y="223.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (60 samples, 0.13%; -0.01%)</title><rect x="768.4" y="325" width="1.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="771.43" y="335.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (6 samples, 0.01%; +0.00%)</title><rect x="1139.4" y="197" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1142.41" y="207.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.05%; -0.01%)</title><rect x="437.6" y="277" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="440.59" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (13 samples, 0.03%; +0.00%)</title><rect x="654.6" y="469" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="657.58" y="479.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.02%; +0.01%)</title><rect x="106.7" y="421" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="109.71" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (7 samples, 0.01%; -0.00%)</title><rect x="676.7" y="469" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="679.75" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (9 samples, 0.02%; +0.01%)</title><rect x="1047.8" y="293" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1050.78" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="730.5" y="373" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="733.49" y="383.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (14 samples, 0.03%; +0.01%)</title><rect x="788.3" y="117" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="791.30" y="127.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (8 samples, 0.02%; 0.00%)</title><rect x="1055.7" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1058.70" y="319.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (732 samples, 1.55%; 0.00%)</title><rect x="883.3" y="389" width="18.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.31" y="399.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (11 samples, 0.02%; -0.01%)</title><rect x="209.0" y="149" width="0.3" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="212.01" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (692 samples, 1.47%; +0.01%)</title><rect x="487.2" y="293" width="17.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="490.18" y="303.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (88 samples, 0.19%; -0.01%)</title><rect x="148.9" y="213" width="2.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="151.90" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.00%)</title><rect x="556.7" y="261" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="559.75" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.01%)</title><rect x="803.6" y="261" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="806.60" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (20 samples, 0.04%; +0.00%)</title><rect x="899.9" y="309" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="902.93" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (57 samples, 0.12%; +0.03%)</title><rect x="865.7" y="469" width="1.4" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="868.66" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (16 samples, 0.03%; -0.00%)</title><rect x="656.7" y="469" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="659.73" y="479.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (89 samples, 0.19%; +0.01%)</title><rect x="757.2" y="389" width="2.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="760.18" y="399.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.09%; 0.00%)</title><rect x="1188.9" y="629" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1191.85" y="639.5" ></text>
</g>
<g >
<title>service::client_state::has_access (1,915 samples, 4.06%; +0.04%)</title><rect x="763.0" y="373" width="47.9" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="766.03" y="383.5" >serv..</text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (12 samples, 0.03%; -0.00%)</title><rect x="34.4" y="485" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="37.42" y="495.5" ></text>
</g>
<g >
<title>reader_permit::set_max_result_size (5 samples, 0.01%; 0.00%)</title><rect x="63.8" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.79" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (10 samples, 0.02%; +0.01%)</title><rect x="444.0" y="261" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="447.04" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (11 samples, 0.02%; +0.00%)</title><rect x="596.1" y="437" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="599.09" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (16 samples, 0.03%; -0.01%)</title><rect x="1149.1" y="453" width="0.4" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1152.13" y="463.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (11 samples, 0.02%; +0.01%)</title><rect x="1105.1" y="373" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1108.12" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (13 samples, 0.03%; -0.01%)</title><rect x="948.7" y="405" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="951.70" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (136 samples, 0.29%; -0.01%)</title><rect x="434.2" y="277" width="3.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="437.19" y="287.5" ></text>
</g>
<g >
<title>operator delete (31 samples, 0.07%; +0.02%)</title><rect x="33.1" y="485" width="0.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="36.12" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (25 samples, 0.05%; -0.02%)</title><rect x="267.3" y="357" width="0.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="270.33" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (5 samples, 0.01%; +0.01%)</title><rect x="486.1" y="293" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="489.06" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%; +0.01%)</title><rect x="661.4" y="437" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="664.38" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (6 samples, 0.01%; -0.00%)</title><rect x="387.3" y="229" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="390.25" y="239.5" ></text>
</g>
<g >
<title>__tls_init (10 samples, 0.02%; -0.01%)</title><rect x="479.3" y="309" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="482.34" y="319.5" ></text>
</g>
<g >
<title>schema::position (17 samples, 0.04%; +0.02%)</title><rect x="1123.9" y="421" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1126.94" y="431.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (49 samples, 0.10%; 0.00%)</title><rect x="69.5" y="389" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.54" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (108 samples, 0.23%; +0.04%)</title><rect x="952.5" y="389" width="2.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="955.47" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1,223 samples, 2.59%; +0.01%)</title><rect x="543.8" y="405" width="30.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="546.80" y="415.5" >fl..</text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (17 samples, 0.04%; +0.01%)</title><rect x="120.7" y="309" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="123.68" y="319.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (42 samples, 0.09%; +0.00%)</title><rect x="611.6" y="405" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="614.56" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="659.1" y="453" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="662.05" y="463.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (11 samples, 0.02%; +0.01%)</title><rect x="764.6" y="357" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="767.61" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (6 samples, 0.01%; +0.01%)</title><rect x="857.8" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="860.84" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="670.9" y="469" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="673.87" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (38 samples, 0.08%; +0.02%)</title><rect x="315.8" y="165" width="0.9" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="318.77" y="175.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (189 samples, 0.40%; 0.00%)</title><rect x="17.4" y="405" width="4.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.40" y="415.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (9 samples, 0.02%; -0.06%)</title><rect x="1142.5" y="501" width="0.2" height="15.0" fill="rgb(136,136,255)" rx="2" ry="2" />
<text  x="1145.51" y="511.5" ></text>
</g>
<g >
<title>operator delete (39 samples, 0.08%; +0.03%)</title><rect x="563.5" y="341" width="1.0" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="566.49" y="351.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (13 samples, 0.03%; -0.00%)</title><rect x="718.6" y="293" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="721.59" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (6 samples, 0.01%; 0.00%)</title><rect x="19.1" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.07" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (6 samples, 0.01%; -0.01%)</title><rect x="221.8" y="117" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="224.76" y="127.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (340 samples, 0.72%; -0.01%)</title><rect x="531.9" y="421" width="8.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="534.85" y="431.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (78 samples, 0.17%; -0.03%)</title><rect x="918.7" y="389" width="2.0" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="921.70" y="399.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (6 samples, 0.01%; -0.04%)</title><rect x="598.4" y="437" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="601.41" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_bound_terms (5 samples, 0.01%; +0.01%)</title><rect x="711.9" y="453" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="714.94" y="463.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (12 samples, 0.03%; -0.02%)</title><rect x="666.3" y="469" width="0.3" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="669.27" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (239 samples, 0.51%; +0.04%)</title><rect x="601.4" y="437" width="5.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="604.36" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (174 samples, 0.37%; +0.03%)</title><rect x="816.5" y="325" width="4.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="819.52" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (9 samples, 0.02%; +0.01%)</title><rect x="511.6" y="325" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="514.58" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (14 samples, 0.03%; -0.00%)</title><rect x="1105.4" y="373" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1108.39" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (14 samples, 0.03%; +0.02%)</title><rect x="1124.4" y="421" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1127.36" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (6 samples, 0.01%; +0.01%)</title><rect x="647.1" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="650.13" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (887 samples, 1.88%; 0.00%)</title><rect x="1074.0" y="341" width="22.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1077.05" y="351.5" >s..</text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (11 samples, 0.02%; +0.00%)</title><rect x="577.8" y="405" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="580.82" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.01%)</title><rect x="616.5" y="469" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="619.51" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt; (7 samples, 0.01%; +0.01%)</title><rect x="1134.2" y="421" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1137.21" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (60 samples, 0.13%; +0.01%)</title><rect x="1106.5" y="405" width="1.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1109.47" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (123 samples, 0.26%; -0.01%)</title><rect x="1042.9" y="261" width="3.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1045.88" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (280 samples, 0.59%; +0.01%)</title><rect x="393.6" y="245" width="7.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="396.58" y="255.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (184 samples, 0.39%; -0.03%)</title><rect x="187.9" y="69" width="4.6" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="190.94" y="79.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (361 samples, 0.76%; +0.01%)</title><rect x="786.8" y="197" width="9.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="789.83" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (20 samples, 0.04%; -0.01%)</title><rect x="1037.4" y="229" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1040.43" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; -0.01%)</title><rect x="541.7" y="421" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="544.72" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (456 samples, 0.97%; -0.01%)</title><rect x="885.0" y="341" width="11.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="887.98" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.07%; 0.00%)</title><rect x="1139.3" y="453" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.28" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (137 samples, 0.29%; -0.06%)</title><rect x="96.9" y="421" width="3.4" height="15.0" fill="rgb(141,141,255)" rx="2" ry="2" />
<text  x="99.91" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (72 samples, 0.15%; -0.01%)</title><rect x="1043.1" y="229" width="1.8" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1046.10" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (187 samples, 0.40%; +0.04%)</title><rect x="749.4" y="357" width="4.6" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="752.36" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (13 samples, 0.03%; -0.01%)</title><rect x="813.3" y="341" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="816.32" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (12 samples, 0.03%; +0.01%)</title><rect x="696.0" y="405" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="698.97" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (10,651 samples, 22.56%; -0.17%)</title><rect x="872.0" y="437" width="266.2" height="15.0" fill="rgb(0,0,255)" rx="2" ry="2" />
<text  x="874.96" y="447.5" >cql3::statements::select_statement:..</text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (5 samples, 0.01%; +0.01%)</title><rect x="588.4" y="421" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="591.36" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (7 samples, 0.01%; +0.01%)</title><rect x="936.4" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="939.40" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (7 samples, 0.01%; +0.00%)</title><rect x="19.0" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="22.05" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (223 samples, 0.47%; -0.07%)</title><rect x="201.7" y="133" width="5.5" height="15.0" fill="rgb(123,123,255)" rx="2" ry="2" />
<text  x="204.66" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (8 samples, 0.02%; -0.01%)</title><rect x="440.1" y="293" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="443.07" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (85 samples, 0.18%; -0.00%)</title><rect x="979.3" y="309" width="2.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="982.34" y="319.5" ></text>
</g>
<g >
<title>operator delete (29 samples, 0.06%; -0.01%)</title><rect x="153.4" y="197" width="0.8" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="156.45" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (9 samples, 0.02%; 0.00%)</title><rect x="618.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="621.48" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (22 samples, 0.05%; +0.02%)</title><rect x="1100.8" y="357" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1103.79" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (7 samples, 0.01%; 0.00%)</title><rect x="19.0" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.05" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (15 samples, 0.03%; +0.00%)</title><rect x="228.8" y="245" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="231.83" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::stats (30 samples, 0.06%; +0.02%)</title><rect x="519.3" y="293" width="0.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="522.33" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="812.9" y="357" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="815.92" y="367.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (7 samples, 0.01%; +0.01%)</title><rect x="818.6" y="261" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="821.65" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (5,882 samples, 12.46%; +0.06%)</title><rect x="957.4" y="389" width="147.1" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="960.44" y="399.5" >service::storage_p..</text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (14 samples, 0.03%; +0.01%)</title><rect x="943.2" y="341" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="946.17" y="351.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (13 samples, 0.03%; +0.01%)</title><rect x="810.5" y="277" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="813.52" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (6 samples, 0.01%; 0.00%)</title><rect x="20.1" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.10" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (155 samples, 0.33%; 0.00%)</title><rect x="244.4" y="245" width="3.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="247.36" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (21 samples, 0.04%; +0.01%)</title><rect x="809.7" y="277" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="812.75" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (5 samples, 0.01%; -0.00%)</title><rect x="441.3" y="293" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="444.29" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.00%)</title><rect x="560.5" y="293" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="563.50" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (720 samples, 1.53%; +0.02%)</title><rect x="544.3" y="373" width="18.0" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="547.35" y="383.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (53 samples, 0.11%; -0.01%)</title><rect x="587.0" y="405" width="1.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="590.01" y="415.5" ></text>
</g>
<g >
<title>auth::resource::resource (97 samples, 0.21%; -0.01%)</title><rect x="759.4" y="389" width="2.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="762.41" y="399.5" ></text>
</g>
<g >
<title>free (27 samples, 0.06%; 0.00%)</title><rect x="399.3" y="197" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="402.33" y="207.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.01%; +0.00%)</title><rect x="909.7" y="357" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="912.68" y="367.5" ></text>
</g>
<g >
<title>operator delete (85 samples, 0.18%; -0.06%)</title><rect x="92.0" y="437" width="2.1" height="15.0" fill="rgb(133,133,255)" rx="2" ry="2" />
<text  x="95.01" y="447.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (13 samples, 0.03%; 0.00%)</title><rect x="136.5" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="139.50" y="239.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (8 samples, 0.02%; +0.00%)</title><rect x="22.3" y="421" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="25.27" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; -0.01%)</title><rect x="505.6" y="325" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="508.61" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (433 samples, 0.92%; +0.04%)</title><rect x="270.2" y="325" width="10.8" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="273.20" y="335.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (8 samples, 0.02%; +0.01%)</title><rect x="1095.9" y="325" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1098.89" y="335.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (21 samples, 0.04%; -0.00%)</title><rect x="237.2" y="181" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="240.16" y="191.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (174 samples, 0.37%; -0.01%)</title><rect x="791.5" y="165" width="4.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="794.45" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (8 samples, 0.02%; -0.01%)</title><rect x="1029.8" y="197" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1032.81" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (6 samples, 0.01%; -0.00%)</title><rect x="433.8" y="245" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="436.77" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; -0.01%)</title><rect x="622.2" y="453" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="625.23" y="463.5" ></text>
</g>
<g >
<title>sstring_hash::operator (16 samples, 0.03%; +0.01%)</title><rect x="837.1" y="389" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="840.07" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; -0.01%)</title><rect x="522.3" y="245" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="525.33" y="255.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (5 samples, 0.01%; 0.00%)</title><rect x="24.1" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.10" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; +0.00%)</title><rect x="796.2" y="197" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="799.23" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (25 samples, 0.05%; 0.00%)</title><rect x="936.6" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="939.57" y="367.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (56 samples, 0.12%; -0.01%)</title><rect x="773.9" y="293" width="1.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="776.93" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (49 samples, 0.10%; +0.04%)</title><rect x="257.6" y="293" width="1.2" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="260.58" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (8 samples, 0.02%; +0.00%)</title><rect x="24.6" y="517" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="27.62" y="527.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (5 samples, 0.01%; 0.00%)</title><rect x="273.2" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="276.25" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (41 samples, 0.09%; +0.02%)</title><rect x="649.6" y="485" width="1.0" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="652.58" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,178 samples, 4.61%; +0.01%)</title><rect x="163.0" y="213" width="54.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="166.00" y="223.5" >logal..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.01%; +0.00%)</title><rect x="644.6" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="647.55" y="447.5" ></text>
</g>
<g >
<title>db::block_for (10 samples, 0.02%; +0.00%)</title><rect x="1060.7" y="341" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1063.70" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.01%)</title><rect x="604.9" y="373" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="607.91" y="383.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (11 samples, 0.02%; +0.02%)</title><rect x="951.6" y="325" width="0.3" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="954.62" y="335.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (38 samples, 0.08%; +0.00%)</title><rect x="454.3" y="293" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="457.32" y="303.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (160 samples, 0.34%; -0.01%)</title><rect x="716.3" y="389" width="4.0" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="719.34" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (11 samples, 0.02%; -0.00%)</title><rect x="548.6" y="325" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="551.60" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (8 samples, 0.02%; +0.00%)</title><rect x="126.6" y="261" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="129.58" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (11 samples, 0.02%; +0.02%)</title><rect x="1073.8" y="341" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1076.77" y="351.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (20 samples, 0.04%; +0.00%)</title><rect x="1172.2" y="421" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1175.23" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (57 samples, 0.12%; +0.01%)</title><rect x="1162.8" y="469" width="1.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1165.76" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (8 samples, 0.02%; +0.00%)</title><rect x="100.1" y="389" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="103.13" y="399.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (5 samples, 0.01%; +0.01%)</title><rect x="187.5" y="69" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="190.54" y="79.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (6 samples, 0.01%; +0.00%)</title><rect x="387.4" y="229" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="390.40" y="239.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (49 samples, 0.10%; -0.04%)</title><rect x="380.3" y="133" width="1.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="383.28" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (38 samples, 0.08%; 0.00%)</title><rect x="207.9" y="149" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="210.86" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="580.2" y="373" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="583.19" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (27 samples, 0.06%; +0.01%)</title><rect x="325.2" y="181" width="0.7" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="328.21" y="191.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (7 samples, 0.01%; +0.00%)</title><rect x="981.3" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="984.29" y="303.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (13 samples, 0.03%; +0.00%)</title><rect x="1139.6" y="245" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1142.58" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (12 samples, 0.03%; -0.01%)</title><rect x="681.8" y="453" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="684.77" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (5 samples, 0.01%; +0.00%)</title><rect x="1038.0" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1040.98" y="271.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (20 samples, 0.04%; 0.00%)</title><rect x="737.8" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="740.79" y="271.5" ></text>
</g>
<g >
<title>service::client_state::validate_login (6 samples, 0.01%; +0.01%)</title><rect x="810.9" y="373" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="813.90" y="383.5" ></text>
</g>
<g >
<title>database::has_keyspace (111 samples, 0.24%; +0.00%)</title><rect x="841.9" y="405" width="2.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="844.92" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (15 samples, 0.03%; -0.01%)</title><rect x="936.8" y="325" width="0.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="939.82" y="335.5" ></text>
</g>
<g >
<title>operator new (27 samples, 0.06%; 0.00%)</title><rect x="522.5" y="261" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="525.50" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (14 samples, 0.03%; +0.02%)</title><rect x="641.9" y="469" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="644.88" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (6,009 samples, 12.73%; +0.01%)</title><rect x="955.7" y="405" width="150.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="958.67" y="415.5" >service::storage_pr..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; -0.00%)</title><rect x="1103.4" y="373" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1106.39" y="383.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (256 samples, 0.54%; +0.01%)</title><rect x="732.3" y="373" width="6.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="735.31" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (9 samples, 0.02%; +0.00%)</title><rect x="647.1" y="453" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="650.05" y="463.5" ></text>
</g>
<g >
<title>seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;::check (6 samples, 0.01%; +0.01%)</title><rect x="825.3" y="421" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="828.34" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (8 samples, 0.02%; -0.01%)</title><rect x="606.9" y="373" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="609.89" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (54 samples, 0.11%; +0.01%)</title><rect x="639.4" y="421" width="1.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="642.38" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (13 samples, 0.03%; 0.00%)</title><rect x="835.4" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="838.44" y="367.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (15 samples, 0.03%; 0.00%)</title><rect x="1058.2" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1061.18" y="287.5" ></text>
</g>
<g >
<title>dht::shard_of (25 samples, 0.05%; -0.02%)</title><rect x="1001.9" y="277" width="0.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1004.89" y="287.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (9 samples, 0.02%; -0.02%)</title><rect x="665.5" y="485" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="668.50" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (21 samples, 0.04%; +0.04%)</title><rect x="754.5" y="405" width="0.5" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="757.51" y="415.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (21 samples, 0.04%; +0.02%)</title><rect x="94.5" y="437" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="97.51" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.01%; -0.00%)</title><rect x="974.5" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="977.49" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::~vector (8 samples, 0.02%; +0.01%)</title><rect x="44.2" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="47.22" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (11 samples, 0.02%; +0.01%)</title><rect x="925.7" y="357" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="928.73" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (51 samples, 0.11%; -0.03%)</title><rect x="299.1" y="261" width="1.3" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="302.14" y="271.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (10 samples, 0.02%; -0.01%)</title><rect x="403.9" y="229" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="406.92" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (11 samples, 0.02%; -0.00%)</title><rect x="213.6" y="149" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="216.64" y="159.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (33 samples, 0.07%; -0.00%)</title><rect x="932.3" y="389" width="0.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="935.30" y="399.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (35 samples, 0.07%; 0.00%)</title><rect x="40.4" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.44" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (6 samples, 0.01%; 0.00%)</title><rect x="1112.9" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1115.89" y="367.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (46 samples, 0.10%; -0.00%)</title><rect x="782.1" y="149" width="1.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="785.13" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (15 samples, 0.03%; +0.01%)</title><rect x="1062.0" y="325" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1065.02" y="335.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (250 samples, 0.53%; +0.02%)</title><rect x="95.0" y="437" width="6.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="98.03" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (35 samples, 0.07%; +0.01%)</title><rect x="642.4" y="469" width="0.9" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="645.38" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (13 samples, 0.03%; -0.00%)</title><rect x="1034.8" y="197" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1037.83" y="207.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (8 samples, 0.02%; +0.01%)</title><rect x="1133.2" y="405" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1136.21" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (17 samples, 0.04%; +0.01%)</title><rect x="557.5" y="277" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="560.50" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (26 samples, 0.06%; +0.00%)</title><rect x="147.0" y="245" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="150.00" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (31 samples, 0.07%; +0.01%)</title><rect x="1066.0" y="293" width="0.8" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1069.05" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (7 samples, 0.01%; 0.00%)</title><rect x="975.9" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="978.87" y="367.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (15 samples, 0.03%; -0.00%)</title><rect x="844.2" y="341" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="847.22" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (27 samples, 0.06%; -0.01%)</title><rect x="984.3" y="293" width="0.6" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="987.26" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (388 samples, 0.82%; -0.01%)</title><rect x="64.8" y="421" width="9.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="67.81" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; -0.00%)</title><rect x="894.1" y="309" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="897.13" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; -0.00%)</title><rect x="813.2" y="341" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="816.20" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (5 samples, 0.01%; -0.00%)</title><rect x="231.8" y="213" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="234.78" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (34 samples, 0.07%; -0.01%)</title><rect x="682.6" y="453" width="0.8" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="685.60" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (15 samples, 0.03%; -0.02%)</title><rect x="798.0" y="213" width="0.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="801.00" y="223.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (24 samples, 0.05%; 0.00%)</title><rect x="1140.1" y="341" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.13" y="351.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (12 samples, 0.03%; -0.02%)</title><rect x="794.7" y="85" width="0.3" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="797.68" y="95.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (11 samples, 0.02%; +0.01%)</title><rect x="385.6" y="181" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="388.60" y="191.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (6 samples, 0.01%; +0.00%)</title><rect x="586.6" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="589.62" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (6 samples, 0.01%; +0.01%)</title><rect x="739.0" y="389" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="741.99" y="399.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (6 samples, 0.01%; -0.01%)</title><rect x="1114.1" y="389" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1117.06" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (7 samples, 0.01%; +0.01%)</title><rect x="784.7" y="181" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="787.73" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%; 0.00%)</title><rect x="136.3" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="139.33" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (6 samples, 0.01%; 0.00%)</title><rect x="1140.2" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.16" y="319.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (85 samples, 0.18%; +0.01%)</title><rect x="789.0" y="149" width="2.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="792.00" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (45 samples, 0.10%; -0.02%)</title><rect x="774.0" y="261" width="1.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="777.00" y="271.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (46 samples, 0.10%; +0.01%)</title><rect x="667.0" y="453" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="670.00" y="463.5" ></text>
</g>
<g >
<title>operator delete (24 samples, 0.05%; -0.01%)</title><rect x="413.6" y="373" width="0.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="416.60" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (8 samples, 0.02%; -0.01%)</title><rect x="315.2" y="181" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="318.19" y="191.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (31 samples, 0.07%; 0.00%)</title><rect x="861.0" y="437" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.01" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (5 samples, 0.01%; 0.00%)</title><rect x="24.0" y="421" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.97" y="431.5" ></text>
</g>
<g >
<title>__tls_init (11 samples, 0.02%; +0.01%)</title><rect x="489.4" y="261" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="492.36" y="271.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.03%; +0.00%)</title><rect x="643.4" y="453" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="646.35" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (13 samples, 0.03%; -0.01%)</title><rect x="478.1" y="325" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="481.06" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; -0.00%)</title><rect x="963.7" y="373" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="966.67" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (45,933 samples, 97.30%; +0.06%)</title><rect x="26.8" y="517" width="1148.1" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="29.77" y="527.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>logalloc::allocating_section::reserve (60 samples, 0.13%; +0.02%)</title><rect x="518.6" y="309" width="1.5" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="521.58" y="319.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (33 samples, 0.07%; +0.03%)</title><rect x="791.9" y="117" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="794.93" y="127.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (9 samples, 0.02%; 0.00%)</title><rect x="16.6" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.65" y="511.5" ></text>
</g>
<g >
<title>operator new (55 samples, 0.12%; +0.01%)</title><rect x="837.7" y="421" width="1.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="840.69" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (8 samples, 0.02%; +0.01%)</title><rect x="263.0" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="265.95" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; +0.00%)</title><rect x="823.0" y="277" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="826.02" y="287.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (14 samples, 0.03%; 0.00%)</title><rect x="860.4" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.36" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (8 samples, 0.02%; +0.00%)</title><rect x="1139.1" y="453" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1142.08" y="463.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (11 samples, 0.02%; -0.04%)</title><rect x="432.3" y="293" width="0.3" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="435.34" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.01%)</title><rect x="919.2" y="357" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="922.23" y="367.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (66 samples, 0.14%; -0.01%)</title><rect x="1161.1" y="469" width="1.7" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1164.11" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (9 samples, 0.02%; -0.02%)</title><rect x="1142.0" y="501" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1144.96" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (11 samples, 0.02%; +0.01%)</title><rect x="226.1" y="213" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="229.08" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (33 samples, 0.07%; +0.01%)</title><rect x="495.0" y="181" width="0.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="497.96" y="191.5" ></text>
</g>
<g >
<title>local_schema_registry (6 samples, 0.01%; -0.01%)</title><rect x="960.5" y="373" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="963.52" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (7 samples, 0.01%; +0.01%)</title><rect x="100.3" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="103.33" y="431.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (20 samples, 0.04%; -0.05%)</title><rect x="470.4" y="213" width="0.5" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="473.36" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (18 samples, 0.04%; 0.00%)</title><rect x="1174.0" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1176.98" y="479.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (111 samples, 0.24%; +0.01%)</title><rect x="1025.3" y="165" width="2.8" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1028.33" y="175.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (6 samples, 0.01%; -0.01%)</title><rect x="307.8" y="197" width="0.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="310.79" y="207.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (23 samples, 0.05%; +0.00%)</title><rect x="187.0" y="53" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="189.97" y="63.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (16 samples, 0.03%; -0.01%)</title><rect x="852.1" y="453" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="855.14" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (26 samples, 0.06%; -0.01%)</title><rect x="1140.8" y="485" width="0.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1143.76" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; +0.01%)</title><rect x="770.2" y="309" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="773.18" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (10 samples, 0.02%; +0.00%)</title><rect x="612.4" y="389" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="615.36" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (22,492 samples, 47.64%; -0.03%)</title><rect x="51.5" y="485" width="562.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="54.49" y="495.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (7 samples, 0.01%; +0.01%)</title><rect x="858.0" y="485" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="860.99" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (17 samples, 0.04%; +0.01%)</title><rect x="929.3" y="389" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="932.27" y="399.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (10 samples, 0.02%; 0.00%)</title><rect x="238.1" y="165" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="241.13" y="175.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (991 samples, 2.10%; +0.01%)</title><rect x="775.8" y="277" width="24.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="778.75" y="287.5" >a..</text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (21 samples, 0.04%; +0.02%)</title><rect x="878.9" y="405" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="881.86" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (6 samples, 0.01%; 0.00%)</title><rect x="20.1" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.10" y="303.5" ></text>
</g>
<g >
<title>compound_type&lt; (35 samples, 0.07%; +0.07%)</title><rect x="903.6" y="389" width="0.8" height="15.0" fill="rgb(255,128,128)" rx="2" ry="2" />
<text  x="906.55" y="399.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (29 samples, 0.06%; -0.01%)</title><rect x="329.7" y="181" width="0.7" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="332.66" y="191.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (124 samples, 0.26%; +0.00%)</title><rect x="654.2" y="485" width="3.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="657.20" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (326 samples, 0.69%; -0.04%)</title><rect x="492.6" y="245" width="8.2" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="495.61" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (183 samples, 0.39%; +0.01%)</title><rect x="218.4" y="213" width="4.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="221.44" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (7 samples, 0.01%; -0.01%)</title><rect x="1113.6" y="373" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1116.64" y="383.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%; +0.00%)</title><rect x="412.4" y="341" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="415.45" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (31 samples, 0.07%; +0.06%)</title><rect x="950.7" y="309" width="0.8" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="953.72" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (424 samples, 0.90%; +0.00%)</title><rect x="64.5" y="437" width="10.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="67.46" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (6 samples, 0.01%; +0.01%)</title><rect x="1101.2" y="341" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1104.19" y="351.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (40 samples, 0.08%; +0.01%)</title><rect x="482.1" y="309" width="1.0" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="485.11" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (21 samples, 0.04%; +0.00%)</title><rect x="789.9" y="117" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="792.93" y="127.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (296 samples, 0.63%; -0.02%)</title><rect x="469.8" y="229" width="7.4" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="472.81" y="239.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (8 samples, 0.02%; -0.00%)</title><rect x="893.7" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="896.71" y="287.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (46 samples, 0.10%; -0.00%)</title><rect x="1131.9" y="389" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1134.89" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (5 samples, 0.01%; 0.00%)</title><rect x="676.3" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="679.27" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; -0.00%)</title><rect x="192.5" y="101" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="195.54" y="111.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (8 samples, 0.02%; -0.01%)</title><rect x="164.4" y="197" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="167.37" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (23 samples, 0.05%; +0.01%)</title><rect x="295.6" y="245" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="298.57" y="255.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (41 samples, 0.09%; +0.03%)</title><rect x="919.5" y="357" width="1.1" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="922.53" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (5 samples, 0.01%; +0.00%)</title><rect x="674.4" y="485" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="677.42" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (21 samples, 0.04%; -0.02%)</title><rect x="1153.5" y="421" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1156.51" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (20 samples, 0.04%; +0.01%)</title><rect x="744.7" y="373" width="0.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="747.71" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;database&gt;::~shared_ptr (6 samples, 0.01%; +0.00%)</title><rect x="1039.6" y="261" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1042.55" y="271.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (73 samples, 0.15%; -0.01%)</title><rect x="1117.9" y="405" width="1.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1120.91" y="415.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (54 samples, 0.11%; -0.03%)</title><rect x="10.3" y="581" width="1.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="13.27" y="591.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (24 samples, 0.05%; +0.00%)</title><rect x="41.8" y="453" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="44.82" y="463.5" ></text>
</g>
<g >
<title>db::is_serial_consistency (9 samples, 0.02%; +0.02%)</title><rect x="1138.3" y="437" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1141.31" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (9 samples, 0.02%; -0.01%)</title><rect x="1148.0" y="485" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1151.01" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (5 samples, 0.01%; -0.01%)</title><rect x="121.1" y="309" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="124.10" y="319.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (16 samples, 0.03%; +0.01%)</title><rect x="588.6" y="437" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="591.64" y="447.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (5 samples, 0.01%; +0.01%)</title><rect x="794.3" y="117" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="797.30" y="127.5" ></text>
</g>
<g >
<title>main (46,098 samples, 97.65%; 0.00%)</title><rect x="24.3" y="613" width="1152.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.32" y="623.5" >main</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (33 samples, 0.07%; 0.00%)</title><rect x="1014.4" y="229" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1017.38" y="239.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (6 samples, 0.01%; +0.01%)</title><rect x="1122.7" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1125.71" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (6 samples, 0.01%; 0.00%)</title><rect x="19.1" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.07" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (5 samples, 0.01%; +0.01%)</title><rect x="404.8" y="277" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="407.85" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (26 samples, 0.06%; +0.01%)</title><rect x="438.4" y="277" width="0.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="441.42" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (17 samples, 0.04%; -0.02%)</title><rect x="452.3" y="309" width="0.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="455.32" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (72 samples, 0.15%; +0.00%)</title><rect x="129.9" y="261" width="1.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="132.93" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (13 samples, 0.03%; +0.02%)</title><rect x="771.9" y="309" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="774.90" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (12 samples, 0.03%; +0.00%)</title><rect x="1045.6" y="197" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1048.58" y="207.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (172 samples, 0.36%; +0.01%)</title><rect x="716.0" y="405" width="4.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="719.04" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (19 samples, 0.04%; -0.00%)</title><rect x="648.8" y="485" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="651.75" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.00%)</title><rect x="781.9" y="149" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="784.93" y="159.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (25 samples, 0.05%; 0.00%)</title><rect x="1140.1" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.13" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (23 samples, 0.05%; +0.01%)</title><rect x="646.7" y="469" width="0.6" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="649.73" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (6 samples, 0.01%; +0.01%)</title><rect x="646.2" y="469" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="649.20" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (5 samples, 0.01%; 0.00%)</title><rect x="648.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="651.03" y="479.5" ></text>
</g>
<g >
<title>query::result::result (5 samples, 0.01%; -0.01%)</title><rect x="597.4" y="421" width="0.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="600.39" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (11 samples, 0.02%; -0.01%)</title><rect x="563.0" y="341" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="565.97" y="351.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (5 samples, 0.01%; 0.00%)</title><rect x="23.4" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.42" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (42 samples, 0.09%; +0.01%)</title><rect x="639.5" y="405" width="1.0" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="642.45" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (925 samples, 1.96%; -0.01%)</title><rect x="629.9" y="501" width="23.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="632.88" y="511.5" >s..</text>
</g>
<g >
<title>position_in_partition_view::for_range_end (33 samples, 0.07%; -0.03%)</title><rect x="224.4" y="229" width="0.9" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="227.43" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="678.5" y="485" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="681.55" y="495.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (14 samples, 0.03%; +0.01%)</title><rect x="16.0" y="613" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="18.97" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (7 samples, 0.01%; 0.00%)</title><rect x="660.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="663.13" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, auth::role_or_anonymous&amp;&amp;, auth::get_permissions (5 samples, 0.01%; +0.01%)</title><rect x="804.0" y="309" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="807.00" y="319.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (5 samples, 0.01%; 0.00%)</title><rect x="24.1" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.10" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (11 samples, 0.02%; +0.01%)</title><rect x="400.2" y="213" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="403.23" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (43 samples, 0.09%; +0.02%)</title><rect x="34.7" y="485" width="1.1" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="37.75" y="495.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (90 samples, 0.19%; +0.01%)</title><rect x="493.9" y="229" width="2.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="496.88" y="239.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (95 samples, 0.20%; -0.00%)</title><rect x="390.3" y="229" width="2.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="393.33" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (5 samples, 0.01%; +0.00%)</title><rect x="22.3" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="25.30" y="415.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (6 samples, 0.01%; +0.01%)</title><rect x="882.4" y="389" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="885.41" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (22 samples, 0.05%; -0.02%)</title><rect x="525.6" y="341" width="0.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="528.58" y="351.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (7 samples, 0.01%; -0.01%)</title><rect x="920.7" y="389" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="923.65" y="399.5" ></text>
</g>
<g >
<title>query::querier_base::close (1,257 samples, 2.66%; -0.02%)</title><rect x="543.2" y="437" width="31.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="546.25" y="447.5" >qu..</text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (38 samples, 0.08%; +0.01%)</title><rect x="608.4" y="421" width="1.0" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="611.44" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (6 samples, 0.01%; +0.01%)</title><rect x="625.5" y="469" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="628.51" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (203 samples, 0.43%; -0.01%)</title><rect x="816.0" y="341" width="5.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="819.00" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (26 samples, 0.06%; +0.01%)</title><rect x="266.3" y="325" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="269.25" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (106 samples, 0.22%; +0.01%)</title><rect x="472.9" y="197" width="2.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="475.94" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;mutation_fragment*&gt;::take_value (7 samples, 0.01%; -0.01%)</title><rect x="416.2" y="405" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="419.17" y="415.5" ></text>
</g>
<g >
<title>table::set_hit_rate (66 samples, 0.14%; 0.00%)</title><rect x="698.0" y="453" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="701.02" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (2,899 samples, 6.14%; -0.01%)</title><rect x="977.4" y="357" width="72.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="980.42" y="367.5" >service:..</text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (15 samples, 0.03%; -0.00%)</title><rect x="38.7" y="437" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="41.72" y="447.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.06%; +0.00%)</title><rect x="596.7" y="421" width="0.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="599.66" y="431.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (43 samples, 0.09%; +0.03%)</title><rect x="367.5" y="181" width="1.0" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="370.46" y="191.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (23 samples, 0.05%; +0.01%)</title><rect x="639.9" y="389" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="642.88" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; -0.00%)</title><rect x="799.9" y="213" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="802.92" y="223.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (42 samples, 0.09%; 0.00%)</title><rect x="315.7" y="181" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="318.67" y="191.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (46 samples, 0.10%; 0.00%)</title><rect x="403.7" y="245" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="406.70" y="255.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (435 samples, 0.92%; +0.01%)</title><rect x="653.0" y="501" width="10.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="656.00" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (189 samples, 0.40%; 0.00%)</title><rect x="17.4" y="421" width="4.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.40" y="431.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (8 samples, 0.02%; +0.01%)</title><rect x="214.7" y="101" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="217.71" y="111.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (235 samples, 0.50%; +0.03%)</title><rect x="131.8" y="261" width="5.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="134.83" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="657.2" y="469" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="660.18" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (15 samples, 0.03%; +0.03%)</title><rect x="656.4" y="453" width="0.3" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="659.35" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (11 samples, 0.02%; +0.02%)</title><rect x="939.8" y="341" width="0.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="942.77" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (51 samples, 0.11%; +0.01%)</title><rect x="635.2" y="421" width="1.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="638.23" y="431.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (6 samples, 0.01%; -0.00%)</title><rect x="598.6" y="437" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="601.56" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (23 samples, 0.05%; +0.00%)</title><rect x="530.0" y="405" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="533.03" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="523.2" y="261" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="526.20" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (28 samples, 0.06%; -0.02%)</title><rect x="1014.5" y="213" width="0.7" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="1017.51" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (7 samples, 0.01%; -0.01%)</title><rect x="1027.2" y="133" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1030.21" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (5 samples, 0.01%; +0.00%)</title><rect x="206.7" y="101" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="209.69" y="111.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (11,102 samples, 23.52%; -0.00%)</title><rect x="861.8" y="485" width="277.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="864.79" y="495.5" >seastar::concrete_execution_stage&lt;sea..</text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (11 samples, 0.02%; -0.01%)</title><rect x="581.7" y="389" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="584.72" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (39 samples, 0.08%; -0.00%)</title><rect x="1152.1" y="437" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1155.08" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (12 samples, 0.03%; -0.00%)</title><rect x="594.0" y="437" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="596.99" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.05%; 0.00%)</title><rect x="1140.1" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.13" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (5 samples, 0.01%; +0.00%)</title><rect x="497.2" y="197" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="500.18" y="207.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%; -0.00%)</title><rect x="419.9" y="373" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="422.90" y="383.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (21 samples, 0.04%; +0.01%)</title><rect x="751.7" y="325" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="754.68" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (12 samples, 0.03%; +0.01%)</title><rect x="534.4" y="357" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="537.38" y="367.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (4,335 samples, 9.18%; +0.00%)</title><rect x="419.6" y="389" width="108.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="422.62" y="399.5" >std::function..</text>
</g>
<g >
<title>schema::get_partitioner (7 samples, 0.01%; -0.05%)</title><rect x="929.8" y="405" width="0.1" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="932.77" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (53 samples, 0.11%; +0.01%)</title><rect x="850.6" y="421" width="1.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="853.61" y="431.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (34 samples, 0.07%; -0.02%)</title><rect x="125.9" y="277" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="128.93" y="287.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (88 samples, 0.19%; 0.00%)</title><rect x="1170.8" y="437" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1173.83" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (17 samples, 0.04%; +0.00%)</title><rect x="1044.5" y="213" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1047.48" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (5 samples, 0.01%; +0.01%)</title><rect x="844.0" y="357" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="846.97" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (7 samples, 0.01%; -0.00%)</title><rect x="826.3" y="389" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="829.27" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (29 samples, 0.06%; +0.01%)</title><rect x="1034.5" y="213" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1037.48" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (27 samples, 0.06%; -0.02%)</title><rect x="685.0" y="485" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="688.05" y="495.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (8 samples, 0.02%; +0.01%)</title><rect x="1101.5" y="357" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1104.47" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (63 samples, 0.13%; -0.01%)</title><rect x="736.7" y="277" width="1.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="739.71" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (5 samples, 0.01%; 0.00%)</title><rect x="1140.2" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.16" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (8 samples, 0.02%; +0.00%)</title><rect x="437.1" y="261" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="440.07" y="271.5" ></text>
</g>
<g >
<title>operator new (33 samples, 0.07%; -0.00%)</title><rect x="290.1" y="293" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="293.07" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::stats (37 samples, 0.08%; +0.01%)</title><rect x="479.6" y="309" width="1.0" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="482.64" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (6 samples, 0.01%; +0.01%)</title><rect x="1168.0" y="485" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1170.95" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (11 samples, 0.02%; +0.01%)</title><rect x="1135.6" y="421" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1138.59" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (6 samples, 0.01%; -0.00%)</title><rect x="478.6" y="325" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="481.56" y="335.5" ></text>
</g>
<g >
<title>reader_permit::consume (8 samples, 0.02%; 0.00%)</title><rect x="157.6" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="160.62" y="207.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (12 samples, 0.03%; +0.03%)</title><rect x="393.8" y="229" width="0.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="396.83" y="239.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.07%; 0.00%)</title><rect x="482.3" y="293" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="485.28" y="303.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (13 samples, 0.03%; -0.03%)</title><rect x="222.1" y="165" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="225.11" y="175.5" ></text>
</g>
<g >
<title>compound_type&lt; (133 samples, 0.28%; +0.01%)</title><rect x="921.0" y="373" width="3.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="924.03" y="383.5" ></text>
</g>
<g >
<title>operator delete (24 samples, 0.05%; +0.00%)</title><rect x="573.7" y="389" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="576.74" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (31 samples, 0.07%; +0.02%)</title><rect x="1122.9" y="421" width="0.7" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1125.86" y="431.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (12 samples, 0.03%; -0.01%)</title><rect x="303.9" y="213" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="306.87" y="223.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (280 samples, 0.59%; -0.01%)</title><rect x="910.6" y="373" width="7.0" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="913.63" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (18 samples, 0.04%; +0.01%)</title><rect x="593.5" y="437" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="596.54" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (46 samples, 0.10%; +0.01%)</title><rect x="1157.6" y="421" width="1.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1160.58" y="431.5" ></text>
</g>
<g >
<title>operator new (108 samples, 0.23%; -0.00%)</title><rect x="952.5" y="405" width="2.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="955.47" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (10 samples, 0.02%; 0.00%)</title><rect x="1092.5" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1095.47" y="287.5" ></text>
</g>
<g >
<title>__dynamic_cast (8 samples, 0.02%; -0.01%)</title><rect x="12.0" y="581" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="14.97" y="591.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (13 samples, 0.03%; -0.04%)</title><rect x="1085.7" y="277" width="0.3" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="1088.69" y="287.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (16 samples, 0.03%; +0.02%)</title><rect x="586.2" y="389" width="0.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="589.22" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (79 samples, 0.17%; -0.01%)</title><rect x="728.5" y="373" width="2.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="731.51" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (7 samples, 0.01%; 0.00%)</title><rect x="23.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.40" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (69 samples, 0.15%; 0.00%)</title><rect x="19.6" y="341" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.65" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (46 samples, 0.10%; +0.03%)</title><rect x="817.7" y="293" width="1.1" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="820.67" y="303.5" ></text>
</g>
<g >
<title>__tls_init (5 samples, 0.01%; -0.01%)</title><rect x="450.8" y="325" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="453.84" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; +0.00%)</title><rect x="511.9" y="325" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="514.93" y="335.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (42 samples, 0.09%; +0.00%)</title><rect x="936.1" y="373" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="939.15" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (7 samples, 0.01%; +0.00%)</title><rect x="820.7" y="293" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="823.70" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (7 samples, 0.01%; +0.00%)</title><rect x="1145.9" y="485" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1148.88" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (65 samples, 0.14%; -0.04%)</title><rect x="960.8" y="357" width="1.6" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="963.82" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (13 samples, 0.03%; -0.01%)</title><rect x="734.9" y="293" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="737.94" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,204 samples, 4.67%; +0.01%)</title><rect x="162.7" y="229" width="55.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="165.67" y="239.5" >parti..</text>
</g>
<g >
<title>row_cache::do_make_reader (420 samples, 0.89%; -0.12%)</title><rect x="514.3" y="325" width="10.5" height="15.0" fill="rgb(55,55,255)" rx="2" ry="2" />
<text  x="517.33" y="335.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (44 samples, 0.09%; -0.01%)</title><rect x="726.5" y="389" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="729.49" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (79 samples, 0.17%; -0.00%)</title><rect x="239.7" y="213" width="2.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="242.68" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (6 samples, 0.01%; -0.01%)</title><rect x="766.7" y="341" width="0.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="769.68" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (9 samples, 0.02%; -0.01%)</title><rect x="477.8" y="325" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="480.81" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (5 samples, 0.01%; +0.01%)</title><rect x="1121.3" y="405" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1124.26" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (16 samples, 0.03%; 0.00%)</title><rect x="867.1" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.09" y="479.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (645 samples, 1.37%; +0.03%)</title><rect x="724.4" y="421" width="16.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="727.39" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (19 samples, 0.04%; +0.01%)</title><rect x="475.9" y="181" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="478.94" y="191.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (5 samples, 0.01%; -0.00%)</title><rect x="887.1" y="309" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="890.08" y="319.5" ></text>
</g>
<g >
<title>operator new (58 samples, 0.12%; -0.01%)</title><rect x="839.8" y="405" width="1.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="842.77" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="420.0" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="423.02" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (21 samples, 0.04%; +0.04%)</title><rect x="866.1" y="453" width="0.6" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="869.14" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (15 samples, 0.03%; 0.00%)</title><rect x="896.4" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="899.38" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (14 samples, 0.03%; -0.01%)</title><rect x="694.9" y="405" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="697.92" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (5 samples, 0.01%; -0.00%)</title><rect x="628.1" y="485" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="631.11" y="495.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (20 samples, 0.04%; +0.04%)</title><rect x="891.7" y="293" width="0.5" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="894.66" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (176 samples, 0.37%; -0.07%)</title><rect x="394.6" y="213" width="4.4" height="15.0" fill="rgb(128,128,255)" rx="2" ry="2" />
<text  x="397.60" y="223.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (22 samples, 0.05%; -0.01%)</title><rect x="499.2" y="197" width="0.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="502.18" y="207.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (12 samples, 0.03%; +0.01%)</title><rect x="1027.8" y="133" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1030.81" y="143.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (17 samples, 0.04%; -0.11%)</title><rect x="493.3" y="229" width="0.5" height="15.0" fill="rgb(68,68,255)" rx="2" ry="2" />
<text  x="496.33" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (9 samples, 0.02%; -0.01%)</title><rect x="364.4" y="149" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="367.36" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (6 samples, 0.01%; 0.00%)</title><rect x="860.5" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.46" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::shared_ptr_count_for&lt;cql3::metadata&amp;&gt; (6 samples, 0.01%; +0.00%)</title><rect x="643.1" y="453" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="646.10" y="463.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (15 samples, 0.03%; -0.02%)</title><rect x="1095.0" y="309" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1097.97" y="319.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (6 samples, 0.01%; -0.00%)</title><rect x="796.9" y="261" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="799.87" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (5 samples, 0.01%; +0.01%)</title><rect x="702.5" y="501" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="705.52" y="511.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (9 samples, 0.02%; +0.00%)</title><rect x="445.7" y="277" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="448.72" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (152 samples, 0.32%; -0.01%)</title><rect x="787.5" y="165" width="3.8" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="790.50" y="175.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (7 samples, 0.01%; +0.01%)</title><rect x="819.5" y="309" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="822.50" y="319.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (258 samples, 0.55%; +0.02%)</title><rect x="1078.8" y="245" width="6.5" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="1081.82" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (5 samples, 0.01%; -0.00%)</title><rect x="76.5" y="453" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="79.51" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (5 samples, 0.01%; -0.01%)</title><rect x="955.2" y="405" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="958.17" y="415.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (7 samples, 0.01%; -0.00%)</title><rect x="700.4" y="469" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="703.37" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1,186 samples, 2.51%; -0.01%)</title><rect x="1143.6" y="501" width="29.7" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1146.63" y="511.5" >se..</text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (31 samples, 0.07%; 0.00%)</title><rect x="861.0" y="485" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.01" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (17 samples, 0.04%; +0.00%)</title><rect x="1003.5" y="261" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1006.54" y="271.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (108 samples, 0.23%; +0.02%)</title><rect x="407.5" y="293" width="2.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="410.52" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (23 samples, 0.05%; -0.02%)</title><rect x="39.9" y="421" width="0.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="42.87" y="431.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (6 samples, 0.01%; -0.00%)</title><rect x="1170.7" y="437" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1173.68" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (24 samples, 0.05%; +0.01%)</title><rect x="761.2" y="373" width="0.6" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="764.23" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.00%)</title><rect x="803.7" y="309" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="806.75" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (9 samples, 0.02%; +0.01%)</title><rect x="813.4" y="325" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="816.42" y="335.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (442 samples, 0.94%; -0.00%)</title><rect x="562.5" y="389" width="11.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="565.52" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (11 samples, 0.02%; +0.02%)</title><rect x="900.8" y="373" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="903.83" y="383.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (8 samples, 0.02%; +0.00%)</title><rect x="845.1" y="453" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="848.12" y="463.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (45 samples, 0.10%; -0.02%)</title><rect x="1128.7" y="389" width="1.1" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="1131.66" y="399.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1,283 samples, 2.72%; +0.03%)</title><rect x="1008.0" y="277" width="32.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1011.03" y="287.5" >se..</text>
</g>
<g >
<title>seastar::memory::allocate (71 samples, 0.15%; +0.00%)</title><rect x="1115.2" y="341" width="1.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1118.24" y="351.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (7 samples, 0.01%; -0.01%)</title><rect x="412.3" y="341" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="415.27" y="351.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (16 samples, 0.03%; +0.03%)</title><rect x="895.9" y="325" width="0.4" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="898.86" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (41 samples, 0.09%; -0.01%)</title><rect x="1104.8" y="389" width="1.0" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1107.77" y="399.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::done (11 samples, 0.02%; +0.01%)</title><rect x="684.4" y="453" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="687.45" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (31 samples, 0.07%; -0.01%)</title><rect x="283.4" y="389" width="0.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="286.45" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (20 samples, 0.04%; -0.02%)</title><rect x="1170.0" y="453" width="0.5" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="1172.95" y="463.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (367 samples, 0.78%; +0.00%)</title><rect x="307.6" y="213" width="9.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="310.59" y="223.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.01%; +0.01%)</title><rect x="694.5" y="421" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="697.52" y="431.5" ></text>
</g>
<g >
<title>freeze (5 samples, 0.01%; 0.00%)</title><rect x="1140.3" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.33" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (10 samples, 0.02%; +0.02%)</title><rect x="505.1" y="293" width="0.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="508.08" y="303.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (6 samples, 0.01%; -0.01%)</title><rect x="1028.9" y="165" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1031.86" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (15 samples, 0.03%; +0.01%)</title><rect x="674.6" y="485" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="677.57" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (5 samples, 0.01%; +0.00%)</title><rect x="562.2" y="341" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="565.22" y="351.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (9 samples, 0.02%; +0.01%)</title><rect x="646.8" y="453" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="649.83" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (10 samples, 0.02%; 0.00%)</title><rect x="676.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="679.70" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (12 samples, 0.03%; +0.00%)</title><rect x="962.6" y="373" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="965.59" y="383.5" ></text>
</g>
<g >
<title>posix_memalign (158 samples, 0.33%; -0.01%)</title><rect x="188.3" y="53" width="4.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="191.32" y="63.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (14 samples, 0.03%; +0.02%)</title><rect x="164.0" y="197" width="0.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="167.02" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (6 samples, 0.01%; -0.02%)</title><rect x="987.1" y="277" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="990.09" y="287.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (5 samples, 0.01%; -0.04%)</title><rect x="77.9" y="453" width="0.1" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="80.86" y="463.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (6 samples, 0.01%; 0.00%)</title><rect x="1174.3" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1177.25" y="447.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (7 samples, 0.01%; -0.01%)</title><rect x="839.2" y="421" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="842.17" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (5 samples, 0.01%; +0.00%)</title><rect x="20.4" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="23.37" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (7 samples, 0.01%; 0.00%)</title><rect x="830.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="833.32" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (8 samples, 0.02%; -0.02%)</title><rect x="774.9" y="245" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="777.93" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (7 samples, 0.01%; +0.01%)</title><rect x="640.2" y="373" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="643.23" y="383.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (10 samples, 0.02%; +0.01%)</title><rect x="696.5" y="421" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="699.54" y="431.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (49 samples, 0.10%; 0.00%)</title><rect x="666.9" y="469" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="669.92" y="479.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (78 samples, 0.17%; 0.00%)</title><rect x="532.9" y="389" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="535.93" y="399.5" ></text>
</g>
<g >
<title>database::find_column_family (58 samples, 0.12%; +0.00%)</title><rect x="814.4" y="341" width="1.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="817.42" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (11 samples, 0.02%; +0.02%)</title><rect x="192.3" y="53" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="195.27" y="63.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (8 samples, 0.02%; -0.02%)</title><rect x="897.8" y="357" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="900.76" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (37 samples, 0.08%; +0.03%)</title><rect x="935.1" y="357" width="0.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="938.12" y="367.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (127 samples, 0.27%; +0.00%)</title><rect x="520.3" y="293" width="3.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="523.33" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (15 samples, 0.03%; +0.01%)</title><rect x="227.6" y="245" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="230.63" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (8 samples, 0.02%; +0.00%)</title><rect x="38.9" y="421" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="41.89" y="431.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (25 samples, 0.05%; -0.03%)</title><rect x="517.0" y="261" width="0.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="520.03" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (22,323 samples, 47.29%; -0.04%)</title><rect x="55.4" y="469" width="558.0" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="58.44" y="479.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>operator new (54 samples, 0.11%; -0.00%)</title><rect x="707.8" y="421" width="1.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="710.77" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (61 samples, 0.13%; -0.02%)</title><rect x="698.1" y="437" width="1.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="701.12" y="447.5" ></text>
</g>
<g >
<title>auth::resource::resource (58 samples, 0.12%; -0.01%)</title><rect x="759.6" y="373" width="1.5" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="762.63" y="383.5" ></text>
</g>
<g >
<title>schema::partition_key_size (12 samples, 0.03%; +0.03%)</title><rect x="1123.6" y="421" width="0.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1126.64" y="431.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (6 samples, 0.01%; -0.01%)</title><rect x="18.3" y="245" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="21.32" y="255.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (5 samples, 0.01%; 0.00%)</title><rect x="217.4" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="220.44" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (11 samples, 0.02%; 0.00%)</title><rect x="259.9" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="262.90" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (11 samples, 0.02%; +0.01%)</title><rect x="833.7" y="389" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="836.72" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (52 samples, 0.11%; -0.00%)</title><rect x="908.2" y="341" width="1.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="911.18" y="351.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (5 samples, 0.01%; -0.00%)</title><rect x="734.8" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="737.81" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (28 samples, 0.06%; +0.01%)</title><rect x="628.5" y="485" width="0.7" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="631.46" y="495.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (25 samples, 0.05%; -0.04%)</title><rect x="313.6" y="181" width="0.7" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="316.64" y="191.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (6 samples, 0.01%; -0.04%)</title><rect x="139.3" y="261" width="0.2" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="142.33" y="271.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (29 samples, 0.06%; -0.01%)</title><rect x="1023.0" y="197" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1025.98" y="207.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (5 samples, 0.01%; -0.01%)</title><rect x="696.8" y="421" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="699.79" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (15 samples, 0.03%; -0.00%)</title><rect x="829.8" y="357" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="832.82" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (6 samples, 0.01%; 0.00%)</title><rect x="20.1" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.10" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (22 samples, 0.05%; +0.00%)</title><rect x="22.5" y="421" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="25.50" y="431.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (12 samples, 0.03%; 0.00%)</title><rect x="503.8" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="506.81" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (5 samples, 0.01%; +0.00%)</title><rect x="573.4" y="373" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="576.39" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.00%)</title><rect x="918.2" y="373" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="921.20" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (25 samples, 0.05%; +0.03%)</title><rect x="987.8" y="261" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="990.84" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (148 samples, 0.31%; +0.01%)</title><rect x="555.6" y="293" width="3.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="558.62" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (12 samples, 0.03%; +0.02%)</title><rect x="881.1" y="389" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="884.11" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (12 samples, 0.03%; +0.01%)</title><rect x="25.0" y="517" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="28.05" y="527.5" ></text>
</g>
<g >
<title>database::query (1,064 samples, 2.25%; -0.00%)</title><rect x="1009.5" y="261" width="26.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1012.51" y="271.5" >d..</text>
</g>
<g >
<title>seastar::memory::allocate (58 samples, 0.12%; +0.03%)</title><rect x="839.8" y="389" width="1.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="842.77" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="927.1" y="373" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="930.08" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (8 samples, 0.02%; +0.00%)</title><rect x="215.5" y="133" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="218.54" y="143.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (37 samples, 0.08%; +0.02%)</title><rect x="1045.0" y="245" width="1.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1048.03" y="255.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (4,529 samples, 9.59%; 0.00%)</title><rect x="417.5" y="421" width="113.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="420.55" y="431.5" >query::querie..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (8 samples, 0.02%; -0.02%)</title><rect x="281.3" y="325" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="284.32" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (10 samples, 0.02%; 0.00%)</title><rect x="1100.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1103.47" y="351.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (73 samples, 0.15%; +0.04%)</title><rect x="390.7" y="213" width="1.8" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="393.70" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (7 samples, 0.01%; -0.00%)</title><rect x="703.9" y="501" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="706.92" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (7 samples, 0.01%; +0.00%)</title><rect x="140.2" y="277" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="143.15" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; +0.00%)</title><rect x="776.9" y="229" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="779.90" y="239.5" ></text>
</g>
<g >
<title>dht::tri_compare (56 samples, 0.12%; +0.05%)</title><rect x="1077.4" y="245" width="1.4" height="15.0" fill="rgb(255,152,152)" rx="2" ry="2" />
<text  x="1080.42" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (11 samples, 0.02%; +0.01%)</title><rect x="200.3" y="133" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="203.29" y="143.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (10 samples, 0.02%; +0.00%)</title><rect x="858.6" y="501" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="861.61" y="511.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (13 samples, 0.03%; 0.00%)</title><rect x="1046.7" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1049.73" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (102 samples, 0.22%; +0.00%)</title><rect x="828.2" y="437" width="2.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="831.24" y="447.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (176 samples, 0.37%; -0.06%)</title><rect x="351.9" y="165" width="4.4" height="15.0" fill="rgb(133,133,255)" rx="2" ry="2" />
<text  x="354.86" y="175.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (56 samples, 0.12%; -0.02%)</title><rect x="516.6" y="293" width="1.4" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="519.55" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (60 samples, 0.13%; -0.01%)</title><rect x="363.1" y="197" width="1.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="366.11" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (74 samples, 0.16%; -0.03%)</title><rect x="651.1" y="453" width="1.9" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="654.10" y="463.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (11 samples, 0.02%; +0.01%)</title><rect x="696.3" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="699.27" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (24 samples, 0.05%; 0.00%)</title><rect x="675.8" y="325" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.80" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (29 samples, 0.06%; +0.03%)</title><rect x="539.6" y="389" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="542.57" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (10 samples, 0.02%; 0.00%)</title><rect x="20.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.87" y="287.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (28 samples, 0.06%; +0.03%)</title><rect x="924.4" y="389" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="927.40" y="399.5" ></text>
</g>
<g >
<title>query_result_builder::consume (11 samples, 0.02%; 0.00%)</title><rect x="675.9" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.92" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (36 samples, 0.08%; +0.02%)</title><rect x="497.4" y="181" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="500.38" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; -0.01%)</title><rect x="1136.6" y="405" width="0.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1139.56" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (468 samples, 0.99%; -0.00%)</title><rect x="663.9" y="501" width="11.7" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="666.90" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="618.3" y="485" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="621.33" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (9 samples, 0.02%; +0.01%)</title><rect x="837.5" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="840.47" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (21 samples, 0.04%; +0.01%)</title><rect x="1149.7" y="485" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1152.68" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (15 samples, 0.03%; -0.01%)</title><rect x="764.9" y="357" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="767.88" y="367.5" ></text>
</g>
<g >
<title>tracing::add_table_name (12 samples, 0.03%; -0.05%)</title><rect x="1136.7" y="421" width="0.3" height="15.0" fill="rgb(149,149,255)" rx="2" ry="2" />
<text  x="1139.71" y="431.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (7 samples, 0.01%; +0.01%)</title><rect x="990.5" y="325" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="993.51" y="335.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::find_bucket_index (5 samples, 0.01%; +0.01%)</title><rect x="666.8" y="469" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="669.80" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (45 samples, 0.10%; +0.09%)</title><rect x="1048.4" y="309" width="1.1" height="15.0" fill="rgb(255,94,94)" rx="2" ry="2" />
<text  x="1051.38" y="319.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (8 samples, 0.02%; +0.01%)</title><rect x="245.7" y="213" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="248.71" y="223.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (9 samples, 0.02%; -0.02%)</title><rect x="364.8" y="213" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="367.76" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (6 samples, 0.01%; +0.01%)</title><rect x="919.4" y="357" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="922.38" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (21 samples, 0.04%; -0.07%)</title><rect x="891.1" y="293" width="0.6" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="894.13" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.01%)</title><rect x="137.2" y="245" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="140.18" y="255.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (14 samples, 0.03%; +0.01%)</title><rect x="691.4" y="453" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="694.37" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (24 samples, 0.05%; -0.01%)</title><rect x="213.0" y="149" width="0.6" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="216.04" y="159.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (16 samples, 0.03%; -0.01%)</title><rect x="1041.0" y="277" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1043.98" y="287.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (70 samples, 0.15%; +0.02%)</title><rect x="892.2" y="293" width="1.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="895.16" y="303.5" ></text>
</g>
<g >
<title>partition_entry::read (18 samples, 0.04%; +0.03%)</title><rect x="510.3" y="325" width="0.4" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="513.25" y="335.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cell (5 samples, 0.01%; +0.00%)</title><rect x="24.1" y="341" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="27.10" y="351.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (6 samples, 0.01%; +0.01%)</title><rect x="675.4" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="678.42" y="495.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (850 samples, 1.80%; -0.00%)</title><rect x="484.1" y="309" width="21.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="487.08" y="319.5" >s..</text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (15 samples, 0.03%; +0.03%)</title><rect x="410.2" y="293" width="0.4" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="413.22" y="303.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (38 samples, 0.08%; -0.00%)</title><rect x="714.6" y="405" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="717.62" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::get_value (5 samples, 0.01%; +0.01%)</title><rect x="704.1" y="501" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="707.09" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (9 samples, 0.02%; -0.04%)</title><rect x="662.1" y="437" width="0.2" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="665.05" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (67 samples, 0.14%; -0.01%)</title><rect x="245.9" y="213" width="1.7" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="248.91" y="223.5" ></text>
</g>
<g >
<title>operator delete (14 samples, 0.03%; -0.00%)</title><rect x="658.8" y="469" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="661.83" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (23 samples, 0.05%; -0.03%)</title><rect x="853.8" y="421" width="0.5" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="856.76" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (12 samples, 0.03%; -0.01%)</title><rect x="627.0" y="485" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="630.01" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (25 samples, 0.05%; +0.00%)</title><rect x="769.2" y="293" width="0.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="772.23" y="303.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (290 samples, 0.61%; -0.00%)</title><rect x="714.3" y="437" width="7.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="717.27" y="447.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (34 samples, 0.07%; -0.04%)</title><rect x="302.9" y="213" width="0.9" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="305.94" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (7 samples, 0.01%; +0.01%)</title><rect x="1113.0" y="357" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1116.04" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="1172.1" y="421" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1175.05" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (5 samples, 0.01%; +0.01%)</title><rect x="1143.3" y="501" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1146.26" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (50 samples, 0.11%; -0.01%)</title><rect x="758.1" y="357" width="1.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="761.08" y="367.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (7 samples, 0.01%; -0.01%)</title><rect x="1152.7" y="405" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1155.71" y="415.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (76 samples, 0.16%; -0.00%)</title><rect x="1112.2" y="389" width="1.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1115.16" y="399.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (18 samples, 0.04%; +0.01%)</title><rect x="818.4" y="277" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="821.37" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (79 samples, 0.17%; +0.01%)</title><rect x="968.4" y="341" width="1.9" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="971.37" y="351.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; -0.01%)</title><rect x="579.6" y="389" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="582.59" y="399.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (203 samples, 0.43%; 0.00%)</title><rect x="17.1" y="437" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.07" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (150 samples, 0.32%; -0.02%)</title><rect x="263.2" y="341" width="3.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="266.15" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (142 samples, 0.30%; +0.03%)</title><rect x="188.7" y="37" width="3.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="191.72" y="47.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (14 samples, 0.03%; +0.02%)</title><rect x="1092.7" y="293" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1095.72" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (17 samples, 0.04%; +0.02%)</title><rect x="840.8" y="373" width="0.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="843.79" y="383.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (159 samples, 0.34%; -0.13%)</title><rect x="342.6" y="165" width="4.0" height="15.0" fill="rgb(52,52,255)" rx="2" ry="2" />
<text  x="345.61" y="175.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (16 samples, 0.03%; +0.02%)</title><rect x="720.9" y="389" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="723.89" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; 0.00%)</title><rect x="548.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="551.32" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (7 samples, 0.01%; -0.01%)</title><rect x="717.5" y="293" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="720.49" y="303.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (133 samples, 0.28%; 0.00%)</title><rect x="986.5" y="293" width="3.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="989.49" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (13 samples, 0.03%; +0.01%)</title><rect x="917.3" y="341" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="920.30" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (12 samples, 0.03%; -0.01%)</title><rect x="313.3" y="165" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="316.34" y="175.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; +0.00%)</title><rect x="58.7" y="453" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="61.72" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (279 samples, 0.59%; +0.00%)</title><rect x="982.9" y="341" width="6.9" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="985.86" y="351.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (14 samples, 0.03%; +0.02%)</title><rect x="561.7" y="325" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="564.74" y="335.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (6 samples, 0.01%; +0.01%)</title><rect x="249.3" y="309" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="252.25" y="319.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (5 samples, 0.01%; +0.00%)</title><rect x="736.6" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="739.59" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (148 samples, 0.31%; -0.02%)</title><rect x="154.2" y="229" width="3.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="157.20" y="239.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.05%; +0.03%)</title><rect x="1168.8" y="453" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1171.78" y="463.5" ></text>
</g>
<g >
<title>operator new (141 samples, 0.30%; +0.00%)</title><rect x="1004.0" y="277" width="3.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1007.01" y="287.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (687 samples, 1.46%; +0.04%)</title><rect x="883.7" y="373" width="17.1" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="886.66" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="800.4" y="245" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="803.37" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (15 samples, 0.03%; -0.03%)</title><rect x="267.6" y="341" width="0.4" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="270.58" y="351.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (5 samples, 0.01%; +0.00%)</title><rect x="225.1" y="213" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="228.13" y="223.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (17 samples, 0.04%; 0.00%)</title><rect x="751.2" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="754.23" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (45 samples, 0.10%; -0.01%)</title><rect x="848.9" y="341" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="851.89" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (7 samples, 0.01%; -0.00%)</title><rect x="800.3" y="261" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="803.35" y="271.5" ></text>
</g>
<g >
<title>mutation_querier::consume (1,751 samples, 3.71%; +0.08%)</title><rect x="318.0" y="197" width="43.8" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="321.04" y="207.5" >muta..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (10 samples, 0.02%; +0.00%)</title><rect x="615.9" y="485" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="618.86" y="495.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (18 samples, 0.04%; -0.02%)</title><rect x="823.5" y="293" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="826.54" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (12 samples, 0.03%; +0.00%)</title><rect x="346.6" y="165" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="349.59" y="175.5" ></text>
</g>
<g >
<title>tombstone::apply (15 samples, 0.03%; -0.00%)</title><rect x="385.5" y="197" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="388.50" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (8 samples, 0.02%; 0.00%)</title><rect x="629.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="632.16" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%; +0.00%)</title><rect x="1130.2" y="389" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1133.16" y="399.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (133 samples, 0.28%; -0.01%)</title><rect x="970.8" y="341" width="3.3" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="973.77" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (41 samples, 0.09%; +0.02%)</title><rect x="1070.3" y="293" width="1.0" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1073.30" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="551.9" y="293" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="554.95" y="303.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (10 samples, 0.02%; -0.01%)</title><rect x="500.0" y="213" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="503.03" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (23 samples, 0.05%; +0.02%)</title><rect x="982.3" y="341" width="0.5" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="985.26" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (9 samples, 0.02%; +0.01%)</title><rect x="96.7" y="421" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="99.68" y="431.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (6 samples, 0.01%; +0.00%)</title><rect x="122.5" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="125.45" y="303.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (29 samples, 0.06%; -0.00%)</title><rect x="1027.4" y="149" width="0.7" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1030.38" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (15 samples, 0.03%; -0.01%)</title><rect x="687.4" y="469" width="0.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="690.42" y="479.5" ></text>
</g>
<g >
<title>operator delete (27 samples, 0.06%; -0.01%)</title><rect x="798.7" y="245" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="801.70" y="255.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (9 samples, 0.02%; -0.01%)</title><rect x="910.4" y="373" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="913.38" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (48 samples, 0.10%; -0.02%)</title><rect x="327.8" y="181" width="1.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="330.76" y="191.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.07%; +0.01%)</title><rect x="486.3" y="293" width="0.8" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="489.33" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (51 samples, 0.11%; +0.00%)</title><rect x="714.4" y="421" width="1.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="717.44" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (51 samples, 0.11%; +0.01%)</title><rect x="809.6" y="309" width="1.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="812.57" y="319.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (5 samples, 0.01%; 0.00%)</title><rect x="24.0" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.97" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (10 samples, 0.02%; +0.00%)</title><rect x="1140.5" y="213" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1143.46" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (18 samples, 0.04%; +0.00%)</title><rect x="35.8" y="485" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="38.82" y="495.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (10 samples, 0.02%; -0.01%)</title><rect x="502.3" y="229" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="505.33" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (8 samples, 0.02%; 0.00%)</title><rect x="703.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.42" y="511.5" ></text>
</g>
<g >
<title>operator new (23 samples, 0.05%; +0.00%)</title><rect x="768.5" y="309" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="771.53" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (7 samples, 0.01%; 0.00%)</title><rect x="978.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="981.79" y="351.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (66 samples, 0.14%; -0.09%)</title><rect x="341.0" y="165" width="1.6" height="15.0" fill="rgb(94,94,255)" rx="2" ry="2" />
<text  x="343.96" y="175.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (8 samples, 0.02%; +0.01%)</title><rect x="619.5" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="622.48" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (7 samples, 0.01%; -0.00%)</title><rect x="595.1" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="598.09" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (7 samples, 0.01%; +0.01%)</title><rect x="411.1" y="357" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="414.15" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; -0.02%)</title><rect x="93.9" y="421" width="0.2" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="96.88" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (44 samples, 0.09%; +0.01%)</title><rect x="759.8" y="357" width="1.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="762.78" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.00%)</title><rect x="665.2" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="668.20" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (25 samples, 0.05%; 0.00%)</title><rect x="447.3" y="309" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="450.34" y="319.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (9 samples, 0.02%; 0.00%)</title><rect x="284.3" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="287.35" y="415.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (50 samples, 0.11%; +0.06%)</title><rect x="235.9" y="181" width="1.3" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="238.91" y="191.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (53 samples, 0.11%; -0.01%)</title><rect x="272.1" y="309" width="1.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="275.05" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (12 samples, 0.03%; -0.00%)</title><rect x="734.6" y="293" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="737.64" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (29 samples, 0.06%; -0.00%)</title><rect x="671.0" y="469" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="674.00" y="479.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (46,098 samples, 97.65%; 0.00%)</title><rect x="24.3" y="565" width="1152.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.32" y="575.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (9 samples, 0.02%; +0.00%)</title><rect x="740.3" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="743.26" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (13 samples, 0.03%; -0.00%)</title><rect x="560.6" y="293" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="563.65" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (9 samples, 0.02%; 0.00%)</title><rect x="850.0" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="853.04" y="367.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (10 samples, 0.02%; +0.01%)</title><rect x="183.8" y="85" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="186.82" y="95.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (8 samples, 0.02%; +0.01%)</title><rect x="440.4" y="277" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="443.37" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (60 samples, 0.13%; +0.01%)</title><rect x="770.4" y="309" width="1.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="773.41" y="319.5" ></text>
</g>
<g >
<title>auth::resource::parent (91 samples, 0.19%; -0.01%)</title><rect x="770.0" y="325" width="2.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="772.96" y="335.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (44 samples, 0.09%; -0.01%)</title><rect x="563.4" y="357" width="1.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="566.39" y="367.5" ></text>
</g>
<g >
<title>reader_permit::set_max_result_size (5 samples, 0.01%; +0.00%)</title><rect x="53.9" y="469" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="56.89" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (137 samples, 0.29%; -0.00%)</title><rect x="496.5" y="213" width="3.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="499.48" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (6 samples, 0.01%; +0.00%)</title><rect x="42.4" y="453" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="45.42" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (14 samples, 0.03%; -0.00%)</title><rect x="504.1" y="277" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="507.11" y="287.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (7 samples, 0.01%; -0.03%)</title><rect x="227.3" y="245" width="0.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="230.26" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (65 samples, 0.14%; +0.00%)</title><rect x="605.1" y="389" width="1.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="608.14" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (22 samples, 0.05%; -0.01%)</title><rect x="625.1" y="485" width="0.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="628.11" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (12 samples, 0.03%; 0.00%)</title><rect x="24.0" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.97" y="559.5" ></text>
</g>
<g >
<title>[unknown] (231 samples, 0.49%; 0.00%)</title><rect x="10.2" y="597" width="5.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.20" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;managed_bytes&gt;::_M_reset (5 samples, 0.01%; 0.00%)</title><rect x="901.3" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="904.26" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (5 samples, 0.01%; -0.00%)</title><rect x="775.5" y="293" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="778.50" y="303.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (37 samples, 0.08%; +0.03%)</title><rect x="720.4" y="405" width="0.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="723.36" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; -0.01%)</title><rect x="483.2" y="309" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="486.23" y="319.5" ></text>
</g>
<g >
<title>auth::get_permissions (1,205 samples, 2.55%; +0.00%)</title><rect x="773.6" y="309" width="30.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="776.63" y="319.5" >au..</text>
</g>
<g >
<title>service::endpoints_to_replica_ids (104 samples, 0.22%; +0.00%)</title><rect x="1151.4" y="469" width="2.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1154.43" y="479.5" ></text>
</g>
<g >
<title>reader_permit::consume (5 samples, 0.01%; +0.01%)</title><rect x="275.4" y="293" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="278.37" y="303.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (227 samples, 0.48%; +0.00%)</title><rect x="888.2" y="309" width="5.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="891.23" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (7 samples, 0.01%; -0.01%)</title><rect x="1030.7" y="213" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1033.71" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (5 samples, 0.01%; 0.00%)</title><rect x="20.4" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.37" y="303.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; 0.00%)</title><rect x="853.7" y="437" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.74" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (29 samples, 0.06%; +0.00%)</title><rect x="843.2" y="357" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="846.24" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator::operator* (6 samples, 0.01%; +0.00%)</title><rect x="754.0" y="357" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="757.03" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (21 samples, 0.04%; +0.02%)</title><rect x="416.7" y="405" width="0.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="419.72" y="415.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (5 samples, 0.01%; +0.00%)</title><rect x="214.9" y="117" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="217.91" y="127.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (11 samples, 0.02%; -0.02%)</title><rect x="327.5" y="181" width="0.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="330.49" y="191.5" ></text>
</g>
<g >
<title>seastar::app_template::run (46,098 samples, 97.65%; 0.00%)</title><rect x="24.3" y="581" width="1152.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.32" y="591.5" >seastar::app_template::run</text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (5 samples, 0.01%; -0.00%)</title><rect x="753.9" y="325" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="756.91" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (12 samples, 0.03%; -0.00%)</title><rect x="328.7" y="165" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="331.66" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (9 samples, 0.02%; -0.01%)</title><rect x="256.3" y="277" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="259.28" y="287.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (997 samples, 2.11%; +0.02%)</title><rect x="480.7" y="325" width="24.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="483.69" y="335.5" >m..</text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (1,934 samples, 4.10%; -0.03%)</title><rect x="1049.9" y="357" width="48.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1052.93" y="367.5" >serv..</text>
</g>
<g >
<title>operator new (30 samples, 0.06%; -0.00%)</title><rect x="509.5" y="325" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="512.50" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (20 samples, 0.04%; +0.02%)</title><rect x="877.2" y="421" width="0.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="880.16" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (19 samples, 0.04%; +0.02%)</title><rect x="1137.0" y="421" width="0.5" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="1140.01" y="431.5" ></text>
</g>
<g >
<title>query::querier_base::close (18 samples, 0.04%; 0.00%)</title><rect x="1174.0" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1176.98" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (18 samples, 0.04%; +0.01%)</title><rect x="55.0" y="469" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="57.99" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (6 samples, 0.01%; -0.00%)</title><rect x="1101.7" y="357" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1104.72" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (6 samples, 0.01%; +0.01%)</title><rect x="262.8" y="341" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="265.80" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (5 samples, 0.01%; -0.01%)</title><rect x="210.1" y="181" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="213.09" y="191.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (114 samples, 0.24%; +0.02%)</title><rect x="949.3" y="373" width="2.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="952.27" y="383.5" ></text>
</g>
<g >
<title>table::make_reader (4,227 samples, 8.95%; +0.05%)</title><rect x="422.2" y="357" width="105.7" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="425.25" y="367.5" >table::make_..</text>
</g>
<g >
<title>schema::column_at (23 samples, 0.05%; -0.01%)</title><rect x="200.6" y="133" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="203.56" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (43 samples, 0.09%; -0.02%)</title><rect x="1018.2" y="213" width="1.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1021.21" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (18 samples, 0.04%; 0.00%)</title><rect x="1034.0" y="181" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1037.00" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (32 samples, 0.07%; +0.02%)</title><rect x="526.6" y="309" width="0.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="529.55" y="319.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (15 samples, 0.03%; +0.01%)</title><rect x="1028.4" y="165" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1031.43" y="175.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (12 samples, 0.03%; 0.00%)</title><rect x="842.3" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="845.27" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.00%)</title><rect x="1119.9" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1122.86" y="415.5" ></text>
</g>
<g >
<title>schema_registry::learn (5 samples, 0.01%; 0.00%)</title><rect x="47.9" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.92" y="479.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (53 samples, 0.11%; +0.00%)</title><rect x="411.8" y="357" width="1.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="414.80" y="367.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (54 samples, 0.11%; -0.01%)</title><rect x="590.0" y="421" width="1.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="592.96" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (17 samples, 0.04%; +0.00%)</title><rect x="1140.3" y="309" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1143.31" y="319.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (9 samples, 0.02%; 0.00%)</title><rect x="1174.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1177.00" y="415.5" ></text>
</g>
<g >
<title>compound_type&lt; (97 samples, 0.21%; +0.03%)</title><rect x="904.6" y="373" width="2.4" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="907.55" y="383.5" ></text>
</g>
<g >
<title>tombstone::apply (5 samples, 0.01%; +0.00%)</title><rect x="387.1" y="213" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="390.13" y="223.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (10 samples, 0.02%; +0.00%)</title><rect x="686.2" y="469" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="689.22" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (11 samples, 0.02%; -0.02%)</title><rect x="405.5" y="261" width="0.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="408.55" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (6 samples, 0.01%; -0.04%)</title><rect x="447.1" y="325" width="0.2" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="450.12" y="335.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (8 samples, 0.02%; -0.01%)</title><rect x="312.4" y="165" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="315.42" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (14 samples, 0.03%; +0.02%)</title><rect x="75.7" y="453" width="0.4" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="78.71" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (69 samples, 0.15%; -0.00%)</title><rect x="728.7" y="357" width="1.7" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="731.71" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (18 samples, 0.04%; +0.00%)</title><rect x="708.7" y="389" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="711.67" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (73 samples, 0.15%; -0.00%)</title><rect x="143.2" y="261" width="1.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="146.17" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (12 samples, 0.03%; -0.01%)</title><rect x="283.1" y="357" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="286.10" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (193 samples, 0.41%; -0.01%)</title><rect x="985.0" y="325" width="4.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="987.99" y="335.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (86 samples, 0.18%; +0.04%)</title><rect x="439.3" y="309" width="2.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="442.27" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (9 samples, 0.02%; +0.00%)</title><rect x="195.2" y="101" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="198.24" y="111.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (439 samples, 0.93%; +0.03%)</title><rect x="1177.9" y="629" width="10.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1180.85" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (81 samples, 0.17%; +0.01%)</title><rect x="1098.7" y="357" width="2.0" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1101.69" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (5 samples, 0.01%; +0.01%)</title><rect x="222.5" y="181" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="225.48" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (72 samples, 0.15%; -0.01%)</title><rect x="562.7" y="373" width="1.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="565.69" y="383.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (7 samples, 0.01%; +0.00%)</title><rect x="761.5" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="764.51" y="367.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (5 samples, 0.01%; 0.00%)</title><rect x="1140.2" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.16" y="239.5" ></text>
</g>
<g >
<title>operator delete (38 samples, 0.08%; -0.00%)</title><rect x="1121.7" y="421" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1124.74" y="431.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (40 samples, 0.08%; -0.00%)</title><rect x="675.7" y="469" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="678.67" y="479.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (5 samples, 0.01%; -0.07%)</title><rect x="613.3" y="437" width="0.1" height="15.0" fill="rgb(123,123,255)" rx="2" ry="2" />
<text  x="616.26" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (18 samples, 0.04%; -0.00%)</title><rect x="559.4" y="277" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="562.42" y="287.5" ></text>
</g>
<g >
<title>operator delete (20 samples, 0.04%; -0.01%)</title><rect x="604.6" y="389" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="607.56" y="399.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (9 samples, 0.02%; -0.00%)</title><rect x="906.1" y="341" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="909.08" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (12 samples, 0.03%; +0.01%)</title><rect x="655.0" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="657.95" y="479.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (5 samples, 0.01%; 0.00%)</title><rect x="20.7" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.67" y="271.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;long, std::allocator&lt;long&gt; &gt;::push_back_impl&lt;long const&amp;&gt; (6 samples, 0.01%; +0.01%)</title><rect x="668.0" y="437" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="671.00" y="447.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::got_cl (5 samples, 0.01%; 0.00%)</title><rect x="684.7" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.72" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (8 samples, 0.02%; +0.02%)</title><rect x="1119.3" y="389" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1122.31" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (8 samples, 0.02%; -0.00%)</title><rect x="760.9" y="357" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="763.88" y="367.5" ></text>
</g>
<g >
<title>operator new (72 samples, 0.15%; 0.00%)</title><rect x="983.1" y="325" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="986.14" y="335.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (214 samples, 0.45%; +0.01%)</title><rect x="1024.1" y="181" width="5.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1027.11" y="191.5" ></text>
</g>
<g >
<title>operator delete (43 samples, 0.09%; -0.01%)</title><rect x="279.9" y="293" width="1.0" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="282.87" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (21 samples, 0.04%; -0.01%)</title><rect x="1093.8" y="277" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1096.77" y="287.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (14 samples, 0.03%; +0.02%)</title><rect x="1147.7" y="469" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1150.66" y="479.5" ></text>
</g>
<g >
<title>operator delete (36 samples, 0.08%; +0.01%)</title><rect x="660.8" y="453" width="0.9" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="663.75" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (111 samples, 0.24%; -0.00%)</title><rect x="847.5" y="389" width="2.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="850.49" y="399.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (201 samples, 0.43%; -0.01%)</title><rect x="912.6" y="357" width="5.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="915.60" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (7 samples, 0.01%; -0.02%)</title><rect x="47.3" y="485" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="50.34" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (16 samples, 0.03%; +0.02%)</title><rect x="1102.4" y="357" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1105.44" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (40 samples, 0.08%; +0.01%)</title><rect x="558.3" y="261" width="1.0" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="561.30" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (50 samples, 0.11%; +0.04%)</title><rect x="750.4" y="325" width="1.3" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="753.41" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (15 samples, 0.03%; -0.01%)</title><rect x="62.1" y="421" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="65.09" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (43 samples, 0.09%; +0.03%)</title><rect x="66.1" y="405" width="1.1" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="69.14" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (12 samples, 0.03%; -0.00%)</title><rect x="830.2" y="373" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="833.19" y="383.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (27 samples, 0.06%; +0.01%)</title><rect x="498.5" y="181" width="0.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="501.48" y="191.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (26 samples, 0.06%; +0.04%)</title><rect x="1076.0" y="309" width="0.6" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="1078.97" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (8 samples, 0.02%; -0.01%)</title><rect x="211.3" y="133" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="214.31" y="143.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (38 samples, 0.08%; -0.00%)</title><rect x="785.2" y="181" width="0.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="788.18" y="191.5" ></text>
</g>
<g >
<title>database::find_uuid (208 samples, 0.44%; +0.00%)</title><rect x="815.9" y="357" width="5.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="818.87" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="703.7" y="501" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="706.69" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (7 samples, 0.01%; 0.00%)</title><rect x="1113.2" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1116.21" y="367.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (15 samples, 0.03%; -0.01%)</title><rect x="1130.8" y="421" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1133.81" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (25 samples, 0.05%; +0.03%)</title><rect x="931.2" y="405" width="0.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="934.22" y="415.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (12 samples, 0.03%; 0.00%)</title><rect x="24.0" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.97" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; -0.01%)</title><rect x="890.9" y="293" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="893.93" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (45 samples, 0.10%; -0.01%)</title><rect x="932.0" y="405" width="1.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="935.00" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (54 samples, 0.11%; +0.02%)</title><rect x="1006.2" y="245" width="1.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1009.19" y="255.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (110 samples, 0.23%; 0.00%)</title><rect x="792.9" y="149" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="795.85" y="159.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (2,338 samples, 4.95%; -0.02%)</title><rect x="991.1" y="325" width="58.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="994.11" y="335.5" >servic..</text>
</g>
<g >
<title>cql3::statements::select_statement::execute (74 samples, 0.16%; +0.00%)</title><rect x="741.7" y="405" width="1.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="744.69" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (37 samples, 0.08%; +0.00%)</title><rect x="618.8" y="485" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="621.81" y="495.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (71 samples, 0.15%; 0.00%)</title><rect x="72.7" y="405" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.69" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (11 samples, 0.02%; 0.00%)</title><rect x="26.2" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.22" y="527.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (4,309 samples, 9.13%; -0.01%)</title><rect x="420.2" y="373" width="107.7" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="423.20" y="383.5" >std::_Functio..</text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (16 samples, 0.03%; +0.01%)</title><rect x="199.4" y="101" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="202.44" y="111.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (18 samples, 0.04%; +0.03%)</title><rect x="592.1" y="437" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="595.14" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (66 samples, 0.14%; +0.02%)</title><rect x="743.6" y="389" width="1.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="746.56" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (26 samples, 0.06%; +0.02%)</title><rect x="592.6" y="437" width="0.6" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="595.59" y="447.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.02%; +0.01%)</title><rect x="783.3" y="165" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="786.28" y="175.5" ></text>
</g>
<g >
<title>malloc (20 samples, 0.04%; 0.00%)</title><rect x="587.6" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="590.56" y="383.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (110 samples, 0.23%; -0.01%)</title><rect x="1170.5" y="453" width="2.8" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1173.53" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (17 samples, 0.04%; -0.01%)</title><rect x="111.8" y="373" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="114.76" y="383.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.01%; -0.00%)</title><rect x="512.8" y="341" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="515.80" y="351.5" ></text>
</g>
<g >
<title>database::get_reader_concurrency_semaphore (5 samples, 0.01%; -0.00%)</title><rect x="1015.2" y="245" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1018.21" y="255.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (105 samples, 0.22%; 0.00%)</title><rect x="506.1" y="325" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="509.13" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (33 samples, 0.07%; 0.00%)</title><rect x="1139.3" y="373" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.31" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (11 samples, 0.02%; -0.01%)</title><rect x="609.4" y="437" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="612.39" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (378 samples, 0.80%; +0.03%)</title><rect x="249.4" y="309" width="9.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="252.40" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; 0.00%)</title><rect x="38.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.34" y="447.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (5 samples, 0.01%; -0.03%)</title><rect x="60.2" y="453" width="0.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="63.17" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (19 samples, 0.04%; -0.02%)</title><rect x="42.7" y="453" width="0.5" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="45.72" y="463.5" ></text>
</g>
<g >
<title>database::do_apply (33 samples, 0.07%; 0.00%)</title><rect x="1139.3" y="341" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.31" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (21 samples, 0.04%; +0.04%)</title><rect x="126.8" y="277" width="0.5" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="129.78" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (80 samples, 0.17%; +0.02%)</title><rect x="149.0" y="197" width="2.0" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="152.00" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; +0.01%)</title><rect x="71.3" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="74.34" y="415.5" ></text>
</g>
<g >
<title>operator new (70 samples, 0.15%; +0.00%)</title><rect x="960.7" y="373" width="1.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="963.69" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (14 samples, 0.03%; +0.02%)</title><rect x="244.0" y="245" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="246.96" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.04%; -0.02%)</title><rect x="412.5" y="325" width="0.5" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="415.50" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (5 samples, 0.01%; +0.00%)</title><rect x="405.2" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="408.17" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (13 samples, 0.03%; +0.01%)</title><rect x="805.9" y="293" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="808.90" y="303.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (79 samples, 0.17%; -0.00%)</title><rect x="781.5" y="197" width="2.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="784.53" y="207.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (10 samples, 0.02%; +0.00%)</title><rect x="421.5" y="357" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="424.50" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (10 samples, 0.02%; -0.00%)</title><rect x="797.3" y="245" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="800.27" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (9 samples, 0.02%; +0.01%)</title><rect x="572.1" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="575.09" y="367.5" ></text>
</g>
<g >
<title>operator delete (36 samples, 0.08%; -0.01%)</title><rect x="556.0" y="277" width="0.9" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="559.00" y="287.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (6,907 samples, 14.63%; +0.02%)</title><rect x="110.8" y="389" width="172.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="113.81" y="399.5" >merging_reader&lt;mutatio..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.01%; -0.00%)</title><rect x="923.0" y="341" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="925.95" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (779 samples, 1.65%; -0.09%)</title><rect x="365.7" y="197" width="19.5" height="15.0" fill="rgb(102,102,255)" rx="2" ry="2" />
<text  x="368.71" y="207.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (5 samples, 0.01%; -0.00%)</title><rect x="822.6" y="293" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="825.62" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.01%; +0.01%)</title><rect x="410.7" y="325" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="413.70" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (8 samples, 0.02%; +0.01%)</title><rect x="830.9" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="833.89" y="447.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (9 samples, 0.02%; 0.00%)</title><rect x="861.5" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.46" y="335.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (269 samples, 0.57%; -0.01%)</title><rect x="617.1" y="501" width="6.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="620.13" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (12 samples, 0.03%; +0.00%)</title><rect x="1150.2" y="485" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1153.21" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (25 samples, 0.05%; -0.01%)</title><rect x="551.3" y="293" width="0.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="554.30" y="303.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; -0.00%)</title><rect x="751.3" y="293" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="754.33" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (25 samples, 0.05%; +0.01%)</title><rect x="364.0" y="165" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="366.96" y="175.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (6 samples, 0.01%; 0.00%)</title><rect x="19.1" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.07" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (43 samples, 0.09%; +0.03%)</title><rect x="859.1" y="501" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="862.11" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (24 samples, 0.05%; 0.00%)</title><rect x="168.9" y="133" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="171.92" y="143.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (47 samples, 0.10%; +0.04%)</title><rect x="1176.6" y="629" width="1.2" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="1179.58" y="639.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (7 samples, 0.01%; +0.01%)</title><rect x="314.3" y="181" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="317.32" y="191.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (10 samples, 0.02%; 0.00%)</title><rect x="731.8" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="734.84" y="367.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (6 samples, 0.01%; 0.00%)</title><rect x="548.0" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="550.97" y="303.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (34 samples, 0.07%; -0.00%)</title><rect x="1139.3" y="485" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1142.28" y="495.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (11 samples, 0.02%; +0.00%)</title><rect x="398.7" y="197" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="401.73" y="207.5" ></text>
</g>
<g >
<title>database::find_column_family (55 samples, 0.12%; -0.00%)</title><rect x="746.8" y="373" width="1.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="749.83" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (25 samples, 0.05%; +0.01%)</title><rect x="1059.6" y="325" width="0.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1062.57" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (78 samples, 0.17%; +0.01%)</title><rect x="639.0" y="453" width="1.9" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="641.98" y="463.5" ></text>
</g>
<g >
<title>database::find_schema (71 samples, 0.15%; +0.01%)</title><rect x="746.5" y="389" width="1.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="749.51" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.01%)</title><rect x="77.1" y="453" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="80.09" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (33 samples, 0.07%; -0.00%)</title><rect x="675.7" y="389" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="678.72" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.06%; -0.01%)</title><rect x="932.4" y="357" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="935.45" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (74 samples, 0.16%; -0.01%)</title><rect x="736.4" y="293" width="1.9" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="739.44" y="303.5" ></text>
</g>
<g >
<title>std::type_info::operator== (7 samples, 0.01%; +0.01%)</title><rect x="692.4" y="437" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="695.44" y="447.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (9 samples, 0.02%; 0.00%)</title><rect x="566.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="569.79" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%; -0.01%)</title><rect x="1028.0" y="117" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1030.96" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (9 samples, 0.02%; +0.01%)</title><rect x="1101.9" y="373" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1104.89" y="383.5" ></text>
</g>
<g >
<title>operator delete (25 samples, 0.05%; 0.00%)</title><rect x="406.8" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="409.77" y="303.5" ></text>
</g>
<g >
<title>operator new (79 samples, 0.17%; +0.00%)</title><rect x="276.7" y="277" width="2.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="279.75" y="287.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (74 samples, 0.16%; -0.00%)</title><rect x="781.7" y="181" width="1.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="784.65" y="191.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (5 samples, 0.01%; +0.01%)</title><rect x="500.6" y="229" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="503.63" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (9 samples, 0.02%; +0.01%)</title><rect x="689.7" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="692.67" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (8 samples, 0.02%; +0.01%)</title><rect x="672.5" y="469" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="675.52" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (27 samples, 0.06%; 0.00%)</title><rect x="531.1" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="534.08" y="431.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (6 samples, 0.01%; +0.00%)</title><rect x="831.1" y="437" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="834.12" y="447.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%; +0.01%)</title><rect x="217.0" y="181" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="219.99" y="191.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (41 samples, 0.09%; 0.00%)</title><rect x="675.6" y="501" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.65" y="511.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (5 samples, 0.01%; +0.00%)</title><rect x="589.7" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="592.71" y="431.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (19 samples, 0.04%; +0.01%)</title><rect x="695.8" y="421" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="698.79" y="431.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.01%; 0.00%)</title><rect x="47.9" y="501" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.92" y="511.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (231 samples, 0.49%; 0.00%)</title><rect x="10.2" y="613" width="5.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.20" y="623.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (2,765 samples, 5.86%; +0.01%)</title><rect x="755.1" y="405" width="69.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="758.11" y="415.5" >service..</text>
</g>
<g >
<title>bytes_view_hasher::update (17 samples, 0.04%; -0.01%)</title><rect x="719.9" y="293" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="722.89" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (14 samples, 0.03%; +0.00%)</title><rect x="860.4" y="405" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="863.36" y="415.5" ></text>
</g>
<g >
<title>operator delete (40 samples, 0.08%; +0.00%)</title><rect x="664.4" y="485" width="1.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="667.38" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1,238 samples, 2.62%; -0.01%)</title><rect x="543.7" y="421" width="31.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="546.72" y="431.5" >st..</text>
</g>
<g >
<title>locator::token_metadata::first_token (352 samples, 0.75%; -0.00%)</title><rect x="1076.9" y="277" width="8.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1079.90" y="287.5" ></text>
</g>
<g >
<title>query::result::result (34 samples, 0.07%; +0.00%)</title><rect x="582.9" y="421" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="585.94" y="431.5" ></text>
</g>
<g >
<title>sstring_hash::operator (23 samples, 0.05%; 0.00%)</title><rect x="1058.8" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1061.75" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (44 samples, 0.09%; -0.01%)</title><rect x="210.5" y="165" width="1.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="213.51" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (8 samples, 0.02%; -0.00%)</title><rect x="695.3" y="421" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="698.27" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (6 samples, 0.01%; -0.02%)</title><rect x="427.7" y="341" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="430.70" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (33 samples, 0.07%; +0.02%)</title><rect x="290.1" y="277" width="0.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="293.07" y="287.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (232 samples, 0.49%; -0.03%)</title><rect x="1124.8" y="421" width="5.8" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1127.79" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (6 samples, 0.01%; -0.00%)</title><rect x="806.1" y="277" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="809.07" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (10 samples, 0.02%; -0.05%)</title><rect x="826.5" y="421" width="0.2" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="829.49" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="977.0" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="980.04" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (10 samples, 0.02%; +0.01%)</title><rect x="75.5" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="78.46" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (37 samples, 0.08%; 0.00%)</title><rect x="675.7" y="405" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.67" y="415.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (9 samples, 0.02%; 0.00%)</title><rect x="650.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="653.75" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (19 samples, 0.04%; -0.00%)</title><rect x="854.4" y="437" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="857.41" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (18 samples, 0.04%; +0.00%)</title><rect x="571.6" y="341" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="574.64" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (5 samples, 0.01%; -0.00%)</title><rect x="142.9" y="261" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="145.92" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (8 samples, 0.02%; +0.01%)</title><rect x="626.4" y="469" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="629.43" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (14 samples, 0.03%; +0.00%)</title><rect x="662.6" y="437" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="665.63" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (13 samples, 0.03%; -0.01%)</title><rect x="620.1" y="485" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="623.11" y="495.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (5 samples, 0.01%; 0.00%)</title><rect x="1140.3" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.33" y="191.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (45 samples, 0.10%; +0.01%)</title><rect x="214.0" y="149" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="216.96" y="159.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (10 samples, 0.02%; +0.02%)</title><rect x="725.9" y="389" width="0.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="728.86" y="399.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (162 samples, 0.34%; +0.01%)</title><rect x="534.9" y="389" width="4.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="537.92" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10 samples, 0.02%; -0.04%)</title><rect x="815.6" y="293" width="0.3" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="818.62" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (248 samples, 0.53%; -0.01%)</title><rect x="394.4" y="229" width="6.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="397.35" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (5 samples, 0.01%; +0.00%)</title><rect x="416.0" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="419.05" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (9 samples, 0.02%; +0.02%)</title><rect x="639.6" y="389" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="642.63" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (5 samples, 0.01%; -0.01%)</title><rect x="365.6" y="197" width="0.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="368.58" y="207.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (9 samples, 0.02%; +0.01%)</title><rect x="518.0" y="309" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="520.95" y="319.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (166 samples, 0.35%; 0.00%)</title><rect x="458.9" y="277" width="4.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="461.94" y="287.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (21 samples, 0.04%; -0.01%)</title><rect x="590.8" y="405" width="0.5" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="593.79" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (12 samples, 0.03%; +0.01%)</title><rect x="1073.4" y="325" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1076.45" y="335.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (2,564 samples, 5.43%; -0.04%)</title><rect x="448.5" y="341" width="64.1" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="451.52" y="351.5" >memtabl..</text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (17 samples, 0.04%; -0.00%)</title><rect x="886.7" y="309" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="889.66" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (16 samples, 0.03%; +0.00%)</title><rect x="738.7" y="405" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="741.74" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (27 samples, 0.06%; -0.01%)</title><rect x="120.0" y="309" width="0.7" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="123.00" y="319.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (10 samples, 0.02%; -0.02%)</title><rect x="586.8" y="405" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="589.77" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (11 samples, 0.02%; +0.00%)</title><rect x="560.0" y="293" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="563.02" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; -0.01%)</title><rect x="686.6" y="469" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="689.65" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (14 samples, 0.03%; +0.01%)</title><rect x="512.3" y="325" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="515.25" y="335.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (17 samples, 0.04%; +0.02%)</title><rect x="989.4" y="277" width="0.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="992.39" y="287.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (29 samples, 0.06%; -0.03%)</title><rect x="641.1" y="469" width="0.8" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="644.13" y="479.5" ></text>
</g>
<g >
<title>operator new (73 samples, 0.15%; -0.00%)</title><rect x="537.1" y="341" width="1.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="540.15" y="351.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (5 samples, 0.01%; +0.00%)</title><rect x="588.5" y="421" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="591.51" y="431.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (175 samples, 0.37%; +0.00%)</title><rect x="846.1" y="421" width="4.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="849.07" y="431.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (152 samples, 0.32%; +0.02%)</title><rect x="841.2" y="421" width="3.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="844.22" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (19 samples, 0.04%; +0.01%)</title><rect x="444.7" y="261" width="0.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="447.72" y="271.5" ></text>
</g>
<g >
<title>operator new (27 samples, 0.06%; 0.00%)</title><rect x="98.6" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="101.63" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (9 samples, 0.02%; -0.01%)</title><rect x="613.8" y="469" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="616.81" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (412 samples, 0.87%; +0.00%)</title><rect x="689.9" y="469" width="10.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="692.95" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (12 samples, 0.03%; +0.01%)</title><rect x="1059.0" y="261" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1062.00" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (13 samples, 0.03%; +0.02%)</title><rect x="413.1" y="357" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="416.12" y="367.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (5 samples, 0.01%; +0.00%)</title><rect x="1160.9" y="469" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1163.88" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (77 samples, 0.16%; -0.00%)</title><rect x="1155.4" y="453" width="2.0" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1158.43" y="463.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (8 samples, 0.02%; +0.01%)</title><rect x="976.4" y="357" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="979.44" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (14 samples, 0.03%; +0.01%)</title><rect x="940.1" y="341" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="943.15" y="351.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (24 samples, 0.05%; +0.00%)</title><rect x="809.7" y="293" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="812.70" y="303.5" ></text>
</g>
<g >
<title>std::type_info::operator== (7 samples, 0.01%; -0.01%)</title><rect x="1172.6" y="405" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1175.55" y="415.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (9 samples, 0.02%; +0.00%)</title><rect x="451.4" y="325" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="454.37" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (32 samples, 0.07%; -0.01%)</title><rect x="1153.2" y="453" width="0.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1156.23" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.00%)</title><rect x="779.6" y="229" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="782.55" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (6 samples, 0.01%; -0.01%)</title><rect x="316.5" y="149" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="319.49" y="159.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (31 samples, 0.07%; +0.02%)</title><rect x="701.7" y="501" width="0.7" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="704.67" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (7 samples, 0.01%; -0.00%)</title><rect x="571.1" y="341" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="574.12" y="351.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (37 samples, 0.08%; +0.01%)</title><rect x="153.3" y="213" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="156.27" y="223.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (25 samples, 0.05%; +0.03%)</title><rect x="238.4" y="197" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="241.43" y="207.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (98 samples, 0.21%; +0.02%)</title><rect x="793.1" y="133" width="2.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="796.10" y="143.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (27 samples, 0.06%; -0.01%)</title><rect x="988.7" y="277" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="991.71" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (13 samples, 0.03%; -0.01%)</title><rect x="735.9" y="277" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="738.94" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (10 samples, 0.02%; -0.03%)</title><rect x="629.4" y="485" width="0.2" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="632.36" y="495.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (81 samples, 0.17%; -0.00%)</title><rect x="736.4" y="309" width="2.0" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="739.36" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (44 samples, 0.09%; +0.02%)</title><rect x="636.7" y="421" width="1.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="639.71" y="431.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (6 samples, 0.01%; 0.00%)</title><rect x="1139.4" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.41" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (29 samples, 0.06%; -0.01%)</title><rect x="486.4" y="277" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="489.41" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (97 samples, 0.21%; +0.02%)</title><rect x="665.7" y="485" width="2.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="668.72" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (10 samples, 0.02%; -0.00%)</title><rect x="1040.2" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1043.18" y="287.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (50 samples, 0.11%; +0.01%)</title><rect x="1161.4" y="453" width="1.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1164.43" y="463.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (5 samples, 0.01%; -0.01%)</title><rect x="1094.0" y="245" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1096.99" y="255.5" ></text>
</g>
<g >
<title>operator new (39 samples, 0.08%; +0.00%)</title><rect x="497.3" y="197" width="1.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="500.31" y="207.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (12 samples, 0.03%; -0.00%)</title><rect x="246.5" y="197" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="249.53" y="207.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (5 samples, 0.01%; -0.00%)</title><rect x="471.6" y="197" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="474.56" y="207.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (7 samples, 0.01%; +0.01%)</title><rect x="819.0" y="277" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="822.02" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (27 samples, 0.06%; -0.01%)</title><rect x="1041.7" y="277" width="0.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1044.65" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (11 samples, 0.02%; -0.01%)</title><rect x="433.9" y="261" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="436.92" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.00%)</title><rect x="588.1" y="373" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="591.11" y="383.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (18 samples, 0.04%; +0.01%)</title><rect x="213.2" y="133" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="216.19" y="143.5" ></text>
</g>
<g >
<title>operator new (27 samples, 0.06%; +0.00%)</title><rect x="447.3" y="325" width="0.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="450.29" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (9 samples, 0.02%; -0.00%)</title><rect x="1123.2" y="405" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1126.19" y="415.5" ></text>
</g>
<g >
<title>database::has_keyspace (115 samples, 0.24%; -0.00%)</title><rect x="821.3" y="357" width="2.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="824.32" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (5 samples, 0.01%; 0.00%)</title><rect x="24.1" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.10" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (6,110 samples, 12.94%; -0.01%)</title><rect x="114.6" y="357" width="152.7" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="117.58" y="367.5" >mutation_fragment_m..</text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (138 samples, 0.29%; -0.01%)</title><rect x="603.7" y="421" width="3.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="606.69" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (26 samples, 0.06%; +0.03%)</title><rect x="696.9" y="437" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="699.94" y="447.5" ></text>
</g>
<g >
<title>query::result::builder::build (73 samples, 0.15%; +0.04%)</title><rect x="582.1" y="437" width="1.9" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="585.14" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (46 samples, 0.10%; -0.01%)</title><rect x="221.0" y="149" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="223.96" y="159.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (5 samples, 0.01%; +0.01%)</title><rect x="541.4" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="544.45" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (14 samples, 0.03%; +0.01%)</title><rect x="918.4" y="389" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="921.35" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (37 samples, 0.08%; -0.00%)</title><rect x="714.6" y="389" width="1.0" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="717.64" y="399.5" ></text>
</g>
<g >
<title>operator new (39 samples, 0.08%; +0.00%)</title><rect x="935.1" y="373" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="938.07" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (25 samples, 0.05%; 0.00%)</title><rect x="1140.1" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.13" y="367.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;, &amp;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;::_link&gt;::expire (6 samples, 0.01%; -0.00%)</title><rect x="1176.1" y="437" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1179.05" y="447.5" ></text>
</g>
<g >
<title>db::is_datacenter_local (5 samples, 0.01%; +0.01%)</title><rect x="967.9" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="970.94" y="367.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (5 samples, 0.01%; -0.02%)</title><rect x="562.4" y="373" width="0.1" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="565.39" y="383.5" ></text>
</g>
<g >
<title>operator new (67 samples, 0.14%; -0.00%)</title><rect x="743.5" y="405" width="1.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="746.54" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (35 samples, 0.07%; -0.00%)</title><rect x="541.8" y="421" width="0.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="544.85" y="431.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (16 samples, 0.03%; +0.01%)</title><rect x="546.2" y="341" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="549.22" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (11 samples, 0.02%; +0.00%)</title><rect x="483.6" y="309" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="486.56" y="319.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (34 samples, 0.07%; -0.00%)</title><rect x="832.2" y="437" width="0.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="835.22" y="447.5" ></text>
</g>
<g >
<title>[[vdso]] (239 samples, 0.51%; -0.11%)</title><rect x="1179.2" y="613" width="6.0" height="15.0" fill="rgb(78,78,255)" rx="2" ry="2" />
<text  x="1182.23" y="623.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (33 samples, 0.07%; -0.01%)</title><rect x="214.2" y="133" width="0.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="217.21" y="143.5" ></text>
</g>
<g >
<title>reader_permit::consume (16 samples, 0.03%; -0.03%)</title><rect x="389.9" y="229" width="0.4" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="392.93" y="239.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,702 samples, 7.84%; -0.02%)</title><rect x="300.5" y="261" width="92.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="303.52" y="271.5" >mutation_fr..</text>
</g>
<g >
<title>utils::tuple_hash::operator (94 samples, 0.20%; -0.00%)</title><rect x="718.0" y="341" width="2.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="720.97" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (13 samples, 0.03%; +0.00%)</title><rect x="679.1" y="469" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="682.07" y="479.5" ></text>
</g>
<g >
<title>all (47,209 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (6 samples, 0.01%; -0.01%)</title><rect x="944.9" y="421" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="947.90" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (64 samples, 0.14%; -0.00%)</title><rect x="240.1" y="197" width="1.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="243.06" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (8 samples, 0.02%; -0.01%)</title><rect x="800.1" y="213" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="803.07" y="223.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (11 samples, 0.02%; 0.00%)</title><rect x="239.3" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="242.26" y="223.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (44 samples, 0.09%; +0.01%)</title><rect x="794.5" y="117" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="797.45" y="127.5" ></text>
</g>
<g >
<title>operator new (18 samples, 0.04%; 0.00%)</title><rect x="757.5" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="760.46" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (30 samples, 0.06%; +0.01%)</title><rect x="1129.0" y="373" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1132.04" y="383.5" ></text>
</g>
<g >
<title>db::filter_for_query (58 samples, 0.12%; +0.03%)</title><rect x="1060.9" y="341" width="1.5" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="1063.95" y="351.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (1,585 samples, 3.36%; +0.02%)</title><rect x="766.8" y="341" width="39.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="769.83" y="351.5" >ser..</text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (6 samples, 0.01%; +0.01%)</title><rect x="829.4" y="389" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="832.42" y="399.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.01%; 0.00%)</title><rect x="10.1" y="613" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.07" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (152 samples, 0.32%; +0.02%)</title><rect x="807.1" y="357" width="3.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="810.07" y="367.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (25 samples, 0.05%; -0.03%)</title><rect x="353.9" y="149" width="0.6" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="356.88" y="159.5" ></text>
</g>
<g >
<title>dht::shard_of (12 samples, 0.03%; -0.01%)</title><rect x="997.2" y="293" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1000.21" y="303.5" ></text>
</g>
<g >
<title>memtable::apply (26 samples, 0.06%; 0.00%)</title><rect x="1139.4" y="261" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.38" y="271.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (5 samples, 0.01%; -0.00%)</title><rect x="1156.2" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1159.23" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; 0.00%)</title><rect x="684.9" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.90" y="495.5" ></text>
</g>
<g >
<title>operator delete (31 samples, 0.07%; +0.01%)</title><rect x="811.6" y="373" width="0.8" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="814.62" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (5 samples, 0.01%; -0.01%)</title><rect x="26.0" y="517" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="28.97" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (6,998 samples, 14.82%; -0.01%)</title><rect x="109.4" y="405" width="174.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="112.43" y="415.5" >flat_mutation_reader::..</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (11 samples, 0.02%; -0.01%)</title><rect x="571.0" y="357" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="574.02" y="367.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (10 samples, 0.02%; -0.01%)</title><rect x="539.2" y="389" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="542.17" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (9 samples, 0.02%; -0.00%)</title><rect x="140.6" y="277" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="143.60" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; +0.01%)</title><rect x="1042.2" y="229" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1045.15" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (53 samples, 0.11%; 0.00%)</title><rect x="814.5" y="325" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="817.55" y="335.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (110 samples, 0.23%; +0.04%)</title><rect x="378.8" y="149" width="2.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="381.75" y="159.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (54 samples, 0.11%; -0.02%)</title><rect x="742.2" y="389" width="1.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="745.19" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (79 samples, 0.17%; +0.00%)</title><rect x="651.0" y="469" width="2.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="653.98" y="479.5" ></text>
</g>
<g >
<title>__start_context (12 samples, 0.03%; 0.00%)</title><rect x="24.0" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.97" y="607.5" ></text>
</g>
<g >
<title>operator delete (18 samples, 0.04%; 0.00%)</title><rect x="38.0" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.04" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (102 samples, 0.22%; +0.01%)</title><rect x="671.9" y="485" width="2.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="674.87" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; +0.02%)</title><rect x="152.3" y="165" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="155.35" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (19 samples, 0.04%; +0.01%)</title><rect x="1156.9" y="357" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1159.88" y="367.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (256 samples, 0.54%; +0.00%)</title><rect x="17.0" y="485" width="6.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="20.00" y="495.5" ></text>
</g>
<g >
<title>reader_permit::consume (13 samples, 0.03%; +0.01%)</title><rect x="495.8" y="197" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="498.78" y="207.5" ></text>
</g>
<g >
<title>TLS init function for cql3::statements::select_statement::_default_parameters (6 samples, 0.01%; +0.01%)</title><rect x="742.0" y="389" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="744.96" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (37 samples, 0.08%; 0.00%)</title><rect x="675.7" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.67" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (15 samples, 0.03%; +0.01%)</title><rect x="682.1" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="685.07" y="463.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (124 samples, 0.26%; +0.01%)</title><rect x="346.9" y="165" width="3.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="349.89" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (20 samples, 0.04%; -0.00%)</title><rect x="980.8" y="261" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="983.76" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%; +0.01%)</title><rect x="561.6" y="309" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="564.62" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.00%)</title><rect x="930.2" y="405" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="933.17" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (786 samples, 1.66%; -0.01%)</title><rect x="1074.7" y="325" width="19.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1077.67" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.07%; 0.00%)</title><rect x="1139.3" y="437" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.28" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (10 samples, 0.02%; -0.00%)</title><rect x="988.5" y="261" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="991.46" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (94 samples, 0.20%; +0.01%)</title><rect x="811.3" y="389" width="2.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="814.30" y="399.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (129 samples, 0.27%; -0.00%)</title><rect x="276.0" y="293" width="3.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="279.02" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (8 samples, 0.02%; -0.01%)</title><rect x="795.6" y="149" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="798.60" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (31 samples, 0.07%; -0.01%)</title><rect x="973.3" y="309" width="0.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="976.32" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (9 samples, 0.02%; +0.01%)</title><rect x="394.1" y="229" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="397.13" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (12 samples, 0.03%; +0.01%)</title><rect x="876.1" y="421" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="879.11" y="431.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (9 samples, 0.02%; +0.00%)</title><rect x="998.7" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1001.66" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (12 samples, 0.03%; -0.04%)</title><rect x="702.8" y="501" width="0.3" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="705.77" y="511.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (435 samples, 0.92%; +0.00%)</title><rect x="727.8" y="389" width="10.9" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="730.84" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (66 samples, 0.14%; -0.00%)</title><rect x="672.7" y="469" width="1.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="675.72" y="479.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (18 samples, 0.04%; +0.01%)</title><rect x="974.6" y="357" width="0.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="977.62" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (20 samples, 0.04%; +0.01%)</title><rect x="717.3" y="309" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="720.32" y="319.5" ></text>
</g>
<g >
<title>schema::column_at (16 samples, 0.03%; +0.00%)</title><rect x="384.8" y="181" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="387.78" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (9 samples, 0.02%; 0.00%)</title><rect x="266.0" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="269.03" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (28 samples, 0.06%; -0.01%)</title><rect x="1156.7" y="373" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1159.66" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (8 samples, 0.02%; -0.01%)</title><rect x="282.6" y="357" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="285.60" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (5 samples, 0.01%; 0.00%)</title><rect x="22.7" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.75" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (12 samples, 0.03%; +0.01%)</title><rect x="162.3" y="213" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="165.35" y="223.5" ></text>
</g>
<g >
<title>abstract_type::bound_value_needs_to_be_reserialized (8 samples, 0.02%; +0.01%)</title><rect x="886.5" y="309" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="889.46" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (22 samples, 0.05%; -0.00%)</title><rect x="1071.9" y="309" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1074.87" y="319.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (5 samples, 0.01%; +0.00%)</title><rect x="211.4" y="117" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="214.39" y="127.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.01%; +0.01%)</title><rect x="448.0" y="325" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="450.97" y="335.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (10 samples, 0.02%; -0.02%)</title><rect x="917.6" y="389" width="0.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="920.63" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (110 samples, 0.23%; -0.00%)</title><rect x="1114.8" y="373" width="2.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1117.76" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (26 samples, 0.06%; 0.00%)</title><rect x="899.8" y="325" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="902.78" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.02%; -0.02%)</title><rect x="803.5" y="277" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="806.55" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (5 samples, 0.01%; +0.00%)</title><rect x="541.6" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="544.57" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (6 samples, 0.01%; 0.00%)</title><rect x="405.0" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="408.02" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (9 samples, 0.02%; +0.02%)</title><rect x="943.3" y="325" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="946.30" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (35 samples, 0.07%; +0.02%)</title><rect x="636.9" y="405" width="0.9" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="639.91" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (25 samples, 0.05%; 0.00%)</title><rect x="20.5" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.50" y="303.5" ></text>
</g>
<g >
<title>row::compact_and_expire (5 samples, 0.01%; 0.00%)</title><rect x="676.3" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="679.27" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (11 samples, 0.02%; -0.01%)</title><rect x="857.3" y="485" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="860.31" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (13 samples, 0.03%; +0.03%)</title><rect x="950.0" y="325" width="0.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="953.00" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (61 samples, 0.13%; +0.02%)</title><rect x="635.0" y="437" width="1.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="638.01" y="447.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (10 samples, 0.02%; -0.02%)</title><rect x="1026.5" y="149" width="0.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1029.51" y="159.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (130 samples, 0.28%; -0.01%)</title><rect x="949.2" y="389" width="3.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="952.22" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.01%; -0.00%)</title><rect x="293.8" y="293" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="296.80" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (131 samples, 0.28%; +0.04%)</title><rect x="1056.1" y="309" width="3.3" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1059.13" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (5 samples, 0.01%; +0.01%)</title><rect x="752.4" y="341" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="755.41" y="351.5" ></text>
</g>
<g >
<title>operator delete (31 samples, 0.07%; -0.00%)</title><rect x="653.3" y="485" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="656.25" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (530 samples, 1.12%; -0.00%)</title><rect x="229.8" y="245" width="13.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="232.83" y="255.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (12 samples, 0.03%; 0.00%)</title><rect x="593.7" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="596.69" y="431.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.04%; -0.00%)</title><rect x="414.2" y="373" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="417.20" y="383.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (6 samples, 0.01%; +0.01%)</title><rect x="835.9" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="838.94" y="383.5" ></text>
</g>
<g >
<title>operator new (57 samples, 0.12%; +0.00%)</title><rect x="1033.0" y="213" width="1.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1036.03" y="223.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (16 samples, 0.03%; 0.00%)</title><rect x="1140.3" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.33" y="271.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (199 samples, 0.42%; +0.03%)</title><rect x="692.6" y="453" width="5.0" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="695.62" y="463.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (33 samples, 0.07%; +0.03%)</title><rect x="228.0" y="245" width="0.8" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="231.01" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%; +0.00%)</title><rect x="542.9" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="545.87" y="431.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (20 samples, 0.04%; 0.00%)</title><rect x="71.5" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.54" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (26 samples, 0.06%; -0.00%)</title><rect x="70.1" y="373" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="73.11" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; +0.01%)</title><rect x="623.1" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="626.13" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (11 samples, 0.02%; -0.00%)</title><rect x="25.7" y="517" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="28.70" y="527.5" ></text>
</g>
<g >
<title>operator delete (32 samples, 0.07%; +0.01%)</title><rect x="802.2" y="277" width="0.8" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="805.17" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (16 samples, 0.03%; +0.01%)</title><rect x="76.1" y="453" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="79.11" y="463.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (136 samples, 0.29%; +0.01%)</title><rect x="389.3" y="245" width="3.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="392.30" y="255.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (33 samples, 0.07%; +0.03%)</title><rect x="331.0" y="181" width="0.8" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="334.01" y="191.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::done (7 samples, 0.01%; +0.01%)</title><rect x="583.8" y="421" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="586.79" y="431.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (476 samples, 1.01%; -0.00%)</title><rect x="833.1" y="437" width="11.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="836.12" y="447.5" ></text>
</g>
<g >
<title>operator new (30 samples, 0.06%; 0.00%)</title><rect x="539.5" y="405" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="542.55" y="415.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (634 samples, 1.34%; +0.01%)</title><rect x="780.9" y="229" width="15.8" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="783.88" y="239.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (2,397 samples, 5.08%; -0.02%)</title><rect x="990.0" y="341" width="59.9" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="992.96" y="351.5" >servic..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (24 samples, 0.05%; -0.00%)</title><rect x="923.4" y="325" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="926.40" y="335.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (6 samples, 0.01%; -0.01%)</title><rect x="546.1" y="341" width="0.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="549.07" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (23 samples, 0.05%; +0.01%)</title><rect x="1169.4" y="453" width="0.6" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1172.38" y="463.5" ></text>
</g>
<g >
<title>operator delete (19 samples, 0.04%; +0.01%)</title><rect x="624.5" y="485" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="627.51" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (32 samples, 0.07%; +0.01%)</title><rect x="730.7" y="357" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="733.74" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (82 samples, 0.17%; +0.00%)</title><rect x="828.5" y="421" width="2.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="831.54" y="431.5" ></text>
</g>
<g >
<title>row::~row (5 samples, 0.01%; +0.00%)</title><rect x="248.3" y="261" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="251.25" y="271.5" ></text>
</g>
<g >
<title>compound_type&lt; (193 samples, 0.41%; -0.01%)</title><rect x="471.7" y="213" width="4.8" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="474.69" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (6 samples, 0.01%; +0.00%)</title><rect x="1031.0" y="213" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1033.98" y="223.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (6 samples, 0.01%; -0.03%)</title><rect x="699.3" y="405" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="702.34" y="415.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (5 samples, 0.01%; 0.00%)</title><rect x="501.5" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="504.46" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (8 samples, 0.02%; +0.01%)</title><rect x="826.9" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="829.92" y="431.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (38 samples, 0.08%; -0.01%)</title><rect x="742.4" y="373" width="0.9" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="745.39" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (43 samples, 0.09%; -0.00%)</title><rect x="777.5" y="245" width="1.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="780.50" y="255.5" ></text>
</g>
<g >
<title>compound_type&lt; (47 samples, 0.10%; -0.02%)</title><rect x="533.2" y="357" width="1.2" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="536.20" y="367.5" ></text>
</g>
<g >
<title>__tls_init (5 samples, 0.01%; -0.01%)</title><rect x="142.7" y="261" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="145.72" y="271.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (293 samples, 0.62%; 0.00%)</title><rect x="532.1" y="405" width="7.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="535.13" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (14 samples, 0.03%; 0.00%)</title><rect x="861.4" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.41" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (8 samples, 0.02%; -0.00%)</title><rect x="1071.1" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1074.12" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (156 samples, 0.33%; -0.01%)</title><rect x="1015.4" y="229" width="3.9" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1018.38" y="239.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (138 samples, 0.29%; -0.01%)</title><rect x="949.0" y="405" width="3.5" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="952.02" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (26 samples, 0.06%; +0.00%)</title><rect x="324.6" y="181" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="327.57" y="191.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (28 samples, 0.06%; -0.02%)</title><rect x="237.7" y="181" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="240.68" y="191.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (44 samples, 0.09%; -0.01%)</title><rect x="610.5" y="405" width="1.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="613.46" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume (9 samples, 0.02%; +0.01%)</title><rect x="152.9" y="181" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="155.95" y="191.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (6 samples, 0.01%; -0.02%)</title><rect x="502.2" y="229" width="0.1" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="505.18" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (5 samples, 0.01%; +0.01%)</title><rect x="867.7" y="469" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="870.66" y="479.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (4,867 samples, 10.31%; +0.01%)</title><rect x="289.2" y="341" width="121.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="292.22" y="351.5" >seastar::futuri..</text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (5 samples, 0.01%; +0.00%)</title><rect x="1023.7" y="197" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1026.71" y="207.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (142 samples, 0.30%; +0.03%)</title><rect x="244.5" y="229" width="3.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="247.53" y="239.5" ></text>
</g>
<g >
<title>operator delete (21 samples, 0.04%; -0.02%)</title><rect x="652.4" y="421" width="0.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="655.40" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (14 samples, 0.03%; -0.02%)</title><rect x="136.8" y="229" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="139.83" y="239.5" ></text>
</g>
<g >
<title>operator delete (40 samples, 0.08%; -0.02%)</title><rect x="567.2" y="357" width="1.0" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="570.24" y="367.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (19 samples, 0.04%; +0.03%)</title><rect x="106.2" y="421" width="0.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="109.23" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (5 samples, 0.01%; -0.00%)</title><rect x="560.3" y="293" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="563.30" y="303.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (16 samples, 0.03%; +0.03%)</title><rect x="451.0" y="325" width="0.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="453.97" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (7 samples, 0.01%; -0.00%)</title><rect x="1129.9" y="373" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1132.91" y="383.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (67 samples, 0.14%; -0.00%)</title><rect x="1131.4" y="405" width="1.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1134.36" y="415.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (6 samples, 0.01%; +0.01%)</title><rect x="212.9" y="133" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="215.89" y="143.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (9 samples, 0.02%; -0.01%)</title><rect x="317.5" y="197" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="320.47" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (34 samples, 0.07%; +0.01%)</title><rect x="777.7" y="229" width="0.9" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="780.73" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (31 samples, 0.07%; +0.06%)</title><rect x="241.7" y="229" width="0.7" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="244.66" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (11 samples, 0.02%; +0.01%)</title><rect x="1007.6" y="277" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1010.58" y="287.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (4,379 samples, 9.28%; +0.01%)</title><rect x="418.5" y="405" width="109.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="421.52" y="415.5" >mutation_sour..</text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (45 samples, 0.10%; +0.06%)</title><rect x="290.9" y="293" width="1.1" height="15.0" fill="rgb(255,141,141)" rx="2" ry="2" />
<text  x="293.90" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (107 samples, 0.23%; 0.00%)</title><rect x="979.0" y="341" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="982.04" y="351.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (31 samples, 0.07%; +0.00%)</title><rect x="40.5" y="405" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="43.52" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (6 samples, 0.01%; -0.01%)</title><rect x="674.2" y="437" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="677.20" y="447.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (5 samples, 0.01%; +0.01%)</title><rect x="1094.8" y="309" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1097.84" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (5 samples, 0.01%; 0.00%)</title><rect x="326.7" y="165" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="329.69" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; +0.00%)</title><rect x="483.9" y="309" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="486.86" y="319.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (9 samples, 0.02%; -0.02%)</title><rect x="1139.1" y="469" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1142.06" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (13 samples, 0.03%; +0.02%)</title><rect x="266.9" y="341" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="269.90" y="351.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (41 samples, 0.09%; -0.05%)</title><rect x="887.2" y="309" width="1.0" height="15.0" fill="rgb(149,149,255)" rx="2" ry="2" />
<text  x="890.21" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (254 samples, 0.54%; +0.01%)</title><rect x="432.7" y="293" width="6.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="435.72" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (177 samples, 0.37%; +0.00%)</title><rect x="659.5" y="485" width="4.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="662.45" y="495.5" ></text>
</g>
<g >
<title>operator delete (14 samples, 0.03%; 0.00%)</title><rect x="617.5" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="620.53" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (6 samples, 0.01%; +0.01%)</title><rect x="679.4" y="469" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="682.40" y="479.5" ></text>
</g>
<g >
<title>schema::column_at (15 samples, 0.03%; +0.01%)</title><rect x="361.9" y="197" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="364.91" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (5 samples, 0.01%; +0.00%)</title><rect x="806.3" y="325" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="809.32" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (45 samples, 0.10%; +0.03%)</title><rect x="672.9" y="437" width="1.2" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="675.95" y="447.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (22 samples, 0.05%; +0.03%)</title><rect x="912.1" y="357" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="915.05" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; -0.01%)</title><rect x="69.4" y="389" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="72.36" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (74 samples, 0.16%; +0.02%)</title><rect x="276.9" y="261" width="1.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="279.87" y="271.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (9 samples, 0.02%; 0.00%)</title><rect x="19.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.42" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (111 samples, 0.24%; -0.00%)</title><rect x="604.4" y="405" width="2.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="607.36" y="415.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (1,668 samples, 3.53%; -0.00%)</title><rect x="765.3" y="357" width="41.7" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="768.31" y="367.5" >ser..</text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (138 samples, 0.29%; +0.01%)</title><rect x="660.4" y="469" width="3.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="663.40" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (12 samples, 0.03%; +0.02%)</title><rect x="780.1" y="229" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="783.05" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (5 samples, 0.01%; +0.00%)</title><rect x="897.2" y="357" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="900.21" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (12 samples, 0.03%; -0.01%)</title><rect x="41.9" y="437" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="44.94" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (8 samples, 0.02%; +0.01%)</title><rect x="640.0" y="373" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="643.00" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (9 samples, 0.02%; -0.01%)</title><rect x="34.5" y="469" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="37.50" y="479.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (6 samples, 0.01%; +0.01%)</title><rect x="281.2" y="325" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="284.17" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (9 samples, 0.02%; -0.01%)</title><rect x="531.5" y="405" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="534.53" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (16 samples, 0.03%; +0.01%)</title><rect x="1046.0" y="277" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1048.95" y="287.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (16 samples, 0.03%; -0.01%)</title><rect x="994.9" y="261" width="0.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="997.94" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (160 samples, 0.34%; +0.00%)</title><rect x="833.5" y="405" width="4.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="836.47" y="415.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (6 samples, 0.01%; -0.01%)</title><rect x="715.6" y="405" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="718.57" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (16 samples, 0.03%; -0.02%)</title><rect x="64.1" y="437" width="0.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="67.06" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (474 samples, 1.00%; +0.08%)</title><rect x="1019.8" y="229" width="11.9" height="15.0" fill="rgb(255,107,107)" rx="2" ry="2" />
<text  x="1022.81" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="962.9" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="965.92" y="383.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (6 samples, 0.01%; +0.01%)</title><rect x="1040.0" y="261" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1042.95" y="271.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (5 samples, 0.01%; +0.00%)</title><rect x="850.3" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="853.26" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (5 samples, 0.01%; -0.03%)</title><rect x="146.9" y="245" width="0.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="149.87" y="255.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (27 samples, 0.06%; -0.00%)</title><rect x="517.0" y="277" width="0.7" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="519.98" y="287.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (34 samples, 0.07%; -0.00%)</title><rect x="923.2" y="341" width="0.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="926.20" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (9 samples, 0.02%; +0.00%)</title><rect x="567.0" y="341" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="570.02" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (37 samples, 0.08%; 0.00%)</title><rect x="675.7" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.67" y="463.5" ></text>
</g>
<g >
<title>operator delete (37 samples, 0.08%; -0.02%)</title><rect x="677.5" y="485" width="1.0" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="680.55" y="495.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (48 samples, 0.10%; +0.02%)</title><rect x="521.3" y="261" width="1.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="524.28" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (56 samples, 0.12%; 0.00%)</title><rect x="781.9" y="165" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="784.88" y="175.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (8 samples, 0.02%; +0.02%)</title><rect x="938.2" y="405" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="941.22" y="415.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (8 samples, 0.02%; +0.00%)</title><rect x="513.3" y="341" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="516.30" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (71 samples, 0.15%; -0.00%)</title><rect x="686.0" y="485" width="1.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="689.02" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (11 samples, 0.02%; -0.04%)</title><rect x="97.6" y="405" width="0.3" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="100.61" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (5 samples, 0.01%; 0.00%)</title><rect x="24.0" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.97" y="383.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (1,963 samples, 4.16%; -0.03%)</title><rect x="762.0" y="389" width="49.1" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="765.03" y="399.5" >std:..</text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (7 samples, 0.01%; -0.01%)</title><rect x="324.4" y="181" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="327.39" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (8 samples, 0.02%; +0.01%)</title><rect x="257.3" y="293" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="260.25" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (52 samples, 0.11%; +0.00%)</title><rect x="73.2" y="373" width="1.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="76.16" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (91 samples, 0.19%; -0.01%)</title><rect x="718.0" y="325" width="2.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="721.04" y="335.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (6 samples, 0.01%; -0.01%)</title><rect x="1036.1" y="261" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1039.10" y="271.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (23 samples, 0.05%; +0.01%)</title><rect x="354.5" y="149" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="357.51" y="159.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (74 samples, 0.16%; +0.01%)</title><rect x="798.4" y="261" width="1.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="801.42" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (7 samples, 0.01%; -0.00%)</title><rect x="963.9" y="373" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="966.89" y="383.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (348 samples, 0.74%; -0.00%)</title><rect x="308.0" y="197" width="8.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="311.02" y="207.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (10 samples, 0.02%; -0.04%)</title><rect x="1026.3" y="149" width="0.2" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="1029.26" y="159.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.07%; 0.00%)</title><rect x="1139.3" y="421" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.28" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (44 samples, 0.09%; -0.01%)</title><rect x="658.3" y="485" width="1.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="661.30" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (16 samples, 0.03%; -0.00%)</title><rect x="211.2" y="149" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="214.16" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (38 samples, 0.08%; +0.02%)</title><rect x="1166.7" y="469" width="1.0" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1169.70" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (8 samples, 0.02%; +0.00%)</title><rect x="62.8" y="405" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="65.76" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (10 samples, 0.02%; +0.02%)</title><rect x="952.1" y="373" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="955.12" y="383.5" ></text>
</g>
<g >
<title>seastar::schedule (13 samples, 0.03%; +0.02%)</title><rect x="1142.2" y="501" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1145.18" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (67 samples, 0.14%; -0.01%)</title><rect x="804.6" y="325" width="1.7" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="807.60" y="335.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (5 samples, 0.01%; -0.03%)</title><rect x="439.1" y="293" width="0.1" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="442.09" y="303.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (5 samples, 0.01%; -0.01%)</title><rect x="823.2" y="277" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="826.17" y="287.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (729 samples, 1.54%; -0.01%)</title><rect x="544.3" y="389" width="18.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="547.30" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (11 samples, 0.02%; -0.04%)</title><rect x="607.5" y="437" width="0.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="610.49" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (8 samples, 0.02%; 0.00%)</title><rect x="47.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.97" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (28 samples, 0.06%; -0.01%)</title><rect x="145.8" y="245" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="148.82" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (26 samples, 0.06%; +0.01%)</title><rect x="386.5" y="197" width="0.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="389.48" y="207.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (257 samples, 0.54%; -0.04%)</title><rect x="250.7" y="293" width="6.4" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="253.68" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (24 samples, 0.05%; +0.01%)</title><rect x="1120.6" y="405" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1123.64" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.01%)</title><rect x="671.7" y="485" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="674.72" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (8 samples, 0.02%; -0.00%)</title><rect x="1121.5" y="421" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1124.51" y="431.5" ></text>
</g>
<g >
<title>compound_type&lt; (6 samples, 0.01%; +0.01%)</title><rect x="469.7" y="229" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="472.66" y="239.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (5 samples, 0.01%; +0.01%)</title><rect x="894.0" y="293" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="897.01" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (10 samples, 0.02%; -0.03%)</title><rect x="68.1" y="389" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="71.14" y="399.5" ></text>
</g>
<g >
<title>row::external_memory_usage (241 samples, 0.51%; -0.01%)</title><rect x="201.5" y="149" width="6.0" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="204.51" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; -0.00%)</title><rect x="645.5" y="469" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="648.45" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (70 samples, 0.15%; -0.01%)</title><rect x="993.2" y="245" width="1.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="996.19" y="255.5" ></text>
</g>
<g >
<title>operator delete (28 samples, 0.06%; -0.01%)</title><rect x="621.8" y="469" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="624.76" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (6 samples, 0.01%; +0.01%)</title><rect x="259.5" y="309" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="262.45" y="319.5" ></text>
</g>
<g >
<title>std::type_info::operator== (8 samples, 0.02%; 0.00%)</title><rect x="1070.1" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1073.07" y="287.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (25 samples, 0.05%; +0.02%)</title><rect x="309.4" y="165" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="312.44" y="175.5" ></text>
</g>
<g >
<title>schema_registry::get (171 samples, 0.36%; 0.00%)</title><rect x="970.3" y="357" width="4.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="973.34" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (5 samples, 0.01%; +0.00%)</title><rect x="573.6" y="389" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="576.57" y="399.5" ></text>
</g>
<g >
<title>utils::array_search_gt (5 samples, 0.01%; +0.00%)</title><rect x="517.8" y="277" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="520.83" y="287.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (49 samples, 0.10%; +0.00%)</title><rect x="1112.4" y="373" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1115.41" y="383.5" ></text>
</g>
<g >
<title>operator new (71 samples, 0.15%; -0.00%)</title><rect x="1115.2" y="357" width="1.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1118.24" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (11 samples, 0.02%; -0.00%)</title><rect x="68.4" y="389" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="71.39" y="399.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (106 samples, 0.22%; +0.03%)</title><rect x="359.2" y="165" width="2.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="362.16" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (17 samples, 0.04%; +0.00%)</title><rect x="1148.6" y="469" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1151.63" y="479.5" ></text>
</g>
<g >
<title>query::result::builder::builder (110 samples, 0.23%; +0.00%)</title><rect x="585.6" y="421" width="2.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="588.62" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (21 samples, 0.04%; +0.01%)</title><rect x="62.5" y="421" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="65.54" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::needs_filtering (5 samples, 0.01%; +0.01%)</title><rect x="877.0" y="421" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="879.96" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (27 samples, 0.06%; 0.00%)</title><rect x="53.2" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.22" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (10 samples, 0.02%; +0.01%)</title><rect x="801.1" y="261" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="804.15" y="271.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (8 samples, 0.02%; +0.00%)</title><rect x="684.2" y="453" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="687.25" y="463.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (24 samples, 0.05%; +0.00%)</title><rect x="675.8" y="309" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="678.80" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::get_value (5 samples, 0.01%; +0.00%)</title><rect x="704.3" y="501" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="707.29" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (77 samples, 0.16%; -0.01%)</title><rect x="1125.1" y="389" width="1.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1128.11" y="399.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (11 samples, 0.02%; -0.02%)</title><rect x="705.4" y="485" width="0.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="708.44" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (11 samples, 0.02%; +0.00%)</title><rect x="550.7" y="309" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="553.75" y="319.5" ></text>
</g>
<g >
<title>database::find_column_family (90 samples, 0.19%; -0.00%)</title><rect x="1053.1" y="341" width="2.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1056.08" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (8 samples, 0.02%; +0.02%)</title><rect x="647.4" y="485" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="650.40" y="495.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (11 samples, 0.02%; +0.01%)</title><rect x="234.8" y="197" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="237.83" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (28 samples, 0.06%; -0.00%)</title><rect x="771.2" y="293" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="774.20" y="303.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (5 samples, 0.01%; -0.01%)</title><rect x="1058.4" y="261" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1061.43" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1,231 samples, 2.61%; -0.06%)</title><rect x="169.5" y="133" width="30.8" height="15.0" fill="rgb(141,141,255)" rx="2" ry="2" />
<text  x="172.52" y="143.5" >co..</text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (22 samples, 0.05%; +0.01%)</title><rect x="77.2" y="453" width="0.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="80.24" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (5 samples, 0.01%; 0.00%)</title><rect x="1140.2" y="197" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.16" y="207.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (28 samples, 0.06%; +0.01%)</title><rect x="616.2" y="485" width="0.7" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="619.21" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="1172.7" y="421" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1175.73" y="431.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (20 samples, 0.04%; -0.01%)</title><rect x="1040.4" y="277" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1043.43" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (7 samples, 0.01%; -0.01%)</title><rect x="580.6" y="373" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="583.64" y="383.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (9 samples, 0.02%; -0.01%)</title><rect x="78.0" y="453" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="80.99" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (71 samples, 0.15%; +0.00%)</title><rect x="614.0" y="485" width="1.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="617.03" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (13 samples, 0.03%; +0.00%)</title><rect x="570.6" y="325" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="573.59" y="335.5" ></text>
</g>
<g >
<title>seastar::gate::enter (14 samples, 0.03%; +0.02%)</title><rect x="1035.8" y="229" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1038.75" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (11 samples, 0.02%; +0.01%)</title><rect x="831.8" y="437" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="834.77" y="447.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (400 samples, 0.85%; -0.01%)</title><rect x="786.2" y="213" width="10.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="789.15" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (38 samples, 0.08%; +0.01%)</title><rect x="254.2" y="277" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="257.15" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (6 samples, 0.01%; +0.00%)</title><rect x="268.7" y="341" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="271.68" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (5 samples, 0.01%; -0.00%)</title><rect x="21.4" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="24.37" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (8 samples, 0.02%; 0.00%)</title><rect x="1072.2" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1075.22" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (40 samples, 0.08%; 0.00%)</title><rect x="17.7" y="309" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.75" y="319.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (5 samples, 0.01%; +0.01%)</title><rect x="403.4" y="245" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="406.40" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (5 samples, 0.01%; 0.00%)</title><rect x="24.1" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.10" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (7 samples, 0.01%; +0.00%)</title><rect x="1098.5" y="357" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1101.49" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (14 samples, 0.03%; -0.01%)</title><rect x="283.7" y="373" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="286.72" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (18 samples, 0.04%; +0.01%)</title><rect x="1057.7" y="277" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1060.70" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (41 samples, 0.09%; 0.00%)</title><rect x="729.2" y="325" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="732.19" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (40 samples, 0.08%; 0.00%)</title><rect x="22.2" y="453" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.17" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="79.3" y="453" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="82.34" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (8 samples, 0.02%; -0.01%)</title><rect x="255.1" y="277" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="258.10" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (17 samples, 0.04%; +0.02%)</title><rect x="199.9" y="117" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="202.86" y="127.5" ></text>
</g>
<g >
<title>operator delete (55 samples, 0.12%; -0.04%)</title><rect x="548.9" y="325" width="1.3" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="551.87" y="335.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (8 samples, 0.02%; 0.00%)</title><rect x="794.1" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="797.10" y="127.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (32 samples, 0.07%; +0.01%)</title><rect x="827.1" y="421" width="0.8" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="830.12" y="431.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (124 samples, 0.26%; +0.01%)</title><rect x="821.1" y="373" width="3.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="824.10" y="383.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (279 samples, 0.59%; 0.00%)</title><rect x="16.9" y="517" width="6.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.87" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (33 samples, 0.07%; 0.00%)</title><rect x="1139.3" y="357" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.31" y="367.5" ></text>
</g>
<g >
<title>schema::get_partitioner (5 samples, 0.01%; +0.00%)</title><rect x="925.1" y="389" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="928.10" y="399.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (9 samples, 0.02%; 0.00%)</title><rect x="16.6" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.65" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.01%; +0.00%)</title><rect x="1173.3" y="501" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1176.30" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (8 samples, 0.02%; +0.00%)</title><rect x="314.6" y="181" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="317.57" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (12 samples, 0.03%; +0.01%)</title><rect x="275.5" y="293" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="278.50" y="303.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (64 samples, 0.14%; -0.00%)</title><rect x="533.1" y="373" width="1.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="536.10" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (28 samples, 0.06%; -0.01%)</title><rect x="797.7" y="245" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="800.72" y="255.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (7 samples, 0.01%; -0.01%)</title><rect x="1058.3" y="261" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1061.25" y="271.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (11 samples, 0.02%; -0.00%)</title><rect x="381.5" y="165" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="384.50" y="175.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (19 samples, 0.04%; +0.00%)</title><rect x="225.9" y="229" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="228.88" y="239.5" ></text>
</g>
<g >
<title>database::apply_in_memory (30 samples, 0.06%; 0.00%)</title><rect x="1139.3" y="293" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.31" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (56 samples, 0.12%; 0.00%)</title><rect x="17.5" y="325" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.47" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (8 samples, 0.02%; +0.01%)</title><rect x="758.3" y="341" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="761.33" y="351.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (5 samples, 0.01%; +0.00%)</title><rect x="59.9" y="453" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="62.94" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (33 samples, 0.07%; -0.03%)</title><rect x="905.5" y="357" width="0.8" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="908.48" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (14 samples, 0.03%; +0.01%)</title><rect x="1072.4" y="309" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1075.42" y="319.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (536 samples, 1.14%; -0.02%)</title><rect x="725.3" y="405" width="13.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="728.31" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (6 samples, 0.01%; -0.00%)</title><rect x="894.5" y="309" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="897.53" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (9 samples, 0.02%; +0.01%)</title><rect x="685.8" y="485" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="688.80" y="495.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (507 samples, 1.07%; -0.03%)</title><rect x="268.9" y="341" width="12.7" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="271.93" y="351.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (9 samples, 0.02%; +0.00%)</title><rect x="752.0" y="309" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="754.98" y="319.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (6 samples, 0.01%; -0.01%)</title><rect x="561.1" y="309" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="564.09" y="319.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (18 samples, 0.04%; +0.04%)</title><rect x="1029.0" y="165" width="0.5" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="1032.01" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (23 samples, 0.05%; +0.03%)</title><rect x="243.1" y="245" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="246.08" y="255.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.07%; +0.00%)</title><rect x="1139.3" y="389" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1142.28" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (24 samples, 0.05%; +0.00%)</title><rect x="488.3" y="277" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="491.26" y="287.5" ></text>
</g>
<g >
<title>validation::validate_column_family (415 samples, 0.88%; -0.01%)</title><rect x="813.8" y="389" width="10.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="816.82" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::reserve (6 samples, 0.01%; +0.01%)</title><rect x="797.6" y="245" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="800.57" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (9 samples, 0.02%; +0.00%)</title><rect x="166.7" y="149" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="169.70" y="159.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (4,259 samples, 9.02%; +0.03%)</title><rect x="721.6" y="437" width="106.5" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="724.61" y="447.5" >cql3::query_p..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (9 samples, 0.02%; 0.00%)</title><rect x="600.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="603.86" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (5 samples, 0.01%; -0.00%)</title><rect x="1174.1" y="357" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1177.08" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (426 samples, 0.90%; 0.00%)</title><rect x="677.2" y="501" width="10.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="680.22" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (32 samples, 0.07%; -0.01%)</title><rect x="758.5" y="341" width="0.8" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="761.53" y="351.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (7 samples, 0.01%; +0.01%)</title><rect x="500.5" y="229" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="503.46" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (21 samples, 0.04%; +0.00%)</title><rect x="699.7" y="453" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="702.69" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (203 samples, 0.43%; 0.00%)</title><rect x="1168.2" y="485" width="5.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.20" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (7 samples, 0.01%; +0.00%)</title><rect x="1174.1" y="373" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1177.05" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,272 samples, 9.05%; -0.02%)</title><rect x="298.1" y="277" width="106.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="301.07" y="287.5" >flat_mutation..</text>
</g>
<g >
<title>operator new (74 samples, 0.16%; +0.00%)</title><rect x="1043.1" y="245" width="1.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1046.08" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (14 samples, 0.03%; 0.00%)</title><rect x="860.4" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.36" y="447.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (70 samples, 0.15%; +0.00%)</title><rect x="135.4" y="245" width="1.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="138.43" y="255.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (39 samples, 0.08%; -0.02%)</title><rect x="718.9" y="293" width="1.0" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="721.91" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.01%)</title><rect x="1122.5" y="405" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1125.54" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (6 samples, 0.01%; -0.01%)</title><rect x="988.6" y="245" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="991.56" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (7 samples, 0.01%; -0.03%)</title><rect x="957.0" y="389" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="960.02" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (5 samples, 0.01%; +0.00%)</title><rect x="1115.1" y="357" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1118.11" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (10 samples, 0.02%; +0.00%)</title><rect x="623.5" y="453" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="626.53" y="463.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (114 samples, 0.24%; -0.01%)</title><rect x="907.0" y="373" width="2.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="909.98" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.01%)</title><rect x="830.6" y="421" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="833.64" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (776 samples, 1.64%; +0.01%)</title><rect x="882.6" y="405" width="19.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="885.56" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (17 samples, 0.04%; +0.03%)</title><rect x="248.8" y="277" width="0.4" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="251.80" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (6 samples, 0.01%; -0.00%)</title><rect x="679.7" y="469" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="682.72" y="479.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (12 samples, 0.03%; +0.02%)</title><rect x="831.3" y="437" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="834.27" y="447.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (21 samples, 0.04%; +0.02%)</title><rect x="909.9" y="373" width="0.5" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="912.85" y="383.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1,189 samples, 2.52%; -0.06%)</title><rect x="332.1" y="181" width="29.7" height="15.0" fill="rgb(139,139,255)" rx="2" ry="2" />
<text  x="335.09" y="191.5" >wr..</text>
</g>
<g >
<title>service::client_state::has_column_family_access (7 samples, 0.01%; 0.00%)</title><rect x="23.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.40" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (22 samples, 0.05%; +0.02%)</title><rect x="876.4" y="421" width="0.6" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="879.41" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.00%)</title><rect x="564.3" y="325" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="567.32" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="625.7" y="485" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="628.71" y="495.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (5 samples, 0.01%; 0.00%)</title><rect x="1029.7" y="181" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1032.68" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (25 samples, 0.05%; -0.03%)</title><rect x="571.5" y="357" width="0.6" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="574.47" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (9 samples, 0.02%; 0.00%)</title><rect x="261.6" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="264.63" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.00%)</title><rect x="806.9" y="341" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="809.87" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (80 samples, 0.17%; -0.00%)</title><rect x="19.4" y="357" width="2.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="22.37" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (12 samples, 0.03%; +0.01%)</title><rect x="421.0" y="357" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="424.05" y="367.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (17 samples, 0.04%; -0.00%)</title><rect x="860.3" y="469" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="863.34" y="479.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (11 samples, 0.02%; -0.00%)</title><rect x="362.7" y="213" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="365.66" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (83 samples, 0.18%; +0.02%)</title><rect x="1064.7" y="309" width="2.1" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1067.75" y="319.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (73 samples, 0.15%; +0.01%)</title><rect x="264.2" y="325" width="1.8" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="267.18" y="335.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (36 samples, 0.08%; +0.03%)</title><rect x="1096.8" y="341" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1099.84" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (15 samples, 0.03%; +0.01%)</title><rect x="527.5" y="341" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="530.48" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::move_it (7 samples, 0.01%; +0.01%)</title><rect x="766.5" y="341" width="0.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="769.46" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (17 samples, 0.04%; +0.01%)</title><rect x="78.7" y="453" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="81.66" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (5 samples, 0.01%; 0.00%)</title><rect x="438.3" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="441.29" y="287.5" ></text>
</g>
<g >
<title>row::compact_and_expire (808 samples, 1.71%; -0.02%)</title><rect x="365.0" y="213" width="20.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="367.98" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (5 samples, 0.01%; 0.00%)</title><rect x="20.7" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.67" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (94 samples, 0.20%; +0.02%)</title><rect x="941.3" y="373" width="2.3" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="944.27" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (5,852 samples, 12.40%; -0.01%)</title><rect x="116.4" y="341" width="146.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="119.35" y="351.5" >mutation_fragment_..</text>
</g>
<g >
<title>seastar::internal::promise_base::clear (11 samples, 0.02%; +0.02%)</title><rect x="963.4" y="373" width="0.3" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="966.39" y="383.5" ></text>
</g>
<g >
<title>operator delete (17 samples, 0.04%; +0.01%)</title><rect x="651.6" y="437" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="654.55" y="447.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1,386 samples, 2.94%; +0.01%)</title><rect x="166.5" y="165" width="34.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="169.50" y="175.5" >cl..</text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (98 samples, 0.21%; +0.00%)</title><rect x="668.4" y="469" width="2.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="671.40" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (11 samples, 0.02%; 0.00%)</title><rect x="861.4" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.41" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (28 samples, 0.06%; -0.01%)</title><rect x="440.6" y="293" width="0.7" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="443.59" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (14 samples, 0.03%; 0.00%)</title><rect x="861.4" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.41" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%; +0.02%)</title><rect x="509.2" y="309" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="512.23" y="319.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (31 samples, 0.07%; -0.01%)</title><rect x="1093.5" y="293" width="0.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1096.52" y="303.5" ></text>
</g>
<g >
<title>mutation_querier::consume (11 samples, 0.02%; 0.00%)</title><rect x="675.9" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.92" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (24 samples, 0.05%; +0.01%)</title><rect x="1041.7" y="261" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1044.73" y="271.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (97 samples, 0.21%; +0.00%)</title><rect x="610.2" y="421" width="2.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="613.24" y="431.5" ></text>
</g>
<g >
<title>operator new (38 samples, 0.08%; +0.00%)</title><rect x="898.8" y="325" width="1.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="901.83" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (40 samples, 0.08%; +0.01%)</title><rect x="726.6" y="373" width="1.0" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="729.59" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (10 samples, 0.02%; +0.02%)</title><rect x="1137.5" y="421" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1140.49" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (38 samples, 0.08%; -0.01%)</title><rect x="829.6" y="389" width="0.9" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="832.57" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (101 samples, 0.21%; -0.03%)</title><rect x="979.1" y="325" width="2.6" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="982.14" y="335.5" ></text>
</g>
<g >
<title>reader_permit::consume (11 samples, 0.02%; -0.00%)</title><rect x="498.8" y="165" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="501.78" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (8 samples, 0.02%; +0.00%)</title><rect x="609.7" y="437" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="612.66" y="447.5" ></text>
</g>
<g >
<title>operator delete (25 samples, 0.05%; -0.00%)</title><rect x="52.6" y="469" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="55.57" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (23 samples, 0.05%; +0.01%)</title><rect x="575.3" y="421" width="0.6" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="578.34" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (13 samples, 0.03%; +0.03%)</title><rect x="1096.5" y="341" width="0.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1099.52" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (7 samples, 0.01%; +0.01%)</title><rect x="534.7" y="373" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="537.70" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; -0.02%)</title><rect x="511.4" y="325" width="0.2" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="514.40" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (1,927 samples, 4.08%; -0.02%)</title><rect x="998.9" y="293" width="48.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1001.89" y="303.5" >serv..</text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (8 samples, 0.02%; +0.01%)</title><rect x="392.3" y="197" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="395.33" y="207.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (246 samples, 0.52%; +0.00%)</title><rect x="678.7" y="485" width="6.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="681.75" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; -0.01%)</title><rect x="534.3" y="341" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="537.25" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (105 samples, 0.22%; +0.02%)</title><rect x="219.8" y="181" width="2.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="222.81" y="191.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (24 samples, 0.05%; -0.02%)</title><rect x="790.5" y="117" width="0.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="793.45" y="127.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (964 samples, 2.04%; +0.01%)</title><rect x="902.0" y="405" width="24.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="904.95" y="415.5" >c..</text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.00%)</title><rect x="783.8" y="213" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="786.78" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (6 samples, 0.01%; +0.00%)</title><rect x="582.0" y="389" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="584.99" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (9 samples, 0.02%; -0.00%)</title><rect x="258.9" y="309" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="261.85" y="319.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.05%; +0.01%)</title><rect x="1145.3" y="485" width="0.6" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1148.33" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (7 samples, 0.01%; -0.01%)</title><rect x="523.3" y="277" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="526.33" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (8 samples, 0.02%; +0.00%)</title><rect x="795.3" y="69" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="798.30" y="79.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (143 samples, 0.30%; -0.00%)</title><rect x="846.7" y="405" width="3.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="849.69" y="415.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (94 samples, 0.20%; -0.00%)</title><rect x="289.9" y="309" width="2.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="292.95" y="319.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (80 samples, 0.17%; +0.01%)</title><rect x="776.7" y="261" width="2.0" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="779.73" y="271.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (104 samples, 0.22%; +0.02%)</title><rect x="520.7" y="277" width="2.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="523.73" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (15 samples, 0.03%; 0.00%)</title><rect x="555.2" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="558.17" y="287.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (145 samples, 0.31%; +0.05%)</title><rect x="1185.2" y="613" width="3.6" height="15.0" fill="rgb(255,149,149)" rx="2" ry="2" />
<text  x="1188.20" y="623.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (223 samples, 0.47%; -0.00%)</title><rect x="748.6" y="373" width="5.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="751.61" y="383.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (67 samples, 0.14%; -0.01%)</title><rect x="516.3" y="309" width="1.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="519.28" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (36 samples, 0.08%; 0.00%)</title><rect x="788.0" y="149" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="791.03" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (11 samples, 0.02%; +0.01%)</title><rect x="256.8" y="277" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="259.83" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (5 samples, 0.01%; +0.00%)</title><rect x="752.2" y="341" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="755.21" y="351.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; -0.00%)</title><rect x="776.9" y="245" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="779.90" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (5 samples, 0.01%; +0.01%)</title><rect x="1143.4" y="501" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1146.38" y="511.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (47 samples, 0.10%; -0.01%)</title><rect x="355.1" y="149" width="1.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="358.08" y="159.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (13 samples, 0.03%; +0.03%)</title><rect x="392.7" y="245" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="395.73" y="255.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (7 samples, 0.01%; -0.00%)</title><rect x="1133.0" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1136.04" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (6 samples, 0.01%; +0.01%)</title><rect x="242.4" y="229" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="245.43" y="239.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (233 samples, 0.49%; +0.03%)</title><rect x="273.4" y="309" width="5.8" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="276.42" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (15 samples, 0.03%; +0.03%)</title><rect x="406.1" y="309" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="409.15" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (11 samples, 0.02%; +0.01%)</title><rect x="140.3" y="277" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="143.33" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (12 samples, 0.03%; +0.00%)</title><rect x="697.6" y="453" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="700.62" y="463.5" ></text>
</g>
<g >
<title>query::querier&lt; (13 samples, 0.03%; +0.01%)</title><rect x="59.5" y="453" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="62.52" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (12 samples, 0.03%; +0.01%)</title><rect x="930.3" y="405" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="933.32" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (8 samples, 0.02%; 0.00%)</title><rect x="17.5" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.52" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (13 samples, 0.03%; -0.06%)</title><rect x="314.8" y="181" width="0.3" height="15.0" fill="rgb(133,133,255)" rx="2" ry="2" />
<text  x="317.79" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.05%; -0.00%)</title><rect x="768.6" y="293" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="771.56" y="303.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (9 samples, 0.02%; -0.00%)</title><rect x="900.6" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="903.61" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; 0.00%)</title><rect x="867.0" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.96" y="447.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (9 samples, 0.02%; -0.00%)</title><rect x="505.9" y="325" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="508.91" y="335.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (114 samples, 0.24%; -0.00%)</title><rect x="694.1" y="437" width="2.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="697.07" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (20 samples, 0.04%; +0.02%)</title><rect x="760.4" y="325" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="763.38" y="335.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (17 samples, 0.04%; +0.01%)</title><rect x="1062.8" y="341" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1065.82" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (15 samples, 0.03%; +0.01%)</title><rect x="858.2" y="501" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="861.24" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (24 samples, 0.05%; +0.01%)</title><rect x="827.3" y="405" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="830.32" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (87 samples, 0.18%; -0.01%)</title><rect x="668.7" y="453" width="2.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="671.67" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (5 samples, 0.01%; +0.01%)</title><rect x="46.8" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="49.84" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (44 samples, 0.09%; +0.03%)</title><rect x="161.5" y="229" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="164.55" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,338 samples, 9.19%; +0.04%)</title><rect x="140.8" y="309" width="108.5" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="143.83" y="319.5" >partition_sna..</text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (5 samples, 0.01%; +0.01%)</title><rect x="242.8" y="229" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="245.78" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (43 samples, 0.09%; +0.08%)</title><rect x="137.7" y="261" width="1.1" height="15.0" fill="rgb(255,115,115)" rx="2" ry="2" />
<text  x="140.70" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (5 samples, 0.01%; -0.00%)</title><rect x="219.6" y="181" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="222.56" y="191.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (41 samples, 0.09%; -0.01%)</title><rect x="123.1" y="277" width="1.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="126.10" y="287.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (14 samples, 0.03%; +0.00%)</title><rect x="795.2" y="85" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="798.18" y="95.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (12,384 samples, 26.23%; +0.01%)</title><rect x="106.9" y="421" width="309.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="109.93" y="431.5" >query::consume_page&lt;</text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (183 samples, 0.39%; +0.04%)</title><rect x="1087.8" y="261" width="4.6" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="1090.84" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (36 samples, 0.08%; +0.06%)</title><rect x="296.3" y="293" width="0.9" height="15.0" fill="rgb(255,139,139)" rx="2" ry="2" />
<text  x="299.32" y="303.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (25 samples, 0.05%; 0.00%)</title><rect x="1140.1" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.13" y="415.5" ></text>
</g>
<g >
<title>free (103 samples, 0.22%; -0.00%)</title><rect x="395.8" y="181" width="2.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="398.83" y="191.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (88 samples, 0.19%; +0.01%)</title><rect x="855.0" y="469" width="2.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="857.96" y="479.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (43 samples, 0.09%; -0.00%)</title><rect x="1093.2" y="309" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1096.24" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (6 samples, 0.01%; +0.01%)</title><rect x="599.9" y="437" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="602.86" y="447.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (14 samples, 0.03%; -0.01%)</title><rect x="793.8" y="117" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="796.75" y="127.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (467 samples, 0.99%; -0.01%)</title><rect x="688.9" y="485" width="11.7" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="691.90" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (89 samples, 0.19%; 0.00%)</title><rect x="1131.2" y="421" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.19" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (9 samples, 0.02%; +0.00%)</title><rect x="1098.3" y="357" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1101.27" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (3,367 samples, 7.13%; 0.00%)</title><rect x="145.0" y="261" width="84.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.05" y="271.5" >partition..</text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (27 samples, 0.06%; 0.00%)</title><rect x="961.8" y="341" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="964.77" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (7 samples, 0.01%; +0.01%)</title><rect x="601.1" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="604.09" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (20 samples, 0.04%; -0.02%)</title><rect x="1105.9" y="405" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1108.87" y="415.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%; -0.00%)</title><rect x="611.7" y="389" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="614.71" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (18 samples, 0.04%; +0.02%)</title><rect x="197.6" y="117" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="200.61" y="127.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (6 samples, 0.01%; -0.01%)</title><rect x="512.1" y="325" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="515.10" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (55 samples, 0.12%; -0.01%)</title><rect x="1157.4" y="453" width="1.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1160.38" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (5 samples, 0.01%; +0.01%)</title><rect x="1055.4" y="325" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1058.40" y="335.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (5 samples, 0.01%; -0.02%)</title><rect x="284.6" y="405" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="287.57" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (6,518 samples, 13.81%; -0.03%)</title><rect x="945.0" y="421" width="163.0" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="948.05" y="431.5" >cql3::statements::sel..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (17 samples, 0.04%; -0.01%)</title><rect x="1045.5" y="229" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1048.45" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (11 samples, 0.02%; 0.00%)</title><rect x="384.4" y="149" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="387.40" y="159.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (8 samples, 0.02%; 0.00%)</title><rect x="19.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.02" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (11 samples, 0.02%; +0.00%)</title><rect x="518.2" y="309" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="521.18" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (10 samples, 0.02%; -0.02%)</title><rect x="695.5" y="421" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="698.47" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,105 samples, 4.46%; -0.09%)</title><rect x="164.6" y="197" width="52.6" height="15.0" fill="rgb(94,94,255)" rx="2" ry="2" />
<text  x="167.57" y="207.5" >parti..</text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (5 samples, 0.01%; +0.00%)</title><rect x="329.1" y="181" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="332.11" y="191.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (107 samples, 0.23%; +0.01%)</title><rect x="821.4" y="341" width="2.7" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="824.42" y="351.5" ></text>
</g>
<g >
<title>reader_permit::mark_unused (6 samples, 0.01%; +0.01%)</title><rect x="63.6" y="453" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="66.59" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (31 samples, 0.07%; 0.00%)</title><rect x="861.0" y="453" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.01" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (116 samples, 0.25%; +0.04%)</title><rect x="940.7" y="389" width="2.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="943.72" y="399.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (63 samples, 0.13%; +0.02%)</title><rect x="279.4" y="309" width="1.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="282.45" y="319.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (40 samples, 0.08%; +0.01%)</title><rect x="386.1" y="213" width="1.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="389.13" y="223.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (512 samples, 1.08%; +0.04%)</title><rect x="464.5" y="293" width="12.8" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="467.54" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (21 samples, 0.04%; +0.01%)</title><rect x="442.7" y="277" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="445.67" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (62 samples, 0.13%; -0.00%)</title><rect x="853.3" y="453" width="1.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="856.34" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (38 samples, 0.08%; +0.04%)</title><rect x="825.5" y="421" width="1.0" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="828.54" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (20 samples, 0.04%; -0.00%)</title><rect x="925.5" y="373" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="928.50" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (14 samples, 0.03%; -0.00%)</title><rect x="990.7" y="325" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="993.74" y="335.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (76 samples, 0.16%; -0.02%)</title><rect x="232.6" y="181" width="1.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="235.63" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (8 samples, 0.02%; -0.02%)</title><rect x="146.6" y="245" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="149.57" y="255.5" ></text>
</g>
<g >
<title>operator new (63 samples, 0.13%; -0.00%)</title><rect x="979.7" y="293" width="1.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="982.72" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (9 samples, 0.02%; -0.01%)</title><rect x="70.9" y="373" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="73.94" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (42 samples, 0.09%; +0.01%)</title><rect x="98.3" y="405" width="1.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="101.31" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.01%)</title><rect x="659.9" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="662.93" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (26 samples, 0.06%; -0.01%)</title><rect x="223.8" y="197" width="0.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="226.78" y="207.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (9 samples, 0.02%; -0.00%)</title><rect x="583.5" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="586.52" y="415.5" ></text>
</g>
<g >
<title>validation::validate_column_family (10 samples, 0.02%; -0.05%)</title><rect x="824.8" y="405" width="0.3" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="827.82" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; -0.00%)</title><rect x="496.1" y="229" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="499.13" y="239.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (8 samples, 0.02%; -0.00%)</title><rect x="213.7" y="133" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="216.71" y="143.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (8 samples, 0.02%; +0.00%)</title><rect x="259.6" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="262.60" y="319.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (152 samples, 0.32%; -0.09%)</title><rect x="12.2" y="581" width="3.8" height="15.0" fill="rgb(97,97,255)" rx="2" ry="2" />
<text  x="15.17" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (39 samples, 0.08%; +0.01%)</title><rect x="635.4" y="405" width="1.0" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="638.41" y="415.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; -0.00%)</title><rect x="804.6" y="309" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="807.65" y="319.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (40 samples, 0.08%; -0.02%)</title><rect x="433.2" y="277" width="1.0" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="436.19" y="287.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (5 samples, 0.01%; 0.00%)</title><rect x="1140.3" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.33" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (14 samples, 0.03%; +0.00%)</title><rect x="826.1" y="405" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="829.09" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; -0.00%)</title><rect x="51.0" y="485" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="53.97" y="495.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (26 samples, 0.06%; +0.01%)</title><rect x="906.3" y="357" width="0.7" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="909.30" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (319 samples, 0.68%; -0.01%)</title><rect x="431.3" y="309" width="8.0" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="434.29" y="319.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (14 samples, 0.03%; +0.03%)</title><rect x="477.3" y="293" width="0.4" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="480.34" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (7 samples, 0.01%; +0.00%)</title><rect x="276.6" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="279.57" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (5 samples, 0.01%; -0.02%)</title><rect x="496.4" y="213" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="499.36" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (39 samples, 0.08%; +0.00%)</title><rect x="739.3" y="389" width="1.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="742.29" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (544 samples, 1.15%; +0.00%)</title><rect x="687.9" y="501" width="13.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="690.87" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (5 samples, 0.01%; 0.00%)</title><rect x="518.5" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="521.45" y="319.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (145 samples, 0.31%; +0.03%)</title><rect x="1068.1" y="309" width="3.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1071.15" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (53 samples, 0.11%; -0.00%)</title><rect x="707.8" y="405" width="1.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="710.79" y="415.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (467 samples, 0.99%; +0.04%)</title><rect x="465.6" y="277" width="11.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="468.56" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (9 samples, 0.02%; -0.00%)</title><rect x="259.2" y="309" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="262.23" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (16 samples, 0.03%; 0.00%)</title><rect x="1140.3" y="229" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.33" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (51 samples, 0.11%; +0.01%)</title><rect x="672.8" y="453" width="1.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="675.80" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.01%)</title><rect x="657.3" y="485" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="660.30" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (460 samples, 0.97%; -0.00%)</title><rect x="550.2" y="325" width="11.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="553.25" y="335.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::raw_value_view::validate (9 samples, 0.02%; 0.00%)</title><rect x="893.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="896.91" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (23 samples, 0.05%; -0.01%)</title><rect x="622.6" y="469" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="625.56" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (784 samples, 1.66%; +0.01%)</title><rect x="121.2" y="309" width="19.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="124.23" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (106 samples, 0.22%; 0.00%)</title><rect x="18.9" y="373" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.92" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (6 samples, 0.01%; +0.01%)</title><rect x="1032.3" y="229" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1035.33" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; -0.00%)</title><rect x="613.4" y="469" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="616.41" y="479.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (223 samples, 0.47%; -0.01%)</title><rect x="715.8" y="421" width="5.6" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="718.82" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (137 samples, 0.29%; +0.05%)</title><rect x="1127.1" y="405" width="3.4" height="15.0" fill="rgb(255,149,149)" rx="2" ry="2" />
<text  x="1130.11" y="415.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (12 samples, 0.03%; 0.00%)</title><rect x="24.0" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.97" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (10 samples, 0.02%; -0.02%)</title><rect x="851.7" y="405" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="854.69" y="415.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (33 samples, 0.07%; 0.00%)</title><rect x="730.7" y="373" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="733.71" y="383.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (25 samples, 0.05%; -0.01%)</title><rect x="1118.6" y="389" width="0.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1121.59" y="399.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (10 samples, 0.02%; -0.00%)</title><rect x="901.7" y="389" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="904.70" y="399.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (154 samples, 0.33%; +0.01%)</title><rect x="459.2" y="261" width="3.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="462.24" y="271.5" ></text>
</g>
<g >
<title>compound_type&lt; (77 samples, 0.16%; -0.02%)</title><rect x="907.8" y="357" width="1.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="910.75" y="367.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (34 samples, 0.07%; 0.00%)</title><rect x="1139.3" y="405" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.28" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (61 samples, 0.13%; +0.01%)</title><rect x="979.7" y="277" width="1.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="982.74" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (6 samples, 0.01%; +0.00%)</title><rect x="245.6" y="213" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="248.56" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (67 samples, 0.14%; -0.00%)</title><rect x="551.0" y="309" width="1.7" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="554.02" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (23 samples, 0.05%; -0.01%)</title><rect x="657.5" y="485" width="0.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="660.50" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (24 samples, 0.05%; 0.00%)</title><rect x="683.4" y="453" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.45" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (5 samples, 0.01%; -0.00%)</title><rect x="483.1" y="309" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="486.11" y="319.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous&gt; (9 samples, 0.02%; 0.00%)</title><rect x="801.8" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="804.85" y="303.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (27 samples, 0.06%; +0.01%)</title><rect x="454.6" y="277" width="0.7" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="457.59" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (63 samples, 0.13%; -0.01%)</title><rect x="1036.4" y="245" width="1.5" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1039.35" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (11 samples, 0.02%; +0.00%)</title><rect x="76.6" y="453" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="79.64" y="463.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (5 samples, 0.01%; 0.00%)</title><rect x="1140.2" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.16" y="255.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (99 samples, 0.21%; -0.01%)</title><rect x="808.4" y="341" width="2.5" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="811.40" y="351.5" ></text>
</g>
<g >
<title>schema::column_at (71 samples, 0.15%; 0.00%)</title><rect x="198.1" y="117" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="201.06" y="127.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (8 samples, 0.02%; +0.00%)</title><rect x="19.7" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="22.75" y="319.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (44 samples, 0.09%; +0.00%)</title><rect x="451.7" y="325" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="454.69" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (14 samples, 0.03%; 0.00%)</title><rect x="1031.7" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1034.66" y="239.5" ></text>
</g>
<g >
<title>compound_type&lt; (6 samples, 0.01%; -0.00%)</title><rect x="534.1" y="341" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="537.10" y="351.5" ></text>
</g>
<g >
<title>operator delete (29 samples, 0.06%; 0.00%)</title><rect x="578.3" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="581.32" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (24 samples, 0.05%; -0.01%)</title><rect x="255.3" y="277" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="258.30" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="995.8" y="309" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="998.79" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (45 samples, 0.10%; +0.03%)</title><rect x="939.4" y="357" width="1.2" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="942.45" y="367.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (43 samples, 0.09%; +0.01%)</title><rect x="233.5" y="165" width="1.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="236.46" y="175.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (40 samples, 0.08%; 0.00%)</title><rect x="675.7" y="485" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.67" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (63 samples, 0.13%; -0.00%)</title><rect x="839.6" y="421" width="1.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="842.64" y="431.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (19 samples, 0.04%; -0.01%)</title><rect x="1074.1" y="325" width="0.5" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1077.15" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (17 samples, 0.04%; 0.00%)</title><rect x="860.3" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.34" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (24 samples, 0.05%; -0.01%)</title><rect x="547.5" y="309" width="0.6" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="550.52" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.01%)</title><rect x="152.0" y="197" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="155.02" y="207.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (14 samples, 0.03%; +0.02%)</title><rect x="886.7" y="293" width="0.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="889.73" y="303.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (23 samples, 0.05%; -0.01%)</title><rect x="608.8" y="405" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="611.76" y="415.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (7 samples, 0.01%; 0.00%)</title><rect x="861.5" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.46" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.02%; +0.00%)</title><rect x="1100.2" y="341" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1103.24" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (18 samples, 0.04%; -0.03%)</title><rect x="70.8" y="389" width="0.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="73.76" y="399.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (7 samples, 0.01%; -0.00%)</title><rect x="681.9" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="684.90" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (17 samples, 0.04%; 0.00%)</title><rect x="860.3" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.34" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (8 samples, 0.02%; 0.00%)</title><rect x="212.8" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="215.84" y="159.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (7 samples, 0.01%; +0.01%)</title><rect x="636.0" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="639.03" y="383.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (7 samples, 0.01%; -0.00%)</title><rect x="351.7" y="165" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="354.68" y="175.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (26 samples, 0.06%; 0.00%)</title><rect x="1175.7" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1178.73" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.01%)</title><rect x="981.5" y="309" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="984.51" y="319.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (20 samples, 0.04%; +0.00%)</title><rect x="822.8" y="293" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="825.80" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; -0.00%)</title><rect x="799.2" y="229" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="802.20" y="239.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (5 samples, 0.01%; +0.00%)</title><rect x="997.6" y="293" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1000.64" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (25 samples, 0.05%; -0.00%)</title><rect x="645.7" y="485" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="648.73" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (13 samples, 0.03%; +0.02%)</title><rect x="1025.7" y="149" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1028.73" y="159.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (42 samples, 0.09%; +0.08%)</title><rect x="540.4" y="421" width="1.0" height="15.0" fill="rgb(255,110,110)" rx="2" ry="2" />
<text  x="543.40" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (19 samples, 0.04%; -0.01%)</title><rect x="138.8" y="261" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="141.78" y="271.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (10 samples, 0.02%; -0.01%)</title><rect x="25.4" y="517" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="28.37" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (21 samples, 0.04%; -0.01%)</title><rect x="521.7" y="245" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="524.65" y="255.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (19 samples, 0.04%; +0.02%)</title><rect x="408.2" y="277" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="411.20" y="287.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (12 samples, 0.03%; -0.01%)</title><rect x="430.2" y="325" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="433.22" y="335.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.01%)</title><rect x="784.4" y="197" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="787.35" y="207.5" ></text>
</g>
<g >
<title>database::find_schema (324 samples, 0.69%; -0.01%)</title><rect x="746.3" y="405" width="8.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="749.31" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (119 samples, 0.25%; +0.13%)</title><rect x="879.6" y="405" width="3.0" height="15.0" fill="rgb(255,49,49)" rx="2" ry="2" />
<text  x="882.58" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (12 samples, 0.03%; -0.01%)</title><rect x="930.9" y="405" width="0.3" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="933.90" y="415.5" ></text>
</g>
<g >
<title>table::query (38 samples, 0.08%; +0.00%)</title><rect x="1173.9" y="501" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1176.88" y="511.5" ></text>
</g>
<g >
<title>row::row (24 samples, 0.05%; -0.02%)</title><rect x="247.0" y="197" width="0.6" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="249.98" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (20 samples, 0.04%; 0.00%)</title><rect x="414.2" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="417.20" y="367.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (22 samples, 0.05%; -0.00%)</title><rect x="810.3" y="293" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="813.30" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (20 samples, 0.04%; -0.01%)</title><rect x="507.8" y="261" width="0.5" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="510.83" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (28 samples, 0.06%; -0.00%)</title><rect x="994.2" y="229" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="997.24" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (11 samples, 0.02%; -0.06%)</title><rect x="310.4" y="165" width="0.2" height="15.0" fill="rgb(139,139,255)" rx="2" ry="2" />
<text  x="313.37" y="175.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (139 samples, 0.29%; +0.01%)</title><rect x="623.9" y="501" width="3.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="626.86" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (16 samples, 0.03%; +0.01%)</title><rect x="489.9" y="261" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="492.88" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (7 samples, 0.01%; +0.01%)</title><rect x="44.0" y="469" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="46.97" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (73 samples, 0.15%; +0.04%)</title><rect x="435.2" y="229" width="1.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="438.24" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (87 samples, 0.18%; +0.01%)</title><rect x="39.1" y="437" width="2.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="42.14" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (5 samples, 0.01%; +0.00%)</title><rect x="850.5" y="421" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="853.49" y="431.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (5 samples, 0.01%; +0.00%)</title><rect x="735.1" y="277" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="738.14" y="287.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (8 samples, 0.02%; +0.01%)</title><rect x="1134.0" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1137.01" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (7 samples, 0.01%; +0.00%)</title><rect x="74.6" y="421" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="77.61" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (27 samples, 0.06%; +0.03%)</title><rect x="782.6" y="133" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="785.60" y="143.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="42.6" y="453" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="45.57" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (10 samples, 0.02%; -0.01%)</title><rect x="1120.4" y="405" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1123.39" y="415.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.06%; -0.02%)</title><rect x="603.0" y="421" width="0.7" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="606.04" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (28 samples, 0.06%; +0.02%)</title><rect x="1126.3" y="373" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1129.34" y="383.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; -0.01%)</title><rect x="483.4" y="309" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="486.36" y="319.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (31 samples, 0.07%; -0.01%)</title><rect x="416.5" y="421" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="419.47" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (8 samples, 0.02%; -0.01%)</title><rect x="659.2" y="469" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="662.18" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (49 samples, 0.10%; -0.01%)</title><rect x="295.0" y="261" width="1.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="297.97" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (31 samples, 0.07%; +0.03%)</title><rect x="1054.6" y="293" width="0.7" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="1057.55" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (88 samples, 0.19%; +0.02%)</title><rect x="898.2" y="341" width="2.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="901.23" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.05%; 0.00%)</title><rect x="1140.1" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.13" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (48 samples, 0.10%; +0.01%)</title><rect x="1102.2" y="373" width="1.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1105.19" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.01%)</title><rect x="398.4" y="181" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="401.40" y="191.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (64 samples, 0.14%; -0.01%)</title><rect x="789.5" y="133" width="1.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="792.45" y="143.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (8 samples, 0.02%; 0.00%)</title><rect x="19.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.02" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (8 samples, 0.02%; +0.00%)</title><rect x="326.5" y="165" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="329.49" y="175.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (6 samples, 0.01%; -0.00%)</title><rect x="666.6" y="469" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="669.65" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (8 samples, 0.02%; 0.00%)</title><rect x="861.2" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.21" y="399.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.02%; +0.00%)</title><rect x="157.9" y="229" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="160.90" y="239.5" ></text>
</g>
<g >
<title>free (17 samples, 0.04%; -0.00%)</title><rect x="39.4" y="421" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="42.37" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (21 samples, 0.04%; -0.02%)</title><rect x="445.2" y="261" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="448.19" y="271.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (5 samples, 0.01%; -0.02%)</title><rect x="438.1" y="277" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="441.14" y="287.5" ></text>
</g>
<g >
<title>sstring_hash::operator (32 samples, 0.07%; +0.00%)</title><rect x="836.1" y="373" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="839.09" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (5 samples, 0.01%; 0.00%)</title><rect x="1140.2" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.16" y="303.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (2,095 samples, 4.44%; +0.04%)</title><rect x="995.9" y="309" width="52.4" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="998.94" y="319.5" >servi..</text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (11 samples, 0.02%; -0.00%)</title><rect x="1116.7" y="325" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1119.74" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (10 samples, 0.02%; +0.01%)</title><rect x="896.9" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="899.86" y="367.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (11 samples, 0.02%; +0.00%)</title><rect x="216.6" y="149" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="219.56" y="159.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (81 samples, 0.17%; +0.05%)</title><rect x="941.5" y="357" width="2.1" height="15.0" fill="rgb(255,152,152)" rx="2" ry="2" />
<text  x="944.55" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (12 samples, 0.03%; +0.01%)</title><rect x="593.2" y="437" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="596.24" y="447.5" ></text>
</g>
<g >
<title>operator new (22 samples, 0.05%; -0.00%)</title><rect x="1153.5" y="437" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1156.48" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (33 samples, 0.07%; -0.00%)</title><rect x="223.6" y="213" width="0.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="226.61" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (549 samples, 1.16%; +0.01%)</title><rect x="268.0" y="357" width="13.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="270.95" y="367.5" ></text>
</g>
<g >
<title>create_partitions (290 samples, 0.61%; +0.00%)</title><rect x="16.6" y="533" width="7.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="19.62" y="543.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (31 samples, 0.07%; +0.00%)</title><rect x="805.4" y="309" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="808.45" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (159 samples, 0.34%; -0.03%)</title><rect x="218.8" y="197" width="3.9" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="221.76" y="207.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (534 samples, 1.13%; +0.09%)</title><rect x="1108.0" y="421" width="13.4" height="15.0" fill="rgb(255,102,102)" rx="2" ry="2" />
<text  x="1111.04" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (14 samples, 0.03%; +0.01%)</title><rect x="1150.5" y="485" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1153.51" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (18 samples, 0.04%; -0.03%)</title><rect x="471.1" y="197" width="0.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="474.11" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (9 samples, 0.02%; -0.01%)</title><rect x="1038.2" y="261" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1041.20" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (77 samples, 0.16%; -0.00%)</title><rect x="537.0" y="357" width="2.0" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="540.05" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (22,740 samples, 48.17%; +0.01%)</title><rect x="48.5" y="501" width="568.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="51.52" y="511.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (8 samples, 0.02%; +0.01%)</title><rect x="74.8" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="77.84" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (155 samples, 0.33%; -0.00%)</title><rect x="991.8" y="309" width="3.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="994.81" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (51 samples, 0.11%; +0.01%)</title><rect x="636.5" y="437" width="1.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="639.53" y="447.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (50 samples, 0.11%; -0.01%)</title><rect x="797.2" y="261" width="1.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="800.17" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::stats (28 samples, 0.06%; -0.01%)</title><rect x="491.0" y="245" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="493.96" y="255.5" ></text>
</g>
<g >
<title>database::find_schema (285 samples, 0.60%; -0.01%)</title><rect x="813.9" y="373" width="7.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="816.95" y="383.5" ></text>
</g>
<g >
<title>operator new (16 samples, 0.03%; 0.00%)</title><rect x="829.8" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="832.79" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;current_deleter&lt;range_tombstone_entry&gt; (5 samples, 0.01%; -0.01%)</title><rect x="559.7" y="261" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="562.75" y="271.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (16 samples, 0.03%; +0.00%)</title><rect x="60.6" y="437" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="63.62" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (26 samples, 0.06%; +0.01%)</title><rect x="626.0" y="485" width="0.6" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="628.98" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (26 samples, 0.06%; 0.00%)</title><rect x="861.1" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.14" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (55 samples, 0.12%; -0.03%)</title><rect x="1033.1" y="197" width="1.4" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="1036.08" y="207.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (18 samples, 0.04%; +0.01%)</title><rect x="224.7" y="213" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="227.68" y="223.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (6 samples, 0.01%; -0.01%)</title><rect x="364.8" y="197" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="367.83" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (6 samples, 0.01%; +0.01%)</title><rect x="803.4" y="277" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="806.40" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (7 samples, 0.01%; -0.01%)</title><rect x="681.6" y="453" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="684.60" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (6 samples, 0.01%; 0.00%)</title><rect x="257.1" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="260.10" y="303.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (31 samples, 0.07%; +0.01%)</title><rect x="216.1" y="165" width="0.7" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="219.06" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (11 samples, 0.02%; -0.00%)</title><rect x="505.3" y="309" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="508.33" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (271 samples, 0.57%; -0.00%)</title><rect x="1154.0" y="469" width="6.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1157.03" y="479.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (9 samples, 0.02%; -0.01%)</title><rect x="303.9" y="197" width="0.3" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="306.94" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="805.3" y="309" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="808.32" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (8 samples, 0.02%; +0.01%)</title><rect x="940.2" y="325" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="943.22" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (7 samples, 0.01%; 0.00%)</title><rect x="24.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.10" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (6 samples, 0.01%; -0.00%)</title><rect x="114.4" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="117.43" y="367.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (82 samples, 0.17%; +0.01%)</title><rect x="151.1" y="213" width="2.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="154.12" y="223.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (57 samples, 0.12%; 0.00%)</title><rect x="17.5" y="357" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.47" y="367.5" ></text>
</g>
<g >
<title>schema::position (8 samples, 0.02%; 0.00%)</title><rect x="930.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="932.97" y="415.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (77 samples, 0.16%; +0.06%)</title><rect x="855.2" y="453" width="2.0" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="858.24" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (8 samples, 0.02%; -0.00%)</title><rect x="131.5" y="245" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="134.53" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (6 samples, 0.01%; +0.00%)</title><rect x="1130.6" y="421" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1133.64" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (11 samples, 0.02%; -0.00%)</title><rect x="168.6" y="133" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="171.64" y="143.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="488.7" y="261" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="491.71" y="271.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (6 samples, 0.01%; 0.00%)</title><rect x="861.2" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.24" y="383.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.01%; -0.01%)</title><rect x="735.0" y="277" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="738.01" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="1142.8" y="501" width="0.1" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1145.76" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;void&gt;::promise_type::run_and_dispose (5 samples, 0.01%; +0.00%)</title><rect x="26.1" y="517" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="29.10" y="527.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (41 samples, 0.09%; 0.00%)</title><rect x="152.1" y="197" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="155.15" y="207.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (98 samples, 0.21%; -0.01%)</title><rect x="176.2" y="101" width="2.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="179.17" y="111.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (16 samples, 0.03%; -0.00%)</title><rect x="79.5" y="453" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="82.49" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (5 samples, 0.01%; +0.00%)</title><rect x="140.0" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="143.00" y="271.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (5 samples, 0.01%; +0.01%)</title><rect x="415.3" y="373" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="418.32" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (18 samples, 0.04%; +0.00%)</title><rect x="694.8" y="421" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="697.82" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (36 samples, 0.08%; +0.01%)</title><rect x="926.5" y="405" width="0.9" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="929.45" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="679.6" y="469" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="682.60" y="479.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (5 samples, 0.01%; 0.00%)</title><rect x="24.1" y="421" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.10" y="431.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (1,263 samples, 2.68%; +0.02%)</title><rect x="772.8" y="325" width="31.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="775.75" y="335.5" >st..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; -0.00%)</title><rect x="600.7" y="389" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="603.74" y="399.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (37 samples, 0.08%; 0.00%)</title><rect x="675.7" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.67" y="431.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (204 samples, 0.43%; 0.00%)</title><rect x="17.0" y="469" width="5.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.05" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (43 samples, 0.09%; -0.06%)</title><rect x="363.5" y="181" width="1.1" height="15.0" fill="rgb(133,133,255)" rx="2" ry="2" />
<text  x="366.53" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (8 samples, 0.02%; -0.00%)</title><rect x="529.6" y="389" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="532.63" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (30 samples, 0.06%; -0.02%)</title><rect x="597.7" y="437" width="0.7" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="600.66" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (16 samples, 0.03%; 0.00%)</title><rect x="1140.3" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.33" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (67 samples, 0.14%; +0.02%)</title><rect x="500.9" y="245" width="1.7" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="503.91" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (41 samples, 0.09%; +0.00%)</title><rect x="1148.6" y="485" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1151.56" y="495.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (8 samples, 0.02%; -0.01%)</title><rect x="330.8" y="181" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="333.79" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (19 samples, 0.04%; +0.01%)</title><rect x="917.9" y="389" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="920.88" y="399.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (46 samples, 0.10%; +0.00%)</title><rect x="812.5" y="373" width="1.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="815.50" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="486.2" y="293" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="489.21" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (7 samples, 0.01%; +0.00%)</title><rect x="655.3" y="469" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="658.25" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (59 samples, 0.12%; +0.01%)</title><rect x="987.2" y="277" width="1.5" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="990.24" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (14 samples, 0.03%; -0.01%)</title><rect x="747.9" y="325" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="750.86" y="335.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (5,691 samples, 12.05%; +0.03%)</title><rect x="117.6" y="325" width="142.2" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="120.55" y="335.5" >mutation_reader_me..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (82 samples, 0.17%; +0.00%)</title><rect x="194.4" y="117" width="2.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="197.41" y="127.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (7 samples, 0.01%; 0.00%)</title><rect x="392.5" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="395.53" y="223.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (9 samples, 0.02%; +0.01%)</title><rect x="282.9" y="357" width="0.2" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="285.87" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (9 samples, 0.02%; +0.00%)</title><rect x="854.6" y="421" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="857.56" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (21 samples, 0.04%; +0.01%)</title><rect x="134.2" y="245" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="137.20" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (255 samples, 0.54%; +0.07%)</title><rect x="1086.0" y="277" width="6.4" height="15.0" fill="rgb(255,120,120)" rx="2" ry="2" />
<text  x="1089.04" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (23 samples, 0.05%; +0.02%)</title><rect x="234.5" y="213" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="237.53" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (9 samples, 0.02%; -0.01%)</title><rect x="609.1" y="389" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="612.11" y="399.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (5 samples, 0.01%; +0.00%)</title><rect x="221.9" y="117" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="224.91" y="127.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (15 samples, 0.03%; +0.03%)</title><rect x="1046.4" y="277" width="0.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1049.35" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (429 samples, 0.91%; +0.02%)</title><rect x="147.8" y="245" width="10.7" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="150.77" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.01%; +0.01%)</title><rect x="292.6" y="309" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="295.57" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (55 samples, 0.12%; -0.00%)</title><rect x="20.0" y="325" width="1.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="23.00" y="335.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (8 samples, 0.02%; -0.00%)</title><rect x="844.4" y="325" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="847.39" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (7 samples, 0.01%; -0.01%)</title><rect x="405.8" y="277" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="408.82" y="287.5" ></text>
</g>
<g >
<title>operator new (17 samples, 0.04%; +0.01%)</title><rect x="642.7" y="453" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="645.65" y="463.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (3,293 samples, 6.98%; +0.01%)</title><rect x="304.9" y="229" width="82.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="307.94" y="239.5" >compact_m..</text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::set_latency (11 samples, 0.02%; +0.01%)</title><rect x="612.9" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="615.86" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (6 samples, 0.01%; 0.00%)</title><rect x="207.4" y="133" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="210.39" y="143.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (10,850 samples, 22.98%; -0.09%)</title><rect x="867.9" y="469" width="271.2" height="15.0" fill="rgb(97,97,255)" rx="2" ry="2" />
<text  x="870.86" y="479.5" >seastar::noncopyable_function&lt;seasta..</text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (25 samples, 0.05%; +0.03%)</title><rect x="542.1" y="405" width="0.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="545.10" y="415.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (7 samples, 0.01%; 0.00%)</title><rect x="1174.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1177.43" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (53 samples, 0.11%; 0.00%)</title><rect x="1156.0" y="421" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1159.03" y="431.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (6 samples, 0.01%; 0.00%)</title><rect x="21.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.15" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (36 samples, 0.08%; +0.02%)</title><rect x="881.5" y="389" width="0.9" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="884.51" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (66 samples, 0.14%; -0.00%)</title><rect x="802.1" y="293" width="1.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="805.10" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (66 samples, 0.14%; +0.03%)</title><rect x="939.0" y="373" width="1.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="942.05" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (20 samples, 0.04%; 0.00%)</title><rect x="623.3" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="626.31" y="479.5" ></text>
</g>
<g >
<title>__libc_start_main (46,098 samples, 97.65%; 0.00%)</title><rect x="24.3" y="629" width="1152.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.32" y="639.5" >__libc_start_main</text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.07%; 0.00%)</title><rect x="1139.3" y="469" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.28" y="479.5" ></text>
</g>
<g >
<title>operator new (58 samples, 0.12%; +0.01%)</title><rect x="528.0" y="405" width="1.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="530.98" y="415.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (16 samples, 0.03%; +0.01%)</title><rect x="330.4" y="181" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="333.39" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.01%; +0.01%)</title><rect x="292.7" y="309" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="295.70" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (14 samples, 0.03%; +0.00%)</title><rect x="530.3" y="389" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="533.25" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::future (5 samples, 0.01%; +0.01%)</title><rect x="962.5" y="373" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="965.47" y="383.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (22 samples, 0.05%; +0.01%)</title><rect x="692.1" y="453" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="695.07" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (11 samples, 0.02%; +0.01%)</title><rect x="407.9" y="277" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="410.90" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (12 samples, 0.03%; 0.00%)</title><rect x="1176.0" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1178.98" y="463.5" ></text>
</g>
<g >
<title>operator new (75 samples, 0.16%; -0.00%)</title><rect x="435.2" y="245" width="1.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="438.19" y="255.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (6 samples, 0.01%; +0.00%)</title><rect x="717.8" y="341" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="720.82" y="351.5" ></text>
</g>
<g >
<title>row::row (7 samples, 0.01%; 0.00%)</title><rect x="247.7" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="250.68" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (15 samples, 0.03%; +0.03%)</title><rect x="986.0" y="293" width="0.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="989.01" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (12 samples, 0.03%; +0.01%)</title><rect x="224.1" y="181" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="227.13" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (22 samples, 0.05%; -0.00%)</title><rect x="72.1" y="405" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="75.14" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (306 samples, 0.65%; +0.02%)</title><rect x="937.2" y="421" width="7.7" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="940.25" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (75 samples, 0.16%; +0.01%)</title><rect x="733.7" y="325" width="1.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="736.74" y="335.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (20 samples, 0.04%; +0.01%)</title><rect x="312.6" y="165" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="315.62" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (105 samples, 0.22%; -0.00%)</title><rect x="568.3" y="357" width="2.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="571.29" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (162 samples, 0.34%; +0.01%)</title><rect x="1055.5" y="325" width="4.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1058.53" y="335.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (6 samples, 0.01%; -0.01%)</title><rect x="727.7" y="389" width="0.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="730.69" y="399.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (7 samples, 0.01%; -0.01%)</title><rect x="79.1" y="453" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="82.09" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (7 samples, 0.01%; +0.01%)</title><rect x="229.3" y="261" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="232.26" y="271.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (45 samples, 0.10%; +0.02%)</title><rect x="286.9" y="373" width="1.1" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="289.92" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (102 samples, 0.22%; +0.00%)</title><rect x="1032.8" y="229" width="2.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1035.75" y="239.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (102 samples, 0.22%; +0.02%)</title><rect x="949.6" y="357" width="2.5" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="952.57" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (27 samples, 0.06%; -0.03%)</title><rect x="832.4" y="421" width="0.7" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="835.39" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (23 samples, 0.05%; -0.00%)</title><rect x="735.8" y="293" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="738.79" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (35 samples, 0.07%; +0.07%)</title><rect x="1103.5" y="373" width="0.9" height="15.0" fill="rgb(255,128,128)" rx="2" ry="2" />
<text  x="1106.54" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (29 samples, 0.06%; +0.01%)</title><rect x="591.3" y="437" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="594.31" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (8 samples, 0.02%; -0.00%)</title><rect x="821.6" y="325" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="824.65" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (20 samples, 0.04%; +0.02%)</title><rect x="510.7" y="325" width="0.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="513.70" y="335.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (5,676 samples, 12.02%; +0.00%)</title><rect x="710.7" y="469" width="141.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="713.67" y="479.5" >single_node_cql_en..</text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (10 samples, 0.02%; 0.00%)</title><rect x="691.7" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="694.72" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (552 samples, 1.17%; +0.00%)</title><rect x="631.1" y="485" width="13.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="634.11" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (30 samples, 0.06%; +0.01%)</title><rect x="662.3" y="453" width="0.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="665.30" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.00%)</title><rect x="574.2" y="373" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="577.19" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (71 samples, 0.15%; +0.00%)</title><rect x="983.2" y="309" width="1.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="986.16" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (7 samples, 0.01%; -0.03%)</title><rect x="69.2" y="389" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="72.19" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.01%; -0.01%)</title><rect x="923.8" y="309" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="926.83" y="319.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (5 samples, 0.01%; 0.00%)</title><rect x="1041.4" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1044.38" y="287.5" ></text>
</g>
<g >
<title>seastar::app_template::run (46,098 samples, 97.65%; 0.00%)</title><rect x="24.3" y="597" width="1152.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.32" y="607.5" >seastar::app_template::run</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (21 samples, 0.04%; -0.00%)</title><rect x="397.9" y="165" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="400.88" y="175.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (40 samples, 0.08%; +0.08%)</title><rect x="942.1" y="341" width="1.0" height="15.0" fill="rgb(255,107,107)" rx="2" ry="2" />
<text  x="945.10" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (14 samples, 0.03%; +0.01%)</title><rect x="637.4" y="389" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="640.38" y="399.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (20 samples, 0.04%; -0.01%)</title><rect x="1035.6" y="245" width="0.5" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="1038.60" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (6 samples, 0.01%; -0.02%)</title><rect x="658.2" y="485" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="661.15" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="900.3" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="903.28" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (9 samples, 0.02%; +0.01%)</title><rect x="415.1" y="373" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="418.10" y="383.5" ></text>
</g>
<g >
<title>__strlen_avx2 (105 samples, 0.22%; +0.04%)</title><rect x="1011.6" y="245" width="2.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1014.58" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (77 samples, 0.16%; +0.01%)</title><rect x="972.2" y="325" width="1.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="975.17" y="335.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (15 samples, 0.03%; +0.03%)</title><rect x="508.4" y="309" width="0.4" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="511.38" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%; -0.00%)</title><rect x="406.0" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="409.00" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (38 samples, 0.08%; -0.00%)</title><rect x="716.9" y="341" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="719.87" y="351.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (12 samples, 0.03%; -0.01%)</title><rect x="909.2" y="325" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="912.18" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (22 samples, 0.05%; -0.00%)</title><rect x="1047.1" y="293" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1050.05" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (40 samples, 0.08%; +0.00%)</title><rect x="17.7" y="293" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="20.75" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (24 samples, 0.05%; +0.00%)</title><rect x="556.9" y="277" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="559.90" y="287.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (326 samples, 0.69%; -0.02%)</title><rect x="1077.1" y="261" width="8.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1080.12" y="271.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (143 samples, 0.30%; -0.03%)</title><rect x="920.8" y="389" width="3.6" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="923.83" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; +0.00%)</title><rect x="421.8" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="424.82" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (43 samples, 0.09%; -0.01%)</title><rect x="747.1" y="341" width="1.1" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="750.13" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (5 samples, 0.01%; +0.00%)</title><rect x="477.7" y="325" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="480.69" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (147 samples, 0.31%; -0.00%)</title><rect x="991.9" y="293" width="3.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="994.94" y="303.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (54 samples, 0.11%; +0.02%)</title><rect x="186.2" y="69" width="1.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="189.19" y="79.5" ></text>
</g>
<g >
<title>dht::tri_compare (11 samples, 0.02%; -0.00%)</title><rect x="1092.1" y="245" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1095.14" y="255.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (471 samples, 1.00%; +0.01%)</title><rect x="884.6" y="357" width="11.8" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="887.61" y="367.5" ></text>
</g>
<g >
<title>row_cache::make_reader (461 samples, 0.98%; -0.02%)</title><rect x="513.5" y="341" width="11.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="516.50" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (20 samples, 0.04%; +0.03%)</title><rect x="63.1" y="437" width="0.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="66.09" y="447.5" ></text>
</g>
<g >
<title>seastar::gate::leave (5 samples, 0.01%; -0.03%)</title><rect x="62.3" y="405" width="0.2" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="65.34" y="415.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (14 samples, 0.03%; +0.00%)</title><rect x="823.6" y="277" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="826.64" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,533 samples, 9.60%; +0.02%)</title><rect x="292.8" y="309" width="113.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="295.85" y="319.5" >std::__invoke_..</text>
</g>
<g >
<title>seastar::reactor::run (46,097 samples, 97.64%; 0.00%)</title><rect x="24.3" y="549" width="1152.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.32" y="559.5" >seastar::reactor::run</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (30 samples, 0.06%; +0.01%)</title><rect x="1166.0" y="469" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1168.95" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.01%)</title><rect x="796.6" y="181" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="799.60" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (11 samples, 0.02%; -0.00%)</title><rect x="223.3" y="213" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="226.33" y="223.5" ></text>
</g>
<g >
<title>[unknown] (570 samples, 1.21%; 0.00%)</title><rect x="10.1" y="629" width="14.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.07" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (13 samples, 0.03%; +0.00%)</title><rect x="37.2" y="453" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="40.19" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (280 samples, 0.59%; -0.03%)</title><rect x="565.3" y="373" width="7.0" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="568.32" y="383.5" ></text>
</g>
<g >
<title>std::operator+ (5 samples, 0.01%; 0.00%)</title><rect x="19.1" y="197" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.10" y="207.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (8 samples, 0.02%; +0.00%)</title><rect x="676.0" y="261" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="679.00" y="271.5" ></text>
</g>
<g >
<title>dht::tri_compare (87 samples, 0.18%; +0.01%)</title><rect x="466.5" y="261" width="2.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="469.46" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (13 samples, 0.03%; -0.01%)</title><rect x="700.7" y="485" width="0.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="703.74" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (30 samples, 0.06%; +0.01%)</title><rect x="652.2" y="437" width="0.8" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="655.20" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (12 samples, 0.03%; +0.01%)</title><rect x="844.7" y="405" width="0.3" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="847.69" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (70 samples, 0.15%; -0.04%)</title><rect x="192.7" y="117" width="1.7" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="195.67" y="127.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (21 samples, 0.04%; -0.01%)</title><rect x="797.8" y="229" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="800.85" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (6 samples, 0.01%; +0.01%)</title><rect x="748.5" y="373" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="751.46" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (18 samples, 0.04%; -0.01%)</title><rect x="204.2" y="101" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="207.21" y="111.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (21 samples, 0.04%; -0.00%)</title><rect x="860.3" y="501" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="863.34" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (99 samples, 0.21%; +0.00%)</title><rect x="898.0" y="357" width="2.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="900.96" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (6 samples, 0.01%; +0.01%)</title><rect x="273.1" y="277" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="276.10" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (16 samples, 0.03%; +0.00%)</title><rect x="1045.5" y="213" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1048.48" y="223.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (179 samples, 0.38%; +0.02%)</title><rect x="985.3" y="309" width="4.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="988.34" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (8 samples, 0.02%; -0.00%)</title><rect x="808.1" y="341" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="811.15" y="351.5" ></text>
</g>
<g >
<title>reader_permit::consume (20 samples, 0.04%; +0.00%)</title><rect x="278.7" y="277" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="281.72" y="287.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.05%; 0.00%)</title><rect x="1140.1" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.13" y="479.5" ></text>
</g>
<g >
<title>perf_simple_que (47,207 samples, 100.00%; 0.00%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >perf_simple_que</text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (6 samples, 0.01%; 0.00%)</title><rect x="967.7" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="970.72" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (47 samples, 0.10%; +0.02%)</title><rect x="950.4" y="325" width="1.2" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="953.45" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (38 samples, 0.08%; +0.01%)</title><rect x="954.2" y="373" width="1.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="957.22" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (30 samples, 0.06%; 0.00%)</title><rect x="1175.6" y="501" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1178.63" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (12 samples, 0.03%; +0.00%)</title><rect x="403.1" y="229" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="406.10" y="239.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (5 samples, 0.01%; +0.01%)</title><rect x="66.0" y="405" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="69.01" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (24 samples, 0.05%; -0.04%)</title><rect x="501.6" y="229" width="0.6" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="504.58" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (12 samples, 0.03%; +0.00%)</title><rect x="415.4" y="373" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="418.45" y="383.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (8 samples, 0.02%; 0.00%)</title><rect x="548.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="551.12" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (25 samples, 0.05%; -0.03%)</title><rect x="925.4" y="389" width="0.6" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="928.38" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (16 samples, 0.03%; -0.00%)</title><rect x="799.9" y="229" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="802.87" y="239.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (72 samples, 0.15%; +0.00%)</title><rect x="707.4" y="437" width="1.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="710.37" y="447.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (6 samples, 0.01%; -0.00%)</title><rect x="1062.7" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1065.67" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="812.2" y="357" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="815.25" y="367.5" ></text>
</g>
<g >
<title>make_combined_reader (786 samples, 1.66%; -0.00%)</title><rect x="428.8" y="341" width="19.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="431.77" y="351.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (5 samples, 0.01%; 0.00%)</title><rect x="24.1" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.10" y="447.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (154 samples, 0.33%; -0.01%)</title><rect x="235.2" y="213" width="3.9" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="238.21" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (5 samples, 0.01%; +0.01%)</title><rect x="1096.3" y="341" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1099.32" y="351.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (48 samples, 0.10%; +0.00%)</title><rect x="547.4" y="325" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="550.40" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (14 samples, 0.03%; -0.01%)</title><rect x="642.7" y="437" width="0.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="645.73" y="447.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (13 samples, 0.03%; +0.02%)</title><rect x="1117.6" y="405" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1120.59" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (6 samples, 0.01%; 0.00%)</title><rect x="19.1" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.07" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; -0.02%)</title><rect x="398.6" y="197" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="401.60" y="207.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (7 samples, 0.01%; +0.00%)</title><rect x="231.6" y="213" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="234.61" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (163 samples, 0.35%; +0.01%)</title><rect x="211.7" y="165" width="4.0" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="214.66" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (13 samples, 0.03%; -0.01%)</title><rect x="671.4" y="453" width="0.3" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="674.40" y="463.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::touch (6 samples, 0.01%; +0.01%)</title><rect x="730.3" y="325" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="733.29" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (179 samples, 0.38%; +0.00%)</title><rect x="17.4" y="389" width="4.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="20.42" y="399.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (26 samples, 0.06%; -0.00%)</title><rect x="566.6" y="357" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="569.59" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (31 samples, 0.07%; +0.01%)</title><rect x="100.5" y="421" width="0.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="103.51" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (213 samples, 0.45%; +0.00%)</title><rect x="217.8" y="229" width="5.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="220.76" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (20 samples, 0.04%; -0.01%)</title><rect x="587.6" y="357" width="0.5" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="590.56" y="367.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (38 samples, 0.08%; +0.03%)</title><rect x="1038.6" y="261" width="1.0" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="1041.60" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (101 samples, 0.21%; +0.01%)</title><rect x="443.2" y="277" width="2.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="446.19" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (41 samples, 0.09%; +0.02%)</title><rect x="759.9" y="341" width="1.0" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="762.86" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (8 samples, 0.02%; -0.00%)</title><rect x="91.8" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="94.81" y="447.5" ></text>
</g>
<g >
<title>query::digester::digester (25 samples, 0.05%; -0.00%)</title><rect x="586.0" y="405" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="588.99" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (21 samples, 0.04%; +0.01%)</title><rect x="139.5" y="261" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="142.48" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (6 samples, 0.01%; +0.01%)</title><rect x="248.7" y="277" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="251.65" y="287.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (5 samples, 0.01%; -0.00%)</title><rect x="79.9" y="453" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="82.91" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (134 samples, 0.28%; +0.02%)</title><rect x="1004.2" y="261" width="3.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1007.19" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (224 samples, 0.47%; -0.01%)</title><rect x="210.2" y="181" width="5.6" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="213.24" y="191.5" ></text>
</g>
<g >
<title>operator new (41 samples, 0.09%; +0.00%)</title><rect x="536.0" y="357" width="1.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="538.97" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (66 samples, 0.14%; +0.02%)</title><rect x="828.9" y="405" width="1.6" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="831.89" y="415.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (51 samples, 0.11%; +0.00%)</title><rect x="1151.8" y="453" width="1.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1154.83" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (13 samples, 0.03%; +0.03%)</title><rect x="1103.1" y="357" width="0.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1106.07" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (12 samples, 0.03%; -0.00%)</title><rect x="51.2" y="485" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="54.17" y="495.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (20 samples, 0.04%; +0.00%)</title><rect x="1060.2" y="341" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1063.20" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (18 samples, 0.04%; +0.02%)</title><rect x="1071.3" y="293" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1074.32" y="303.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (12 samples, 0.03%; +0.02%)</title><rect x="225.6" y="229" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="228.58" y="239.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (7 samples, 0.01%; +0.00%)</title><rect x="751.5" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="754.48" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (19 samples, 0.04%; +0.03%)</title><rect x="655.9" y="453" width="0.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="658.88" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (42 samples, 0.09%; +0.06%)</title><rect x="95.6" y="421" width="1.1" height="15.0" fill="rgb(255,141,141)" rx="2" ry="2" />
<text  x="98.63" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,848 samples, 10.27%; +0.03%)</title><rect x="289.4" y="325" width="121.2" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="292.42" y="335.5" >seastar::intern..</text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (7 samples, 0.01%; +0.01%)</title><rect x="931.0" y="389" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="934.02" y="399.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (11 samples, 0.02%; 0.00%)</title><rect x="1174.0" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1176.98" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (8 samples, 0.02%; -0.00%)</title><rect x="1135.9" y="421" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1138.86" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (17 samples, 0.04%; +0.01%)</title><rect x="1022.6" y="197" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1025.56" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (10 samples, 0.02%; -0.00%)</title><rect x="616.7" y="469" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="619.66" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (8 samples, 0.02%; +0.01%)</title><rect x="112.2" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="115.18" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.00%)</title><rect x="805.7" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="808.67" y="303.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (8 samples, 0.02%; 0.00%)</title><rect x="520.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="523.08" y="319.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (32 samples, 0.07%; +0.00%)</title><rect x="675.7" y="373" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="678.75" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (10 samples, 0.02%; +0.00%)</title><rect x="857.6" y="485" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="860.59" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (18 samples, 0.04%; +0.00%)</title><rect x="1107.0" y="389" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1109.97" y="399.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (1,045 samples, 2.21%; -0.01%)</title><rect x="775.6" y="293" width="26.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="778.63" y="303.5" >s..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (19 samples, 0.04%; -0.00%)</title><rect x="1146.1" y="485" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1149.06" y="495.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (50 samples, 0.11%; -0.00%)</title><rect x="791.6" y="149" width="1.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="794.60" y="159.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (14 samples, 0.03%; 0.00%)</title><rect x="226.4" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="229.36" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (6 samples, 0.01%; +0.00%)</title><rect x="900.7" y="341" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="903.68" y="351.5" ></text>
</g>
<g >
<title>operator delete (70 samples, 0.15%; +0.02%)</title><rect x="927.9" y="405" width="1.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="930.95" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::future (5 samples, 0.01%; +0.01%)</title><rect x="743.4" y="373" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="746.36" y="383.5" ></text>
</g>
<g >
<title>operator new (36 samples, 0.08%; +0.00%)</title><rect x="526.5" y="325" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="529.45" y="335.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (6 samples, 0.01%; 0.00%)</title><rect x="1139.4" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.41" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (54 samples, 0.11%; +0.03%)</title><rect x="528.1" y="389" width="1.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="531.08" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="709.2" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="712.19" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (73 samples, 0.15%; +0.01%)</title><rect x="938.9" y="389" width="1.8" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="941.90" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (21 samples, 0.04%; -0.01%)</title><rect x="405.3" y="277" width="0.5" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="408.30" y="287.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (22 samples, 0.05%; +0.00%)</title><rect x="156.8" y="213" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="159.85" y="223.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (15 samples, 0.03%; -0.02%)</title><rect x="1095.3" y="309" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1098.34" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (9 samples, 0.02%; +0.01%)</title><rect x="254.8" y="261" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="257.80" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (5 samples, 0.01%; +0.01%)</title><rect x="284.1" y="373" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="287.10" y="383.5" ></text>
</g>
<g >
<title>operator new (77 samples, 0.16%; 0.00%)</title><rect x="1125.1" y="405" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.11" y="415.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.01%; +0.01%)</title><rect x="818.5" y="261" width="0.1" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="821.52" y="271.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (350 samples, 0.74%; +0.06%)</title><rect x="372.8" y="165" width="8.7" height="15.0" fill="rgb(255,133,133)" rx="2" ry="2" />
<text  x="375.76" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (14 samples, 0.03%; +0.01%)</title><rect x="1167.3" y="453" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1170.30" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (39 samples, 0.08%; 0.00%)</title><rect x="22.2" y="437" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.20" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (12 samples, 0.03%; -0.00%)</title><rect x="643.4" y="437" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="646.43" y="447.5" ></text>
</g>
<g >
<title>operator delete (17 samples, 0.04%; -0.03%)</title><rect x="552.2" y="277" width="0.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="555.25" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (9 samples, 0.02%; +0.02%)</title><rect x="637.9" y="437" width="0.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="640.91" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (32 samples, 0.07%; +0.01%)</title><rect x="240.6" y="165" width="0.8" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="243.63" y="175.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (24 samples, 0.05%; +0.00%)</title><rect x="552.1" y="293" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="555.10" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (86 samples, 0.18%; -0.00%)</title><rect x="821.9" y="325" width="2.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="824.90" y="335.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (42 samples, 0.09%; 0.00%)</title><rect x="739.2" y="405" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="742.21" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (18 samples, 0.04%; -0.01%)</title><rect x="600.4" y="405" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="603.41" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (13 samples, 0.03%; -0.01%)</title><rect x="926.9" y="389" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="929.90" y="399.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (7 samples, 0.01%; +0.00%)</title><rect x="1095.7" y="309" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1098.72" y="319.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (24 samples, 0.05%; +0.00%)</title><rect x="288.0" y="373" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="291.05" y="383.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (54 samples, 0.11%; 0.00%)</title><rect x="223.1" y="229" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="226.08" y="239.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (25 samples, 0.05%; +0.00%)</title><rect x="735.7" y="309" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="738.74" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (7 samples, 0.01%; -0.00%)</title><rect x="858.9" y="501" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="861.86" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (5 samples, 0.01%; -0.00%)</title><rect x="416.3" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="419.35" y="415.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (22 samples, 0.05%; +0.00%)</title><rect x="226.7" y="245" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="229.71" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (21 samples, 0.04%; 0.00%)</title><rect x="648.2" y="485" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="651.23" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (23 samples, 0.05%; +0.01%)</title><rect x="54.4" y="469" width="0.6" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="57.39" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="257.5" y="293" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="260.45" y="303.5" ></text>
</g>
<g >
<title>operator delete (29 samples, 0.06%; -0.03%)</title><rect x="644.9" y="485" width="0.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="647.90" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (226 samples, 0.48%; +0.00%)</title><rect x="1111.9" y="405" width="5.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1114.86" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (5,255 samples, 11.13%; -0.03%)</title><rect x="284.7" y="405" width="131.3" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="287.70" y="415.5" >seastar::future&lt;..</text>
</g>
<g >
<title>operator delete (24 samples, 0.05%; -0.01%)</title><rect x="688.1" y="485" width="0.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="691.10" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (31 samples, 0.07%; 0.00%)</title><rect x="861.0" y="421" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.01" y="431.5" ></text>
</g>
<g >
<title>operator delete (24 samples, 0.05%; +0.00%)</title><rect x="659.5" y="469" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="662.53" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (7 samples, 0.01%; +0.00%)</title><rect x="561.4" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="564.39" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (23 samples, 0.05%; 0.00%)</title><rect x="1140.2" y="325" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.16" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (49 samples, 0.10%; +0.00%)</title><rect x="558.1" y="277" width="1.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="561.07" y="287.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (6 samples, 0.01%; 0.00%)</title><rect x="1139.4" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.41" y="255.5" ></text>
</g>
<g >
<title>__tls_init (9 samples, 0.02%; +0.00%)</title><rect x="519.1" y="293" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="522.10" y="303.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (12 samples, 0.03%; +0.01%)</title><rect x="819.2" y="277" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="822.20" y="287.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (16 samples, 0.03%; +0.01%)</title><rect x="475.2" y="181" width="0.4" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="478.19" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (8 samples, 0.02%; +0.01%)</title><rect x="930.6" y="405" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="933.62" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (7 samples, 0.01%; -0.01%)</title><rect x="262.6" y="341" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="265.63" y="351.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (6,842 samples, 14.49%; -0.01%)</title><rect x="112.4" y="373" width="171.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="115.38" y="383.5" >seastar::repeat&lt;mergin..</text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (91 samples, 0.19%; -0.01%)</title><rect x="434.8" y="261" width="2.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="437.79" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (9 samples, 0.02%; +0.01%)</title><rect x="538.7" y="277" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="541.70" y="287.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (6 samples, 0.01%; +0.00%)</title><rect x="659.2" y="453" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="662.23" y="463.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (42 samples, 0.09%; 0.00%)</title><rect x="819.8" y="309" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="822.82" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.01%)</title><rect x="1031.1" y="213" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1034.13" y="223.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (30 samples, 0.06%; -0.00%)</title><rect x="1139.3" y="309" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1142.31" y="319.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (11 samples, 0.02%; -0.02%)</title><rect x="644.3" y="437" width="0.2" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="647.25" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (24 samples, 0.05%; +0.01%)</title><rect x="647.6" y="485" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="650.60" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (46 samples, 0.10%; -0.03%)</title><rect x="892.6" y="277" width="1.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="895.56" y="287.5" ></text>
</g>
<g >
<title>operator new (48 samples, 0.10%; 0.00%)</title><rect x="774.0" y="277" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="776.95" y="287.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (5 samples, 0.01%; +0.00%)</title><rect x="788.8" y="133" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="791.80" y="143.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (52 samples, 0.11%; -0.00%)</title><rect x="655.4" y="469" width="1.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="658.43" y="479.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; -0.00%)</title><rect x="152.3" y="181" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="155.35" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (8 samples, 0.02%; +0.01%)</title><rect x="1117.3" y="341" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1120.31" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (9 samples, 0.02%; -0.01%)</title><rect x="1102.8" y="357" width="0.3" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="1105.84" y="367.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, auth::permissions_cache::get (5 samples, 0.01%; +0.01%)</title><rect x="797.0" y="261" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="800.02" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (5 samples, 0.01%; -0.03%)</title><rect x="1141.7" y="501" width="0.1" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="1144.71" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (16 samples, 0.03%; 0.00%)</title><rect x="1140.3" y="245" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.33" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (29 samples, 0.06%; 0.00%)</title><rect x="675.8" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.77" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (145 samples, 0.31%; +0.00%)</title><rect x="634.7" y="453" width="3.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="637.71" y="463.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (19 samples, 0.04%; +0.01%)</title><rect x="553.4" y="293" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="556.37" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (13 samples, 0.03%; +0.01%)</title><rect x="438.7" y="261" width="0.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="441.74" y="271.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (690 samples, 1.46%; +0.03%)</title><rect x="545.1" y="357" width="17.2" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="548.10" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (43 samples, 0.09%; +0.03%)</title><rect x="196.5" y="117" width="1.0" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="199.46" y="127.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (5 samples, 0.01%; +0.00%)</title><rect x="143.0" y="261" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="146.05" y="271.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (17 samples, 0.04%; +0.04%)</title><rect x="1085.3" y="261" width="0.4" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="1088.27" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="387.0" y="181" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="389.98" y="191.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (256 samples, 0.54%; +0.01%)</title><rect x="201.1" y="165" width="6.4" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="204.14" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (26 samples, 0.06%; +0.00%)</title><rect x="1136.1" y="421" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1139.06" y="431.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (16 samples, 0.03%; 0.00%)</title><rect x="1140.3" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.33" y="287.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (168 samples, 0.36%; -0.00%)</title><rect x="496.3" y="229" width="4.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="499.26" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (35 samples, 0.07%; +0.01%)</title><rect x="898.9" y="309" width="0.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="901.91" y="319.5" ></text>
</g>
<g >
<title>database::has_keyspace (174 samples, 0.37%; -0.00%)</title><rect x="833.3" y="421" width="4.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="836.34" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (9 samples, 0.02%; -0.02%)</title><rect x="313.1" y="165" width="0.2" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="316.12" y="175.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (26 samples, 0.06%; 0.00%)</title><rect x="675.8" y="341" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.77" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (8 samples, 0.02%; -0.00%)</title><rect x="1174.0" y="389" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1177.03" y="399.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (8 samples, 0.02%; +0.01%)</title><rect x="1047.4" y="277" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1050.40" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (13 samples, 0.03%; +0.00%)</title><rect x="606.8" y="389" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="609.76" y="399.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (6 samples, 0.01%; +0.00%)</title><rect x="362.4" y="197" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="365.38" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="894.3" y="309" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="897.26" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (18 samples, 0.04%; +0.01%)</title><rect x="1097.8" y="341" width="0.5" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1100.82" y="351.5" ></text>
</g>
<g >
<title>operator delete (12 samples, 0.03%; -0.01%)</title><rect x="627.8" y="485" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="630.76" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (5 samples, 0.01%; -0.11%)</title><rect x="897.3" y="357" width="0.2" height="15.0" fill="rgb(68,68,255)" rx="2" ry="2" />
<text  x="900.33" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (67 samples, 0.14%; -0.00%)</title><rect x="41.5" y="469" width="1.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="44.52" y="479.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (5 samples, 0.01%; 0.00%)</title><rect x="24.0" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.97" y="479.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (996 samples, 2.11%; -0.01%)</title><rect x="452.8" y="325" width="24.9" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="455.79" y="335.5" >d..</text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (28 samples, 0.06%; +0.00%)</title><rect x="1139.4" y="277" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1142.36" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (317 samples, 0.67%; -0.01%)</title><rect x="36.5" y="485" width="7.9" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="39.49" y="495.5" ></text>
</g>
<g >
<title>do_cql_test (290 samples, 0.61%; 0.00%)</title><rect x="16.6" y="549" width="7.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.62" y="559.5" ></text>
</g>
<g >
<title>reader_permit::consume (13 samples, 0.03%; -0.01%)</title><rect x="499.4" y="181" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="502.41" y="191.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (61 samples, 0.13%; +0.02%)</title><rect x="915.8" y="325" width="1.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="918.78" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (110 samples, 0.23%; +0.01%)</title><rect x="579.4" y="405" width="2.7" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="582.39" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (188 samples, 0.40%; +0.00%)</title><rect x="1168.6" y="469" width="4.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1171.58" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.01%)</title><rect x="1062.4" y="341" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1065.40" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (9 samples, 0.02%; -0.00%)</title><rect x="652.0" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="654.98" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (7 samples, 0.01%; 0.00%)</title><rect x="812.7" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="815.75" y="367.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (8 samples, 0.02%; -0.02%)</title><rect x="331.8" y="181" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="334.84" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="927.2" y="389" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="930.23" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (300 samples, 0.64%; 0.00%)</title><rect x="16.4" y="581" width="7.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.37" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (11 samples, 0.02%; +0.00%)</title><rect x="317.8" y="197" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="320.77" y="207.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (6 samples, 0.01%; 0.00%)</title><rect x="843.3" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="846.32" y="351.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (5,200 samples, 11.01%; +0.02%)</title><rect x="285.8" y="389" width="129.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="288.77" y="399.5" >query::consume_p..</text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (54 samples, 0.11%; +0.01%)</title><rect x="526.1" y="341" width="1.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="529.13" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (5 samples, 0.01%; -0.00%)</title><rect x="222.6" y="181" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="225.61" y="191.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;boost::intrusive::detail::null_disposer, boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (5 samples, 0.01%; +0.00%)</title><rect x="554.0" y="293" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="557.02" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (24 samples, 0.05%; +0.00%)</title><rect x="135.9" y="229" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="138.90" y="239.5" ></text>
</g>
<g >
<title>compound_type&lt; (76 samples, 0.16%; -0.01%)</title><rect x="922.2" y="357" width="1.9" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="925.15" y="367.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt; &gt; (5 samples, 0.01%; +0.01%)</title><rect x="804.3" y="325" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="807.35" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10 samples, 0.02%; -0.04%)</title><rect x="1015.0" y="197" width="0.2" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="1017.96" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (9 samples, 0.02%; +0.01%)</title><rect x="1123.4" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1126.41" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (5 samples, 0.01%; 0.00%)</title><rect x="21.0" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.97" y="271.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (5 samples, 0.01%; +0.00%)</title><rect x="242.9" y="229" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="245.91" y="239.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (75 samples, 0.16%; -0.01%)</title><rect x="376.9" y="149" width="1.9" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="379.88" y="159.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (6 samples, 0.01%; +0.01%)</title><rect x="687.3" y="453" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="690.27" y="463.5" ></text>
</g>
<g >
<title>operator new (47 samples, 0.10%; +0.00%)</title><rect x="848.8" y="357" width="1.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="851.84" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (10 samples, 0.02%; 0.00%)</title><rect x="1174.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1176.98" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (67 samples, 0.14%; +0.02%)</title><rect x="260.2" y="325" width="1.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="263.18" y="335.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (19 samples, 0.04%; 0.00%)</title><rect x="843.5" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="846.49" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (5 samples, 0.01%; -0.00%)</title><rect x="646.4" y="485" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="649.40" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; +0.01%)</title><rect x="924.1" y="357" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="927.05" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (17 samples, 0.04%; -0.00%)</title><rect x="835.3" y="373" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="838.34" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; 0.00%)</title><rect x="572.4" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="575.44" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (13 samples, 0.03%; -0.03%)</title><rect x="206.4" y="85" width="0.3" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="209.36" y="95.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (46,095 samples, 97.64%; 0.00%)</title><rect x="24.3" y="533" width="1152.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.32" y="543.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (5 samples, 0.01%; +0.01%)</title><rect x="248.0" y="213" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="250.95" y="223.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (5 samples, 0.01%; -0.01%)</title><rect x="512.6" y="341" width="0.1" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="515.60" y="351.5" ></text>
</g>
<g >
<title>sstring_hash::operator (19 samples, 0.04%; -0.00%)</title><rect x="823.5" y="309" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="826.54" y="319.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (5 samples, 0.01%; 0.00%)</title><rect x="327.6" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="330.64" y="175.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (78 samples, 0.17%; +0.01%)</title><rect x="817.5" y="309" width="2.0" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="820.55" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (17 samples, 0.04%; -0.01%)</title><rect x="866.7" y="453" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="869.66" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%; -0.01%)</title><rect x="505.7" y="325" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="508.73" y="335.5" ></text>
</g>
<g >
<title>seastar::gate::enter (7 samples, 0.01%; +0.01%)</title><rect x="1035.0" y="181" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="1037.98" y="191.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (5 samples, 0.01%; -0.00%)</title><rect x="122.6" y="293" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="125.60" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (5 samples, 0.01%; -0.00%)</title><rect x="901.5" y="373" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="904.46" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (24 samples, 0.05%; -0.00%)</title><rect x="1158.1" y="405" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1161.13" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (382 samples, 0.81%; +0.01%)</title><rect x="1021.2" y="213" width="9.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1024.16" y="223.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (16 samples, 0.03%; 0.00%)</title><rect x="529.4" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="532.43" y="415.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (699 samples, 1.48%; -0.02%)</title><rect x="175.2" y="117" width="17.5" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="178.19" y="127.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (513 samples, 1.09%; -0.03%)</title><rect x="127.3" y="277" width="12.8" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="130.30" y="287.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl_nrvo&lt;query::querier&lt; (6 samples, 0.01%; +0.00%)</title><rect x="677.0" y="485" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="680.02" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (55 samples, 0.12%; -0.00%)</title><rect x="490.3" y="261" width="1.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="493.28" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (85 samples, 0.18%; -0.01%)</title><rect x="154.7" y="197" width="2.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="157.70" y="207.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (9 samples, 0.02%; +0.00%)</title><rect x="897.5" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="900.46" y="367.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%; -0.00%)</title><rect x="507.8" y="277" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="510.81" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (119 samples, 0.25%; +0.01%)</title><rect x="934.2" y="405" width="3.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="937.22" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (7 samples, 0.01%; -0.00%)</title><rect x="1167.7" y="469" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1170.65" y="479.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (132 samples, 0.28%; +0.02%)</title><rect x="60.3" y="453" width="3.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="63.29" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (9 samples, 0.02%; +0.00%)</title><rect x="207.6" y="165" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="210.56" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (12 samples, 0.03%; -0.00%)</title><rect x="1063.3" y="341" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1066.27" y="351.5" ></text>
</g>
<g >
<title>query::querier&lt; (17,642 samples, 37.37%; -0.07%)</title><rect x="102.3" y="437" width="440.9" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="105.28" y="447.5" >query::querier&lt;</text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (80 samples, 0.17%; -0.03%)</title><rect x="718.3" y="309" width="2.0" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="721.31" y="319.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (6 samples, 0.01%; +0.00%)</title><rect x="948.9" y="389" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="951.87" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (24 samples, 0.05%; +0.00%)</title><rect x="600.3" y="421" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="603.26" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (9 samples, 0.02%; -0.01%)</title><rect x="275.8" y="293" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="278.80" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (7 samples, 0.01%; +0.00%)</title><rect x="1105.6" y="357" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1108.57" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; +0.01%)</title><rect x="295.9" y="229" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="298.95" y="239.5" ></text>
</g>
<g >
<title>sstring_hash::operator (16 samples, 0.03%; -0.01%)</title><rect x="844.2" y="357" width="0.4" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="847.22" y="367.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (5 samples, 0.01%; 0.00%)</title><rect x="711.7" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="714.69" y="463.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (164 samples, 0.35%; -0.00%)</title><rect x="442.3" y="293" width="4.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="445.27" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (86 samples, 0.18%; -0.02%)</title><rect x="808.7" y="325" width="2.1" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="811.70" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (15 samples, 0.03%; 0.00%)</title><rect x="255.9" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="258.90" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (23 samples, 0.05%; -0.01%)</title><rect x="43.3" y="469" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="46.29" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (37 samples, 0.08%; -0.01%)</title><rect x="643.9" y="453" width="0.9" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="646.85" y="463.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (5 samples, 0.01%; 0.00%)</title><rect x="215.1" y="149" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="218.09" y="159.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (6 samples, 0.01%; 0.00%)</title><rect x="19.2" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.22" y="367.5" ></text>
</g>
<g >
<title>operator delete (9 samples, 0.02%; -0.01%)</title><rect x="41.6" y="453" width="0.2" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="44.59" y="463.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (272 samples, 0.58%; -0.02%)</title><rect x="845.3" y="453" width="6.8" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="848.34" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (9 samples, 0.02%; -0.00%)</title><rect x="732.1" y="357" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="735.09" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (14 samples, 0.03%; +0.00%)</title><rect x="796.4" y="197" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="799.38" y="207.5" ></text>
</g>
<g >
<title>operator delete (19 samples, 0.04%; -0.04%)</title><rect x="408.8" y="261" width="0.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="411.82" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (31 samples, 0.07%; 0.00%)</title><rect x="646.5" y="485" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="649.53" y="495.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (12 samples, 0.03%; +0.01%)</title><rect x="1138.5" y="437" width="0.3" height="15.0" fill="rgb(255,191,191)" rx="2" ry="2" />
<text  x="1141.53" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (21 samples, 0.04%; +0.01%)</title><rect x="1107.4" y="389" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1110.42" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (6 samples, 0.01%; +0.01%)</title><rect x="712.1" y="453" width="0.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="715.07" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (22 samples, 0.05%; +0.01%)</title><rect x="325.9" y="181" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="328.89" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (16 samples, 0.03%; +0.03%)</title><rect x="1120.0" y="405" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1122.99" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (12 samples, 0.03%; 0.00%)</title><rect x="24.0" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.97" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (37 samples, 0.08%; +0.00%)</title><rect x="1057.6" y="293" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1060.63" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (11 samples, 0.02%; -0.01%)</title><rect x="568.7" y="341" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="571.67" y="351.5" ></text>
</g>
<g >
<title>operator delete (33 samples, 0.07%; -0.01%)</title><rect x="36.7" y="469" width="0.8" height="15.0" fill="rgb(191,191,255)" rx="2" ry="2" />
<text  x="39.69" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (11 samples, 0.02%; +0.01%)</title><rect x="701.1" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="704.07" y="495.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (23 samples, 0.05%; -0.00%)</title><rect x="795.0" y="101" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="797.98" y="111.5" ></text>
</g>
<g >
<title>operator delete (15 samples, 0.03%; -0.01%)</title><rect x="577.3" y="405" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="580.34" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (5 samples, 0.01%; +0.01%)</title><rect x="1027.7" y="133" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1030.68" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (17 samples, 0.04%; -0.00%)</title><rect x="446.4" y="277" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="449.37" y="287.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (9 samples, 0.02%; +0.01%)</title><rect x="809.2" y="309" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="812.20" y="319.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (7 samples, 0.01%; 0.00%)</title><rect x="835.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="838.59" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (105 samples, 0.22%; +0.00%)</title><rect x="231.9" y="213" width="2.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="234.91" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (7 samples, 0.01%; -0.01%)</title><rect x="832.0" y="437" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="835.04" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (13 samples, 0.03%; +0.02%)</title><rect x="981.9" y="341" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="984.94" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (6 samples, 0.01%; +0.01%)</title><rect x="207.2" y="133" width="0.2" height="15.0" fill="rgb(255,202,202)" rx="2" ry="2" />
<text  x="210.24" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (14 samples, 0.03%; +0.00%)</title><rect x="699.1" y="421" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="702.14" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (5 samples, 0.01%; -0.01%)</title><rect x="852.5" y="469" width="0.2" height="15.0" fill="rgb(202,202,255)" rx="2" ry="2" />
<text  x="855.54" y="479.5" ></text>
</g>
</g>
</svg>
