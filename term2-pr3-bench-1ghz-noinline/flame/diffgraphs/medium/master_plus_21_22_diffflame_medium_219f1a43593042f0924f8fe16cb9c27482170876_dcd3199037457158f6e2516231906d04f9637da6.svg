<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (145 samples, 0.30%; +0.02%)</title><rect x="593.2" y="405" width="3.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="596.20" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (65 samples, 0.13%; -0.00%)</title><rect x="1157.3" y="421" width="1.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1160.34" y="431.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (75 samples, 0.16%; +0.01%)</title><rect x="1163.2" y="469" width="1.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1166.21" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (502 samples, 1.04%; +0.01%)</title><rect x="900.3" y="357" width="12.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="903.26" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (9 samples, 0.02%; +0.00%)</title><rect x="705.3" y="485" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="708.35" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (8 samples, 0.02%; +0.01%)</title><rect x="722.8" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="725.81" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (49 samples, 0.10%; -0.02%)</title><rect x="796.2" y="261" width="1.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="799.21" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (16 samples, 0.03%; +0.01%)</title><rect x="761.5" y="405" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="764.47" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (10 samples, 0.02%; -0.01%)</title><rect x="134.6" y="245" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="137.55" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (13 samples, 0.03%; +0.02%)</title><rect x="79.8" y="453" width="0.3" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="82.77" y="463.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (192 samples, 0.40%; -0.01%)</title><rect x="734.9" y="405" width="4.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="737.90" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (30 samples, 0.06%; +0.01%)</title><rect x="836.4" y="357" width="0.7" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="839.41" y="367.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (11 samples, 0.02%; 0.00%)</title><rect x="205.5" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="208.48" y="127.5" ></text>
</g>
<g >
<title>query::querier_base::close (75 samples, 0.16%; +0.15%)</title><rect x="61.0" y="453" width="1.9" height="15.0" fill="rgb(255,0,0)" rx="2" ry="2" />
<text  x="64.03" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (9 samples, 0.02%; +0.01%)</title><rect x="1040.2" y="197" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1043.25" y="207.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (201 samples, 0.42%; 0.00%)</title><rect x="14.9" y="437" width="4.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.92" y="447.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (7 samples, 0.01%; +0.00%)</title><rect x="364.3" y="197" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="367.33" y="207.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (32 samples, 0.07%; -0.00%)</title><rect x="853.8" y="421" width="0.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="856.78" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (31 samples, 0.06%; +0.01%)</title><rect x="811.4" y="133" width="0.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="814.40" y="143.5" ></text>
</g>
<g >
<title>compound_type&lt; (7 samples, 0.01%; 0.00%)</title><rect x="919.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="922.15" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (42 samples, 0.09%; +0.01%)</title><rect x="618.1" y="437" width="1.0" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="621.10" y="447.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (31 samples, 0.06%; +0.00%)</title><rect x="733.8" y="405" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="736.78" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (9 samples, 0.02%; +0.00%)</title><rect x="242.2" y="229" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="245.20" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (68 samples, 0.14%; +0.01%)</title><rect x="825.1" y="293" width="1.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="828.13" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (7 samples, 0.01%; +0.00%)</title><rect x="1168.4" y="453" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1171.42" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%; +0.00%)</title><rect x="852.0" y="357" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="855.01" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (9 samples, 0.02%; +0.01%)</title><rect x="1105.1" y="341" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1108.13" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (6 samples, 0.01%; -0.01%)</title><rect x="128.2" y="261" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="131.24" y="271.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (7 samples, 0.01%; 0.00%)</title><rect x="880.6" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.57" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (35 samples, 0.07%; 0.00%)</title><rect x="1025.6" y="213" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1028.57" y="223.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (21 samples, 0.04%; -0.01%)</title><rect x="463.8" y="277" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="466.78" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (143 samples, 0.30%; +0.01%)</title><rect x="407.4" y="261" width="3.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="410.39" y="271.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (37 samples, 0.08%; -0.01%)</title><rect x="1129.5" y="389" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1132.50" y="399.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (6 samples, 0.01%; -0.00%)</title><rect x="943.6" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="946.61" y="415.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (5,481 samples, 11.36%; -0.05%)</title><rect x="731.6" y="453" width="134.1" height="15.0" fill="rgb(134,134,255)" rx="2" ry="2" />
<text  x="734.65" y="463.5" >single_node_cql_..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (5 samples, 0.01%; +0.00%)</title><rect x="147.4" y="245" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="150.42" y="255.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (437 samples, 0.91%; 0.00%)</title><rect x="708.5" y="485" width="10.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.48" y="495.5" ></text>
</g>
<g >
<title>operator new (30 samples, 0.06%; +0.00%)</title><rect x="509.2" y="197" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="512.23" y="207.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (10 samples, 0.02%; +0.01%)</title><rect x="310.2" y="165" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="313.21" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (35 samples, 0.07%; +0.02%)</title><rect x="543.1" y="421" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="546.09" y="431.5" ></text>
</g>
<g >
<title>compound_type&lt; (57 samples, 0.12%; +0.02%)</title><rect x="546.2" y="357" width="1.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="549.15" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (30 samples, 0.06%; +0.01%)</title><rect x="31.6" y="485" width="0.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="34.63" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (213 samples, 0.44%; -0.03%)</title><rect x="204.3" y="133" width="5.2" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="207.30" y="143.5" ></text>
</g>
<g >
<title>schema::column_at (57 samples, 0.12%; -0.02%)</title><rect x="200.6" y="117" width="1.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="203.56" y="127.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (7 samples, 0.01%; 0.00%)</title><rect x="330.6" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="333.59" y="191.5" ></text>
</g>
<g >
<title>operator new (64 samples, 0.13%; +0.01%)</title><rect x="765.3" y="405" width="1.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="768.34" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (7 samples, 0.01%; +0.00%)</title><rect x="661.2" y="453" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="664.19" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (127 samples, 0.26%; -0.01%)</title><rect x="36.3" y="453" width="3.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="39.32" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; +0.00%)</title><rect x="940.0" y="405" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="943.04" y="415.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (32 samples, 0.07%; -0.00%)</title><rect x="215.0" y="149" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="218.04" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (21 samples, 0.04%; 0.00%)</title><rect x="880.5" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.49" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (10 samples, 0.02%; +0.00%)</title><rect x="880.1" y="501" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="883.15" y="511.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (10 samples, 0.02%; +0.00%)</title><rect x="280.0" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="283.00" y="367.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (6 samples, 0.01%; +0.00%)</title><rect x="824.6" y="277" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="827.57" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,305 samples, 4.78%; -0.00%)</title><rect x="162.1" y="213" width="56.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="165.10" y="223.5" >logal..</text>
</g>
<g >
<title>cql3::query_options::get_value_at (66 samples, 0.14%; +0.05%)</title><rect x="902.7" y="309" width="1.6" height="15.0" fill="rgb(255,137,137)" rx="2" ry="2" />
<text  x="905.73" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (13 samples, 0.03%; -0.02%)</title><rect x="560.6" y="325" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="563.61" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (7 samples, 0.01%; -0.00%)</title><rect x="1042.7" y="229" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1045.67" y="239.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (13 samples, 0.03%; -0.01%)</title><rect x="715.2" y="421" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="718.16" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (8 samples, 0.02%; -0.01%)</title><rect x="984.2" y="357" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="987.25" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (26 samples, 0.05%; +0.00%)</title><rect x="881.3" y="405" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="884.32" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (212 samples, 0.44%; +0.01%)</title><rect x="1065.8" y="325" width="5.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1068.77" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (10 samples, 0.02%; +0.00%)</title><rect x="493.6" y="309" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="496.58" y="319.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (21 samples, 0.04%; +0.00%)</title><rect x="936.9" y="325" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="939.86" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.01%)</title><rect x="45.0" y="469" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="48.03" y="479.5" ></text>
</g>
<g >
<title>query::querier_base::close (1,329 samples, 2.76%; +0.01%)</title><rect x="555.4" y="437" width="32.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="558.35" y="447.5" >qu..</text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (144 samples, 0.30%; +0.01%)</title><rect x="448.3" y="277" width="3.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="451.32" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (28 samples, 0.06%; -0.00%)</title><rect x="791.7" y="277" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="794.66" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (43 samples, 0.09%; +0.02%)</title><rect x="75.0" y="373" width="1.1" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="78.00" y="383.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (20 samples, 0.04%; -0.01%)</title><rect x="817.7" y="101" width="0.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="820.74" y="111.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (19 samples, 0.04%; -0.06%)</title><rect x="139.7" y="277" width="0.5" height="15.0" fill="rgb(128,128,255)" rx="2" ry="2" />
<text  x="142.71" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (10 samples, 0.02%; 0.00%)</title><rect x="541.5" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="544.50" y="399.5" ></text>
</g>
<g >
<title>operator new (39 samples, 0.08%; 0.00%)</title><rect x="98.3" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="101.27" y="399.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (42 samples, 0.09%; 0.00%)</title><rect x="686.2" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.24" y="479.5" ></text>
</g>
<g >
<title>sstring_hash::operator (50 samples, 0.10%; 0.00%)</title><rect x="1069.6" y="293" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1072.56" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (50 samples, 0.10%; +0.00%)</title><rect x="663.1" y="453" width="1.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="666.14" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (18 samples, 0.04%; -0.02%)</title><rect x="595.7" y="389" width="0.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="598.72" y="399.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (5 samples, 0.01%; 0.00%)</title><rect x="226.1" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="229.15" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (39 samples, 0.08%; -0.01%)</title><rect x="131.2" y="245" width="1.0" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="134.22" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (48 samples, 0.10%; +0.00%)</title><rect x="859.1" y="405" width="1.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="862.11" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (5 samples, 0.01%; 0.00%)</title><rect x="42.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.64" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (24,060 samples, 49.88%; -0.02%)</title><rect x="48.2" y="501" width="588.7" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="51.24" y="511.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (121 samples, 0.25%; -0.00%)</title><rect x="831.5" y="341" width="2.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="834.49" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (5 samples, 0.01%; +0.01%)</title><rect x="1066.3" y="309" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1069.28" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (14 samples, 0.03%; +0.01%)</title><rect x="707.0" y="469" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="709.99" y="479.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (11 samples, 0.02%; -0.01%)</title><rect x="601.8" y="389" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="604.81" y="399.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (40 samples, 0.08%; -0.01%)</title><rect x="1037.4" y="149" width="1.0" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1040.39" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (183 samples, 0.38%; +0.01%)</title><rect x="1169.2" y="469" width="4.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1172.18" y="479.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (7 samples, 0.01%; -0.00%)</title><rect x="703.9" y="437" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="706.85" y="447.5" ></text>
</g>
<g >
<title>operator delete (40 samples, 0.08%; -0.01%)</title><rect x="821.1" y="245" width="1.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="824.14" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (13 samples, 0.03%; -0.02%)</title><rect x="1170.6" y="453" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1173.62" y="463.5" ></text>
</g>
<g >
<title>operator new (53 samples, 0.11%; +0.00%)</title><rect x="1126.8" y="405" width="1.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1129.83" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (12 samples, 0.02%; 0.00%)</title><rect x="695.7" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.73" y="511.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (8 samples, 0.02%; +0.01%)</title><rect x="911.1" y="309" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="914.07" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (37 samples, 0.08%; +0.04%)</title><rect x="611.1" y="437" width="0.9" height="15.0" fill="rgb(255,148,148)" rx="2" ry="2" />
<text  x="614.13" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (12 samples, 0.02%; -0.02%)</title><rect x="586.2" y="389" width="0.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="589.18" y="399.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (158 samples, 0.33%; +0.02%)</title><rect x="345.3" y="165" width="3.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="348.34" y="175.5" ></text>
</g>
<g >
<title>operator delete (20 samples, 0.04%; -0.04%)</title><rect x="580.3" y="357" width="0.5" height="15.0" fill="rgb(148,148,255)" rx="2" ry="2" />
<text  x="583.28" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (210 samples, 0.44%; +0.00%)</title><rect x="591.6" y="421" width="5.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="594.63" y="431.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (75 samples, 0.16%; +0.01%)</title><rect x="875.2" y="469" width="1.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="878.21" y="479.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (13 samples, 0.03%; +0.01%)</title><rect x="238.2" y="213" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="241.23" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; 0.00%)</title><rect x="518.5" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="521.48" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (12 samples, 0.02%; +0.00%)</title><rect x="613.4" y="437" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="616.43" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (6 samples, 0.01%; -0.00%)</title><rect x="855.3" y="389" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="858.32" y="399.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.04%; +0.01%)</title><rect x="493.8" y="309" width="0.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="496.82" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="144.4" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="147.39" y="271.5" ></text>
</g>
<g >
<title>seastar::reactor::io_queue_submission_pollfn::poll (6 samples, 0.01%; -0.00%)</title><rect x="1175.9" y="501" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1178.91" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (6 samples, 0.01%; +0.00%)</title><rect x="705.9" y="453" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="708.91" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (32 samples, 0.07%; 0.00%)</title><rect x="510.0" y="197" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="512.99" y="207.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.01%; -0.01%)</title><rect x="484.2" y="181" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="487.18" y="191.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (213 samples, 0.44%; +0.04%)</title><rect x="1034.4" y="181" width="5.2" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1037.38" y="191.5" ></text>
</g>
<g >
<title>seastar::app_template::run (47,214 samples, 97.89%; 0.00%)</title><rect x="22.1" y="597" width="1155.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.09" y="607.5" >seastar::app_template::run</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (73 samples, 0.15%; +0.02%)</title><rect x="905.3" y="293" width="1.8" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="908.28" y="303.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (24 samples, 0.05%; -0.01%)</title><rect x="706.4" y="469" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="709.40" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (27 samples, 0.06%; +0.02%)</title><rect x="1069.8" y="261" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1072.80" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (5 samples, 0.01%; +0.01%)</title><rect x="1007.1" y="293" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1010.05" y="303.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (37 samples, 0.08%; +0.04%)</title><rect x="511.8" y="213" width="0.9" height="15.0" fill="rgb(255,151,151)" rx="2" ry="2" />
<text  x="514.83" y="223.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (5,758 samples, 11.94%; +0.03%)</title><rect x="966.8" y="389" width="140.9" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="969.81" y="399.5" >service::storage_..</text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (11 samples, 0.02%; 0.00%)</title><rect x="880.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.57" y="351.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (17 samples, 0.04%; +0.00%)</title><rect x="311.0" y="165" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="313.99" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (13 samples, 0.03%; +0.01%)</title><rect x="873.0" y="469" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="876.01" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (22 samples, 0.05%; +0.01%)</title><rect x="588.2" y="421" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="591.21" y="431.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (5 samples, 0.01%; 0.00%)</title><rect x="607.8" y="421" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="610.80" y="431.5" ></text>
</g>
<g >
<title>__tls_init (17 samples, 0.04%; +0.00%)</title><rect x="490.4" y="293" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="493.37" y="303.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (6 samples, 0.01%; -0.00%)</title><rect x="188.6" y="69" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="191.60" y="79.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (6 samples, 0.01%; +0.01%)</title><rect x="877.9" y="485" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="880.92" y="495.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (28 samples, 0.06%; -0.04%)</title><rect x="38.7" y="405" width="0.7" height="15.0" fill="rgb(151,151,255)" rx="2" ry="2" />
<text  x="41.72" y="415.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (55 samples, 0.11%; +0.01%)</title><rect x="10.4" y="581" width="1.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="13.37" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.06%; -0.01%)</title><rect x="520.7" y="261" width="0.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="523.71" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (16 samples, 0.03%; +0.00%)</title><rect x="1139.4" y="261" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1142.43" y="271.5" ></text>
</g>
<g >
<title>__tls_init (7 samples, 0.01%; +0.00%)</title><rect x="500.0" y="261" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="503.01" y="271.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (22 samples, 0.05%; 0.00%)</title><rect x="784.8" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="787.78" y="367.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (5 samples, 0.01%; 0.00%)</title><rect x="881.7" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.74" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (5 samples, 0.01%; +0.01%)</title><rect x="659.8" y="405" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="662.77" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (6 samples, 0.01%; +0.01%)</title><rect x="710.9" y="453" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="713.88" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (7 samples, 0.01%; 0.00%)</title><rect x="227.3" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="230.35" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (7 samples, 0.01%; -0.01%)</title><rect x="330.3" y="165" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="333.27" y="175.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (340 samples, 0.70%; -0.01%)</title><rect x="477.9" y="245" width="8.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="480.87" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (7 samples, 0.01%; -0.01%)</title><rect x="839.9" y="325" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="842.90" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (22 samples, 0.05%; +0.01%)</title><rect x="712.1" y="437" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="715.10" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (9 samples, 0.02%; +0.01%)</title><rect x="452.5" y="277" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="455.52" y="287.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (74 samples, 0.15%; +0.00%)</title><rect x="674.8" y="485" width="1.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="677.84" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (7 samples, 0.01%; +0.01%)</title><rect x="583.8" y="357" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="586.78" y="367.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (53 samples, 0.11%; +0.00%)</title><rect x="842.0" y="309" width="1.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="845.01" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (17 samples, 0.04%; +0.00%)</title><rect x="137.0" y="229" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="139.97" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (7 samples, 0.01%; +0.01%)</title><rect x="797.8" y="293" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="800.78" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (6 samples, 0.01%; +0.00%)</title><rect x="1040.1" y="197" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1043.10" y="207.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (10 samples, 0.02%; +0.00%)</title><rect x="311.6" y="165" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="314.58" y="175.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (12 samples, 0.02%; -0.03%)</title><rect x="332.0" y="181" width="0.3" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="335.03" y="191.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (8 samples, 0.02%; +0.01%)</title><rect x="845.4" y="277" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="848.36" y="287.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (26 samples, 0.05%; -0.01%)</title><rect x="609.1" y="405" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="612.08" y="415.5" ></text>
</g>
<g >
<title>operator new (76 samples, 0.16%; +0.00%)</title><rect x="978.3" y="357" width="1.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="981.25" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6 samples, 0.01%; +0.01%)</title><rect x="1063.5" y="325" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1066.54" y="335.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (11 samples, 0.02%; 0.00%)</title><rect x="1138.3" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.33" y="239.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (21 samples, 0.04%; +0.00%)</title><rect x="527.0" y="325" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="529.97" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (57 samples, 0.12%; +0.04%)</title><rect x="868.8" y="341" width="1.4" height="15.0" fill="rgb(255,151,151)" rx="2" ry="2" />
<text  x="871.82" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1,273 samples, 2.64%; -0.02%)</title><rect x="556.0" y="405" width="31.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="558.99" y="415.5" >fl..</text>
</g>
<g >
<title>operator new (70 samples, 0.15%; 0.00%)</title><rect x="550.1" y="341" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="553.09" y="351.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (4,712 samples, 9.77%; +0.02%)</title><rect x="424.8" y="389" width="115.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="427.78" y="399.5" >std::function&lt;..</text>
</g>
<g >
<title>query::partition_slice::~partition_slice (17 samples, 0.04%; 0.00%)</title><rect x="1130.4" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.40" y="399.5" ></text>
</g>
<g >
<title>__tls_init (11 samples, 0.02%; 0.00%)</title><rect x="500.9" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="503.94" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (20 samples, 0.04%; -0.02%)</title><rect x="264.2" y="325" width="0.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="267.17" y="335.5" ></text>
</g>
<g >
<title>table::estimate_read_memory_cost (10 samples, 0.02%; +0.01%)</title><rect x="1049.6" y="261" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1052.64" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (26 samples, 0.05%; +0.01%)</title><rect x="776.4" y="405" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="779.44" y="415.5" ></text>
</g>
<g >
<title>local_schema_registry (23 samples, 0.05%; +0.03%)</title><rect x="977.7" y="357" width="0.6" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="980.69" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (365 samples, 0.76%; +0.04%)</title><rect x="1073.6" y="341" width="8.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="1076.60" y="351.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (21 samples, 0.04%; 0.00%)</title><rect x="880.5" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.49" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%; -0.01%)</title><rect x="1038.7" y="117" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1041.73" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (14 samples, 0.03%; +0.00%)</title><rect x="524.6" y="325" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="527.65" y="335.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (7 samples, 0.01%; +0.00%)</title><rect x="812.2" y="133" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="815.19" y="143.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (30 samples, 0.06%; 0.00%)</title><rect x="694.9" y="469" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.92" y="479.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (134 samples, 0.28%; +0.08%)</title><rect x="178.0" y="101" width="3.3" height="15.0" fill="rgb(255,102,102)" rx="2" ry="2" />
<text  x="181.00" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (7 samples, 0.01%; +0.01%)</title><rect x="272.6" y="293" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="275.63" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (50 samples, 0.10%; -0.01%)</title><rect x="938.7" y="389" width="1.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="941.72" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (54 samples, 0.11%; +0.01%)</title><rect x="216.5" y="181" width="1.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="219.51" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (9 samples, 0.02%; +0.01%)</title><rect x="679.9" y="469" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="682.88" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (43 samples, 0.09%; -0.01%)</title><rect x="733.6" y="421" width="1.0" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="736.58" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (94 samples, 0.19%; -0.04%)</title><rect x="1171.2" y="437" width="2.3" height="15.0" fill="rgb(151,151,255)" rx="2" ry="2" />
<text  x="1174.19" y="447.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (196 samples, 0.41%; +0.00%)</title><rect x="904.3" y="309" width="4.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="907.35" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (19 samples, 0.04%; -0.01%)</title><rect x="585.2" y="373" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="588.22" y="383.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (375 samples, 0.78%; -0.04%)</title><rect x="527.6" y="325" width="9.1" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="530.56" y="335.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (15 samples, 0.03%; -0.01%)</title><rect x="227.2" y="229" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="230.15" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (17 samples, 0.04%; 0.00%)</title><rect x="836.7" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="839.72" y="351.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1,217 samples, 2.52%; -0.02%)</title><rect x="1020.3" y="277" width="29.8" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1023.31" y="287.5" >se..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.01%)</title><rect x="414.8" y="245" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="417.85" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::future (7 samples, 0.01%; +0.00%)</title><rect x="764.7" y="357" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="767.65" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (6 samples, 0.01%; +0.01%)</title><rect x="660.0" y="437" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="662.99" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (15 samples, 0.03%; +0.01%)</title><rect x="700.6" y="453" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="703.58" y="463.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (91 samples, 0.19%; +0.00%)</title><rect x="1113.9" y="389" width="2.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1116.94" y="399.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (11 samples, 0.02%; -0.01%)</title><rect x="565.0" y="293" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="568.01" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (10 samples, 0.02%; +0.00%)</title><rect x="923.7" y="325" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="926.72" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (7 samples, 0.01%; 0.00%)</title><rect x="1173.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1176.31" y="431.5" ></text>
</g>
<g >
<title>memtable::apply (30 samples, 0.06%; 0.00%)</title><rect x="1138.3" y="261" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.33" y="271.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (22 samples, 0.05%; +0.03%)</title><rect x="1174.0" y="501" width="0.5" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="1176.98" y="511.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (78 samples, 0.16%; +0.01%)</title><rect x="774.1" y="341" width="1.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="777.12" y="351.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (48 samples, 0.10%; +0.00%)</title><rect x="74.9" y="389" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="77.88" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (56 samples, 0.12%; -0.01%)</title><rect x="769.0" y="357" width="1.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="772.03" y="367.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (12 samples, 0.02%; -0.01%)</title><rect x="926.8" y="357" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="929.78" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (5 samples, 0.01%; -0.00%)</title><rect x="412.6" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="415.60" y="287.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (66 samples, 0.14%; -0.01%)</title><rect x="546.1" y="373" width="1.6" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="549.13" y="383.5" ></text>
</g>
<g >
<title>database::find_column_family (40 samples, 0.08%; -0.01%)</title><rect x="1025.4" y="245" width="1.0" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1028.45" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; +0.01%)</title><rect x="409.6" y="229" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="412.56" y="239.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (12 samples, 0.02%; +0.01%)</title><rect x="640.3" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="643.29" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (7 samples, 0.01%; -0.01%)</title><rect x="661.4" y="469" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="664.38" y="479.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (520 samples, 1.08%; +0.01%)</title><rect x="30.2" y="501" width="12.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="33.16" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (7 samples, 0.01%; +0.01%)</title><rect x="596.0" y="373" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="598.99" y="383.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (72 samples, 0.15%; +0.04%)</title><rect x="300.4" y="213" width="1.8" height="15.0" fill="rgb(255,148,148)" rx="2" ry="2" />
<text  x="303.40" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (30 samples, 0.06%; +0.01%)</title><rect x="693.8" y="485" width="0.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="696.75" y="495.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (13 samples, 0.03%; +0.02%)</title><rect x="736.3" y="293" width="0.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="739.32" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (18 samples, 0.04%; +0.01%)</title><rect x="452.0" y="277" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="455.04" y="287.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (119 samples, 0.25%; -0.00%)</title><rect x="867.6" y="405" width="2.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="870.57" y="415.5" ></text>
</g>
<g >
<title>operator delete (79 samples, 0.16%; -0.08%)</title><rect x="407.9" y="245" width="1.9" height="15.0" fill="rgb(96,96,255)" rx="2" ry="2" />
<text  x="410.88" y="255.5" ></text>
</g>
<g >
<title>auth::operator== (16 samples, 0.03%; -0.02%)</title><rect x="810.9" y="149" width="0.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="813.91" y="159.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (5,660 samples, 11.73%; +0.02%)</title><rect x="118.8" y="325" width="138.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="121.77" y="335.5" >mutation_reader_m..</text>
</g>
<g >
<title>reader_permit::impl::signal (34 samples, 0.07%; +0.01%)</title><rect x="564.0" y="293" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="567.04" y="303.5" ></text>
</g>
<g >
<title>posix_memalign (86 samples, 0.18%; 0.00%)</title><rect x="197.2" y="85" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="200.18" y="95.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (9 samples, 0.02%; +0.01%)</title><rect x="836.1" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="839.11" y="367.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (680 samples, 1.41%; -0.02%)</title><rect x="899.5" y="373" width="16.6" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="902.50" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (9 samples, 0.02%; +0.00%)</title><rect x="257.0" y="309" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="260.02" y="319.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (112 samples, 0.23%; +0.00%)</title><rect x="756.7" y="309" width="2.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="759.75" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (10 samples, 0.02%; +0.02%)</title><rect x="953.1" y="389" width="0.2" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="956.08" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (42 samples, 0.09%; -0.01%)</title><rect x="784.3" y="373" width="1.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="787.30" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (15 samples, 0.03%; +0.01%)</title><rect x="217.5" y="149" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="220.46" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.02%; -0.00%)</title><rect x="662.7" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="665.73" y="447.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (103 samples, 0.21%; +0.01%)</title><rect x="300.1" y="229" width="2.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="303.06" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (35 samples, 0.07%; +0.02%)</title><rect x="721.3" y="501" width="0.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="724.27" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (23 samples, 0.05%; -0.02%)</title><rect x="920.0" y="357" width="0.6" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="923.03" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (10,256 samples, 21.26%; -0.01%)</title><rect x="887.1" y="453" width="250.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="890.07" y="463.5" >seastar::noncopyable_function&lt;sea..</text>
</g>
<g >
<title>operator delete (68 samples, 0.14%; -0.01%)</title><rect x="566.8" y="293" width="1.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="569.78" y="303.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (7 samples, 0.01%; +0.01%)</title><rect x="1157.6" y="405" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1160.58" y="415.5" ></text>
</g>
<g >
<title>operator new (31 samples, 0.06%; -0.00%)</title><rect x="289.0" y="293" width="0.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="292.02" y="303.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (194 samples, 0.40%; +0.02%)</title><rect x="1126.5" y="421" width="4.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1129.49" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (71 samples, 0.15%; +0.00%)</title><rect x="873.4" y="469" width="1.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="876.40" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (40 samples, 0.08%; -0.00%)</title><rect x="781.6" y="341" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="784.60" y="351.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (434 samples, 0.90%; -0.01%)</title><rect x="854.9" y="437" width="10.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="857.88" y="447.5" ></text>
</g>
<g >
<title>operator delete (21 samples, 0.04%; +0.02%)</title><rect x="647.3" y="485" width="0.6" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="650.34" y="495.5" ></text>
</g>
<g >
<title>seastar::preempt_io_context::reset_preemption_monitor (5 samples, 0.01%; -0.00%)</title><rect x="1142.0" y="501" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1145.02" y="511.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (185 samples, 0.38%; -0.00%)</title><rect x="735.1" y="389" width="4.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="738.07" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (9 samples, 0.02%; -0.02%)</title><rect x="1106.0" y="357" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1108.96" y="367.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (15 samples, 0.03%; +0.02%)</title><rect x="773.0" y="293" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="775.97" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (86 samples, 0.18%; -0.02%)</title><rect x="868.4" y="373" width="2.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="871.38" y="383.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (9 samples, 0.02%; 0.00%)</title><rect x="21.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.11" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.02%)</title><rect x="161.7" y="213" width="0.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="164.66" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (9 samples, 0.02%; +0.01%)</title><rect x="846.5" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="849.51" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (10 samples, 0.02%; +0.01%)</title><rect x="115.5" y="357" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="118.54" y="367.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (7 samples, 0.01%; -0.02%)</title><rect x="354.0" y="165" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="357.00" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (22 samples, 0.05%; +0.00%)</title><rect x="713.9" y="421" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="716.86" y="431.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (20 samples, 0.04%; +0.02%)</title><rect x="552.3" y="389" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="555.27" y="399.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (11 samples, 0.02%; +0.01%)</title><rect x="1059.0" y="325" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1062.01" y="335.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (60 samples, 0.12%; -0.01%)</title><rect x="790.9" y="325" width="1.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="793.93" y="335.5" ></text>
</g>
<g >
<title>operator delete (24 samples, 0.05%; +0.01%)</title><rect x="679.3" y="469" width="0.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="682.27" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (88 samples, 0.18%; +0.01%)</title><rect x="863.0" y="389" width="2.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="866.05" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (11 samples, 0.02%; +0.00%)</title><rect x="1081.1" y="309" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1084.08" y="319.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (113 samples, 0.23%; -0.04%)</title><rect x="382.3" y="149" width="2.7" height="15.0" fill="rgb(151,151,255)" rx="2" ry="2" />
<text  x="385.29" y="159.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (57 samples, 0.12%; 0.00%)</title><rect x="124.3" y="293" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="127.28" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (6 samples, 0.01%; 0.00%)</title><rect x="648.0" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="650.98" y="495.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (991 samples, 2.05%; 0.00%)</title><rect x="462.1" y="325" width="24.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="465.11" y="335.5" >d..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (7 samples, 0.01%; +0.01%)</title><rect x="574.6" y="341" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="577.56" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (15 samples, 0.03%; -0.02%)</title><rect x="410.5" y="229" width="0.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="413.52" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (5 samples, 0.01%; +0.00%)</title><rect x="845.7" y="309" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="848.68" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (12 samples, 0.02%; -0.02%)</title><rect x="77.0" y="453" width="0.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="80.03" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (32 samples, 0.07%; +0.01%)</title><rect x="979.3" y="325" width="0.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="982.33" y="335.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (9 samples, 0.02%; -0.01%)</title><rect x="369.9" y="197" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="372.93" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (26 samples, 0.05%; 0.00%)</title><rect x="947.8" y="341" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="950.77" y="351.5" ></text>
</g>
<g >
<title>database::get_reader_concurrency_semaphore (8 samples, 0.02%; +0.00%)</title><rect x="1026.4" y="245" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1029.43" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (8 samples, 0.02%; -0.00%)</title><rect x="943.8" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="946.76" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (134 samples, 0.28%; +0.01%)</title><rect x="621.1" y="421" width="3.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="624.06" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; -0.00%)</title><rect x="70.2" y="389" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="73.16" y="399.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (5 samples, 0.01%; -0.00%)</title><rect x="864.6" y="325" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="867.57" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (926 samples, 1.92%; +0.02%)</title><rect x="917.3" y="405" width="22.7" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="920.34" y="415.5" >c..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (23 samples, 0.05%; -0.00%)</title><rect x="1056.1" y="213" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1059.10" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (21 samples, 0.04%; +0.01%)</title><rect x="534.7" y="245" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="537.68" y="255.5" ></text>
</g>
<g >
<title>schema::column_at (17 samples, 0.04%; -0.00%)</title><rect x="387.9" y="181" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="390.89" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (8 samples, 0.02%; -0.00%)</title><rect x="874.3" y="405" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="877.25" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (39 samples, 0.08%; -0.00%)</title><rect x="1138.2" y="437" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1141.23" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (35 samples, 0.07%; 0.00%)</title><rect x="694.9" y="501" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.88" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (20 samples, 0.04%; +0.00%)</title><rect x="655.2" y="389" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="658.19" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (6 samples, 0.01%; -0.01%)</title><rect x="585.8" y="373" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="588.76" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (98 samples, 0.20%; -0.01%)</title><rect x="37.0" y="437" width="2.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="40.03" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (15 samples, 0.03%; -0.01%)</title><rect x="802.3" y="229" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="805.25" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (8 samples, 0.02%; -0.00%)</title><rect x="140.2" y="277" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="143.18" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (6 samples, 0.01%; 0.00%)</title><rect x="423.9" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="426.90" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (7 samples, 0.01%; +0.00%)</title><rect x="453.6" y="309" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="456.65" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (22 samples, 0.05%; +0.01%)</title><rect x="988.8" y="325" width="0.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="991.82" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (7 samples, 0.01%; +0.01%)</title><rect x="259.2" y="309" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="262.18" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; +0.01%)</title><rect x="799.0" y="229" width="0.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="802.00" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (11 samples, 0.02%; +0.00%)</title><rect x="964.0" y="405" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="967.04" y="415.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (717 samples, 1.49%; +0.00%)</title><rect x="557.2" y="357" width="17.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="560.19" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (149 samples, 0.31%; -0.01%)</title><rect x="1053.0" y="261" width="3.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1056.04" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (12 samples, 0.02%; -0.01%)</title><rect x="692.6" y="453" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="695.65" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (47,211 samples, 97.88%; -0.00%)</title><rect x="22.1" y="533" width="1155.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="25.09" y="543.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (5 samples, 0.01%; +0.00%)</title><rect x="266.6" y="341" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="269.59" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (9 samples, 0.02%; +0.01%)</title><rect x="255.5" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="258.48" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (9 samples, 0.02%; +0.00%)</title><rect x="636.6" y="453" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="639.55" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (17 samples, 0.04%; +0.03%)</title><rect x="553.5" y="421" width="0.4" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="556.52" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.01%)</title><rect x="570.0" y="261" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="573.01" y="271.5" ></text>
</g>
<g >
<title>operator new (16 samples, 0.03%; -0.00%)</title><rect x="552.8" y="405" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="555.83" y="415.5" ></text>
</g>
<g >
<title>operator delete (34 samples, 0.07%; -0.01%)</title><rect x="664.6" y="485" width="0.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="667.59" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (147 samples, 0.30%; -0.00%)</title><rect x="989.4" y="325" width="3.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="992.36" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (6 samples, 0.01%; -0.01%)</title><rect x="223.5" y="181" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="226.51" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (33 samples, 0.07%; +0.01%)</title><rect x="578.7" y="357" width="0.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="581.72" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (9 samples, 0.02%; +0.01%)</title><rect x="1168.6" y="469" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1171.59" y="479.5" ></text>
</g>
<g >
<title>__dynamic_cast (48 samples, 0.10%; +0.07%)</title><rect x="893.2" y="421" width="1.2" height="15.0" fill="rgb(255,113,113)" rx="2" ry="2" />
<text  x="896.19" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (7 samples, 0.01%; +0.01%)</title><rect x="74.4" y="405" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="77.39" y="415.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (8 samples, 0.02%; 0.00%)</title><rect x="21.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.13" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="1148.2" y="485" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1151.21" y="495.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (24 samples, 0.05%; +0.00%)</title><rect x="36.4" y="437" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="39.40" y="447.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (22 samples, 0.05%; -0.01%)</title><rect x="1044.9" y="213" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1047.90" y="223.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (6 samples, 0.01%; 0.00%)</title><rect x="1099.3" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1102.28" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (5 samples, 0.01%; +0.01%)</title><rect x="872.8" y="469" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="875.79" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (25 samples, 0.05%; +0.03%)</title><rect x="254.2" y="277" width="0.6" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="257.19" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (13 samples, 0.03%; 0.00%)</title><rect x="740.2" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="743.21" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (13 samples, 0.03%; +0.02%)</title><rect x="138.0" y="261" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="141.00" y="271.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (12 samples, 0.02%; +0.01%)</title><rect x="306.3" y="197" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="309.35" y="207.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (5 samples, 0.01%; +0.00%)</title><rect x="17.2" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="20.17" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (50 samples, 0.10%; +0.09%)</title><rect x="405.3" y="213" width="1.2" height="15.0" fill="rgb(255,84,84)" rx="2" ry="2" />
<text  x="408.28" y="223.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (40 samples, 0.08%; -0.01%)</title><rect x="1114.2" y="373" width="0.9" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1117.16" y="383.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (18 samples, 0.04%; +0.01%)</title><rect x="1100.8" y="309" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1103.78" y="319.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (11 samples, 0.02%; -0.00%)</title><rect x="606.5" y="437" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="609.51" y="447.5" ></text>
</g>
<g >
<title>operator new (40 samples, 0.08%; +0.00%)</title><rect x="239.9" y="181" width="1.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="242.95" y="191.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (103 samples, 0.21%; +0.00%)</title><rect x="1131.9" y="405" width="2.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1134.94" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.00%)</title><rect x="642.4" y="453" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="645.37" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.01%)</title><rect x="804.9" y="149" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="807.87" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (10 samples, 0.02%; +0.00%)</title><rect x="23.7" y="517" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="26.68" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (16 samples, 0.03%; +0.00%)</title><rect x="880.5" y="389" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="883.49" y="399.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (84 samples, 0.17%; -0.00%)</title><rect x="798.8" y="261" width="2.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="801.80" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (28 samples, 0.06%; +0.01%)</title><rect x="522.3" y="309" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="525.30" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (17 samples, 0.04%; 0.00%)</title><rect x="645.3" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="648.31" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (37 samples, 0.08%; +0.00%)</title><rect x="1153.9" y="453" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1156.91" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (12 samples, 0.02%; -0.02%)</title><rect x="630.6" y="389" width="0.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="633.58" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (7 samples, 0.01%; +0.00%)</title><rect x="594.9" y="373" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="597.91" y="383.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (11 samples, 0.02%; +0.01%)</title><rect x="755.5" y="277" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="758.45" y="287.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (6,861 samples, 14.22%; +0.00%)</title><rect x="112.9" y="373" width="167.9" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="115.95" y="383.5" >seastar::repeat&lt;mergi..</text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (61 samples, 0.13%; +0.00%)</title><rect x="74.6" y="405" width="1.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="77.56" y="415.5" ></text>
</g>
<g >
<title>operator new (36 samples, 0.07%; -0.00%)</title><rect x="1158.0" y="389" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1161.00" y="399.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (5 samples, 0.01%; +0.00%)</title><rect x="231.6" y="213" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="234.60" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (39 samples, 0.08%; -0.02%)</title><rect x="280.8" y="389" width="1.0" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="283.83" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (29 samples, 0.06%; +0.00%)</title><rect x="365.2" y="197" width="0.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="368.21" y="207.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (61 samples, 0.13%; +0.08%)</title><rect x="504.0" y="229" width="1.5" height="15.0" fill="rgb(255,102,102)" rx="2" ry="2" />
<text  x="507.00" y="239.5" ></text>
</g>
<g >
<title>operator new (14 samples, 0.03%; 0.00%)</title><rect x="453.1" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="456.11" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (70 samples, 0.15%; +0.01%)</title><rect x="550.1" y="325" width="1.7" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="553.09" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (22 samples, 0.05%; +0.00%)</title><rect x="136.0" y="229" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="138.97" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (7 samples, 0.01%; 0.00%)</title><rect x="20.4" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.37" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (10 samples, 0.02%; +0.01%)</title><rect x="166.3" y="181" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="169.28" y="191.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (30 samples, 0.06%; +0.01%)</title><rect x="479.9" y="197" width="0.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="482.93" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (69 samples, 0.14%; -0.01%)</title><rect x="850.6" y="421" width="1.7" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="853.57" y="431.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (11 samples, 0.02%; -0.00%)</title><rect x="916.8" y="389" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="919.77" y="399.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; +0.01%)</title><rect x="1125.5" y="421" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1128.49" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (5 samples, 0.01%; 0.00%)</title><rect x="1033.7" y="197" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1036.72" y="207.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (11 samples, 0.02%; -0.00%)</title><rect x="724.2" y="485" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="727.23" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (6 samples, 0.01%; +0.01%)</title><rect x="333.3" y="181" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="336.26" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (29 samples, 0.06%; +0.03%)</title><rect x="206.6" y="101" width="0.7" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="209.60" y="111.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (382 samples, 0.79%; -0.01%)</title><rect x="268.4" y="325" width="9.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="271.40" y="335.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (86 samples, 0.18%; -0.01%)</title><rect x="804.5" y="181" width="2.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="807.53" y="191.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (27 samples, 0.06%; -0.03%)</title><rect x="813.6" y="117" width="0.6" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="816.58" y="127.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (23 samples, 0.05%; +0.02%)</title><rect x="372.8" y="181" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="375.84" y="191.5" ></text>
</g>
<g >
<title>cql3::selection::simple_selection::is_aggregate (8 samples, 0.02%; +0.01%)</title><rect x="888.3" y="437" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="891.32" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (53 samples, 0.11%; -0.04%)</title><rect x="717.0" y="437" width="1.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="720.02" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="511.6" y="197" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="514.61" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (8 samples, 0.02%; +0.00%)</title><rect x="1106.2" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1109.23" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (31 samples, 0.06%; 0.00%)</title><rect x="669.8" y="485" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="672.85" y="495.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (21 samples, 0.04%; -0.01%)</title><rect x="473.2" y="277" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="476.17" y="287.5" ></text>
</g>
<g >
<title>dht::tri_compare (68 samples, 0.14%; +0.03%)</title><rect x="475.4" y="261" width="1.6" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="478.37" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (33 samples, 0.07%; +0.02%)</title><rect x="324.6" y="181" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="327.65" y="191.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (103 samples, 0.21%; -0.00%)</title><rect x="737.0" y="325" width="2.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="740.03" y="335.5" ></text>
</g>
<g >
<title>do_cql_test (283 samples, 0.59%; 0.00%)</title><rect x="14.6" y="549" width="7.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.65" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (182 samples, 0.38%; +0.00%)</title><rect x="212.1" y="181" width="4.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="215.06" y="191.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (58 samples, 0.12%; -0.00%)</title><rect x="907.7" y="293" width="1.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="910.72" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (13 samples, 0.03%; +0.02%)</title><rect x="594.6" y="373" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="597.59" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.00%)</title><rect x="767.1" y="405" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="770.12" y="415.5" ></text>
</g>
<g >
<title>operator delete (24 samples, 0.05%; -0.01%)</title><rect x="1169.4" y="453" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1172.35" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (14 samples, 0.03%; -0.00%)</title><rect x="817.4" y="85" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="820.37" y="95.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (9 samples, 0.02%; 0.00%)</title><rect x="40.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.26" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (7 samples, 0.01%; -0.00%)</title><rect x="209.7" y="165" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="212.71" y="175.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (23,790 samples, 49.32%; -0.06%)</title><rect x="51.2" y="485" width="582.1" height="15.0" fill="rgb(128,128,255)" rx="2" ry="2" />
<text  x="54.25" y="495.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (216 samples, 0.45%; -0.01%)</title><rect x="132.7" y="261" width="5.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="135.72" y="271.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (9 samples, 0.02%; +0.01%)</title><rect x="395.0" y="245" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="398.03" y="255.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (1,124 samples, 2.33%; +0.01%)</title><rect x="491.0" y="325" width="27.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="493.98" y="335.5" >m..</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1,314 samples, 2.72%; +0.01%)</title><rect x="555.7" y="421" width="32.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="558.72" y="431.5" >st..</text>
</g>
<g >
<title>query::result::result (10 samples, 0.02%; -0.00%)</title><rect x="615.7" y="421" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="618.66" y="431.5" ></text>
</g>
<g >
<title>all (48,232 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (43 samples, 0.09%; +0.00%)</title><rect x="982.6" y="309" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="985.63" y="319.5" ></text>
</g>
<g >
<title>__libc_start_main (47,214 samples, 97.89%; 0.00%)</title><rect x="22.1" y="629" width="1155.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.09" y="639.5" >__libc_start_main</text>
</g>
<g >
<title>operator delete (36 samples, 0.07%; +0.00%)</title><rect x="276.8" y="293" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="279.84" y="303.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (10 samples, 0.02%; +0.01%)</title><rect x="63.0" y="453" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="65.99" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (62 samples, 0.13%; -0.00%)</title><rect x="17.5" y="341" width="1.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="20.49" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (2,173 samples, 4.51%; +0.02%)</title><rect x="895.3" y="421" width="53.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="898.27" y="431.5" >cql3:..</text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (15 samples, 0.03%; +0.00%)</title><rect x="296.2" y="245" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="299.17" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (67 samples, 0.14%; -0.00%)</title><rect x="748.8" y="325" width="1.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="751.82" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (68 samples, 0.14%; 0.00%)</title><rect x="754.2" y="309" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="757.23" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (54 samples, 0.11%; -0.04%)</title><rect x="769.1" y="341" width="1.3" height="15.0" fill="rgb(148,148,255)" rx="2" ry="2" />
<text  x="772.08" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (25 samples, 0.05%; +0.01%)</title><rect x="1170.0" y="453" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1173.01" y="463.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (159 samples, 0.33%; +0.00%)</title><rect x="548.0" y="389" width="3.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="550.96" y="399.5" ></text>
</g>
<g >
<title>perf_simple_que (48,232 samples, 100.00%; 0.00%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >perf_simple_que</text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,617 samples, 7.50%; +0.01%)</title><rect x="302.6" y="245" width="88.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="305.58" y="255.5" >flat_mutat..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.00%)</title><rect x="255.0" y="261" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="257.97" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (29 samples, 0.06%; +0.01%)</title><rect x="884.9" y="469" width="0.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="887.94" y="479.5" ></text>
</g>
<g >
<title>database::apply_in_memory (32 samples, 0.07%; 0.00%)</title><rect x="1138.3" y="293" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.31" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (103 samples, 0.21%; 0.00%)</title><rect x="647.0" y="501" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="650.00" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (21 samples, 0.04%; -0.01%)</title><rect x="609.7" y="437" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="612.71" y="447.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; +0.02%)</title><rect x="825.3" y="277" width="0.7" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="828.30" y="287.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (5 samples, 0.01%; -0.00%)</title><rect x="332.3" y="181" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="335.33" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (35 samples, 0.07%; +0.00%)</title><rect x="682.9" y="453" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="685.86" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (8 samples, 0.02%; -0.01%)</title><rect x="1150.8" y="485" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1153.78" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (25 samples, 0.05%; -0.04%)</title><rect x="497.2" y="277" width="0.6" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="500.22" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (9 samples, 0.02%; -0.01%)</title><rect x="614.0" y="437" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="616.97" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (183 samples, 0.38%; +0.01%)</title><rect x="243.3" y="245" width="4.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="246.32" y="255.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (771 samples, 1.60%; +0.00%)</title><rect x="556.3" y="389" width="18.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="559.28" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (45 samples, 0.09%; +0.01%)</title><rect x="1160.2" y="453" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1163.15" y="463.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (50 samples, 0.10%; -0.00%)</title><rect x="460.9" y="325" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="463.89" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (14 samples, 0.03%; +0.00%)</title><rect x="950.4" y="325" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="953.36" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.00%)</title><rect x="800.6" y="213" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="803.59" y="223.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (24 samples, 0.05%; 0.00%)</title><rect x="880.4" y="453" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.42" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (33 samples, 0.07%; +0.01%)</title><rect x="454.1" y="309" width="0.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="457.07" y="319.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (8 samples, 0.02%; +0.01%)</title><rect x="22.8" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="25.77" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (592 samples, 1.23%; -0.07%)</title><rect x="373.4" y="181" width="14.5" height="15.0" fill="rgb(113,113,255)" rx="2" ry="2" />
<text  x="376.40" y="191.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (8 samples, 0.02%; -0.00%)</title><rect x="18.7" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="21.69" y="287.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (9 samples, 0.02%; -0.02%)</title><rect x="992.4" y="293" width="0.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="995.44" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.00%)</title><rect x="583.0" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="586.02" y="335.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (6 samples, 0.01%; 0.00%)</title><rect x="330.4" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="333.44" y="191.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (42 samples, 0.09%; -0.00%)</title><rect x="822.3" y="245" width="1.0" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="825.27" y="255.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (326 samples, 0.68%; -0.01%)</title><rect x="478.2" y="229" width="8.0" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="481.21" y="239.5" ></text>
</g>
<g >
<title>operator new (146 samples, 0.30%; -0.00%)</title><rect x="1026.6" y="245" width="3.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1029.62" y="255.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (54 samples, 0.11%; -0.01%)</title><rect x="269.7" y="309" width="1.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="272.72" y="319.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (7 samples, 0.01%; +0.00%)</title><rect x="712.5" y="421" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="715.47" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; -0.01%)</title><rect x="680.8" y="437" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="683.76" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (27 samples, 0.06%; -0.01%)</title><rect x="421.7" y="421" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="424.70" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (7 samples, 0.01%; 0.00%)</title><rect x="391.1" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="394.12" y="255.5" ></text>
</g>
<g >
<title>operator new (53 samples, 0.11%; -0.01%)</title><rect x="859.0" y="421" width="1.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="861.99" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.00%)</title><rect x="560.4" y="309" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="563.44" y="319.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (33 samples, 0.07%; +0.01%)</title><rect x="636.1" y="485" width="0.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="639.06" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (76 samples, 0.16%; -0.01%)</title><rect x="232.2" y="213" width="1.9" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="235.19" y="223.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (21 samples, 0.04%; +0.00%)</title><rect x="656.6" y="389" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="659.61" y="399.5" ></text>
</g>
<g >
<title>query_result_builder::consume (8 samples, 0.02%; 0.00%)</title><rect x="695.1" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.07" y="303.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (28 samples, 0.06%; 0.00%)</title><rect x="187.9" y="53" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="190.91" y="63.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (23 samples, 0.05%; -0.02%)</title><rect x="356.2" y="149" width="0.6" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="359.21" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (13 samples, 0.03%; 0.00%)</title><rect x="214.7" y="149" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="217.72" y="159.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (45 samples, 0.09%; -0.01%)</title><rect x="506.1" y="213" width="1.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="509.10" y="223.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (137 samples, 0.28%; +0.00%)</title><rect x="779.5" y="389" width="3.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="782.45" y="399.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (6 samples, 0.01%; +0.01%)</title><rect x="226.3" y="229" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="229.27" y="239.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (557 samples, 1.15%; -0.05%)</title><rect x="651.0" y="485" width="13.6" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="653.96" y="495.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (24 samples, 0.05%; +0.00%)</title><rect x="210.5" y="165" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="213.47" y="175.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (30 samples, 0.06%; -0.00%)</title><rect x="530.3" y="261" width="0.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="533.35" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (9 samples, 0.02%; -0.02%)</title><rect x="771.0" y="357" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="773.99" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (18 samples, 0.04%; -0.01%)</title><rect x="20.2" y="405" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="23.23" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (12 samples, 0.02%; +0.00%)</title><rect x="909.6" y="309" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="912.58" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="1052.3" y="277" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1055.33" y="287.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (228 samples, 0.47%; -0.01%)</title><rect x="447.2" y="293" width="5.6" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="450.22" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (22 samples, 0.05%; -0.01%)</title><rect x="575.6" y="341" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="578.63" y="351.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (11 samples, 0.02%; +0.01%)</title><rect x="125.4" y="277" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="128.40" y="287.5" ></text>
</g>
<g >
<title>partition_entry::read (84 samples, 0.17%; +0.02%)</title><rect x="519.3" y="309" width="2.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="522.31" y="319.5" ></text>
</g>
<g >
<title>__start_context (291 samples, 0.60%; 0.00%)</title><rect x="14.5" y="613" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.45" y="623.5" ></text>
</g>
<g >
<title>std::type_info::operator== (6 samples, 0.01%; +0.00%)</title><rect x="1172.8" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1175.85" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (3,241 samples, 6.72%; -0.01%)</title><rect x="767.6" y="421" width="79.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="770.56" y="431.5" >cql3::sta..</text>
</g>
<g >
<title>utils::array_search_gt_impl (177 samples, 0.37%; +0.03%)</title><rect x="468.8" y="261" width="4.3" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="471.79" y="271.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (108 samples, 0.22%; 0.00%)</title><rect x="1171.0" y="453" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1174.02" y="463.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (8 samples, 0.02%; +0.01%)</title><rect x="559.0" y="325" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="562.05" y="335.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (47 samples, 0.10%; -0.01%)</title><rect x="285.3" y="373" width="1.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="288.31" y="383.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (10 samples, 0.02%; 0.00%)</title><rect x="17.1" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.12" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (15 samples, 0.03%; +0.01%)</title><rect x="317.1" y="197" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="320.13" y="207.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (153 samples, 0.32%; -0.02%)</title><rect x="839.8" y="341" width="3.7" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="842.76" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (6 samples, 0.01%; 0.00%)</title><rect x="881.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.45" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (6 samples, 0.01%; +0.01%)</title><rect x="76.9" y="453" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="79.89" y="463.5" ></text>
</g>
<g >
<title>__dynamic_cast (10 samples, 0.02%; -0.01%)</title><rect x="12.1" y="581" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="15.08" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.00%)</title><rect x="1056.5" y="181" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1059.52" y="191.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (6 samples, 0.01%; +0.01%)</title><rect x="953.3" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="956.32" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (397 samples, 0.82%; +0.01%)</title><rect x="66.7" y="437" width="9.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="69.71" y="447.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (235 samples, 0.49%; -0.03%)</title><rect x="1086.2" y="245" width="5.8" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="1089.22" y="255.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (43 samples, 0.09%; -0.01%)</title><rect x="811.3" y="149" width="1.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="814.30" y="159.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (36 samples, 0.07%; -0.01%)</title><rect x="940.2" y="405" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="943.21" y="415.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (155 samples, 0.32%; +0.01%)</title><rect x="867.1" y="421" width="3.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="870.11" y="431.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.05%; -0.01%)</title><rect x="152.6" y="197" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="155.63" y="207.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (5 samples, 0.01%; +0.01%)</title><rect x="715.0" y="421" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="718.03" y="431.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (20 samples, 0.04%; -0.00%)</title><rect x="330.8" y="181" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="333.76" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (9 samples, 0.02%; +0.01%)</title><rect x="76.7" y="453" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="79.67" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (13 samples, 0.03%; +0.01%)</title><rect x="628.3" y="389" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="631.26" y="399.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (289 samples, 0.60%; +0.00%)</title><rect x="1084.9" y="261" width="7.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1087.90" y="271.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (9 samples, 0.02%; 0.00%)</title><rect x="17.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.12" y="319.5" ></text>
</g>
<g >
<title>operator delete (13 samples, 0.03%; -0.01%)</title><rect x="39.8" y="453" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="42.80" y="463.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (363 samples, 0.75%; +0.00%)</title><rect x="587.9" y="437" width="8.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="590.89" y="447.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (73 samples, 0.15%; -0.03%)</title><rect x="534.4" y="277" width="1.8" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="537.41" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (17 samples, 0.04%; +0.01%)</title><rect x="752.4" y="357" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="755.37" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (22 samples, 0.05%; +0.01%)</title><rect x="646.0" y="485" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="649.04" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (15 samples, 0.03%; +0.00%)</title><rect x="46.0" y="485" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="49.01" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; -0.00%)</title><rect x="1052.2" y="229" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1055.21" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="750.7" y="373" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="753.73" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (7 samples, 0.01%; +0.01%)</title><rect x="260.2" y="341" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="263.16" y="351.5" ></text>
</g>
<g >
<title>__tls_init (9 samples, 0.02%; -0.00%)</title><rect x="458.8" y="325" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="461.79" y="335.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (52 samples, 0.11%; +0.01%)</title><rect x="232.8" y="181" width="1.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="235.78" y="191.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (6 samples, 0.01%; +0.01%)</title><rect x="747.7" y="373" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="750.72" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (13 samples, 0.03%; -0.00%)</title><rect x="584.4" y="341" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="587.42" y="351.5" ></text>
</g>
<g >
<title>database::has_keyspace (96 samples, 0.20%; 0.00%)</title><rect x="863.0" y="405" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.95" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (10 samples, 0.02%; +0.01%)</title><rect x="1048.0" y="261" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1051.03" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (33 samples, 0.07%; -0.00%)</title><rect x="643.3" y="469" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="646.25" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (11 samples, 0.02%; -0.01%)</title><rect x="247.5" y="229" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="250.46" y="239.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (661 samples, 1.37%; 0.00%)</title><rect x="499.4" y="277" width="16.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="502.42" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%; +0.01%)</title><rect x="539.8" y="341" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="542.84" y="351.5" ></text>
</g>
<g >
<title>operator new (26 samples, 0.05%; +0.00%)</title><rect x="799.0" y="245" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="801.95" y="255.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (36 samples, 0.07%; 0.00%)</title><rect x="1138.3" y="325" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.28" y="335.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (13 samples, 0.03%; -0.02%)</title><rect x="813.3" y="117" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="816.26" y="127.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (37 samples, 0.08%; -0.01%)</title><rect x="402.8" y="197" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="405.81" y="207.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (116 samples, 0.24%; -0.00%)</title><rect x="644.1" y="501" width="2.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="647.14" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;reader_permit::impl, boost::intrusive::list_node_traits&lt;void*&gt;,  (7 samples, 0.01%; +0.01%)</title><rect x="1045.1" y="181" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1048.14" y="191.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (7 samples, 0.01%; +0.01%)</title><rect x="531.8" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="534.84" y="319.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (57 samples, 0.12%; +0.03%)</title><rect x="71.1" y="389" width="1.4" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="74.11" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (8 samples, 0.02%; -0.01%)</title><rect x="132.4" y="245" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="135.42" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (84 samples, 0.17%; -0.02%)</title><rect x="970.5" y="357" width="2.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="973.50" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (160 samples, 0.33%; -0.04%)</title><rect x="219.7" y="197" width="4.0" height="15.0" fill="rgb(151,151,255)" rx="2" ry="2" />
<text  x="222.74" y="207.5" ></text>
</g>
<g >
<title>compound_type&lt; (88 samples, 0.18%; +0.00%)</title><rect x="921.8" y="357" width="2.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="924.81" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (20 samples, 0.04%; -0.00%)</title><rect x="1127.6" y="373" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1130.64" y="383.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (16 samples, 0.03%; +0.01%)</title><rect x="156.5" y="213" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="159.50" y="223.5" ></text>
</g>
<g >
<title>__tls_init (9 samples, 0.02%; +0.01%)</title><rect x="142.1" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="145.06" y="271.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (12 samples, 0.02%; +0.00%)</title><rect x="851.9" y="373" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="854.87" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (6 samples, 0.01%; +0.01%)</title><rect x="950.7" y="325" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="953.71" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (168 samples, 0.35%; +0.01%)</title><rect x="1093.1" y="261" width="4.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1096.12" y="271.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (6 samples, 0.01%; 0.00%)</title><rect x="21.2" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.18" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (17 samples, 0.04%; +0.00%)</title><rect x="523.0" y="325" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="525.98" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (478 samples, 0.99%; +0.02%)</title><rect x="181.3" y="101" width="11.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="184.28" y="111.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (10,180 samples, 21.11%; -0.03%)</title><rect x="888.5" y="437" width="249.1" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="891.52" y="447.5" >cql3::statements::select_statemen..</text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (20 samples, 0.04%; -0.01%)</title><rect x="69.1" y="405" width="0.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="72.08" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (15 samples, 0.03%; 0.00%)</title><rect x="872.3" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.30" y="463.5" ></text>
</g>
<g >
<title>operator delete (27 samples, 0.06%; -0.01%)</title><rect x="707.7" y="485" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="710.67" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (6 samples, 0.01%; +0.00%)</title><rect x="256.9" y="309" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="259.88" y="319.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (24 samples, 0.05%; +0.02%)</title><rect x="237.6" y="197" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="240.65" y="207.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (16 samples, 0.03%; -0.00%)</title><rect x="214.3" y="133" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="217.33" y="143.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="559.8" y="293" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="562.83" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (8 samples, 0.02%; -0.02%)</title><rect x="784.6" y="357" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="787.59" y="367.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.01%; +0.00%)</title><rect x="806.6" y="197" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="809.63" y="207.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (6 samples, 0.01%; +0.01%)</title><rect x="515.3" y="229" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="518.25" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (6 samples, 0.01%; +0.00%)</title><rect x="1048.4" y="261" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1051.42" y="271.5" ></text>
</g>
<g >
<title>seastar::app_template::run (47,214 samples, 97.89%; 0.00%)</title><rect x="22.1" y="581" width="1155.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.09" y="591.5" >seastar::app_template::run</text>
</g>
<g >
<title>cql3_parser::CqlParser::query (185 samples, 0.38%; 0.00%)</title><rect x="15.3" y="405" width="4.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.26" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (6 samples, 0.01%; 0.00%)</title><rect x="1174.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1177.91" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (9 samples, 0.02%; -0.00%)</title><rect x="443.5" y="261" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="446.52" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::stats (41 samples, 0.09%; -0.00%)</title><rect x="501.3" y="245" width="1.0" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="504.26" y="255.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (146 samples, 0.30%; -0.01%)</title><rect x="755.9" y="325" width="3.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="758.92" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (8 samples, 0.02%; 0.00%)</title><rect x="17.6" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="319.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (30 samples, 0.06%; +0.00%)</title><rect x="311.8" y="181" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="314.83" y="191.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (82 samples, 0.17%; +0.01%)</title><rect x="757.5" y="277" width="2.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="760.48" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (10 samples, 0.02%; +0.00%)</title><rect x="196.8" y="101" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="199.77" y="111.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (9 samples, 0.02%; +0.00%)</title><rect x="832.6" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="835.59" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (33 samples, 0.07%; 0.00%)</title><rect x="559.4" y="309" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="562.39" y="319.5" ></text>
</g>
<g >
<title>db::block_for (6 samples, 0.01%; +0.01%)</title><rect x="1071.5" y="341" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1074.52" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (29 samples, 0.06%; +0.00%)</title><rect x="950.2" y="341" width="0.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="953.22" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (20 samples, 0.04%; -0.02%)</title><rect x="134.8" y="245" width="0.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="137.80" y="255.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (116 samples, 0.24%; +0.01%)</title><rect x="726.4" y="453" width="2.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="729.36" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (20 samples, 0.04%; +0.01%)</title><rect x="441.1" y="261" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="444.15" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (31 samples, 0.06%; +0.00%)</title><rect x="881.2" y="421" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="884.23" y="431.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (18 samples, 0.04%; +0.00%)</title><rect x="911.4" y="325" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="914.39" y="335.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (72 samples, 0.15%; -0.01%)</title><rect x="529.7" y="293" width="1.8" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="532.74" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (6 samples, 0.01%; -0.02%)</title><rect x="1121.7" y="405" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1124.67" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (2,968 samples, 6.15%; -0.01%)</title><rect x="986.7" y="357" width="72.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="989.67" y="367.5" >service:..</text>
</g>
<g >
<title>range_tombstone_stream::get_next (17 samples, 0.04%; -0.01%)</title><rect x="222.9" y="165" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="225.92" y="175.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (7 samples, 0.01%; +0.01%)</title><rect x="228.2" y="245" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="231.20" y="255.5" ></text>
</g>
<g >
<title>operator delete (35 samples, 0.07%; +0.00%)</title><rect x="414.2" y="261" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="417.16" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (15 samples, 0.03%; -0.01%)</title><rect x="517.0" y="277" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="519.99" y="287.5" ></text>
</g>
<g >
<title>operator new (96 samples, 0.20%; +0.01%)</title><rect x="970.3" y="373" width="2.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="973.25" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (7 samples, 0.01%; +0.01%)</title><rect x="776.1" y="373" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="779.10" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (17 samples, 0.04%; 0.00%)</title><rect x="17.1" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.07" y="351.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (93 samples, 0.19%; 0.00%)</title><rect x="607.4" y="437" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="610.44" y="447.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (10 samples, 0.02%; +0.00%)</title><rect x="525.6" y="341" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="528.60" y="351.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (11 samples, 0.02%; -0.00%)</title><rect x="220.5" y="181" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="223.47" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (7 samples, 0.01%; +0.01%)</title><rect x="1107.0" y="341" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1109.99" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (7 samples, 0.01%; 0.00%)</title><rect x="881.7" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.72" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (5 samples, 0.01%; 0.00%)</title><rect x="695.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.83" y="479.5" ></text>
</g>
<g >
<title>seastar::gate::enter (5 samples, 0.01%; -0.01%)</title><rect x="1045.3" y="181" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1048.31" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (14 samples, 0.03%; +0.02%)</title><rect x="317.5" y="197" width="0.3" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="320.50" y="207.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (33 samples, 0.07%; +0.00%)</title><rect x="897.6" y="389" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="900.57" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (20 samples, 0.04%; +0.03%)</title><rect x="924.1" y="373" width="0.5" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="927.06" y="383.5" ></text>
</g>
<g >
<title>auth::resource::resource (43 samples, 0.09%; +0.01%)</title><rect x="783.2" y="373" width="1.0" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="786.19" y="383.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (19 samples, 0.04%; 0.00%)</title><rect x="845.1" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="848.09" y="303.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (161 samples, 0.33%; 0.00%)</title><rect x="10.3" y="613" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.29" y="623.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (451 samples, 0.94%; +0.02%)</title><rect x="462.7" y="309" width="11.1" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="465.73" y="319.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (5 samples, 0.01%; -0.01%)</title><rect x="518.7" y="325" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="521.65" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (36 samples, 0.07%; -0.01%)</title><rect x="860.9" y="389" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="863.92" y="399.5" ></text>
</g>
<g >
<title>operator new (22 samples, 0.05%; -0.00%)</title><rect x="615.1" y="421" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="618.12" y="431.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (14 samples, 0.03%; +0.01%)</title><rect x="757.1" y="277" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="760.14" y="287.5" ></text>
</g>
<g >
<title>operator new (27 samples, 0.06%; -0.00%)</title><rect x="520.7" y="277" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="523.71" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (14 samples, 0.03%; 0.00%)</title><rect x="1139.5" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.48" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; -0.00%)</title><rect x="225.2" y="181" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="228.19" y="191.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (5 samples, 0.01%; 0.00%)</title><rect x="818.3" y="149" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.28" y="159.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (11 samples, 0.02%; +0.00%)</title><rect x="1138.3" y="197" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1141.33" y="207.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (142 samples, 0.29%; 0.00%)</title><rect x="548.4" y="373" width="3.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="551.38" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (22 samples, 0.05%; +0.02%)</title><rect x="494.4" y="309" width="0.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="497.38" y="319.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (23 samples, 0.05%; -0.03%)</title><rect x="127.8" y="277" width="0.6" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="130.82" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (25 samples, 0.05%; +0.01%)</title><rect x="911.9" y="325" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="914.88" y="335.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (123 samples, 0.26%; +0.01%)</title><rect x="234.6" y="197" width="3.0" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="237.59" y="207.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (63 samples, 0.13%; -0.01%)</title><rect x="307.1" y="181" width="1.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="310.06" y="191.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (34 samples, 0.07%; -0.01%)</title><rect x="233.2" y="165" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="236.22" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (438 samples, 0.91%; -0.02%)</title><rect x="230.5" y="229" width="10.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="233.45" y="239.5" ></text>
</g>
<g >
<title>[unknown] (9 samples, 0.02%; 0.00%)</title><rect x="10.0" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.05" y="623.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (31 samples, 0.06%; 0.00%)</title><rect x="881.2" y="469" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.23" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (44 samples, 0.09%; -0.00%)</title><rect x="15.4" y="325" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="18.38" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="938.6" y="389" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="941.60" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (27 samples, 0.06%; 0.00%)</title><rect x="1139.2" y="389" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.19" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (427 samples, 0.89%; +0.01%)</title><rect x="396.4" y="229" width="10.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="399.40" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (8 samples, 0.02%; -0.00%)</title><rect x="445.3" y="293" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="448.31" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (26 samples, 0.05%; +0.03%)</title><rect x="1068.0" y="277" width="0.7" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="1071.04" y="287.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (15 samples, 0.03%; +0.01%)</title><rect x="63.6" y="453" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="66.55" y="463.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (28 samples, 0.06%; +0.01%)</title><rect x="1101.7" y="341" width="0.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1104.73" y="351.5" ></text>
</g>
<g >
<title>mutation_querier::consume (1,851 samples, 3.84%; +0.07%)</title><rect x="318.1" y="197" width="45.3" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="321.11" y="207.5" >muta..</text>
</g>
<g >
<title>reader_permit::~reader_permit (7 samples, 0.01%; +0.01%)</title><rect x="517.6" y="293" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="520.63" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (165 samples, 0.34%; -0.02%)</title><rect x="830.4" y="357" width="4.0" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="833.41" y="367.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (119 samples, 0.25%; -0.02%)</title><rect x="1078.0" y="309" width="3.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1081.05" y="319.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.02%; -0.03%)</title><rect x="565.1" y="277" width="0.2" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="568.06" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (32 samples, 0.07%; 0.00%)</title><rect x="121.5" y="309" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="124.46" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (19 samples, 0.04%; 0.00%)</title><rect x="1056.2" y="197" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1059.20" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (7 samples, 0.01%; -0.01%)</title><rect x="1119.5" y="341" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1122.49" y="351.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (9 samples, 0.02%; -0.01%)</title><rect x="486.0" y="213" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="488.97" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (76 samples, 0.16%; +0.02%)</title><rect x="951.1" y="389" width="1.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="954.15" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (8 samples, 0.02%; -0.00%)</title><rect x="228.5" y="245" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="231.52" y="255.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (108 samples, 0.22%; 0.00%)</title><rect x="603.0" y="405" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="606.01" y="415.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.01%; +0.01%)</title><rect x="803.0" y="229" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="805.99" y="239.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (7 samples, 0.01%; 0.00%)</title><rect x="21.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.82" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (14 samples, 0.03%; -0.01%)</title><rect x="552.9" y="389" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="555.88" y="399.5" ></text>
</g>
<g >
<title>row::external_memory_usage (235 samples, 0.49%; +0.01%)</title><rect x="204.0" y="149" width="5.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="206.96" y="159.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.01%; -0.02%)</title><rect x="349.2" y="165" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="352.21" y="175.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.01%; 0.00%)</title><rect x="818.4" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.42" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::take (6 samples, 0.01%; +0.01%)</title><rect x="1148.1" y="469" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1151.07" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (5 samples, 0.01%; 0.00%)</title><rect x="1121.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.03" y="399.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_dcd3199037457158f6e2516231906d04f9637da6] (5 samples, 0.01%; +0.01%)</title><rect x="965.9" y="389" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="968.88" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (5 samples, 0.01%; +0.00%)</title><rect x="203.8" y="149" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="206.84" y="159.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (5 samples, 0.01%; +0.00%)</title><rect x="107.6" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="110.59" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (706 samples, 1.46%; -0.06%)</title><rect x="371.0" y="197" width="17.3" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="374.03" y="207.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (11 samples, 0.02%; +0.01%)</title><rect x="874.7" y="405" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="877.74" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (11 samples, 0.02%; -0.00%)</title><rect x="214.5" y="117" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="217.45" y="127.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (5 samples, 0.01%; 0.00%)</title><rect x="782.7" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="785.68" y="383.5" ></text>
</g>
<g >
<title>compound_type&lt; (5 samples, 0.01%; +0.01%)</title><rect x="478.1" y="229" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="481.09" y="239.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (9 samples, 0.02%; 0.00%)</title><rect x="718.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="721.00" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (39 samples, 0.08%; +0.02%)</title><rect x="1166.1" y="485" width="1.0" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1169.10" y="495.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (5 samples, 0.01%; -0.00%)</title><rect x="937.4" y="325" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="940.37" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="576.3" y="357" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="579.32" y="367.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; -0.00%)</title><rect x="684.4" y="485" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="687.43" y="495.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (17 samples, 0.04%; +0.01%)</title><rect x="1071.1" y="341" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1074.10" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (193 samples, 0.40%; +0.00%)</title><rect x="996.3" y="325" width="4.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="999.31" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (8 samples, 0.02%; 0.00%)</title><rect x="17.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (6 samples, 0.01%; -0.00%)</title><rect x="590.2" y="421" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="593.24" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (7 samples, 0.01%; -0.00%)</title><rect x="807.9" y="197" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="810.90" y="207.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (196 samples, 0.41%; -0.00%)</title><rect x="699.3" y="469" width="4.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="702.28" y="479.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cell (5 samples, 0.01%; +0.00%)</title><rect x="21.8" y="341" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="24.84" y="351.5" ></text>
</g>
<g >
<title>operator new (86 samples, 0.18%; +0.00%)</title><rect x="1053.3" y="245" width="2.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1056.26" y="255.5" ></text>
</g>
<g >
<title>reader_permit::consume (5 samples, 0.01%; -0.01%)</title><rect x="152.5" y="181" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="155.46" y="191.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (8 samples, 0.02%; +0.00%)</title><rect x="228.0" y="245" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="231.01" y="255.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (10 samples, 0.02%; +0.00%)</title><rect x="20.0" y="421" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="22.96" y="431.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (36 samples, 0.07%; +0.00%)</title><rect x="530.2" y="277" width="0.9" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="533.20" y="287.5" ></text>
</g>
<g >
<title>operator new (70 samples, 0.15%; 0.00%)</title><rect x="1117.3" y="357" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.31" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (32 samples, 0.07%; +0.01%)</title><rect x="1115.4" y="373" width="0.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1118.38" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (79 samples, 0.16%; -0.00%)</title><rect x="981.8" y="325" width="1.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="984.75" y="335.5" ></text>
</g>
<g >
<title>[unknown] (491 samples, 1.02%; 0.00%)</title><rect x="10.0" y="629" width="12.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.05" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (66 samples, 0.14%; -0.02%)</title><rect x="863.5" y="373" width="1.7" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="866.54" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (16 samples, 0.03%; +0.01%)</title><rect x="402.4" y="197" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="405.42" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (81 samples, 0.17%; 0.00%)</title><rect x="39.6" y="469" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.60" y="479.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (10 samples, 0.02%; +0.00%)</title><rect x="1138.0" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1140.99" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.01%)</title><rect x="136.4" y="213" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="139.36" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (55 samples, 0.11%; +0.01%)</title><rect x="1018.7" y="245" width="1.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1021.74" y="255.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (8 samples, 0.02%; 0.00%)</title><rect x="20.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.37" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="703.6" y="453" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="706.61" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (7 samples, 0.01%; +0.01%)</title><rect x="148.9" y="213" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="151.86" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (16 samples, 0.03%; +0.01%)</title><rect x="46.5" y="485" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="49.53" y="495.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (27 samples, 0.06%; 0.00%)</title><rect x="1139.2" y="469" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.19" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (9 samples, 0.02%; -0.02%)</title><rect x="794.0" y="277" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="796.98" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (6 samples, 0.01%; +0.00%)</title><rect x="848.1" y="389" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="851.15" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (23 samples, 0.05%; -0.01%)</title><rect x="571.2" y="261" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="574.16" y="271.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (33 samples, 0.07%; +0.00%)</title><rect x="224.6" y="213" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="227.58" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (15 samples, 0.03%; +0.01%)</title><rect x="1056.7" y="277" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1059.69" y="287.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (525 samples, 1.09%; +0.03%)</title><rect x="746.9" y="389" width="12.8" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="749.86" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (5 samples, 0.01%; +0.00%)</title><rect x="241.9" y="229" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="244.88" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="389.7" y="181" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="392.72" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (35 samples, 0.07%; +0.01%)</title><rect x="252.3" y="277" width="0.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="255.28" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (20 samples, 0.04%; -0.00%)</title><rect x="356.8" y="149" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="359.77" y="159.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (50 samples, 0.10%; -0.00%)</title><rect x="835.9" y="373" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="838.92" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (9 samples, 0.02%; -0.01%)</title><rect x="213.0" y="149" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="215.99" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (21 samples, 0.04%; -0.00%)</title><rect x="449.1" y="261" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="452.07" y="271.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (36 samples, 0.07%; 0.00%)</title><rect x="1069.6" y="277" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1072.58" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (30 samples, 0.06%; +0.00%)</title><rect x="1005.8" y="229" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1008.83" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (20 samples, 0.04%; 0.00%)</title><rect x="1174.8" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1177.81" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (7 samples, 0.01%; -0.00%)</title><rect x="829.7" y="325" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="832.68" y="335.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (56 samples, 0.12%; +0.02%)</title><rect x="1163.7" y="453" width="1.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1166.65" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (22 samples, 0.05%; -0.00%)</title><rect x="947.9" y="325" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="950.87" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (74 samples, 0.15%; 0.00%)</title><rect x="896.7" y="405" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="899.66" y="415.5" ></text>
</g>
<g >
<title>operator new (46 samples, 0.10%; 0.00%)</title><rect x="1159.0" y="437" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1162.03" y="447.5" ></text>
</g>
<g >
<title>reader_permit::set_max_result_size (9 samples, 0.02%; -0.00%)</title><rect x="66.0" y="453" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="68.95" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (28 samples, 0.06%; 0.00%)</title><rect x="694.9" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.92" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.01%)</title><rect x="885.2" y="453" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="888.19" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.02%; -0.00%)</title><rect x="794.5" y="325" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="797.52" y="335.5" ></text>
</g>
<g >
<title>query_result_builder::consume (1,957 samples, 4.06%; -0.00%)</title><rect x="316.8" y="213" width="47.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="319.77" y="223.5" >quer..</text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (41 samples, 0.09%; +0.02%)</title><rect x="32.4" y="485" width="1.0" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="35.39" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (9 samples, 0.02%; 0.00%)</title><rect x="16.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.78" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (327 samples, 0.68%; -0.02%)</title><rect x="435.9" y="309" width="8.0" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="438.91" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (8 samples, 0.02%; +0.00%)</title><rect x="1153.4" y="421" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1156.40" y="431.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (5 samples, 0.01%; 0.00%)</title><rect x="460.7" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="463.70" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (225 samples, 0.47%; -0.00%)</title><rect x="770.6" y="373" width="5.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="773.60" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (11 samples, 0.02%; +0.00%)</title><rect x="585.0" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="587.95" y="383.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (63 samples, 0.13%; +0.02%)</title><rect x="383.5" y="133" width="1.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="386.51" y="143.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,385 samples, 9.09%; -0.01%)</title><rect x="141.1" y="293" width="107.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="144.06" y="303.5" >seastar::do_u..</text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (7 samples, 0.01%; -0.01%)</title><rect x="916.3" y="373" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="919.33" y="383.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (9 samples, 0.02%; +0.01%)</title><rect x="536.4" y="293" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="539.37" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (8 samples, 0.02%; +0.01%)</title><rect x="683.7" y="469" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="686.72" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (9 samples, 0.02%; +0.01%)</title><rect x="870.7" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="873.68" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (2,093 samples, 4.34%; +0.01%)</title><rect x="1007.5" y="309" width="51.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1010.54" y="319.5" >servi..</text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (325 samples, 0.67%; -0.01%)</title><rect x="248.4" y="309" width="7.9" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="251.36" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (18 samples, 0.04%; +0.00%)</title><rect x="940.6" y="389" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="943.58" y="399.5" ></text>
</g>
<g >
<title>operator delete (42 samples, 0.09%; +0.02%)</title><rect x="827.5" y="309" width="1.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="830.53" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (26 samples, 0.05%; -0.00%)</title><rect x="1098.8" y="277" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1101.82" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (8 samples, 0.02%; +0.01%)</title><rect x="420.0" y="373" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="422.99" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (7 samples, 0.01%; +0.01%)</title><rect x="831.3" y="341" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="834.29" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (8 samples, 0.02%; -0.00%)</title><rect x="853.4" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="856.38" y="447.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (142 samples, 0.29%; +0.02%)</title><rect x="1185.4" y="613" width="3.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1188.40" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="992.8" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="995.84" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; -0.00%)</title><rect x="572.3" y="293" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="575.26" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (19 samples, 0.04%; -0.01%)</title><rect x="808.5" y="165" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="811.47" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (19 samples, 0.04%; -0.01%)</title><rect x="717.8" y="421" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="720.75" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (38 samples, 0.08%; -0.01%)</title><rect x="791.4" y="309" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="794.41" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (8 samples, 0.02%; +0.01%)</title><rect x="80.9" y="453" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="83.95" y="463.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (6 samples, 0.01%; 0.00%)</title><rect x="616.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="619.81" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (5 samples, 0.01%; 0.00%)</title><rect x="21.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.84" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (26 samples, 0.05%; -0.01%)</title><rect x="253.5" y="277" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="256.55" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (106 samples, 0.22%; +0.00%)</title><rect x="959.3" y="389" width="2.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="962.34" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="618.0" y="437" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="620.98" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (19 samples, 0.04%; +0.00%)</title><rect x="18.4" y="293" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="21.42" y="303.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous&gt; (6 samples, 0.01%; +0.00%)</title><rect x="824.9" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="827.93" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (12 samples, 0.02%; +0.01%)</title><rect x="255.1" y="277" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="258.12" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (5 samples, 0.01%; -0.01%)</title><rect x="142.3" y="261" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="145.33" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (6 samples, 0.01%; +0.00%)</title><rect x="880.2" y="469" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="883.17" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (273 samples, 0.57%; +0.01%)</title><rect x="437.1" y="293" width="6.7" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="440.11" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (6 samples, 0.01%; -0.01%)</title><rect x="572.6" y="293" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="575.65" y="303.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (70 samples, 0.15%; +0.01%)</title><rect x="232.3" y="197" width="1.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="235.34" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (28 samples, 0.06%; +0.01%)</title><rect x="1122.1" y="405" width="0.7" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1125.11" y="415.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (40 samples, 0.08%; +0.01%)</title><rect x="236.0" y="181" width="1.0" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="239.03" y="191.5" ></text>
</g>
<g >
<title>operator new (60 samples, 0.12%; +0.00%)</title><rect x="274.2" y="277" width="1.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="277.17" y="287.5" ></text>
</g>
<g >
<title>operator new (49 samples, 0.10%; +0.00%)</title><rect x="870.9" y="437" width="1.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="873.90" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (50 samples, 0.10%; -0.04%)</title><rect x="1126.9" y="389" width="1.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1129.90" y="399.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (61 samples, 0.13%; -0.01%)</title><rect x="832.9" y="309" width="1.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="835.91" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (27 samples, 0.06%; -0.02%)</title><rect x="112.2" y="373" width="0.7" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="115.19" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (92 samples, 0.19%; +0.00%)</title><rect x="827.3" y="325" width="2.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="830.33" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (47 samples, 0.10%; 0.00%)</title><rect x="15.3" y="357" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.33" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (36 samples, 0.07%; +0.01%)</title><rect x="799.8" y="229" width="0.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="802.83" y="239.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (388 samples, 0.80%; -0.04%)</title><rect x="709.4" y="469" width="9.5" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="712.43" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (7 samples, 0.01%; -0.00%)</title><rect x="766.9" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="769.90" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_range_check (10 samples, 0.02%; +0.01%)</title><rect x="910.8" y="309" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="913.76" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (62 samples, 0.13%; -0.01%)</title><rect x="1067.9" y="293" width="1.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1070.94" y="303.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (18 samples, 0.04%; +0.00%)</title><rect x="307.2" y="165" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="310.23" y="175.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (42 samples, 0.09%; +0.04%)</title><rect x="235.0" y="181" width="1.0" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="238.01" y="191.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (44 samples, 0.09%; -0.01%)</title><rect x="999.1" y="277" width="1.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1002.10" y="287.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (458 samples, 0.95%; +0.01%)</title><rect x="128.5" y="277" width="11.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="131.51" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (5 samples, 0.01%; 0.00%)</title><rect x="852.5" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="855.46" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (96 samples, 0.20%; +0.01%)</title><rect x="580.9" y="357" width="2.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="583.87" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (78 samples, 0.16%; 0.00%)</title><rect x="1063.7" y="325" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1066.69" y="335.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (450 samples, 0.93%; -0.00%)</title><rect x="475.2" y="277" width="11.0" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="478.18" y="287.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.06%; -0.00%)</title><rect x="538.7" y="325" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="541.71" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (8 samples, 0.02%; 0.00%)</title><rect x="316.9" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="319.94" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; -0.00%)</title><rect x="619.1" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="622.13" y="447.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (7 samples, 0.01%; +0.01%)</title><rect x="402.2" y="181" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="405.25" y="191.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (9 samples, 0.02%; -0.01%)</title><rect x="710.7" y="453" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="713.66" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (7 samples, 0.01%; -0.00%)</title><rect x="666.4" y="485" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="669.37" y="495.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (22 samples, 0.05%; +0.01%)</title><rect x="310.5" y="165" width="0.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="313.46" y="175.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (14 samples, 0.03%; +0.00%)</title><rect x="514.9" y="229" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="517.91" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (15 samples, 0.03%; -0.01%)</title><rect x="100.4" y="421" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="103.42" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (34 samples, 0.07%; +0.03%)</title><rect x="617.1" y="437" width="0.8" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="620.05" y="447.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (5 samples, 0.01%; -0.00%)</title><rect x="708.7" y="469" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="711.72" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (149 samples, 0.31%; +0.00%)</title><rect x="653.9" y="453" width="3.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="656.87" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (164 samples, 0.34%; +0.04%)</title><rect x="507.7" y="213" width="4.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="510.74" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (33 samples, 0.07%; +0.02%)</title><rect x="151.7" y="165" width="0.8" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="154.65" y="175.5" ></text>
</g>
<g >
<title>operator delete (19 samples, 0.04%; 0.00%)</title><rect x="644.8" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="647.77" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,357 samples, 9.03%; +0.01%)</title><rect x="141.5" y="277" width="106.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="144.50" y="287.5" >logalloc::all..</text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (5 samples, 0.01%; +0.00%)</title><rect x="223.7" y="197" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="226.65" y="207.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (91 samples, 0.19%; +0.01%)</title><rect x="529.3" y="309" width="2.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="532.27" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (108 samples, 0.22%; -0.00%)</title><rect x="1117.0" y="373" width="2.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1120.02" y="383.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (15 samples, 0.03%; 0.00%)</title><rect x="1174.8" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1177.81" y="447.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (89 samples, 0.18%; +0.01%)</title><rect x="748.5" y="341" width="2.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="751.50" y="351.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (34 samples, 0.07%; -0.00%)</title><rect x="849.1" y="421" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="852.13" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (7 samples, 0.01%; +0.01%)</title><rect x="1173.0" y="421" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1176.02" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (7 samples, 0.01%; -0.01%)</title><rect x="517.5" y="293" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="520.45" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (6 samples, 0.01%; -0.03%)</title><rect x="208.8" y="85" width="0.2" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="211.83" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (7 samples, 0.01%; +0.00%)</title><rect x="387.7" y="165" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="390.72" y="175.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (26 samples, 0.05%; +0.01%)</title><rect x="844.9" y="309" width="0.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="847.92" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (5 samples, 0.01%; +0.01%)</title><rect x="916.5" y="373" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="919.50" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (11 samples, 0.02%; +0.00%)</title><rect x="818.7" y="197" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="821.74" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (27 samples, 0.06%; 0.00%)</title><rect x="411.9" y="277" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="414.94" y="287.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (18 samples, 0.04%; +0.01%)</title><rect x="434.9" y="325" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="437.91" y="335.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (21 samples, 0.04%; -0.01%)</title><rect x="1038.4" y="149" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1041.37" y="159.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (9 samples, 0.02%; +0.01%)</title><rect x="394.8" y="213" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="397.79" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (181 samples, 0.38%; +0.01%)</title><rect x="810.0" y="165" width="4.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="813.03" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (7 samples, 0.01%; +0.00%)</title><rect x="761.3" y="405" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="764.30" y="415.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (11 samples, 0.02%; -0.01%)</title><rect x="854.6" y="437" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="857.56" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (98 samples, 0.20%; 0.00%)</title><rect x="843.8" y="341" width="2.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="846.79" y="351.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (33 samples, 0.07%; +0.04%)</title><rect x="73.6" y="405" width="0.8" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="76.56" y="415.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (84 samples, 0.17%; -0.00%)</title><rect x="326.7" y="181" width="2.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="329.65" y="191.5" ></text>
</g>
<g >
<title>dht::tri_compare (38 samples, 0.08%; +0.03%)</title><rect x="1085.3" y="245" width="0.9" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="1088.29" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; -0.01%)</title><rect x="948.2" y="309" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="951.24" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::clear (6 samples, 0.01%; -0.00%)</title><rect x="612.9" y="437" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="615.87" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (14 samples, 0.03%; +0.00%)</title><rect x="1139.5" y="229" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1142.48" y="239.5" ></text>
</g>
<g >
<title>database::find_uuid (244 samples, 0.51%; -0.00%)</title><rect x="770.4" y="389" width="6.0" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="773.40" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (28 samples, 0.06%; 0.00%)</title><rect x="694.9" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.92" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (19 samples, 0.04%; +0.01%)</title><rect x="592.7" y="405" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="595.68" y="415.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (244 samples, 0.51%; +0.00%)</title><rect x="1034.0" y="197" width="6.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1037.04" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (21 samples, 0.04%; +0.00%)</title><rect x="1044.3" y="181" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1047.29" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (29 samples, 0.06%; -0.00%)</title><rect x="419.0" y="357" width="0.7" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="422.01" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (12 samples, 0.02%; -0.04%)</title><rect x="853.1" y="437" width="0.3" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="856.09" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (14 samples, 0.03%; -0.01%)</title><rect x="1045.1" y="197" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1048.09" y="207.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.01%)</title><rect x="823.3" y="261" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="826.32" y="271.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (168 samples, 0.35%; -0.01%)</title><rect x="35.5" y="469" width="4.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="38.49" y="479.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (12 samples, 0.02%; +0.00%)</title><rect x="902.2" y="293" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="905.24" y="303.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.01%; +0.01%)</title><rect x="806.5" y="165" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="809.49" y="175.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (262 samples, 0.54%; -0.00%)</title><rect x="697.9" y="485" width="6.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="700.93" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (5 samples, 0.01%; 0.00%)</title><rect x="18.7" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.73" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (6 samples, 0.01%; -0.01%)</title><rect x="572.4" y="293" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="575.40" y="303.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (8 samples, 0.02%; -0.01%)</title><rect x="773.7" y="309" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="776.68" y="319.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (23 samples, 0.05%; +0.02%)</title><rect x="281.9" y="405" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="284.90" y="415.5" ></text>
</g>
<g >
<title>query::result::result (34 samples, 0.07%; 0.00%)</title><rect x="597.5" y="421" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="600.48" y="431.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (24 samples, 0.05%; +0.00%)</title><rect x="1176.3" y="469" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1179.35" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (9 samples, 0.02%; +0.01%)</title><rect x="394.6" y="197" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="397.57" y="207.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (6 samples, 0.01%; 0.00%)</title><rect x="16.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.63" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (290 samples, 0.60%; 0.00%)</title><rect x="14.5" y="581" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.48" y="591.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (161 samples, 0.33%; +0.01%)</title><rect x="934.0" y="389" width="4.0" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="937.05" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (22 samples, 0.05%; -0.01%)</title><rect x="677.0" y="485" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="679.99" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.01%; +0.01%)</title><rect x="1063.7" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1066.71" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (70 samples, 0.15%; +0.02%)</title><rect x="563.6" y="309" width="1.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="566.57" y="319.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.02%; -0.02%)</title><rect x="95.4" y="437" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="98.38" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (7 samples, 0.01%; 0.00%)</title><rect x="18.0" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.98" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (22 samples, 0.05%; -0.01%)</title><rect x="648.3" y="485" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="651.27" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (80 samples, 0.17%; -0.02%)</title><rect x="754.0" y="325" width="1.9" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="756.96" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (11 samples, 0.02%; +0.01%)</title><rect x="664.0" y="437" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="667.05" y="447.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (83 samples, 0.17%; +0.02%)</title><rect x="603.2" y="389" width="2.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="606.18" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (29 samples, 0.06%; +0.06%)</title><rect x="972.7" y="373" width="0.7" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="975.68" y="383.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (5 samples, 0.01%; +0.01%)</title><rect x="1135.5" y="421" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1138.54" y="431.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (7 samples, 0.01%; -0.01%)</title><rect x="812.0" y="117" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="814.99" y="127.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.03%; 0.00%)</title><rect x="453.1" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="456.14" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; +0.02%)</title><rect x="70.9" y="389" width="0.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="73.89" y="399.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (196 samples, 0.41%; +0.01%)</title><rect x="1077.0" y="325" width="4.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1080.02" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (47 samples, 0.10%; -0.00%)</title><rect x="949.9" y="357" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="952.88" y="367.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (17 samples, 0.04%; +0.00%)</title><rect x="633.3" y="485" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="636.27" y="495.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (7 samples, 0.01%; +0.00%)</title><rect x="864.4" y="325" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="867.39" y="335.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (10,474 samples, 21.72%; 0.00%)</title><rect x="882.0" y="485" width="256.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.98" y="495.5" >seastar::concrete_execution_stage&lt;..</text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (31 samples, 0.06%; +0.00%)</title><rect x="15.7" y="277" width="0.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="18.65" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (35 samples, 0.07%; +0.01%)</title><rect x="1158.0" y="373" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1161.02" y="383.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (6 samples, 0.01%; 0.00%)</title><rect x="24.6" y="517" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.58" y="527.5" ></text>
</g>
<g >
<title>schema::column_at (68 samples, 0.14%; +0.02%)</title><rect x="207.3" y="101" width="1.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="210.31" y="111.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (5 samples, 0.01%; +0.01%)</title><rect x="328.8" y="181" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="331.83" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (6 samples, 0.01%; +0.00%)</title><rect x="213.0" y="133" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="216.04" y="143.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (8 samples, 0.02%; +0.01%)</title><rect x="961.4" y="341" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="964.37" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_bound_terms (5 samples, 0.01%; +0.01%)</title><rect x="730.8" y="453" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="733.84" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (14 samples, 0.03%; +0.00%)</title><rect x="486.8" y="325" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="489.85" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (11 samples, 0.02%; +0.02%)</title><rect x="1136.2" y="421" width="0.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1139.15" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (5 samples, 0.01%; +0.00%)</title><rect x="1101.6" y="341" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1104.61" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (96 samples, 0.20%; +0.01%)</title><rect x="238.8" y="213" width="2.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="241.82" y="223.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (27 samples, 0.06%; 0.00%)</title><rect x="1139.2" y="437" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.19" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (33 samples, 0.07%; +0.02%)</title><rect x="971.7" y="341" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="974.75" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (63 samples, 0.13%; -0.01%)</title><rect x="1152.1" y="437" width="1.6" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1155.13" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (17 samples, 0.04%; -0.01%)</title><rect x="668.7" y="485" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="671.72" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (12 samples, 0.02%; +0.02%)</title><rect x="650.7" y="485" width="0.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="653.67" y="495.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (196 samples, 0.41%; 0.00%)</title><rect x="365.0" y="213" width="4.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="367.96" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (204 samples, 0.42%; -0.03%)</title><rect x="1092.2" y="277" width="5.0" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="1095.24" y="287.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (8 samples, 0.02%; 0.00%)</title><rect x="21.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.13" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (30 samples, 0.06%; +0.05%)</title><rect x="411.1" y="277" width="0.8" height="15.0" fill="rgb(255,137,137)" rx="2" ry="2" />
<text  x="414.13" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (17 samples, 0.04%; 0.00%)</title><rect x="421.9" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="424.94" y="415.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (5 samples, 0.01%; +0.00%)</title><rect x="1092.1" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1095.07" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (6 samples, 0.01%; -0.01%)</title><rect x="415.6" y="245" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="418.63" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (68 samples, 0.14%; -0.02%)</title><rect x="1167.1" y="485" width="1.7" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1170.15" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (27 samples, 0.06%; -0.01%)</title><rect x="415.1" y="261" width="0.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="418.14" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (39 samples, 0.08%; 0.00%)</title><rect x="1138.2" y="421" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.23" y="431.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (6 samples, 0.01%; -0.02%)</title><rect x="79.6" y="453" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="82.63" y="463.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.09%; 0.00%)</title><rect x="1188.9" y="629" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1191.90" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; +0.00%)</title><rect x="425.2" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="428.22" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (98 samples, 0.20%; 0.00%)</title><rect x="820.9" y="261" width="2.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="823.92" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (11 samples, 0.02%; +0.01%)</title><rect x="654.8" y="389" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="657.80" y="399.5" ></text>
</g>
<g >
<title>operator delete (37 samples, 0.08%; +0.01%)</title><rect x="591.8" y="405" width="0.9" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="594.78" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (12 samples, 0.02%; +0.01%)</title><rect x="848.0" y="405" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="851.00" y="415.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (54 samples, 0.11%; -0.03%)</title><rect x="291.5" y="277" width="1.3" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="294.52" y="287.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (18 samples, 0.04%; +0.00%)</title><rect x="759.0" y="261" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="762.05" y="271.5" ></text>
</g>
<g >
<title>row::~row (6 samples, 0.01%; +0.00%)</title><rect x="407.0" y="261" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="410.04" y="271.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (7 samples, 0.01%; +0.01%)</title><rect x="822.8" y="213" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="825.75" y="223.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (7 samples, 0.01%; +0.00%)</title><rect x="695.3" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="698.27" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (55 samples, 0.11%; -0.02%)</title><rect x="221.6" y="165" width="1.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="224.57" y="175.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (5 samples, 0.01%; 0.00%)</title><rect x="695.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.83" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (447 samples, 0.93%; -0.00%)</title><rect x="1031.0" y="229" width="10.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1033.95" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.02%; -0.02%)</title><rect x="630.3" y="373" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="633.26" y="383.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (9 samples, 0.02%; +0.00%)</title><rect x="983.7" y="341" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="986.69" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (13 samples, 0.03%; -0.00%)</title><rect x="316.3" y="213" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="319.30" y="223.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (7 samples, 0.01%; +0.01%)</title><rect x="866.9" y="421" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="869.94" y="431.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (7 samples, 0.01%; 0.00%)</title><rect x="737.1" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="740.08" y="319.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (6 samples, 0.01%; 0.00%)</title><rect x="1057.4" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1060.45" y="271.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (5 samples, 0.01%; 0.00%)</title><rect x="14.7" y="501" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.67" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; -0.02%)</title><rect x="1048.7" y="261" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1051.67" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (23 samples, 0.05%; +0.03%)</title><rect x="257.3" y="325" width="0.5" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="260.27" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; 0.00%)</title><rect x="1033.1" y="181" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1036.11" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (22 samples, 0.05%; +0.01%)</title><rect x="1147.7" y="485" width="0.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1150.68" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (76 samples, 0.16%; +0.00%)</title><rect x="262.2" y="325" width="1.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="265.19" y="335.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (159 samples, 0.33%; -0.00%)</title><rect x="234.3" y="213" width="3.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="237.34" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (37 samples, 0.08%; -0.00%)</title><rect x="840.9" y="309" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="843.91" y="319.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (149 samples, 0.31%; +0.03%)</title><rect x="861.8" y="421" width="3.7" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="864.85" y="431.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (7 samples, 0.01%; -0.02%)</title><rect x="857.3" y="341" width="0.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="860.27" y="351.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (5 samples, 0.01%; 0.00%)</title><rect x="21.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.84" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (12 samples, 0.02%; +0.01%)</title><rect x="687.3" y="485" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="690.34" y="495.5" ></text>
</g>
<g >
<title>query::result::builder::builder (243 samples, 0.50%; -0.00%)</title><rect x="600.4" y="421" width="6.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="603.42" y="431.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (22 samples, 0.05%; -0.00%)</title><rect x="938.0" y="389" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="940.99" y="399.5" ></text>
</g>
<g >
<title>database::find_schema (72 samples, 0.15%; -0.00%)</title><rect x="837.8" y="357" width="1.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="840.78" y="367.5" ></text>
</g>
<g >
<title>compound_type&lt; (67 samples, 0.14%; -0.01%)</title><rect x="919.4" y="373" width="1.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="922.44" y="383.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (32 samples, 0.07%; +0.00%)</title><rect x="331.3" y="181" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="334.25" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (5 samples, 0.01%; -0.00%)</title><rect x="45.2" y="485" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="48.16" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (62 samples, 0.13%; -0.01%)</title><rect x="654.4" y="421" width="1.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="657.36" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%; 0.00%)</title><rect x="1138.1" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.09" y="463.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (54 samples, 0.11%; +0.00%)</title><rect x="1175.7" y="517" width="1.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1178.71" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (149 samples, 0.31%; -0.02%)</title><rect x="855.2" y="405" width="3.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="858.20" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (13 samples, 0.03%; -0.00%)</title><rect x="254.8" y="277" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="257.80" y="287.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (11 samples, 0.02%; +0.01%)</title><rect x="237.3" y="165" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="240.33" y="175.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (89 samples, 0.18%; +0.00%)</title><rect x="392.8" y="229" width="2.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="395.83" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (7 samples, 0.01%; -0.00%)</title><rect x="823.5" y="261" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="826.46" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (6 samples, 0.01%; 0.00%)</title><rect x="18.0" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.00" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (10 samples, 0.02%; +0.01%)</title><rect x="278.5" y="357" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="281.50" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="667.1" y="453" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="670.08" y="463.5" ></text>
</g>
<g >
<title>operator new (30 samples, 0.06%; +0.00%)</title><rect x="522.2" y="325" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="525.25" y="335.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (11 samples, 0.02%; -0.01%)</title><rect x="329.0" y="181" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="331.95" y="191.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (11 samples, 0.02%; +0.00%)</title><rect x="236.7" y="165" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="239.74" y="175.5" ></text>
</g>
<g >
<title>database::find_column_family (60 samples, 0.12%; 0.00%)</title><rect x="768.9" y="373" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="771.93" y="383.5" ></text>
</g>
<g >
<title>range_tombstone_stream::empty (6 samples, 0.01%; +0.00%)</title><rect x="226.4" y="229" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="229.42" y="239.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (14 samples, 0.03%; +0.01%)</title><rect x="764.3" y="357" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="767.31" y="367.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (11 samples, 0.02%; -0.01%)</title><rect x="1110.2" y="389" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1113.24" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (91 samples, 0.19%; -0.03%)</title><rect x="482.4" y="197" width="2.2" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="485.37" y="207.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (8 samples, 0.02%; +0.00%)</title><rect x="1142.3" y="501" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1145.29" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (27 samples, 0.06%; 0.00%)</title><rect x="1139.2" y="453" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.19" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (70 samples, 0.15%; +0.03%)</title><rect x="1063.9" y="309" width="1.7" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="1066.88" y="319.5" ></text>
</g>
<g >
<title>database::find_schema (248 samples, 0.51%; -0.01%)</title><rect x="837.5" y="373" width="6.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="840.48" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (56 samples, 0.12%; +0.01%)</title><rect x="838.1" y="309" width="1.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="841.12" y="319.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (9 samples, 0.02%; -0.00%)</title><rect x="78.3" y="453" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="81.33" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (18 samples, 0.04%; +0.00%)</title><rect x="1106.7" y="357" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1109.72" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (60 samples, 0.12%; 0.00%)</title><rect x="812.8" y="133" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="815.77" y="143.5" ></text>
</g>
<g >
<title>free (123 samples, 0.26%; +0.01%)</title><rect x="399.0" y="181" width="3.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="401.99" y="191.5" ></text>
</g>
<g >
<title>table::as_mutation_source (103 samples, 0.21%; +0.00%)</title><rect x="629.5" y="437" width="2.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="632.53" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (13 samples, 0.03%; 0.00%)</title><rect x="21.7" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.74" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator_at (5 samples, 0.01%; +0.01%)</title><rect x="843.4" y="325" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="846.38" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (13 samples, 0.03%; 0.00%)</title><rect x="21.7" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.74" y="511.5" ></text>
</g>
<g >
<title>database::find_schema (73 samples, 0.15%; +0.01%)</title><rect x="768.6" y="389" width="1.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="771.61" y="399.5" ></text>
</g>
<g >
<title>compound_type&lt; (91 samples, 0.19%; -0.01%)</title><rect x="935.3" y="357" width="2.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="938.27" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (5 samples, 0.01%; 0.00%)</title><rect x="19.1" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.15" y="335.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (13 samples, 0.03%; +0.01%)</title><rect x="226.8" y="229" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="229.83" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (11 samples, 0.02%; -0.02%)</title><rect x="1149.3" y="453" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1152.34" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (119 samples, 0.25%; -0.06%)</title><rect x="189.8" y="37" width="2.9" height="15.0" fill="rgb(125,125,255)" rx="2" ry="2" />
<text  x="192.79" y="47.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (245 samples, 0.51%; -0.01%)</title><rect x="507.3" y="229" width="6.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="510.30" y="239.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (44 samples, 0.09%; -0.01%)</title><rect x="758.0" y="261" width="1.0" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="760.97" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (142 samples, 0.29%; +0.03%)</title><rect x="640.6" y="485" width="3.5" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="643.59" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (1,914 samples, 3.97%; -0.03%)</title><rect x="1010.8" y="293" width="46.8" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="1013.77" y="303.5" >serv..</text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.01%; +0.00%)</title><rect x="290.1" y="309" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="293.13" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="445.4" y="277" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="448.36" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (63 samples, 0.13%; -0.00%)</title><rect x="819.4" y="261" width="1.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="822.38" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (26 samples, 0.05%; +0.04%)</title><rect x="910.0" y="309" width="0.7" height="15.0" fill="rgb(255,151,151)" rx="2" ry="2" />
<text  x="913.05" y="319.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (6 samples, 0.01%; +0.00%)</title><rect x="916.6" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="919.63" y="383.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (31 samples, 0.06%; +0.01%)</title><rect x="857.9" y="357" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="860.89" y="367.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (113 samples, 0.23%; +0.01%)</title><rect x="273.5" y="293" width="2.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="276.51" y="303.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (28 samples, 0.06%; +0.02%)</title><rect x="1167.4" y="469" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1170.39" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.01%; +0.01%)</title><rect x="663.0" y="453" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="666.00" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (20 samples, 0.04%; +0.02%)</title><rect x="1073.1" y="341" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1076.11" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (77 samples, 0.16%; -0.01%)</title><rect x="994.4" y="309" width="1.9" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="997.43" y="319.5" ></text>
</g>
<g >
<title>tombstone::apply (11 samples, 0.02%; -0.01%)</title><rect x="388.6" y="197" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="391.57" y="207.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (25 samples, 0.05%; -0.02%)</title><rect x="53.4" y="469" width="0.6" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="56.35" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (15 samples, 0.03%; -0.01%)</title><rect x="986.1" y="357" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="989.08" y="367.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (21 samples, 0.04%; +0.01%)</title><rect x="773.4" y="325" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="776.36" y="335.5" ></text>
</g>
<g >
<title>__tls_init (37 samples, 0.08%; +0.01%)</title><rect x="487.9" y="309" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="490.90" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (34 samples, 0.07%; -0.00%)</title><rect x="808.1" y="197" width="0.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="811.15" y="207.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (285 samples, 0.59%; -0.00%)</title><rect x="637.2" y="501" width="6.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="640.16" y="511.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (35 samples, 0.07%; +0.01%)</title><rect x="630.0" y="405" width="0.9" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="633.02" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (6 samples, 0.01%; -0.02%)</title><rect x="669.2" y="485" width="0.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="672.16" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (12 samples, 0.02%; +0.01%)</title><rect x="1169.6" y="437" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1172.65" y="447.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (159 samples, 0.33%; -0.00%)</title><rect x="814.5" y="165" width="3.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="817.51" y="175.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_expression (8 samples, 0.02%; 0.00%)</title><rect x="20.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.98" y="415.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (60 samples, 0.12%; +0.02%)</title><rect x="223.9" y="229" width="1.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="226.92" y="239.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (19 samples, 0.04%; +0.00%)</title><rect x="122.2" y="309" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="125.25" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (9 samples, 0.02%; 0.00%)</title><rect x="220.3" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="223.25" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (58 samples, 0.12%; -0.02%)</title><rect x="274.2" y="261" width="1.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="277.22" y="271.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (6 samples, 0.01%; 0.00%)</title><rect x="16.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.63" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (19 samples, 0.04%; -0.00%)</title><rect x="137.5" y="245" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="140.54" y="255.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (61 samples, 0.13%; +0.01%)</title><rect x="796.0" y="293" width="1.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="799.04" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (107 samples, 0.22%; -0.01%)</title><rect x="1004.3" y="277" width="2.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1007.31" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (5 samples, 0.01%; +0.00%)</title><rect x="752.2" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="755.25" y="367.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (139 samples, 0.29%; -0.00%)</title><rect x="725.9" y="469" width="3.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="728.95" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::stats (78 samples, 0.16%; +0.04%)</title><rect x="488.9" y="309" width="1.9" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="491.88" y="319.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (36 samples, 0.07%; +0.01%)</title><rect x="594.2" y="389" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="597.20" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (7 samples, 0.01%; -0.01%)</title><rect x="421.2" y="405" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="424.16" y="415.5" ></text>
</g>
<g >
<title>db::schema_tables::do_merge_schema (5 samples, 0.01%; 0.00%)</title><rect x="47.3" y="501" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.26" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (58 samples, 0.12%; +0.00%)</title><rect x="838.1" y="325" width="1.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="841.07" y="335.5" ></text>
</g>
<g >
<title>operator new (33 samples, 0.07%; 0.00%)</title><rect x="946.5" y="373" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="949.50" y="383.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (5 samples, 0.01%; -0.00%)</title><rect x="754.7" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="757.72" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (11 samples, 0.02%; -0.02%)</title><rect x="784.0" y="357" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="786.98" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (10 samples, 0.02%; -0.01%)</title><rect x="199.3" y="85" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="202.29" y="95.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (7 samples, 0.01%; +0.01%)</title><rect x="920.4" y="341" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="923.42" y="351.5" ></text>
</g>
<g >
<title>operator delete (32 samples, 0.07%; +0.02%)</title><rect x="590.4" y="405" width="0.8" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="593.43" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; -0.01%)</title><rect x="943.4" y="405" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="946.44" y="415.5" ></text>
</g>
<g >
<title>database::query (174 samples, 0.36%; +0.01%)</title><rect x="43.0" y="501" width="4.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="45.95" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (5 samples, 0.01%; 0.00%)</title><rect x="416.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="419.05" y="351.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (32 samples, 0.07%; +0.00%)</title><rect x="1138.3" y="277" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1141.31" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (23 samples, 0.05%; +0.02%)</title><rect x="877.1" y="485" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="880.14" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (15 samples, 0.03%; +0.00%)</title><rect x="22.4" y="517" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="25.40" y="527.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (10 samples, 0.02%; +0.00%)</title><rect x="627.4" y="421" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="630.35" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (4,683 samples, 9.71%; +0.01%)</title><rect x="425.4" y="373" width="114.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="428.39" y="383.5" >std::_Function..</text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (14 samples, 0.03%; -0.00%)</title><rect x="50.9" y="485" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="53.91" y="495.5" ></text>
</g>
<g >
<title>dht::maximum_token (5 samples, 0.01%; +0.00%)</title><rect x="437.4" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="440.41" y="287.5" ></text>
</g>
<g >
<title>query_state::query_state (311 samples, 0.64%; -0.01%)</title><rect x="598.9" y="437" width="7.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="601.90" y="447.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (6 samples, 0.01%; -0.00%)</title><rect x="1072.4" y="341" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1075.45" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.01%; -0.00%)</title><rect x="1156.5" y="453" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1159.51" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; -0.00%)</title><rect x="729.1" y="437" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="732.05" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (13 samples, 0.03%; +0.01%)</title><rect x="370.7" y="197" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="373.71" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (32 samples, 0.07%; -0.01%)</title><rect x="72.5" y="389" width="0.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="75.51" y="399.5" ></text>
</g>
<g >
<title>database::has_keyspace (105 samples, 0.22%; -0.01%)</title><rect x="843.7" y="357" width="2.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="846.70" y="367.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (39 samples, 0.08%; 0.00%)</title><rect x="1138.2" y="469" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.23" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (17 samples, 0.04%; -0.00%)</title><rect x="1149.2" y="469" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1152.19" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (5 samples, 0.01%; +0.00%)</title><rect x="692.8" y="421" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="695.82" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (14 samples, 0.03%; +0.01%)</title><rect x="412.7" y="277" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="415.72" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (5 samples, 0.01%; +0.01%)</title><rect x="46.9" y="485" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="49.92" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (15 samples, 0.03%; -0.00%)</title><rect x="72.8" y="373" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="75.80" y="383.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (15 samples, 0.03%; +0.01%)</title><rect x="11.7" y="581" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="14.71" y="591.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (47 samples, 0.10%; +0.01%)</title><rect x="814.7" y="133" width="1.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="817.71" y="143.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (16 samples, 0.03%; +0.01%)</title><rect x="369.3" y="149" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="372.27" y="159.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (7 samples, 0.01%; -0.00%)</title><rect x="638.3" y="485" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="641.31" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (351 samples, 0.73%; -0.01%)</title><rect x="34.3" y="485" width="8.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="37.27" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.01%)</title><rect x="803.7" y="213" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="806.67" y="223.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (68 samples, 0.14%; +0.00%)</title><rect x="505.5" y="229" width="1.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="508.54" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (74 samples, 0.15%; -0.02%)</title><rect x="961.9" y="389" width="1.8" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="964.94" y="399.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (12,825 samples, 26.59%; +0.01%)</title><rect x="107.9" y="421" width="313.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="110.93" y="431.5" >query::consume_page&lt;</text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (18 samples, 0.04%; -0.01%)</title><rect x="676.2" y="469" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="679.16" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (6 samples, 0.01%; +0.00%)</title><rect x="547.7" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="550.74" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (10 samples, 0.02%; -0.00%)</title><rect x="571.9" y="277" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="574.87" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (61 samples, 0.13%; -0.03%)</title><rect x="149.2" y="197" width="1.5" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="152.18" y="207.5" ></text>
</g>
<g >
<title>sstring_hash::operator (11 samples, 0.02%; 0.00%)</title><rect x="845.8" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="848.83" y="319.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (10 samples, 0.02%; +0.01%)</title><rect x="277.8" y="325" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="280.79" y="335.5" ></text>
</g>
<g >
<title>__tls_init (16 samples, 0.03%; -0.01%)</title><rect x="142.8" y="245" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="145.80" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.01%)</title><rect x="665.2" y="469" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="668.22" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (10 samples, 0.02%; 0.00%)</title><rect x="1174.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1177.88" y="383.5" ></text>
</g>
<g >
<title>__tls_init (20 samples, 0.04%; +0.01%)</title><rect x="532.3" y="293" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="535.26" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (6 samples, 0.01%; +0.01%)</title><rect x="209.0" y="101" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="211.97" y="111.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (66 samples, 0.14%; -0.01%)</title><rect x="393.2" y="213" width="1.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="396.17" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (21 samples, 0.04%; +0.01%)</title><rect x="864.2" y="357" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="867.17" y="367.5" ></text>
</g>
<g >
<title>operator delete (42 samples, 0.09%; -0.01%)</title><rect x="34.4" y="469" width="1.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="37.44" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (14 samples, 0.03%; 0.00%)</title><rect x="690.7" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="693.67" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (2,376 samples, 4.93%; +0.01%)</title><rect x="1001.2" y="341" width="58.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1004.15" y="351.5" >servic..</text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (48 samples, 0.10%; -0.01%)</title><rect x="614.8" y="437" width="1.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="617.75" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (12 samples, 0.02%; +0.00%)</title><rect x="705.8" y="469" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="708.76" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (16 samples, 0.03%; 0.00%)</title><rect x="754.4" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="757.45" y="303.5" ></text>
</g>
<g >
<title>database::find_column_family (64 samples, 0.13%; 0.00%)</title><rect x="837.9" y="341" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="840.92" y="351.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (502 samples, 1.04%; +0.00%)</title><rect x="707.4" y="501" width="12.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="710.43" y="511.5" ></text>
</g>
<g >
<title>locator::token_metadata::is_any_node_being_replaced (5 samples, 0.01%; +0.00%)</title><rect x="1097.6" y="293" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1100.60" y="303.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (36 samples, 0.07%; 0.00%)</title><rect x="828.7" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="831.70" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (7 samples, 0.01%; +0.00%)</title><rect x="845.2" y="277" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="848.19" y="287.5" ></text>
</g>
<g >
<title>compound_type&lt; (176 samples, 0.36%; +0.04%)</title><rect x="481.0" y="213" width="4.3" height="15.0" fill="rgb(255,151,151)" rx="2" ry="2" />
<text  x="483.98" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (14 samples, 0.03%; -0.02%)</title><rect x="716.0" y="437" width="0.4" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="719.04" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (50 samples, 0.10%; +0.01%)</title><rect x="654.5" y="405" width="1.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="657.48" y="415.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (69 samples, 0.14%; +0.04%)</title><rect x="459.0" y="325" width="1.7" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="462.01" y="335.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (19 samples, 0.04%; +0.00%)</title><rect x="1119.2" y="357" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1122.20" y="367.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (45 samples, 0.09%; +0.01%)</title><rect x="314.4" y="181" width="1.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="317.44" y="191.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; +0.00%)</title><rect x="98.0" y="405" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="100.95" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (17 samples, 0.04%; -0.01%)</title><rect x="389.4" y="197" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="392.43" y="207.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (6 samples, 0.01%; -0.03%)</title><rect x="453.8" y="325" width="0.2" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="456.85" y="335.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (44 samples, 0.09%; +0.00%)</title><rect x="738.1" y="293" width="1.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="741.08" y="303.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (15 samples, 0.03%; +0.00%)</title><rect x="864.3" y="341" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="867.32" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (17 samples, 0.04%; +0.01%)</title><rect x="265.4" y="341" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="268.39" y="351.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (30 samples, 0.06%; -0.01%)</title><rect x="752.1" y="373" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="755.05" y="383.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (56 samples, 0.12%; +0.01%)</title><rect x="1015.3" y="277" width="1.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1018.27" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (46 samples, 0.10%; +0.00%)</title><rect x="1159.0" y="421" width="1.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1162.03" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (44 samples, 0.09%; +0.03%)</title><rect x="879.0" y="501" width="1.1" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="882.02" y="511.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (6,913 samples, 14.33%; -0.01%)</title><rect x="111.7" y="389" width="169.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="114.70" y="399.5" >merging_reader&lt;mutati..</text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (18 samples, 0.04%; +0.01%)</title><rect x="581.4" y="341" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="584.38" y="351.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (31 samples, 0.06%; 0.00%)</title><rect x="881.2" y="485" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.23" y="495.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (19 samples, 0.04%; +0.01%)</title><rect x="1010.3" y="293" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1013.30" y="303.5" ></text>
</g>
<g >
<title>operator delete (46 samples, 0.10%; +0.00%)</title><rect x="696.5" y="485" width="1.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="699.47" y="495.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (5 samples, 0.01%; +0.01%)</title><rect x="525.0" y="341" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="527.99" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (73 samples, 0.15%; -0.00%)</title><rect x="913.9" y="357" width="1.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="916.89" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (105 samples, 0.22%; -0.02%)</title><rect x="220.8" y="181" width="2.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="223.77" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (9 samples, 0.02%; +0.00%)</title><rect x="289.8" y="293" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="292.78" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (14 samples, 0.03%; +0.01%)</title><rect x="781.1" y="341" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="784.07" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (47 samples, 0.10%; -0.00%)</title><rect x="17.9" y="325" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="20.85" y="335.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (53 samples, 0.11%; +0.00%)</title><rect x="1098.2" y="309" width="1.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1101.16" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (15 samples, 0.03%; +0.00%)</title><rect x="661.8" y="437" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="664.80" y="447.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (27 samples, 0.06%; 0.00%)</title><rect x="1139.2" y="485" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.19" y="495.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (269 samples, 0.56%; +0.00%)</title><rect x="14.8" y="501" width="6.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="17.80" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (5 samples, 0.01%; +0.00%)</title><rect x="980.0" y="309" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="982.99" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (11 samples, 0.02%; +0.01%)</title><rect x="131.8" y="229" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="134.84" y="239.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (531 samples, 1.10%; 0.00%)</title><rect x="1084.6" y="293" width="13.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1087.58" y="303.5" ></text>
</g>
<g >
<title>query::result::builder::builder (5 samples, 0.01%; +0.00%)</title><rect x="598.4" y="437" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="601.41" y="447.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (6 samples, 0.01%; -0.00%)</title><rect x="695.1" y="261" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="698.10" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (8 samples, 0.02%; +0.01%)</title><rect x="531.6" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="534.64" y="319.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (8 samples, 0.02%; -0.01%)</title><rect x="1045.8" y="245" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1048.75" y="255.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (748 samples, 1.55%; +0.00%)</title><rect x="743.6" y="421" width="18.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="746.56" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (7 samples, 0.01%; +0.00%)</title><rect x="605.0" y="373" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="608.04" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (14 samples, 0.03%; +0.02%)</title><rect x="66.4" y="437" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="69.37" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6 samples, 0.01%; 0.00%)</title><rect x="784.0" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="787.00" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (9 samples, 0.02%; -0.01%)</title><rect x="931.9" y="389" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="934.94" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (5 samples, 0.01%; -0.01%)</title><rect x="542.1" y="389" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="545.12" y="399.5" ></text>
</g>
<g >
<title>operator new (52 samples, 0.11%; -0.00%)</title><rect x="540.1" y="405" width="1.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="543.06" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (96 samples, 0.20%; +0.01%)</title><rect x="780.3" y="373" width="2.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="783.31" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (94 samples, 0.19%; -0.00%)</title><rect x="671.1" y="469" width="2.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="674.12" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (6 samples, 0.01%; +0.00%)</title><rect x="858.8" y="405" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="861.84" y="415.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%; +0.01%)</title><rect x="637.4" y="485" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="640.38" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (15 samples, 0.03%; +0.00%)</title><rect x="915.3" y="309" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="918.31" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (10 samples, 0.02%; +0.01%)</title><rect x="1114.5" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1117.48" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (13 samples, 0.03%; +0.01%)</title><rect x="41.2" y="437" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="44.22" y="447.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (273 samples, 0.57%; 0.00%)</title><rect x="14.8" y="517" width="6.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.80" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (5 samples, 0.01%; 0.00%)</title><rect x="21.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.84" y="383.5" ></text>
</g>
<g >
<title>database::find_schema (334 samples, 0.69%; +0.01%)</title><rect x="768.2" y="405" width="8.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="771.20" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%; -0.00%)</title><rect x="256.5" y="309" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="259.53" y="319.5" ></text>
</g>
<g >
<title>operator delete (33 samples, 0.07%; +0.01%)</title><rect x="576.6" y="341" width="0.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="579.59" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (12 samples, 0.02%; +0.01%)</title><rect x="1108.7" y="373" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1111.70" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (30 samples, 0.06%; -0.00%)</title><rect x="668.0" y="485" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="670.99" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (11 samples, 0.02%; -0.00%)</title><rect x="829.3" y="293" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="832.31" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (39 samples, 0.08%; +0.01%)</title><rect x="701.9" y="453" width="1.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="704.92" y="463.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (1,099 samples, 2.28%; +0.00%)</title><rect x="798.0" y="293" width="26.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="801.00" y="303.5" >s..</text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (10 samples, 0.02%; +0.01%)</title><rect x="560.0" y="293" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="562.95" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (35 samples, 0.07%; +0.02%)</title><rect x="1036.3" y="149" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1039.33" y="159.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (744 samples, 1.54%; -0.03%)</title><rect x="556.5" y="373" width="18.2" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="559.53" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; +0.01%)</title><rect x="618.9" y="389" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="621.91" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (11 samples, 0.02%; +0.00%)</title><rect x="706.1" y="469" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="709.06" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (26 samples, 0.05%; +0.01%)</title><rect x="960.7" y="325" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="963.66" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (10 samples, 0.02%; +0.01%)</title><rect x="1146.1" y="485" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1149.13" y="495.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.02%; +0.01%)</title><rect x="107.7" y="421" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="110.71" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (12 samples, 0.02%; +0.01%)</title><rect x="759.9" y="405" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="762.88" y="415.5" ></text>
</g>
<g >
<title>seastar::gate::enter (5 samples, 0.01%; +0.01%)</title><rect x="613.0" y="437" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="616.02" y="447.5" ></text>
</g>
<g >
<title>validation::validate_column_family (5 samples, 0.01%; 0.00%)</title><rect x="20.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.94" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (29 samples, 0.06%; +0.04%)</title><rect x="241.2" y="229" width="0.7" height="15.0" fill="rgb(255,151,151)" rx="2" ry="2" />
<text  x="244.17" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; -0.03%)</title><rect x="1052.1" y="245" width="0.2" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="1055.14" y="255.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (5 samples, 0.01%; 0.00%)</title><rect x="18.7" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.73" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (19 samples, 0.04%; +0.00%)</title><rect x="1037.9" y="133" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1040.90" y="143.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (26 samples, 0.05%; +0.03%)</title><rect x="294.8" y="261" width="0.7" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="297.85" y="271.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (5 samples, 0.01%; -0.00%)</title><rect x="845.9" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="848.92" y="287.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (283 samples, 0.59%; +0.00%)</title><rect x="752.8" y="373" width="6.9" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="755.78" y="383.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (94 samples, 0.19%; -0.00%)</title><rect x="534.1" y="293" width="2.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="537.07" y="303.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (559 samples, 1.16%; -0.00%)</title><rect x="1084.4" y="309" width="13.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1087.36" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (7 samples, 0.01%; +0.01%)</title><rect x="435.7" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="438.74" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (13 samples, 0.03%; -0.01%)</title><rect x="960.2" y="325" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="963.25" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (8 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.55" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (137 samples, 0.28%; -0.00%)</title><rect x="1003.9" y="309" width="3.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1006.87" y="319.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (75 samples, 0.16%; 0.00%)</title><rect x="1119.7" y="405" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.74" y="415.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (7 samples, 0.01%; +0.01%)</title><rect x="608.9" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="611.91" y="415.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (9 samples, 0.02%; +0.01%)</title><rect x="681.1" y="437" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="684.10" y="447.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (8 samples, 0.02%; -0.01%)</title><rect x="138.8" y="261" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="141.83" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (25 samples, 0.05%; +0.01%)</title><rect x="1065.0" y="293" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1067.98" y="303.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (18 samples, 0.04%; +0.01%)</title><rect x="210.6" y="149" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="213.59" y="159.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (451 samples, 0.94%; +0.01%)</title><rect x="575.1" y="389" width="11.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="578.14" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (6 samples, 0.01%; 0.00%)</title><rect x="312.8" y="181" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="315.78" y="191.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (58 samples, 0.12%; +0.06%)</title><rect x="168.3" y="133" width="1.4" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="171.29" y="143.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (29 samples, 0.06%; -0.01%)</title><rect x="152.6" y="213" width="0.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="155.58" y="223.5" ></text>
</g>
<g >
<title>operator new (76 samples, 0.16%; +0.00%)</title><rect x="1004.7" y="261" width="1.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1007.70" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (17 samples, 0.04%; +0.00%)</title><rect x="222.5" y="133" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="225.50" y="143.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (7 samples, 0.01%; +0.01%)</title><rect x="608.3" y="405" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="611.34" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (39 samples, 0.08%; +0.02%)</title><rect x="995.4" y="293" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="998.36" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (7 samples, 0.01%; +0.01%)</title><rect x="697.8" y="485" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="700.76" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (7 samples, 0.01%; -0.01%)</title><rect x="1135.7" y="421" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1138.66" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (21 samples, 0.04%; +0.00%)</title><rect x="695.0" y="341" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="698.00" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (288 samples, 0.60%; -0.08%)</title><rect x="396.7" y="213" width="7.0" height="15.0" fill="rgb(93,93,255)" rx="2" ry="2" />
<text  x="399.67" y="223.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (8 samples, 0.02%; +0.00%)</title><rect x="157.0" y="213" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="159.99" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (15 samples, 0.03%; -0.00%)</title><rect x="649.0" y="485" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="652.00" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; +0.00%)</title><rect x="939.8" y="357" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="942.77" y="367.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (6 samples, 0.01%; +0.00%)</title><rect x="185.7" y="85" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="188.73" y="95.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (133 samples, 0.28%; -0.02%)</title><rect x="487.5" y="325" width="3.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="490.53" y="335.5" ></text>
</g>
<g >
<title>operator new (26 samples, 0.05%; -0.00%)</title><rect x="779.7" y="373" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="782.67" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (5 samples, 0.01%; +0.01%)</title><rect x="1007.2" y="309" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1010.22" y="319.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (8 samples, 0.02%; -0.02%)</title><rect x="757.8" y="261" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="760.78" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (13 samples, 0.03%; +0.01%)</title><rect x="573.0" y="309" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="576.04" y="319.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (8 samples, 0.02%; +0.00%)</title><rect x="1037.2" y="149" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1040.19" y="159.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (283 samples, 0.59%; 0.00%)</title><rect x="14.6" y="565" width="7.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.65" y="575.5" ></text>
</g>
<g >
<title>db::block_for (7 samples, 0.01%; +0.01%)</title><rect x="1072.1" y="325" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1075.08" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (7 samples, 0.01%; -0.00%)</title><rect x="536.2" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="539.20" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (142 samples, 0.29%; -0.04%)</title><rect x="1026.7" y="229" width="3.5" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="1029.72" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.02%; -0.02%)</title><rect x="802.7" y="229" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="805.69" y="239.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (488 samples, 1.01%; -0.01%)</title><rect x="474.4" y="293" width="11.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="477.40" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (42 samples, 0.09%; 0.00%)</title><rect x="944.5" y="389" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="947.52" y="399.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (20 samples, 0.04%; 0.00%)</title><rect x="1033.2" y="181" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1036.23" y="191.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (234 samples, 0.49%; +0.00%)</title><rect x="948.4" y="421" width="5.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="951.43" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.08%; +0.00%)</title><rect x="1138.3" y="389" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1141.26" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (43 samples, 0.09%; +0.02%)</title><rect x="100.8" y="437" width="1.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="103.79" y="447.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (5 samples, 0.01%; -0.05%)</title><rect x="76.5" y="453" width="0.2" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="79.55" y="463.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (362 samples, 0.75%; -0.01%)</title><rect x="306.7" y="197" width="8.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="309.69" y="207.5" ></text>
</g>
<g >
<title>row::compact_and_expire (7 samples, 0.01%; -0.00%)</title><rect x="695.3" y="293" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="698.27" y="303.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (6 samples, 0.01%; +0.00%)</title><rect x="819.1" y="261" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="822.13" y="271.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (468 samples, 0.97%; +0.01%)</title><rect x="266.9" y="341" width="11.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="269.91" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (31 samples, 0.06%; +0.00%)</title><rect x="704.5" y="485" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="707.54" y="495.5" ></text>
</g>
<g >
<title>operator delete (58 samples, 0.12%; +0.04%)</title><rect x="568.8" y="277" width="1.4" height="15.0" fill="rgb(255,151,151)" rx="2" ry="2" />
<text  x="571.76" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (13 samples, 0.03%; 0.00%)</title><rect x="21.7" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.74" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (6 samples, 0.01%; +0.01%)</title><rect x="959.2" y="389" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="962.20" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (14 samples, 0.03%; -0.00%)</title><rect x="700.9" y="453" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="703.94" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (8 samples, 0.02%; -0.01%)</title><rect x="913.1" y="357" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="916.13" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (21 samples, 0.04%; 0.00%)</title><rect x="20.2" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.20" y="431.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (31 samples, 0.06%; +0.03%)</title><rect x="283.1" y="389" width="0.7" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="286.05" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (17 samples, 0.04%; +0.00%)</title><rect x="1102.5" y="341" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1105.49" y="351.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (162 samples, 0.34%; -0.01%)</title><rect x="188.9" y="69" width="4.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="191.89" y="79.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (17 samples, 0.04%; 0.00%)</title><rect x="695.0" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.02" y="319.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (51 samples, 0.11%; -0.00%)</title><rect x="276.5" y="309" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="279.50" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (21 samples, 0.04%; -0.01%)</title><rect x="313.0" y="181" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="315.98" y="191.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (42 samples, 0.09%; -0.00%)</title><rect x="750.9" y="373" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="753.95" y="383.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (73 samples, 0.15%; 0.00%)</title><rect x="1151.9" y="453" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1154.91" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (10 samples, 0.02%; -0.00%)</title><rect x="1121.3" y="389" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1124.33" y="399.5" ></text>
</g>
<g >
<title>operator new (60 samples, 0.12%; +0.01%)</title><rect x="439.7" y="245" width="1.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="442.66" y="255.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (15 samples, 0.03%; +0.00%)</title><rect x="708.9" y="469" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="711.87" y="479.5" ></text>
</g>
<g >
<title>operator new (77 samples, 0.16%; -0.01%)</title><rect x="1046.1" y="261" width="1.9" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1049.10" y="271.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (5 samples, 0.01%; -0.00%)</title><rect x="1009.6" y="293" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1012.57" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (87 samples, 0.18%; -0.00%)</title><rect x="662.3" y="469" width="2.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="665.34" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (29 samples, 0.06%; +0.01%)</title><rect x="719.9" y="501" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="722.90" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (27 samples, 0.06%; +0.03%)</title><rect x="606.8" y="437" width="0.6" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="609.78" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (47 samples, 0.10%; 0.00%)</title><rect x="15.3" y="341" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.33" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (16 samples, 0.03%; -0.00%)</title><rect x="701.3" y="453" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="704.29" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (11 samples, 0.02%; 0.00%)</title><rect x="824.1" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="827.10" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (15 samples, 0.03%; +0.00%)</title><rect x="822.9" y="213" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="825.93" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (32 samples, 0.07%; +0.03%)</title><rect x="997.5" y="293" width="0.8" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="1000.53" y="303.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (132 samples, 0.27%; +0.01%)</title><rect x="928.0" y="341" width="3.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="931.00" y="351.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (7 samples, 0.01%; -0.01%)</title><rect x="290.6" y="293" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="293.64" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (5 samples, 0.01%; -0.00%)</title><rect x="916.0" y="341" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="919.02" y="351.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (33 samples, 0.07%; 0.00%)</title><rect x="694.9" y="485" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.92" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (160 samples, 0.33%; +0.04%)</title><rect x="260.7" y="341" width="4.0" height="15.0" fill="rgb(255,148,148)" rx="2" ry="2" />
<text  x="263.74" y="351.5" ></text>
</g>
<g >
<title>table::set_hit_rate (61 samples, 0.13%; +0.00%)</title><rect x="716.8" y="453" width="1.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="719.85" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (19 samples, 0.04%; -0.00%)</title><rect x="659.2" y="389" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="662.18" y="399.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (20 samples, 0.04%; +0.00%)</title><rect x="826.3" y="277" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="829.30" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (14 samples, 0.03%; +0.01%)</title><rect x="623.9" y="389" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="626.93" y="399.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.05%; +0.02%)</title><rect x="678.3" y="469" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="681.29" y="479.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (15 samples, 0.03%; -0.00%)</title><rect x="1174.8" y="405" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1177.81" y="415.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (1,712 samples, 3.55%; +0.00%)</title><rect x="788.4" y="357" width="41.9" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="791.41" y="367.5" >ser..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.00%)</title><rect x="200.0" y="117" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="203.00" y="127.5" ></text>
</g>
<g >
<title>make_combined_reader (883 samples, 1.83%; -0.02%)</title><rect x="433.6" y="341" width="21.6" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="436.59" y="351.5" >m..</text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (6 samples, 0.01%; 0.00%)</title><rect x="881.7" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.72" y="367.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (13 samples, 0.03%; -0.02%)</title><rect x="442.6" y="277" width="0.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="445.59" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (58 samples, 0.12%; +0.01%)</title><rect x="658.5" y="421" width="1.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="661.52" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (9 samples, 0.02%; -0.00%)</title><rect x="952.6" y="325" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="955.59" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (64 samples, 0.13%; +0.00%)</title><rect x="727.2" y="405" width="1.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="730.22" y="415.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (16 samples, 0.03%; 0.00%)</title><rect x="1139.4" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.43" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (25 samples, 0.05%; -0.00%)</title><rect x="498.7" y="277" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="501.67" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (5 samples, 0.01%; 0.00%)</title><rect x="881.7" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.74" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (12 samples, 0.02%; +0.01%)</title><rect x="1121.8" y="405" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1124.82" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (5 samples, 0.01%; -0.01%)</title><rect x="45.8" y="469" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="48.84" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (8 samples, 0.02%; 0.00%)</title><rect x="245.8" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="248.79" y="207.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (50 samples, 0.10%; 0.00%)</title><rect x="19.8" y="469" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.83" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (13 samples, 0.03%; +0.02%)</title><rect x="452.8" y="293" width="0.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="455.79" y="303.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (16 samples, 0.03%; +0.00%)</title><rect x="571.7" y="293" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="574.72" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (40 samples, 0.08%; -0.00%)</title><rect x="19.9" y="437" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="22.93" y="447.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::done (5 samples, 0.01%; +0.01%)</title><rect x="598.6" y="437" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="601.56" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; 0.00%)</title><rect x="592.6" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="595.56" y="399.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (19 samples, 0.04%; +0.00%)</title><rect x="512.7" y="213" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="515.73" y="223.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (5 samples, 0.01%; +0.00%)</title><rect x="531.4" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="534.38" y="287.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (6 samples, 0.01%; -0.00%)</title><rect x="865.0" y="325" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="867.96" y="335.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (6 samples, 0.01%; +0.01%)</title><rect x="870.5" y="405" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="873.49" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (34 samples, 0.07%; +0.00%)</title><rect x="1055.8" y="229" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1058.83" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (5 samples, 0.01%; 0.00%)</title><rect x="427.0" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="429.98" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (8 samples, 0.02%; +0.01%)</title><rect x="781.4" y="341" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="784.41" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.01%)</title><rect x="973.6" y="373" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="976.63" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (5 samples, 0.01%; 0.00%)</title><rect x="632.2" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="635.17" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (28 samples, 0.06%; +0.00%)</title><rect x="124.7" y="277" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="127.72" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (6 samples, 0.01%; 0.00%)</title><rect x="1136.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1139.01" y="431.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (39 samples, 0.08%; -0.01%)</title><rect x="1079.1" y="293" width="1.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1082.12" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (83 samples, 0.17%; +0.00%)</title><rect x="575.4" y="373" width="2.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="578.39" y="383.5" ></text>
</g>
<g >
<title>service::client_state::has_access (8 samples, 0.02%; -0.00%)</title><rect x="21.1" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="24.13" y="447.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (31 samples, 0.06%; -0.01%)</title><rect x="410.1" y="245" width="0.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="413.13" y="255.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (10 samples, 0.02%; +0.01%)</title><rect x="659.2" y="373" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="662.23" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (39 samples, 0.08%; -0.01%)</title><rect x="538.5" y="341" width="0.9" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="541.49" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (22 samples, 0.05%; 0.00%)</title><rect x="292.1" y="245" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="295.13" y="255.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (23 samples, 0.05%; +0.05%)</title><rect x="542.2" y="405" width="0.6" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="545.24" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (7 samples, 0.01%; -0.00%)</title><rect x="264.7" y="341" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="267.66" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (16 samples, 0.03%; +0.02%)</title><rect x="1150.4" y="485" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1153.39" y="495.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (254 samples, 0.53%; +0.02%)</title><rect x="925.2" y="373" width="6.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="928.24" y="383.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (7 samples, 0.01%; 0.00%)</title><rect x="47.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.04" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (14 samples, 0.03%; -0.01%)</title><rect x="441.6" y="261" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="444.64" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (167 samples, 0.35%; 0.00%)</title><rect x="735.5" y="357" width="4.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="738.46" y="367.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (9 samples, 0.02%; -0.00%)</title><rect x="788.0" y="357" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="791.04" y="367.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (384 samples, 0.80%; +0.05%)</title><rect x="464.3" y="293" width="9.4" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="467.29" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (12 samples, 0.02%; +0.01%)</title><rect x="638.5" y="485" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="641.48" y="495.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (76 samples, 0.16%; +0.05%)</title><rect x="1132.6" y="389" width="1.9" height="15.0" fill="rgb(255,142,142)" rx="2" ry="2" />
<text  x="1135.60" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (8 samples, 0.02%; -0.01%)</title><rect x="23.4" y="517" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="26.43" y="527.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (400 samples, 0.83%; -0.00%)</title><rect x="306.1" y="213" width="9.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="309.13" y="223.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%; +0.00%)</title><rect x="417.4" y="341" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="420.42" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (28 samples, 0.06%; -0.01%)</title><rect x="509.3" y="181" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="512.28" y="191.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (291 samples, 0.60%; 0.00%)</title><rect x="14.5" y="597" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.45" y="607.5" ></text>
</g>
<g >
<title>auth::get_permissions (5 samples, 0.01%; 0.00%)</title><rect x="21.2" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.18" y="383.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (14 samples, 0.03%; 0.00%)</title><rect x="478.9" y="213" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="481.95" y="223.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,026 samples, 8.35%; -0.01%)</title><rect x="296.8" y="261" width="98.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="299.76" y="271.5" >mutation_fr..</text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (10 samples, 0.02%; +0.01%)</title><rect x="613.7" y="437" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="616.72" y="447.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (69 samples, 0.14%; +0.02%)</title><rect x="608.0" y="421" width="1.7" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="611.02" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (28 samples, 0.06%; 0.00%)</title><rect x="694.9" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.92" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (8 samples, 0.02%; -0.01%)</title><rect x="1131.3" y="421" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1134.28" y="431.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.02%; 0.00%)</title><rect x="630.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="633.26" y="399.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (8 samples, 0.02%; -0.00%)</title><rect x="390.5" y="229" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="393.53" y="239.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (8 samples, 0.02%; -0.07%)</title><rect x="96.5" y="421" width="0.2" height="15.0" fill="rgb(107,107,255)" rx="2" ry="2" />
<text  x="99.53" y="431.5" ></text>
</g>
<g >
<title>operator new (36 samples, 0.07%; +0.00%)</title><rect x="454.0" y="325" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="456.99" y="335.5" ></text>
</g>
<g >
<title>operator new (36 samples, 0.07%; -0.00%)</title><rect x="914.3" y="325" width="0.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="917.28" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (5,825 samples, 12.08%; -0.01%)</title><rect x="117.5" y="341" width="142.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="120.45" y="351.5" >mutation_fragment_..</text>
</g>
<g >
<title>service::client_state::get_timestamp (15 samples, 0.03%; 0.00%)</title><rect x="1131.5" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.48" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (21 samples, 0.04%; -0.01%)</title><rect x="698.2" y="469" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="701.20" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (7 samples, 0.01%; +0.01%)</title><rect x="421.5" y="405" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="424.53" y="415.5" ></text>
</g>
<g >
<title>operator delete (25 samples, 0.05%; +0.00%)</title><rect x="442.0" y="277" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="444.98" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (72 samples, 0.15%; +0.00%)</title><rect x="414.0" y="277" width="1.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="417.04" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.01%)</title><rect x="638.8" y="485" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="641.78" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (6 samples, 0.01%; 0.00%)</title><rect x="963.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="966.75" y="415.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (99 samples, 0.21%; -0.00%)</title><rect x="748.3" y="357" width="2.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="751.26" y="367.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (42 samples, 0.09%; 0.00%)</title><rect x="745.6" y="389" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="748.64" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (5 samples, 0.01%; -0.00%)</title><rect x="392.0" y="229" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="394.97" y="239.5" ></text>
</g>
<g >
<title>validation::validate_column_family (365 samples, 0.76%; +0.00%)</title><rect x="837.3" y="389" width="9.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="840.34" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (8 samples, 0.02%; -0.01%)</title><rect x="40.6" y="453" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="43.61" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (32 samples, 0.07%; +0.02%)</title><rect x="1000.2" y="277" width="0.8" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1003.18" y="287.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (31 samples, 0.06%; -0.00%)</title><rect x="627.8" y="405" width="0.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="630.82" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (12 samples, 0.02%; -0.01%)</title><rect x="15.9" y="261" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="18.87" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (5 samples, 0.01%; +0.01%)</title><rect x="950.5" y="309" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="953.54" y="319.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1,493 samples, 3.10%; -0.00%)</title><rect x="166.9" y="165" width="36.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="169.89" y="175.5" >clu..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (8 samples, 0.02%; +0.01%)</title><rect x="1114.9" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1117.94" y="351.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (9 samples, 0.02%; +0.01%)</title><rect x="270.8" y="293" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="273.82" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (22 samples, 0.05%; +0.01%)</title><rect x="31.8" y="469" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="34.82" y="479.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (27 samples, 0.06%; 0.00%)</title><rect x="484.6" y="197" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="487.60" y="207.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (1,760 samples, 3.65%; +0.01%)</title><rect x="1059.8" y="357" width="43.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1062.85" y="367.5" >serv..</text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (5 samples, 0.01%; +0.00%)</title><rect x="598.7" y="437" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="601.73" y="447.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (15 samples, 0.03%; -0.00%)</title><rect x="764.9" y="373" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="767.89" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (36 samples, 0.07%; +0.01%)</title><rect x="672.5" y="437" width="0.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="675.54" y="447.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (11 samples, 0.02%; +0.01%)</title><rect x="834.6" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="837.57" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (197 samples, 0.41%; +0.01%)</title><rect x="243.0" y="261" width="4.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="245.98" y="271.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (14 samples, 0.03%; 0.00%)</title><rect x="390.7" y="229" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="393.73" y="239.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (10 samples, 0.02%; 0.00%)</title><rect x="1100.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1103.09" y="319.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (55 samples, 0.11%; -0.00%)</title><rect x="749.0" y="309" width="1.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="752.04" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (11 samples, 0.02%; 0.00%)</title><rect x="880.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.57" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (10 samples, 0.02%; -0.01%)</title><rect x="445.5" y="293" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="448.50" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (18 samples, 0.04%; +0.02%)</title><rect x="36.5" y="421" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="39.54" y="431.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.02%; -0.01%)</title><rect x="662.7" y="453" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="665.70" y="463.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (5 samples, 0.01%; +0.01%)</title><rect x="911.3" y="325" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="914.27" y="335.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; -0.00%)</title><rect x="841.3" y="261" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="844.30" y="271.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.01%)</title><rect x="819.0" y="261" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="822.01" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (14 samples, 0.03%; -0.02%)</title><rect x="675.8" y="469" width="0.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="678.82" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (25 samples, 0.05%; -0.05%)</title><rect x="70.3" y="389" width="0.6" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="73.28" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (11 samples, 0.02%; -0.03%)</title><rect x="640.0" y="485" width="0.3" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="643.02" y="495.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (57 samples, 0.12%; +0.01%)</title><rect x="288.7" y="309" width="1.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="291.71" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (67 samples, 0.14%; -0.01%)</title><rect x="873.5" y="453" width="1.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="876.50" y="463.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (21 samples, 0.04%; -0.01%)</title><rect x="915.2" y="325" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="918.16" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="1009.8" y="293" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1012.81" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (7 samples, 0.01%; +0.01%)</title><rect x="829.4" y="277" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="832.41" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (10 samples, 0.02%; +0.01%)</title><rect x="494.9" y="309" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="497.95" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; -0.00%)</title><rect x="665.4" y="485" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="668.42" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.02%; -0.00%)</title><rect x="95.4" y="421" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="98.38" y="431.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,906 samples, 10.17%; -0.02%)</title><rect x="293.0" y="293" width="120.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="296.04" y="303.5" >seastar::repea..</text>
</g>
<g >
<title>service::endpoints_to_replica_ids (136 samples, 0.28%; -0.01%)</title><rect x="1151.5" y="469" width="3.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1154.49" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (26 samples, 0.05%; 0.00%)</title><rect x="880.4" y="485" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.39" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (89 samples, 0.18%; +0.01%)</title><rect x="658.0" y="469" width="2.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="661.01" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (14 samples, 0.03%; +0.01%)</title><rect x="507.4" y="213" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="510.40" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; +0.02%)</title><rect x="292.4" y="229" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="295.45" y="239.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (47,214 samples, 97.89%; 0.00%)</title><rect x="22.1" y="565" width="1155.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.09" y="575.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (8 samples, 0.02%; +0.00%)</title><rect x="111.9" y="373" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="114.92" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (78 samples, 0.16%; +0.01%)</title><rect x="959.7" y="357" width="1.9" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="962.71" y="367.5" ></text>
</g>
<g >
<title>operator new (38 samples, 0.08%; +0.00%)</title><rect x="549.0" y="357" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="551.97" y="367.5" ></text>
</g>
<g >
<title>malloc (26 samples, 0.05%; 0.00%)</title><rect x="604.3" y="373" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="607.31" y="383.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (13 samples, 0.03%; +0.00%)</title><rect x="811.7" y="117" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="814.67" y="127.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (5 samples, 0.01%; +0.00%)</title><rect x="248.2" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="251.19" y="287.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (8 samples, 0.02%; -0.00%)</title><rect x="1033.8" y="197" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1036.84" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (30 samples, 0.06%; -0.01%)</title><rect x="1106.5" y="373" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1109.48" y="383.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; -0.00%)</title><rect x="272.8" y="293" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="275.80" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (13 samples, 0.03%; -0.00%)</title><rect x="484.9" y="181" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="487.94" y="191.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (10 samples, 0.02%; 0.00%)</title><rect x="880.6" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.57" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; +0.01%)</title><rect x="53.1" y="453" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="56.13" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (16 samples, 0.03%; +0.02%)</title><rect x="966.1" y="389" width="0.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="969.14" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (28 samples, 0.06%; +0.01%)</title><rect x="451.2" y="261" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="454.15" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (19 samples, 0.04%; 0.00%)</title><rect x="636.4" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="639.40" y="479.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (6 samples, 0.01%; +0.00%)</title><rect x="745.0" y="389" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="748.03" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (8 samples, 0.02%; -0.00%)</title><rect x="259.7" y="325" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="262.69" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (13 samples, 0.03%; -0.00%)</title><rect x="878.3" y="501" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="881.27" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (7 samples, 0.01%; +0.01%)</title><rect x="555.1" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="558.11" y="431.5" ></text>
</g>
<g >
<title>operator delete (19 samples, 0.04%; -0.03%)</title><rect x="413.1" y="293" width="0.5" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="416.14" y="303.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (8 samples, 0.02%; +0.01%)</title><rect x="941.3" y="405" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="944.26" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (40 samples, 0.08%; +0.00%)</title><rect x="772.4" y="325" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="775.36" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (22 samples, 0.05%; +0.01%)</title><rect x="614.2" y="437" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="617.19" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (249 samples, 0.52%; -0.00%)</title><rect x="1113.6" y="405" width="6.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1116.57" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (47 samples, 0.10%; -0.00%)</title><rect x="922.4" y="341" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="925.40" y="351.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.05%; +0.01%)</title><rect x="418.3" y="373" width="0.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="421.32" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (19 samples, 0.04%; +0.02%)</title><rect x="77.8" y="453" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="80.79" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (60 samples, 0.12%; +0.01%)</title><rect x="959.9" y="341" width="1.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="962.91" y="351.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (7 samples, 0.01%; +0.01%)</title><rect x="302.4" y="197" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="305.38" y="207.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (2,848 samples, 5.90%; +0.06%)</title><rect x="455.3" y="341" width="69.7" height="15.0" fill="rgb(255,125,125)" rx="2" ry="2" />
<text  x="458.31" y="351.5" >memtabl..</text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (22 samples, 0.05%; -0.00%)</title><rect x="1054.8" y="213" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1057.83" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (63 samples, 0.13%; -0.01%)</title><rect x="914.1" y="341" width="1.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="917.13" y="351.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (102 samples, 0.21%; +0.01%)</title><rect x="358.9" y="165" width="2.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="361.90" y="175.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (27 samples, 0.06%; -0.01%)</title><rect x="575.6" y="357" width="0.7" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="578.61" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (5 samples, 0.01%; -0.00%)</title><rect x="1082.2" y="325" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1085.23" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (21 samples, 0.04%; -0.00%)</title><rect x="1148.7" y="469" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1151.68" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (7 samples, 0.01%; -0.01%)</title><rect x="944.3" y="389" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="947.32" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (30 samples, 0.06%; -0.00%)</title><rect x="947.7" y="357" width="0.7" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="950.67" y="367.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (15 samples, 0.03%; 0.00%)</title><rect x="147.1" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="150.05" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.00%)</title><rect x="637.6" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="640.63" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (7 samples, 0.01%; 0.00%)</title><rect x="1082.4" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1085.35" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (92 samples, 0.19%; 0.00%)</title><rect x="1156.7" y="453" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1159.70" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (12 samples, 0.02%; 0.00%)</title><rect x="1107.7" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1110.70" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (15 samples, 0.03%; +0.02%)</title><rect x="79.3" y="453" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="82.26" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (68 samples, 0.14%; +0.00%)</title><rect x="1157.3" y="437" width="1.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1160.27" y="447.5" ></text>
</g>
<g >
<title>operator new (68 samples, 0.14%; +0.00%)</title><rect x="1043.1" y="213" width="1.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1046.14" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (8 samples, 0.02%; +0.01%)</title><rect x="913.4" y="357" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="916.40" y="367.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (14 samples, 0.03%; +0.00%)</title><rect x="931.5" y="389" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="934.45" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (24 samples, 0.05%; +0.01%)</title><rect x="783.4" y="357" width="0.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="786.39" y="367.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (8 samples, 0.02%; +0.01%)</title><rect x="242.0" y="229" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="245.00" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (35 samples, 0.07%; +0.01%)</title><rect x="914.3" y="309" width="0.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="917.30" y="319.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (5 samples, 0.01%; 0.00%)</title><rect x="14.7" y="517" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.67" y="527.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (23 samples, 0.05%; +0.02%)</title><rect x="564.3" y="277" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="567.28" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (41 samples, 0.09%; -0.00%)</title><rect x="1108.0" y="389" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1111.02" y="399.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (78 samples, 0.16%; -0.09%)</title><rect x="12.3" y="581" width="1.9" height="15.0" fill="rgb(81,81,255)" rx="2" ry="2" />
<text  x="15.32" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.00%)</title><rect x="296.5" y="245" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="299.54" y="255.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (9 samples, 0.02%; +0.01%)</title><rect x="431.9" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="434.92" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (5 samples, 0.01%; 0.00%)</title><rect x="974.0" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="977.02" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (190 samples, 0.39%; -0.00%)</title><rect x="148.6" y="229" width="4.7" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="151.64" y="239.5" ></text>
</g>
<g >
<title>operator new (81 samples, 0.17%; +0.00%)</title><rect x="1074.9" y="325" width="2.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1077.89" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (17 samples, 0.04%; +0.02%)</title><rect x="260.3" y="341" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="263.33" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (87 samples, 0.18%; +0.03%)</title><rect x="688.1" y="453" width="2.2" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="691.15" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (25 samples, 0.05%; +0.02%)</title><rect x="139.0" y="261" width="0.6" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="142.03" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (5 samples, 0.01%; 0.00%)</title><rect x="1051.7" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1054.75" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (10 samples, 0.02%; +0.01%)</title><rect x="920.8" y="341" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="923.79" y="351.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (11 samples, 0.02%; +0.01%)</title><rect x="915.9" y="357" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="918.87" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (12 samples, 0.02%; +0.00%)</title><rect x="281.4" y="373" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="284.42" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; -0.01%)</title><rect x="50.7" y="485" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="53.71" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (25 samples, 0.05%; +0.00%)</title><rect x="1159.5" y="405" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1162.54" y="415.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (112 samples, 0.23%; +0.00%)</title><rect x="518.8" y="325" width="2.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="521.78" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (40 samples, 0.08%; -0.01%)</title><rect x="1148.7" y="485" width="1.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1151.68" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (21 samples, 0.04%; +0.00%)</title><rect x="1059.3" y="357" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1062.33" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (14 samples, 0.03%; +0.02%)</title><rect x="871.8" y="405" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="874.76" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (7 samples, 0.01%; +0.00%)</title><rect x="837.0" y="325" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="839.97" y="335.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (19 samples, 0.04%; -0.01%)</title><rect x="857.2" y="357" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="860.15" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (18 samples, 0.04%; +0.01%)</title><rect x="770.0" y="325" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="772.96" y="335.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (16 samples, 0.03%; +0.01%)</title><rect x="432.6" y="341" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="435.56" y="351.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (24 samples, 0.05%; +0.01%)</title><rect x="237.0" y="181" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="240.01" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (79 samples, 0.16%; -0.02%)</title><rect x="130.7" y="261" width="1.9" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="133.69" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (24 samples, 0.05%; +0.00%)</title><rect x="642.5" y="469" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="645.54" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (40 samples, 0.08%; -0.01%)</title><rect x="749.4" y="293" width="1.0" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="752.41" y="303.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (7 samples, 0.01%; 0.00%)</title><rect x="21.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.82" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,322 samples, 4.81%; -0.01%)</title><rect x="161.9" y="229" width="56.8" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="164.90" y="239.5" >partit..</text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (6 samples, 0.01%; +0.01%)</title><rect x="698.9" y="469" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="701.91" y="479.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (2,006 samples, 4.16%; +0.03%)</title><rect x="785.5" y="389" width="49.1" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="788.49" y="399.5" >std:..</text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (8 samples, 0.02%; 0.00%)</title><rect x="16.2" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.21" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (25 samples, 0.05%; +0.02%)</title><rect x="313.8" y="181" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="316.83" y="191.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (16 samples, 0.03%; -0.01%)</title><rect x="793.8" y="293" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="796.81" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (37 samples, 0.08%; 0.00%)</title><rect x="1138.3" y="357" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.28" y="367.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (13 samples, 0.03%; -0.00%)</title><rect x="480.7" y="197" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="483.66" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (17 samples, 0.04%; -0.00%)</title><rect x="993.2" y="341" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="996.23" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (5 samples, 0.01%; +0.01%)</title><rect x="128.4" y="277" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="131.39" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (654 samples, 1.36%; -0.01%)</title><rect x="558.5" y="341" width="16.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="561.51" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (238 samples, 0.49%; -0.00%)</title><rect x="753.8" y="341" width="5.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="756.76" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (26 samples, 0.05%; +0.00%)</title><rect x="880.4" y="469" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="883.39" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (10 samples, 0.02%; +0.01%)</title><rect x="1125.6" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1128.61" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (181 samples, 0.38%; +0.01%)</title><rect x="1066.4" y="309" width="4.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1069.40" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (66 samples, 0.14%; -0.01%)</title><rect x="1043.2" y="197" width="1.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1046.19" y="207.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (165 samples, 0.34%; +0.01%)</title><rect x="153.3" y="229" width="4.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="156.29" y="239.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (28 samples, 0.06%; -0.01%)</title><rect x="146.0" y="245" width="0.7" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="149.00" y="255.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (8 samples, 0.02%; +0.00%)</title><rect x="500.4" y="261" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="503.38" y="271.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (17 samples, 0.04%; 0.00%)</title><rect x="685.6" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="688.58" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (53 samples, 0.11%; +0.01%)</title><rect x="403.7" y="213" width="1.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="406.72" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (19 samples, 0.04%; 0.00%)</title><rect x="1136.4" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1139.42" y="431.5" ></text>
</g>
<g >
<title>database::has_keyspace (160 samples, 0.33%; -0.02%)</title><rect x="855.1" y="421" width="3.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="858.07" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (10 samples, 0.02%; +0.01%)</title><rect x="487.2" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="490.19" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (29 samples, 0.06%; +0.01%)</title><rect x="666.5" y="485" width="0.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="669.55" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="1172.3" y="421" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1175.26" y="431.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (47 samples, 0.10%; -0.02%)</title><rect x="534.5" y="261" width="1.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="537.53" y="271.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (15 samples, 0.03%; +0.00%)</title><rect x="1072.7" y="341" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1075.67" y="351.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (15 samples, 0.03%; +0.00%)</title><rect x="817.8" y="85" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="820.84" y="95.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (32 samples, 0.07%; -0.03%)</title><rect x="314.7" y="165" width="0.8" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="317.71" y="175.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (9 samples, 0.02%; -0.02%)</title><rect x="156.6" y="197" width="0.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="159.64" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (9 samples, 0.02%; +0.00%)</title><rect x="628.8" y="437" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="631.80" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (17 samples, 0.04%; -0.01%)</title><rect x="692.2" y="437" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="695.18" y="447.5" ></text>
</g>
<g >
<title>reader_permit::consume (23 samples, 0.05%; +0.01%)</title><rect x="275.6" y="277" width="0.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="278.64" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (26 samples, 0.05%; -0.01%)</title><rect x="849.3" y="405" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="852.32" y="415.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (5 samples, 0.01%; -0.00%)</title><rect x="817.1" y="117" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="820.13" y="127.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (22 samples, 0.05%; -0.01%)</title><rect x="537.3" y="341" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="540.32" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (31 samples, 0.06%; +0.00%)</title><rect x="445.7" y="293" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="448.75" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (8 samples, 0.02%; +0.00%)</title><rect x="1141.8" y="501" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1144.83" y="511.5" ></text>
</g>
<g >
<title>reader_permit::consume (12 samples, 0.02%; -0.02%)</title><rect x="510.4" y="165" width="0.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="513.36" y="175.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (5 samples, 0.01%; +0.00%)</title><rect x="1139.6" y="133" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1142.55" y="143.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (21 samples, 0.04%; +0.01%)</title><rect x="632.7" y="469" width="0.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="635.73" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (31 samples, 0.06%; -0.04%)</title><rect x="946.5" y="357" width="0.8" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="949.55" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (80 samples, 0.17%; 0.00%)</title><rect x="816.3" y="133" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="819.27" y="143.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (7 samples, 0.01%; +0.01%)</title><rect x="125.7" y="293" width="0.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="128.67" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (12 samples, 0.02%; -0.00%)</title><rect x="278.0" y="325" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="281.04" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (191 samples, 0.40%; -0.01%)</title><rect x="1169.0" y="485" width="4.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1171.98" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.01%)</title><rect x="620.4" y="421" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="623.35" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (179 samples, 0.37%; +0.01%)</title><rect x="988.6" y="341" width="4.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="991.63" y="351.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (5 samples, 0.01%; 0.00%)</title><rect x="21.2" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.18" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (27 samples, 0.06%; +0.02%)</title><rect x="41.8" y="469" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="44.78" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (81 samples, 0.17%; -0.04%)</title><rect x="197.3" y="69" width="2.0" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="200.30" y="79.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (9 samples, 0.02%; +0.01%)</title><rect x="396.1" y="229" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="399.13" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (8 samples, 0.02%; -0.01%)</title><rect x="999.4" y="261" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1002.39" y="271.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (8 samples, 0.02%; -0.00%)</title><rect x="867.7" y="389" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="870.75" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (5 samples, 0.01%; +0.00%)</title><rect x="1139.3" y="213" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1142.26" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (15 samples, 0.03%; -0.01%)</title><rect x="551.4" y="309" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="554.44" y="319.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (19 samples, 0.04%; +0.00%)</title><rect x="40.1" y="453" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="43.12" y="463.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (7 samples, 0.01%; -0.01%)</title><rect x="572.9" y="309" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="575.87" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (5 samples, 0.01%; 0.00%)</title><rect x="1139.3" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.26" y="271.5" ></text>
</g>
<g >
<title>row::row (6 samples, 0.01%; 0.00%)</title><rect x="880.6" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.59" y="287.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (16 samples, 0.03%; +0.03%)</title><rect x="1177.2" y="629" width="0.4" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="1180.20" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (8 samples, 0.02%; +0.00%)</title><rect x="1104.9" y="341" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1107.93" y="351.5" ></text>
</g>
<g >
<title>schema::column_at (12 samples, 0.02%; -0.01%)</title><rect x="363.5" y="197" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="366.54" y="207.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (5 samples, 0.01%; +0.00%)</title><rect x="146.8" y="245" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="149.78" y="255.5" ></text>
</g>
<g >
<title>make_random_seq (5 samples, 0.01%; +0.00%)</title><rect x="729.3" y="469" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="732.35" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (6 samples, 0.01%; +0.00%)</title><rect x="551.7" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="554.66" y="287.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (130 samples, 0.27%; +0.02%)</title><rect x="1035.7" y="165" width="3.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1038.70" y="175.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (6 samples, 0.01%; -0.01%)</title><rect x="500.2" y="261" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="503.23" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (80 samples, 0.17%; +0.02%)</title><rect x="239.2" y="197" width="2.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="242.21" y="207.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.07%; +0.01%)</title><rect x="873.7" y="437" width="0.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="876.69" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (38 samples, 0.08%; +0.02%)</title><rect x="98.3" y="373" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="101.29" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (202 samples, 0.42%; +0.04%)</title><rect x="653.1" y="469" width="4.9" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="656.06" y="479.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (13 samples, 0.03%; 0.00%)</title><rect x="21.7" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.74" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (61 samples, 0.13%; +0.08%)</title><rect x="169.9" y="133" width="1.5" height="15.0" fill="rgb(255,96,96)" rx="2" ry="2" />
<text  x="172.93" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; -0.00%)</title><rect x="402.0" y="181" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="405.00" y="191.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (6 samples, 0.01%; 0.00%)</title><rect x="30.5" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.50" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (41 samples, 0.09%; -0.01%)</title><rect x="630.9" y="405" width="1.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="633.87" y="415.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (11 samples, 0.02%; -0.11%)</title><rect x="985.8" y="357" width="0.2" height="15.0" fill="rgb(58,58,255)" rx="2" ry="2" />
<text  x="988.77" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (6 samples, 0.01%; -0.02%)</title><rect x="1030.2" y="245" width="0.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1033.19" y="255.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (5 samples, 0.01%; -0.01%)</title><rect x="952.3" y="341" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="955.35" y="351.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (34 samples, 0.07%; 0.00%)</title><rect x="1138.3" y="309" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.31" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (8 samples, 0.02%; +0.01%)</title><rect x="754.5" y="277" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="757.52" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.01%)</title><rect x="828.4" y="293" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="831.43" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (13 samples, 0.03%; +0.01%)</title><rect x="985.4" y="357" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="988.37" y="367.5" ></text>
</g>
<g >
<title>operator delete (56 samples, 0.12%; -0.01%)</title><rect x="581.8" y="341" width="1.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="584.82" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (21 samples, 0.04%; +0.01%)</title><rect x="666.7" y="469" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="669.74" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (8 samples, 0.02%; 0.00%)</title><rect x="713.5" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.54" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (127 samples, 0.26%; -0.01%)</title><rect x="1116.6" y="389" width="3.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1119.56" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (39 samples, 0.08%; 0.00%)</title><rect x="222.0" y="149" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="224.97" y="159.5" ></text>
</g>
<g >
<title>operator new (57 samples, 0.12%; -0.00%)</title><rect x="868.8" y="357" width="1.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="871.82" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (17 samples, 0.04%; +0.01%)</title><rect x="551.9" y="389" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="554.85" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (10 samples, 0.02%; +0.01%)</title><rect x="960.9" y="309" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="963.93" y="319.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (9 samples, 0.02%; 0.00%)</title><rect x="21.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.11" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (11 samples, 0.02%; +0.00%)</title><rect x="909.3" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="912.26" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (7 samples, 0.01%; -0.00%)</title><rect x="1072.2" y="325" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1075.25" y="335.5" ></text>
</g>
<g >
<title>schema::column_at (30 samples, 0.06%; +0.03%)</title><rect x="202.7" y="133" width="0.7" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="205.69" y="143.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.01%)</title><rect x="73.4" y="405" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="76.39" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.06%; -0.01%)</title><rect x="873.8" y="421" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="876.79" y="431.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (6 samples, 0.01%; +0.01%)</title><rect x="694.5" y="485" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="697.48" y="495.5" ></text>
</g>
<g >
<title>query::querier&lt; (17 samples, 0.04%; +0.01%)</title><rect x="60.6" y="453" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="63.62" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (9 samples, 0.02%; 0.00%)</title><rect x="21.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.82" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (6 samples, 0.01%; +0.00%)</title><rect x="1130.7" y="373" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1133.67" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (7 samples, 0.01%; +0.01%)</title><rect x="697.6" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="700.59" y="495.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.03%; 0.00%)</title><rect x="535.7" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="538.71" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (2,853 samples, 5.92%; -0.04%)</title><rect x="158.2" y="245" width="69.8" height="15.0" fill="rgb(148,148,255)" rx="2" ry="2" />
<text  x="161.21" y="255.5" >partiti..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (5 samples, 0.01%; +0.00%)</title><rect x="716.7" y="453" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="719.72" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (20 samples, 0.04%; +0.01%)</title><rect x="693.3" y="485" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="696.26" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (106 samples, 0.22%; +0.01%)</title><rect x="621.7" y="405" width="2.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="624.75" y="415.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%; +0.00%)</title><rect x="1154.2" y="437" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1157.21" y="447.5" ></text>
</g>
<g >
<title>make_combined_reader (756 samples, 1.57%; -0.02%)</title><rect x="435.3" y="325" width="18.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="438.35" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (28 samples, 0.06%; -0.00%)</title><rect x="694.9" y="453" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="697.92" y="463.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (11 samples, 0.02%; +0.02%)</title><rect x="166.0" y="181" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="169.01" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (22 samples, 0.05%; +0.03%)</title><rect x="387.2" y="149" width="0.5" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="390.18" y="159.5" ></text>
</g>
<g >
<title>free (20 samples, 0.04%; -0.00%)</title><rect x="37.2" y="421" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="40.21" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (50 samples, 0.10%; +0.08%)</title><rect x="938.7" y="373" width="1.2" height="15.0" fill="rgb(255,102,102)" rx="2" ry="2" />
<text  x="941.72" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (15 samples, 0.03%; +0.01%)</title><rect x="579.9" y="341" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="582.91" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (12 samples, 0.02%; -0.03%)</title><rect x="851.6" y="357" width="0.3" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="854.57" y="367.5" ></text>
</g>
<g >
<title>operator delete (38 samples, 0.08%; +0.00%)</title><rect x="622.9" y="373" width="1.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="625.92" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (69 samples, 0.14%; -0.01%)</title><rect x="500.6" y="261" width="1.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="503.57" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (34 samples, 0.07%; +0.03%)</title><rect x="447.5" y="277" width="0.8" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="450.48" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (91 samples, 0.19%; +0.00%)</title><rect x="834.9" y="389" width="2.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="837.94" y="399.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (5 samples, 0.01%; +0.01%)</title><rect x="514.8" y="213" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="517.79" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (21 samples, 0.04%; 0.00%)</title><rect x="1158.4" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1161.37" y="367.5" ></text>
</g>
<g >
<title>seastar::gate::leave (7 samples, 0.01%; -0.00%)</title><rect x="64.9" y="405" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="67.88" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (8 samples, 0.02%; -0.02%)</title><rect x="242.8" y="245" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="245.79" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (7 samples, 0.01%; -0.01%)</title><rect x="256.7" y="309" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="259.71" y="319.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (8 samples, 0.02%; 0.00%)</title><rect x="865.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.74" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (13 samples, 0.03%; -0.00%)</title><rect x="554.6" y="405" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="557.64" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (43 samples, 0.09%; +0.02%)</title><rect x="99.3" y="405" width="1.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="102.27" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (82 samples, 0.17%; -0.00%)</title><rect x="658.2" y="453" width="2.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="661.18" y="463.5" ></text>
</g>
<g >
<title>operator new (23 samples, 0.05%; 0.00%)</title><rect x="209.9" y="165" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="212.88" y="175.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (11 samples, 0.02%; -0.01%)</title><rect x="1041.5" y="213" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1044.50" y="223.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (603 samples, 1.25%; +0.06%)</title><rect x="125.8" y="293" width="14.8" height="15.0" fill="rgb(255,125,125)" rx="2" ry="2" />
<text  x="128.84" y="303.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (29 samples, 0.06%; +0.00%)</title><rect x="605.7" y="405" width="0.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="608.65" y="415.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (7 samples, 0.01%; +0.00%)</title><rect x="329.0" y="165" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="332.05" y="175.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (14 samples, 0.03%; 0.00%)</title><rect x="1138.6" y="245" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.62" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (38 samples, 0.08%; +0.03%)</title><rect x="37.8" y="421" width="0.9" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="40.77" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (100 samples, 0.21%; +0.00%)</title><rect x="868.0" y="389" width="2.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="871.04" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,404 samples, 9.13%; +0.02%)</title><rect x="140.6" y="309" width="107.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="143.59" y="319.5" >partition_sna..</text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (356 samples, 0.74%; -0.00%)</title><rect x="809.7" y="197" width="8.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="812.71" y="207.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (7 samples, 0.01%; 0.00%)</title><rect x="1139.6" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.55" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (8 samples, 0.02%; -0.01%)</title><rect x="266.7" y="341" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="269.71" y="351.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (16 samples, 0.03%; +0.01%)</title><rect x="1099.0" y="261" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1102.04" y="271.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (11 samples, 0.02%; -0.00%)</title><rect x="288.1" y="325" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="291.07" y="335.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (10 samples, 0.02%; +0.00%)</title><rect x="612.1" y="421" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="615.11" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (770 samples, 1.60%; -0.02%)</title><rect x="1082.6" y="341" width="18.9" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1085.62" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (50 samples, 0.10%; +0.00%)</title><rect x="1109.8" y="405" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1112.80" y="415.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (1,638 samples, 3.40%; -0.03%)</title><rect x="789.8" y="341" width="40.0" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="792.78" y="351.5" >ser..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (37 samples, 0.08%; 0.00%)</title><rect x="1138.3" y="373" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.28" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (243 samples, 0.50%; +0.00%)</title><rect x="753.6" y="357" width="6.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="756.64" y="367.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (23 samples, 0.05%; +0.00%)</title><rect x="754.9" y="277" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="757.89" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (39 samples, 0.08%; -0.01%)</title><rect x="681.1" y="453" width="0.9" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="684.08" y="463.5" ></text>
</g>
<g >
<title>schema::column_at (15 samples, 0.03%; +0.01%)</title><rect x="209.1" y="117" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="212.15" y="127.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (12 samples, 0.02%; +0.01%)</title><rect x="917.0" y="389" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="920.04" y="399.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (7 samples, 0.01%; 0.00%)</title><rect x="21.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.82" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (5 samples, 0.01%; -0.01%)</title><rect x="1071.0" y="325" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1073.95" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (5 samples, 0.01%; -0.00%)</title><rect x="1130.5" y="373" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1133.55" y="383.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (23 samples, 0.05%; +0.01%)</title><rect x="1172.4" y="421" width="0.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1175.43" y="431.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (103 samples, 0.21%; -0.07%)</title><rect x="349.3" y="165" width="2.6" height="15.0" fill="rgb(116,116,255)" rx="2" ry="2" />
<text  x="352.33" y="175.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (16 samples, 0.03%; 0.00%)</title><rect x="1139.4" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.43" y="319.5" ></text>
</g>
<g >
<title>dht::shard_of (12 samples, 0.02%; -0.01%)</title><rect x="1008.9" y="293" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1011.88" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (37 samples, 0.08%; -0.00%)</title><rect x="908.1" y="277" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="911.11" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (16 samples, 0.03%; +0.03%)</title><rect x="315.9" y="213" width="0.4" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="318.91" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%; +0.01%)</title><rect x="562.2" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="565.18" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (8 samples, 0.02%; -0.02%)</title><rect x="646.8" y="485" width="0.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="649.75" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (47 samples, 0.10%; +0.03%)</title><rect x="951.8" y="357" width="1.1" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="954.78" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.01%)</title><rect x="137.9" y="229" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="140.88" y="239.5" ></text>
</g>
<g >
<title>[[vdso]] (276 samples, 0.57%; +0.03%)</title><rect x="1178.6" y="613" width="6.8" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="1181.65" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (17 samples, 0.04%; -0.01%)</title><rect x="1146.4" y="485" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1149.38" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (38 samples, 0.08%; -0.00%)</title><rect x="658.7" y="405" width="1.0" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="661.74" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (13 samples, 0.03%; -0.00%)</title><rect x="952.6" y="341" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="955.59" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (5 samples, 0.01%; -0.01%)</title><rect x="646.6" y="485" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="649.63" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (10 samples, 0.02%; -0.01%)</title><rect x="870.2" y="357" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="873.24" y="367.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (6 samples, 0.01%; +0.00%)</title><rect x="215.8" y="149" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="218.82" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (12 samples, 0.02%; 0.00%)</title><rect x="880.6" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.57" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (6 samples, 0.01%; 0.00%)</title><rect x="551.7" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="554.66" y="303.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (938 samples, 1.94%; +0.03%)</title><rect x="495.2" y="309" width="22.9" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="498.19" y="319.5" >s..</text>
</g>
<g >
<title>standard_allocation_strategy::alloc (100 samples, 0.21%; -0.00%)</title><rect x="197.1" y="101" width="2.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="200.08" y="111.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (7 samples, 0.01%; +0.01%)</title><rect x="1010.0" y="293" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1012.96" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (120 samples, 0.25%; -0.00%)</title><rect x="959.0" y="405" width="2.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="962.00" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (5 samples, 0.01%; +0.00%)</title><rect x="943.8" y="389" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="946.83" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (6 samples, 0.01%; -0.00%)</title><rect x="521.4" y="309" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="524.37" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (9 samples, 0.02%; -0.01%)</title><rect x="536.9" y="325" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="539.93" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (96 samples, 0.20%; +0.11%)</title><rect x="624.8" y="437" width="2.3" height="15.0" fill="rgb(255,52,52)" rx="2" ry="2" />
<text  x="627.78" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (13 samples, 0.03%; 0.00%)</title><rect x="21.7" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.74" y="543.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (112 samples, 0.23%; +0.00%)</title><rect x="533.9" y="309" width="2.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="536.87" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (17 samples, 0.04%; +0.03%)</title><rect x="821.7" y="229" width="0.4" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="824.70" y="239.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.03%; +0.01%)</title><rect x="157.4" y="229" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="160.38" y="239.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (10 samples, 0.02%; +0.00%)</title><rect x="238.6" y="213" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="241.55" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (17 samples, 0.04%; +0.01%)</title><rect x="566.2" y="293" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="569.24" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (36 samples, 0.07%; -0.01%)</title><rect x="1146.8" y="485" width="0.9" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1149.79" y="495.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (10 samples, 0.02%; -0.01%)</title><rect x="864.9" y="341" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="867.86" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (6 samples, 0.01%; 0.00%)</title><rect x="531.5" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="534.50" y="319.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (10 samples, 0.02%; -0.01%)</title><rect x="908.8" y="261" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="911.77" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (6 samples, 0.01%; -0.01%)</title><rect x="311.4" y="165" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="314.43" y="175.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (13 samples, 0.03%; -0.00%)</title><rect x="1174.8" y="389" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1177.81" y="399.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (9 samples, 0.02%; 0.00%)</title><rect x="737.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="740.86" y="303.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (129 samples, 0.27%; -0.03%)</title><rect x="308.7" y="181" width="3.1" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="311.67" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (16 samples, 0.03%; -0.01%)</title><rect x="446.1" y="277" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="449.11" y="287.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%; 0.00%)</title><rect x="425.1" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="428.10" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (49 samples, 0.10%; +0.01%)</title><rect x="295.5" y="261" width="1.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="298.48" y="271.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (13 samples, 0.03%; +0.01%)</title><rect x="657.6" y="453" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="660.62" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (74 samples, 0.15%; -0.02%)</title><rect x="439.3" y="261" width="1.8" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="442.34" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (26 samples, 0.05%; 0.00%)</title><rect x="694.9" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.95" y="367.5" ></text>
</g>
<g >
<title>database::do_apply (37 samples, 0.08%; 0.00%)</title><rect x="1138.3" y="341" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.28" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (213 samples, 0.44%; +0.01%)</title><rect x="218.7" y="229" width="5.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="221.71" y="239.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (233 samples, 0.48%; -0.00%)</title><rect x="761.9" y="421" width="5.7" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="764.86" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (16 samples, 0.03%; +0.01%)</title><rect x="958.6" y="405" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="961.61" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; +0.00%)</title><rect x="65.6" y="437" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="68.61" y="447.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (30 samples, 0.06%; +0.03%)</title><rect x="523.9" y="325" width="0.7" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="526.91" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (27 samples, 0.06%; 0.00%)</title><rect x="661.7" y="469" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="664.68" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (531 samples, 1.10%; +0.00%)</title><rect x="230.0" y="261" width="13.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="232.99" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (6 samples, 0.01%; +0.00%)</title><rect x="442.9" y="277" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="445.91" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (5,669 samples, 11.75%; -0.04%)</title><rect x="282.5" y="405" width="138.7" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="285.47" y="415.5" >seastar::future&lt;m..</text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (114 samples, 0.24%; +0.02%)</title><rect x="367.0" y="181" width="2.8" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="369.97" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (27 samples, 0.06%; +0.03%)</title><rect x="54.5" y="469" width="0.6" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="57.48" y="479.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (15 samples, 0.03%; -0.00%)</title><rect x="558.1" y="341" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="561.07" y="351.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (10 samples, 0.02%; +0.01%)</title><rect x="624.3" y="421" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="627.34" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (37 samples, 0.08%; +0.04%)</title><rect x="944.6" y="357" width="0.9" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="947.59" y="367.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; +0.01%)</title><rect x="586.5" y="389" width="0.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="589.54" y="399.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (108 samples, 0.22%; 0.00%)</title><rect x="736.9" y="341" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="739.91" y="351.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (1,326 samples, 2.75%; +0.01%)</title><rect x="794.8" y="325" width="32.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="797.82" y="335.5" >st..</text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (10 samples, 0.02%; +0.01%)</title><rect x="570.6" y="277" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="573.64" y="287.5" ></text>
</g>
<g >
<title>operator delete (12 samples, 0.02%; -0.00%)</title><rect x="36.0" y="453" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="39.03" y="463.5" ></text>
</g>
<g >
<title>schema::get_partitioner (13 samples, 0.03%; +0.02%)</title><rect x="942.8" y="405" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="945.83" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.02%; +0.01%)</title><rect x="936.2" y="341" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="939.25" y="351.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (13 samples, 0.03%; -0.01%)</title><rect x="1057.3" y="277" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1060.28" y="287.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (11 samples, 0.02%; +0.01%)</title><rect x="1082.9" y="325" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1085.87" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (34 samples, 0.07%; -0.04%)</title><rect x="515.6" y="277" width="0.8" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="518.60" y="287.5" ></text>
</g>
<g >
<title>schema::position (5 samples, 0.01%; -0.03%)</title><rect x="1126.0" y="421" width="0.1" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="1128.95" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (15 samples, 0.03%; +0.02%)</title><rect x="894.8" y="421" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="897.83" y="431.5" ></text>
</g>
<g >
<title>free (34 samples, 0.07%; +0.00%)</title><rect x="404.1" y="197" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="407.08" y="207.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (15 samples, 0.03%; -0.00%)</title><rect x="54.1" y="469" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="57.11" y="479.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (155 samples, 0.32%; -0.01%)</title><rect x="298.8" y="245" width="3.8" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="301.79" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (13 samples, 0.03%; +0.01%)</title><rect x="954.2" y="421" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="957.16" y="431.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (374 samples, 0.78%; +0.01%)</title><rect x="477.0" y="261" width="9.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="480.04" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::stats (43 samples, 0.09%; +0.03%)</title><rect x="143.3" y="245" width="1.0" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="146.29" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (62 samples, 0.13%; +0.01%)</title><rect x="257.8" y="325" width="1.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="260.83" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (13 samples, 0.03%; +0.02%)</title><rect x="632.3" y="437" width="0.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="635.29" y="447.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%; +0.00%)</title><rect x="506.3" y="197" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="509.32" y="207.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (38 samples, 0.08%; -0.00%)</title><rect x="856.7" y="373" width="0.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="859.69" y="383.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (213 samples, 0.44%; +0.01%)</title><rect x="271.1" y="309" width="5.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="274.07" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (18 samples, 0.04%; +0.02%)</title><rect x="1120.6" y="373" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1123.59" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (27 samples, 0.06%; +0.01%)</title><rect x="847.8" y="421" width="0.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="850.78" y="431.5" ></text>
</g>
<g >
<title>operator new (74 samples, 0.15%; -0.00%)</title><rect x="961.9" y="405" width="1.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="964.94" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (12 samples, 0.02%; +0.01%)</title><rect x="234.1" y="213" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="237.05" y="223.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (15 samples, 0.03%; 0.00%)</title><rect x="1174.8" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1177.81" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (14 samples, 0.03%; +0.00%)</title><rect x="1176.5" y="453" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1179.54" y="463.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (70 samples, 0.15%; +0.00%)</title><rect x="149.0" y="213" width="1.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="152.04" y="223.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (8 samples, 0.02%; +0.00%)</title><rect x="1039.8" y="181" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1042.81" y="191.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (10 samples, 0.02%; 0.00%)</title><rect x="21.1" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.11" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (32 samples, 0.07%; +0.00%)</title><rect x="1176.2" y="501" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1179.20" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (18 samples, 0.04%; +0.03%)</title><rect x="801.3" y="245" width="0.4" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="804.27" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; -0.00%)</title><rect x="523.7" y="325" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="526.74" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (72 samples, 0.15%; +0.00%)</title><rect x="513.6" y="245" width="1.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="516.64" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (10 samples, 0.02%; +0.01%)</title><rect x="406.5" y="213" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="409.51" y="223.5" ></text>
</g>
<g >
<title>__tls_init (9 samples, 0.02%; +0.00%)</title><rect x="533.5" y="277" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="536.45" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (13 samples, 0.03%; +0.02%)</title><rect x="163.1" y="197" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="166.10" y="207.5" ></text>
</g>
<g >
<title>db::block_for (5 samples, 0.01%; -0.00%)</title><rect x="1071.4" y="325" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1074.39" y="335.5" ></text>
</g>
<g >
<title>executor&lt;test_read (6,235 samples, 12.93%; +0.01%)</title><rect x="724.5" y="485" width="152.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="727.50" y="495.5" >executor&lt;test_read</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (20 samples, 0.04%; +0.01%)</title><rect x="138.3" y="261" width="0.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="141.32" y="271.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (13 samples, 0.03%; -0.02%)</title><rect x="364.6" y="213" width="0.4" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="367.65" y="223.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (9 samples, 0.02%; 0.00%)</title><rect x="881.4" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.45" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (12 samples, 0.02%; -0.01%)</title><rect x="93.3" y="437" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="96.28" y="447.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (11 samples, 0.02%; +0.00%)</title><rect x="535.2" y="245" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="538.19" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (11 samples, 0.02%; +0.00%)</title><rect x="517.9" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="520.87" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (20 samples, 0.04%; +0.01%)</title><rect x="33.4" y="485" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="36.39" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (74 samples, 0.15%; -0.03%)</title><rect x="978.3" y="341" width="1.8" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="981.30" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (14 samples, 0.03%; +0.01%)</title><rect x="1026.1" y="197" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1029.08" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (7 samples, 0.01%; +0.00%)</title><rect x="1116.2" y="389" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1119.24" y="399.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (15 samples, 0.03%; 0.00%)</title><rect x="1051.3" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1054.33" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (12 samples, 0.02%; -0.01%)</title><rect x="64.8" y="421" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="67.75" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (29 samples, 0.06%; +0.01%)</title><rect x="681.3" y="437" width="0.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="684.32" y="447.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (6 samples, 0.01%; -0.01%)</title><rect x="715.7" y="421" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="718.70" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (32 samples, 0.07%; +0.02%)</title><rect x="833.6" y="293" width="0.8" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="836.62" y="303.5" ></text>
</g>
<g >
<title>__start_context (13 samples, 0.03%; 0.00%)</title><rect x="21.7" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.74" y="607.5" ></text>
</g>
<g >
<title>__strlen_avx2 (89 samples, 0.18%; -0.03%)</title><rect x="1023.3" y="245" width="2.1" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="1026.27" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (10 samples, 0.02%; +0.01%)</title><rect x="907.4" y="293" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="910.35" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; +0.00%)</title><rect x="937.5" y="357" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="940.50" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (6 samples, 0.01%; +0.00%)</title><rect x="729.5" y="469" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="732.47" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (7 samples, 0.01%; 0.00%)</title><rect x="961.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="964.62" y="383.5" ></text>
</g>
<g >
<title>table::query (32 samples, 0.07%; +0.00%)</title><rect x="1174.7" y="501" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1177.68" y="511.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (5 samples, 0.01%; 0.00%)</title><rect x="701.2" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="704.16" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.01%; 0.00%)</title><rect x="691.9" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="694.87" y="479.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (39 samples, 0.08%; +0.00%)</title><rect x="1138.2" y="405" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1141.23" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (7 samples, 0.01%; -0.01%)</title><rect x="878.6" y="501" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="881.58" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (121 samples, 0.25%; +0.02%)</title><rect x="1128.3" y="405" width="2.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1131.25" y="415.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (19 samples, 0.04%; +0.01%)</title><rect x="136.5" y="229" width="0.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="139.51" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (19 samples, 0.04%; +0.00%)</title><rect x="718.4" y="453" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="721.39" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (724 samples, 1.50%; -0.00%)</title><rect x="122.9" y="309" width="17.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="125.88" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (46 samples, 0.10%; -0.01%)</title><rect x="799.6" y="245" width="1.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="802.59" y="255.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (140 samples, 0.29%; +0.09%)</title><rect x="341.9" y="165" width="3.4" height="15.0" fill="rgb(255,90,90)" rx="2" ry="2" />
<text  x="344.92" y="175.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (116 samples, 0.24%; -0.00%)</title><rect x="713.1" y="437" width="2.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="716.10" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (23 samples, 0.05%; -0.01%)</title><rect x="214.2" y="149" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="217.16" y="159.5" ></text>
</g>
<g >
<title>operator new (139 samples, 0.29%; -0.00%)</title><rect x="1016.7" y="277" width="3.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1019.69" y="287.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (38 samples, 0.08%; +0.00%)</title><rect x="936.6" y="341" width="0.9" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="939.57" y="351.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (34 samples, 0.07%; -0.03%)</title><rect x="385.3" y="165" width="0.8" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="388.29" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (5 samples, 0.01%; +0.01%)</title><rect x="1148.6" y="485" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1151.56" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (5 samples, 0.01%; -0.01%)</title><rect x="789.7" y="341" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="792.65" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (19 samples, 0.04%; -0.00%)</title><rect x="692.1" y="453" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="695.14" y="463.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (75 samples, 0.16%; -0.01%)</title><rect x="63.9" y="453" width="1.9" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="66.92" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (8 samples, 0.02%; +0.01%)</title><rect x="241.0" y="181" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="243.97" y="191.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (71 samples, 0.15%; +0.00%)</title><rect x="658.3" y="437" width="1.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="661.25" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (15 samples, 0.03%; +0.01%)</title><rect x="279.6" y="357" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="282.63" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (14 samples, 0.03%; +0.01%)</title><rect x="828.9" y="293" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="831.94" y="303.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.03%; +0.00%)</title><rect x="851.6" y="373" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="854.55" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (74 samples, 0.15%; +0.00%)</title><rect x="633.7" y="485" width="1.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="636.71" y="495.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (53 samples, 0.11%; +0.01%)</title><rect x="807.7" y="213" width="1.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="810.68" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.00%)</title><rect x="940.9" y="373" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="943.87" y="383.5" ></text>
</g>
<g >
<title>reader_permit::consume (12 samples, 0.02%; -0.01%)</title><rect x="211.3" y="149" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="214.30" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5,212 samples, 10.81%; +0.01%)</title><rect x="288.3" y="325" width="127.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="291.34" y="335.5" >seastar::interna..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (7 samples, 0.01%; +0.01%)</title><rect x="836.6" y="341" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="839.55" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (6 samples, 0.01%; -0.03%)</title><rect x="256.3" y="309" width="0.2" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="259.31" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (7 samples, 0.01%; +0.00%)</title><rect x="101.7" y="421" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="104.67" y="431.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (26 samples, 0.05%; +0.01%)</title><rect x="874.5" y="437" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="877.50" y="447.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (42 samples, 0.09%; -0.01%)</title><rect x="947.4" y="373" width="1.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="950.38" y="383.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (5 samples, 0.01%; +0.01%)</title><rect x="831.6" y="325" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="834.56" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (17 samples, 0.04%; -0.01%)</title><rect x="669.3" y="485" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="672.31" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (14 samples, 0.03%; +0.01%)</title><rect x="229.5" y="245" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="232.50" y="255.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (617 samples, 1.28%; +0.01%)</title><rect x="1030.3" y="245" width="15.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1033.34" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (7 samples, 0.01%; +0.00%)</title><rect x="678.9" y="469" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="681.92" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.02%; +0.00%)</title><rect x="931.2" y="341" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="934.23" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (11 samples, 0.02%; -0.01%)</title><rect x="317.8" y="197" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="320.84" y="207.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (8 samples, 0.02%; -0.02%)</title><rect x="1040.5" y="197" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1043.47" y="207.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (12 samples, 0.02%; +0.01%)</title><rect x="924.8" y="373" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="927.85" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (7 samples, 0.01%; 0.00%)</title><rect x="695.3" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.27" y="287.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (65 samples, 0.13%; +0.01%)</title><rect x="875.5" y="453" width="1.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="878.45" y="463.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (33 samples, 0.07%; -0.00%)</title><rect x="820.1" y="229" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="823.09" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (65 samples, 0.13%; -0.01%)</title><rect x="949.6" y="389" width="1.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="952.56" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (427 samples, 0.89%; +0.02%)</title><rect x="900.8" y="325" width="10.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="903.82" y="335.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (13 samples, 0.03%; +0.01%)</title><rect x="215.4" y="117" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="218.36" y="127.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (48 samples, 0.10%; 0.00%)</title><rect x="860.7" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.68" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (15 samples, 0.03%; +0.01%)</title><rect x="863.1" y="373" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="866.15" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (482 samples, 1.00%; -0.00%)</title><rect x="562.5" y="325" width="11.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="565.52" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; -0.02%)</title><rect x="912.8" y="341" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="915.84" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (20 samples, 0.04%; -0.01%)</title><rect x="728.3" y="389" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="731.29" y="399.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (243 samples, 0.50%; +0.01%)</title><rect x="734.7" y="421" width="5.9" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="737.68" y="431.5" ></text>
</g>
<g >
<title>std::type_info::operator== (8 samples, 0.02%; +0.00%)</title><rect x="1051.1" y="261" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1054.14" y="271.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (419 samples, 0.87%; +0.01%)</title><rect x="66.2" y="453" width="10.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="69.17" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5,266 samples, 10.92%; +0.00%)</title><rect x="287.5" y="373" width="128.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="290.51" y="383.5" >flat_mutation_re..</text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (330 samples, 0.68%; -0.02%)</title><rect x="377.0" y="165" width="8.0" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="379.98" y="175.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (9 samples, 0.02%; +0.01%)</title><rect x="324.4" y="181" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="327.40" y="191.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (189 samples, 0.39%; -0.02%)</title><rect x="96.2" y="437" width="4.6" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="99.17" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (91 samples, 0.19%; -0.01%)</title><rect x="763.1" y="405" width="2.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="766.11" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,218 samples, 4.60%; -0.00%)</title><rect x="163.8" y="197" width="54.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="166.81" y="207.5" >parti..</text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (5 samples, 0.01%; 0.00%)</title><rect x="17.2" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.17" y="303.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (16 samples, 0.03%; +0.01%)</title><rect x="574.8" y="373" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="577.75" y="383.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (11 samples, 0.02%; +0.01%)</title><rect x="80.7" y="453" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="83.68" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (93 samples, 0.19%; -0.00%)</title><rect x="816.0" y="149" width="2.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="819.00" y="159.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (19 samples, 0.04%; -0.00%)</title><rect x="713.9" y="405" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="716.93" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="34.0" y="485" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="37.05" y="495.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (34 samples, 0.07%; 0.00%)</title><rect x="492.5" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="495.55" y="319.5" ></text>
</g>
<g >
<title>operator delete (25 samples, 0.05%; -0.01%)</title><rect x="835.2" y="373" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="838.16" y="383.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (56 samples, 0.12%; -0.00%)</title><rect x="559.2" y="325" width="1.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="562.24" y="335.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (6 samples, 0.01%; 0.00%)</title><rect x="513.8" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="516.83" y="239.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (6 samples, 0.01%; -0.01%)</title><rect x="865.3" y="405" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="868.30" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (11 samples, 0.02%; +0.01%)</title><rect x="1137.3" y="421" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1140.25" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (5 samples, 0.01%; +0.01%)</title><rect x="845.6" y="309" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="848.56" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (8 samples, 0.02%; +0.01%)</title><rect x="1135.2" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1138.25" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (10 samples, 0.02%; +0.00%)</title><rect x="614.5" y="421" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="617.48" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (13 samples, 0.03%; +0.00%)</title><rect x="279.3" y="357" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="282.31" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.02%; -0.00%)</title><rect x="823.7" y="277" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="826.73" y="287.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (103 samples, 0.21%; -0.00%)</title><rect x="804.1" y="197" width="2.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="807.11" y="207.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (9 samples, 0.02%; -0.01%)</title><rect x="685.0" y="485" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="688.04" y="495.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (39 samples, 0.08%; +0.00%)</title><rect x="763.9" y="373" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="766.94" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (9 samples, 0.02%; -0.01%)</title><rect x="1002.2" y="325" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1005.23" y="335.5" ></text>
</g>
<g >
<title>dht::tri_compare (106 samples, 0.22%; -0.01%)</title><rect x="1089.4" y="229" width="2.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1092.38" y="239.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (16 samples, 0.03%; +0.03%)</title><rect x="485.6" y="213" width="0.4" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="488.58" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::stats (36 samples, 0.07%; +0.01%)</title><rect x="532.8" y="293" width="0.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="535.79" y="303.5" ></text>
</g>
<g >
<title>seastar::gate::leave (5 samples, 0.01%; 0.00%)</title><rect x="613.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="616.14" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (70 samples, 0.15%; -0.00%)</title><rect x="1117.3" y="341" width="1.7" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1120.31" y="351.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (29 samples, 0.06%; -0.01%)</title><rect x="463.6" y="293" width="0.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="466.58" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (24 samples, 0.05%; -0.01%)</title><rect x="461.5" y="309" width="0.6" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="464.53" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (13 samples, 0.03%; -0.01%)</title><rect x="1080.6" y="293" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1083.64" y="303.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (72 samples, 0.15%; -0.01%)</title><rect x="780.8" y="357" width="1.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="783.82" y="367.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (12 samples, 0.02%; -0.01%)</title><rect x="690.4" y="453" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="693.37" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (78 samples, 0.16%; +0.09%)</title><rect x="367.8" y="165" width="1.9" height="15.0" fill="rgb(255,81,81)" rx="2" ry="2" />
<text  x="370.75" y="175.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (32 samples, 0.07%; +0.00%)</title><rect x="1032.9" y="197" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1035.93" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (11 samples, 0.02%; -0.00%)</title><rect x="672.3" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="675.27" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (24 samples, 0.05%; +0.00%)</title><rect x="610.5" y="437" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="613.54" y="447.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (274 samples, 0.57%; -0.02%)</title><rect x="446.9" y="309" width="6.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="449.87" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (9 samples, 0.02%; +0.01%)</title><rect x="1032.7" y="197" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1035.71" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (7 samples, 0.01%; +0.01%)</title><rect x="422.7" y="405" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="425.73" y="415.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (78 samples, 0.16%; +0.01%)</title><rect x="763.4" y="389" width="1.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="766.43" y="399.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (47 samples, 0.10%; +0.00%)</title><rect x="98.1" y="405" width="1.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="101.12" y="415.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (69 samples, 0.14%; +0.02%)</title><rect x="479.3" y="213" width="1.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="482.29" y="223.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (178 samples, 0.37%; -0.00%)</title><rect x="15.3" y="389" width="4.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="18.33" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (23,586 samples, 48.90%; +0.09%)</title><rect x="55.7" y="469" width="577.0" height="15.0" fill="rgb(255,90,90)" rx="2" ry="2" />
<text  x="58.70" y="479.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>mutation_fragment::operator= (36 samples, 0.07%; +0.00%)</title><rect x="160.9" y="229" width="0.9" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="163.93" y="239.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (9 samples, 0.02%; +0.01%)</title><rect x="752.6" y="341" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="755.56" y="351.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (12 samples, 0.02%; -0.01%)</title><rect x="608.5" y="405" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="611.54" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (9 samples, 0.02%; +0.01%)</title><rect x="1050.2" y="277" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1053.16" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (10 samples, 0.02%; -0.00%)</title><rect x="19.0" y="341" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="22.03" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (14 samples, 0.03%; +0.01%)</title><rect x="655.3" y="373" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="658.27" y="383.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.05%; +0.02%)</title><rect x="671.7" y="437" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="674.71" y="447.5" ></text>
</g>
<g >
<title>operator delete (25 samples, 0.05%; -0.02%)</title><rect x="593.6" y="389" width="0.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="596.59" y="399.5" ></text>
</g>
<g >
<title>operator new (109 samples, 0.23%; -0.00%)</title><rect x="153.8" y="213" width="2.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="156.83" y="223.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (6 samples, 0.01%; -0.01%)</title><rect x="196.6" y="85" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="199.60" y="95.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (14 samples, 0.03%; -0.00%)</title><rect x="95.0" y="421" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="98.04" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (13 samples, 0.03%; +0.01%)</title><rect x="639.6" y="469" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="642.61" y="479.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.05%; +0.00%)</title><rect x="52.7" y="469" width="0.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="55.72" y="479.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (29 samples, 0.06%; +0.00%)</title><rect x="1068.8" y="277" width="0.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1071.75" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%; +0.01%)</title><rect x="913.0" y="357" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="915.96" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1,266 samples, 2.62%; -0.01%)</title><rect x="171.4" y="133" width="31.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="174.42" y="143.5" >co..</text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (10 samples, 0.02%; -0.01%)</title><rect x="132.2" y="245" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="135.18" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (6 samples, 0.01%; +0.01%)</title><rect x="276.3" y="309" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="279.28" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (58 samples, 0.12%; -0.01%)</title><rect x="765.5" y="389" width="1.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="768.48" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.00%)</title><rect x="137.4" y="245" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="140.39" y="255.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (17 samples, 0.04%; +0.01%)</title><rect x="923.6" y="341" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="926.55" y="351.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; +0.00%)</title><rect x="622.0" y="389" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="625.02" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (7 samples, 0.01%; +0.00%)</title><rect x="646.4" y="469" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="649.39" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (6,399 samples, 13.27%; -0.05%)</title><rect x="954.5" y="421" width="156.5" height="15.0" fill="rgb(137,137,255)" rx="2" ry="2" />
<text  x="957.47" y="431.5" >cql3::statements::se..</text>
</g>
<g >
<title>operator delete (28 samples, 0.06%; +0.01%)</title><rect x="641.9" y="469" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="644.86" y="479.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (27 samples, 0.06%; 0.00%)</title><rect x="694.9" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.95" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (5 samples, 0.01%; 0.00%)</title><rect x="664.5" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="667.47" y="479.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (19 samples, 0.04%; -0.01%)</title><rect x="196.3" y="101" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="199.28" y="111.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (7 samples, 0.01%; +0.00%)</title><rect x="862.7" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="865.68" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (21 samples, 0.04%; +0.02%)</title><rect x="145.4" y="245" width="0.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="148.41" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (5 samples, 0.01%; -0.01%)</title><rect x="419.8" y="373" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="422.77" y="383.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (10 samples, 0.02%; +0.01%)</title><rect x="1100.1" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1103.09" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (92 samples, 0.19%; 0.00%)</title><rect x="946.2" y="389" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="949.16" y="399.5" ></text>
</g>
<g >
<title>reader_permit::consume (30 samples, 0.06%; -0.01%)</title><rect x="392.1" y="229" width="0.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="395.10" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (8 samples, 0.02%; +0.01%)</title><rect x="1042.2" y="229" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1045.21" y="239.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (53 samples, 0.11%; +0.00%)</title><rect x="814.7" y="149" width="1.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="817.66" y="159.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (5 samples, 0.01%; +0.01%)</title><rect x="655.7" y="405" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="658.71" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (2,304 samples, 4.78%; -0.02%)</title><rect x="1002.5" y="325" width="56.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1005.50" y="335.5" >servi..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (10 samples, 0.02%; -0.03%)</title><rect x="244.5" y="213" width="0.2" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="247.47" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (11 samples, 0.02%; -0.01%)</title><rect x="201.7" y="101" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="204.68" y="111.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (18 samples, 0.04%; +0.02%)</title><rect x="1050.4" y="277" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1053.38" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (28 samples, 0.06%; +0.02%)</title><rect x="616.1" y="437" width="0.7" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="619.12" y="447.5" ></text>
</g>
<g >
<title>[unknown] (161 samples, 0.33%; 0.00%)</title><rect x="10.3" y="597" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.29" y="607.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (186 samples, 0.39%; -0.01%)</title><rect x="468.6" y="277" width="4.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="471.57" y="287.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (16 samples, 0.03%; +0.01%)</title><rect x="1142.6" y="501" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1145.59" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (6 samples, 0.01%; -0.00%)</title><rect x="192.7" y="53" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="195.71" y="63.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (5 samples, 0.01%; +0.01%)</title><rect x="62.9" y="453" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="65.87" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.02%; +0.01%)</title><rect x="826.8" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="829.79" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.01%)</title><rect x="591.0" y="389" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="594.02" y="399.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (5 samples, 0.01%; 0.00%)</title><rect x="1139.3" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.26" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (7 samples, 0.01%; +0.01%)</title><rect x="761.7" y="389" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="764.69" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (31 samples, 0.06%; +0.01%)</title><rect x="289.0" y="277" width="0.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="292.02" y="287.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (85 samples, 0.18%; -0.00%)</title><rect x="413.7" y="293" width="2.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="416.72" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (9 samples, 0.02%; +0.01%)</title><rect x="865.5" y="437" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="868.50" y="447.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (5 samples, 0.01%; 0.00%)</title><rect x="881.7" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.74" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (131 samples, 0.27%; -0.01%)</title><rect x="840.1" y="325" width="3.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="843.10" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (7 samples, 0.01%; +0.00%)</title><rect x="418.2" y="357" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="421.15" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (53 samples, 0.11%; +0.00%)</title><rect x="1161.3" y="453" width="1.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1164.25" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (6 samples, 0.01%; +0.01%)</title><rect x="676.6" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="679.65" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (20 samples, 0.04%; +0.01%)</title><rect x="643.5" y="453" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="646.50" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.01%)</title><rect x="522.1" y="309" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="525.08" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (25 samples, 0.05%; +0.01%)</title><rect x="618.5" y="421" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="621.52" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (108 samples, 0.22%; +0.04%)</title><rect x="193.1" y="117" width="2.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="196.07" y="127.5" ></text>
</g>
<g >
<title>operator new (96 samples, 0.20%; 0.00%)</title><rect x="990.1" y="293" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="993.10" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (8 samples, 0.02%; +0.01%)</title><rect x="410.9" y="277" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="413.93" y="287.5" ></text>
</g>
<g >
<title>__dynamic_cast (16 samples, 0.03%; -0.01%)</title><rect x="652.5" y="469" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="655.45" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (79 samples, 0.16%; +0.00%)</title><rect x="549.9" y="357" width="2.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="552.92" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (216 samples, 0.45%; -0.02%)</title><rect x="619.4" y="437" width="5.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="622.35" y="447.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.05%; -0.02%)</title><rect x="680.4" y="453" width="0.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="683.37" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (6 samples, 0.01%; 0.00%)</title><rect x="877.7" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="880.70" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (10 samples, 0.02%; +0.00%)</title><rect x="253.9" y="261" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="256.94" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (15 samples, 0.03%; +0.01%)</title><rect x="24.2" y="517" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="27.19" y="527.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (207 samples, 0.43%; -0.01%)</title><rect x="711.3" y="453" width="5.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="714.32" y="463.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (23 samples, 0.05%; -0.01%)</title><rect x="772.8" y="309" width="0.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="775.77" y="319.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (96 samples, 0.20%; +0.01%)</title><rect x="379.9" y="149" width="2.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="382.94" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.00%)</title><rect x="679.7" y="453" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="682.68" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (57 samples, 0.12%; +0.00%)</title><rect x="944.2" y="405" width="1.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="947.15" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (20 samples, 0.04%; 0.00%)</title><rect x="1129.9" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.91" y="383.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (19 samples, 0.04%; 0.00%)</title><rect x="1050.9" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1053.87" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (8 samples, 0.02%; 0.00%)</title><rect x="493.4" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="496.38" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (20 samples, 0.04%; -0.01%)</title><rect x="984.6" y="357" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="987.59" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (6 samples, 0.01%; +0.00%)</title><rect x="46.4" y="485" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="49.38" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.05%; +0.01%)</title><rect x="615.1" y="405" width="0.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="618.12" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (197 samples, 0.41%; -0.01%)</title><rect x="771.2" y="357" width="4.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="774.21" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (7 samples, 0.01%; +0.00%)</title><rect x="1110.8" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1113.81" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (360 samples, 0.75%; -0.01%)</title><rect x="67.2" y="421" width="8.9" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="70.25" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (44 samples, 0.09%; -0.01%)</title><rect x="851.1" y="389" width="1.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="854.09" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (6 samples, 0.01%; -0.01%)</title><rect x="950.0" y="341" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="953.00" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (9 samples, 0.02%; -0.01%)</title><rect x="273.0" y="293" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="275.95" y="303.5" ></text>
</g>
<g >
<title>seastar::gate::leave (5 samples, 0.01%; +0.01%)</title><rect x="65.5" y="421" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="68.49" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.05%; -0.04%)</title><rect x="492.7" y="277" width="0.7" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="495.75" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (12 samples, 0.02%; -0.01%)</title><rect x="633.4" y="469" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="636.39" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::run (47,213 samples, 97.89%; 0.00%)</title><rect x="22.1" y="549" width="1155.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.09" y="559.5" >seastar::reactor::run</text>
</g>
<g >
<title>dht::sharder::shard_of (16 samples, 0.03%; +0.02%)</title><rect x="1009.2" y="293" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1012.18" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (24 samples, 0.05%; 0.00%)</title><rect x="1139.2" y="325" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.23" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (28 samples, 0.06%; +0.01%)</title><rect x="325.5" y="181" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="328.45" y="191.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (17 samples, 0.04%; -0.00%)</title><rect x="1114.7" y="357" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1117.72" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (132 samples, 0.27%; +0.00%)</title><rect x="438.8" y="277" width="3.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="441.75" y="287.5" ></text>
</g>
<g >
<title>operator new (16 samples, 0.03%; -0.00%)</title><rect x="791.0" y="309" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="794.02" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; +0.01%)</title><rect x="591.5" y="389" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="594.46" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (78 samples, 0.16%; +0.02%)</title><rect x="1075.0" y="309" width="1.9" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1077.97" y="319.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (83 samples, 0.17%; +0.01%)</title><rect x="135.4" y="245" width="2.0" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="138.36" y="255.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (6 samples, 0.01%; 0.00%)</title><rect x="1045.9" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1048.95" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="970.1" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="973.13" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (18 samples, 0.04%; +0.02%)</title><rect x="942.3" y="389" width="0.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="945.34" y="399.5" ></text>
</g>
<g >
<title>auth::get_permissions (1,266 samples, 2.62%; -0.01%)</title><rect x="795.8" y="309" width="31.0" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="798.82" y="319.5" >au..</text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (8 samples, 0.02%; +0.00%)</title><rect x="226.6" y="229" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="229.56" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (5 samples, 0.01%; -0.01%)</title><rect x="420.8" y="389" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="423.84" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (8 samples, 0.02%; +0.01%)</title><rect x="263.8" y="309" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="266.85" y="319.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (49 samples, 0.10%; 0.00%)</title><rect x="930.0" y="325" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="933.03" y="335.5" ></text>
</g>
<g >
<title>database::query (1,015 samples, 2.10%; +0.01%)</title><rect x="1021.1" y="261" width="24.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1024.12" y="271.5" >d..</text>
</g>
<g >
<title>operator delete (29 samples, 0.06%; -0.01%)</title><rect x="672.7" y="421" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="675.69" y="431.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (87 samples, 0.18%; -0.00%)</title><rect x="629.8" y="421" width="2.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="632.80" y="431.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (10 samples, 0.02%; -0.00%)</title><rect x="923.3" y="325" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="926.31" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (68 samples, 0.14%; -0.03%)</title><rect x="532.0" y="309" width="1.7" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="535.01" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (8 samples, 0.02%; 0.00%)</title><rect x="692.7" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="695.75" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="1148.4" y="485" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1151.36" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (12 samples, 0.02%; +0.01%)</title><rect x="610.3" y="437" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="613.25" y="447.5" ></text>
</g>
<g >
<title>compound_type&lt; (143 samples, 0.30%; +0.01%)</title><rect x="934.3" y="373" width="3.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="937.32" y="383.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (257 samples, 0.53%; +0.02%)</title><rect x="866.0" y="453" width="6.3" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="869.01" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (36 samples, 0.07%; 0.00%)</title><rect x="754.8" y="293" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="757.84" y="303.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.05%; +0.01%)</title><rect x="1145.6" y="485" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1148.60" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;mutation_fragment*&gt;::take_value (8 samples, 0.02%; +0.01%)</title><rect x="421.3" y="405" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="424.33" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (18 samples, 0.04%; -0.01%)</title><rect x="1080.1" y="293" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1083.10" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (5 samples, 0.01%; +0.00%)</title><rect x="745.4" y="389" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="748.37" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (12 samples, 0.02%; +0.01%)</title><rect x="1036.0" y="149" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1039.04" y="159.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (461 samples, 0.96%; +0.01%)</title><rect x="696.1" y="501" width="11.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="699.15" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (35 samples, 0.07%; 0.00%)</title><rect x="15.6" y="293" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.55" y="303.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (10 samples, 0.02%; +0.01%)</title><rect x="566.0" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="568.99" y="303.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (33 samples, 0.07%; +0.01%)</title><rect x="1048.8" y="261" width="0.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1051.79" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (18 samples, 0.04%; 0.00%)</title><rect x="695.0" y="325" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.02" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (18 samples, 0.04%; -0.00%)</title><rect x="595.3" y="389" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="598.28" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (20 samples, 0.04%; +0.00%)</title><rect x="1057.6" y="293" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1060.59" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (8 samples, 0.02%; +0.01%)</title><rect x="260.0" y="341" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="262.96" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (36 samples, 0.07%; +0.01%)</title><rect x="264.9" y="357" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="267.93" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (50 samples, 0.10%; -0.00%)</title><rect x="1055.5" y="245" width="1.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1058.47" y="255.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (61 samples, 0.13%; +0.02%)</title><rect x="519.9" y="293" width="1.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="522.88" y="303.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (138 samples, 0.29%; -0.04%)</title><rect x="980.3" y="341" width="3.4" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="983.31" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (12 samples, 0.02%; +0.01%)</title><rect x="999.9" y="261" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1002.88" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (75 samples, 0.16%; +0.00%)</title><rect x="142.5" y="261" width="1.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="145.50" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (9 samples, 0.02%; -0.01%)</title><rect x="1134.9" y="421" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1137.93" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (39 samples, 0.08%; -0.00%)</title><rect x="1138.2" y="453" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1141.23" y="463.5" ></text>
</g>
<g >
<title>schema_registry::get (158 samples, 0.33%; -0.00%)</title><rect x="980.1" y="357" width="3.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="983.11" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (6 samples, 0.01%; +0.01%)</title><rect x="770.8" y="357" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="773.84" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="684.8" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="687.84" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="41.7" y="469" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="44.66" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (495 samples, 1.03%; +0.02%)</title><rect x="900.4" y="341" width="12.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="903.43" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (187 samples, 0.39%; +0.00%)</title><rect x="15.2" y="421" width="4.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="18.21" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (11 samples, 0.02%; 0.00%)</title><rect x="719.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="722.29" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (6 samples, 0.01%; 0.00%)</title><rect x="222.7" y="117" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="225.67" y="127.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (10 samples, 0.02%; -0.04%)</title><rect x="125.2" y="261" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="128.16" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (174 samples, 0.36%; -0.01%)</title><rect x="735.3" y="373" width="4.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="738.34" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (19 samples, 0.04%; +0.00%)</title><rect x="570.2" y="277" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="573.18" y="287.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (14 samples, 0.03%; -0.03%)</title><rect x="332.5" y="181" width="0.3" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="335.50" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; -0.01%)</title><rect x="417.4" y="325" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="420.44" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (16 samples, 0.03%; +0.00%)</title><rect x="1033.3" y="165" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1036.33" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (12 samples, 0.02%; -0.01%)</title><rect x="1105.4" y="357" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1108.42" y="367.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (22 samples, 0.05%; +0.01%)</title><rect x="211.1" y="165" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="214.05" y="175.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (12 samples, 0.02%; +0.01%)</title><rect x="485.3" y="213" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="488.28" y="223.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (249 samples, 0.52%; +0.02%)</title><rect x="249.4" y="293" width="6.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="252.39" y="303.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (8 samples, 0.02%; +0.00%)</title><rect x="533.7" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="536.68" y="319.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (257 samples, 0.53%; +0.02%)</title><rect x="203.4" y="165" width="6.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="206.42" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (6 samples, 0.01%; +0.01%)</title><rect x="988.3" y="341" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="991.33" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (135 samples, 0.28%; +0.01%)</title><rect x="1016.8" y="261" width="3.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1019.79" y="271.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (75 samples, 0.16%; -0.01%)</title><rect x="150.7" y="213" width="1.9" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="153.75" y="223.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (23 samples, 0.05%; +0.01%)</title><rect x="820.3" y="213" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="823.33" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (7 samples, 0.01%; +0.00%)</title><rect x="438.6" y="261" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="441.58" y="271.5" ></text>
</g>
<g >
<title>create_partitions (282 samples, 0.58%; 0.00%)</title><rect x="14.6" y="533" width="6.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.65" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (21 samples, 0.04%; +0.02%)</title><rect x="326.1" y="181" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="329.14" y="191.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (9 samples, 0.02%; +0.01%)</title><rect x="715.5" y="421" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="718.48" y="431.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (25 samples, 0.05%; -0.00%)</title><rect x="587.1" y="405" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="590.13" y="415.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (79 samples, 0.16%; -0.01%)</title><rect x="416.4" y="373" width="1.9" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="419.39" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (8 samples, 0.02%; +0.00%)</title><rect x="631.7" y="389" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="634.68" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (82 samples, 0.17%; +0.00%)</title><rect x="685.3" y="485" width="2.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="688.26" y="495.5" ></text>
</g>
<g >
<title>query::querier&lt; (18,537 samples, 38.43%; +0.10%)</title><rect x="101.8" y="437" width="453.6" height="15.0" fill="rgb(255,64,64)" rx="2" ry="2" />
<text  x="104.84" y="447.5" >query::querier&lt;</text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (10 samples, 0.02%; -0.01%)</title><rect x="945.5" y="405" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="948.54" y="415.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (5,845 samples, 12.12%; -0.01%)</title><rect x="729.7" y="469" width="143.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="732.66" y="479.5" >single_node_cql_en..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (11 samples, 0.02%; 0.00%)</title><rect x="880.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.57" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (36 samples, 0.07%; 0.00%)</title><rect x="15.5" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.53" y="319.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (182 samples, 0.38%; -0.00%)</title><rect x="866.4" y="437" width="4.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="869.45" y="447.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (16 samples, 0.03%; +0.01%)</title><rect x="739.2" y="293" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="742.16" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (113 samples, 0.23%; +0.01%)</title><rect x="748.0" y="373" width="2.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="750.96" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::reset (13 samples, 0.03%; +0.01%)</title><rect x="605.3" y="389" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="608.26" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (15 samples, 0.03%; +0.01%)</title><rect x="202.0" y="117" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="205.03" y="127.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (13 samples, 0.03%; +0.01%)</title><rect x="1066.0" y="309" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1068.96" y="319.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (82 samples, 0.17%; -0.08%)</title><rect x="361.4" y="165" width="2.0" height="15.0" fill="rgb(93,93,255)" rx="2" ry="2" />
<text  x="364.39" y="175.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (11 samples, 0.02%; +0.00%)</title><rect x="666.8" y="453" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="669.81" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (24 samples, 0.05%; -0.01%)</title><rect x="847.1" y="421" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="850.15" y="431.5" ></text>
</g>
<g >
<title>query::digester::digester (41 samples, 0.09%; +0.01%)</title><rect x="601.1" y="405" width="1.0" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="604.08" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (15 samples, 0.03%; 0.00%)</title><rect x="818.6" y="213" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.64" y="223.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (446 samples, 0.92%; -0.01%)</title><rect x="396.0" y="245" width="10.9" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="398.99" y="255.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (12 samples, 0.02%; +0.00%)</title><rect x="807.4" y="213" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="810.39" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (30 samples, 0.06%; -0.02%)</title><rect x="212.5" y="165" width="0.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="215.50" y="175.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (33 samples, 0.07%; +0.03%)</title><rect x="805.7" y="133" width="0.8" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="808.65" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (30 samples, 0.06%; +0.01%)</title><rect x="1076.1" y="293" width="0.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1079.14" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (157 samples, 0.33%; +0.01%)</title><rect x="365.9" y="197" width="3.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="368.92" y="207.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (31 samples, 0.06%; +0.00%)</title><rect x="1120.3" y="389" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1123.27" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (13 samples, 0.03%; +0.00%)</title><rect x="885.3" y="453" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="888.34" y="463.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (9 samples, 0.02%; -0.02%)</title><rect x="410.3" y="229" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="413.30" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (10 samples, 0.02%; +0.01%)</title><rect x="315.2" y="149" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="318.18" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (20 samples, 0.04%; +0.01%)</title><rect x="78.8" y="453" width="0.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="81.77" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (30 samples, 0.06%; +0.00%)</title><rect x="18.1" y="309" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="21.15" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (26 samples, 0.05%; +0.01%)</title><rect x="808.3" y="181" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="811.30" y="191.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (39 samples, 0.08%; 0.00%)</title><rect x="1138.2" y="485" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.23" y="495.5" ></text>
</g>
<g >
<title>freeze (7 samples, 0.01%; 0.00%)</title><rect x="1139.6" y="197" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.55" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (518 samples, 1.07%; -0.03%)</title><rect x="265.8" y="357" width="12.7" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="268.83" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (12 samples, 0.02%; +0.01%)</title><rect x="35.2" y="453" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="38.17" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="591.2" y="405" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="594.24" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (39 samples, 0.08%; -0.02%)</title><rect x="745.7" y="373" width="1.0" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="748.71" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (20 samples, 0.04%; +0.02%)</title><rect x="227.5" y="229" width="0.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="230.52" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (19 samples, 0.04%; -0.01%)</title><rect x="783.5" y="341" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="786.51" y="351.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (156 samples, 0.32%; -0.01%)</title><rect x="69.6" y="405" width="3.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="72.57" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (20 samples, 0.04%; -0.01%)</title><rect x="736.2" y="309" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="739.25" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (10 samples, 0.02%; -0.01%)</title><rect x="256.0" y="293" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="259.00" y="303.5" ></text>
</g>
<g >
<title>operator new (36 samples, 0.07%; -0.01%)</title><rect x="860.9" y="405" width="0.9" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="863.92" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (14 samples, 0.03%; -0.01%)</title><rect x="259.3" y="325" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="262.35" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (28 samples, 0.06%; +0.01%)</title><rect x="822.6" y="229" width="0.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="825.61" y="239.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (193 samples, 0.40%; -0.02%)</title><rect x="354.2" y="165" width="4.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="357.17" y="175.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (40 samples, 0.08%; -0.00%)</title><rect x="853.6" y="437" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="856.58" y="447.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (7 samples, 0.01%; +0.01%)</title><rect x="15.9" y="245" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="18.95" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="326.9" y="165" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="329.92" y="175.5" ></text>
</g>
<g >
<title>reader_permit::mark_unused (8 samples, 0.02%; +0.01%)</title><rect x="65.8" y="453" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="68.76" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (7 samples, 0.01%; +0.01%)</title><rect x="1121.2" y="389" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1124.16" y="399.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (6 samples, 0.01%; 0.00%)</title><rect x="1139.6" y="149" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.55" y="159.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (5 samples, 0.01%; 0.00%)</title><rect x="20.4" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.37" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (6 samples, 0.01%; +0.01%)</title><rect x="486.4" y="325" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="489.36" y="335.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; +0.01%)</title><rect x="620.5" y="421" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="623.50" y="431.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (10 samples, 0.02%; +0.00%)</title><rect x="531.1" y="277" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="534.08" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (5,395 samples, 11.19%; +0.03%)</title><rect x="974.2" y="373" width="132.0" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="977.24" y="383.5" >service::storage..</text>
</g>
<g >
<title>mutation_reader_merger::operator (7 samples, 0.01%; +0.00%)</title><rect x="122.7" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="125.71" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (10 samples, 0.02%; +0.00%)</title><rect x="656.8" y="373" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="659.78" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (48 samples, 0.10%; -0.01%)</title><rect x="627.6" y="421" width="1.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="630.62" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (14 samples, 0.03%; +0.01%)</title><rect x="80.3" y="453" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="83.31" y="463.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (11 samples, 0.02%; +0.01%)</title><rect x="706.7" y="453" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="709.72" y="463.5" ></text>
</g>
<g >
<title>operator new (37 samples, 0.08%; -0.00%)</title><rect x="944.6" y="373" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="947.59" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (43 samples, 0.09%; 0.00%)</title><rect x="735.7" y="341" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="738.71" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (84 samples, 0.17%; +0.02%)</title><rect x="844.0" y="325" width="2.1" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="847.04" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (12 samples, 0.02%; -0.01%)</title><rect x="703.7" y="453" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="706.73" y="463.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN4cql34expr10expressionEEER18overloaded_functorIJZNS5_18prepare_expressionERKS6_R8databaseRKN7seastar13basic_sstringIcjLj15ELb1EEENSD_13lw_shared_ptrINS4_20column_specificationEEEE3$_0ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_1ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_2ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_3ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_4ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_5ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_6ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_7ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_8ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_9ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_10ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_11ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_12ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_13ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_14ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_15EERSt7variantIJNS5_11conjunctionENS5_15binary_operatorENS5_12column_valueENS5_5tokenENS5_21unresolved_identifierENS5_25column_mutation_attributeENS5_13function_callENS5_4castENS5_15field_selectionENS5_4nullENS5_13bind_variableENS5_16untyped_constantENS5_8constantENS5_17tuple_constructorENS5_22collection_constructorENS5_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES12_S1L_ (8 samples, 0.02%; 0.00%)</title><rect x="20.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.98" y="399.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (62 samples, 0.13%; +0.02%)</title><rect x="774.5" y="325" width="1.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="777.46" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (15 samples, 0.03%; +0.01%)</title><rect x="543.6" y="405" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="546.58" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (96 samples, 0.20%; +0.00%)</title><rect x="687.9" y="469" width="2.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="690.93" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; -0.02%)</title><rect x="1154.2" y="421" width="0.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1157.23" y="431.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (201 samples, 0.42%; 0.00%)</title><rect x="14.9" y="453" width="4.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.92" y="463.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (5 samples, 0.01%; -0.00%)</title><rect x="513.3" y="229" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="516.32" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (139 samples, 0.29%; +0.01%)</title><rect x="96.9" y="421" width="3.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="99.92" y="431.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (12 samples, 0.02%; -0.01%)</title><rect x="484.3" y="181" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="487.30" y="191.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (6 samples, 0.01%; -0.01%)</title><rect x="417.3" y="341" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="420.27" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (19 samples, 0.04%; -0.02%)</title><rect x="199.5" y="117" width="0.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="202.53" y="127.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (290 samples, 0.60%; +0.02%)</title><rect x="993.9" y="341" width="7.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="996.94" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (112 samples, 0.23%; +0.00%)</title><rect x="670.7" y="485" width="2.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="673.68" y="495.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::got_cl (8 samples, 0.02%; +0.01%)</title><rect x="704.1" y="469" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="707.07" y="479.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (9 samples, 0.02%; +0.01%)</title><rect x="1057.1" y="277" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1060.06" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; -0.01%)</title><rect x="277.5" y="277" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="280.53" y="287.5" ></text>
</g>
<g >
<title>database::find_keyspace (225 samples, 0.47%; +0.01%)</title><rect x="1065.6" y="341" width="5.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1068.60" y="351.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (6 samples, 0.01%; 0.00%)</title><rect x="1139.2" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.23" y="287.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (82 samples, 0.17%; +0.01%)</title><rect x="545.9" y="389" width="2.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="548.88" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (7 samples, 0.01%; 0.00%)</title><rect x="1139.2" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.23" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (14 samples, 0.03%; -0.03%)</title><rect x="518.1" y="309" width="0.4" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="521.14" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (5 samples, 0.01%; -0.00%)</title><rect x="885.7" y="469" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="888.65" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (23 samples, 0.05%; +0.02%)</title><rect x="280.2" y="357" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="283.24" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (38 samples, 0.08%; -0.01%)</title><rect x="514.0" y="229" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="516.98" y="239.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (32 samples, 0.07%; +0.01%)</title><rect x="228.7" y="245" width="0.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="231.72" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (51 samples, 0.11%; +0.01%)</title><rect x="793.0" y="309" width="1.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="795.96" y="319.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (6 samples, 0.01%; -0.00%)</title><rect x="1101.2" y="309" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1104.22" y="319.5" ></text>
</g>
<g >
<title>schema::column_at (50 samples, 0.10%; -0.01%)</title><rect x="329.2" y="181" width="1.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="332.22" y="191.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (5 samples, 0.01%; +0.00%)</title><rect x="393.0" y="213" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="396.05" y="223.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::touch (5 samples, 0.01%; -0.01%)</title><rect x="750.6" y="325" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="753.56" y="335.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1,226 samples, 2.54%; -0.01%)</title><rect x="333.4" y="181" width="30.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="336.40" y="191.5" >wr..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (19 samples, 0.04%; -0.01%)</title><rect x="635.5" y="485" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="638.52" y="495.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_digest_requests (6 samples, 0.01%; -0.00%)</title><rect x="1058.9" y="325" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1061.87" y="335.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (11 samples, 0.02%; 0.00%)</title><rect x="1138.3" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.33" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (43 samples, 0.09%; 0.00%)</title><rect x="19.9" y="453" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.88" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (7 samples, 0.01%; 0.00%)</title><rect x="1139.2" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.23" y="303.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (38 samples, 0.08%; -0.00%)</title><rect x="68.2" y="405" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="71.15" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (16 samples, 0.03%; +0.01%)</title><rect x="791.0" y="293" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="794.02" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (26 samples, 0.05%; +0.03%)</title><rect x="766.3" y="373" width="0.6" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="769.26" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (12 samples, 0.02%; +0.01%)</title><rect x="852.7" y="437" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="855.65" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (75 samples, 0.16%; +0.01%)</title><rect x="1004.7" y="245" width="1.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1007.73" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (6 samples, 0.01%; +0.00%)</title><rect x="1000.0" y="245" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1003.03" y="255.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (16 samples, 0.03%; +0.01%)</title><rect x="1016.2" y="261" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1019.25" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (15 samples, 0.03%; +0.00%)</title><rect x="1126.1" y="421" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1129.07" y="431.5" ></text>
</g>
<g >
<title>table::make_reader (4,612 samples, 9.56%; +0.05%)</title><rect x="427.1" y="357" width="112.9" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="430.13" y="367.5" >table::make_r..</text>
</g>
<g >
<title>__tls_init (6 samples, 0.01%; +0.00%)</title><rect x="502.1" y="229" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="505.12" y="239.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (5,235 samples, 10.85%; +0.00%)</title><rect x="287.9" y="341" width="128.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="290.90" y="351.5" >seastar::futuriz..</text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (6,330 samples, 13.12%; -0.03%)</title><rect x="723.2" y="501" width="154.9" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="726.23" y="511.5" >seastar::internal::..</text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (52 samples, 0.11%; -0.01%)</title><rect x="416.9" y="357" width="1.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="419.88" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (6 samples, 0.01%; +0.01%)</title><rect x="913.6" y="357" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="916.59" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (132 samples, 0.27%; +0.03%)</title><rect x="855.5" y="389" width="3.2" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="858.49" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (31 samples, 0.06%; 0.00%)</title><rect x="881.2" y="453" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.23" y="463.5" ></text>
</g>
<g >
<title>local_schema_registry (26 samples, 0.05%; +0.05%)</title><rect x="969.5" y="373" width="0.6" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="972.50" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (13 samples, 0.03%; +0.01%)</title><rect x="716.4" y="453" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="719.40" y="463.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (20 samples, 0.04%; -0.01%)</title><rect x="602.5" y="405" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="605.52" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="31.5" y="485" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="34.50" y="495.5" ></text>
</g>
<g >
<title>auth::resource::parent (80 samples, 0.17%; +0.01%)</title><rect x="792.4" y="325" width="2.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="795.44" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; 0.00%)</title><rect x="697.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.40" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (47 samples, 0.10%; -0.00%)</title><rect x="1157.8" y="405" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1160.78" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (8 samples, 0.02%; +0.00%)</title><rect x="860.5" y="421" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="863.48" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (24 samples, 0.05%; +0.02%)</title><rect x="838.9" y="293" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="841.90" y="303.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (6 samples, 0.01%; +0.01%)</title><rect x="1057.9" y="277" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1060.94" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (6,096 samples, 12.64%; 0.00%)</title><rect x="115.8" y="357" width="149.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="367.5" >mutation_fragment_m..</text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (5 samples, 0.01%; 0.00%)</title><rect x="21.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.84" y="415.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (26 samples, 0.05%; +0.02%)</title><rect x="307.7" y="165" width="0.6" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="310.67" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (11 samples, 0.02%; -0.00%)</title><rect x="1097.7" y="293" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1100.72" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (21 samples, 0.04%; 0.00%)</title><rect x="146.9" y="245" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.91" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (9 samples, 0.02%; 0.00%)</title><rect x="675.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.11" y="479.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (44 samples, 0.09%; +0.06%)</title><rect x="1122.9" y="421" width="1.1" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="1125.94" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.01%; +0.01%)</title><rect x="804.4" y="181" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="807.38" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.05%; -0.00%)</title><rect x="604.3" y="357" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="607.31" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (12 samples, 0.02%; +0.01%)</title><rect x="999.6" y="261" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1002.59" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (15 samples, 0.03%; -0.00%)</title><rect x="443.4" y="277" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="446.37" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (59 samples, 0.12%; +0.02%)</title><rect x="588.7" y="421" width="1.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="591.75" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (72 samples, 0.15%; +0.00%)</title><rect x="705.6" y="485" width="1.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="708.57" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (15 samples, 0.03%; -0.00%)</title><rect x="874.7" y="421" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="877.67" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (9 samples, 0.02%; -0.00%)</title><rect x="140.4" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="143.37" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (19 samples, 0.04%; -0.01%)</title><rect x="618.7" y="405" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="621.67" y="415.5" ></text>
</g>
<g >
<title>query::result::builder::build (67 samples, 0.14%; +0.00%)</title><rect x="596.8" y="437" width="1.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="599.77" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="760.2" y="405" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="763.25" y="415.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (179 samples, 0.37%; +0.04%)</title><rect x="927.1" y="357" width="4.4" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="930.07" y="367.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (13 samples, 0.03%; +0.01%)</title><rect x="896.2" y="405" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="899.20" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (6 samples, 0.01%; -0.00%)</title><rect x="1134.5" y="405" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1137.46" y="415.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (2,828 samples, 5.86%; +0.03%)</title><rect x="777.1" y="405" width="69.2" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="780.13" y="415.5" >service..</text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (27 samples, 0.06%; 0.00%)</title><rect x="1139.2" y="405" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.19" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (7 samples, 0.01%; -0.05%)</title><rect x="897.3" y="389" width="0.2" height="15.0" fill="rgb(137,137,255)" rx="2" ry="2" />
<text  x="900.35" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (6 samples, 0.01%; +0.00%)</title><rect x="629.4" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="632.38" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (272 samples, 0.56%; +0.00%)</title><rect x="578.2" y="373" width="6.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="581.18" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; +0.00%)</title><rect x="779.7" y="357" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="782.72" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.00%)</title><rect x="674.5" y="469" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="677.47" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (7,019 samples, 14.55%; +0.02%)</title><rect x="110.1" y="405" width="171.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="113.09" y="415.5" >flat_mutation_reader::..</text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (38 samples, 0.08%; -0.01%)</title><rect x="760.4" y="405" width="0.9" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="763.37" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (5 samples, 0.01%; -0.05%)</title><rect x="247.8" y="261" width="0.1" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="250.80" y="271.5" ></text>
</g>
<g >
<title>posix_memalign (137 samples, 0.28%; -0.01%)</title><rect x="189.4" y="53" width="3.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="192.35" y="63.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (5 samples, 0.01%; +0.01%)</title><rect x="1057.8" y="277" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1060.82" y="287.5" ></text>
</g>
<g >
<title>tracing::add_table_name (15 samples, 0.03%; +0.01%)</title><rect x="1136.9" y="421" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1139.89" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; 0.00%)</title><rect x="426.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="429.76" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (5 samples, 0.01%; +0.00%)</title><rect x="647.9" y="485" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="650.85" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (7 samples, 0.01%; +0.00%)</title><rect x="247.2" y="213" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="250.21" y="223.5" ></text>
</g>
<g >
<title>service::client_state::has_access (1,952 samples, 4.05%; +0.02%)</title><rect x="786.8" y="373" width="47.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="789.77" y="383.5" >serv..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (10 samples, 0.02%; -0.00%)</title><rect x="385.0" y="165" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="388.05" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (106 samples, 0.22%; -0.01%)</title><rect x="945.8" y="405" width="2.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="948.81" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (5 samples, 0.01%; 0.00%)</title><rect x="1157.5" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1160.46" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (20 samples, 0.04%; 0.00%)</title><rect x="880.5" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.49" y="415.5" ></text>
</g>
<g >
<title>operator new (34 samples, 0.07%; -0.00%)</title><rect x="151.6" y="181" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="154.63" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::future (6 samples, 0.01%; +0.01%)</title><rect x="988.5" y="341" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="991.48" y="351.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (14 samples, 0.03%; +0.01%)</title><rect x="816.8" y="117" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="819.79" y="127.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (22 samples, 0.05%; 0.00%)</title><rect x="858.1" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.11" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (7 samples, 0.01%; 0.00%)</title><rect x="407.2" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="410.22" y="271.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (39 samples, 0.08%; -0.01%)</title><rect x="817.3" y="117" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="820.27" y="127.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (7 samples, 0.01%; 0.00%)</title><rect x="953.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="956.79" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; -0.01%)</title><rect x="410.0" y="245" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="412.98" y="255.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (31 samples, 0.06%; -0.01%)</title><rect x="577.4" y="373" width="0.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="580.42" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (23 samples, 0.05%; -0.01%)</title><rect x="506.4" y="181" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="509.37" y="191.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (40 samples, 0.08%; +0.01%)</title><rect x="216.9" y="165" width="0.9" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="219.85" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (11 samples, 0.02%; 0.00%)</title><rect x="1042.4" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1045.40" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (5 samples, 0.01%; +0.01%)</title><rect x="864.7" y="357" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="867.71" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (17 samples, 0.04%; +0.01%)</title><rect x="433.0" y="341" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="435.98" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (7 samples, 0.01%; +0.01%)</title><rect x="667.7" y="469" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="670.67" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (771 samples, 1.60%; -0.00%)</title><rect x="898.5" y="405" width="18.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="901.47" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (5 samples, 0.01%; +0.01%)</title><rect x="659.5" y="373" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="662.47" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.00%)</title><rect x="759.8" y="405" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="762.76" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (6 samples, 0.01%; +0.01%)</title><rect x="628.6" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="631.65" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (17 samples, 0.04%; +0.02%)</title><rect x="563.2" y="309" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="566.16" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (51 samples, 0.11%; +0.00%)</title><rect x="590.4" y="421" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="593.39" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (5 samples, 0.01%; -0.00%)</title><rect x="583.7" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="586.66" y="351.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (8 samples, 0.02%; -0.01%)</title><rect x="1106.5" y="357" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1109.53" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (78 samples, 0.16%; +0.01%)</title><rect x="1099.5" y="325" width="1.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1102.45" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (55 samples, 0.11%; 0.00%)</title><rect x="655.9" y="437" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="658.90" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (10 samples, 0.02%; -0.01%)</title><rect x="819.6" y="229" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="822.57" y="239.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (110 samples, 0.23%; +0.01%)</title><rect x="998.3" y="293" width="2.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1001.34" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (26 samples, 0.05%; +0.02%)</title><rect x="71.9" y="373" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="74.87" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (8 samples, 0.02%; -0.02%)</title><rect x="555.5" y="421" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="558.52" y="431.5" ></text>
</g>
<g >
<title>operator new (49 samples, 0.10%; -0.00%)</title><rect x="796.2" y="277" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="799.21" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (13 samples, 0.03%; +0.00%)</title><rect x="1118.7" y="325" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1121.71" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (7 samples, 0.01%; -0.01%)</title><rect x="715.3" y="405" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="718.30" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (14 samples, 0.03%; +0.00%)</title><rect x="388.9" y="213" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="391.89" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (17 samples, 0.04%; +0.01%)</title><rect x="848.7" y="421" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="851.71" y="431.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (627 samples, 1.30%; +0.00%)</title><rect x="744.4" y="405" width="15.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="747.37" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.01%; 0.00%)</title><rect x="880.2" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.17" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (54 samples, 0.11%; +0.01%)</title><rect x="677.8" y="485" width="1.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="680.77" y="495.5" ></text>
</g>
<g >
<title>row::row (36 samples, 0.07%; +0.01%)</title><rect x="246.2" y="197" width="0.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="249.19" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.01%; +0.00%)</title><rect x="797.6" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="800.60" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; 0.00%)</title><rect x="645.9" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="648.87" y="495.5" ></text>
</g>
<g >
<title>operator new (77 samples, 0.16%; -0.00%)</title><rect x="994.4" y="325" width="1.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="997.43" y="335.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (8 samples, 0.02%; +0.01%)</title><rect x="214.8" y="133" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="217.85" y="143.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (9 samples, 0.02%; 0.00%)</title><rect x="21.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.82" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (28 samples, 0.06%; -0.02%)</title><rect x="733.8" y="389" width="0.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="736.85" y="399.5" ></text>
</g>
<g >
<title>row_cache::make_reader (462 samples, 0.96%; +0.01%)</title><rect x="525.8" y="341" width="11.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="528.85" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (75 samples, 0.16%; +0.00%)</title><rect x="654.1" y="437" width="1.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="657.07" y="447.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (60 samples, 0.12%; +0.01%)</title><rect x="805.0" y="149" width="1.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="807.99" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (80 samples, 0.17%; -0.01%)</title><rect x="691.1" y="485" width="2.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="694.13" y="495.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (12 samples, 0.02%; -0.01%)</title><rect x="163.4" y="197" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="166.42" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (5 samples, 0.01%; +0.00%)</title><rect x="693.1" y="485" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="696.09" y="495.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (15 samples, 0.03%; +0.01%)</title><rect x="225.8" y="213" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="228.78" y="223.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (667 samples, 1.38%; -0.01%)</title><rect x="1083.1" y="325" width="16.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1086.14" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (58 samples, 0.12%; +0.00%)</title><rect x="949.7" y="373" width="1.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="952.68" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (94 samples, 0.19%; +0.01%)</title><rect x="737.2" y="309" width="2.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="740.25" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (13 samples, 0.03%; -0.02%)</title><rect x="486.5" y="325" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="489.51" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (49 samples, 0.10%; +0.04%)</title><rect x="540.1" y="389" width="1.2" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="543.13" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (3,488 samples, 7.23%; 0.00%)</title><rect x="144.5" y="261" width="85.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.51" y="271.5" >partition_..</text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::reserve (7 samples, 0.01%; +0.01%)</title><rect x="1107.5" y="373" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1110.50" y="383.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (11 samples, 0.02%; 0.00%)</title><rect x="1038.6" y="133" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1041.61" y="143.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, auth::role_or_anonymous&amp;&amp;, auth::get_permissions (5 samples, 0.01%; +0.01%)</title><rect x="827.1" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="830.13" y="319.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (3,536 samples, 7.33%; -0.02%)</title><rect x="303.4" y="229" width="86.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="306.39" y="239.5" >compact_mu..</text>
</g>
<g >
<title>reader_permit::resource_units::reset (5 samples, 0.01%; +0.00%)</title><rect x="217.8" y="181" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="220.83" y="191.5" ></text>
</g>
<g >
<title>compound_type&lt; (7 samples, 0.01%; -0.01%)</title><rect x="547.3" y="341" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="550.25" y="351.5" ></text>
</g>
<g >
<title>database::find_uuid (164 samples, 0.34%; +0.00%)</title><rect x="839.5" y="357" width="4.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="842.54" y="367.5" ></text>
</g>
<g >
<title>dht::tri_compare (6 samples, 0.01%; -0.01%)</title><rect x="1097.1" y="245" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1100.08" y="255.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (477 samples, 0.99%; +0.01%)</title><rect x="395.3" y="261" width="11.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="398.25" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (15 samples, 0.03%; -0.01%)</title><rect x="535.7" y="245" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="538.71" y="255.5" ></text>
</g>
<g >
<title>operator new (27 samples, 0.06%; -0.00%)</title><rect x="492.7" y="293" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="495.72" y="303.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; -0.01%)</title><rect x="59.7" y="453" width="0.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="62.69" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (26 samples, 0.05%; +0.02%)</title><rect x="832.9" y="277" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="835.93" y="287.5" ></text>
</g>
<g >
<title>query_state::query_state (10 samples, 0.02%; +0.01%)</title><rect x="63.2" y="453" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="66.24" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (11 samples, 0.02%; -0.01%)</title><rect x="861.5" y="373" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="864.53" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (7 samples, 0.01%; +0.00%)</title><rect x="122.0" y="293" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="124.98" y="303.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (39 samples, 0.08%; -0.01%)</title><rect x="686.3" y="453" width="1.0" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="689.31" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (5 samples, 0.01%; +0.00%)</title><rect x="1143.4" y="501" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1146.37" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.01%; -0.00%)</title><rect x="480.5" y="181" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="483.51" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (138 samples, 0.29%; +0.01%)</title><rect x="687.6" y="485" width="3.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="690.63" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (7 samples, 0.01%; +0.01%)</title><rect x="1041.9" y="229" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1044.89" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (17 samples, 0.04%; -0.00%)</title><rect x="200.1" y="117" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="203.14" y="127.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (980 samples, 2.03%; +0.01%)</title><rect x="649.5" y="501" width="24.0" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="652.52" y="511.5" >s..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (14 samples, 0.03%; +0.01%)</title><rect x="273.2" y="293" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="276.17" y="303.5" ></text>
</g>
<g >
<title>operator delete (35 samples, 0.07%; -0.01%)</title><rect x="673.8" y="485" width="0.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="676.79" y="495.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (73 samples, 0.15%; +0.02%)</title><rect x="932.2" y="389" width="1.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="935.16" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (14 samples, 0.03%; +0.01%)</title><rect x="1006.6" y="261" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1009.56" y="271.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (645 samples, 1.34%; +0.00%)</title><rect x="803.2" y="229" width="15.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="806.23" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (12 samples, 0.02%; +0.01%)</title><rect x="202.4" y="133" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="205.39" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_range_check (9 samples, 0.02%; +0.01%)</title><rect x="904.1" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="907.13" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.01%; +0.01%)</title><rect x="662.2" y="453" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="665.17" y="463.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%; -0.00%)</title><rect x="631.0" y="389" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="634.02" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (89 samples, 0.18%; +0.00%)</title><rect x="671.2" y="453" width="2.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="674.24" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (156 samples, 0.32%; +0.03%)</title><rect x="243.6" y="229" width="3.8" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="246.59" y="239.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (28 samples, 0.06%; -0.01%)</title><rect x="832.9" y="293" width="0.7" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="835.93" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (30 samples, 0.06%; 0.00%)</title><rect x="880.4" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.39" y="511.5" ></text>
</g>
<g >
<title>operator new (65 samples, 0.13%; +0.00%)</title><rect x="727.2" y="421" width="1.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="730.19" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (5 samples, 0.01%; -0.00%)</title><rect x="65.3" y="405" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="68.27" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (11 samples, 0.02%; +0.01%)</title><rect x="583.2" y="357" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="586.22" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (5 samples, 0.01%; -0.00%)</title><rect x="446.5" y="293" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="449.51" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (66 samples, 0.14%; +0.01%)</title><rect x="772.3" y="341" width="1.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="775.26" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (5 samples, 0.01%; -0.00%)</title><rect x="264.0" y="325" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="267.05" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (113 samples, 0.23%; -0.01%)</title><rect x="413.1" y="309" width="2.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="416.09" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (12 samples, 0.02%; +0.01%)</title><rect x="583.5" y="357" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="586.49" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%; +0.01%)</title><rect x="992.5" y="277" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="995.52" y="287.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (16 samples, 0.03%; -0.01%)</title><rect x="363.9" y="197" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="366.94" y="207.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (10 samples, 0.02%; -0.00%)</title><rect x="609.9" y="421" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="612.88" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (85 samples, 0.18%; +0.01%)</title><rect x="245.0" y="213" width="2.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="247.99" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (63 samples, 0.13%; -0.01%)</title><rect x="850.7" y="405" width="1.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="853.72" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (124 samples, 0.26%; +0.00%)</title><rect x="1004.0" y="293" width="3.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1007.02" y="303.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (7 samples, 0.01%; +0.01%)</title><rect x="1049.9" y="261" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1052.89" y="271.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (7 samples, 0.01%; -0.01%)</title><rect x="23.2" y="517" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="26.24" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (10 samples, 0.02%; -0.01%)</title><rect x="1115.1" y="373" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1118.14" y="383.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (11 samples, 0.02%; 0.00%)</title><rect x="834.0" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="837.03" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (104 samples, 0.22%; 0.00%)</title><rect x="1042.9" y="229" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1045.89" y="239.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (8 samples, 0.02%; +0.01%)</title><rect x="242.4" y="229" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="245.42" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (7 samples, 0.01%; -0.01%)</title><rect x="169.7" y="133" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="172.71" y="143.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (7 samples, 0.01%; +0.00%)</title><rect x="666.2" y="469" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="669.18" y="479.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (21 samples, 0.04%; -0.02%)</title><rect x="933.4" y="357" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="936.39" y="367.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (11 samples, 0.02%; -0.01%)</title><rect x="369.9" y="213" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="372.88" y="223.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.00%)</title><rect x="782.5" y="325" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="785.46" y="335.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (15 samples, 0.03%; +0.02%)</title><rect x="231.7" y="213" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="234.73" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%; +0.00%)</title><rect x="1130.9" y="389" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1133.89" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (9 samples, 0.02%; -0.01%)</title><rect x="658.9" y="389" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="661.94" y="399.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (26 samples, 0.05%; +0.01%)</title><rect x="215.1" y="133" width="0.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="218.14" y="143.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (41 samples, 0.09%; -0.00%)</title><rect x="819.9" y="245" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="822.92" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (55 samples, 0.11%; +0.00%)</title><rect x="622.6" y="389" width="1.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="625.58" y="399.5" ></text>
</g>
<g >
<title>database::find_column_family (89 samples, 0.18%; -0.00%)</title><rect x="1063.4" y="341" width="2.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1066.42" y="351.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (457 samples, 0.95%; +0.00%)</title><rect x="1177.7" y="629" width="11.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1180.69" y="639.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (11 samples, 0.02%; +0.01%)</title><rect x="997.3" y="293" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1000.26" y="303.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; +0.01%)</title><rect x="44.6" y="485" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="47.59" y="495.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (12 samples, 0.02%; -0.00%)</title><rect x="711.0" y="453" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="714.02" y="463.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (201 samples, 0.42%; 0.00%)</title><rect x="14.9" y="469" width="4.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.92" y="479.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (7 samples, 0.01%; -0.00%)</title><rect x="1039.4" y="165" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1042.37" y="175.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (514 samples, 1.07%; -0.01%)</title><rect x="473.8" y="309" width="12.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="476.78" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.00%)</title><rect x="547.5" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="550.55" y="367.5" ></text>
</g>
<g >
<title>TLS init function for seastar::testing::local_random_engine (15 samples, 0.03%; +0.02%)</title><rect x="725.5" y="469" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="728.53" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (12 samples, 0.02%; -0.00%)</title><rect x="819.5" y="245" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="822.53" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (12 samples, 0.02%; +0.01%)</title><rect x="568.1" y="277" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="571.15" y="287.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (25 samples, 0.05%; -0.01%)</title><rect x="389.2" y="213" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="392.23" y="223.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (18 samples, 0.04%; +0.00%)</title><rect x="817.3" y="101" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="820.30" y="111.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (301 samples, 0.62%; +0.00%)</title><rect x="1084.7" y="277" width="7.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1087.70" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.01%)</title><rect x="667.9" y="485" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="670.87" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.00%)</title><rect x="255.7" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="258.70" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (17 samples, 0.04%; -0.01%)</title><rect x="912.5" y="357" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="915.54" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (7 samples, 0.01%; -0.01%)</title><rect x="1147.5" y="469" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1150.50" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (11 samples, 0.02%; +0.01%)</title><rect x="283.8" y="389" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="286.81" y="399.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (11 samples, 0.02%; +0.01%)</title><rect x="1069.2" y="261" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1072.19" y="271.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (392 samples, 0.81%; +0.00%)</title><rect x="809.0" y="213" width="9.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="811.98" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (49 samples, 0.10%; -0.01%)</title><rect x="1159.0" y="453" width="1.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1161.95" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (109 samples, 0.23%; +0.01%)</title><rect x="831.7" y="325" width="2.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="834.73" y="335.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (9 samples, 0.02%; -0.00%)</title><rect x="78.6" y="453" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="81.55" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="616.0" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="619.00" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;void&gt;::promise_type::run_and_dispose (8 samples, 0.02%; +0.00%)</title><rect x="24.0" y="517" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="26.97" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (128 samples, 0.27%; -0.02%)</title><rect x="213.3" y="165" width="3.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="216.26" y="175.5" ></text>
</g>
<g >
<title>row_tombstone::apply (20 samples, 0.04%; -0.01%)</title><rect x="388.4" y="213" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="391.40" y="223.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (375 samples, 0.78%; -0.01%)</title><rect x="1031.7" y="213" width="9.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1034.66" y="223.5" ></text>
</g>
<g >
<title>abstract_type::from_string (5 samples, 0.01%; 0.00%)</title><rect x="20.0" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.98" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (426 samples, 0.88%; +0.00%)</title><rect x="503.0" y="245" width="10.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="506.02" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; -0.01%)</title><rect x="704.3" y="485" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="707.34" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10 samples, 0.02%; +0.01%)</title><rect x="1108.5" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1111.46" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (40 samples, 0.08%; +0.01%)</title><rect x="269.8" y="293" width="1.0" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="272.84" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;boost::intrusive::detail::null_disposer, boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (7 samples, 0.01%; +0.01%)</title><rect x="566.5" y="277" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="569.48" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (34 samples, 0.07%; +0.01%)</title><rect x="815.0" y="117" width="0.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="817.95" y="127.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (18 samples, 0.04%; +0.01%)</title><rect x="602.1" y="405" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="605.08" y="415.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (13 samples, 0.03%; 0.00%)</title><rect x="21.7" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.74" y="591.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (38 samples, 0.08%; +0.00%)</title><rect x="739.6" y="405" width="0.9" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="742.60" y="415.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (10 samples, 0.02%; -0.04%)</title><rect x="984.0" y="357" width="0.2" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="986.98" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (18 samples, 0.04%; +0.03%)</title><rect x="720.8" y="501" width="0.5" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="723.83" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (19 samples, 0.04%; +0.04%)</title><rect x="981.3" y="325" width="0.5" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="984.29" y="335.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (6 samples, 0.01%; 0.00%)</title><rect x="1139.6" y="165" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.55" y="175.5" ></text>
</g>
<g >
<title>operator new (31 samples, 0.06%; 0.00%)</title><rect x="419.0" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="421.96" y="383.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (6 samples, 0.01%; +0.00%)</title><rect x="841.4" y="261" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="844.45" y="271.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (14 samples, 0.03%; -0.01%)</title><rect x="637.8" y="485" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="640.82" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (6 samples, 0.01%; +0.01%)</title><rect x="736.8" y="341" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="739.76" y="351.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (67 samples, 0.14%; 0.00%)</title><rect x="357.3" y="149" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="360.26" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (52 samples, 0.11%; +0.02%)</title><rect x="439.9" y="229" width="1.2" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="442.85" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (35 samples, 0.07%; 0.00%)</title><rect x="791.5" y="293" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="794.49" y="303.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cfName (6 samples, 0.01%; +0.00%)</title><rect x="16.8" y="341" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="19.83" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (32 samples, 0.07%; +0.02%)</title><rect x="584.0" y="357" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="586.95" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (19 samples, 0.04%; -0.00%)</title><rect x="1174.8" y="453" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1177.81" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (26 samples, 0.05%; 0.00%)</title><rect x="1139.2" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.21" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (168 samples, 0.35%; -0.01%)</title><rect x="398.3" y="197" width="4.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="401.31" y="207.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (152 samples, 0.32%; 0.00%)</title><rect x="391.3" y="245" width="3.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="394.29" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (10 samples, 0.02%; +0.01%)</title><rect x="1173.7" y="501" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1176.71" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (25 samples, 0.05%; -0.00%)</title><rect x="756.1" y="293" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="759.09" y="303.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (6 samples, 0.01%; +0.00%)</title><rect x="364.5" y="197" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="367.50" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (12 samples, 0.02%; +0.01%)</title><rect x="216.1" y="149" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="219.09" y="159.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (5 samples, 0.01%; +0.01%)</title><rect x="1039.6" y="181" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1042.61" y="191.5" ></text>
</g>
<g >
<title>mutation_querier::consume (7 samples, 0.01%; 0.00%)</title><rect x="695.1" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.07" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (5 samples, 0.01%; 0.00%)</title><rect x="15.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.04" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (89 samples, 0.18%; +0.01%)</title><rect x="959.4" y="373" width="2.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="962.44" y="383.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (49 samples, 0.10%; -0.01%)</title><rect x="187.4" y="69" width="1.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="190.40" y="79.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (9 samples, 0.02%; 0.00%)</title><rect x="670.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="673.90" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (21 samples, 0.04%; -0.01%)</title><rect x="1168.1" y="469" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1171.08" y="479.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (7 samples, 0.01%; 0.00%)</title><rect x="388.7" y="181" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="391.67" y="191.5" ></text>
</g>
<g >
<title>operator delete (27 samples, 0.06%; +0.01%)</title><rect x="47.6" y="501" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="50.58" y="511.5" ></text>
</g>
<g >
<title>row::row (1,456 samples, 3.02%; +0.01%)</title><rect x="167.8" y="149" width="35.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="170.80" y="159.5" >row..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="722.5" y="501" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="725.50" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (7 samples, 0.01%; 0.00%)</title><rect x="554.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="557.08" y="431.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (30 samples, 0.06%; -0.01%)</title><rect x="510.8" y="197" width="0.7" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="513.78" y="207.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (5,917 samples, 12.27%; -0.02%)</title><rect x="964.4" y="405" width="144.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="967.36" y="415.5" >service::storage_p..</text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (7 samples, 0.01%; +0.01%)</title><rect x="299.8" y="229" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="302.79" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (156 samples, 0.32%; 0.00%)</title><rect x="1052.9" y="277" width="3.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1055.87" y="287.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; +0.01%)</title><rect x="416.6" y="357" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="419.61" y="367.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (10 samples, 0.02%; +0.01%)</title><rect x="560.2" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="563.20" y="319.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (725 samples, 1.50%; -0.01%)</title><rect x="899.0" y="389" width="17.8" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="902.04" y="399.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (30 samples, 0.06%; 0.00%)</title><rect x="38.7" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.70" y="431.5" ></text>
</g>
<g >
<title>sstring_hash::operator (11 samples, 0.02%; 0.00%)</title><rect x="864.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.86" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (13 samples, 0.03%; +0.01%)</title><rect x="1097.3" y="277" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1100.25" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (6 samples, 0.01%; +0.00%)</title><rect x="848.3" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="851.30" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (8 samples, 0.02%; -0.01%)</title><rect x="542.9" y="421" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="545.90" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (25 samples, 0.05%; +0.02%)</title><rect x="631.0" y="373" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="634.02" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (5 samples, 0.01%; 0.00%)</title><rect x="1030.1" y="197" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1033.07" y="207.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (47 samples, 0.10%; 0.00%)</title><rect x="15.3" y="373" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.33" y="383.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (4,903 samples, 10.17%; -0.01%)</title><rect x="422.9" y="421" width="119.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="425.90" y="431.5" >query::querier..</text>
</g>
<g >
<title>compact_mutation_state&lt; (344 samples, 0.71%; +0.06%)</title><rect x="544.3" y="405" width="8.5" height="15.0" fill="rgb(255,125,125)" rx="2" ry="2" />
<text  x="547.34" y="415.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (6 samples, 0.01%; +0.00%)</title><rect x="613.5" y="421" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="616.50" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (11 samples, 0.02%; +0.01%)</title><rect x="315.6" y="197" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="318.57" y="207.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (74 samples, 0.15%; -0.01%)</title><rect x="812.5" y="149" width="1.8" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="815.45" y="159.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5,018 samples, 10.40%; -0.01%)</title><rect x="290.3" y="309" width="122.8" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="293.30" y="319.5" >std::__invoke_i..</text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (22 samples, 0.05%; -0.01%)</title><rect x="667.3" y="485" width="0.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="670.33" y="495.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (7 samples, 0.01%; -0.00%)</title><rect x="857.4" y="341" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="860.45" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (13 samples, 0.03%; +0.00%)</title><rect x="675.4" y="469" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="678.38" y="479.5" ></text>
</g>
<g >
<title>main (47,214 samples, 97.89%; 0.00%)</title><rect x="22.1" y="613" width="1155.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.09" y="623.5" >main</text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (105 samples, 0.22%; 0.00%)</title><rect x="756.9" y="293" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="759.92" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.01%)</title><rect x="31.2" y="469" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="34.24" y="479.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (729 samples, 1.51%; -0.00%)</title><rect x="801.2" y="261" width="17.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="804.18" y="271.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (11 samples, 0.02%; +0.01%)</title><rect x="1068.9" y="261" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1071.92" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (79 samples, 0.16%; +0.00%)</title><rect x="291.0" y="293" width="1.9" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="294.01" y="303.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (5 samples, 0.01%; -0.01%)</title><rect x="606.4" y="421" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="609.36" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (28 samples, 0.06%; +0.00%)</title><rect x="538.7" y="309" width="0.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="541.74" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.00%)</title><rect x="594.1" y="373" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="597.08" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (22 samples, 0.05%; -0.00%)</title><rect x="278.8" y="357" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="281.77" y="367.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (707 samples, 1.47%; +0.00%)</title><rect x="801.7" y="245" width="17.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="804.71" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (5 samples, 0.01%; +0.01%)</title><rect x="1055.7" y="229" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1058.71" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5,253 samples, 10.89%; -0.01%)</title><rect x="287.7" y="357" width="128.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="290.65" y="367.5" >flat_mutation_re..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (6 samples, 0.01%; 0.00%)</title><rect x="573.4" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="576.36" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (5 samples, 0.01%; +0.01%)</title><rect x="269.5" y="309" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="272.50" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (27 samples, 0.06%; 0.00%)</title><rect x="1139.2" y="421" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.19" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (13 samples, 0.03%; -0.01%)</title><rect x="612.4" y="437" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="615.43" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (138 samples, 0.29%; -0.01%)</title><rect x="205.7" y="117" width="3.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="208.75" y="127.5" ></text>
</g>
<g >
<title>dht::shard_of (40 samples, 0.08%; +0.04%)</title><rect x="1014.2" y="277" width="1.0" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1017.19" y="287.5" ></text>
</g>
<g >
<title>db::filter_for_query (31 samples, 0.06%; 0.00%)</title><rect x="1071.7" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1074.66" y="351.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (6 samples, 0.01%; 0.00%)</title><rect x="807.1" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="810.10" y="223.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (11 samples, 0.02%; -0.00%)</title><rect x="591.4" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="594.36" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (37 samples, 0.08%; +0.02%)</title><rect x="240.0" y="165" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="243.02" y="175.5" ></text>
</g>
<g >
<title>reader_permit::consume (22 samples, 0.05%; +0.01%)</title><rect x="511.0" y="181" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="513.97" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (86 samples, 0.18%; -0.00%)</title><rect x="850.3" y="437" width="2.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="853.25" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (8 samples, 0.02%; +0.01%)</title><rect x="792.1" y="261" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="795.15" y="271.5" ></text>
</g>
<g >
<title>operator new (16 samples, 0.03%; +0.00%)</title><rect x="661.8" y="453" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="664.77" y="463.5" ></text>
</g>
<g >
<title>database::query (15 samples, 0.03%; -0.02%)</title><rect x="1013.8" y="277" width="0.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1016.83" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (9 samples, 0.02%; +0.00%)</title><rect x="834.1" y="261" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="837.08" y="271.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (13 samples, 0.03%; -0.00%)</title><rect x="902.2" y="309" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="905.22" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (24 samples, 0.05%; +0.01%)</title><rect x="40.9" y="453" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="43.95" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (10 samples, 0.02%; -0.01%)</title><rect x="461.9" y="293" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="464.87" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (57 samples, 0.12%; +0.01%)</title><rect x="951.6" y="373" width="1.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="954.61" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (13 samples, 0.03%; +0.01%)</title><rect x="443.1" y="277" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="446.06" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (55 samples, 0.11%; +0.01%)</title><rect x="1028.8" y="213" width="1.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1031.85" y="223.5" ></text>
</g>
<g >
<title>std::type_info::operator== (14 samples, 0.03%; +0.00%)</title><rect x="1079.7" y="277" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1082.74" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (33 samples, 0.07%; -0.01%)</title><rect x="751.2" y="357" width="0.8" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="754.17" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (447 samples, 0.93%; 0.00%)</title><rect x="683.9" y="501" width="11.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.94" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (11 samples, 0.02%; +0.01%)</title><rect x="100.1" y="389" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="103.06" y="399.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (7 samples, 0.01%; -0.02%)</title><rect x="579.7" y="341" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="582.74" y="351.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (5 samples, 0.01%; -0.00%)</title><rect x="328.7" y="181" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="331.71" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (5 samples, 0.01%; -0.00%)</title><rect x="405.0" y="213" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="408.01" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%; -0.02%)</title><rect x="941.1" y="405" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="944.09" y="415.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (184 samples, 0.38%; +0.04%)</title><rect x="996.5" y="309" width="4.5" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="999.53" y="319.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (23 samples, 0.05%; 0.00%)</title><rect x="510.2" y="181" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="513.16" y="191.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (68 samples, 0.14%; +0.06%)</title><rect x="327.0" y="165" width="1.7" height="15.0" fill="rgb(255,128,128)" rx="2" ry="2" />
<text  x="330.04" y="175.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (35 samples, 0.07%; -0.01%)</title><rect x="933.0" y="373" width="0.9" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="936.04" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (14 samples, 0.03%; 0.00%)</title><rect x="541.9" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="544.90" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (16 samples, 0.03%; +0.01%)</title><rect x="1100.4" y="309" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1103.38" y="319.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (384 samples, 0.80%; +0.01%)</title><rect x="544.0" y="421" width="9.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="547.02" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (45 samples, 0.09%; +0.01%)</title><rect x="638.9" y="485" width="1.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="641.92" y="495.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (5 samples, 0.01%; 0.00%)</title><rect x="1139.3" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.26" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; 0.00%)</title><rect x="167.7" y="133" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="170.65" y="143.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (285 samples, 0.59%; +0.01%)</title><rect x="185.9" y="85" width="7.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="188.88" y="95.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (18 samples, 0.04%; +0.02%)</title><rect x="897.8" y="373" width="0.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="900.79" y="383.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (6 samples, 0.01%; +0.01%)</title><rect x="523.4" y="325" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="526.40" y="335.5" ></text>
</g>
<g >
<title>reader_permit::consume (8 samples, 0.02%; -0.00%)</title><rect x="210.8" y="133" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="213.81" y="143.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="907.2" y="293" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="910.23" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; -0.01%)</title><rect x="1081.8" y="325" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1084.84" y="335.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (111 samples, 0.23%; +0.01%)</title><rect x="843.5" y="373" width="2.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="846.55" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (85 samples, 0.18%; -0.01%)</title><rect x="1053.3" y="229" width="2.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1056.29" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (11 samples, 0.02%; +0.00%)</title><rect x="628.0" y="389" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="630.99" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (7 samples, 0.01%; -0.01%)</title><rect x="624.1" y="373" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="627.10" y="383.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (64 samples, 0.13%; -0.01%)</title><rect x="627.2" y="437" width="1.6" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="630.23" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (12 samples, 0.02%; -0.02%)</title><rect x="993.6" y="341" width="0.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="996.64" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (5 samples, 0.01%; 0.00%)</title><rect x="45.4" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.35" y="495.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (86 samples, 0.18%; -0.01%)</title><rect x="726.8" y="437" width="2.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="729.80" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (19 samples, 0.04%; +0.00%)</title><rect x="1051.9" y="277" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1054.87" y="287.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (42 samples, 0.09%; +0.01%)</title><rect x="1098.4" y="293" width="1.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1101.43" y="303.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (5 samples, 0.01%; -0.04%)</title><rect x="369.8" y="213" width="0.1" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="372.76" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (29 samples, 0.06%; +0.01%)</title><rect x="554.3" y="421" width="0.7" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="557.25" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (30 samples, 0.06%; +0.00%)</title><rect x="1176.3" y="485" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1179.25" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (25 samples, 0.05%; -0.00%)</title><rect x="401.4" y="165" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="404.39" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (6 samples, 0.01%; +0.00%)</title><rect x="1080.4" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1083.40" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (131 samples, 0.27%; +0.01%)</title><rect x="568.5" y="293" width="3.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="571.51" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::~node_head (6 samples, 0.01%; -0.01%)</title><rect x="405.1" y="213" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="408.14" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (15 samples, 0.03%; 0.00%)</title><rect x="224.2" y="213" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="227.22" y="223.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (33 samples, 0.07%; -0.00%)</title><rect x="665.5" y="485" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="668.54" y="495.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (12 samples, 0.02%; +0.00%)</title><rect x="924.6" y="373" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="927.55" y="383.5" ></text>
</g>
<g >
<title>table::query (22,539 samples, 46.73%; -0.04%)</title><rect x="81.3" y="453" width="551.4" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="84.29" y="463.5" >table::query</text>
</g>
<g >
<title>reader_permit::~reader_permit (13 samples, 0.03%; -0.01%)</title><rect x="525.3" y="341" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="528.28" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (19 samples, 0.04%; +0.00%)</title><rect x="1110.5" y="389" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1113.51" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (7 samples, 0.01%; +0.00%)</title><rect x="872.1" y="437" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="875.13" y="447.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (9 samples, 0.02%; +0.00%)</title><rect x="829.8" y="341" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="832.85" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (10 samples, 0.02%; +0.01%)</title><rect x="767.3" y="405" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="770.27" y="415.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (7 samples, 0.01%; -0.00%)</title><rect x="686.0" y="469" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="689.04" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (9 samples, 0.02%; +0.02%)</title><rect x="682.6" y="437" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="685.64" y="447.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (43 samples, 0.09%; +0.03%)</title><rect x="286.5" y="373" width="1.0" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="289.46" y="383.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (305 samples, 0.63%; +0.00%)</title><rect x="733.3" y="437" width="7.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="736.33" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (29 samples, 0.06%; -0.00%)</title><rect x="366.3" y="181" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="369.26" y="191.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (5 samples, 0.01%; -0.00%)</title><rect x="652.9" y="469" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="655.87" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (614 samples, 1.27%; +0.01%)</title><rect x="1151.1" y="485" width="15.0" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1154.08" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (22 samples, 0.05%; 0.00%)</title><rect x="538.0" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="540.96" y="351.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (9 samples, 0.02%; +0.01%)</title><rect x="23.0" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="26.02" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (28 samples, 0.06%; -0.03%)</title><rect x="702.2" y="437" width="0.7" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="705.19" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (182 samples, 0.38%; +0.01%)</title><rect x="219.4" y="213" width="4.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="222.40" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; 0.00%)</title><rect x="80.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.14" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,788 samples, 9.93%; -0.00%)</title><rect x="293.7" y="277" width="117.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="296.75" y="287.5" >flat_mutation_..</text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (5 samples, 0.01%; +0.01%)</title><rect x="740.6" y="421" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="743.63" y="431.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (9 samples, 0.02%; +0.00%)</title><rect x="832.4" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="835.37" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (13 samples, 0.03%; +0.01%)</title><rect x="65.1" y="421" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="68.07" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; -0.00%)</title><rect x="547.4" y="341" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="550.42" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (27 samples, 0.06%; +0.00%)</title><rect x="1139.2" y="373" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1142.19" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (6 samples, 0.01%; -0.00%)</title><rect x="824.2" y="261" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="827.22" y="271.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (10,655 samples, 22.09%; +0.00%)</title><rect x="881.1" y="501" width="260.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="884.13" y="511.5" >seastar::lambda_task&lt;seastar::exec..</text>
</g>
<g >
<title>seastar::memory::allocate (96 samples, 0.20%; +0.06%)</title><rect x="990.1" y="277" width="2.3" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="993.10" y="287.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (145 samples, 0.30%; -0.02%)</title><rect x="680.2" y="469" width="3.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="683.17" y="479.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (7 samples, 0.01%; 0.00%)</title><rect x="1139.6" y="181" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.55" y="191.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (4,742 samples, 9.83%; -0.01%)</title><rect x="424.0" y="405" width="116.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="427.05" y="415.5" >mutation_sourc..</text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (7 samples, 0.01%; +0.00%)</title><rect x="1001.9" y="325" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1004.94" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (10 samples, 0.02%; -0.00%)</title><rect x="1082.0" y="325" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1084.99" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (7 samples, 0.01%; +0.00%)</title><rect x="823.5" y="245" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="826.46" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (47 samples, 0.10%; 0.00%)</title><rect x="871.0" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.95" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (107 samples, 0.22%; +0.01%)</title><rect x="153.9" y="197" width="2.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="156.88" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (800 samples, 1.66%; -0.01%)</title><rect x="497.9" y="293" width="19.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="500.88" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (7 samples, 0.01%; +0.00%)</title><rect x="509.1" y="197" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="512.06" y="207.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (17 samples, 0.04%; -0.01%)</title><rect x="332.8" y="181" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="335.84" y="191.5" ></text>
</g>
<g >
<title>sstring_hash::operator (34 samples, 0.07%; 0.00%)</title><rect x="857.9" y="373" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.86" y="383.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; -0.00%)</title><rect x="30.6" y="485" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="33.65" y="495.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (16 samples, 0.03%; +0.00%)</title><rect x="841.2" y="277" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="844.20" y="287.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (51 samples, 0.11%; -0.01%)</title><rect x="64.4" y="437" width="1.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="67.36" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (25 samples, 0.05%; -0.00%)</title><rect x="1109.1" y="405" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1112.12" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (535 samples, 1.11%; +0.00%)</title><rect x="502.5" y="261" width="13.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="505.46" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.01%; +0.01%)</title><rect x="806.8" y="213" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="809.78" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (5 samples, 0.01%; 0.00%)</title><rect x="872.7" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.66" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (7 samples, 0.01%; +0.00%)</title><rect x="595.1" y="389" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="598.11" y="399.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (21 samples, 0.04%; +0.01%)</title><rect x="756.2" y="277" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="759.16" y="287.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (5 samples, 0.01%; +0.00%)</title><rect x="759.6" y="357" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="762.59" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (13 samples, 0.03%; +0.01%)</title><rect x="1052.0" y="261" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1055.02" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1,226 samples, 2.54%; +0.05%)</title><rect x="1143.7" y="501" width="30.0" height="15.0" fill="rgb(255,134,134)" rx="2" ry="2" />
<text  x="1146.66" y="511.5" >se..</text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (31 samples, 0.06%; +0.01%)</title><rect x="579.5" y="357" width="0.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="582.52" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (39 samples, 0.08%; +0.02%)</title><rect x="842.3" y="293" width="1.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="845.30" y="303.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (5 samples, 0.01%; -0.01%)</title><rect x="894.4" y="421" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="897.36" y="431.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (47 samples, 0.10%; -0.01%)</title><rect x="437.6" y="277" width="1.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="440.60" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (37 samples, 0.08%; 0.00%)</title><rect x="1025.5" y="229" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1028.52" y="239.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (17 samples, 0.04%; -0.05%)</title><rect x="432.1" y="341" width="0.5" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="435.15" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (18 samples, 0.04%; -0.00%)</title><rect x="167.4" y="149" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="170.36" y="159.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (17 samples, 0.04%; +0.02%)</title><rect x="516.6" y="277" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="519.57" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (10,301 samples, 21.36%; +0.00%)</title><rect x="886.0" y="469" width="252.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="888.97" y="479.5" >seastar::noncopyable_function&lt;sea..</text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (6 samples, 0.01%; +0.01%)</title><rect x="621.3" y="405" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="624.33" y="415.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (47 samples, 0.10%; -0.00%)</title><rect x="151.4" y="197" width="1.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="154.43" y="207.5" ></text>
</g>
<g >
<title>query::querier_base::close (20 samples, 0.04%; 0.00%)</title><rect x="1174.8" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1177.81" y="495.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; +0.00%)</title><rect x="989.5" y="309" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="992.53" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (71 samples, 0.15%; 0.00%)</title><rect x="1046.2" y="245" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1049.24" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (26 samples, 0.05%; +0.00%)</title><rect x="1152.8" y="421" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1155.76" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (7 samples, 0.01%; -0.00%)</title><rect x="648.8" y="485" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="651.83" y="495.5" ></text>
</g>
<g >
<title>posix_memalign (6 samples, 0.01%; +0.00%)</title><rect x="188.7" y="69" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="191.74" y="79.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (35 samples, 0.07%; +0.02%)</title><rect x="991.6" y="261" width="0.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="994.59" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (45 samples, 0.09%; -0.00%)</title><rect x="656.1" y="421" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="659.12" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (37 samples, 0.08%; +0.01%)</title><rect x="155.6" y="181" width="0.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="158.59" y="191.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (5 samples, 0.01%; +0.01%)</title><rect x="655.1" y="389" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="658.07" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (8 samples, 0.02%; 0.00%)</title><rect x="45.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.77" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (512 samples, 1.06%; +0.00%)</title><rect x="230.3" y="245" width="12.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="233.26" y="255.5" ></text>
</g>
<g >
<title>__tls_init (8 samples, 0.02%; +0.01%)</title><rect x="144.1" y="229" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="147.14" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (85 samples, 0.18%; -0.01%)</title><rect x="1103.3" y="357" width="2.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1106.27" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; +0.00%)</title><rect x="745.2" y="389" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="748.22" y="399.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (8 samples, 0.02%; +0.01%)</title><rect x="902.5" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="905.54" y="319.5" ></text>
</g>
<g >
<title>row::compact_and_expire (742 samples, 1.54%; -0.00%)</title><rect x="370.2" y="213" width="18.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="373.15" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; +0.00%)</title><rect x="1107.2" y="373" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1110.21" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (65 samples, 0.13%; -0.02%)</title><rect x="386.1" y="165" width="1.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="389.13" y="175.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%; +0.00%)</title><rect x="451.8" y="277" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="454.84" y="287.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (22 samples, 0.05%; +0.02%)</title><rect x="562.6" y="309" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="565.62" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (9 samples, 0.02%; -0.03%)</title><rect x="1124.1" y="421" width="0.2" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="1127.07" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (17 samples, 0.04%; +0.02%)</title><rect x="253.1" y="277" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="256.13" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (20 samples, 0.04%; -0.00%)</title><rect x="1047.5" y="229" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1050.49" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (11 samples, 0.02%; +0.00%)</title><rect x="731.4" y="453" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="734.38" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (9 samples, 0.02%; -0.02%)</title><rect x="588.5" y="405" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="591.53" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.00%)</title><rect x="278.4" y="341" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="281.36" y="351.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (5 samples, 0.01%; +0.00%)</title><rect x="14.7" y="485" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="17.67" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="153.1" y="181" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="156.12" y="191.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (5 samples, 0.01%; +0.01%)</title><rect x="1063.3" y="341" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1066.30" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; 0.00%)</title><rect x="773.5" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="776.53" y="319.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.01%; +0.00%)</title><rect x="806.9" y="213" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="809.93" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%; +0.00%)</title><rect x="973.8" y="373" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="976.78" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (433 samples, 0.90%; +0.03%)</title><rect x="147.6" y="245" width="10.6" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="150.62" y="255.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (47,037 samples, 97.52%; +0.03%)</title><rect x="24.8" y="517" width="1150.8" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="27.80" y="527.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (43 samples, 0.09%; -0.01%)</title><rect x="1165.0" y="469" width="1.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1168.05" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (24 samples, 0.05%; -0.00%)</title><rect x="736.2" y="325" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="739.17" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (25 samples, 0.05%; 0.00%)</title><rect x="1139.2" y="341" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.21" y="351.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (5,577 samples, 11.56%; -0.00%)</title><rect x="284.3" y="389" width="136.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="287.25" y="399.5" >query::consume_pa..</text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (16 samples, 0.03%; 0.00%)</title><rect x="1139.4" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.43" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (39 samples, 0.08%; +0.01%)</title><rect x="692.0" y="469" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="694.99" y="479.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (18 samples, 0.04%; +0.01%)</title><rect x="920.6" y="357" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="923.59" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (195 samples, 0.40%; +0.00%)</title><rect x="679.1" y="485" width="4.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="682.14" y="495.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (9 samples, 0.02%; +0.01%)</title><rect x="244.8" y="213" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="247.77" y="223.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (14 samples, 0.03%; +0.01%)</title><rect x="663.6" y="437" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="666.63" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (33 samples, 0.07%; +0.01%)</title><rect x="549.1" y="341" width="0.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="552.09" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (27 samples, 0.06%; +0.02%)</title><rect x="573.5" y="309" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="576.50" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (8 samples, 0.02%; +0.01%)</title><rect x="915.7" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="918.67" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.00%)</title><rect x="835.6" y="357" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="838.62" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (19 samples, 0.04%; +0.01%)</title><rect x="1081.4" y="309" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1084.35" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (11 samples, 0.02%; +0.01%)</title><rect x="1040.9" y="213" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1043.86" y="223.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (39 samples, 0.08%; +0.00%)</title><rect x="576.5" y="357" width="0.9" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="579.46" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (111 samples, 0.23%; +0.01%)</title><rect x="443.9" y="309" width="2.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="446.91" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (13 samples, 0.03%; 0.00%)</title><rect x="21.7" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.74" y="559.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (10 samples, 0.02%; -0.00%)</title><rect x="598.0" y="405" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="601.02" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (6 samples, 0.01%; 0.00%)</title><rect x="209.5" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="212.51" y="143.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (23 samples, 0.05%; -0.00%)</title><rect x="224.8" y="197" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="227.83" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (10 samples, 0.02%; +0.01%)</title><rect x="454.9" y="325" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="457.95" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (5 samples, 0.01%; 0.00%)</title><rect x="1157.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1160.14" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; 0.00%)</title><rect x="907.1" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="910.06" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (24 samples, 0.05%; +0.02%)</title><rect x="1149.8" y="485" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1152.80" y="495.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (685 samples, 1.42%; +0.05%)</title><rect x="176.3" y="117" width="16.8" height="15.0" fill="rgb(255,134,134)" rx="2" ry="2" />
<text  x="179.31" y="127.5" ></text>
</g>
<g >
<title>schema::position (9 samples, 0.02%; -0.00%)</title><rect x="943.1" y="405" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="946.15" y="415.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (28 samples, 0.06%; 0.00%)</title><rect x="756.0" y="309" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="759.04" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (6 samples, 0.01%; +0.01%)</title><rect x="1116.4" y="389" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1119.41" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (6 samples, 0.01%; +0.00%)</title><rect x="15.4" y="309" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="18.38" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (120 samples, 0.25%; +0.01%)</title><rect x="803.8" y="213" width="3.0" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="806.84" y="223.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (5 samples, 0.01%; -0.00%)</title><rect x="587.7" y="405" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="590.74" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (16 samples, 0.03%; +0.02%)</title><rect x="856.7" y="357" width="0.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="859.74" y="367.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; -0.02%)</title><rect x="521.5" y="325" width="0.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="524.52" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (122 samples, 0.25%; -0.02%)</title><rect x="1131.8" y="421" width="3.0" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1134.85" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.02%)</title><rect x="931.8" y="389" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="934.80" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (8 samples, 0.02%; 0.00%)</title><rect x="881.7" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.72" y="399.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (122 samples, 0.25%; +0.01%)</title><rect x="921.1" y="373" width="3.0" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="924.08" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (37 samples, 0.08%; -0.01%)</title><rect x="656.3" y="405" width="0.9" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="659.27" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (8 samples, 0.02%; +0.01%)</title><rect x="698.5" y="453" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="701.52" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (6 samples, 0.01%; +0.01%)</title><rect x="706.6" y="453" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="709.57" y="463.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (5 samples, 0.01%; +0.00%)</title><rect x="192.9" y="85" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="195.85" y="95.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (20 samples, 0.04%; -0.02%)</title><rect x="348.7" y="149" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="351.72" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (6 samples, 0.01%; +0.00%)</title><rect x="1103.1" y="357" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1106.12" y="367.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (17 samples, 0.04%; -0.00%)</title><rect x="541.3" y="405" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="544.33" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (66 samples, 0.14%; +0.13%)</title><rect x="1139.8" y="485" width="1.7" height="15.0" fill="rgb(255,32,32)" rx="2" ry="2" />
<text  x="1142.85" y="495.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (5 samples, 0.01%; 0.00%)</title><rect x="1138.4" y="181" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.35" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (30 samples, 0.06%; +0.01%)</title><rect x="571.0" y="277" width="0.7" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="573.98" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (29 samples, 0.06%; -0.01%)</title><rect x="690.3" y="469" width="0.7" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="693.30" y="479.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (4,463 samples, 9.25%; +0.01%)</title><rect x="740.8" y="437" width="109.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="743.85" y="447.5" >cql3::query_p..</text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (13 samples, 0.03%; +0.01%)</title><rect x="1052.5" y="277" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1055.46" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (11 samples, 0.02%; +0.00%)</title><rect x="585.9" y="373" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="588.91" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (82 samples, 0.17%; 0.00%)</title><rect x="17.0" y="357" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.00" y="367.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1,851 samples, 3.84%; +0.01%)</title><rect x="166.5" y="181" width="45.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="169.53" y="191.5" >muta..</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (8 samples, 0.02%; +0.00%)</title><rect x="308.4" y="165" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="311.40" y="175.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (8 samples, 0.02%; -0.01%)</title><rect x="841.6" y="293" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="844.62" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (13 samples, 0.03%; +0.01%)</title><rect x="797.1" y="245" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="800.09" y="255.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (9 samples, 0.02%; +0.01%)</title><rect x="845.8" y="293" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="848.83" y="303.5" ></text>
</g>
<g >
<title>__tls_init (6 samples, 0.01%; +0.01%)</title><rect x="487.0" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="490.04" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (33 samples, 0.07%; +0.02%)</title><rect x="682.1" y="453" width="0.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="685.06" y="463.5" ></text>
</g>
<g >
<title>operator delete (62 samples, 0.13%; -0.01%)</title><rect x="560.9" y="325" width="1.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="563.93" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; +0.00%)</title><rect x="535.5" y="245" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="538.46" y="255.5" ></text>
</g>
<g >
<title>auth::resource::resource (103 samples, 0.21%; +0.01%)</title><rect x="782.8" y="389" width="2.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="785.80" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (156 samples, 0.32%; +0.01%)</title><rect x="195.7" y="117" width="3.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="198.71" y="127.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (5 samples, 0.01%; 0.00%)</title><rect x="966.7" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="969.68" y="399.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (88 samples, 0.18%; +0.00%)</title><rect x="351.9" y="165" width="2.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="354.85" y="175.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (36 samples, 0.07%; -0.01%)</title><rect x="225.4" y="229" width="0.9" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="228.39" y="239.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (9 samples, 0.02%; +0.01%)</title><rect x="1134.6" y="405" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1137.61" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (12 samples, 0.02%; +0.00%)</title><rect x="313.5" y="181" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="316.54" y="191.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (182 samples, 0.38%; -0.00%)</title><rect x="949.2" y="405" width="4.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="952.24" y="415.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (8 samples, 0.02%; -0.00%)</title><rect x="14.2" y="613" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="17.23" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (35 samples, 0.07%; +0.00%)</title><rect x="291.9" y="261" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="294.89" y="271.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (13 samples, 0.03%; +0.01%)</title><rect x="1153.1" y="405" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1156.08" y="415.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (1,040 samples, 2.16%; -0.00%)</title><rect x="798.2" y="277" width="25.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="801.19" y="287.5" >a..</text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (6 samples, 0.01%; +0.01%)</title><rect x="1058.4" y="293" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1061.43" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (34 samples, 0.07%; +0.00%)</title><rect x="760.5" y="389" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="763.47" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (31 samples, 0.06%; 0.00%)</title><rect x="881.2" y="437" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.23" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (426 samples, 0.88%; +0.01%)</title><rect x="673.5" y="501" width="10.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="676.49" y="511.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (22 samples, 0.05%; +0.01%)</title><rect x="422.4" y="421" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="425.36" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (68 samples, 0.14%; -0.00%)</title><rect x="804.8" y="165" width="1.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="807.80" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (304 samples, 0.63%; -0.02%)</title><rect x="565.4" y="309" width="7.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="568.36" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (17 samples, 0.04%; +0.01%)</title><rect x="444.9" y="293" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="447.89" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (18 samples, 0.04%; 0.00%)</title><rect x="420.3" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="423.26" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (6 samples, 0.01%; +0.01%)</title><rect x="909.7" y="293" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="912.73" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (126 samples, 0.26%; +0.00%)</title><rect x="989.7" y="309" width="3.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="992.66" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (24 samples, 0.05%; +0.02%)</title><rect x="596.2" y="389" width="0.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="599.16" y="399.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (12 samples, 0.02%; +0.00%)</title><rect x="1084.1" y="309" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1087.07" y="319.5" ></text>
</g>
<g >
<title>operator delete (72 samples, 0.15%; +0.01%)</title><rect x="93.6" y="437" width="1.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="96.62" y="447.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (5 samples, 0.01%; +0.01%)</title><rect x="909.0" y="277" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="912.02" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (24 samples, 0.05%; +0.01%)</title><rect x="702.9" y="453" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="705.88" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (22 samples, 0.05%; -0.02%)</title><rect x="714.5" y="421" width="0.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="717.50" y="431.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (496 samples, 1.03%; -0.01%)</title><rect x="919.3" y="389" width="12.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="922.32" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (9 samples, 0.02%; +0.01%)</title><rect x="1102.9" y="357" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1105.90" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (39 samples, 0.08%; +0.02%)</title><rect x="450.2" y="261" width="1.0" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="453.20" y="271.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (13 samples, 0.03%; +0.02%)</title><rect x="1070.5" y="277" width="0.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1073.46" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (11 samples, 0.02%; 0.00%)</title><rect x="19.0" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.00" y="367.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (16 samples, 0.03%; +0.01%)</title><rect x="302.2" y="213" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="305.16" y="223.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (21 samples, 0.04%; +0.01%)</title><rect x="95.7" y="437" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="98.65" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.01%; 0.00%)</title><rect x="290.8" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="293.81" y="303.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%; -0.00%)</title><rect x="497.2" y="293" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="500.22" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (8 samples, 0.02%; +0.01%)</title><rect x="794.2" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="797.20" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (17 samples, 0.04%; -0.00%)</title><rect x="55.3" y="469" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="58.28" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="937.8" y="373" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="940.81" y="383.5" ></text>
</g>
<g >
<title>operator delete (54 samples, 0.11%; -0.02%)</title><rect x="941.5" y="405" width="1.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="944.46" y="415.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (254 samples, 0.53%; 0.00%)</title><rect x="14.9" y="485" width="6.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.89" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (9 samples, 0.02%; +0.01%)</title><rect x="818.0" y="69" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="820.98" y="79.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (117 samples, 0.24%; -0.00%)</title><rect x="16.5" y="373" width="2.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="19.48" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (10 samples, 0.02%; +0.00%)</title><rect x="682.4" y="437" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="685.40" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (324 samples, 0.67%; +0.04%)</title><rect x="1154.8" y="469" width="7.9" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="1157.82" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (25 samples, 0.05%; +0.03%)</title><rect x="449.6" y="261" width="0.6" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="452.59" y="271.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (11 samples, 0.02%; 0.00%)</title><rect x="1138.3" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.33" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (5 samples, 0.01%; +0.00%)</title><rect x="952.5" y="341" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="955.47" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.01%; -0.02%)</title><rect x="783.8" y="325" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="786.81" y="335.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (28 samples, 0.06%; 0.00%)</title><rect x="694.9" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.92" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (13 samples, 0.03%; +0.00%)</title><rect x="612.0" y="437" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="615.04" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (16 samples, 0.03%; +0.01%)</title><rect x="539.4" y="341" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="542.45" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (484 samples, 1.00%; +0.02%)</title><rect x="1111.1" y="421" width="11.8" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1114.05" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;current_deleter&lt;range_tombstone_entry&gt; (5 samples, 0.01%; +0.00%)</title><rect x="572.0" y="261" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="574.99" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (349 samples, 0.72%; -0.02%)</title><rect x="809.9" y="181" width="8.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="812.86" y="191.5" ></text>
</g>
<g >
<title>operator delete (46 samples, 0.10%; +0.02%)</title><rect x="1124.4" y="421" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1127.36" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (14 samples, 0.03%; 0.00%)</title><rect x="412.3" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="415.25" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (6 samples, 0.01%; +0.00%)</title><rect x="953.5" y="389" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="956.47" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (26 samples, 0.05%; +0.00%)</title><rect x="841.0" y="293" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="843.96" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.05%; -0.00%)</title><rect x="209.9" y="149" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="212.90" y="159.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (11 samples, 0.02%; +0.01%)</title><rect x="426.5" y="357" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="429.47" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (7 samples, 0.01%; +0.01%)</title><rect x="134.4" y="245" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="137.38" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (33 samples, 0.07%; -0.01%)</title><rect x="962.9" y="373" width="0.8" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="965.94" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (19 samples, 0.04%; +0.01%)</title><rect x="438.1" y="261" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="441.11" y="271.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (39 samples, 0.08%; -0.00%)</title><rect x="660.4" y="469" width="1.0" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="663.40" y="479.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (9 samples, 0.02%; -0.01%)</title><rect x="76.2" y="421" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="79.18" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume (11 samples, 0.02%; +0.00%)</title><rect x="506.9" y="197" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="509.93" y="207.5" ></text>
</g>
</g>
</svg>
