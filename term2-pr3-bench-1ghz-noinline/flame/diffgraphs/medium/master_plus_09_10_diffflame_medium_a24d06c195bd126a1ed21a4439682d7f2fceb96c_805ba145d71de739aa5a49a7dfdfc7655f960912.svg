<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>reader_concurrency_semaphore::check_queue_size (9 samples, 0.02%; -0.03%)</title><rect x="1026.0" y="197" width="0.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1029.04" y="207.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1,174 samples, 2.39%; -0.03%)</title><rect x="336.4" y="181" width="28.3" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="339.43" y="191.5" >w..</text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (53 samples, 0.11%; +0.02%)</title><rect x="1074.4" y="293" width="1.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1077.42" y="303.5" ></text>
</g>
<g >
<title>schema::column_at (15 samples, 0.03%; +0.01%)</title><rect x="364.7" y="197" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="367.73" y="207.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (11 samples, 0.02%; +0.00%)</title><rect x="219.0" y="117" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="221.97" y="127.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (16 samples, 0.03%; 0.00%)</title><rect x="684.0" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.03" y="367.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (6 samples, 0.01%; -0.01%)</title><rect x="448.9" y="277" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="451.88" y="287.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (6 samples, 0.01%; +0.00%)</title><rect x="1034.1" y="213" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1037.12" y="223.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (11 samples, 0.02%; 0.00%)</title><rect x="480.3" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="483.26" y="223.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (627 samples, 1.28%; -0.02%)</title><rect x="493.1" y="277" width="15.1" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="496.10" y="287.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (18 samples, 0.04%; 0.00%)</title><rect x="627.7" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="630.75" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt; (5 samples, 0.01%; +0.01%)</title><rect x="847.8" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="850.85" y="399.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (6 samples, 0.01%; 0.00%)</title><rect x="1032.6" y="181" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1035.58" y="191.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (17 samples, 0.03%; 0.00%)</title><rect x="860.6" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.62" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (15 samples, 0.03%; 0.00%)</title><rect x="479.9" y="181" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="482.85" y="191.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (12 samples, 0.02%; 0.00%)</title><rect x="887.2" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="890.23" y="319.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (14 samples, 0.03%; -0.01%)</title><rect x="172.1" y="133" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="175.13" y="143.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (28 samples, 0.06%; +0.03%)</title><rect x="51.0" y="469" width="0.7" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="54.04" y="479.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (30 samples, 0.06%; +0.00%)</title><rect x="410.2" y="261" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="413.22" y="271.5" ></text>
</g>
<g >
<title>__tls_init (6 samples, 0.01%; -0.01%)</title><rect x="455.2" y="325" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="458.20" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (408 samples, 0.83%; +0.02%)</title><rect x="63.8" y="421" width="9.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="66.79" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (803 samples, 1.64%; -0.04%)</title><rect x="123.6" y="309" width="19.3" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="126.59" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (48,125 samples, 98.06%; -0.00%)</title><rect x="21.8" y="533" width="1157.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="24.78" y="543.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (48 samples, 0.10%; -0.01%)</title><rect x="1155.4" y="437" width="1.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1158.45" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (36 samples, 0.07%; +0.02%)</title><rect x="648.4" y="469" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="651.45" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (67 samples, 0.14%; 0.00%)</title><rect x="15.3" y="341" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.31" y="351.5" ></text>
</g>
<g >
<title>reader_permit::consume (26 samples, 0.05%; +0.02%)</title><rect x="281.6" y="277" width="0.7" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="284.63" y="287.5" ></text>
</g>
<g >
<title>table::make_reader (4,549 samples, 9.27%; -0.01%)</title><rect x="424.4" y="357" width="109.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="427.40" y="367.5" >table::make_r..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (26 samples, 0.05%; +0.02%)</title><rect x="1077.0" y="309" width="0.6" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="1079.99" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (22 samples, 0.04%; -0.01%)</title><rect x="669.4" y="437" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="672.39" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (25 samples, 0.05%; +0.01%)</title><rect x="247.5" y="165" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="250.53" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (6 samples, 0.01%; +0.01%)</title><rect x="827.1" y="421" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="830.15" y="431.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (4,638 samples, 9.45%; +0.00%)</title><rect x="422.3" y="389" width="111.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="425.34" y="399.5" >std::function..</text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (8 samples, 0.02%; -0.02%)</title><rect x="141.0" y="261" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="143.97" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (16 samples, 0.03%; +0.02%)</title><rect x="296.8" y="293" width="0.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="299.78" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; 0.00%)</title><rect x="33.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.76" y="463.5" ></text>
</g>
<g >
<title>operator new (97 samples, 0.20%; 0.00%)</title><rect x="971.7" y="357" width="2.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="974.75" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (22 samples, 0.04%; -0.00%)</title><rect x="141.2" y="261" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="144.16" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; +0.00%)</title><rect x="540.5" y="357" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="543.54" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (11 samples, 0.02%; +0.00%)</title><rect x="991.2" y="293" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="994.25" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (20 samples, 0.04%; -0.01%)</title><rect x="435.1" y="261" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="438.06" y="271.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (19 samples, 0.04%; +0.01%)</title><rect x="742.0" y="293" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="744.96" y="303.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (8 samples, 0.02%; +0.01%)</title><rect x="565.7" y="277" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="568.66" y="287.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt; (5 samples, 0.01%; +0.00%)</title><rect x="1137.1" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1140.05" y="431.5" ></text>
</g>
<g >
<title>operator delete (24 samples, 0.05%; -0.01%)</title><rect x="42.0" y="485" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="44.98" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (13 samples, 0.03%; -0.00%)</title><rect x="219.2" y="149" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="222.23" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (13 samples, 0.03%; -0.01%)</title><rect x="655.3" y="485" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="658.28" y="495.5" ></text>
</g>
<g >
<title>operator delete (27 samples, 0.06%; 0.00%)</title><rect x="696.5" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.54" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1,292 samples, 2.63%; +0.04%)</title><rect x="173.3" y="133" width="31.0" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="176.26" y="143.5" >co..</text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (32 samples, 0.07%; -0.01%)</title><rect x="102.8" y="421" width="0.7" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="105.76" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (6 samples, 0.01%; 0.00%)</title><rect x="983.6" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="986.56" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.01%; -0.00%)</title><rect x="838.8" y="405" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="841.81" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (19 samples, 0.04%; +0.00%)</title><rect x="1037.2" y="181" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1040.17" y="191.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (5 samples, 0.01%; 0.00%)</title><rect x="392.0" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="395.02" y="239.5" ></text>
</g>
<g >
<title>row::row (1,395 samples, 2.84%; 0.00%)</title><rect x="171.7" y="149" width="33.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="174.65" y="159.5" >ro..</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (5 samples, 0.01%; 0.00%)</title><rect x="17.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.04" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (39 samples, 0.08%; +0.00%)</title><rect x="953.9" y="357" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="956.91" y="367.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (244 samples, 0.50%; -0.01%)</title><rect x="723.5" y="421" width="5.8" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="726.47" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (369 samples, 0.75%; -0.01%)</title><rect x="560.2" y="309" width="8.9" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="563.21" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (39 samples, 0.08%; 0.00%)</title><rect x="860.2" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.16" y="479.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (20 samples, 0.04%; 0.00%)</title><rect x="684.0" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.96" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (20 samples, 0.04%; +0.00%)</title><rect x="1149.5" y="485" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1152.46" y="495.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (7 samples, 0.01%; -0.02%)</title><rect x="707.6" y="405" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="710.65" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (12 samples, 0.02%; +0.01%)</title><rect x="589.9" y="389" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="592.85" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (71 samples, 0.14%; -0.00%)</title><rect x="17.7" y="341" width="1.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="20.69" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (17 samples, 0.03%; +0.01%)</title><rect x="753.0" y="373" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="755.99" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (26 samples, 0.05%; -0.00%)</title><rect x="607.1" y="437" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="610.09" y="447.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (5 samples, 0.01%; -0.01%)</title><rect x="553.1" y="341" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="556.09" y="351.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (14 samples, 0.03%; -0.01%)</title><rect x="837.1" y="357" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="840.05" y="367.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (4,158 samples, 8.47%; +0.08%)</title><rect x="729.6" y="437" width="100.0" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="732.62" y="447.5" >cql3::query_..</text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (7 samples, 0.01%; +0.01%)</title><rect x="76.6" y="453" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="79.63" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (7 samples, 0.01%; +0.00%)</title><rect x="589.5" y="373" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="592.49" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.02%; +0.01%)</title><rect x="509.9" y="293" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="512.91" y="303.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (5 samples, 0.01%; +0.00%)</title><rect x="1141.1" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1144.12" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (7 samples, 0.01%; -0.01%)</title><rect x="898.9" y="277" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="901.94" y="287.5" ></text>
</g>
<g >
<title>operator new (33 samples, 0.07%; -0.00%)</title><rect x="499.7" y="197" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="502.71" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (10 samples, 0.02%; -0.01%)</title><rect x="620.3" y="389" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="623.34" y="399.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (5,569 samples, 11.35%; -0.05%)</title><rect x="718.9" y="469" width="133.9" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="721.92" y="479.5" >single_node_cql_..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (13 samples, 0.03%; +0.02%)</title><rect x="865.8" y="469" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="868.79" y="479.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (5 samples, 0.01%; -0.02%)</title><rect x="245.0" y="165" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="247.96" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (22 samples, 0.04%; +0.00%)</title><rect x="102.1" y="389" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="105.09" y="399.5" ></text>
</g>
<g >
<title>auth::resource::parent (115 samples, 0.23%; -0.01%)</title><rect x="777.4" y="325" width="2.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="780.35" y="335.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (17 samples, 0.03%; -0.00%)</title><rect x="1130.9" y="389" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1133.87" y="399.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (16 samples, 0.03%; +0.00%)</title><rect x="1141.7" y="469" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1144.72" y="479.5" ></text>
</g>
<g >
<title>operator new (62 samples, 0.13%; -0.00%)</title><rect x="716.5" y="421" width="1.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="719.52" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (6 samples, 0.01%; -0.01%)</title><rect x="159.6" y="197" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="162.56" y="207.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (9 samples, 0.02%; -0.01%)</title><rect x="428.6" y="341" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="431.56" y="351.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (55 samples, 0.11%; -0.02%)</title><rect x="928.2" y="373" width="1.4" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="931.23" y="383.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (8 samples, 0.02%; +0.00%)</title><rect x="828.1" y="421" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="831.08" y="431.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (92 samples, 0.19%; +0.01%)</title><rect x="522.2" y="309" width="2.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="525.22" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="1034.5" y="213" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1037.53" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (13 samples, 0.03%; 0.00%)</title><rect x="1178.3" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1181.31" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (16 samples, 0.03%; -0.02%)</title><rect x="988.2" y="341" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="991.17" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (8 samples, 0.02%; +0.01%)</title><rect x="950.0" y="405" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="952.99" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (28 samples, 0.06%; +0.01%)</title><rect x="935.1" y="389" width="0.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="938.13" y="399.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (36 samples, 0.07%; +0.03%)</title><rect x="523.4" y="261" width="0.8" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="526.37" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (342 samples, 0.70%; +0.01%)</title><rect x="794.0" y="181" width="8.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="797.04" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (5 samples, 0.01%; +0.01%)</title><rect x="629.6" y="469" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="632.55" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (10 samples, 0.02%; +0.01%)</title><rect x="300.0" y="229" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="302.95" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (22 samples, 0.04%; +0.01%)</title><rect x="1047.8" y="277" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1050.80" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (9 samples, 0.02%; +0.01%)</title><rect x="1078.0" y="325" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1081.00" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (19 samples, 0.04%; +0.01%)</title><rect x="79.8" y="453" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="82.85" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (6 samples, 0.01%; -0.01%)</title><rect x="832.5" y="437" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="835.46" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (5 samples, 0.01%; +0.00%)</title><rect x="285.8" y="357" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="288.79" y="367.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (21 samples, 0.04%; 0.00%)</title><rect x="1142.1" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.10" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (9 samples, 0.02%; +0.01%)</title><rect x="612.3" y="405" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="615.33" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (84 samples, 0.17%; +0.02%)</title><rect x="1118.0" y="341" width="2.0" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1120.96" y="351.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (20 samples, 0.04%; +0.00%)</title><rect x="37.8" y="453" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="40.80" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (108 samples, 0.22%; -0.01%)</title><rect x="947.0" y="405" width="2.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="949.98" y="415.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::touch (7 samples, 0.01%; +0.01%)</title><rect x="738.7" y="325" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="741.71" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (10 samples, 0.02%; +0.00%)</title><rect x="859.4" y="373" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="862.44" y="383.5" ></text>
</g>
<g >
<title>database::find_schema (77 samples, 0.16%; -0.00%)</title><rect x="755.2" y="389" width="1.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="758.16" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (24 samples, 0.05%; -0.02%)</title><rect x="61.7" y="437" width="0.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="64.70" y="447.5" ></text>
</g>
<g >
<title>main (48,127 samples, 98.07%; 0.00%)</title><rect x="21.8" y="613" width="1157.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.78" y="623.5" >main</text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (21 samples, 0.04%; -0.01%)</title><rect x="704.8" y="437" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="707.76" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (172 samples, 0.35%; -0.01%)</title><rect x="1091.2" y="261" width="4.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1094.18" y="271.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; -0.01%)</title><rect x="631.7" y="469" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="634.71" y="479.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (168 samples, 0.34%; +0.01%)</title><rect x="526.3" y="309" width="4.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="529.30" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (99 samples, 0.20%; +0.01%)</title><rect x="943.6" y="389" width="2.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="946.62" y="399.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (5 samples, 0.01%; 0.00%)</title><rect x="19.1" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.06" y="255.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (2,510 samples, 5.11%; -0.01%)</title><rect x="994.9" y="341" width="60.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="997.88" y="351.5" >servic..</text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (14 samples, 0.03%; -0.02%)</title><rect x="355.2" y="165" width="0.4" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="358.23" y="175.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (6 samples, 0.01%; -0.01%)</title><rect x="981.2" y="357" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="984.15" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (5,985 samples, 12.20%; +0.01%)</title><rect x="119.4" y="325" width="143.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="122.40" y="335.5" >mutation_reader_me..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (12 samples, 0.02%; +0.01%)</title><rect x="1124.9" y="405" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1127.86" y="415.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (5,230 samples, 10.66%; -0.03%)</title><rect x="720.3" y="453" width="125.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="723.27" y="463.5" >single_node_cql..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (274 samples, 0.56%; +0.00%)</title><rect x="223.8" y="229" width="6.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="226.83" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (7 samples, 0.01%; +0.01%)</title><rect x="568.3" y="293" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="571.33" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (106 samples, 0.22%; -0.00%)</title><rect x="848.0" y="389" width="2.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="851.02" y="399.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (5 samples, 0.01%; +0.01%)</title><rect x="1032.2" y="165" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1035.25" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (73 samples, 0.15%; -0.04%)</title><rect x="1022.0" y="229" width="1.7" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="1024.95" y="239.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (344 samples, 0.70%; -0.01%)</title><rect x="472.5" y="245" width="8.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="475.49" y="255.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (71 samples, 0.14%; -0.00%)</title><rect x="152.4" y="213" width="1.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="155.39" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (13 samples, 0.03%; +0.01%)</title><rect x="887.6" y="309" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="890.64" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (23 samples, 0.05%; +0.01%)</title><rect x="139.6" y="261" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="142.62" y="271.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; -0.00%)</title><rect x="108.9" y="421" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="111.89" y="431.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (327 samples, 0.67%; -0.00%)</title><rect x="205.2" y="165" width="7.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="208.19" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (30 samples, 0.06%; +0.03%)</title><rect x="415.7" y="357" width="0.8" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="418.75" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (28 samples, 0.06%; -0.02%)</title><rect x="508.2" y="277" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="511.17" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (16 samples, 0.03%; +0.02%)</title><rect x="68.3" y="389" width="0.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="71.31" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (8 samples, 0.02%; +0.01%)</title><rect x="122.5" y="293" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="125.46" y="303.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (17 samples, 0.03%; +0.03%)</title><rect x="1089.2" y="261" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1092.16" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (11 samples, 0.02%; +0.00%)</title><rect x="841.9" y="373" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="844.89" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (5 samples, 0.01%; +0.01%)</title><rect x="907.0" y="357" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="910.05" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (19 samples, 0.04%; +0.02%)</title><rect x="286.8" y="357" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="289.85" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (103 samples, 0.21%; -0.01%)</title><rect x="676.7" y="469" width="2.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="679.75" y="479.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (62 samples, 0.13%; +0.02%)</title><rect x="474.6" y="213" width="1.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="477.63" y="223.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (11 samples, 0.02%; 0.00%)</title><rect x="592.4" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="595.43" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (7 samples, 0.01%; -0.01%)</title><rect x="234.8" y="245" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="237.79" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (20 samples, 0.04%; +0.01%)</title><rect x="629.7" y="485" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="632.69" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (39 samples, 0.08%; -0.00%)</title><rect x="620.6" y="405" width="0.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="623.58" y="415.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (11 samples, 0.02%; -0.00%)</title><rect x="994.5" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="997.47" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (5 samples, 0.01%; -0.01%)</title><rect x="43.3" y="469" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="46.28" y="479.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (26 samples, 0.05%; -0.01%)</title><rect x="314.7" y="165" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="317.69" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (15 samples, 0.03%; +0.01%)</title><rect x="113.4" y="373" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="116.44" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (179 samples, 0.36%; -0.01%)</title><rect x="152.1" y="229" width="4.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="155.08" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (13 samples, 0.03%; +0.02%)</title><rect x="590.6" y="389" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="593.57" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (79 samples, 0.16%; -0.01%)</title><rect x="804.9" y="261" width="1.9" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="807.86" y="271.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (23 samples, 0.05%; -0.01%)</title><rect x="487.7" y="309" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="490.66" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (19 samples, 0.04%; +0.00%)</title><rect x="717.6" y="389" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="720.55" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; -0.00%)</title><rect x="449.0" y="277" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="452.03" y="287.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (8 samples, 0.02%; +0.01%)</title><rect x="125.7" y="277" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="128.73" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (91 samples, 0.19%; +0.07%)</title><rect x="98.8" y="405" width="2.2" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="101.84" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (6 samples, 0.01%; 0.00%)</title><rect x="321.8" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="324.81" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (9 samples, 0.02%; -0.02%)</title><rect x="447.1" y="261" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="450.10" y="271.5" ></text>
</g>
<g >
<title>operator delete (19 samples, 0.04%; +0.00%)</title><rect x="1171.3" y="453" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1174.34" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (13 samples, 0.03%; +0.01%)</title><rect x="1021.6" y="197" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1024.57" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (43 samples, 0.09%; -0.00%)</title><rect x="818.6" y="309" width="1.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="821.64" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (89 samples, 0.18%; +0.04%)</title><rect x="623.1" y="485" width="2.2" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="626.13" y="495.5" ></text>
</g>
<g >
<title>operator new (30 samples, 0.06%; -0.00%)</title><rect x="213.3" y="165" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="216.27" y="175.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (56 samples, 0.11%; -0.00%)</title><rect x="953.5" y="389" width="1.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="956.55" y="399.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (8 samples, 0.02%; +0.01%)</title><rect x="1116.6" y="373" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1119.64" y="383.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (458 samples, 0.93%; -0.01%)</title><rect x="29.4" y="501" width="11.0" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="32.36" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (21 samples, 0.04%; +0.01%)</title><rect x="567.3" y="277" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="570.30" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (11 samples, 0.02%; +0.02%)</title><rect x="261.8" y="293" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="264.84" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (7 samples, 0.01%; +0.00%)</title><rect x="402.8" y="213" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="405.84" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (3,051 samples, 6.22%; -0.01%)</title><rect x="161.0" y="245" width="73.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="164.02" y="255.5" >partitio..</text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (8 samples, 0.02%; +0.01%)</title><rect x="411.1" y="325" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="414.06" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (28 samples, 0.06%; +0.03%)</title><rect x="703.1" y="421" width="0.7" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="706.08" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (21 samples, 0.04%; -0.01%)</title><rect x="1014.6" y="277" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1017.60" y="287.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (6 samples, 0.01%; +0.01%)</title><rect x="238.7" y="197" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="241.66" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (258 samples, 0.53%; +0.01%)</title><rect x="988.6" y="341" width="6.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="991.56" y="351.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (60 samples, 0.12%; +0.01%)</title><rect x="855.2" y="469" width="1.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="858.21" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (17 samples, 0.03%; +0.00%)</title><rect x="856.7" y="485" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="859.70" y="495.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%; 0.00%)</title><rect x="423.9" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="426.88" y="367.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (5 samples, 0.01%; 0.00%)</title><rect x="684.5" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.52" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;managed_bytes&gt;::dispose (6 samples, 0.01%; +0.01%)</title><rect x="910.3" y="373" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="913.34" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (30 samples, 0.06%; -0.01%)</title><rect x="150.6" y="229" width="0.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="153.61" y="239.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (62 samples, 0.13%; -0.01%)</title><rect x="1165.2" y="469" width="1.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1168.16" y="479.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (8 samples, 0.02%; 0.00%)</title><rect x="1176.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.61" y="415.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%; -0.00%)</title><rect x="529.0" y="261" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="532.02" y="271.5" ></text>
</g>
<g >
<title>operator delete (42 samples, 0.09%; +0.01%)</title><rect x="588.3" y="389" width="1.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="591.27" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (6 samples, 0.01%; -0.08%)</title><rect x="1120.5" y="341" width="0.1" height="15.0" fill="rgb(123,123,255)" rx="2" ry="2" />
<text  x="1123.46" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (9 samples, 0.02%; +0.00%)</title><rect x="939.7" y="405" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="942.72" y="415.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (5 samples, 0.01%; 0.00%)</title><rect x="1142.9" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.87" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (15 samples, 0.03%; -0.02%)</title><rect x="1051.8" y="277" width="0.4" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="1054.84" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (25 samples, 0.05%; -0.00%)</title><rect x="532.7" y="309" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="535.68" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (41 samples, 0.08%; -0.00%)</title><rect x="228.0" y="149" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="231.03" y="159.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (16 samples, 0.03%; +0.02%)</title><rect x="266.1" y="341" width="0.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="269.10" y="351.5" ></text>
</g>
<g >
<title>operator delete (25 samples, 0.05%; +0.02%)</title><rect x="50.0" y="469" width="0.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="52.99" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (29 samples, 0.06%; +0.02%)</title><rect x="823.3" y="293" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="826.25" y="303.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (5 samples, 0.01%; 0.00%)</title><rect x="70.3" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.30" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (73 samples, 0.15%; -0.02%)</title><rect x="1059.9" y="309" width="1.7" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="1062.87" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (30 samples, 0.06%; -0.02%)</title><rect x="407.1" y="277" width="0.8" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="410.14" y="287.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,592 samples, 9.36%; +0.01%)</title><rect x="143.6" y="293" width="110.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="146.57" y="303.5" >seastar::do_u..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (210 samples, 0.43%; -0.02%)</title><rect x="396.3" y="213" width="5.0" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="399.30" y="223.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (197 samples, 0.40%; -0.00%)</title><rect x="15.3" y="389" width="4.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="18.31" y="399.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (963 samples, 1.96%; -0.00%)</title><rect x="783.8" y="277" width="23.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="786.82" y="287.5" >a..</text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (5 samples, 0.01%; -0.04%)</title><rect x="80.6" y="453" width="0.1" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="83.57" y="463.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (409 samples, 0.83%; -0.01%)</title><rect x="458.8" y="309" width="9.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="461.76" y="319.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (12 samples, 0.02%; -0.04%)</title><rect x="571.2" y="373" width="0.3" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="574.17" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (5 samples, 0.01%; -0.00%)</title><rect x="540.8" y="373" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="543.80" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%; +0.00%)</title><rect x="149.4" y="245" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="152.36" y="255.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (7 samples, 0.01%; +0.01%)</title><rect x="1095.6" y="293" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1098.63" y="303.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (860 samples, 1.75%; 0.00%)</title><rect x="550.8" y="389" width="20.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="553.78" y="399.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; -0.00%)</title><rect x="415.0" y="373" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="418.03" y="383.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (31 samples, 0.06%; 0.00%)</title><rect x="357.7" y="149" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="360.73" y="159.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (11 samples, 0.02%; 0.00%)</title><rect x="625.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="628.29" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (147 samples, 0.30%; 0.00%)</title><rect x="835.3" y="405" width="3.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="838.27" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (22 samples, 0.04%; +0.02%)</title><rect x="927.1" y="389" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="930.05" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (524 samples, 1.07%; 0.00%)</title><rect x="888.1" y="325" width="12.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="891.05" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (9 samples, 0.02%; +0.00%)</title><rect x="488.2" y="309" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="491.22" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (43 samples, 0.09%; +0.03%)</title><rect x="295.7" y="277" width="1.1" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="298.74" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (34 samples, 0.07%; 0.00%)</title><rect x="150.5" y="245" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="153.52" y="255.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (7 samples, 0.01%; -0.01%)</title><rect x="455.4" y="325" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="458.40" y="335.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (74 samples, 0.15%; 0.00%)</title><rect x="282.9" y="309" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="285.90" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (11 samples, 0.02%; +0.00%)</title><rect x="599.1" y="437" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="602.06" y="447.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (8 samples, 0.02%; -0.00%)</title><rect x="692.6" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="695.59" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (26 samples, 0.05%; +0.00%)</title><rect x="579.6" y="357" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="582.63" y="367.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1,431 samples, 2.92%; +0.01%)</title><rect x="170.8" y="165" width="34.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="173.78" y="175.5" >cl..</text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (8 samples, 0.02%; 0.00%)</title><rect x="795.5" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="798.50" y="127.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (43 samples, 0.09%; +0.05%)</title><rect x="335.1" y="181" width="1.0" height="15.0" fill="rgb(255,155,155)" rx="2" ry="2" />
<text  x="338.06" y="191.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (31 samples, 0.06%; 0.00%)</title><rect x="20.2" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.19" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (136 samples, 0.28%; -0.01%)</title><rect x="1048.6" y="261" width="3.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1051.57" y="271.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (31 samples, 0.06%; 0.00%)</title><rect x="155.6" y="213" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="158.64" y="223.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (21 samples, 0.04%; -0.00%)</title><rect x="502.8" y="197" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="505.81" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (13 samples, 0.03%; -0.01%)</title><rect x="230.6" y="213" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="233.63" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (15 samples, 0.03%; +0.01%)</title><rect x="577.0" y="341" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="579.99" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (46 samples, 0.09%; +0.03%)</title><rect x="553.8" y="309" width="1.1" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="556.81" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (7 samples, 0.01%; -0.02%)</title><rect x="981.0" y="357" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="983.96" y="367.5" ></text>
</g>
<g >
<title>__tls_init (5 samples, 0.01%; -0.01%)</title><rect x="525.3" y="293" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="528.27" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (11 samples, 0.02%; 0.00%)</title><rect x="860.3" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.33" y="399.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (10 samples, 0.02%; +0.01%)</title><rect x="598.8" y="437" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="601.82" y="447.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (3,057 samples, 6.23%; -0.00%)</title><rect x="981.7" y="357" width="73.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="984.73" y="367.5" >service:..</text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (21 samples, 0.04%; 0.00%)</title><rect x="1143.1" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.07" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; +0.01%)</title><rect x="568.1" y="293" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="571.12" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (5 samples, 0.01%; -0.00%)</title><rect x="1046.2" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1049.24" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (11 samples, 0.02%; 0.00%)</title><rect x="19.0" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.99" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (13 samples, 0.03%; +0.01%)</title><rect x="548.7" y="405" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="551.67" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.01%; -0.09%)</title><rect x="897.3" y="229" width="0.2" height="15.0" fill="rgb(116,116,255)" rx="2" ry="2" />
<text  x="900.31" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (42 samples, 0.09%; -0.01%)</title><rect x="1063.8" y="293" width="1.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1066.79" y="303.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (48 samples, 0.10%; +0.00%)</title><rect x="1096.3" y="309" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1099.25" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (35 samples, 0.07%; -0.00%)</title><rect x="833.9" y="421" width="0.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="836.86" y="431.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (5 samples, 0.01%; 0.00%)</title><rect x="1142.9" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.87" y="255.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (5 samples, 0.01%; +0.01%)</title><rect x="22.3" y="517" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="25.31" y="527.5" ></text>
</g>
<g >
<title>reader_permit::consume (17 samples, 0.03%; -0.01%)</title><rect x="503.5" y="181" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="506.53" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (16 samples, 0.03%; -0.00%)</title><rect x="590.2" y="389" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="593.19" y="399.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.03%; 0.00%)</title><rect x="776.1" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="779.12" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (7 samples, 0.01%; -0.00%)</title><rect x="217.2" y="133" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="220.17" y="143.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (66 samples, 0.13%; +0.02%)</title><rect x="303.3" y="261" width="1.6" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="306.32" y="271.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (16 samples, 0.03%; 0.00%)</title><rect x="17.3" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.31" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (5 samples, 0.01%; +0.00%)</title><rect x="1159.4" y="437" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1162.37" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (71 samples, 0.14%; -0.00%)</title><rect x="1048.8" y="229" width="1.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1051.81" y="239.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (5 samples, 0.01%; 0.00%)</title><rect x="684.5" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.52" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (1,920 samples, 3.91%; +0.02%)</title><rect x="769.2" y="389" width="46.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="772.20" y="399.5" >std:..</text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; -0.00%)</title><rect x="866.1" y="469" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="869.10" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (31 samples, 0.06%; -0.03%)</title><rect x="1161.6" y="405" width="0.7" height="15.0" fill="rgb(179,179,255)" rx="2" ry="2" />
<text  x="1164.60" y="415.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (147 samples, 0.30%; +0.04%)</title><rect x="884.5" y="325" width="3.6" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="887.52" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (33 samples, 0.07%; 0.00%)</title><rect x="20.2" y="469" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.19" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (22 samples, 0.04%; +0.01%)</title><rect x="743.5" y="293" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="746.52" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (76 samples, 0.15%; -0.00%)</title><rect x="1059.8" y="325" width="1.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1062.80" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (125 samples, 0.25%; 0.00%)</title><rect x="984.7" y="325" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="987.69" y="335.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (5 samples, 0.01%; +0.00%)</title><rect x="428.8" y="341" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="431.78" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (20 samples, 0.04%; 0.00%)</title><rect x="707.3" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="710.33" y="431.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (11 samples, 0.02%; -0.01%)</title><rect x="596.3" y="405" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="599.35" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (30 samples, 0.06%; -0.00%)</title><rect x="908.7" y="325" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="911.66" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (21 samples, 0.04%; +0.00%)</title><rect x="942.2" y="405" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="945.22" y="415.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (5 samples, 0.01%; -0.00%)</title><rect x="229.4" y="181" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="232.36" y="191.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (26 samples, 0.05%; 0.00%)</title><rect x="1142.1" y="469" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.10" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (24 samples, 0.05%; -0.01%)</title><rect x="531.7" y="341" width="0.6" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="534.71" y="351.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (89 samples, 0.18%; -0.01%)</title><rect x="392.9" y="229" width="2.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="395.86" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="937.0" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="940.03" y="383.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.02%; -0.00%)</title><rect x="475.9" y="181" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="478.91" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (9 samples, 0.02%; -0.01%)</title><rect x="1100.3" y="341" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1103.29" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (5 samples, 0.01%; -0.01%)</title><rect x="549.4" y="421" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="552.41" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="695.0" y="469" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="697.98" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.00%)</title><rect x="667.6" y="453" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="670.61" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (26 samples, 0.05%; +0.01%)</title><rect x="531.0" y="341" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="533.97" y="351.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (12 samples, 0.02%; +0.00%)</title><rect x="987.3" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="990.26" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (9 samples, 0.02%; +0.00%)</title><rect x="645.6" y="405" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="648.61" y="415.5" ></text>
</g>
<g >
<title>query::result::builder::builder (6 samples, 0.01%; +0.01%)</title><rect x="593.0" y="437" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="595.96" y="447.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (11 samples, 0.02%; -0.00%)</title><rect x="365.6" y="213" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="368.59" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (44 samples, 0.09%; +0.04%)</title><rect x="747.6" y="389" width="1.0" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="750.58" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (5 samples, 0.01%; +0.00%)</title><rect x="826.7" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="829.71" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (21 samples, 0.04%; -0.02%)</title><rect x="695.8" y="469" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="698.79" y="479.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (7,212 samples, 14.70%; +0.03%)</title><rect x="114.6" y="373" width="173.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="117.64" y="383.5" >seastar::repeat&lt;mergin..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.01%)</title><rect x="400.4" y="181" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="403.43" y="191.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (11 samples, 0.02%; +0.00%)</title><rect x="767.8" y="341" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="770.78" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (82 samples, 0.17%; +0.00%)</title><rect x="494.2" y="261" width="2.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="497.20" y="271.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (100 samples, 0.20%; -0.00%)</title><rect x="725.8" y="341" width="2.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="728.82" y="351.5" ></text>
</g>
<g >
<title>operator delete (14 samples, 0.03%; 0.00%)</title><rect x="627.4" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="630.41" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (31 samples, 0.06%; +0.02%)</title><rect x="1044.9" y="277" width="0.7" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1047.89" y="287.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (325 samples, 0.66%; -0.03%)</title><rect x="460.7" y="293" width="7.8" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="463.69" y="303.5" ></text>
</g>
<g >
<title>operator delete (20 samples, 0.04%; 0.00%)</title><rect x="409.6" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="412.59" y="271.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (6 samples, 0.01%; 0.00%)</title><rect x="814.1" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="817.07" y="319.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (398 samples, 0.81%; -0.00%)</title><rect x="312.6" y="213" width="9.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="315.62" y="223.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (69 samples, 0.14%; +0.00%)</title><rect x="553.7" y="325" width="1.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="556.71" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (75 samples, 0.15%; +0.02%)</title><rect x="985.5" y="277" width="1.8" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="988.45" y="287.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (39 samples, 0.08%; +0.02%)</title><rect x="68.7" y="389" width="1.0" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="71.72" y="399.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (34 samples, 0.07%; +0.02%)</title><rect x="790.1" y="149" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="793.14" y="159.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (7 samples, 0.01%; -0.00%)</title><rect x="554.7" y="293" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="557.75" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (15 samples, 0.03%; +0.01%)</title><rect x="779.8" y="309" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="782.76" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (7 samples, 0.01%; +0.00%)</title><rect x="652.3" y="437" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="655.34" y="447.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (37 samples, 0.08%; 0.00%)</title><rect x="1142.7" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.73" y="479.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (461 samples, 0.94%; -0.01%)</title><rect x="469.7" y="277" width="11.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="472.73" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; +0.01%)</title><rect x="865.6" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="868.62" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (12 samples, 0.02%; +0.01%)</title><rect x="949.7" y="405" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="952.65" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (13 samples, 0.03%; -0.01%)</title><rect x="1123.1" y="405" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1126.13" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (239 samples, 0.49%; +0.01%)</title><rect x="224.6" y="213" width="5.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="227.57" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (6 samples, 0.01%; +0.01%)</title><rect x="228.8" y="117" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="231.78" y="127.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (16 samples, 0.03%; +0.02%)</title><rect x="683.4" y="485" width="0.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="686.41" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (23 samples, 0.05%; +0.04%)</title><rect x="1066.1" y="325" width="0.6" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="1069.10" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (16 samples, 0.03%; -0.00%)</title><rect x="559.1" y="277" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="562.12" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (23 samples, 0.05%; -0.00%)</title><rect x="18.7" y="293" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="21.73" y="303.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (9 samples, 0.02%; +0.01%)</title><rect x="251.5" y="213" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="254.48" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (5 samples, 0.01%; +0.00%)</title><rect x="787.2" y="261" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="790.23" y="271.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (6 samples, 0.01%; 0.00%)</title><rect x="813.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="816.92" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (98 samples, 0.20%; +0.01%)</title><rect x="799.8" y="149" width="2.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="802.81" y="159.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (31 samples, 0.06%; -0.02%)</title><rect x="947.4" y="389" width="0.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="950.42" y="399.5" ></text>
</g>
<g >
<title>operator new (44 samples, 0.09%; +0.00%)</title><rect x="295.7" y="293" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="298.72" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (20 samples, 0.04%; -0.01%)</title><rect x="487.7" y="277" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="490.71" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (12 samples, 0.02%; -0.00%)</title><rect x="618.2" y="437" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="621.20" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (25 samples, 0.05%; +0.03%)</title><rect x="260.1" y="277" width="0.6" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="263.09" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (19 samples, 0.04%; 0.00%)</title><rect x="69.7" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.65" y="399.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (14 samples, 0.03%; +0.02%)</title><rect x="1065.7" y="277" width="0.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1068.69" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (19 samples, 0.04%; +0.00%)</title><rect x="859.4" y="469" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="862.37" y="479.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (5 samples, 0.01%; 0.00%)</title><rect x="1143.2" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.23" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (33 samples, 0.07%; +0.03%)</title><rect x="964.2" y="341" width="0.8" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="967.25" y="351.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (88 samples, 0.18%; -0.01%)</title><rect x="511.2" y="325" width="2.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="514.23" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (14 samples, 0.03%; +0.00%)</title><rect x="43.6" y="485" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="46.64" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (116 samples, 0.24%; +0.02%)</title><rect x="576.4" y="357" width="2.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="579.39" y="367.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (5 samples, 0.01%; 0.00%)</title><rect x="21.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.45" y="495.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (15 samples, 0.03%; -0.01%)</title><rect x="822.5" y="293" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="825.48" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (596 samples, 1.21%; -0.01%)</title><rect x="235.9" y="261" width="14.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="238.90" y="271.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (8 samples, 0.02%; -0.00%)</title><rect x="219.4" y="133" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="222.35" y="143.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (56 samples, 0.11%; -0.01%)</title><rect x="558.8" y="309" width="1.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="561.79" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (11 samples, 0.02%; 0.00%)</title><rect x="1142.8" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.80" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; +0.01%)</title><rect x="822.1" y="261" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="825.15" y="271.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (5 samples, 0.01%; +0.01%)</title><rect x="799.6" y="117" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="802.64" y="127.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (6 samples, 0.01%; -0.01%)</title><rect x="222.9" y="149" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="225.91" y="159.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (6 samples, 0.01%; +0.01%)</title><rect x="671.7" y="485" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="674.65" y="495.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (7 samples, 0.01%; +0.01%)</title><rect x="733.1" y="421" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="736.09" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (25 samples, 0.05%; +0.02%)</title><rect x="638.2" y="485" width="0.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="641.16" y="495.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (12 samples, 0.02%; +0.01%)</title><rect x="232.2" y="213" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="235.17" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (6 samples, 0.01%; +0.01%)</title><rect x="1038.6" y="245" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1041.59" y="255.5" ></text>
</g>
<g >
<title>database::has_keyspace (83 samples, 0.17%; 0.00%)</title><rect x="824.3" y="357" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="827.31" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (16 samples, 0.03%; +0.01%)</title><rect x="419.4" y="405" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="422.43" y="415.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (54 samples, 0.11%; -0.01%)</title><rect x="230.4" y="229" width="1.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="233.41" y="239.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (11 samples, 0.02%; +0.02%)</title><rect x="423.6" y="357" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="426.61" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (8 samples, 0.02%; -0.00%)</title><rect x="602.6" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="605.60" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="711.8" y="501" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="714.78" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (13 samples, 0.03%; +0.01%)</title><rect x="479.0" y="181" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="482.01" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (6 samples, 0.01%; +0.01%)</title><rect x="1140.4" y="421" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1143.42" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (17 samples, 0.03%; -0.00%)</title><rect x="234.0" y="229" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="236.97" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (10 samples, 0.02%; +0.01%)</title><rect x="765.8" y="357" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="768.81" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (9 samples, 0.02%; +0.01%)</title><rect x="940.3" y="405" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="943.25" y="415.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.01%; -0.02%)</title><rect x="726.7" y="293" width="0.1" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="729.69" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (19 samples, 0.04%; 0.00%)</title><rect x="859.4" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.37" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (14 samples, 0.03%; 0.00%)</title><rect x="1176.6" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.61" y="479.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (7 samples, 0.01%; +0.01%)</title><rect x="365.2" y="197" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="368.18" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (30 samples, 0.06%; +0.01%)</title><rect x="502.1" y="181" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="505.09" y="191.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (5 samples, 0.01%; -0.01%)</title><rect x="234.5" y="245" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="237.50" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (5 samples, 0.01%; +0.01%)</title><rect x="583.0" y="421" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="585.95" y="431.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.04%; +0.01%)</title><rect x="490.9" y="293" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="493.91" y="303.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (8 samples, 0.02%; +0.00%)</title><rect x="911.1" y="389" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="914.13" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (7 samples, 0.01%; +0.00%)</title><rect x="1031.4" y="165" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1034.40" y="175.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (18 samples, 0.04%; -0.02%)</title><rect x="634.6" y="485" width="0.4" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="637.58" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (904 samples, 1.84%; +0.00%)</title><rect x="883.6" y="357" width="21.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="886.55" y="367.5" >c..</text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (11 samples, 0.02%; -0.00%)</title><rect x="333.7" y="181" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="336.73" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (15 samples, 0.03%; +0.01%)</title><rect x="510.4" y="309" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="513.36" y="319.5" ></text>
</g>
<g >
<title>free (16 samples, 0.03%; -0.01%)</title><rect x="35.6" y="421" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="38.56" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (152 samples, 0.31%; -0.01%)</title><rect x="266.5" y="341" width="3.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="269.48" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (27 samples, 0.06%; -0.01%)</title><rect x="448.2" y="261" width="0.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="451.23" y="271.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (23 samples, 0.05%; -0.01%)</title><rect x="334.0" y="181" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="337.00" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (5 samples, 0.01%; +0.00%)</title><rect x="687.3" y="469" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="690.30" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (281 samples, 0.57%; +0.01%)</title><rect x="187.6" y="85" width="6.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="190.59" y="95.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (38 samples, 0.08%; 0.00%)</title><rect x="860.2" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.18" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (21 samples, 0.04%; +0.01%)</title><rect x="908.9" y="309" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="911.87" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (25 samples, 0.05%; 0.00%)</title><rect x="776.6" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="779.63" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (87 samples, 0.18%; -0.01%)</title><rect x="736.9" y="373" width="2.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="739.91" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; -0.01%)</title><rect x="1047.4" y="229" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1050.37" y="239.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.04%; +0.01%)</title><rect x="581.8" y="389" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="584.75" y="399.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.05%; -0.02%)</title><rect x="155.7" y="197" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="158.73" y="207.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (46 samples, 0.09%; +0.00%)</title><rect x="744.9" y="261" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="747.92" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (180 samples, 0.37%; -0.00%)</title><rect x="819.8" y="341" width="4.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="822.81" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (15 samples, 0.03%; +0.02%)</title><rect x="435.5" y="261" width="0.4" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="438.54" y="271.5" ></text>
</g>
<g >
<title>operator delete (35 samples, 0.07%; -0.04%)</title><rect x="652.7" y="485" width="0.8" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="655.68" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (5 samples, 0.01%; +0.01%)</title><rect x="644.2" y="469" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="647.22" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (53 samples, 0.11%; +0.01%)</title><rect x="288.1" y="389" width="1.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="291.12" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (92 samples, 0.19%; +0.01%)</title><rect x="843.4" y="373" width="2.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="846.40" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (32 samples, 0.07%; +0.00%)</title><rect x="844.2" y="357" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="847.24" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (8 samples, 0.02%; +0.01%)</title><rect x="212.0" y="85" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="214.97" y="95.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (12 samples, 0.02%; +0.01%)</title><rect x="670.2" y="437" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="673.16" y="447.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (36 samples, 0.07%; -0.01%)</title><rect x="523.4" y="277" width="0.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="526.37" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (18 samples, 0.04%; 0.00%)</title><rect x="684.0" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.99" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume (30 samples, 0.06%; +0.01%)</title><rect x="392.1" y="229" width="0.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="395.14" y="239.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (40 samples, 0.08%; -0.01%)</title><rect x="307.7" y="213" width="1.0" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="310.69" y="223.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (16 samples, 0.03%; -0.01%)</title><rect x="596.6" y="405" width="0.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="599.61" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (49 samples, 0.10%; -0.02%)</title><rect x="1161.2" y="421" width="1.1" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="1164.17" y="431.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (24 samples, 0.05%; 0.00%)</title><rect x="479.6" y="197" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="482.63" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.01%)</title><rect x="570.6" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="573.59" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (34 samples, 0.07%; +0.03%)</title><rect x="636.0" y="485" width="0.8" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="638.97" y="495.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (5 samples, 0.01%; -0.01%)</title><rect x="742.8" y="277" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="745.78" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (18 samples, 0.04%; +0.00%)</title><rect x="993.1" y="261" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="996.15" y="271.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (5 samples, 0.01%; 0.00%)</title><rect x="17.9" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.91" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (5 samples, 0.01%; -0.01%)</title><rect x="940.8" y="389" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="943.80" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (16 samples, 0.03%; +0.00%)</title><rect x="358.5" y="149" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="361.47" y="159.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (13 samples, 0.03%; -0.01%)</title><rect x="652.0" y="437" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="655.01" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (24 samples, 0.05%; +0.00%)</title><rect x="1138.6" y="421" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1141.59" y="431.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (11 samples, 0.02%; -0.00%)</title><rect x="208.7" y="117" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="211.73" y="127.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (6 samples, 0.01%; +0.00%)</title><rect x="1034.4" y="213" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1037.36" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (9 samples, 0.02%; +0.01%)</title><rect x="718.0" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="721.01" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (20 samples, 0.04%; +0.00%)</title><rect x="937.3" y="405" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="940.27" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (9 samples, 0.02%; +0.01%)</title><rect x="285.6" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="288.57" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (19 samples, 0.04%; -0.02%)</title><rect x="438.5" y="261" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="441.52" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (14 samples, 0.03%; -0.00%)</title><rect x="1151.1" y="485" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1154.07" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; -0.00%)</title><rect x="580.5" y="373" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="583.45" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (5 samples, 0.01%; 0.00%)</title><rect x="40.1" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.06" y="479.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (40 samples, 0.08%; +0.07%)</title><rect x="933.9" y="389" width="1.0" height="15.0" fill="rgb(255,138,138)" rx="2" ry="2" />
<text  x="936.93" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (8 samples, 0.02%; +0.01%)</title><rect x="778.3" y="293" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="781.34" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (6 samples, 0.01%; -0.01%)</title><rect x="1170.5" y="453" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1173.55" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; -0.00%)</title><rect x="492.9" y="261" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="495.88" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (6 samples, 0.01%; 0.00%)</title><rect x="1122.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.72" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (8 samples, 0.02%; +0.01%)</title><rect x="128.2" y="261" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="131.23" y="271.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (173 samples, 0.35%; -0.02%)</title><rect x="846.7" y="437" width="4.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="849.74" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (764 samples, 1.56%; -0.01%)</title><rect x="884.2" y="341" width="18.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="887.23" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (9 samples, 0.02%; +0.01%)</title><rect x="774.2" y="341" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="777.20" y="351.5" ></text>
</g>
<g >
<title>partition_entry::read (66 samples, 0.13%; -0.01%)</title><rect x="511.7" y="309" width="1.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="514.66" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (16 samples, 0.03%; +0.01%)</title><rect x="579.2" y="357" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="582.23" y="367.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (10 samples, 0.02%; 0.00%)</title><rect x="919.2" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="922.21" y="383.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (72 samples, 0.15%; -0.02%)</title><rect x="362.9" y="165" width="1.8" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="365.92" y="175.5" ></text>
</g>
<g >
<title>operator new (85 samples, 0.17%; +0.00%)</title><rect x="1069.8" y="325" width="2.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1072.78" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (10 samples, 0.02%; +0.01%)</title><rect x="740.2" y="341" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="743.23" y="351.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (1,007 samples, 2.05%; +0.01%)</title><rect x="783.4" y="293" width="24.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="786.43" y="303.5" >s..</text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (67 samples, 0.14%; +0.07%)</title><rect x="72.0" y="373" width="1.6" height="15.0" fill="rgb(255,138,138)" rx="2" ry="2" />
<text  x="74.96" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="582.1" y="373" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="585.14" y="383.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (18 samples, 0.04%; +0.01%)</title><rect x="926.6" y="389" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="929.62" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (205 samples, 0.42%; 0.00%)</title><rect x="15.3" y="421" width="4.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.27" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (17 samples, 0.03%; +0.02%)</title><rect x="278.8" y="293" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="281.82" y="303.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (6 samples, 0.01%; +0.01%)</title><rect x="147.6" y="261" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="150.58" y="271.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (6 samples, 0.01%; +0.00%)</title><rect x="484.8" y="325" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="487.78" y="335.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (5 samples, 0.01%; -0.00%)</title><rect x="238.2" y="213" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="241.23" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (16 samples, 0.03%; +0.01%)</title><rect x="689.4" y="453" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="692.42" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (7 samples, 0.01%; +0.01%)</title><rect x="167.2" y="197" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="170.20" y="207.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (94 samples, 0.19%; +0.03%)</title><rect x="916.5" y="373" width="2.2" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="919.47" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (59 samples, 0.12%; +0.02%)</title><rect x="227.6" y="165" width="1.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="230.60" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (121 samples, 0.25%; -0.00%)</title><rect x="943.1" y="405" width="2.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="946.09" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (16 samples, 0.03%; +0.01%)</title><rect x="827.5" y="405" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="830.51" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (24 samples, 0.05%; +0.01%)</title><rect x="580.6" y="373" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="583.60" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (69 samples, 0.14%; -0.04%)</title><rect x="393.1" y="213" width="1.7" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="396.15" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="526.8" y="277" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="529.83" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (10 samples, 0.02%; -0.05%)</title><rect x="204.1" y="117" width="0.2" height="15.0" fill="rgb(153,153,255)" rx="2" ry="2" />
<text  x="207.09" y="127.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (7 samples, 0.01%; -0.01%)</title><rect x="308.8" y="197" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="311.85" y="207.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (94 samples, 0.19%; -0.00%)</title><rect x="813.0" y="341" width="2.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="815.98" y="351.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.02%; -0.02%)</title><rect x="943.4" y="389" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="946.38" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (11 samples, 0.02%; +0.01%)</title><rect x="259.8" y="261" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="262.82" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,424 samples, 6.98%; 0.00%)</title><rect x="309.0" y="245" width="82.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="312.02" y="255.5" >flat_muta..</text>
</g>
<g >
<title>__tls_init (10 samples, 0.02%; +0.01%)</title><rect x="147.3" y="229" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="150.34" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (8 samples, 0.02%; 0.00%)</title><rect x="442.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="445.94" y="303.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (56 samples, 0.11%; -0.03%)</title><rect x="358.9" y="149" width="1.3" height="15.0" fill="rgb(179,179,255)" rx="2" ry="2" />
<text  x="361.86" y="159.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (7 samples, 0.01%; +0.01%)</title><rect x="142.3" y="277" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="145.34" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (35 samples, 0.07%; +0.02%)</title><rect x="657.1" y="485" width="0.9" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="660.13" y="495.5" ></text>
</g>
<g >
<title>query::result::builder::build (81 samples, 0.17%; -0.02%)</title><rect x="591.0" y="437" width="2.0" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="594.01" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (77 samples, 0.16%; -0.03%)</title><rect x="1100.9" y="357" width="1.9" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1103.92" y="367.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.03%; 0.00%)</title><rect x="95.5" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="98.45" y="447.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (16 samples, 0.03%; 0.00%)</title><rect x="684.0" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.03" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.01%)</title><rect x="270.3" y="341" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="273.28" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (296 samples, 0.60%; -0.01%)</title><rect x="1157.7" y="469" width="7.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1160.71" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="261.7" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="264.67" y="303.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (8 samples, 0.02%; -0.00%)</title><rect x="726.0" y="309" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="729.04" y="319.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (8 samples, 0.02%; -0.02%)</title><rect x="759.7" y="293" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="762.73" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (9 samples, 0.02%; +0.01%)</title><rect x="194.1" y="53" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="197.13" y="63.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (10 samples, 0.02%; -0.02%)</title><rect x="334.6" y="181" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="337.55" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (33 samples, 0.07%; +0.01%)</title><rect x="31.3" y="485" width="0.8" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="34.33" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (63 samples, 0.13%; -0.03%)</title><rect x="152.6" y="197" width="1.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="155.56" y="207.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (42 samples, 0.09%; -0.00%)</title><rect x="15.7" y="277" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="18.75" y="287.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (21 samples, 0.04%; 0.00%)</title><rect x="1142.1" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.10" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (733 samples, 1.49%; -0.02%)</title><rect x="553.2" y="341" width="17.6" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="556.21" y="351.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (164 samples, 0.33%; +0.03%)</title><rect x="464.2" y="261" width="4.0" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="467.25" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (8 samples, 0.02%; -0.01%)</title><rect x="265.7" y="325" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="268.66" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (28 samples, 0.06%; +0.00%)</title><rect x="329.6" y="181" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="332.60" y="191.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (11,452 samples, 23.34%; +0.08%)</title><rect x="866.4" y="469" width="275.3" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="869.36" y="479.5" >seastar::noncopyable_function&lt;seasta..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (19 samples, 0.04%; +0.01%)</title><rect x="895.5" y="261" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="898.53" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (15 samples, 0.03%; 0.00%)</title><rect x="20.5" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.46" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (6 samples, 0.01%; +0.00%)</title><rect x="233.8" y="213" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="236.83" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (84 samples, 0.17%; -0.01%)</title><rect x="571.6" y="373" width="2.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="574.60" y="383.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.01%; +0.00%)</title><rect x="15.4" y="229" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="18.36" y="239.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,562 samples, 9.30%; +0.01%)</title><rect x="144.2" y="277" width="109.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="147.17" y="287.5" >logalloc::all..</text>
</g>
<g >
<title>operator delete (37 samples, 0.08%; +0.01%)</title><rect x="29.7" y="485" width="0.9" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="32.69" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (15 samples, 0.03%; +0.01%)</title><rect x="768.7" y="357" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="771.67" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::future (9 samples, 0.02%; +0.02%)</title><rect x="979.9" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="982.92" y="367.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (408 samples, 0.83%; +0.01%)</title><rect x="537.9" y="421" width="9.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="540.87" y="431.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (23 samples, 0.05%; +0.01%)</title><rect x="1030.9" y="133" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1033.85" y="143.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (12 samples, 0.02%; -0.02%)</title><rect x="1143.6" y="485" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1146.62" y="495.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (14 samples, 0.03%; +0.02%)</title><rect x="517.3" y="341" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="520.31" y="351.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (195 samples, 0.40%; +0.03%)</title><rect x="1126.9" y="421" width="4.7" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="1129.88" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (5 samples, 0.01%; 0.00%)</title><rect x="807.4" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="810.43" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (5 samples, 0.01%; +0.00%)</title><rect x="505.2" y="245" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="508.22" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (35 samples, 0.07%; -0.05%)</title><rect x="198.5" y="69" width="0.9" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="201.53" y="79.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt; (6 samples, 0.01%; +0.01%)</title><rect x="905.0" y="341" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="908.03" y="351.5" ></text>
</g>
<g >
<title>database::find_column_family (65 samples, 0.13%; -0.01%)</title><rect x="755.4" y="373" width="1.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="758.45" y="383.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::make_temporary (88 samples, 0.18%; -0.01%)</title><rect x="902.6" y="341" width="2.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="905.60" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7 samples, 0.01%; 0.00%)</title><rect x="978.3" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="981.31" y="351.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (155 samples, 0.32%; 0.00%)</title><rect x="798.5" y="165" width="3.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="801.53" y="175.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (234 samples, 0.48%; +0.02%)</title><rect x="276.8" y="309" width="5.6" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="279.77" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (7 samples, 0.01%; 0.00%)</title><rect x="20.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.24" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (46 samples, 0.09%; -0.01%)</title><rect x="666.1" y="485" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="669.07" y="495.5" ></text>
</g>
<g >
<title>operator new (30 samples, 0.06%; -0.00%)</title><rect x="415.7" y="373" width="0.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="418.75" y="383.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (487 samples, 0.99%; +0.05%)</title><rect x="518.9" y="325" width="11.7" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="521.85" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="570.7" y="325" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="573.71" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (6 samples, 0.01%; +0.01%)</title><rect x="570.2" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="573.21" y="319.5" ></text>
</g>
<g >
<title>__tls_init (6 samples, 0.01%; +0.01%)</title><rect x="496.0" y="229" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="499.03" y="239.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (41 samples, 0.08%; +0.01%)</title><rect x="617.0" y="405" width="1.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="620.05" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (6 samples, 0.01%; -0.01%)</title><rect x="198.1" y="101" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="201.10" y="111.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (69 samples, 0.14%; +0.00%)</title><rect x="737.2" y="341" width="1.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="740.22" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (8 samples, 0.02%; +0.01%)</title><rect x="997.6" y="293" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1000.65" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (23 samples, 0.05%; -0.01%)</title><rect x="936.6" y="389" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="939.62" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (5 samples, 0.01%; -0.02%)</title><rect x="504.0" y="213" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="506.97" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (20 samples, 0.04%; +0.00%)</title><rect x="1156.0" y="421" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1159.00" y="431.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (11,833 samples, 24.11%; +0.01%)</title><rect x="859.9" y="501" width="284.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="862.90" y="511.5" >seastar::lambda_task&lt;seastar::executio..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="810.4" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="813.44" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;void&gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type&gt; (7 samples, 0.01%; +0.01%)</title><rect x="1042.9" y="261" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1045.94" y="271.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (8 samples, 0.02%; -0.00%)</title><rect x="772.4" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="775.42" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (8 samples, 0.02%; +0.00%)</title><rect x="1107.9" y="373" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1110.91" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (7 samples, 0.01%; -0.01%)</title><rect x="213.1" y="165" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="216.10" y="175.5" ></text>
</g>
<g >
<title>operator new (26 samples, 0.05%; 0.00%)</title><rect x="414.0" y="341" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="416.99" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (15 samples, 0.03%; +0.01%)</title><rect x="74.7" y="453" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="77.70" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (9 samples, 0.02%; -0.00%)</title><rect x="953.2" y="405" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="956.24" y="415.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (113 samples, 0.23%; -0.01%)</title><rect x="316.3" y="181" width="2.7" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="319.25" y="191.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (795 samples, 1.62%; +0.01%)</title><rect x="551.9" y="357" width="19.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="554.91" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (18 samples, 0.04%; +0.01%)</title><rect x="1105.6" y="373" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1108.63" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (6 samples, 0.01%; -0.00%)</title><rect x="270.1" y="341" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="273.14" y="351.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%; +0.00%)</title><rect x="160.6" y="229" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="163.59" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (12 samples, 0.02%; +0.01%)</title><rect x="1103.3" y="357" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1106.30" y="367.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (60 samples, 0.12%; +0.00%)</title><rect x="499.4" y="213" width="1.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="502.40" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (10 samples, 0.02%; +0.00%)</title><rect x="748.7" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="751.67" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%; +0.01%)</title><rect x="910.1" y="373" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="913.15" y="383.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (14 samples, 0.03%; +0.01%)</title><rect x="801.8" y="85" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="804.83" y="95.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (32 samples, 0.07%; +0.03%)</title><rect x="796.6" y="117" width="0.8" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="799.63" y="127.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (67 samples, 0.14%; 0.00%)</title><rect x="830.4" y="405" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="833.39" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (8 samples, 0.02%; +0.00%)</title><rect x="269.4" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="272.37" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; -0.00%)</title><rect x="939.0" y="389" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="942.05" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (5 samples, 0.01%; +0.01%)</title><rect x="248.2" y="181" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="251.21" y="191.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (10 samples, 0.02%; -0.01%)</title><rect x="22.6" y="517" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="25.65" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (49 samples, 0.10%; +0.00%)</title><rect x="1159.9" y="405" width="1.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1162.90" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (16 samples, 0.03%; +0.01%)</title><rect x="289.0" y="373" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="292.01" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (157 samples, 0.32%; +0.02%)</title><rect x="156.4" y="229" width="3.8" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="159.38" y="239.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (5 samples, 0.01%; +0.01%)</title><rect x="707.8" y="421" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="710.84" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (12 samples, 0.02%; +0.01%)</title><rect x="615.9" y="437" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="618.89" y="447.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; 0.00%)</title><rect x="575.6" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="578.62" y="367.5" ></text>
</g>
<g >
<title>operator new (72 samples, 0.15%; 0.00%)</title><rect x="1048.8" y="245" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1051.79" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (10 samples, 0.02%; -0.01%)</title><rect x="609.2" y="421" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="612.16" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.00%)</title><rect x="653.3" y="469" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="656.33" y="479.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (124 samples, 0.25%; +0.02%)</title><rect x="350.7" y="165" width="3.0" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="353.73" y="175.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (7 samples, 0.01%; +0.01%)</title><rect x="333.3" y="181" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="336.35" y="191.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.05%; -0.02%)</title><rect x="809.7" y="309" width="0.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="812.71" y="319.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (502 samples, 1.02%; -0.00%)</title><rect x="914.5" y="389" width="12.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="917.55" y="399.5" ></text>
</g>
<g >
<title>compound_type&lt; (60 samples, 0.12%; -0.01%)</title><rect x="539.1" y="357" width="1.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="542.10" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (37 samples, 0.08%; +0.02%)</title><rect x="100.1" y="373" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="103.09" y="383.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (5 samples, 0.01%; 0.00%)</title><rect x="289.7" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="292.68" y="415.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (89 samples, 0.18%; -0.06%)</title><rect x="344.9" y="165" width="2.1" height="15.0" fill="rgb(151,151,255)" rx="2" ry="2" />
<text  x="347.87" y="175.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (6 samples, 0.01%; +0.00%)</title><rect x="1064.7" y="261" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1067.66" y="271.5" ></text>
</g>
<g >
<title>executor&lt;test_read (5,918 samples, 12.06%; +0.01%)</title><rect x="714.4" y="485" width="142.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="717.35" y="495.5" >executor&lt;test_read</text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%; +0.01%)</title><rect x="526.7" y="277" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="529.71" y="287.5" ></text>
</g>
<g >
<title>__tls_init (5 samples, 0.01%; -0.00%)</title><rect x="493.3" y="261" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="496.34" y="271.5" ></text>
</g>
<g >
<title>free (110 samples, 0.22%; 0.00%)</title><rect x="397.8" y="181" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="400.79" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (82 samples, 0.17%; 0.00%)</title><rect x="963.1" y="357" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="966.07" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (11 samples, 0.02%; +0.02%)</title><rect x="229.8" y="197" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="232.84" y="207.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (12 samples, 0.02%; +0.00%)</title><rect x="159.5" y="213" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="162.46" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (8 samples, 0.02%; +0.01%)</title><rect x="258.7" y="261" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="261.69" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (14 samples, 0.03%; -0.01%)</title><rect x="445.8" y="277" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="448.80" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (10 samples, 0.02%; -0.01%)</title><rect x="23.7" y="517" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="26.73" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (36 samples, 0.07%; +0.01%)</title><rect x="1051.0" y="229" width="0.8" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1053.95" y="239.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (43 samples, 0.09%; +0.02%)</title><rect x="722.0" y="389" width="1.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="725.03" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (26 samples, 0.05%; +0.01%)</title><rect x="411.6" y="373" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="414.56" y="383.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (29 samples, 0.06%; +0.02%)</title><rect x="460.0" y="277" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="462.99" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (33 samples, 0.07%; -0.00%)</title><rect x="776.4" y="309" width="0.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="779.44" y="319.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (89 samples, 0.18%; +0.00%)</title><rect x="239.6" y="197" width="2.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="242.58" y="207.5" ></text>
</g>
<g >
<title>sstring_hash::operator (20 samples, 0.04%; +0.00%)</title><rect x="845.1" y="357" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="848.13" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (5 samples, 0.01%; -0.01%)</title><rect x="1143.9" y="485" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1146.93" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (70 samples, 0.14%; -0.00%)</title><rect x="940.5" y="405" width="1.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="943.54" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (68 samples, 0.14%; -0.00%)</title><rect x="379.9" y="149" width="1.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="382.95" y="159.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (5 samples, 0.01%; -0.01%)</title><rect x="679.5" y="453" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="682.49" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (195 samples, 0.40%; +0.00%)</title><rect x="1171.0" y="485" width="4.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1173.98" y="495.5" ></text>
</g>
<g >
<title>compound_type&lt; (6 samples, 0.01%; +0.00%)</title><rect x="540.1" y="341" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="543.11" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (20 samples, 0.04%; -0.01%)</title><rect x="679.3" y="469" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="682.35" y="479.5" ></text>
</g>
<g >
<title>operator delete (18 samples, 0.04%; -0.00%)</title><rect x="666.7" y="469" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="669.67" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (8 samples, 0.02%; 0.00%)</title><rect x="852.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="855.92" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (21 samples, 0.04%; 0.00%)</title><rect x="1143.1" y="245" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.07" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (5 samples, 0.01%; 0.00%)</title><rect x="622.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="625.05" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (6 samples, 0.01%; +0.00%)</title><rect x="145.0" y="261" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="147.98" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (35 samples, 0.07%; +0.01%)</title><rect x="124.9" y="277" width="0.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="127.88" y="287.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (19 samples, 0.04%; +0.02%)</title><rect x="825.7" y="277" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="828.68" y="287.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (12 samples, 0.02%; -0.00%)</title><rect x="59.4" y="453" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="62.39" y="463.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (5 samples, 0.01%; +0.00%)</title><rect x="391.4" y="245" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="394.37" y="255.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (118 samples, 0.24%; +0.01%)</title><rect x="527.0" y="277" width="2.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="530.00" y="287.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (8 samples, 0.02%; -0.02%)</title><rect x="1068.2" y="341" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1071.22" y="351.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (36 samples, 0.07%; 0.00%)</title><rect x="219.6" y="149" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="222.59" y="159.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (10 samples, 0.02%; -0.01%)</title><rect x="820.1" y="325" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="823.13" y="335.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (7 samples, 0.01%; +0.00%)</title><rect x="289.5" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="292.52" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (26 samples, 0.05%; -0.00%)</title><rect x="645.8" y="437" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="648.83" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (15 samples, 0.03%; +0.01%)</title><rect x="1078.2" y="325" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1081.22" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (32 samples, 0.07%; 0.00%)</title><rect x="725.0" y="325" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="727.96" y="335.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (7 samples, 0.01%; -0.01%)</title><rect x="16.6" y="245" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="19.59" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (49 samples, 0.10%; -0.02%)</title><rect x="299.1" y="261" width="1.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="302.13" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (8 samples, 0.02%; +0.01%)</title><rect x="1104.5" y="373" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1107.55" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (10 samples, 0.02%; +0.02%)</title><rect x="761.9" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="764.87" y="415.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (9 samples, 0.02%; +0.01%)</title><rect x="760.0" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="763.02" y="319.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (13 samples, 0.03%; +0.00%)</title><rect x="1143.1" y="181" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1146.07" y="191.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.02%; +0.01%)</title><rect x="504.8" y="213" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="507.81" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (11 samples, 0.02%; -0.03%)</title><rect x="757.5" y="357" width="0.3" height="15.0" fill="rgb(179,179,255)" rx="2" ry="2" />
<text  x="760.54" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (15 samples, 0.03%; +0.01%)</title><rect x="646.0" y="405" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="649.02" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (7 samples, 0.01%; +0.01%)</title><rect x="395.8" y="229" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="398.77" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (162 samples, 0.33%; +0.05%)</title><rect x="1062.1" y="309" width="3.9" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="1065.13" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (87 samples, 0.18%; +0.03%)</title><rect x="954.9" y="389" width="2.1" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="957.89" y="399.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (9 samples, 0.02%; 0.00%)</title><rect x="238.3" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="241.35" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (38 samples, 0.08%; +0.02%)</title><rect x="443.4" y="293" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="446.42" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (52 samples, 0.11%; -0.02%)</title><rect x="741.8" y="309" width="1.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="744.81" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (9 samples, 0.02%; +0.00%)</title><rect x="333.1" y="165" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="336.13" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (48 samples, 0.10%; +0.01%)</title><rect x="1115.5" y="373" width="1.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1118.49" y="383.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (6 samples, 0.01%; -0.01%)</title><rect x="601.1" y="421" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="604.08" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; +0.02%)</title><rect x="649.9" y="437" width="0.6" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="652.89" y="447.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (30 samples, 0.06%; -0.02%)</title><rect x="1135.6" y="405" width="0.7" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1138.61" y="415.5" ></text>
</g>
<g >
<title>query::result::builder::builder (148 samples, 0.30%; -0.00%)</title><rect x="595.0" y="421" width="3.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="598.02" y="431.5" ></text>
</g>
<g >
<title>operator new (127 samples, 0.26%; -0.01%)</title><rect x="1011.4" y="277" width="3.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1014.45" y="287.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1,217 samples, 2.48%; -0.04%)</title><rect x="1015.3" y="277" width="29.2" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="1018.27" y="287.5" >se..</text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (74 samples, 0.15%; -0.00%)</title><rect x="741.4" y="325" width="1.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="744.43" y="335.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (702 samples, 1.43%; +0.01%)</title><rect x="126.0" y="293" width="16.9" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="129.01" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (60 samples, 0.12%; +0.03%)</title><rect x="716.6" y="405" width="1.4" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="719.57" y="415.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; +0.00%)</title><rect x="786.8" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="789.82" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="390.9" y="229" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="393.89" y="239.5" ></text>
</g>
<g >
<title>create_partitions (274 samples, 0.56%; 0.00%)</title><rect x="14.7" y="533" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.74" y="543.5" ></text>
</g>
<g >
<title>auth::resource::resource (80 samples, 0.16%; -0.00%)</title><rect x="766.2" y="373" width="2.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="769.24" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (145 samples, 0.30%; -0.00%)</title><rect x="1048.4" y="277" width="3.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1051.35" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (11 samples, 0.02%; +0.01%)</title><rect x="604.3" y="437" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="607.30" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (22 samples, 0.04%; +0.00%)</title><rect x="827.4" y="421" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="830.36" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (25 samples, 0.05%; +0.05%)</title><rect x="149.5" y="245" width="0.6" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="152.53" y="255.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (10 samples, 0.02%; -0.02%)</title><rect x="504.1" y="213" width="0.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="507.14" y="223.5" ></text>
</g>
<g >
<title>operator new (23 samples, 0.05%; 0.00%)</title><rect x="512.7" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="515.70" y="287.5" ></text>
</g>
<g >
<title>operator new (86 samples, 0.18%; -0.00%)</title><rect x="1039.7" y="261" width="2.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1042.67" y="271.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.01%; 0.00%)</title><rect x="44.3" y="501" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.31" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (31 samples, 0.06%; -0.00%)</title><rect x="18.6" y="309" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="21.58" y="319.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (9 samples, 0.02%; 0.00%)</title><rect x="911.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="914.33" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,320 samples, 4.73%; +0.04%)</title><rect x="167.5" y="197" width="55.7" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="170.47" y="207.5" >parti..</text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (13 samples, 0.03%; +0.01%)</title><rect x="1121.8" y="373" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1124.79" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (6 samples, 0.01%; +0.00%)</title><rect x="212.2" y="101" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="215.16" y="111.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (30 samples, 0.06%; 0.00%)</title><rect x="20.2" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.19" y="447.5" ></text>
</g>
<g >
<title>schema::column_at (122 samples, 0.25%; +0.10%)</title><rect x="201.1" y="117" width="3.0" height="15.0" fill="rgb(255,99,99)" rx="2" ry="2" />
<text  x="204.13" y="127.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (7 samples, 0.01%; +0.01%)</title><rect x="728.1" y="325" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="731.06" y="335.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (41 samples, 0.08%; +0.01%)</title><rect x="572.6" y="357" width="1.0" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="575.64" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,914 samples, 10.01%; 0.00%)</title><rect x="293.4" y="373" width="118.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="296.41" y="383.5" >flat_mutation_..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (5 samples, 0.01%; -0.00%)</title><rect x="655.1" y="453" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="658.09" y="463.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (28 samples, 0.06%; +0.00%)</title><rect x="384.6" y="165" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="387.61" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.01%; +0.01%)</title><rect x="282.3" y="277" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="285.25" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (24 samples, 0.05%; +0.01%)</title><rect x="38.6" y="453" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="41.59" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (88 samples, 0.18%; +0.02%)</title><rect x="705.8" y="437" width="2.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="708.84" y="447.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (6 samples, 0.01%; +0.00%)</title><rect x="29.5" y="485" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="32.55" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (7 samples, 0.01%; +0.01%)</title><rect x="38.1" y="437" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="41.11" y="447.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.07%; +0.00%)</title><rect x="450.9" y="325" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="453.90" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (7 samples, 0.01%; -0.01%)</title><rect x="260.7" y="277" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="263.69" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (7 samples, 0.01%; +0.00%)</title><rect x="992.4" y="277" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="995.38" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (49 samples, 0.10%; -0.03%)</title><rect x="251.7" y="213" width="1.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="254.69" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (11 samples, 0.02%; +0.01%)</title><rect x="628.3" y="485" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="631.28" y="495.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (12 samples, 0.02%; +0.01%)</title><rect x="587.8" y="405" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="590.76" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (7 samples, 0.01%; -0.01%)</title><rect x="1055.2" y="357" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1058.23" y="367.5" ></text>
</g>
<g >
<title>schema::column_at (12 samples, 0.02%; +0.00%)</title><rect x="212.4" y="117" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="215.36" y="127.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (543 samples, 1.11%; -0.02%)</title><rect x="734.1" y="405" width="13.0" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="737.07" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (60 samples, 0.12%; -0.00%)</title><rect x="953.5" y="405" width="1.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="956.45" y="415.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (62 samples, 0.13%; -0.02%)</title><rect x="154.1" y="213" width="1.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="157.12" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (6 samples, 0.01%; -0.00%)</title><rect x="589.7" y="373" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="592.66" y="383.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (7 samples, 0.01%; -0.01%)</title><rect x="220.1" y="117" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="223.10" y="127.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (9 samples, 0.02%; -0.02%)</title><rect x="686.9" y="469" width="0.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="689.94" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (28 samples, 0.06%; -0.00%)</title><rect x="945.3" y="341" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="948.32" y="351.5" ></text>
</g>
<g >
<title>cql3::to_managed_bytes_opt (14 samples, 0.03%; -0.01%)</title><rect x="905.3" y="357" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="908.29" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (25 samples, 0.05%; -0.02%)</title><rect x="542.1" y="341" width="0.7" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="545.15" y="351.5" ></text>
</g>
<g >
<title>operator delete (56 samples, 0.11%; +0.00%)</title><rect x="283.2" y="293" width="1.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="286.24" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,837 samples, 9.86%; +0.05%)</title><rect x="294.7" y="325" width="116.3" height="15.0" fill="rgb(255,155,155)" rx="2" ry="2" />
<text  x="297.68" y="335.5" >seastar::inter..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (34 samples, 0.07%; -0.02%)</title><rect x="1105.3" y="389" width="0.8" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1108.29" y="399.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (5 samples, 0.01%; 0.00%)</title><rect x="17.7" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.74" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.01%; +0.00%)</title><rect x="764.8" y="341" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="767.78" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (9 samples, 0.02%; 0.00%)</title><rect x="640.0" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="643.03" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (95 samples, 0.19%; -0.03%)</title><rect x="830.0" y="437" width="2.3" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="833.01" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (14 samples, 0.03%; +0.02%)</title><rect x="1100.5" y="357" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="1103.51" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (11 samples, 0.02%; +0.01%)</title><rect x="137.5" y="213" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="140.48" y="223.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (6 samples, 0.01%; +0.00%)</title><rect x="480.6" y="213" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="483.62" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (17 samples, 0.03%; +0.01%)</title><rect x="203.7" y="101" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="206.65" y="111.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (9 samples, 0.02%; +0.00%)</title><rect x="1098.1" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1101.08" y="319.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (112 samples, 0.23%; +0.03%)</title><rect x="501.3" y="213" width="2.7" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="504.27" y="223.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (51 samples, 0.10%; +0.10%)</title><rect x="546.5" y="405" width="1.2" height="15.0" fill="rgb(255,108,108)" rx="2" ry="2" />
<text  x="549.45" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (14 samples, 0.03%; +0.01%)</title><rect x="833.2" y="437" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="836.21" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (17 samples, 0.03%; -0.02%)</title><rect x="908.2" y="309" width="0.4" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="911.22" y="319.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; -0.02%)</title><rect x="808.0" y="277" width="0.5" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="810.98" y="287.5" ></text>
</g>
<g >
<title>local_schema_registry (18 samples, 0.04%; +0.01%)</title><rect x="971.2" y="357" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="974.20" y="367.5" ></text>
</g>
<g >
<title>database::find_uuid (187 samples, 0.38%; -0.00%)</title><rect x="819.7" y="357" width="4.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="822.72" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (5 samples, 0.01%; +0.00%)</title><rect x="740.0" y="357" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="742.99" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (15 samples, 0.03%; 0.00%)</title><rect x="17.7" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.74" y="335.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (5 samples, 0.01%; -0.01%)</title><rect x="234.4" y="245" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="237.38" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (6 samples, 0.01%; +0.01%)</title><rect x="747.3" y="389" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="750.32" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;reader_permit::impl, boost::intrusive::list_node_traits&lt;void*&gt;,  (5 samples, 0.01%; +0.01%)</title><rect x="1038.2" y="181" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1041.18" y="191.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (29 samples, 0.06%; +0.02%)</title><rect x="673.6" y="469" width="0.7" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="676.58" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (202 samples, 0.41%; +0.04%)</title><rect x="224.9" y="197" width="4.8" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="227.86" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (6 samples, 0.01%; -0.00%)</title><rect x="250.1" y="245" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="253.08" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (36 samples, 0.07%; +0.03%)</title><rect x="566.1" y="261" width="0.8" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="569.07" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (249 samples, 0.51%; -0.03%)</title><rect x="574.3" y="373" width="6.0" height="15.0" fill="rgb(179,179,255)" rx="2" ry="2" />
<text  x="577.34" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (6 samples, 0.01%; +0.00%)</title><rect x="389.6" y="229" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="392.61" y="239.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (26 samples, 0.05%; 0.00%)</title><rect x="1096.8" y="277" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1099.78" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.01%)</title><rect x="1174.3" y="421" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1177.35" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (5 samples, 0.01%; +0.01%)</title><rect x="1104.7" y="373" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1107.74" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (7 samples, 0.01%; +0.00%)</title><rect x="824.5" y="325" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="827.48" y="335.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (5 samples, 0.01%; -0.01%)</title><rect x="60.1" y="437" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="63.08" y="447.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (12 samples, 0.02%; -0.01%)</title><rect x="1003.9" y="293" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1006.94" y="303.5" ></text>
</g>
<g >
<title>reader_permit::consume (14 samples, 0.03%; +0.01%)</title><rect x="214.9" y="149" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="217.91" y="159.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (7 samples, 0.01%; -0.01%)</title><rect x="887.1" y="309" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="890.07" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (10 samples, 0.02%; +0.01%)</title><rect x="253.0" y="213" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="255.99" y="223.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (35 samples, 0.07%; +0.03%)</title><rect x="837.7" y="341" width="0.8" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="840.65" y="351.5" ></text>
</g>
<g >
<title>operator delete (20 samples, 0.04%; +0.01%)</title><rect x="667.3" y="469" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="670.25" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="569.6" y="309" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="572.58" y="319.5" ></text>
</g>
<g >
<title>operator delete (40 samples, 0.08%; +0.00%)</title><rect x="804.9" y="245" width="1.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="807.91" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (7 samples, 0.01%; -0.00%)</title><rect x="323.2" y="197" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="326.23" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (13 samples, 0.03%; +0.01%)</title><rect x="53.3" y="469" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="56.30" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (17 samples, 0.03%; -0.02%)</title><rect x="1122.2" y="389" width="0.5" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="1125.24" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (57 samples, 0.12%; -0.02%)</title><rect x="759.0" y="341" width="1.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="761.96" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (63 samples, 0.13%; +0.03%)</title><rect x="1013.0" y="245" width="1.5" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="1015.99" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (124 samples, 0.25%; +0.00%)</title><rect x="250.5" y="245" width="3.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="253.52" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (32 samples, 0.07%; +0.03%)</title><rect x="499.7" y="181" width="0.8" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="502.74" y="191.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (116 samples, 0.24%; -0.00%)</title><rect x="1028.6" y="165" width="2.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1031.61" y="175.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (8 samples, 0.02%; +0.00%)</title><rect x="220.5" y="149" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="223.51" y="159.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (37 samples, 0.08%; -0.00%)</title><rect x="653.6" y="485" width="0.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="656.62" y="495.5" ></text>
</g>
<g >
<title>database::find_uuid (195 samples, 0.40%; -0.01%)</title><rect x="757.0" y="389" width="4.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="760.01" y="399.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (270 samples, 0.55%; +0.03%)</title><rect x="254.9" y="293" width="6.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="257.94" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (16 samples, 0.03%; +0.02%)</title><rect x="132.0" y="229" width="0.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="135.05" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (18 samples, 0.04%; +0.02%)</title><rect x="67.8" y="389" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="70.78" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (19 samples, 0.04%; -0.01%)</title><rect x="60.7" y="421" width="0.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="63.73" y="431.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (211 samples, 0.43%; 0.00%)</title><rect x="15.1" y="453" width="5.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.12" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (15 samples, 0.03%; -0.01%)</title><rect x="75.2" y="453" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="78.21" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (7 samples, 0.01%; -0.02%)</title><rect x="263.1" y="309" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="266.14" y="319.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (510 samples, 1.04%; -0.01%)</title><rect x="468.7" y="309" width="12.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="471.69" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (7 samples, 0.01%; 0.00%)</title><rect x="1028.9" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1031.90" y="159.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (76 samples, 0.15%; +0.01%)</title><rect x="295.5" y="309" width="1.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="298.45" y="319.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (5 samples, 0.01%; +0.01%)</title><rect x="695.1" y="469" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="698.10" y="479.5" ></text>
</g>
<g >
<title>operator new (18 samples, 0.04%; 0.00%)</title><rect x="650.9" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="653.85" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (5 samples, 0.01%; 0.00%)</title><rect x="1142.9" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.87" y="223.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (6 samples, 0.01%; +0.00%)</title><rect x="704.3" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="707.26" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (14 samples, 0.03%; +0.01%)</title><rect x="697.7" y="469" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="700.67" y="479.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (18 samples, 0.04%; -0.01%)</title><rect x="801.7" y="101" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="804.73" y="111.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (6 samples, 0.01%; 0.00%)</title><rect x="860.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.33" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (516 samples, 1.05%; 0.00%)</title><rect x="888.2" y="309" width="12.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="891.24" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.01%; -0.02%)</title><rect x="694.6" y="469" width="0.2" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="697.64" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (14 samples, 0.03%; -0.00%)</title><rect x="1052.9" y="293" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1055.88" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (8 samples, 0.02%; +0.01%)</title><rect x="667.8" y="469" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="670.78" y="479.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (6 samples, 0.01%; 0.00%)</title><rect x="704.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="707.62" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_range_check (6 samples, 0.01%; +0.01%)</title><rect x="892.9" y="261" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="895.93" y="271.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (11 samples, 0.02%; -0.02%)</title><rect x="245.6" y="197" width="0.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="248.63" y="207.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (21 samples, 0.04%; 0.00%)</title><rect x="1143.1" y="229" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.07" y="239.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (11 samples, 0.02%; +0.02%)</title><rect x="585.4" y="421" width="0.2" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="588.38" y="431.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (5 samples, 0.01%; -0.01%)</title><rect x="220.3" y="117" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="223.27" y="127.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (40 samples, 0.08%; +0.02%)</title><rect x="690.6" y="437" width="0.9" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="693.58" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (90 samples, 0.18%; +0.01%)</title><rect x="796.2" y="133" width="2.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="799.18" y="143.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (97 samples, 0.20%; +0.01%)</title><rect x="243.2" y="197" width="2.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="246.21" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (8 samples, 0.02%; +0.01%)</title><rect x="154.5" y="197" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="157.48" y="207.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (25 samples, 0.05%; 0.00%)</title><rect x="1142.1" y="325" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.10" y="335.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (26 samples, 0.05%; -0.01%)</title><rect x="292.8" y="373" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="295.79" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (13 samples, 0.03%; +0.00%)</title><rect x="692.5" y="453" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="695.47" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (54 samples, 0.11%; 0.00%)</title><rect x="1151.7" y="485" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1154.75" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (23 samples, 0.05%; -0.01%)</title><rect x="680.6" y="437" width="0.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="683.62" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (11 samples, 0.02%; -0.02%)</title><rect x="1095.9" y="293" width="0.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="1098.89" y="303.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (42 samples, 0.09%; +0.01%)</title><rect x="816.6" y="373" width="1.0" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="819.57" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%; +0.00%)</title><rect x="533.7" y="341" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="536.66" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (31 samples, 0.06%; +0.03%)</title><rect x="138.3" y="229" width="0.8" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="141.32" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (9 samples, 0.02%; 0.00%)</title><rect x="859.5" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.46" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (21 samples, 0.04%; +0.04%)</title><rect x="561.5" y="293" width="0.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="564.53" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (69 samples, 0.14%; -0.00%)</title><rect x="366.4" y="197" width="1.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="369.39" y="207.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (20 samples, 0.04%; +0.02%)</title><rect x="1059.2" y="341" width="0.5" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1062.17" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (122 samples, 0.25%; -0.04%)</title><rect x="191.2" y="37" width="2.9" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="194.20" y="47.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (41 samples, 0.08%; +0.01%)</title><rect x="506.0" y="229" width="1.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="508.99" y="239.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (8 samples, 0.02%; +0.01%)</title><rect x="844.8" y="325" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="847.82" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::stats (40 samples, 0.08%; +0.01%)</title><rect x="483.8" y="309" width="1.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="486.82" y="319.5" ></text>
</g>
<g >
<title>std::type_info::operator== (5 samples, 0.01%; +0.00%)</title><rect x="700.9" y="437" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="703.87" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (5 samples, 0.01%; +0.00%)</title><rect x="899.3" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="902.33" y="287.5" ></text>
</g>
<g >
<title>operator delete (13 samples, 0.03%; 0.00%)</title><rect x="44.6" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.55" y="511.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (12 samples, 0.02%; -0.00%)</title><rect x="832.8" y="437" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="835.82" y="447.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (15 samples, 0.03%; 0.00%)</title><rect x="17.7" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.74" y="319.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (8 samples, 0.02%; +0.00%)</title><rect x="645.0" y="437" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="648.01" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (32 samples, 0.07%; -0.01%)</title><rect x="230.9" y="213" width="0.8" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="233.94" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (16 samples, 0.03%; -0.00%)</title><rect x="682.6" y="485" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="685.62" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (53 samples, 0.11%; -0.02%)</title><rect x="1106.8" y="405" width="1.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="1109.83" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (6 samples, 0.01%; -0.01%)</title><rect x="1117.4" y="373" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1120.41" y="383.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (27 samples, 0.06%; -0.02%)</title><rect x="331.2" y="165" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="334.21" y="175.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (8 samples, 0.02%; -0.01%)</title><rect x="322.4" y="213" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="325.38" y="223.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (9 samples, 0.02%; +0.01%)</title><rect x="729.4" y="437" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="732.41" y="447.5" ></text>
</g>
<g >
<title>operator delete (34 samples, 0.07%; +0.02%)</title><rect x="671.8" y="485" width="0.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="674.80" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.01%)</title><rect x="618.5" y="437" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="621.49" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (21 samples, 0.04%; 0.00%)</title><rect x="1143.1" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.07" y="319.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (16 samples, 0.03%; -0.00%)</title><rect x="502.9" y="181" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="505.91" y="191.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (2,670 samples, 5.44%; -0.01%)</title><rect x="762.1" y="405" width="64.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="765.13" y="415.5" >service..</text>
</g>
<g >
<title>row::external_memory_usage (5 samples, 0.01%; +0.00%)</title><rect x="215.2" y="165" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="218.24" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (8 samples, 0.02%; +0.01%)</title><rect x="1035.3" y="229" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1038.27" y="239.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (11 samples, 0.02%; +0.01%)</title><rect x="840.2" y="421" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="843.23" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (7 samples, 0.01%; -0.04%)</title><rect x="61.3" y="405" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="64.33" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (6 samples, 0.01%; +0.01%)</title><rect x="948.2" y="373" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="951.19" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (20 samples, 0.04%; +0.01%)</title><rect x="708.0" y="453" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="711.01" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (444 samples, 0.90%; -0.01%)</title><rect x="274.0" y="325" width="10.7" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="277.01" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (38 samples, 0.08%; +0.00%)</title><rect x="259.2" y="277" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="262.17" y="287.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (22 samples, 0.04%; -0.00%)</title><rect x="589.3" y="389" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="592.28" y="399.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (6 samples, 0.01%; -0.00%)</title><rect x="44.0" y="485" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="47.02" y="495.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (10 samples, 0.02%; -0.00%)</title><rect x="1089.6" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1092.57" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.00%)</title><rect x="667.0" y="453" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="669.96" y="463.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (105 samples, 0.21%; -0.01%)</title><rect x="795.9" y="149" width="2.5" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="798.91" y="159.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (9 samples, 0.02%; +0.00%)</title><rect x="245.3" y="165" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="248.32" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (7 samples, 0.01%; -0.00%)</title><rect x="1068.5" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1071.46" y="351.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.03%; +0.02%)</title><rect x="160.2" y="229" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="163.18" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (18 samples, 0.04%; +0.01%)</title><rect x="320.6" y="181" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="323.63" y="191.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::got_cl (7 samples, 0.01%; -0.00%)</title><rect x="693.0" y="469" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="695.98" y="479.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.04%; +0.00%)</title><rect x="764.0" y="373" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="766.98" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (17 samples, 0.03%; +0.01%)</title><rect x="1076.5" y="293" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1079.49" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.01%)</title><rect x="632.1" y="453" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="635.10" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (13 samples, 0.03%; -0.02%)</title><rect x="819.4" y="293" width="0.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="822.36" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.02%)</title><rect x="901.9" y="293" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="904.95" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (57 samples, 0.12%; +0.03%)</title><rect x="1167.5" y="485" width="1.4" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="1170.49" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (14 samples, 0.03%; -0.01%)</title><rect x="303.0" y="261" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="305.98" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (7 samples, 0.01%; -0.01%)</title><rect x="628.5" y="485" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="631.54" y="495.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (14 samples, 0.03%; +0.00%)</title><rect x="744.6" y="261" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="747.58" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (5 samples, 0.01%; +0.00%)</title><rect x="825.5" y="309" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="828.46" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (16 samples, 0.03%; +0.01%)</title><rect x="16.2" y="261" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="19.16" y="271.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (204 samples, 0.42%; 0.00%)</title><rect x="1111.9" y="389" width="4.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1114.93" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (11 samples, 0.02%; +0.01%)</title><rect x="905.6" y="357" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="908.63" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.05%; +0.01%)</title><rect x="605.8" y="405" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="608.82" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume (13 samples, 0.03%; +0.01%)</title><rect x="500.5" y="197" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="503.50" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (18 samples, 0.04%; +0.03%)</title><rect x="114.2" y="373" width="0.4" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="117.18" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;std::vector&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::allocator&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, false, false&gt;::_Optional_base (5 samples, 0.01%; +0.01%)</title><rect x="850.7" y="421" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="853.69" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (95 samples, 0.19%; +0.04%)</title><rect x="676.9" y="453" width="2.3" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="679.94" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (5 samples, 0.01%; +0.01%)</title><rect x="811.9" y="357" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="814.88" y="367.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (11,687 samples, 23.81%; +0.03%)</title><rect x="861.1" y="485" width="281.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="864.10" y="495.5" >seastar::concrete_execution_stage&lt;sea..</text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (8 samples, 0.02%; +0.00%)</title><rect x="229.5" y="181" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="232.52" y="191.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (6 samples, 0.01%; 0.00%)</title><rect x="17.9" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.89" y="303.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (6 samples, 0.01%; +0.00%)</title><rect x="15.0" y="485" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="17.95" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (6 samples, 0.01%; +0.00%)</title><rect x="227.5" y="165" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="230.46" y="175.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (38 samples, 0.08%; 0.00%)</title><rect x="860.2" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.18" y="431.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (21 samples, 0.04%; +0.03%)</title><rect x="1179.0" y="629" width="0.5" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="1182.01" y="639.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (22 samples, 0.04%; +0.01%)</title><rect x="63.0" y="437" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="66.04" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type&gt; (5 samples, 0.01%; +0.00%)</title><rect x="980.8" y="357" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="983.84" y="367.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (162 samples, 0.33%; +0.01%)</title><rect x="922.5" y="341" width="3.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="925.53" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (12 samples, 0.02%; +0.01%)</title><rect x="443.1" y="293" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="446.13" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (25 samples, 0.05%; -0.01%)</title><rect x="137.1" y="229" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="140.15" y="239.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (1,539 samples, 3.14%; +0.02%)</title><rect x="774.4" y="341" width="37.0" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="777.42" y="351.5" >ser..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::take (7 samples, 0.01%; +0.00%)</title><rect x="700.3" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="703.26" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; -0.00%)</title><rect x="569.4" y="309" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="572.42" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (6,015 samples, 12.26%; +0.01%)</title><rect x="713.0" y="501" width="144.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="715.96" y="511.5" >seastar::internal:..</text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (15 samples, 0.03%; -0.03%)</title><rect x="244.7" y="181" width="0.4" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="247.72" y="191.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%; 0.00%)</title><rect x="545.7" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="548.71" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (14 samples, 0.03%; +0.02%)</title><rect x="215.6" y="181" width="0.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="218.63" y="191.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (11 samples, 0.02%; +0.01%)</title><rect x="544.7" y="389" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="547.72" y="399.5" ></text>
</g>
<g >
<title>make_combined_reader (798 samples, 1.63%; +0.01%)</title><rect x="431.3" y="325" width="19.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="434.28" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.00%)</title><rect x="1051.7" y="181" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1054.67" y="191.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (211 samples, 0.43%; 0.00%)</title><rect x="15.1" y="437" width="5.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.12" y="447.5" ></text>
</g>
<g >
<title>db::block_for (6 samples, 0.01%; +0.00%)</title><rect x="1067.6" y="325" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1070.57" y="335.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (10 samples, 0.02%; -0.02%)</title><rect x="231.9" y="213" width="0.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="234.93" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (5 samples, 0.01%; -0.01%)</title><rect x="441.5" y="261" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="444.55" y="271.5" ></text>
</g>
<g >
<title>seastar::gate::leave (8 samples, 0.02%; +0.01%)</title><rect x="603.7" y="437" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="606.70" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (64 samples, 0.13%; +0.01%)</title><rect x="280.1" y="261" width="1.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="283.09" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (12 samples, 0.02%; -0.01%)</title><rect x="708.7" y="485" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="711.73" y="495.5" ></text>
</g>
<g >
<title>do_cql_test (275 samples, 0.56%; 0.00%)</title><rect x="14.7" y="549" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.74" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (12 samples, 0.02%; -0.00%)</title><rect x="638.8" y="485" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="641.83" y="495.5" ></text>
</g>
<g >
<title>[unknown] (489 samples, 1.00%; 0.00%)</title><rect x="10.0" y="629" width="11.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.02" y="639.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (7 samples, 0.01%; +0.01%)</title><rect x="932.1" y="341" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="935.12" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.01%; +0.01%)</title><rect x="297.4" y="309" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="300.35" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (21 samples, 0.04%; +0.02%)</title><rect x="779.0" y="277" width="0.5" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="781.96" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (69 samples, 0.14%; +0.04%)</title><rect x="848.8" y="341" width="1.7" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="851.81" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.02%; +0.01%)</title><rect x="787.8" y="229" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="790.81" y="239.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (10 samples, 0.02%; +0.01%)</title><rect x="123.3" y="309" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="126.35" y="319.5" ></text>
</g>
<g >
<title>operator delete (15 samples, 0.03%; 0.00%)</title><rect x="559.8" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="562.77" y="287.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (113 samples, 0.23%; -0.01%)</title><rect x="381.6" y="149" width="2.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="384.58" y="159.5" ></text>
</g>
<g >
<title>seastar::reactor::smp_pollfn::poll (7 samples, 0.01%; +0.00%)</title><rect x="1177.8" y="501" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1180.83" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::run (48,126 samples, 98.06%; 0.00%)</title><rect x="21.8" y="549" width="1157.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.78" y="559.5" >seastar::reactor::run</text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (6 samples, 0.01%; -0.00%)</title><rect x="965.3" y="373" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="968.33" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (14 samples, 0.03%; +0.01%)</title><rect x="993.2" y="245" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="996.25" y="255.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (10 samples, 0.02%; -0.01%)</title><rect x="515.8" y="325" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="518.80" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (424 samples, 0.86%; +0.02%)</title><rect x="1068.6" y="341" width="10.2" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="1071.62" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (5 samples, 0.01%; +0.01%)</title><rect x="655.4" y="469" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="658.45" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (16 samples, 0.03%; +0.00%)</title><rect x="705.3" y="453" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="708.34" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (12 samples, 0.02%; -0.01%)</title><rect x="699.9" y="453" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="702.86" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (47 samples, 0.10%; +0.09%)</title><rect x="77.0" y="453" width="1.1" height="15.0" fill="rgb(255,116,116)" rx="2" ry="2" />
<text  x="79.99" y="463.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (42 samples, 0.09%; +0.01%)</title><rect x="321.1" y="181" width="1.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="324.06" y="191.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (111 samples, 0.23%; +0.00%)</title><rect x="843.0" y="389" width="2.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="845.99" y="399.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (498 samples, 1.01%; -0.01%)</title><rect x="62.6" y="453" width="12.0" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="65.58" y="463.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (7,272 samples, 14.82%; -0.05%)</title><rect x="113.3" y="389" width="174.8" height="15.0" fill="rgb(155,155,255)" rx="2" ry="2" />
<text  x="116.27" y="399.5" >merging_reader&lt;mutatio..</text>
</g>
<g >
<title>seastar::app_template::run (48,127 samples, 98.07%; 0.00%)</title><rect x="21.8" y="597" width="1157.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.78" y="607.5" >seastar::app_template::run</text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (6 samples, 0.01%; -0.00%)</title><rect x="38.3" y="453" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="41.35" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (19 samples, 0.04%; -0.01%)</title><rect x="635.2" y="485" width="0.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="638.18" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (117 samples, 0.24%; -0.00%)</title><rect x="408.2" y="309" width="2.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="411.17" y="319.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (158 samples, 0.32%; -0.00%)</title><rect x="990.9" y="309" width="3.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="993.94" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (8 samples, 0.02%; 0.00%)</title><rect x="817.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="820.65" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (25 samples, 0.05%; +0.01%)</title><rect x="210.0" y="101" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="213.02" y="111.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.01%; +0.00%)</title><rect x="918.7" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="921.73" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (7 samples, 0.01%; +0.01%)</title><rect x="844.3" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="847.29" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="806.8" y="245" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="809.83" y="255.5" ></text>
</g>
<g >
<title>row_tombstone::apply (21 samples, 0.04%; -0.01%)</title><rect x="388.1" y="213" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="391.15" y="223.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (6 samples, 0.01%; +0.01%)</title><rect x="22.0" y="517" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="25.00" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (8 samples, 0.02%; +0.00%)</title><rect x="238.6" y="213" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="241.61" y="223.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (480 samples, 0.98%; +0.00%)</title><rect x="684.8" y="501" width="11.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="687.78" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (24 samples, 0.05%; -0.00%)</title><rect x="319.8" y="181" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="322.76" y="191.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (57 samples, 0.12%; -0.01%)</title><rect x="584.0" y="421" width="1.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="587.01" y="431.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (6 samples, 0.01%; +0.01%)</title><rect x="683.2" y="485" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="686.24" y="495.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (19 samples, 0.04%; -0.01%)</title><rect x="245.1" y="181" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="248.08" y="191.5" ></text>
</g>
<g >
<title>operator delete (49 samples, 0.10%; +0.02%)</title><rect x="685.1" y="485" width="1.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="688.12" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (67 samples, 0.14%; 0.00%)</title><rect x="15.3" y="373" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.31" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (13 samples, 0.03%; +0.00%)</title><rect x="1000.2" y="261" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1003.22" y="271.5" ></text>
</g>
<g >
<title>operator new (73 samples, 0.15%; -0.00%)</title><rect x="543.0" y="341" width="1.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="545.97" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (24 samples, 0.05%; -0.01%)</title><rect x="548.4" y="421" width="0.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="551.40" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.01%; +0.01%)</title><rect x="845.7" y="389" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="848.66" y="399.5" ></text>
</g>
<g >
<title>table::estimate_read_memory_cost (5 samples, 0.01%; -0.00%)</title><rect x="1044.1" y="261" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1047.15" y="271.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (145 samples, 0.30%; -0.01%)</title><rect x="347.0" y="165" width="3.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="350.01" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (11 samples, 0.02%; +0.01%)</title><rect x="449.2" y="277" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="452.19" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (27 samples, 0.06%; +0.01%)</title><rect x="1152.4" y="453" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1155.39" y="463.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (7 samples, 0.01%; +0.00%)</title><rect x="1044.4" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1047.36" y="271.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (5 samples, 0.01%; -0.01%)</title><rect x="918.4" y="325" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="921.42" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (32 samples, 0.07%; +0.01%)</title><rect x="1103.8" y="373" width="0.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1106.78" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (17 samples, 0.03%; -0.01%)</title><rect x="902.2" y="309" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="905.19" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (174 samples, 0.35%; +0.01%)</title><rect x="946.0" y="421" width="4.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="949.00" y="431.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (51 samples, 0.10%; -0.02%)</title><rect x="597.0" y="405" width="1.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="599.99" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (61 samples, 0.12%; -0.00%)</title><rect x="616.7" y="421" width="1.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="619.73" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (18 samples, 0.04%; -0.01%)</title><rect x="549.7" y="421" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="552.75" y="431.5" ></text>
</g>
<g >
<title>operator new (68 samples, 0.14%; 0.00%)</title><rect x="280.0" y="277" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="282.99" y="287.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (6 samples, 0.01%; 0.00%)</title><rect x="953.5" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="956.55" y="383.5" ></text>
</g>
<g >
<title>dht::tri_compare (50 samples, 0.10%; +0.05%)</title><rect x="1082.2" y="245" width="1.2" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="1085.23" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (31 samples, 0.06%; +0.01%)</title><rect x="660.4" y="437" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="663.35" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (20 samples, 0.04%; +0.00%)</title><rect x="1050.0" y="213" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1053.04" y="223.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (5 samples, 0.01%; 0.00%)</title><rect x="933.5" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="936.52" y="335.5" ></text>
</g>
<g >
<title>operator delete (35 samples, 0.07%; 0.00%)</title><rect x="661.5" y="485" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="664.51" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (88 samples, 0.18%; -0.00%)</title><rect x="1159.0" y="453" width="2.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1161.98" y="463.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (44 samples, 0.09%; -0.01%)</title><rect x="760.4" y="341" width="1.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="763.42" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (17 samples, 0.03%; +0.00%)</title><rect x="935.4" y="373" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="938.39" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (20 samples, 0.04%; +0.02%)</title><rect x="493.7" y="261" width="0.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="496.72" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (36 samples, 0.07%; +0.01%)</title><rect x="948.3" y="373" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="951.33" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (22 samples, 0.04%; -0.00%)</title><rect x="172.7" y="133" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="175.73" y="143.5" ></text>
</g>
<g >
<title>operator delete (41 samples, 0.08%; -0.00%)</title><rect x="513.3" y="325" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="516.34" y="335.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (94 samples, 0.19%; -0.00%)</title><rect x="784.6" y="261" width="2.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="787.56" y="271.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (11 samples, 0.02%; -0.01%)</title><rect x="596.1" y="389" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="599.08" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (10 samples, 0.02%; +0.00%)</title><rect x="164.9" y="213" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="167.89" y="223.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (8 samples, 0.02%; +0.00%)</title><rect x="1098.1" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1101.10" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (124 samples, 0.25%; +0.01%)</title><rect x="1011.5" y="261" width="3.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1014.52" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (19 samples, 0.04%; -0.01%)</title><rect x="171.2" y="149" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="174.19" y="159.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (31 samples, 0.06%; +0.00%)</title><rect x="571.9" y="357" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="574.87" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (6 samples, 0.01%; +0.00%)</title><rect x="230.2" y="197" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="233.17" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (19 samples, 0.04%; -0.00%)</title><rect x="285.0" y="325" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="288.04" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (35 samples, 0.07%; +0.00%)</title><rect x="647.4" y="453" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="650.39" y="463.5" ></text>
</g>
<g >
<title>row::row (21 samples, 0.04%; +0.01%)</title><rect x="252.3" y="197" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="255.34" y="207.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (25 samples, 0.05%; -0.02%)</title><rect x="739.2" y="357" width="0.6" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="742.24" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (25 samples, 0.05%; -0.02%)</title><rect x="647.6" y="437" width="0.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="650.61" y="447.5" ></text>
</g>
<g >
<title>compound_type&lt; (159 samples, 0.32%; -0.00%)</title><rect x="930.0" y="373" width="3.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="932.98" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (225 samples, 0.46%; -0.02%)</title><rect x="1089.9" y="277" width="5.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1092.90" y="287.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (76 samples, 0.15%; -0.01%)</title><rect x="750.4" y="389" width="1.8" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="753.40" y="399.5" ></text>
</g>
<g >
<title>sstring_hash::operator (45 samples, 0.09%; +0.00%)</title><rect x="837.5" y="373" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="840.51" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (29 samples, 0.06%; +0.04%)</title><rect x="238.9" y="197" width="0.7" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="241.88" y="207.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (11 samples, 0.02%; +0.00%)</title><rect x="825.2" y="293" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="828.18" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (8 samples, 0.02%; 0.00%)</title><rect x="435.3" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="438.34" y="255.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (101 samples, 0.21%; -0.02%)</title><rect x="662.6" y="485" width="2.4" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="665.56" y="495.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.04%; -0.00%)</title><rect x="620.7" y="389" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="623.68" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (108 samples, 0.22%; 0.00%)</title><rect x="984.9" y="309" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="987.95" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (411 samples, 0.84%; +0.03%)</title><rect x="432.0" y="309" width="9.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="435.03" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.01%)</title><rect x="160.8" y="229" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="163.83" y="239.5" ></text>
</g>
<g >
<title>operator new (71 samples, 0.14%; 0.00%)</title><rect x="885.4" y="309" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="888.36" y="319.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (8 samples, 0.02%; -0.00%)</title><rect x="1080.6" y="309" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1083.55" y="319.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%; -0.00%)</title><rect x="74.6" y="453" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="77.56" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (12 samples, 0.02%; 0.00%)</title><rect x="1176.6" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.61" y="463.5" ></text>
</g>
<g >
<title>operator new (49 samples, 0.10%; -0.01%)</title><rect x="752.2" y="405" width="1.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="755.22" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (33 samples, 0.07%; -0.01%)</title><rect x="583.2" y="421" width="0.8" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="586.22" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (142 samples, 0.29%; +0.00%)</title><rect x="676.4" y="485" width="3.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="679.41" y="495.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (5 samples, 0.01%; 0.00%)</title><rect x="18.8" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.82" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (13 samples, 0.03%; 0.00%)</title><rect x="684.0" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.03" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (19 samples, 0.04%; -0.01%)</title><rect x="407.4" y="261" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="410.40" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (8 samples, 0.02%; +0.01%)</title><rect x="490.7" y="293" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="493.72" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (17 samples, 0.03%; +0.02%)</title><rect x="568.7" y="293" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="571.67" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (6 samples, 0.01%; +0.00%)</title><rect x="682.0" y="485" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="684.97" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (14 samples, 0.03%; +0.01%)</title><rect x="633.1" y="453" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="636.09" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (137 samples, 0.28%; +0.02%)</title><rect x="633.5" y="501" width="3.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="636.52" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (6 samples, 0.01%; -0.00%)</title><rect x="102.6" y="421" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="105.62" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (39 samples, 0.08%; +0.02%)</title><rect x="989.8" y="293" width="0.9" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="992.78" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (84 samples, 0.17%; -0.01%)</title><rect x="436.5" y="261" width="2.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="439.50" y="271.5" ></text>
</g>
<g >
<title>compound_type&lt; (172 samples, 0.35%; +0.01%)</title><rect x="476.1" y="213" width="4.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="479.12" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; +0.01%)</title><rect x="416.9" y="373" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="419.93" y="383.5" ></text>
</g>
<g >
<title>operator new (22 samples, 0.04%; -0.00%)</title><rect x="514.3" y="325" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="517.33" y="335.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (7 samples, 0.01%; -0.00%)</title><rect x="1159.7" y="405" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1162.73" y="415.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (9 samples, 0.02%; -0.00%)</title><rect x="1143.1" y="165" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1146.14" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (18 samples, 0.04%; +0.01%)</title><rect x="620.7" y="373" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="623.70" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (14 samples, 0.03%; +0.01%)</title><rect x="840.5" y="421" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="843.49" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (23 samples, 0.05%; +0.02%)</title><rect x="728.7" y="389" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="731.69" y="399.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (9 samples, 0.02%; -0.01%)</title><rect x="1100.0" y="341" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1102.95" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (5 samples, 0.01%; -0.02%)</title><rect x="263.4" y="325" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="266.43" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; +0.00%)</title><rect x="909.2" y="293" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="912.21" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (15 samples, 0.03%; +0.01%)</title><rect x="304.4" y="245" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="307.40" y="255.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (5 samples, 0.01%; 0.00%)</title><rect x="22.5" y="517" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.53" y="527.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (25 samples, 0.05%; +0.01%)</title><rect x="219.8" y="133" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="222.79" y="143.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,899 samples, 9.98%; +0.01%)</title><rect x="293.7" y="357" width="117.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="296.65" y="367.5" >flat_mutation_..</text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (33 samples, 0.07%; +0.00%)</title><rect x="1142.8" y="325" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1145.78" y="335.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (14 samples, 0.03%; -0.01%)</title><rect x="918.9" y="373" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="921.88" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (5 samples, 0.01%; +0.01%)</title><rect x="235.8" y="261" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="238.78" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (9 samples, 0.02%; +0.00%)</title><rect x="537.7" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="540.65" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (57 samples, 0.12%; +0.00%)</title><rect x="524.9" y="309" width="1.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="527.91" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (9 samples, 0.02%; 0.00%)</title><rect x="16.5" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.54" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (26 samples, 0.05%; +0.01%)</title><rect x="1075.7" y="293" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1078.72" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (66 samples, 0.13%; +0.00%)</title><rect x="853.5" y="469" width="1.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="856.50" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (11 samples, 0.02%; 0.00%)</title><rect x="1142.8" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.80" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.02%; +0.00%)</title><rect x="896.0" y="261" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="899.03" y="271.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (39 samples, 0.08%; +0.02%)</title><rect x="797.4" y="117" width="0.9" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="800.40" y="127.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (29 samples, 0.06%; +0.01%)</title><rect x="784.8" y="229" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="787.80" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; +0.01%)</title><rect x="1175.4" y="437" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1178.38" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (7 samples, 0.01%; +0.01%)</title><rect x="940.1" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="943.08" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (26 samples, 0.05%; 0.00%)</title><rect x="680.5" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="683.55" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (24 samples, 0.05%; +0.02%)</title><rect x="1051.2" y="197" width="0.6" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1054.24" y="207.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (19 samples, 0.04%; -0.01%)</title><rect x="368.1" y="213" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="371.12" y="223.5" ></text>
</g>
<g >
<title>posix_memalign (141 samples, 0.29%; -0.02%)</title><rect x="190.7" y="53" width="3.4" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="193.74" y="63.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (12 samples, 0.02%; +0.01%)</title><rect x="806.4" y="213" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="809.42" y="223.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.02%; +0.02%)</title><rect x="412.6" y="357" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="415.62" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (8 samples, 0.02%; +0.01%)</title><rect x="547.8" y="421" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="550.75" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::done (8 samples, 0.02%; -0.01%)</title><rect x="692.8" y="453" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="695.79" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (10 samples, 0.02%; +0.01%)</title><rect x="418.3" y="389" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="421.30" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (14 samples, 0.03%; +0.01%)</title><rect x="315.3" y="165" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="318.32" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (6 samples, 0.01%; +0.01%)</title><rect x="535.8" y="405" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="538.80" y="415.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (16 samples, 0.03%; +0.01%)</title><rect x="1131.8" y="421" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1134.81" y="431.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (652 samples, 1.33%; 0.00%)</title><rect x="733.3" y="421" width="15.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="736.25" y="431.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (48 samples, 0.10%; -0.01%)</title><rect x="791.9" y="213" width="1.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="794.90" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (15 samples, 0.03%; +0.00%)</title><rect x="581.2" y="373" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="584.25" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (19 samples, 0.04%; 0.00%)</title><rect x="684.0" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.96" y="447.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%; +0.00%)</title><rect x="613.3" y="389" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="616.34" y="399.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (21 samples, 0.04%; +0.02%)</title><rect x="79.1" y="453" width="0.5" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="82.13" y="463.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (25 samples, 0.05%; 0.00%)</title><rect x="503.3" y="197" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="506.34" y="207.5" ></text>
</g>
<g >
<title>database::query (970 samples, 1.98%; +0.02%)</title><rect x="1016.1" y="261" width="23.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1019.09" y="271.5" >d..</text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (6 samples, 0.01%; -0.00%)</title><rect x="1138.4" y="421" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1141.45" y="431.5" ></text>
</g>
<g >
<title>operator new (64 samples, 0.13%; -0.00%)</title><rect x="436.9" y="245" width="1.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="439.86" y="255.5" ></text>
</g>
<g >
<title>operator new (67 samples, 0.14%; +0.01%)</title><rect x="998.6" y="261" width="1.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1001.61" y="271.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::make&lt;managed_bytes&gt; (23 samples, 0.05%; -0.00%)</title><rect x="903.3" y="309" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="906.27" y="319.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (45 samples, 0.09%; +0.04%)</title><rect x="475.0" y="197" width="1.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="478.02" y="207.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (9 samples, 0.02%; -0.01%)</title><rect x="528.4" y="245" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="531.37" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (95 samples, 0.19%; 0.00%)</title><rect x="971.8" y="341" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="974.80" y="351.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (6 samples, 0.01%; +0.01%)</title><rect x="334.9" y="181" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="337.91" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (72 samples, 0.15%; -0.03%)</title><rect x="659.4" y="453" width="1.7" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="662.37" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (736 samples, 1.50%; +0.00%)</title><rect x="1079.7" y="325" width="17.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1082.71" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (17 samples, 0.03%; -0.01%)</title><rect x="95.0" y="421" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="98.04" y="431.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (10 samples, 0.02%; +0.00%)</title><rect x="507.5" y="229" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="510.50" y="239.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (876 samples, 1.78%; -0.01%)</title><rect x="489.3" y="309" width="21.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="492.30" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (14 samples, 0.03%; +0.01%)</title><rect x="93.0" y="437" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="96.05" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (38 samples, 0.08%; +0.01%)</title><rect x="945.1" y="357" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="948.08" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (18 samples, 0.04%; -0.01%)</title><rect x="30.9" y="485" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="33.89" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (5 samples, 0.01%; 0.00%)</title><rect x="644.1" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="647.10" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (7 samples, 0.01%; -0.01%)</title><rect x="369.2" y="197" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="372.20" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (56 samples, 0.11%; +0.10%)</title><rect x="51.7" y="469" width="1.4" height="15.0" fill="rgb(255,108,108)" rx="2" ry="2" />
<text  x="54.74" y="479.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (7 samples, 0.01%; -0.01%)</title><rect x="1135.4" y="405" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1138.44" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (548 samples, 1.12%; +0.02%)</title><rect x="128.6" y="277" width="13.2" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="131.59" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (8 samples, 0.02%; +0.00%)</title><rect x="1042.6" y="261" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1045.63" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (286 samples, 0.58%; 0.00%)</title><rect x="14.5" y="581" width="6.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.47" y="591.5" ></text>
</g>
<g >
<title>table::set_hit_rate (92 samples, 0.19%; -0.00%)</title><rect x="705.8" y="453" width="2.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="708.77" y="463.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (385 samples, 0.78%; +0.02%)</title><rect x="1179.6" y="629" width="9.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1182.61" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (33 samples, 0.07%; +0.01%)</title><rect x="853.8" y="421" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="856.84" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (5 samples, 0.01%; 0.00%)</title><rect x="18.5" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.46" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (22 samples, 0.04%; +0.04%)</title><rect x="498.1" y="229" width="0.5" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="501.10" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1,333 samples, 2.72%; +0.00%)</title><rect x="550.3" y="405" width="32.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="553.28" y="415.5" >fl..</text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (5 samples, 0.01%; -0.01%)</title><rect x="409.4" y="277" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="412.42" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (16 samples, 0.03%; +0.01%)</title><rect x="1145.2" y="501" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1148.21" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (5,716 samples, 11.65%; +0.05%)</title><rect x="966.2" y="373" width="137.4" height="15.0" fill="rgb(255,158,158)" rx="2" ry="2" />
<text  x="969.20" y="383.5" >service::storage_..</text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (25 samples, 0.05%; +0.00%)</title><rect x="683.8" y="501" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="686.84" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (26 samples, 0.05%; +0.01%)</title><rect x="725.1" y="309" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="728.08" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (5 samples, 0.01%; -0.00%)</title><rect x="855.1" y="469" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="858.09" y="479.5" ></text>
</g>
<g >
<title>service::client_state::has_access (1,850 samples, 3.77%; +0.02%)</title><rect x="770.9" y="373" width="44.5" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="773.88" y="383.5" >serv..</text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (49 samples, 0.10%; -0.01%)</title><rect x="613.7" y="389" width="1.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="616.73" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (6 samples, 0.01%; +0.00%)</title><rect x="935.0" y="389" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="937.99" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (659 samples, 1.34%; -0.06%)</title><rect x="1108.2" y="421" width="15.8" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="1111.18" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (22 samples, 0.04%; -0.00%)</title><rect x="544.2" y="309" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="547.17" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (858 samples, 1.75%; +0.00%)</title><rect x="1078.9" y="341" width="20.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1081.89" y="351.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (178 samples, 0.36%; -0.02%)</title><rect x="701.0" y="453" width="4.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="703.99" y="463.5" ></text>
</g>
<g >
<title>database::find_keyspace (38 samples, 0.08%; +0.08%)</title><rect x="970.2" y="357" width="0.9" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="973.16" y="367.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (10 samples, 0.02%; +0.01%)</title><rect x="795.3" y="117" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="798.26" y="127.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (12,895 samples, 26.28%; -0.04%)</title><rect x="109.0" y="421" width="310.1" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="112.01" y="431.5" >query::consume_page&lt;</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (63 samples, 0.13%; -0.00%)</title><rect x="1159.6" y="421" width="1.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1162.56" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt;::operator (5 samples, 0.01%; 0.00%)</title><rect x="70.1" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.11" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (18 samples, 0.04%; +0.02%)</title><rect x="561.0" y="293" width="0.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="563.95" y="303.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (8 samples, 0.02%; +0.00%)</title><rect x="80.4" y="453" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="83.38" y="463.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (11 samples, 0.02%; 0.00%)</title><rect x="17.4" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.36" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,355 samples, 8.87%; +0.01%)</title><rect x="302.0" y="277" width="104.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="304.97" y="287.5" >flat_mutatio..</text>
</g>
<g >
<title>managed_bytes::~managed_bytes (12 samples, 0.02%; -0.01%)</title><rect x="200.8" y="117" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="203.84" y="127.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (23 samples, 0.05%; +0.02%)</title><rect x="572.0" y="341" width="0.6" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="575.01" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.01%)</title><rect x="304.8" y="245" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="307.76" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (10 samples, 0.02%; -0.01%)</title><rect x="681.5" y="437" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="684.53" y="447.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (30 samples, 0.06%; +0.00%)</title><rect x="573.6" y="373" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="576.62" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (7 samples, 0.01%; 0.00%)</title><rect x="684.5" y="501" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.47" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.01%; -0.01%)</title><rect x="1102.4" y="341" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1105.41" y="351.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (14 samples, 0.03%; +0.02%)</title><rect x="1176.0" y="501" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1178.96" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (14 samples, 0.03%; -0.00%)</title><rect x="228.6" y="133" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="231.64" y="143.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (6 samples, 0.01%; -0.00%)</title><rect x="772.6" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="775.61" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (140 samples, 0.29%; +0.00%)</title><rect x="997.5" y="309" width="3.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1000.53" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (5 samples, 0.01%; +0.00%)</title><rect x="402.5" y="213" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="405.52" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (23 samples, 0.05%; +0.01%)</title><rect x="231.2" y="197" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="234.16" y="207.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (4,847 samples, 9.88%; -0.01%)</title><rect x="420.4" y="421" width="116.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="423.39" y="431.5" >query::querier..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (8 samples, 0.02%; +0.00%)</title><rect x="529.6" y="261" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="532.65" y="271.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (869 samples, 1.77%; -0.01%)</title><rect x="640.3" y="501" width="20.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="643.25" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (5 samples, 0.01%; -0.01%)</title><rect x="75.1" y="453" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="78.06" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (14 samples, 0.03%; -0.01%)</title><rect x="814.3" y="277" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="817.33" y="287.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (6 samples, 0.01%; +0.01%)</title><rect x="319.4" y="181" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="322.43" y="191.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (12 samples, 0.02%; +0.01%)</title><rect x="508.9" y="277" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="511.92" y="287.5" ></text>
</g>
<g >
<title>operator delete (57 samples, 0.12%; -0.02%)</title><rect x="937.9" y="405" width="1.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="940.87" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (77 samples, 0.16%; -0.01%)</title><rect x="789.3" y="213" width="1.9" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="792.30" y="223.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (13 samples, 0.03%; 0.00%)</title><rect x="860.7" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.66" y="351.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (37 samples, 0.08%; +0.06%)</title><rect x="1041.7" y="261" width="0.9" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="1044.74" y="271.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (14 samples, 0.03%; +0.00%)</title><rect x="1153.6" y="485" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1156.60" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (5 samples, 0.01%; -0.01%)</title><rect x="1114.6" y="357" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1117.60" y="367.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (38 samples, 0.08%; +0.02%)</title><rect x="1130.0" y="389" width="0.9" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="1132.96" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (9 samples, 0.02%; +0.00%)</title><rect x="686.3" y="485" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="689.30" y="495.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (29 samples, 0.06%; -0.00%)</title><rect x="1064.1" y="277" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1067.10" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (16 samples, 0.03%; 0.00%)</title><rect x="113.8" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.80" y="383.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (32 samples, 0.07%; -0.02%)</title><rect x="760.6" y="325" width="0.8" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="763.64" y="335.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (14 samples, 0.03%; 0.00%)</title><rect x="233.6" y="229" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="236.64" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%; 0.00%)</title><rect x="618.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="621.95" y="447.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (12 samples, 0.02%; +0.02%)</title><rect x="282.6" y="309" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="285.61" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; -0.02%)</title><rect x="609.2" y="405" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="612.18" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (226 samples, 0.46%; -0.01%)</title><rect x="741.1" y="357" width="5.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="744.09" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (6 samples, 0.01%; +0.01%)</title><rect x="42.6" y="485" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="45.56" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (13 samples, 0.03%; +0.02%)</title><rect x="366.1" y="197" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="369.07" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (23 samples, 0.05%; +0.02%)</title><rect x="626.4" y="469" width="0.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="629.38" y="479.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (205 samples, 0.42%; +0.02%)</title><rect x="748.9" y="421" width="5.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="751.93" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::do_expire_lowres_timers (6 samples, 0.01%; 0.00%)</title><rect x="1177.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1180.62" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (5 samples, 0.01%; -0.01%)</title><rect x="530.7" y="325" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="533.70" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (22 samples, 0.04%; +0.02%)</title><rect x="443.8" y="277" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="446.81" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (9 samples, 0.02%; +0.01%)</title><rect x="575.4" y="341" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="578.40" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (2,835 samples, 5.78%; -0.07%)</title><rect x="877.8" y="421" width="68.2" height="15.0" fill="rgb(134,134,255)" rx="2" ry="2" />
<text  x="880.83" y="431.5" >cql3::r..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (12 samples, 0.02%; +0.01%)</title><rect x="220.9" y="133" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="223.89" y="143.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (14 samples, 0.03%; +0.01%)</title><rect x="548.1" y="421" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="551.06" y="431.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (190 samples, 0.39%; +0.01%)</title><rect x="723.7" y="405" width="4.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="726.66" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (8 samples, 0.02%; +0.00%)</title><rect x="24.1" y="517" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="27.09" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (6 samples, 0.01%; 0.00%)</title><rect x="702.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.93" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (40 samples, 0.08%; +0.01%)</title><rect x="669.0" y="453" width="0.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="671.98" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (5 samples, 0.01%; -0.00%)</title><rect x="601.2" y="421" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="604.23" y="431.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (11 samples, 0.02%; +0.02%)</title><rect x="136.3" y="245" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="139.33" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (14 samples, 0.03%; -0.00%)</title><rect x="825.1" y="309" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="828.10" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.01%)</title><rect x="805.7" y="229" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="808.75" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (7 samples, 0.01%; -0.00%)</title><rect x="579.4" y="341" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="582.44" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (12 samples, 0.02%; 0.00%)</title><rect x="21.4" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.45" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (8 samples, 0.02%; 0.00%)</title><rect x="859.5" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.46" y="335.5" ></text>
</g>
<g >
<title>database::do_apply (25 samples, 0.05%; 0.00%)</title><rect x="1142.1" y="341" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.10" y="351.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (10 samples, 0.02%; +0.02%)</title><rect x="555.1" y="309" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="558.13" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (10 samples, 0.02%; +0.00%)</title><rect x="1102.5" y="341" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1105.53" y="351.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (10 samples, 0.02%; +0.01%)</title><rect x="570.4" y="325" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="573.35" y="335.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (36 samples, 0.07%; +0.02%)</title><rect x="371.5" y="181" width="0.9" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="374.53" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; +0.01%)</title><rect x="672.4" y="469" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="675.37" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (11 samples, 0.02%; -0.02%)</title><rect x="514.9" y="325" width="0.2" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="517.88" y="335.5" ></text>
</g>
<g >
<title>database::find_schema (288 samples, 0.59%; -0.01%)</title><rect x="754.8" y="405" width="6.9" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="757.77" y="415.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (190 samples, 0.39%; +0.01%)</title><rect x="893.1" y="277" width="4.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="896.08" y="287.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (7 samples, 0.01%; -0.00%)</title><rect x="331.9" y="181" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="334.93" y="191.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (14 samples, 0.03%; +0.02%)</title><rect x="723.1" y="405" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="726.06" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (415 samples, 0.85%; +0.00%)</title><rect x="661.2" y="501" width="10.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="664.19" y="511.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (54 samples, 0.11%; +0.01%)</title><rect x="674.9" y="469" width="1.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="677.85" y="479.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (40 samples, 0.08%; +0.01%)</title><rect x="735.1" y="389" width="1.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="738.11" y="399.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (4,664 samples, 9.50%; -0.02%)</title><rect x="421.7" y="405" width="112.2" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="424.71" y="415.5" >mutation_sour..</text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (20 samples, 0.04%; -0.00%)</title><rect x="645.9" y="421" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="648.92" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (30 samples, 0.06%; -0.00%)</title><rect x="608.0" y="437" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="611.01" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (12 samples, 0.02%; +0.00%)</title><rect x="958.8" y="389" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="961.84" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (21 samples, 0.04%; +0.01%)</title><rect x="270.9" y="341" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="273.93" y="351.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (24 samples, 0.05%; -0.02%)</title><rect x="137.7" y="229" width="0.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="140.75" y="239.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (8 samples, 0.02%; -0.00%)</title><rect x="701.6" y="437" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="704.56" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (24 samples, 0.05%; +0.02%)</title><rect x="945.4" y="325" width="0.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="948.42" y="335.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (63 samples, 0.13%; -0.04%)</title><rect x="353.7" y="165" width="1.5" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="356.71" y="175.5" ></text>
</g>
<g >
<title>query::querier_base::close (1,372 samples, 2.80%; 0.00%)</title><rect x="549.5" y="437" width="33.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="552.53" y="447.5" >qu..</text>
</g>
<g >
<title>cql3::expr::evaluate (10 samples, 0.02%; +0.02%)</title><rect x="883.3" y="357" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="886.31" y="367.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (17 samples, 0.03%; +0.01%)</title><rect x="1026.6" y="181" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1029.57" y="191.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (28 samples, 0.06%; +0.01%)</title><rect x="836.7" y="373" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="839.72" y="383.5" ></text>
</g>
<g >
<title>db::block_for (8 samples, 0.02%; +0.00%)</title><rect x="1067.1" y="341" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1070.06" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (12 samples, 0.02%; 0.00%)</title><rect x="21.4" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.45" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (67 samples, 0.14%; 0.00%)</title><rect x="15.3" y="357" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.31" y="367.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (112 samples, 0.23%; +0.01%)</title><rect x="412.2" y="373" width="2.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="415.19" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (73 samples, 0.15%; +0.03%)</title><rect x="907.6" y="341" width="1.8" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="910.62" y="351.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (4,620 samples, 9.41%; -0.04%)</title><rect x="422.7" y="373" width="111.1" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="425.70" y="383.5" >std::_Functio..</text>
</g>
<g >
<title>query::consume_page&lt; (28 samples, 0.06%; +0.02%)</title><rect x="95.8" y="437" width="0.7" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="98.81" y="447.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (43 samples, 0.09%; -0.02%)</title><rect x="798.7" y="133" width="1.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="801.73" y="143.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (29 samples, 0.06%; +0.02%)</title><rect x="367.1" y="165" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="370.06" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (8 samples, 0.02%; -0.00%)</title><rect x="37.9" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="40.92" y="447.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (42 samples, 0.09%; -0.00%)</title><rect x="833.7" y="437" width="1.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="836.69" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (5 samples, 0.01%; -0.00%)</title><rect x="1030.7" y="133" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1033.73" y="143.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (9 samples, 0.02%; -0.01%)</title><rect x="1105.4" y="373" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1108.41" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (597 samples, 1.22%; +0.01%)</title><rect x="271.4" y="357" width="14.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="274.43" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (8 samples, 0.02%; -0.00%)</title><rect x="1126.5" y="421" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1129.50" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (11 samples, 0.02%; +0.01%)</title><rect x="909.7" y="373" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="912.69" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (62 samples, 0.13%; -0.08%)</title><rect x="60.2" y="437" width="1.5" height="15.0" fill="rgb(125,125,255)" rx="2" ry="2" />
<text  x="63.20" y="447.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (8 samples, 0.02%; -0.01%)</title><rect x="845.3" y="325" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="848.28" y="335.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (75 samples, 0.15%; +0.01%)</title><rect x="239.9" y="181" width="1.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="242.91" y="191.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (51 samples, 0.10%; -0.01%)</title><rect x="896.4" y="261" width="1.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="899.42" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (18 samples, 0.04%; -0.00%)</title><rect x="1139.2" y="421" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1142.17" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (22 samples, 0.04%; -0.02%)</title><rect x="148.8" y="245" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="151.83" y="255.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (40 samples, 0.08%; -0.00%)</title><rect x="1096.4" y="293" width="1.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1099.44" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (17 samples, 0.03%; -0.00%)</title><rect x="684.0" y="389" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="687.01" y="399.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (25 samples, 0.05%; +0.05%)</title><rect x="249.3" y="229" width="0.6" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="252.29" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::reserve (12 samples, 0.02%; +0.02%)</title><rect x="779.5" y="293" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="782.47" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (46 samples, 0.09%; +0.01%)</title><rect x="789.9" y="165" width="1.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="792.85" y="175.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (54 samples, 0.11%; +0.01%)</title><rect x="240.4" y="165" width="1.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="243.42" y="175.5" ></text>
</g>
<g >
<title>operator new (37 samples, 0.08%; 0.00%)</title><rect x="100.1" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.09" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (62 samples, 0.13%; -0.02%)</title><rect x="366.6" y="181" width="1.4" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="369.55" y="191.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (75 samples, 0.15%; +0.01%)</title><rect x="737.1" y="357" width="1.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="740.08" y="367.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.02%; +0.01%)</title><rect x="791.4" y="213" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="794.44" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (6 samples, 0.01%; +0.01%)</title><rect x="571.0" y="373" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="574.03" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (21 samples, 0.04%; +0.02%)</title><rect x="205.3" y="149" width="0.5" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="208.26" y="159.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (5 samples, 0.01%; +0.01%)</title><rect x="365.4" y="197" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="368.35" y="207.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (5 samples, 0.01%; -0.00%)</title><rect x="334.8" y="181" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="337.79" y="191.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (6 samples, 0.01%; +0.01%)</title><rect x="391.0" y="229" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="394.03" y="239.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (19 samples, 0.04%; +0.01%)</title><rect x="516.4" y="341" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="519.45" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.01%; 0.00%)</title><rect x="702.5" y="421" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.45" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (17 samples, 0.03%; -0.04%)</title><rect x="880.4" y="405" width="0.4" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="883.38" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (12 samples, 0.02%; -0.02%)</title><rect x="877.1" y="421" width="0.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="880.06" y="431.5" ></text>
</g>
<g >
<title>__dynamic_cast (15 samples, 0.03%; +0.00%)</title><rect x="643.6" y="469" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="646.59" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (6 samples, 0.01%; 0.00%)</title><rect x="1105.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1108.92" y="367.5" ></text>
</g>
<g >
<title>schema::column_at (21 samples, 0.04%; -0.02%)</title><rect x="204.7" y="133" width="0.5" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="207.69" y="143.5" ></text>
</g>
<g >
<title>operator delete (32 samples, 0.07%; +0.03%)</title><rect x="572.8" y="341" width="0.8" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="575.83" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (304 samples, 0.62%; +0.00%)</title><rect x="395.9" y="229" width="7.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="398.94" y="239.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (8 samples, 0.02%; +0.00%)</title><rect x="616.5" y="421" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="619.52" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (489 samples, 1.00%; +0.00%)</title><rect x="236.6" y="229" width="11.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="239.57" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (49 samples, 0.10%; +0.01%)</title><rect x="1046.4" y="277" width="1.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1049.36" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (8 samples, 0.02%; -0.00%)</title><rect x="1078.6" y="325" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1081.63" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (68 samples, 0.14%; -0.01%)</title><rect x="267.9" y="325" width="1.7" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="270.92" y="335.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (8 samples, 0.02%; -0.00%)</title><rect x="899.4" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="902.45" y="287.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (50 samples, 0.10%; +0.01%)</title><rect x="764.6" y="357" width="1.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="767.61" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (89 samples, 0.18%; -0.01%)</title><rect x="750.1" y="405" width="2.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="753.08" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (5 samples, 0.01%; +0.01%)</title><rect x="857.5" y="485" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="860.47" y="495.5" ></text>
</g>
<g >
<title>schema::position (7 samples, 0.01%; -0.00%)</title><rect x="939.4" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="942.39" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (7 samples, 0.01%; 0.00%)</title><rect x="21.6" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.57" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (13 samples, 0.03%; 0.00%)</title><rect x="859.4" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.41" y="415.5" ></text>
</g>
<g >
<title>operator new (61 samples, 0.12%; +0.00%)</title><rect x="1127.4" y="405" width="1.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1130.44" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (7 samples, 0.01%; -0.01%)</title><rect x="318.6" y="165" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="321.56" y="175.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (40 samples, 0.08%; +0.00%)</title><rect x="737.7" y="309" width="0.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="740.68" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (5 samples, 0.01%; -0.02%)</title><rect x="418.9" y="405" width="0.1" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="421.92" y="415.5" ></text>
</g>
<g >
<title>perf_simple_que (49,075 samples, 100.00%; 0.00%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >perf_simple_que</text>
</g>
<g >
<title>operator new (27 samples, 0.06%; +0.00%)</title><rect x="247.5" y="181" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="250.49" y="191.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (611 samples, 1.25%; 0.00%)</title><rect x="1023.8" y="245" width="14.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1026.78" y="255.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (12 samples, 0.02%; -0.00%)</title><rect x="20.5" y="405" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="23.48" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (78 samples, 0.16%; -0.01%)</title><rect x="1169.0" y="485" width="1.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1171.96" y="495.5" ></text>
</g>
<g >
<title>__start_context (12 samples, 0.02%; 0.00%)</title><rect x="21.4" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.45" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (10 samples, 0.02%; -0.02%)</title><rect x="702.7" y="405" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="705.69" y="415.5" ></text>
</g>
<g >
<title>schema::column_at (52 samples, 0.11%; -0.01%)</title><rect x="332.1" y="181" width="1.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="335.10" y="191.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (314 samples, 0.64%; +0.02%)</title><rect x="434.1" y="293" width="7.6" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="437.14" y="303.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; -0.01%)</title><rect x="516.9" y="341" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="519.93" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (27 samples, 0.06%; -0.01%)</title><rect x="865.1" y="469" width="0.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="868.14" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (9 samples, 0.02%; +0.00%)</title><rect x="689.2" y="453" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="692.20" y="463.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (108 samples, 0.22%; +0.08%)</title><rect x="1008.8" y="277" width="2.6" height="15.0" fill="rgb(255,127,127)" rx="2" ry="2" />
<text  x="1011.83" y="287.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (6 samples, 0.01%; 0.00%)</title><rect x="1142.2" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.15" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (17 samples, 0.03%; +0.01%)</title><rect x="367.3" y="149" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="370.35" y="159.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (63 samples, 0.13%; +0.01%)</title><rect x="527.5" y="261" width="1.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="530.46" y="271.5" ></text>
</g>
<g >
<title>operator new (49 samples, 0.10%; 0.00%)</title><rect x="1161.2" y="437" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1164.17" y="447.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (23 samples, 0.05%; -0.01%)</title><rect x="1043.5" y="261" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1046.55" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (484 samples, 0.99%; +0.00%)</title><rect x="496.5" y="261" width="11.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="499.54" y="271.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (12 samples, 0.02%; -0.01%)</title><rect x="35.2" y="437" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="38.15" y="447.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (5 samples, 0.01%; -0.01%)</title><rect x="847.7" y="389" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="850.73" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (21 samples, 0.04%; +0.03%)</title><rect x="980.1" y="357" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="983.14" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (12 samples, 0.02%; 0.00%)</title><rect x="21.4" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.45" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (6 samples, 0.01%; +0.00%)</title><rect x="165.1" y="229" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="168.13" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (25 samples, 0.05%; +0.01%)</title><rect x="414.0" y="325" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="417.02" y="335.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (21 samples, 0.04%; -0.02%)</title><rect x="314.2" y="165" width="0.5" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="317.18" y="175.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (24 samples, 0.05%; -0.01%)</title><rect x="1178.2" y="485" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1181.22" y="495.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (333 samples, 0.68%; +0.00%)</title><rect x="721.4" y="437" width="8.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="724.40" y="447.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::find_bucket_index (7 samples, 0.01%; +0.01%)</title><rect x="674.6" y="453" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="677.56" y="463.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (6 samples, 0.01%; +0.01%)</title><rect x="948.6" y="357" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="951.59" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.00%)</title><rect x="905.2" y="341" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="908.17" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (9 samples, 0.02%; +0.01%)</title><rect x="742.1" y="277" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="745.08" y="287.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (31 samples, 0.06%; +0.01%)</title><rect x="419.1" y="421" width="0.7" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="422.07" y="431.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (183 samples, 0.37%; +0.03%)</title><rect x="723.8" y="389" width="4.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="726.83" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (26 samples, 0.05%; -0.02%)</title><rect x="537.2" y="421" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="540.24" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%; +0.00%)</title><rect x="30.3" y="469" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="33.32" y="479.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (125 samples, 0.25%; +0.01%)</title><rect x="715.6" y="469" width="3.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="718.56" y="479.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (8 samples, 0.02%; 0.00%)</title><rect x="1176.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.61" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (62 samples, 0.13%; +0.05%)</title><rect x="976.6" y="309" width="1.5" height="15.0" fill="rgb(255,158,158)" rx="2" ry="2" />
<text  x="979.61" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (29 samples, 0.06%; -0.02%)</title><rect x="158.7" y="181" width="0.7" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="161.69" y="191.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.04%; +0.00%)</title><rect x="908.2" y="325" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="911.18" y="335.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (5 samples, 0.01%; +0.01%)</title><rect x="582.3" y="405" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="585.33" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.00%)</title><rect x="104.2" y="421" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="107.23" y="431.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (8 samples, 0.02%; 0.00%)</title><rect x="822.3" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="825.29" y="271.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (125 samples, 0.25%; -0.01%)</title><rect x="279.4" y="293" width="3.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="282.39" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (7 samples, 0.01%; +0.01%)</title><rect x="929.4" y="341" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="932.38" y="351.5" ></text>
</g>
<g >
<title>operator new (32 samples, 0.07%; +0.00%)</title><rect x="784.7" y="245" width="0.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="787.73" y="255.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (6 samples, 0.01%; +0.01%)</title><rect x="1120.8" y="405" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1123.78" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (18 samples, 0.04%; +0.02%)</title><rect x="23.3" y="517" width="0.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="26.30" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (37 samples, 0.08%; +0.02%)</title><rect x="664.0" y="469" width="0.9" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="667.01" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (22 samples, 0.04%; -0.00%)</title><rect x="825.6" y="293" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="828.61" y="303.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (21 samples, 0.04%; 0.00%)</title><rect x="1178.2" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1181.22" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (6 samples, 0.01%; -0.01%)</title><rect x="608.7" y="437" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="611.73" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; 0.00%)</title><rect x="34.7" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.69" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (67 samples, 0.14%; -0.01%)</title><rect x="764.4" y="373" width="1.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="767.44" y="383.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (16 samples, 0.03%; +0.02%)</title><rect x="233.3" y="229" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="236.25" y="239.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (10 samples, 0.02%; +0.00%)</title><rect x="1003.7" y="293" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1006.70" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (32 samples, 0.07%; -0.00%)</title><rect x="1152.3" y="469" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1155.27" y="479.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (98 samples, 0.20%; -0.01%)</title><rect x="744.0" y="309" width="2.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="747.05" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (55 samples, 0.11%; +0.01%)</title><rect x="840.8" y="421" width="1.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="843.83" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (87 samples, 0.18%; -0.01%)</title><rect x="800.1" y="133" width="2.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="803.07" y="143.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; +0.00%)</title><rect x="424.0" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="427.00" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (84 samples, 0.17%; +0.00%)</title><rect x="1097.4" y="325" width="2.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1100.41" y="335.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (6 samples, 0.01%; -0.01%)</title><rect x="949.0" y="341" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="951.98" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (7 samples, 0.01%; +0.00%)</title><rect x="1053.4" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1056.36" y="303.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (9 samples, 0.02%; +0.00%)</title><rect x="822.6" y="277" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="825.63" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (88 samples, 0.18%; -0.01%)</title><rect x="725.9" y="325" width="2.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="728.94" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (6,054 samples, 12.34%; -0.07%)</title><rect x="959.4" y="389" width="145.6" height="15.0" fill="rgb(134,134,255)" rx="2" ry="2" />
<text  x="962.39" y="399.5" >service::storage_p..</text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (76 samples, 0.15%; +0.02%)</title><rect x="726.2" y="309" width="1.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="729.23" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (7 samples, 0.01%; +0.01%)</title><rect x="965.1" y="373" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="968.14" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; -0.01%)</title><rect x="803.1" y="181" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="806.10" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (43 samples, 0.09%; -0.03%)</title><rect x="839.1" y="405" width="1.0" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="842.10" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (5 samples, 0.01%; +0.00%)</title><rect x="35.4" y="437" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="38.44" y="447.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (73 samples, 0.15%; +0.01%)</title><rect x="927.9" y="389" width="1.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="930.89" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (61 samples, 0.12%; -0.03%)</title><rect x="998.8" y="245" width="1.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1001.75" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (8 samples, 0.02%; +0.00%)</title><rect x="501.1" y="213" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="504.08" y="223.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.04%; +0.00%)</title><rect x="637.4" y="485" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="640.41" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (12 samples, 0.02%; -0.01%)</title><rect x="287.3" y="357" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="290.30" y="367.5" ></text>
</g>
<g >
<title>database::find_keyspace (210 samples, 0.43%; +0.01%)</title><rect x="1061.6" y="341" width="5.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1064.63" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (5 samples, 0.01%; +0.00%)</title><rect x="710.5" y="501" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="713.53" y="511.5" ></text>
</g>
<g >
<title>database::find_schema (62 samples, 0.13%; +0.00%)</title><rect x="818.2" y="357" width="1.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="821.23" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (25 samples, 0.05%; +0.02%)</title><rect x="564.5" y="277" width="0.6" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="567.51" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (13 samples, 0.03%; -0.01%)</title><rect x="790.6" y="133" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="793.65" y="143.5" ></text>
</g>
<g >
<title>query::digester::digester (39 samples, 0.08%; +0.01%)</title><rect x="595.4" y="405" width="0.9" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="598.41" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.01%)</title><rect x="805.9" y="245" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="808.94" y="255.5" ></text>
</g>
<g >
<title>database::has_keyspace (156 samples, 0.32%; 0.00%)</title><rect x="835.2" y="421" width="3.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="838.23" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::stats (35 samples, 0.07%; +0.02%)</title><rect x="525.4" y="293" width="0.9" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="528.44" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.01%)</title><rect x="415.6" y="357" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="418.58" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (8 samples, 0.02%; +0.00%)</title><rect x="544.5" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="547.51" y="303.5" ></text>
</g>
<g >
<title>malloc (15 samples, 0.03%; 0.00%)</title><rect x="597.5" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="600.48" y="383.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (27 samples, 0.06%; +0.02%)</title><rect x="932.9" y="325" width="0.6" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="935.87" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (8 samples, 0.02%; +0.00%)</title><rect x="904.8" y="341" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="907.79" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (8 samples, 0.02%; +0.01%)</title><rect x="646.5" y="437" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="649.50" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (5 samples, 0.01%; 0.00%)</title><rect x="887.5" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="890.52" y="319.5" ></text>
</g>
<g >
<title>operator delete (36 samples, 0.07%; +0.02%)</title><rect x="906.0" y="357" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="909.04" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (26 samples, 0.05%; +0.01%)</title><rect x="655.6" y="485" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="658.61" y="495.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (42 samples, 0.09%; -0.01%)</title><rect x="932.6" y="341" width="1.0" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="935.63" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; +0.01%)</title><rect x="440.2" y="261" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="443.15" y="271.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (6 samples, 0.01%; 0.00%)</title><rect x="621.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="624.62" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (5 samples, 0.01%; -0.00%)</title><rect x="1071.8" y="325" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1074.85" y="335.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (662 samples, 1.35%; -0.01%)</title><rect x="178.7" y="117" width="15.9" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="181.72" y="127.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (37 samples, 0.08%; +0.01%)</title><rect x="1030.5" y="149" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1033.51" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (13 samples, 0.03%; -0.00%)</title><rect x="439.0" y="261" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="441.98" y="271.5" ></text>
</g>
<g >
<title>compound_type&lt; (58 samples, 0.12%; -0.01%)</title><rect x="917.3" y="357" width="1.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="920.31" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (78 samples, 0.16%; -0.02%)</title><rect x="830.2" y="421" width="1.8" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="833.15" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.00%)</title><rect x="791.8" y="197" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="794.78" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; +0.01%)</title><rect x="578.9" y="325" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="581.89" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (14 samples, 0.03%; +0.00%)</title><rect x="322.9" y="197" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="325.89" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (10 samples, 0.02%; -0.01%)</title><rect x="1119.7" y="325" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1122.74" y="335.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (525 samples, 1.07%; +0.00%)</title><rect x="671.2" y="501" width="12.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="674.17" y="511.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (7 samples, 0.01%; -0.00%)</title><rect x="815.6" y="389" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="818.56" y="399.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (7 samples, 0.01%; 0.00%)</title><rect x="20.2" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.24" y="431.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (8 samples, 0.02%; +0.00%)</title><rect x="575.2" y="341" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="578.21" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (77 samples, 0.16%; +0.00%)</title><rect x="659.2" y="469" width="1.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="662.25" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (23,900 samples, 48.70%; +0.07%)</title><rect x="48.1" y="485" width="574.6" height="15.0" fill="rgb(255,132,132)" rx="2" ry="2" />
<text  x="51.06" y="495.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (33 samples, 0.07%; 0.00%)</title><rect x="1156.9" y="453" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1159.91" y="463.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (9 samples, 0.02%; 0.00%)</title><rect x="297.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="300.86" y="303.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (7 samples, 0.01%; 0.00%)</title><rect x="860.7" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.66" y="319.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (5 samples, 0.01%; +0.00%)</title><rect x="598.7" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="601.68" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (2,432 samples, 4.96%; -0.04%)</title><rect x="996.4" y="325" width="58.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="999.44" y="335.5" >servic..</text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;boost::intrusive::detail::null_disposer, boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (6 samples, 0.01%; +0.01%)</title><rect x="561.4" y="293" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="564.38" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (24 samples, 0.05%; -0.02%)</title><rect x="447.7" y="261" width="0.5" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="450.66" y="271.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (34 samples, 0.07%; 0.00%)</title><rect x="36.4" y="421" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.42" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (14 samples, 0.03%; -0.00%)</title><rect x="660.0" y="437" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="663.01" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (14 samples, 0.03%; 0.00%)</title><rect x="19.4" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.40" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (16 samples, 0.03%; +0.03%)</title><rect x="1031.0" y="117" width="0.4" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="1034.02" y="127.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; +0.01%)</title><rect x="98.6" y="405" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="101.58" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (12 samples, 0.02%; +0.01%)</title><rect x="320.3" y="181" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="323.34" y="191.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (12 samples, 0.02%; 0.00%)</title><rect x="1038.1" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1041.09" y="207.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (140 samples, 0.29%; -0.00%)</title><rect x="242.5" y="213" width="3.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="245.53" y="223.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (21 samples, 0.04%; +0.00%)</title><rect x="844.5" y="341" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="847.51" y="351.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (11 samples, 0.02%; -0.01%)</title><rect x="406.1" y="229" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="409.11" y="239.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (45 samples, 0.09%; +0.02%)</title><rect x="10.3" y="581" width="1.0" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="13.26" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (52 samples, 0.11%; -0.01%)</title><rect x="680.5" y="469" width="1.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="683.52" y="479.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (31 samples, 0.06%; +0.00%)</title><rect x="405.9" y="245" width="0.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="408.94" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (9 samples, 0.02%; -0.02%)</title><rect x="662.8" y="469" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="665.76" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (5 samples, 0.01%; -0.02%)</title><rect x="617.5" y="389" width="0.1" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="620.48" y="399.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.01%; 0.00%)</title><rect x="44.3" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.31" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (5,354 samples, 10.91%; -0.01%)</title><rect x="289.8" y="405" width="128.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="292.80" y="415.5" >seastar::future&lt;..</text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (19 samples, 0.04%; 0.00%)</title><rect x="684.0" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.96" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (14 samples, 0.03%; +0.02%)</title><rect x="444.6" y="309" width="0.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="447.63" y="319.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (422 samples, 0.86%; -0.02%)</title><rect x="571.5" y="389" width="10.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="574.46" y="399.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (44 samples, 0.09%; -0.02%)</title><rect x="597.1" y="389" width="1.1" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="600.11" y="399.5" ></text>
</g>
<g >
<title>dht::tri_compare (124 samples, 0.25%; +0.01%)</title><rect x="1086.2" y="229" width="3.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1089.18" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (13 samples, 0.03%; +0.01%)</title><rect x="880.1" y="405" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="883.07" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (5 samples, 0.01%; +0.00%)</title><rect x="683.1" y="485" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="686.10" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (117 samples, 0.24%; +0.00%)</title><rect x="588.1" y="405" width="2.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="591.07" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="780.0" y="293" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="782.97" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (37 samples, 0.08%; 0.00%)</title><rect x="1142.7" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.73" y="463.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (23 samples, 0.05%; +0.01%)</title><rect x="197.5" y="101" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="200.47" y="111.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (9 samples, 0.02%; +0.01%)</title><rect x="1032.0" y="149" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1034.98" y="159.5" ></text>
</g>
<g >
<title>memtable::apply (20 samples, 0.04%; 0.00%)</title><rect x="1142.1" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.10" y="271.5" ></text>
</g>
<g >
<title>operator delete (35 samples, 0.07%; -0.01%)</title><rect x="33.1" y="469" width="0.9" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="36.13" y="479.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (6 samples, 0.01%; +0.01%)</title><rect x="1149.8" y="469" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1152.80" y="479.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (37 samples, 0.08%; 0.00%)</title><rect x="1142.7" y="405" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.73" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (42 samples, 0.09%; +0.02%)</title><rect x="766.6" y="341" width="1.0" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="769.58" y="351.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (153 samples, 0.31%; +0.03%)</title><rect x="66.6" y="405" width="3.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="69.55" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (7 samples, 0.01%; 0.00%)</title><rect x="1176.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.61" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="250.3" y="245" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="253.32" y="255.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (13 samples, 0.03%; -0.00%)</title><rect x="845.2" y="341" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="848.16" y="351.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (9 samples, 0.02%; +0.01%)</title><rect x="759.5" y="293" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="762.51" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (18 samples, 0.04%; -0.02%)</title><rect x="776.8" y="277" width="0.4" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="779.80" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (21 samples, 0.04%; +0.02%)</title><rect x="817.1" y="357" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="820.07" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (5 samples, 0.01%; -0.00%)</title><rect x="785.7" y="229" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="788.72" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (43 samples, 0.09%; +0.01%)</title><rect x="992.5" y="277" width="1.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="995.55" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,435 samples, 4.96%; +0.02%)</title><rect x="165.3" y="229" width="58.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="168.28" y="239.5" >partit..</text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (106 samples, 0.22%; -0.03%)</title><rect x="975.5" y="325" width="2.6" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="978.55" y="335.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (15 samples, 0.03%; -0.00%)</title><rect x="598.2" y="405" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="601.22" y="415.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (49 samples, 0.10%; +0.00%)</title><rect x="599.8" y="421" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="602.76" y="431.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::done (10 samples, 0.02%; +0.01%)</title><rect x="592.7" y="421" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="595.71" y="431.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (5 samples, 0.01%; +0.00%)</title><rect x="612.6" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="615.55" y="415.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (7 samples, 0.01%; 0.00%)</title><rect x="21.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.04" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (5 samples, 0.01%; -0.00%)</title><rect x="832.3" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="835.34" y="447.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%; +0.01%)</title><rect x="529.5" y="261" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="532.53" y="271.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (156 samples, 0.32%; +0.01%)</title><rect x="846.9" y="421" width="3.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="849.94" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.02%; 0.00%)</title><rect x="926.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="929.43" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (12 samples, 0.02%; -0.00%)</title><rect x="15.4" y="277" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="18.36" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (10 samples, 0.02%; +0.01%)</title><rect x="991.5" y="293" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="994.51" y="303.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (15 samples, 0.03%; +0.02%)</title><rect x="455.6" y="325" width="0.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="458.57" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="965.8" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="968.83" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (9 samples, 0.02%; -0.01%)</title><rect x="622.9" y="469" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="625.89" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (95 samples, 0.19%; +0.01%)</title><rect x="35.0" y="453" width="2.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="37.96" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (16 samples, 0.03%; +0.01%)</title><rect x="555.4" y="325" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="558.37" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (10 samples, 0.02%; +0.00%)</title><rect x="456.7" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="459.67" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (16 samples, 0.03%; -0.00%)</title><rect x="614.9" y="389" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="617.91" y="399.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (258 samples, 0.53%; +0.02%)</title><rect x="846.2" y="453" width="6.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="849.24" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (156 samples, 0.32%; +0.01%)</title><rect x="1073.1" y="309" width="3.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1076.14" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (9 samples, 0.02%; +0.00%)</title><rect x="689.0" y="453" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="691.99" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (16 samples, 0.03%; +0.01%)</title><rect x="488.8" y="309" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="491.84" y="319.5" ></text>
</g>
<g >
<title>operator delete (32 samples, 0.07%; 0.00%)</title><rect x="901.3" y="309" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="904.30" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (22 samples, 0.04%; -0.01%)</title><rect x="645.3" y="437" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="648.30" y="447.5" ></text>
</g>
<g >
<title>__tls_init (18 samples, 0.04%; +0.01%)</title><rect x="145.7" y="245" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="148.73" y="255.5" ></text>
</g>
<g >
<title>__tls_init (7 samples, 0.01%; +0.01%)</title><rect x="482.7" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="485.69" y="319.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (8 samples, 0.02%; +0.00%)</title><rect x="846.0" y="453" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="849.02" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (8 samples, 0.02%; +0.01%)</title><rect x="407.9" y="277" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="410.86" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (16 samples, 0.03%; +0.00%)</title><rect x="831.2" y="357" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="834.19" y="367.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_4findERKNS2_10expressionENS2_6oper_tEEUlRKNS2_15binary_operatorEE_EEPS9_S6_T_EUlSA_E_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_8constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_11conjunctionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_12column_valueEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_5tokenEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13function_callEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4castEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_15field_selectionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4nullEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13bind_variableEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_16untyped_constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_17tuple_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_22collection_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSJ_S8_SN_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_SF_S1R_S1V_S1Z_EEEENSt13invoke_resultISD_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSD_DpOS29_ (5 samples, 0.01%; +0.01%)</title><rect x="954.3" y="341" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="957.29" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (11 samples, 0.02%; +0.01%)</title><rect x="205.8" y="149" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="208.77" y="159.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (182 samples, 0.37%; +0.01%)</title><rect x="757.2" y="373" width="4.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="760.23" y="383.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (40 samples, 0.08%; +0.01%)</title><rect x="103.5" y="437" width="1.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="106.53" y="447.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (7 samples, 0.01%; -0.01%)</title><rect x="336.1" y="181" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="339.09" y="191.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (465 samples, 0.95%; +0.03%)</title><rect x="889.1" y="293" width="11.2" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="892.09" y="303.5" ></text>
</g>
<g >
<title>free (35 samples, 0.07%; +0.01%)</title><rect x="401.6" y="197" width="0.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="404.61" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (35 samples, 0.07%; -0.04%)</title><rect x="1166.7" y="469" width="0.8" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="1169.65" y="479.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (6 samples, 0.01%; 0.00%)</title><rect x="1142.2" y="197" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.15" y="207.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (125 samples, 0.25%; 0.00%)</title><rect x="668.1" y="469" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="671.09" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (26 samples, 0.05%; +0.05%)</title><rect x="868.2" y="453" width="0.6" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="871.17" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.03%; -0.01%)</title><rect x="776.1" y="293" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="779.12" y="303.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (46 samples, 0.09%; +0.03%)</title><rect x="1165.5" y="453" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1168.50" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (26 samples, 0.05%; 0.00%)</title><rect x="1142.1" y="453" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.10" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (82 samples, 0.17%; +0.00%)</title><rect x="813.2" y="325" width="2.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="816.25" y="335.5" ></text>
</g>
<g >
<title>__tls_init (5 samples, 0.01%; +0.00%)</title><rect x="145.2" y="245" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="148.18" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.01%; +0.00%)</title><rect x="803.7" y="229" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="806.68" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::get_value (5 samples, 0.01%; +0.01%)</title><rect x="712.7" y="501" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="715.70" y="511.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (11 samples, 0.02%; +0.02%)</title><rect x="518.6" y="325" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="521.59" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (26 samples, 0.05%; +0.00%)</title><rect x="1051.2" y="213" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1054.19" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; -0.00%)</title><rect x="562.8" y="277" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="565.83" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (27 samples, 0.06%; +0.01%)</title><rect x="39.4" y="469" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="42.36" y="479.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (266 samples, 0.54%; 0.00%)</title><rect x="14.9" y="517" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.93" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (106 samples, 0.22%; -0.04%)</title><rect x="630.9" y="485" width="2.6" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="633.95" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (7 samples, 0.01%; +0.01%)</title><rect x="53.1" y="469" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="56.11" y="479.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (11 samples, 0.02%; 0.00%)</title><rect x="401.1" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="404.08" y="207.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (23,648 samples, 48.19%; +0.03%)</title><rect x="53.6" y="469" width="568.6" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="56.62" y="479.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (33 samples, 0.07%; +0.01%)</title><rect x="828.7" y="405" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="831.73" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.01%)</title><rect x="414.9" y="373" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="417.88" y="383.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (6 samples, 0.01%; +0.01%)</title><rect x="74.4" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="77.41" y="431.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (5,272 samples, 10.74%; -0.04%)</title><rect x="290.9" y="389" width="126.8" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="293.93" y="399.5" >query::consume_..</text>
</g>
<g >
<title>service::storage_proxy::query_result_local (2,023 samples, 4.12%; +0.05%)</title><rect x="1004.2" y="293" width="48.7" height="15.0" fill="rgb(255,158,158)" rx="2" ry="2" />
<text  x="1007.23" y="303.5" >serv..</text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (19 samples, 0.04%; +0.03%)</title><rect x="417.7" y="389" width="0.5" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="420.72" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (7 samples, 0.01%; 0.00%)</title><rect x="654.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="657.34" y="479.5" ></text>
</g>
<g >
<title>auth::get_permissions (1,156 samples, 2.36%; +0.01%)</title><rect x="781.1" y="309" width="27.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="784.05" y="319.5" >a..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (9 samples, 0.02%; -0.00%)</title><rect x="665.9" y="485" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="668.86" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.01%; -0.00%)</title><rect x="406.9" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="409.88" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (5 samples, 0.01%; +0.01%)</title><rect x="815.2" y="357" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="818.24" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (14 samples, 0.03%; +0.00%)</title><rect x="1125.4" y="405" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1128.39" y="415.5" ></text>
</g>
<g >
<title>operator new (23 samples, 0.05%; +0.00%)</title><rect x="155.0" y="181" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="157.99" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (27 samples, 0.06%; +0.01%)</title><rect x="299.5" y="245" width="0.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="302.54" y="255.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (544 samples, 1.11%; -0.00%)</title><rect x="696.3" y="501" width="13.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="699.32" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (89 samples, 0.18%; +0.01%)</title><rect x="650.5" y="469" width="2.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="653.54" y="479.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (37 samples, 0.08%; +0.01%)</title><rect x="154.7" y="197" width="0.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="157.72" y="207.5" ></text>
</g>
<g >
<title>database::find_column_family (47 samples, 0.10%; 0.00%)</title><rect x="818.5" y="341" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.54" y="351.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (63 samples, 0.13%; -0.01%)</title><rect x="781.6" y="293" width="1.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="784.61" y="303.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (5 samples, 0.01%; -0.00%)</title><rect x="223.5" y="213" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="226.51" y="223.5" ></text>
</g>
<g >
<title>seastar::alien::instance::poll_queues (5 samples, 0.01%; +0.00%)</title><rect x="1177.9" y="485" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1180.88" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (18 samples, 0.04%; -0.02%)</title><rect x="1151.8" y="469" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1154.84" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (16 samples, 0.03%; 0.00%)</title><rect x="1102.8" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1105.82" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (18 samples, 0.04%; +0.01%)</title><rect x="996.0" y="325" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="998.99" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (81 samples, 0.17%; +0.02%)</title><rect x="1039.8" y="245" width="1.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1042.80" y="255.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (19 samples, 0.04%; +0.01%)</title><rect x="948.7" y="357" width="0.5" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="951.74" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (14 samples, 0.03%; +0.01%)</title><rect x="747.1" y="405" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="750.13" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (36 samples, 0.07%; -0.02%)</title><rect x="735.2" y="373" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="738.20" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (6 samples, 0.01%; 0.00%)</title><rect x="857.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.11" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (12 samples, 0.02%; 0.00%)</title><rect x="15.4" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.36" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (31 samples, 0.06%; +0.02%)</title><rect x="1169.9" y="469" width="0.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1172.95" y="479.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (23 samples, 0.05%; +0.03%)</title><rect x="536.3" y="405" width="0.6" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="539.33" y="415.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (11 samples, 0.02%; -0.02%)</title><rect x="1107.3" y="389" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="1110.26" y="399.5" ></text>
</g>
<g >
<title>operator delete (85 samples, 0.17%; +0.03%)</title><rect x="93.4" y="437" width="2.1" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="96.41" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (6 samples, 0.01%; +0.01%)</title><rect x="275.4" y="293" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="278.40" y="303.5" ></text>
</g>
<g >
<title>operator new (27 samples, 0.06%; -0.00%)</title><rect x="532.6" y="325" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="535.63" y="335.5" ></text>
</g>
<g >
<title>database::find_schema (256 samples, 0.52%; 0.00%)</title><rect x="818.1" y="373" width="6.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.06" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (11 samples, 0.02%; +0.01%)</title><rect x="416.6" y="373" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="419.64" y="383.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (542 samples, 1.10%; +0.01%)</title><rect x="272.5" y="341" width="13.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="275.54" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (5 samples, 0.01%; +0.01%)</title><rect x="663.0" y="469" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="665.97" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (78 samples, 0.16%; +0.02%)</title><rect x="809.4" y="325" width="1.8" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="812.35" y="335.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (44 samples, 0.09%; +0.01%)</title><rect x="459.6" y="293" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="462.63" y="303.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (6 samples, 0.01%; -0.01%)</title><rect x="654.9" y="453" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="657.94" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (15 samples, 0.03%; 0.00%)</title><rect x="810.9" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="813.87" y="303.5" ></text>
</g>
<g >
<title>[unknown] (6 samples, 0.01%; 0.00%)</title><rect x="10.0" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.02" y="623.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (9 samples, 0.02%; +0.01%)</title><rect x="1116.8" y="389" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1119.83" y="399.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (10 samples, 0.02%; +0.00%)</title><rect x="751.6" y="357" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="754.62" y="367.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (1,196 samples, 2.44%; -0.03%)</title><rect x="780.5" y="325" width="28.7" height="15.0" fill="rgb(179,179,255)" rx="2" ry="2" />
<text  x="783.45" y="335.5" >st..</text>
</g>
<g >
<title>abstract_type::bound_value_needs_to_be_reserialized (6 samples, 0.01%; +0.00%)</title><rect x="890.9" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="893.86" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (24,208 samples, 49.33%; -0.02%)</title><rect x="44.9" y="501" width="582.0" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="47.86" y="511.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>operator new (88 samples, 0.18%; -0.01%)</title><rect x="954.9" y="405" width="2.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="957.89" y="415.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (19 samples, 0.04%; 0.00%)</title><rect x="684.0" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.96" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (5 samples, 0.01%; 0.00%)</title><rect x="14.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.54" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; +0.01%)</title><rect x="927.4" y="373" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="930.44" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (17 samples, 0.03%; +0.01%)</title><rect x="1115.1" y="373" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1118.08" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (11 samples, 0.02%; -0.00%)</title><rect x="1033.9" y="213" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1036.86" y="223.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (16 samples, 0.03%; +0.01%)</title><rect x="743.6" y="277" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="746.64" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (45 samples, 0.09%; -0.00%)</title><rect x="841.1" y="389" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="844.07" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (6 samples, 0.01%; 0.00%)</title><rect x="1143.4" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.43" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (5 samples, 0.01%; +0.01%)</title><rect x="1146.7" y="501" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1149.74" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (44 samples, 0.09%; 0.00%)</title><rect x="818.6" y="325" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.61" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (153 samples, 0.31%; -0.01%)</title><rect x="757.8" y="357" width="3.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="760.80" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (107 samples, 0.22%; +0.00%)</title><rect x="197.1" y="117" width="2.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="200.11" y="127.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (1,279 samples, 2.61%; +0.01%)</title><rect x="880.8" y="405" width="30.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="883.79" y="415.5" >cq..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (8 samples, 0.02%; +0.01%)</title><rect x="535.6" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="538.61" y="415.5" ></text>
</g>
<g >
<title>std::variant&lt;fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (23 samples, 0.05%; 0.00%)</title><rect x="904.0" y="309" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="907.02" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (23 samples, 0.05%; -0.00%)</title><rect x="1071.3" y="293" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1074.27" y="303.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (123 samples, 0.25%; +0.14%)</title><rect x="1112.1" y="373" width="3.0" height="15.0" fill="rgb(255,62,62)" rx="2" ry="2" />
<text  x="1115.12" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (11 samples, 0.02%; -0.00%)</title><rect x="987.9" y="341" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="990.91" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (37 samples, 0.08%; +0.02%)</title><rect x="941.3" y="357" width="0.9" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="944.33" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (24 samples, 0.05%; -0.01%)</title><rect x="999.6" y="229" width="0.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1002.64" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; +0.01%)</title><rect x="1033.0" y="197" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1036.04" y="207.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (17 samples, 0.03%; +0.01%)</title><rect x="672.6" y="485" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="675.64" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (10 samples, 0.02%; -0.00%)</title><rect x="817.3" y="341" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="820.34" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (5 samples, 0.01%; 0.00%)</title><rect x="449.5" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="452.48" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (39 samples, 0.08%; +0.04%)</title><rect x="135.4" y="245" width="0.9" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="138.39" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%; +0.01%)</title><rect x="284.3" y="277" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="287.32" y="287.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (26 samples, 0.05%; +0.04%)</title><rect x="248.5" y="229" width="0.7" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="251.54" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (5 samples, 0.01%; +0.00%)</title><rect x="1038.8" y="245" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1041.81" y="255.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (12 samples, 0.02%; 0.00%)</title><rect x="21.4" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.45" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="586.5" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="589.49" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (15 samples, 0.03%; -0.02%)</title><rect x="597.5" y="357" width="0.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="600.48" y="367.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (8 samples, 0.02%; 0.00%)</title><rect x="811.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="814.42" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (10 samples, 0.02%; -0.01%)</title><rect x="318.7" y="165" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="321.73" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (13 samples, 0.03%; -0.00%)</title><rect x="702.6" y="421" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="705.62" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (29 samples, 0.06%; 0.00%)</title><rect x="956.3" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="959.29" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (7 samples, 0.01%; 0.00%)</title><rect x="806.8" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="809.81" y="271.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.02%; -0.00%)</title><rect x="932.3" y="341" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="935.29" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (30 samples, 0.06%; +0.03%)</title><rect x="639.1" y="485" width="0.7" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="642.12" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (91 samples, 0.19%; -0.01%)</title><rect x="130.7" y="261" width="2.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="133.68" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (15 samples, 0.03%; -0.02%)</title><rect x="67.4" y="389" width="0.4" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="70.42" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (442 samples, 0.90%; 0.00%)</title><rect x="1024.5" y="229" width="10.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1027.45" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (8 samples, 0.02%; +0.01%)</title><rect x="711.4" y="501" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="714.37" y="511.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (66 samples, 0.13%; +0.03%)</title><rect x="101.0" y="405" width="1.6" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="104.03" y="415.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (39 samples, 0.08%; +0.00%)</title><rect x="828.6" y="421" width="0.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="831.59" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (22 samples, 0.04%; -0.01%)</title><rect x="456.4" y="309" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="459.38" y="319.5" ></text>
</g>
<g >
<title>operator delete (20 samples, 0.04%; +0.01%)</title><rect x="34.4" y="453" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="37.41" y="463.5" ></text>
</g>
<g >
<title>operator new (31 samples, 0.06%; -0.01%)</title><rect x="502.1" y="197" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="505.07" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (15 samples, 0.03%; -0.00%)</title><rect x="1160.7" y="357" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1163.71" y="367.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (1,144 samples, 2.33%; +0.02%)</title><rect x="882.2" y="373" width="27.5" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="885.18" y="383.5" >_..</text>
</g>
<g >
<title>global_schema_ptr::get (11 samples, 0.02%; 0.00%)</title><rect x="1039.4" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1042.41" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (6 samples, 0.01%; -0.00%)</title><rect x="1175.7" y="501" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1178.72" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (5 samples, 0.01%; -0.01%)</title><rect x="140.8" y="261" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="143.80" y="271.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (13 samples, 0.03%; 0.00%)</title><rect x="860.7" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.66" y="335.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (16 samples, 0.03%; 0.00%)</title><rect x="814.8" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="817.79" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (10 samples, 0.02%; 0.00%)</title><rect x="350.5" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="353.49" y="175.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (85 samples, 0.17%; -0.00%)</title><rect x="744.4" y="277" width="2.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="747.36" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (6 samples, 0.01%; -0.01%)</title><rect x="253.2" y="213" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="256.23" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; 0.00%)</title><rect x="132.7" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="135.72" y="255.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (308 samples, 0.63%; -0.02%)</title><rect x="1081.8" y="261" width="7.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1084.75" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (7 samples, 0.01%; +0.00%)</title><rect x="852.3" y="437" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="855.27" y="447.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (19 samples, 0.04%; +0.01%)</title><rect x="1098.9" y="309" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1101.92" y="319.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (13 samples, 0.03%; +0.00%)</title><rect x="479.3" y="181" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="482.32" y="191.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (110 samples, 0.22%; +0.04%)</title><rect x="313.6" y="181" width="2.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="316.58" y="191.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (6 samples, 0.01%; 0.00%)</title><rect x="1142.2" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.15" y="223.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (387 samples, 0.79%; -0.02%)</title><rect x="1111.3" y="405" width="9.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1114.30" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (7 samples, 0.01%; +0.00%)</title><rect x="166.7" y="197" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="169.72" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (164 samples, 0.33%; 0.00%)</title><rect x="983.8" y="341" width="4.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="986.82" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,405 samples, 4.90%; +0.01%)</title><rect x="165.7" y="213" width="57.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="168.69" y="223.5" >logall..</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (15 samples, 0.03%; -0.02%)</title><rect x="260.9" y="277" width="0.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="263.85" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (16 samples, 0.03%; +0.01%)</title><rect x="900.8" y="325" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="903.77" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (7 samples, 0.01%; +0.01%)</title><rect x="635.4" y="469" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="638.42" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (36 samples, 0.07%; -0.03%)</title><rect x="759.1" y="325" width="0.8" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="762.05" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.04%; -0.00%)</title><rect x="619.7" y="373" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="622.74" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (244 samples, 0.50%; +0.01%)</title><rect x="609.9" y="437" width="5.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="612.93" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (59 samples, 0.12%; -0.03%)</title><rect x="124.5" y="293" width="1.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="127.50" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (18 samples, 0.04%; -0.01%)</title><rect x="1120.2" y="357" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1123.18" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (9 samples, 0.02%; +0.00%)</title><rect x="488.4" y="309" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="491.43" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (7 samples, 0.01%; -0.01%)</title><rect x="493.5" y="261" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="496.46" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.01%)</title><rect x="261.5" y="293" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="264.53" y="303.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.04%; +0.00%)</title><rect x="903.3" y="293" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="906.34" y="303.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (42 samples, 0.09%; +0.00%)</title><rect x="728.2" y="405" width="1.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="731.23" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (9 samples, 0.02%; -0.01%)</title><rect x="1124.1" y="421" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1127.14" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (13 samples, 0.03%; -0.00%)</title><rect x="927.6" y="389" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="930.58" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (149 samples, 0.30%; -0.02%)</title><rect x="820.4" y="325" width="3.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="823.41" y="335.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (1,612 samples, 3.28%; 0.00%)</title><rect x="773.1" y="357" width="38.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="776.10" y="367.5" >ser..</text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (37 samples, 0.08%; 0.00%)</title><rect x="1142.7" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.73" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (19 samples, 0.04%; -0.01%)</title><rect x="218.8" y="149" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="221.78" y="159.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (151 samples, 0.31%; 0.00%)</title><rect x="500.9" y="229" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="503.91" y="239.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (7 samples, 0.01%; 0.00%)</title><rect x="21.6" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.57" y="495.5" ></text>
</g>
<g >
<title>[[vdso]] (225 samples, 0.46%; -0.06%)</title><rect x="1180.5" y="613" width="5.4" height="15.0" fill="rgb(151,151,255)" rx="2" ry="2" />
<text  x="1183.53" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (15 samples, 0.03%; +0.00%)</title><rect x="689.8" y="453" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="692.81" y="463.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (36 samples, 0.07%; +0.00%)</title><rect x="189.2" y="69" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="192.18" y="79.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (18 samples, 0.04%; +0.02%)</title><rect x="569.7" y="309" width="0.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="572.70" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (100 samples, 0.20%; +0.03%)</title><rect x="505.3" y="245" width="2.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="508.34" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (8 samples, 0.02%; +0.02%)</title><rect x="496.3" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="499.34" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (16 samples, 0.03%; +0.02%)</title><rect x="142.5" y="277" width="0.4" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="145.51" y="287.5" ></text>
</g>
<g >
<title>operator new (22 samples, 0.04%; -0.00%)</title><rect x="619.7" y="389" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="622.74" y="399.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (5 samples, 0.01%; +0.01%)</title><rect x="504.5" y="229" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="507.54" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="300.2" y="245" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="303.19" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (226 samples, 0.46%; -0.01%)</title><rect x="216.0" y="181" width="5.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="218.99" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (11 samples, 0.02%; +0.00%)</title><rect x="262.7" y="309" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="265.73" y="319.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (39 samples, 0.08%; -0.01%)</title><rect x="837.6" y="357" width="0.9" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="840.56" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (10 samples, 0.02%; +0.00%)</title><rect x="1117.0" y="389" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1120.05" y="399.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (60 samples, 0.12%; -0.01%)</title><rect x="1155.2" y="453" width="1.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1158.21" y="463.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (20 samples, 0.04%; +0.03%)</title><rect x="125.2" y="261" width="0.5" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="128.24" y="271.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (8 samples, 0.02%; +0.01%)</title><rect x="897.5" y="245" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="900.45" y="255.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (79 samples, 0.16%; -0.01%)</title><rect x="644.8" y="453" width="1.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="647.84" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (8 samples, 0.02%; +0.00%)</title><rect x="22.9" y="517" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="25.94" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (48 samples, 0.10%; 0.00%)</title><rect x="15.7" y="309" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.65" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.01%)</title><rect x="530.2" y="293" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="533.22" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (22 samples, 0.04%; 0.00%)</title><rect x="1123.4" y="405" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.45" y="415.5" ></text>
</g>
<g >
<title>operator delete (18 samples, 0.04%; -0.00%)</title><rect x="37.4" y="453" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="40.36" y="463.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (36 samples, 0.07%; -0.03%)</title><rect x="726.8" y="293" width="0.9" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="729.81" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (6 samples, 0.01%; +0.01%)</title><rect x="23.1" y="517" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="26.13" y="527.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (62 samples, 0.13%; -0.01%)</title><rect x="307.5" y="229" width="1.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="310.52" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1,345 samples, 2.74%; +0.01%)</title><rect x="550.2" y="421" width="32.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="553.18" y="431.5" >st..</text>
</g>
<g >
<title>schema_registry::learn (5 samples, 0.01%; 0.00%)</title><rect x="44.3" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.31" y="479.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (10 samples, 0.02%; +0.01%)</title><rect x="284.8" y="325" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="287.80" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%; 0.00%)</title><rect x="279.2" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="282.22" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (31 samples, 0.06%; +0.01%)</title><rect x="450.9" y="309" width="0.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="453.93" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (10 samples, 0.02%; +0.00%)</title><rect x="18.3" y="309" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="21.34" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (10 samples, 0.02%; 0.00%)</title><rect x="694.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.09" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (839 samples, 1.71%; +0.03%)</title><rect x="550.9" y="373" width="20.1" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="553.85" y="383.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (9 samples, 0.02%; +0.00%)</title><rect x="704.4" y="421" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="707.40" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (17 samples, 0.03%; 0.00%)</title><rect x="860.6" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.62" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (9 samples, 0.02%; +0.01%)</title><rect x="753.6" y="405" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="756.64" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (104 samples, 0.21%; -0.00%)</title><rect x="441.9" y="309" width="2.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="444.91" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (82 samples, 0.17%; +0.02%)</title><rect x="777.8" y="309" width="2.0" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="780.78" y="319.5" ></text>
</g>
<g >
<title>query::querier_base::close (15 samples, 0.03%; 0.00%)</title><rect x="1176.6" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.58" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (11 samples, 0.02%; -0.00%)</title><rect x="442.6" y="293" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="445.63" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (394 samples, 0.80%; -0.00%)</title><rect x="151.5" y="245" width="9.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="154.55" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (5 samples, 0.01%; 0.00%)</title><rect x="761.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="764.75" y="415.5" ></text>
</g>
<g >
<title>query::result::result (20 samples, 0.04%; +0.02%)</title><rect x="606.4" y="421" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="609.44" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (428 samples, 0.87%; +0.03%)</title><rect x="698.2" y="469" width="10.3" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="701.22" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (15 samples, 0.03%; 0.00%)</title><rect x="740.1" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="743.11" y="367.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (19 samples, 0.04%; +0.00%)</title><rect x="703.8" y="421" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="706.80" y="431.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (261 samples, 0.53%; 0.00%)</title><rect x="15.0" y="501" width="6.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.95" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (5 samples, 0.01%; +0.01%)</title><rect x="236.4" y="229" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="239.45" y="239.5" ></text>
</g>
<g >
<title>operator new (76 samples, 0.15%; -0.00%)</title><rect x="985.4" y="293" width="1.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="988.43" y="303.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (19 samples, 0.04%; +0.03%)</title><rect x="883.8" y="341" width="0.4" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="886.77" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (13 samples, 0.03%; +0.00%)</title><rect x="586.6" y="405" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="589.61" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (12 samples, 0.02%; +0.00%)</title><rect x="78.8" y="453" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="81.84" y="463.5" ></text>
</g>
<g >
<title>std::type_info::operator== (6 samples, 0.01%; -0.00%)</title><rect x="1076.3" y="293" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1079.34" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (8 samples, 0.02%; +0.01%)</title><rect x="1077.4" y="293" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1080.42" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (1,012 samples, 2.06%; +0.02%)</title><rect x="911.5" y="405" width="24.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="914.54" y="415.5" >c..</text>
</g>
<g >
<title>compact_mutation_state&lt; (90 samples, 0.18%; -0.03%)</title><rect x="306.9" y="245" width="2.1" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="309.85" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (84 samples, 0.17%; +0.00%)</title><rect x="37.3" y="469" width="2.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="40.29" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (14 samples, 0.03%; +0.01%)</title><rect x="450.5" y="325" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="453.47" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (12 samples, 0.02%; +0.01%)</title><rect x="1164.5" y="453" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1167.54" y="463.5" ></text>
</g>
<g >
<title>operator new (88 samples, 0.18%; +0.01%)</title><rect x="962.9" y="373" width="2.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="965.93" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (81 samples, 0.17%; +0.01%)</title><rect x="542.8" y="357" width="1.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="545.77" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (33 samples, 0.07%; +0.00%)</title><rect x="858.5" y="501" width="0.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="861.48" y="511.5" ></text>
</g>
<g >
<title>compound_type&lt; (5 samples, 0.01%; +0.00%)</title><rect x="860.5" y="341" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="863.47" y="351.5" ></text>
</g>
<g >
<title>operator new (69 samples, 0.14%; 0.00%)</title><rect x="848.8" y="357" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="851.81" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (74 samples, 0.15%; 0.00%)</title><rect x="721.6" y="421" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="724.62" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.01%; 0.00%)</title><rect x="15.4" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.36" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (186 samples, 0.38%; -0.01%)</title><rect x="1171.2" y="469" width="4.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1174.20" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (23 samples, 0.05%; -0.02%)</title><rect x="565.1" y="277" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="568.11" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (27 samples, 0.06%; +0.04%)</title><rect x="712.0" y="501" width="0.6" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="714.97" y="511.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (80 samples, 0.16%; +0.00%)</title><rect x="616.3" y="437" width="1.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="619.28" y="447.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (11 samples, 0.02%; -0.01%)</title><rect x="1098.7" y="309" width="0.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1101.66" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (15 samples, 0.03%; +0.02%)</title><rect x="709.0" y="485" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="712.02" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="626.2" y="469" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="629.23" y="479.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (72 samples, 0.15%; +0.02%)</title><rect x="413.1" y="357" width="1.7" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="416.06" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (13 samples, 0.03%; -0.02%)</title><rect x="406.4" y="229" width="0.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="409.37" y="239.5" ></text>
</g>
<g >
<title>database::query (6 samples, 0.01%; -0.02%)</title><rect x="1007.6" y="277" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1010.62" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (30 samples, 0.06%; +0.01%)</title><rect x="632.8" y="469" width="0.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="635.77" y="479.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (662 samples, 1.35%; -0.01%)</title><rect x="787.4" y="261" width="15.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="790.35" y="271.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (43 samples, 0.09%; +0.02%)</title><rect x="243.7" y="181" width="1.0" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="246.69" y="191.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.02%; -0.02%)</title><rect x="916.3" y="341" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="919.26" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (11 samples, 0.02%; -0.01%)</title><rect x="323.4" y="197" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="326.39" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (24 samples, 0.05%; -0.02%)</title><rect x="1128.3" y="373" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1131.30" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (20 samples, 0.04%; -0.01%)</title><rect x="529.0" y="245" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="532.05" y="255.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::raw_value_view::validate (8 samples, 0.02%; +0.01%)</title><rect x="897.6" y="277" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="900.64" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (12 samples, 0.02%; 0.00%)</title><rect x="21.4" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.45" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (5 samples, 0.01%; -0.00%)</title><rect x="1032.9" y="197" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1035.92" y="207.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (13 samples, 0.03%; +0.01%)</title><rect x="1064.3" y="261" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1067.34" y="271.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (19 samples, 0.04%; -0.02%)</title><rect x="189.6" y="53" width="0.4" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="192.59" y="63.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (31 samples, 0.06%; -0.01%)</title><rect x="222.3" y="165" width="0.8" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="225.31" y="175.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (26 samples, 0.05%; 0.00%)</title><rect x="1142.1" y="421" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.10" y="431.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (23 samples, 0.05%; -0.01%)</title><rect x="739.9" y="373" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="742.91" y="383.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (13 samples, 0.03%; -0.00%)</title><rect x="684.0" y="309" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="687.03" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (22 samples, 0.04%; +0.01%)</title><rect x="1023.2" y="213" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1026.18" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (14 samples, 0.03%; -0.02%)</title><rect x="857.7" y="501" width="0.3" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="860.68" y="511.5" ></text>
</g>
<g >
<title>operator new (56 samples, 0.11%; 0.00%)</title><rect x="781.7" y="277" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="784.65" y="287.5" ></text>
</g>
<g >
<title>operator delete (46 samples, 0.09%; +0.04%)</title><rect x="439.3" y="277" width="1.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="442.29" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (22 samples, 0.04%; +0.01%)</title><rect x="782.5" y="245" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="785.47" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (13 samples, 0.03%; -0.01%)</title><rect x="533.3" y="341" width="0.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="536.35" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (10 samples, 0.02%; +0.01%)</title><rect x="718.6" y="469" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="721.61" y="479.5" ></text>
</g>
<g >
<title>query_state::query_state (228 samples, 0.46%; +0.01%)</title><rect x="593.3" y="437" width="5.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="596.32" y="447.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (5 samples, 0.01%; 0.00%)</title><rect x="21.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.45" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (51 samples, 0.10%; 0.00%)</title><rect x="851.0" y="421" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="853.95" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (51 samples, 0.10%; -0.00%)</title><rect x="585.7" y="421" width="1.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="588.69" y="431.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (8 samples, 0.02%; +0.01%)</title><rect x="837.2" y="341" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="840.20" y="351.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (596 samples, 1.21%; +0.01%)</title><rect x="788.9" y="229" width="14.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="791.89" y="239.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (37 samples, 0.08%; +0.01%)</title><rect x="928.7" y="357" width="0.9" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="931.66" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.01%; +0.00%)</title><rect x="298.1" y="293" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="301.08" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (59 samples, 0.12%; -0.01%)</title><rect x="901.2" y="325" width="1.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="904.18" y="335.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (999 samples, 2.04%; +0.10%)</title><rect x="456.9" y="325" width="24.1" height="15.0" fill="rgb(255,103,103)" rx="2" ry="2" />
<text  x="459.94" y="335.5" >d..</text>
</g>
<g >
<title>operator new (86 samples, 0.18%; -0.01%)</title><rect x="1117.9" y="357" width="2.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1120.94" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (16 samples, 0.03%; -0.01%)</title><rect x="609.0" y="437" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="612.02" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (15 samples, 0.03%; +0.02%)</title><rect x="625.6" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="628.56" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (17 samples, 0.03%; +0.02%)</title><rect x="710.7" y="501" width="0.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="713.72" y="511.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (334 samples, 0.68%; +0.01%)</title><rect x="472.7" y="229" width="8.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="475.73" y="239.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (32 samples, 0.07%; -0.02%)</title><rect x="896.7" y="245" width="0.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="899.68" y="255.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_805ba145d71de739aa5a49a7dfdfc7655f960912] (7 samples, 0.01%; +0.01%)</title><rect x="473.3" y="213" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="476.26" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (31 samples, 0.06%; +0.02%)</title><rect x="601.9" y="437" width="0.7" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="604.85" y="447.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (9 samples, 0.02%; -0.01%)</title><rect x="978.1" y="341" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="981.10" y="351.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (17 samples, 0.03%; +0.01%)</title><rect x="318.2" y="165" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="321.15" y="175.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (27 samples, 0.06%; +0.03%)</title><rect x="1174.5" y="421" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1177.49" y="431.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (26 samples, 0.05%; +0.03%)</title><rect x="545.1" y="389" width="0.6" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="548.06" y="399.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (39 samples, 0.08%; +0.07%)</title><rect x="70.4" y="405" width="1.0" height="15.0" fill="rgb(255,132,132)" rx="2" ry="2" />
<text  x="73.42" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (7 samples, 0.01%; -0.01%)</title><rect x="811.1" y="277" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="814.06" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (10 samples, 0.02%; +0.00%)</title><rect x="676.2" y="485" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="679.17" y="495.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (27 samples, 0.06%; +0.00%)</title><rect x="1121.4" y="389" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1124.45" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.01%)</title><rect x="668.7" y="437" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="671.74" y="447.5" ></text>
</g>
<g >
<title>cql3::to_managed_bytes_opt (5 samples, 0.01%; +0.00%)</title><rect x="910.0" y="373" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="912.96" y="383.5" ></text>
</g>
<g >
<title>operator new (40 samples, 0.08%; -0.01%)</title><rect x="1160.1" y="389" width="1.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1163.11" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (13 samples, 0.03%; +0.02%)</title><rect x="418.5" y="405" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="421.54" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (15 samples, 0.03%; -0.00%)</title><rect x="942.7" y="405" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="945.73" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (34 samples, 0.07%; +0.02%)</title><rect x="886.2" y="277" width="0.9" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="889.25" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="658.0" y="485" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="660.97" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (24 samples, 0.05%; -0.02%)</title><rect x="1106.2" y="405" width="0.6" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="1109.21" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (44 samples, 0.09%; -0.01%)</title><rect x="532.3" y="341" width="1.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="535.29" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (11 samples, 0.02%; -0.01%)</title><rect x="808.6" y="277" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="811.58" y="287.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (21 samples, 0.04%; 0.00%)</title><rect x="1143.1" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.07" y="287.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (17 samples, 0.03%; -0.00%)</title><rect x="759.9" y="325" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="762.92" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (74 samples, 0.15%; -0.04%)</title><rect x="988.9" y="309" width="1.8" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="991.94" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (10 samples, 0.02%; +0.01%)</title><rect x="1131.0" y="373" width="0.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1134.04" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (9 samples, 0.02%; -0.02%)</title><rect x="1026.8" y="165" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="1029.76" y="175.5" ></text>
</g>
<g >
<title>reader_permit::consume (7 samples, 0.01%; -0.01%)</title><rect x="503.1" y="165" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="506.10" y="175.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (25 samples, 0.05%; -0.01%)</title><rect x="1029.9" y="149" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1032.91" y="159.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (9 samples, 0.02%; +0.00%)</title><rect x="333.5" y="181" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="336.52" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (34 samples, 0.07%; +0.01%)</title><rect x="258.1" y="277" width="0.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="261.09" y="287.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (74 samples, 0.15%; -0.01%)</title><rect x="539.0" y="373" width="1.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="542.02" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (26 samples, 0.05%; -0.00%)</title><rect x="1178.2" y="501" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1181.17" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (120 samples, 0.24%; -0.01%)</title><rect x="835.8" y="389" width="2.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="838.78" y="399.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (12 samples, 0.02%; +0.00%)</title><rect x="308.7" y="213" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="311.73" y="223.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (12 samples, 0.02%; 0.00%)</title><rect x="19.4" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.43" y="351.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (7 samples, 0.01%; -0.01%)</title><rect x="249.9" y="229" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="252.89" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (135 samples, 0.28%; -0.02%)</title><rect x="812.0" y="357" width="3.2" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="815.00" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (12 samples, 0.02%; 0.00%)</title><rect x="21.4" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.45" y="543.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (17 samples, 0.03%; -0.01%)</title><rect x="814.3" y="293" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="817.28" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (6 samples, 0.01%; +0.00%)</title><rect x="836.9" y="357" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="839.86" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (14 samples, 0.03%; 0.00%)</title><rect x="1030.2" y="133" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1033.18" y="143.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (7 samples, 0.01%; 0.00%)</title><rect x="605.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="608.29" y="431.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (146 samples, 0.30%; +0.00%)</title><rect x="391.5" y="245" width="3.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="394.49" y="255.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (92 samples, 0.19%; -0.01%)</title><rect x="1173.2" y="437" width="2.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1176.17" y="447.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (277 samples, 0.56%; -0.02%)</title><rect x="740.5" y="373" width="6.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="743.47" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (5 samples, 0.01%; -0.00%)</title><rect x="737.5" y="309" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="740.53" y="319.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (26 samples, 0.05%; 0.00%)</title><rect x="1142.1" y="485" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.10" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.01%; 0.00%)</title><rect x="807.2" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="810.21" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (56 samples, 0.11%; -0.02%)</title><rect x="781.7" y="261" width="1.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="784.65" y="271.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (457 samples, 0.93%; -0.02%)</title><rect x="63.6" y="437" width="11.0" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="66.57" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%; -0.01%)</title><rect x="58.0" y="437" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="61.04" y="447.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (52 samples, 0.11%; -0.00%)</title><rect x="776.0" y="325" width="1.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="779.03" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (16 samples, 0.03%; -0.01%)</title><rect x="30.9" y="469" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="33.94" y="479.5" ></text>
</g>
<g >
<title>seastar::gate::enter (9 samples, 0.02%; 0.00%)</title><rect x="1039.2" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1042.19" y="239.5" ></text>
</g>
<g >
<title>reader_permit::consume (9 samples, 0.02%; -0.01%)</title><rect x="214.4" y="133" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="217.38" y="143.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (6 samples, 0.01%; -0.01%)</title><rect x="719.9" y="453" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="722.86" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; -0.00%)</title><rect x="693.2" y="485" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="696.24" y="495.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (17 samples, 0.03%; -0.03%)</title><rect x="235.0" y="245" width="0.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="237.96" y="255.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (108 samples, 0.22%; -0.07%)</title><rect x="59.7" y="453" width="2.6" height="15.0" fill="rgb(132,132,255)" rx="2" ry="2" />
<text  x="62.68" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (5 samples, 0.01%; +0.00%)</title><rect x="387.2" y="165" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="390.21" y="175.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (10 samples, 0.02%; 0.00%)</title><rect x="1032.0" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1034.96" y="175.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::~node_head (8 samples, 0.02%; +0.01%)</title><rect x="402.6" y="213" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="405.64" y="223.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (14 samples, 0.03%; +0.02%)</title><rect x="150.2" y="245" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="153.18" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (66 samples, 0.13%; -0.00%)</title><rect x="824.7" y="325" width="1.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="827.67" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (7 samples, 0.01%; -0.01%)</title><rect x="806.3" y="213" width="0.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="809.25" y="223.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (13 samples, 0.03%; +0.00%)</title><rect x="888.7" y="293" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="891.72" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6 samples, 0.01%; +0.00%)</title><rect x="768.5" y="357" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="771.53" y="367.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (491 samples, 1.00%; -0.01%)</title><rect x="469.1" y="293" width="11.8" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="472.08" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (126 samples, 0.26%; -0.00%)</title><rect x="403.7" y="261" width="3.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="406.65" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (5 samples, 0.01%; -0.01%)</title><rect x="736.7" y="373" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="739.74" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (17 samples, 0.03%; -0.00%)</title><rect x="851.8" y="405" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="854.77" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (95 samples, 0.19%; +0.01%)</title><rect x="744.1" y="293" width="2.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="747.12" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (55 samples, 0.11%; -0.01%)</title><rect x="1161.1" y="453" width="1.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1164.10" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (6 samples, 0.01%; -0.01%)</title><rect x="39.2" y="453" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="42.17" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (7 samples, 0.01%; +0.01%)</title><rect x="265.1" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="268.09" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.00%)</title><rect x="37.7" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="40.65" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (7 samples, 0.01%; -0.02%)</title><rect x="603.2" y="437" width="0.2" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="606.20" y="447.5" ></text>
</g>
<g >
<title>operator delete (42 samples, 0.09%; +0.04%)</title><rect x="611.0" y="421" width="1.0" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="614.04" y="431.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (12 samples, 0.02%; -0.04%)</title><rect x="387.9" y="213" width="0.2" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="390.86" y="223.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (10 samples, 0.02%; +0.01%)</title><rect x="413.8" y="341" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="416.75" y="351.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (91 samples, 0.19%; -0.00%)</title><rect x="365.9" y="213" width="2.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="368.86" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="971.6" y="357" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="974.63" y="367.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (41 samples, 0.08%; +0.01%)</title><rect x="625.9" y="485" width="1.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="628.94" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; +0.00%)</title><rect x="1149.3" y="485" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1152.34" y="495.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (6 samples, 0.01%; +0.01%)</title><rect x="932.5" y="341" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="935.49" y="351.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (175 samples, 0.36%; +0.01%)</title><rect x="929.7" y="389" width="4.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="932.72" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (7 samples, 0.01%; +0.01%)</title><rect x="98.4" y="405" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="101.41" y="415.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (28 samples, 0.06%; -0.03%)</title><rect x="36.5" y="405" width="0.7" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="39.50" y="415.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (19 samples, 0.04%; +0.00%)</title><rect x="559.7" y="293" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="562.68" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.00%)</title><rect x="37.0" y="389" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="40.03" y="399.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (15 samples, 0.03%; -0.01%)</title><rect x="1114.7" y="357" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1117.72" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (44 samples, 0.09%; +0.01%)</title><rect x="216.4" y="165" width="1.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="219.37" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (577 samples, 1.18%; +0.00%)</title><rect x="236.2" y="245" width="13.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="239.21" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (10 samples, 0.02%; +0.01%)</title><rect x="604.1" y="437" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="607.06" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (40 samples, 0.08%; -0.01%)</title><rect x="821.5" y="293" width="1.0" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="824.52" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (37 samples, 0.08%; -0.00%)</title><rect x="164.2" y="229" width="0.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="167.24" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (7 samples, 0.01%; 0.00%)</title><rect x="1047.5" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1050.54" y="287.5" ></text>
</g>
<g >
<title>operator delete (21 samples, 0.04%; -0.01%)</title><rect x="585.9" y="405" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="588.91" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (20 samples, 0.04%; +0.02%)</title><rect x="583.5" y="405" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="586.53" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (5 samples, 0.01%; -0.00%)</title><rect x="995.8" y="325" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="998.77" y="335.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (9 samples, 0.02%; +0.02%)</title><rect x="954.1" y="341" width="0.2" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="957.08" y="351.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (8 samples, 0.02%; +0.01%)</title><rect x="59.1" y="453" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="62.10" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (93 samples, 0.19%; -0.00%)</title><rect x="613.1" y="405" width="2.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="616.08" y="415.5" ></text>
</g>
<g >
<title>all (49,076 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (7 samples, 0.01%; 0.00%)</title><rect x="1142.1" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.13" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (24 samples, 0.05%; +0.03%)</title><rect x="315.7" y="165" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="318.65" y="175.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (7 samples, 0.01%; -0.02%)</title><rect x="629.4" y="469" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="632.38" y="479.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (111 samples, 0.23%; -0.01%)</title><rect x="702.1" y="437" width="2.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="705.09" y="447.5" ></text>
</g>
<g >
<title>std::type_info::operator== (18 samples, 0.04%; +0.02%)</title><rect x="1075.3" y="277" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1078.26" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.01%; +0.00%)</title><rect x="748.8" y="389" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="751.79" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (29 samples, 0.06%; -0.06%)</title><rect x="492.3" y="277" width="0.7" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="495.31" y="287.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (26 samples, 0.05%; +0.00%)</title><rect x="743.4" y="309" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="746.42" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (16 samples, 0.03%; -0.00%)</title><rect x="61.2" y="421" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="64.24" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; -0.02%)</title><rect x="510.8" y="325" width="0.1" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="513.80" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (170 samples, 0.35%; +0.00%)</title><rect x="586.9" y="421" width="4.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="589.92" y="431.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (7 samples, 0.01%; 0.00%)</title><rect x="388.4" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="391.39" y="191.5" ></text>
</g>
<g >
<title>operator new (40 samples, 0.08%; +0.00%)</title><rect x="941.3" y="373" width="0.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="944.26" y="383.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (11 samples, 0.02%; -0.01%)</title><rect x="517.0" y="341" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="520.05" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (16 samples, 0.03%; -0.03%)</title><rect x="69.3" y="373" width="0.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="72.27" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (11 samples, 0.02%; +0.00%)</title><rect x="835.5" y="389" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="838.49" y="399.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (26 samples, 0.05%; 0.00%)</title><rect x="1142.1" y="405" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.10" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (23 samples, 0.05%; +0.01%)</title><rect x="663.5" y="469" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="666.45" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (13 samples, 0.03%; -0.00%)</title><rect x="684.0" y="341" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="687.03" y="351.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (30 samples, 0.06%; +0.00%)</title><rect x="1037.7" y="213" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1040.70" y="223.5" ></text>
</g>
<g >
<title>operator delete (43 samples, 0.09%; -0.06%)</title><rect x="562.0" y="293" width="1.1" height="15.0" fill="rgb(149,149,255)" rx="2" ry="2" />
<text  x="565.03" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (31 samples, 0.06%; -0.00%)</title><rect x="709.7" y="501" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="712.69" y="511.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (223 samples, 0.45%; -0.02%)</title><rect x="687.6" y="469" width="5.4" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="690.62" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (24 samples, 0.05%; +0.00%)</title><rect x="419.8" y="421" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="422.81" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (8 samples, 0.02%; +0.00%)</title><rect x="662.4" y="485" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="665.37" y="495.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.01%; -0.02%)</title><rect x="488.7" y="309" width="0.1" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="491.65" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (6 samples, 0.01%; +0.01%)</title><rect x="282.4" y="309" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="285.40" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.01%; 0.00%)</title><rect x="768.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="771.05" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::future (8 samples, 0.02%; -0.07%)</title><rect x="979.7" y="357" width="0.2" height="15.0" fill="rgb(136,136,255)" rx="2" ry="2" />
<text  x="982.68" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (82 samples, 0.17%; 0.00%)</title><rect x="694.3" y="485" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.33" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (23 samples, 0.05%; -0.04%)</title><rect x="574.6" y="357" width="0.5" height="15.0" fill="rgb(164,164,255)" rx="2" ry="2" />
<text  x="577.59" y="367.5" ></text>
</g>
<g >
<title>operator new (16 samples, 0.03%; -0.00%)</title><rect x="449.7" y="293" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="452.67" y="303.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (6 samples, 0.01%; -0.01%)</title><rect x="801.0" y="117" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="804.01" y="127.5" ></text>
</g>
<g >
<title>schema_registry::get (183 samples, 0.37%; -0.00%)</title><rect x="974.1" y="357" width="4.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="977.08" y="367.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (87 samples, 0.18%; +0.01%)</title><rect x="716.2" y="437" width="2.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="719.16" y="447.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (154 samples, 0.31%; -0.01%)</title><rect x="541.0" y="389" width="3.7" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="544.02" y="399.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (88 samples, 0.18%; +0.02%)</title><rect x="498.7" y="229" width="2.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="501.73" y="239.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (5 samples, 0.01%; -0.00%)</title><rect x="832.7" y="437" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="835.70" y="447.5" ></text>
</g>
<g >
<title>operator new (26 samples, 0.05%; +0.00%)</title><rect x="649.8" y="453" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="652.84" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (7 samples, 0.01%; -0.09%)</title><rect x="248.3" y="229" width="0.2" height="15.0" fill="rgb(112,112,255)" rx="2" ry="2" />
<text  x="251.33" y="239.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (6 samples, 0.01%; +0.00%)</title><rect x="879.1" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="882.13" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (11 samples, 0.02%; -0.02%)</title><rect x="322.6" y="197" width="0.3" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="325.62" y="207.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (9 samples, 0.02%; +0.01%)</title><rect x="390.1" y="229" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="393.14" y="239.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (14 samples, 0.03%; +0.00%)</title><rect x="504.7" y="229" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="507.66" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (25 samples, 0.05%; +0.01%)</title><rect x="973.5" y="325" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="976.48" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (99 samples, 0.20%; +0.01%)</title><rect x="157.0" y="197" width="2.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="160.01" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (19 samples, 0.04%; -0.01%)</title><rect x="36.0" y="421" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="38.97" y="431.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (173 samples, 0.35%; -0.01%)</title><rect x="445.5" y="293" width="4.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="448.49" y="303.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (12 samples, 0.02%; +0.02%)</title><rect x="557.1" y="309" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="560.10" y="319.5" ></text>
</g>
<g >
<title>__dynamic_cast (17 samples, 0.03%; -0.03%)</title><rect x="876.1" y="421" width="0.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="879.05" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (91 samples, 0.19%; 0.00%)</title><rect x="298.3" y="293" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="301.29" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (61 samples, 0.12%; +0.01%)</title><rect x="755.5" y="357" width="1.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="758.54" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (6 samples, 0.01%; -0.01%)</title><rect x="1146.5" y="501" width="0.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1149.48" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1,890 samples, 3.85%; +0.04%)</title><rect x="170.1" y="181" width="45.4" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="173.09" y="191.5" >muta..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (24 samples, 0.05%; -0.03%)</title><rect x="329.0" y="181" width="0.6" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="332.02" y="191.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (67 samples, 0.14%; -0.02%)</title><rect x="599.3" y="437" width="1.6" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="602.33" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (6,143 samples, 12.52%; -0.01%)</title><rect x="118.2" y="341" width="147.7" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="121.20" y="351.5" >mutation_fragment_..</text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (13 samples, 0.03%; -0.01%)</title><rect x="417.4" y="373" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="420.38" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (11 samples, 0.02%; 0.00%)</title><rect x="78.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.57" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (53 samples, 0.11%; 0.00%)</title><rect x="18.1" y="325" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.13" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (350 samples, 0.71%; -0.00%)</title><rect x="793.9" y="197" width="8.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="796.87" y="207.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (22 samples, 0.04%; -0.00%)</title><rect x="814.7" y="293" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="817.69" y="303.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (48,127 samples, 98.07%; 0.00%)</title><rect x="21.8" y="565" width="1157.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.78" y="575.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (209 samples, 0.43%; -0.00%)</title><rect x="1027.4" y="181" width="5.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1030.41" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="1146.6" y="501" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1149.62" y="511.5" ></text>
</g>
<g >
<title>operator new (48 samples, 0.10%; +0.00%)</title><rect x="839.0" y="421" width="1.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="841.98" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (22 samples, 0.04%; -0.00%)</title><rect x="1041.2" y="229" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1044.21" y="239.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_805ba145d71de739aa5a49a7dfdfc7655f960912] (5 samples, 0.01%; +0.01%)</title><rect x="344.7" y="165" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="347.75" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (554 samples, 1.13%; -0.00%)</title><rect x="557.0" y="325" width="13.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="560.03" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (15 samples, 0.03%; -0.01%)</title><rect x="647.8" y="405" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="650.85" y="415.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,466 samples, 9.10%; +0.04%)</title><rect x="300.8" y="293" width="107.4" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="303.77" y="303.5" >seastar::repe..</text>
</g>
<g >
<title>mutation_source::mutation_source (95 samples, 0.19%; -0.00%)</title><rect x="619.3" y="421" width="2.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="622.26" y="431.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (15 samples, 0.03%; +0.01%)</title><rect x="507.7" y="245" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="510.74" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (83 samples, 0.17%; -0.01%)</title><rect x="659.1" y="485" width="2.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="662.15" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (103 samples, 0.21%; -0.00%)</title><rect x="194.6" y="117" width="2.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="197.64" y="127.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (87 samples, 0.18%; 0.00%)</title><rect x="824.2" y="373" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="827.21" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (6 samples, 0.01%; 0.00%)</title><rect x="709.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="712.43" y="511.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (19 samples, 0.04%; -0.00%)</title><rect x="801.3" y="101" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="804.28" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (5 samples, 0.01%; +0.01%)</title><rect x="911.0" y="373" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="914.01" y="383.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (9 samples, 0.02%; +0.01%)</title><rect x="440.4" y="277" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="443.39" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (9 samples, 0.02%; 0.00%)</title><rect x="172.5" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="175.47" y="143.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (14 samples, 0.03%; -0.02%)</title><rect x="801.3" y="85" width="0.4" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="804.32" y="95.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.01%; +0.01%)</title><rect x="1158.8" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1161.81" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (5 samples, 0.01%; +0.00%)</title><rect x="877.4" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="880.42" y="431.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (117 samples, 0.24%; -0.00%)</title><rect x="1172.9" y="453" width="2.8" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1175.86" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (121 samples, 0.25%; -0.01%)</title><rect x="997.8" y="293" width="2.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1000.84" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (6 samples, 0.01%; +0.01%)</title><rect x="690.0" y="437" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="693.02" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (45 samples, 0.09%; -0.01%)</title><rect x="565.9" y="277" width="1.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="568.86" y="287.5" ></text>
</g>
<g >
<title>seastar::app_template::run (48,127 samples, 98.07%; 0.00%)</title><rect x="21.8" y="581" width="1157.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.78" y="591.5" >seastar::app_template::run</text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (93 samples, 0.19%; +0.00%)</title><rect x="763.8" y="389" width="2.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="766.84" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (21 samples, 0.04%; -0.00%)</title><rect x="155.0" y="165" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="158.04" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (12 samples, 0.02%; +0.01%)</title><rect x="300.5" y="293" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="303.48" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (47 samples, 0.10%; +0.02%)</title><rect x="1149.9" y="485" width="1.2" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="1152.94" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (14 samples, 0.03%; +0.02%)</title><rect x="447.3" y="261" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="450.32" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (6 samples, 0.01%; +0.00%)</title><rect x="1076.2" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1079.20" y="287.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (12 samples, 0.02%; +0.00%)</title><rect x="1156.2" y="405" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1159.19" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; -0.00%)</title><rect x="171.5" y="133" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="174.48" y="143.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (9 samples, 0.02%; 0.00%)</title><rect x="420.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="423.17" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (6 samples, 0.01%; +0.01%)</title><rect x="98.7" y="405" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="101.70" y="415.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (55 samples, 0.11%; -0.03%)</title><rect x="855.3" y="453" width="1.3" height="15.0" fill="rgb(181,181,255)" rx="2" ry="2" />
<text  x="858.33" y="463.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (6 samples, 0.01%; -0.01%)</title><rect x="918.5" y="341" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="921.54" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (50 samples, 0.10%; -0.00%)</title><rect x="737.4" y="325" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="740.44" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (7 samples, 0.01%; +0.00%)</title><rect x="336.3" y="181" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="339.26" y="191.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (230 samples, 0.47%; -0.01%)</title><rect x="1027.2" y="197" width="5.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1030.20" y="207.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (5 samples, 0.01%; +0.01%)</title><rect x="229.7" y="197" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="232.72" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (70 samples, 0.14%; -0.00%)</title><rect x="246.6" y="213" width="1.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="249.64" y="223.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (39 samples, 0.08%; 0.00%)</title><rect x="860.2" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.16" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (22 samples, 0.04%; +0.02%)</title><rect x="865.3" y="453" width="0.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="868.26" y="463.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (32 samples, 0.07%; +0.01%)</title><rect x="127.6" y="277" width="0.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="130.65" y="287.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (275 samples, 0.56%; 0.00%)</title><rect x="14.7" y="565" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.74" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (5 samples, 0.01%; 0.00%)</title><rect x="957.0" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="960.01" y="415.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (211 samples, 0.43%; 0.00%)</title><rect x="15.1" y="469" width="5.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.12" y="479.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (598 samples, 1.22%; +0.01%)</title><rect x="1081.2" y="293" width="14.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1084.25" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (16 samples, 0.03%; +0.01%)</title><rect x="400.7" y="197" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="403.70" y="207.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (58 samples, 0.12%; +0.11%)</title><rect x="557.4" y="309" width="1.4" height="15.0" fill="rgb(255,95,95)" rx="2" ry="2" />
<text  x="560.39" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (47 samples, 0.10%; +0.01%)</title><rect x="953.7" y="373" width="1.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="956.72" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (13 samples, 0.03%; +0.01%)</title><rect x="514.0" y="309" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="517.02" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (338 samples, 0.69%; +0.02%)</title><rect x="254.0" y="309" width="8.1" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="257.00" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (11 samples, 0.02%; -0.00%)</title><rect x="1153.9" y="485" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1156.93" y="495.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (18 samples, 0.04%; +0.01%)</title><rect x="1052.4" y="277" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1055.44" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (5 samples, 0.01%; 0.00%)</title><rect x="272.4" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="275.42" y="351.5" ></text>
</g>
<g >
<title>operator delete (27 samples, 0.06%; +0.01%)</title><rect x="587.1" y="405" width="0.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="590.11" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (123 samples, 0.25%; +0.04%)</title><rect x="226.4" y="181" width="3.0" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="229.40" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; -0.00%)</title><rect x="389.1" y="181" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="392.06" y="191.5" ></text>
</g>
<g >
<title>database::query (155 samples, 0.32%; -0.03%)</title><rect x="40.4" y="501" width="3.8" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="43.44" y="511.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (5 samples, 0.01%; -0.00%)</title><rect x="1052.8" y="261" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1055.75" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (8 samples, 0.02%; +0.00%)</title><rect x="858.0" y="501" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="861.02" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (54 samples, 0.11%; +0.01%)</title><rect x="533.9" y="389" width="1.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="536.85" y="399.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%; 0.00%)</title><rect x="542.1" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="545.08" y="367.5" ></text>
</g>
<g >
<title>query::querier&lt; (20 samples, 0.04%; +0.00%)</title><rect x="58.4" y="453" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="61.35" y="463.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (293 samples, 0.60%; +0.00%)</title><rect x="96.5" y="437" width="7.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="99.49" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (15 samples, 0.03%; +0.02%)</title><rect x="62.7" y="437" width="0.3" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="65.68" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (7 samples, 0.01%; +0.00%)</title><rect x="22.1" y="517" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="25.14" y="527.5" ></text>
</g>
<g >
<title>operator new (75 samples, 0.15%; -0.01%)</title><rect x="1021.9" y="245" width="1.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1024.91" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (34 samples, 0.07%; +0.01%)</title><rect x="765.0" y="341" width="0.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="767.99" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (25 samples, 0.05%; +0.02%)</title><rect x="122.7" y="309" width="0.6" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="125.74" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (7 samples, 0.01%; -0.00%)</title><rect x="1175.2" y="421" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1178.21" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (7 samples, 0.01%; +0.01%)</title><rect x="151.3" y="245" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="154.33" y="255.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (16 samples, 0.03%; -0.00%)</title><rect x="1066.7" y="341" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1069.68" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (36 samples, 0.07%; +0.02%)</title><rect x="778.6" y="293" width="0.9" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="781.60" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (20 samples, 0.04%; -0.01%)</title><rect x="1157.2" y="421" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1160.23" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (769 samples, 1.57%; +0.00%)</title><rect x="369.4" y="197" width="18.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="372.37" y="207.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_4findERKNS2_10expressionENS2_6oper_tEEUlRKNS2_15binary_operatorEE_EEPS9_S6_T_EUlSA_E_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_8constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_11conjunctionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_12column_valueEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_5tokenEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13function_callEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4castEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_15field_selectionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4nullEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13bind_variableEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_16untyped_constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_17tuple_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_22collection_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSJ_S8_SN_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_SF_S1R_S1V_S1Z_EEEENSt13invoke_resultISD_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSD_DpOS29_ (8 samples, 0.02%; +0.01%)</title><rect x="954.7" y="325" width="0.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="957.65" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (7 samples, 0.01%; +0.01%)</title><rect x="251.3" y="213" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="254.31" y="223.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (17 samples, 0.03%; -0.02%)</title><rect x="552.7" y="341" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="555.68" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (35 samples, 0.07%; -0.00%)</title><rect x="795.0" y="149" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="798.00" y="159.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (14 samples, 0.03%; 0.00%)</title><rect x="860.6" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.64" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (15 samples, 0.03%; +0.01%)</title><rect x="287.7" y="357" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="290.69" y="367.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (214 samples, 0.44%; -0.00%)</title><rect x="445.0" y="309" width="5.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="447.96" y="319.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.04%; -0.00%)</title><rect x="487.7" y="293" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="490.71" y="303.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (454 samples, 0.93%; +0.01%)</title><rect x="736.2" y="389" width="10.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="739.21" y="399.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (24 samples, 0.05%; +0.01%)</title><rect x="879.3" y="405" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="882.28" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (80 samples, 0.16%; -0.01%)</title><rect x="824.4" y="341" width="1.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="827.38" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (32 samples, 0.07%; +0.03%)</title><rect x="1046.8" y="245" width="0.7" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="1049.77" y="255.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (15 samples, 0.03%; -0.00%)</title><rect x="389.8" y="229" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="392.76" y="239.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (136 samples, 0.28%; 0.00%)</title><rect x="34.0" y="469" width="3.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.02" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (39 samples, 0.08%; +0.00%)</title><rect x="285.9" y="357" width="0.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="288.91" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (6 samples, 0.01%; -0.00%)</title><rect x="1035.5" y="229" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1038.54" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (49 samples, 0.10%; +0.01%)</title><rect x="401.3" y="213" width="1.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="404.35" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (22 samples, 0.04%; +0.01%)</title><rect x="441.1" y="277" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="444.14" y="287.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (1,239 samples, 2.52%; +0.05%)</title><rect x="881.3" y="389" width="29.8" height="15.0" fill="rgb(255,158,158)" rx="2" ry="2" />
<text  x="884.34" y="399.5" >_Z..</text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="905.9" y="357" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="908.89" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (11 samples, 0.02%; +0.01%)</title><rect x="43.1" y="485" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="46.13" y="495.5" ></text>
</g>
<g >
<title>make_combined_reader (916 samples, 1.87%; -0.04%)</title><rect x="429.7" y="341" width="22.1" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="432.74" y="351.5" >m..</text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (199 samples, 0.41%; -0.02%)</title><rect x="921.8" y="357" width="4.8" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="924.83" y="367.5" ></text>
</g>
<g >
<title>row_cache::make_reader (548 samples, 1.12%; -0.00%)</title><rect x="517.6" y="341" width="13.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="520.65" y="351.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (72 samples, 0.15%; -0.02%)</title><rect x="1120.9" y="405" width="1.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1123.92" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (7 samples, 0.01%; 0.00%)</title><rect x="145.1" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.13" y="271.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (17 samples, 0.03%; -0.00%)</title><rect x="1096.9" y="261" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1099.95" y="271.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (44 samples, 0.09%; +0.01%)</title><rect x="275.5" y="293" width="1.1" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="278.55" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (16 samples, 0.03%; -0.05%)</title><rect x="491.0" y="277" width="0.4" height="15.0" fill="rgb(155,155,255)" rx="2" ry="2" />
<text  x="493.98" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (21 samples, 0.04%; -0.01%)</title><rect x="670.0" y="453" width="0.5" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="673.02" y="463.5" ></text>
</g>
<g >
<title>operator new (53 samples, 0.11%; -0.00%)</title><rect x="850.9" y="437" width="1.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="853.90" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (67 samples, 0.14%; -0.02%)</title><rect x="483.2" y="325" width="1.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="486.17" y="335.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (31 samples, 0.06%; -0.04%)</title><rect x="231.7" y="229" width="0.8" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="234.71" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (12 samples, 0.02%; +0.01%)</title><rect x="540.2" y="341" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="543.25" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::push_back (6 samples, 0.01%; +0.00%)</title><rect x="1156.8" y="453" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1159.77" y="463.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (12 samples, 0.02%; +0.02%)</title><rect x="612.7" y="405" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="615.67" y="415.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (473 samples, 0.96%; 0.00%)</title><rect x="697.3" y="485" width="11.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.31" y="495.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (170 samples, 0.35%; 0.00%)</title><rect x="190.3" y="69" width="4.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="193.26" y="79.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (46 samples, 0.09%; -0.04%)</title><rect x="512.1" y="293" width="1.1" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="515.14" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="586.3" y="389" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="589.27" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (6,390 samples, 13.02%; -0.02%)</title><rect x="116.8" y="357" width="153.6" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="119.78" y="367.5" >mutation_fragment_m..</text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (16 samples, 0.03%; +0.01%)</title><rect x="622.7" y="485" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="625.72" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="628.7" y="485" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="631.71" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (7 samples, 0.01%; +0.00%)</title><rect x="18.4" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="21.42" y="303.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::set_latency (5 samples, 0.01%; -0.01%)</title><rect x="621.9" y="437" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="624.86" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.05%; +0.00%)</title><rect x="944.1" y="357" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="947.12" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (5 samples, 0.01%; 0.00%)</title><rect x="233.0" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="236.04" y="239.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (67 samples, 0.14%; +0.01%)</title><rect x="298.8" y="277" width="1.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="301.80" y="287.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (17 samples, 0.03%; -0.00%)</title><rect x="859.4" y="453" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="862.39" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (6 samples, 0.01%; +0.00%)</title><rect x="944.8" y="373" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="947.77" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (116 samples, 0.24%; -0.01%)</title><rect x="250.6" y="229" width="2.8" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="253.59" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (7 samples, 0.01%; +0.01%)</title><rect x="647.1" y="453" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="650.08" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (120 samples, 0.24%; -0.00%)</title><rect x="16.9" y="373" width="2.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="19.95" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (7 samples, 0.01%; +0.01%)</title><rect x="128.4" y="277" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="131.42" y="287.5" ></text>
</g>
<g >
<title>operator delete (63 samples, 0.13%; -0.00%)</title><rect x="404.0" y="245" width="1.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="406.99" y="255.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (22 samples, 0.04%; +0.04%)</title><rect x="978.9" y="357" width="0.5" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="981.91" y="367.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (5 samples, 0.01%; +0.00%)</title><rect x="24.3" y="517" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="27.28" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (35 samples, 0.07%; -0.01%)</title><rect x="792.2" y="197" width="0.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="795.21" y="207.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (44 samples, 0.09%; -0.01%)</title><rect x="798.7" y="149" width="1.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="801.73" y="159.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (16 samples, 0.03%; +0.02%)</title><rect x="535.9" y="405" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="538.95" y="415.5" ></text>
</g>
<g >
<title>table::query (33 samples, 0.07%; -0.00%)</title><rect x="1176.5" y="501" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1179.49" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (8 samples, 0.02%; 0.00%)</title><rect x="1032.7" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1035.73" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (19 samples, 0.04%; +0.00%)</title><rect x="788.0" y="229" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="791.03" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (5 samples, 0.01%; +0.00%)</title><rect x="1131.4" y="389" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1134.40" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (42 samples, 0.09%; -0.00%)</title><rect x="803.8" y="245" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="806.85" y="255.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (39 samples, 0.08%; +0.00%)</title><rect x="860.2" y="453" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="863.16" y="463.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;long, std::allocator&lt;long&gt; &gt;::push_back_impl&lt;long const&amp;&gt; (7 samples, 0.01%; +0.01%)</title><rect x="676.0" y="437" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="678.98" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (7 samples, 0.01%; -0.01%)</title><rect x="515.6" y="325" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="518.63" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (95 samples, 0.19%; +0.01%)</title><rect x="145.3" y="261" width="2.3" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="148.30" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.01%)</title><rect x="43.0" y="485" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="45.99" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (366 samples, 0.75%; -0.01%)</title><rect x="1025.1" y="213" width="8.8" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1028.06" y="223.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.06%; +0.00%)</title><rect x="605.7" y="421" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="608.75" y="431.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (20 samples, 0.04%; -0.01%)</title><rect x="575.1" y="357" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="578.14" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="406.8" y="277" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="409.76" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.02%; -0.02%)</title><rect x="95.5" y="421" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="98.55" y="431.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%; +0.00%)</title><rect x="944.1" y="373" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="947.07" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (7 samples, 0.01%; +0.00%)</title><rect x="43.4" y="485" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="46.42" y="495.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (129 samples, 0.26%; -0.01%)</title><rect x="847.5" y="405" width="3.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="850.46" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (114 samples, 0.23%; +0.02%)</title><rect x="446.1" y="277" width="2.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="449.14" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,602 samples, 9.38%; +0.01%)</title><rect x="297.5" y="309" width="110.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="300.50" y="319.5" >std::__invoke..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (13 samples, 0.03%; -0.01%)</title><rect x="1144.1" y="485" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1147.08" y="495.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (42 samples, 0.09%; 0.00%)</title><rect x="823.0" y="309" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="825.99" y="319.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (133 samples, 0.27%; +0.01%)</title><rect x="743.2" y="325" width="3.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="746.21" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (71 samples, 0.14%; +0.03%)</title><rect x="263.5" y="325" width="1.8" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="266.55" y="335.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (5 samples, 0.01%; -0.00%)</title><rect x="607.9" y="437" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="610.89" y="447.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (26 samples, 0.05%; +0.01%)</title><rect x="433.5" y="293" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="436.47" y="303.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (43 samples, 0.09%; -0.02%)</title><rect x="675.1" y="453" width="1.0" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="678.11" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (480 samples, 0.98%; -0.02%)</title><rect x="182.9" y="101" width="11.5" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="185.90" y="111.5" ></text>
</g>
<g >
<title>seastar::memory::stats (56 samples, 0.11%; +0.02%)</title><rect x="146.2" y="245" width="1.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="149.24" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (19 samples, 0.04%; +0.01%)</title><rect x="601.4" y="437" width="0.5" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="604.39" y="447.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (5 samples, 0.01%; -0.01%)</title><rect x="947.3" y="389" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="950.27" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (85 samples, 0.17%; -0.01%)</title><rect x="679.9" y="485" width="2.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="682.92" y="495.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (5 samples, 0.01%; 0.00%)</title><rect x="17.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.04" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (5 samples, 0.01%; 0.00%)</title><rect x="18.8" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.82" y="287.5" ></text>
</g>
<g >
<title>operator delete (24 samples, 0.05%; -0.00%)</title><rect x="815.9" y="373" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="818.94" y="383.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (7 samples, 0.01%; +0.01%)</title><rect x="190.0" y="69" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="193.04" y="79.5" ></text>
</g>
<g >
<title>__tls_init (8 samples, 0.02%; +0.01%)</title><rect x="526.1" y="277" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="529.09" y="287.5" ></text>
</g>
<g >
<title>operator delete (74 samples, 0.15%; +0.03%)</title><rect x="577.4" y="341" width="1.7" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="580.35" y="351.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (61 samples, 0.12%; -0.00%)</title><rect x="750.6" y="373" width="1.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="753.61" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (11 samples, 0.02%; +0.01%)</title><rect x="1095.4" y="277" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1098.36" y="287.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (5 samples, 0.01%; -0.00%)</title><rect x="600.0" y="405" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="603.02" y="415.5" ></text>
</g>
<g >
<title>sstring_hash::operator (5 samples, 0.01%; +0.01%)</title><rect x="838.7" y="389" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="841.69" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (19 samples, 0.04%; +0.01%)</title><rect x="429.0" y="341" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="431.97" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (51 samples, 0.10%; +0.01%)</title><rect x="941.0" y="389" width="1.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="944.00" y="399.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (7 samples, 0.01%; 0.00%)</title><rect x="187.4" y="85" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="190.42" y="95.5" ></text>
</g>
<g >
<title>__libc_start_main (48,127 samples, 98.07%; 0.00%)</title><rect x="21.8" y="629" width="1157.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.78" y="639.5" >__libc_start_main</text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (20 samples, 0.04%; +0.00%)</title><rect x="921.4" y="357" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="924.35" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; -0.00%)</title><rect x="586.7" y="389" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="589.73" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (136 samples, 0.28%; -0.01%)</title><rect x="612.0" y="421" width="3.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="615.05" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (26 samples, 0.05%; -0.00%)</title><rect x="1142.1" y="389" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1145.10" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (221 samples, 0.45%; -0.01%)</title><rect x="741.2" y="341" width="5.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="744.16" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (6 samples, 0.01%; +0.01%)</title><rect x="366.4" y="181" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="369.41" y="191.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (8 samples, 0.02%; 0.00%)</title><rect x="394.8" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="397.81" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; 0.00%)</title><rect x="589.2" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="592.16" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (30 samples, 0.06%; +0.02%)</title><rect x="482.1" y="325" width="0.8" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="485.13" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (10 samples, 0.02%; +0.01%)</title><rect x="910.8" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="913.77" y="383.5" ></text>
</g>
<g >
<title>service::client_state::has_access (7 samples, 0.01%; +0.00%)</title><rect x="21.0" y="437" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="24.04" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (5 samples, 0.01%; -0.01%)</title><rect x="108.6" y="421" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="111.61" y="431.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (122 samples, 0.25%; -0.02%)</title><rect x="1185.9" y="613" width="3.0" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1188.94" y="623.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (22 samples, 0.04%; 0.00%)</title><rect x="822.0" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="824.95" y="287.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (46 samples, 0.09%; 0.00%)</title><rect x="747.5" y="405" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="750.54" y="415.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (5 samples, 0.01%; +0.01%)</title><rect x="937.8" y="405" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="940.75" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (122 samples, 0.25%; +0.00%)</title><rect x="644.3" y="469" width="3.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="647.34" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (7 samples, 0.01%; +0.00%)</title><rect x="902.3" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="905.31" y="303.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (22 samples, 0.04%; +0.04%)</title><rect x="232.5" y="229" width="0.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="235.46" y="239.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (5 samples, 0.01%; -0.00%)</title><rect x="725.6" y="293" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="728.58" y="303.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (12 samples, 0.02%; +0.01%)</title><rect x="312.8" y="197" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="315.79" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (126 samples, 0.26%; -0.01%)</title><rect x="1117.6" y="373" width="3.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1120.58" y="383.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (50 samples, 0.10%; +0.03%)</title><rect x="894.3" y="261" width="1.2" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="897.33" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (58 samples, 0.12%; 0.00%)</title><rect x="409.5" y="277" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="412.54" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (7 samples, 0.01%; +0.01%)</title><rect x="416.5" y="373" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="419.47" y="383.5" ></text>
</g>
<g >
<title>operator new (23 samples, 0.05%; +0.00%)</title><rect x="1157.2" y="437" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1160.16" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.01%)</title><rect x="549.1" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="552.15" y="431.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (396 samples, 0.81%; 0.00%)</title><rect x="793.1" y="213" width="9.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="796.05" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (12 samples, 0.02%; +0.00%)</title><rect x="854.8" y="421" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="857.77" y="431.5" ></text>
</g>
<g >
<title>compound_type&lt; (102 samples, 0.21%; -0.03%)</title><rect x="931.2" y="357" width="2.4" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="934.19" y="367.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (7 samples, 0.01%; +0.00%)</title><rect x="844.7" y="325" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="847.65" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="583.1" y="421" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="586.07" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (28 samples, 0.06%; +0.01%)</title><rect x="810.6" y="309" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="813.56" y="319.5" ></text>
</g>
<g >
<title>query::querier_base::close (7 samples, 0.01%; +0.01%)</title><rect x="58.8" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="61.83" y="463.5" ></text>
</g>
<g >
<title>operator new (100 samples, 0.20%; +0.00%)</title><rect x="157.0" y="213" width="2.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="159.98" y="223.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (5 samples, 0.01%; -0.00%)</title><rect x="742.3" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="745.29" y="287.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (6 samples, 0.01%; -0.09%)</title><rect x="246.3" y="213" width="0.1" height="15.0" fill="rgb(110,110,255)" rx="2" ry="2" />
<text  x="249.26" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (33 samples, 0.07%; -0.01%)</title><rect x="321.2" y="165" width="0.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="324.18" y="175.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (276 samples, 0.56%; +0.01%)</title><rect x="686.6" y="485" width="6.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="689.61" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (30 samples, 0.06%; +0.01%)</title><rect x="349.8" y="149" width="0.7" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="352.77" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (67 samples, 0.14%; 0.00%)</title><rect x="885.5" y="293" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="888.45" y="303.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.04%; +0.01%)</title><rect x="831.1" y="373" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="834.09" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (10 samples, 0.02%; +0.01%)</title><rect x="135.2" y="245" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="138.15" y="255.5" ></text>
</g>
<g >
<title>compound_type&lt; (70 samples, 0.14%; +0.00%)</title><rect x="914.8" y="373" width="1.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="917.79" y="383.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (16 samples, 0.03%; +0.01%)</title><rect x="1103.9" y="357" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1106.90" y="367.5" ></text>
</g>
<g >
<title>__tls_init (13 samples, 0.03%; -0.00%)</title><rect x="483.4" y="309" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="486.41" y="319.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (18 samples, 0.04%; -0.00%)</title><rect x="317.7" y="165" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="320.72" y="175.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (11 samples, 0.02%; +0.00%)</title><rect x="725.3" y="293" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="728.32" y="303.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (15 samples, 0.03%; +0.01%)</title><rect x="674.4" y="469" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="677.37" y="479.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (88 samples, 0.18%; +0.01%)</title><rect x="71.5" y="405" width="2.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="74.46" y="415.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (42 samples, 0.09%; -0.04%)</title><rect x="455.9" y="325" width="1.0" height="15.0" fill="rgb(171,171,255)" rx="2" ry="2" />
<text  x="458.93" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; +0.01%)</title><rect x="567.9" y="293" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="570.95" y="303.5" ></text>
</g>
<g >
<title>schema::position (20 samples, 0.04%; +0.04%)</title><rect x="1126.0" y="421" width="0.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1129.02" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (39 samples, 0.08%; +0.00%)</title><rect x="658.2" y="485" width="0.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="661.19" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (16 samples, 0.03%; +0.01%)</title><rect x="935.9" y="405" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="938.88" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (40 samples, 0.08%; +0.04%)</title><rect x="1060.7" y="293" width="0.9" height="15.0" fill="rgb(255,164,164)" rx="2" ry="2" />
<text  x="1063.67" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (9 samples, 0.02%; +0.01%)</title><rect x="450.2" y="309" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="453.18" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (5 samples, 0.01%; +0.01%)</title><rect x="681.7" y="421" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="684.65" y="431.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (174 samples, 0.35%; -0.01%)</title><rect x="464.0" y="277" width="4.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="467.01" y="287.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (72 samples, 0.15%; +0.02%)</title><rect x="522.7" y="293" width="1.7" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="525.70" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (7 samples, 0.01%; +0.00%)</title><rect x="144.8" y="261" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="147.82" y="271.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (25 samples, 0.05%; +0.04%)</title><rect x="746.5" y="357" width="0.6" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="749.53" y="367.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (107 samples, 0.22%; +0.00%)</title><rect x="715.8" y="453" width="2.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="718.82" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (11 samples, 0.02%; -0.01%)</title><rect x="1043.1" y="261" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1046.11" y="271.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (16 samples, 0.03%; +0.02%)</title><rect x="390.5" y="229" width="0.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="393.48" y="239.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (12 samples, 0.02%; +0.00%)</title><rect x="1098.3" y="309" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1101.29" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (44 samples, 0.09%; -0.01%)</title><rect x="944.9" y="373" width="1.1" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="947.94" y="383.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (11 samples, 0.02%; -0.04%)</title><rect x="900.3" y="293" width="0.3" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="903.34" y="303.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::raw_value_view (77 samples, 0.16%; +0.01%)</title><rect x="902.7" y="325" width="1.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="905.72" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%; -0.00%)</title><rect x="831.8" y="357" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="834.76" y="367.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; +0.01%)</title><rect x="668.3" y="453" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="671.33" y="463.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (249 samples, 0.51%; -0.00%)</title><rect x="1072.0" y="325" width="6.0" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1075.01" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;void&gt;::promise_type::run_and_dispose (5 samples, 0.01%; +0.01%)</title><rect x="24.0" y="517" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="26.97" y="527.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (17 samples, 0.03%; -0.01%)</title><rect x="97.1" y="421" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="100.14" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (10 samples, 0.02%; +0.02%)</title><rect x="979.4" y="357" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="982.44" y="367.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%; +0.01%)</title><rect x="504.4" y="213" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="507.38" y="223.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (40 samples, 0.08%; -0.00%)</title><rect x="647.3" y="469" width="0.9" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="650.27" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (10 samples, 0.02%; +0.01%)</title><rect x="854.4" y="405" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="857.39" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (34 samples, 0.07%; 0.00%)</title><rect x="860.2" y="405" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.23" y="415.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (17 samples, 0.03%; +0.01%)</title><rect x="1039.0" y="245" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1042.00" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,621 samples, 9.42%; +0.03%)</title><rect x="142.9" y="309" width="111.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="145.89" y="319.5" >partition_sna..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (15 samples, 0.03%; +0.01%)</title><rect x="1033.2" y="197" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1036.21" y="207.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (9 samples, 0.02%; 0.00%)</title><rect x="468.3" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="471.29" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (6 samples, 0.01%; -0.01%)</title><rect x="69.9" y="373" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="72.89" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (24 samples, 0.05%; +0.01%)</title><rect x="767.6" y="357" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="770.59" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (6 samples, 0.01%; +0.01%)</title><rect x="681.8" y="469" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="684.77" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (9 samples, 0.02%; +0.01%)</title><rect x="524.6" y="309" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="527.57" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (9 samples, 0.02%; +0.01%)</title><rect x="649.1" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="652.10" y="463.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (18 samples, 0.04%; -0.01%)</title><rect x="978.5" y="357" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="981.48" y="367.5" ></text>
</g>
<g >
<title>mutation_querier::consume (1,705 samples, 3.47%; +0.01%)</title><rect x="323.7" y="197" width="41.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="326.66" y="207.5" >mut..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (37 samples, 0.08%; -0.00%)</title><rect x="1046.6" y="261" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1049.65" y="271.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (25 samples, 0.05%; 0.00%)</title><rect x="600.3" y="405" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="603.34" y="415.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (13 samples, 0.03%; 0.00%)</title><rect x="535.2" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="538.15" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (171 samples, 0.35%; -0.00%)</title><rect x="794.4" y="165" width="4.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="797.40" y="175.5" ></text>
</g>
<g >
<title>auth::resource::resource (123 samples, 0.25%; -0.00%)</title><rect x="766.1" y="389" width="2.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="769.07" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (12 samples, 0.02%; +0.00%)</title><rect x="802.3" y="197" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="805.29" y="207.5" ></text>
</g>
<g >
<title>__dynamic_cast (13 samples, 0.03%; +0.01%)</title><rect x="11.8" y="581" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="14.83" y="591.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (174 samples, 0.35%; 0.00%)</title><rect x="10.2" y="613" width="4.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.19" y="623.5" ></text>
</g>
<g >
<title>tombstone::apply (13 samples, 0.03%; +0.01%)</title><rect x="388.2" y="197" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="391.24" y="207.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (14 samples, 0.03%; -0.02%)</title><rect x="32.1" y="485" width="0.4" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="35.12" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (51 samples, 0.10%; +0.09%)</title><rect x="1137.2" y="421" width="1.2" height="15.0" fill="rgb(255,119,119)" rx="2" ry="2" />
<text  x="1140.17" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (51 samples, 0.10%; +0.01%)</title><rect x="925.2" y="325" width="1.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="928.20" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (10 samples, 0.02%; -0.01%)</title><rect x="615.1" y="373" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="618.05" y="383.5" ></text>
</g>
<g >
<title>cql3::selection::simple_selection::is_aggregate (28 samples, 0.06%; +0.03%)</title><rect x="870.5" y="437" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="873.45" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; 0.00%)</title><rect x="802.8" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="805.81" y="207.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (14 samples, 0.03%; -0.01%)</title><rect x="229.0" y="165" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="232.02" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (6 samples, 0.01%; -0.00%)</title><rect x="1067.7" y="325" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1070.71" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (10 samples, 0.02%; +0.00%)</title><rect x="843.1" y="373" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="846.11" y="383.5" ></text>
</g>
<g >
<title>compound_type&lt; (51 samples, 0.10%; +0.10%)</title><rect x="913.3" y="389" width="1.2" height="15.0" fill="rgb(255,106,106)" rx="2" ry="2" />
<text  x="916.32" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.01%; 0.00%)</title><rect x="933.4" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="936.40" y="319.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (124 samples, 0.25%; +0.02%)</title><rect x="179.9" y="101" width="3.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="182.92" y="111.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (549 samples, 1.12%; -0.01%)</title><rect x="1154.3" y="485" width="13.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1157.29" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (24 samples, 0.05%; +0.00%)</title><rect x="802.6" y="213" width="0.6" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="805.65" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (13 samples, 0.03%; +0.00%)</title><rect x="738.3" y="293" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="741.33" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (13 samples, 0.03%; +0.01%)</title><rect x="909.4" y="357" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="912.38" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (14 samples, 0.03%; -0.01%)</title><rect x="654.9" y="469" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="657.89" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (5 samples, 0.01%; +0.00%)</title><rect x="42.9" y="485" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="45.87" y="495.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (2,684 samples, 5.47%; +0.05%)</title><rect x="451.9" y="341" width="64.5" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="454.91" y="351.5" >memtabl..</text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (10 samples, 0.02%; +0.00%)</title><rect x="1052.2" y="277" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1055.20" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (8 samples, 0.02%; +0.01%)</title><rect x="194.4" y="101" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="197.44" y="111.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (71 samples, 0.14%; 0.00%)</title><rect x="789.4" y="197" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="792.37" y="207.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (21 samples, 0.04%; 0.00%)</title><rect x="1143.1" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.07" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.01%)</title><rect x="1151.5" y="485" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1154.51" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (16 samples, 0.03%; -0.01%)</title><rect x="792.6" y="165" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="795.64" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (15 samples, 0.03%; +0.00%)</title><rect x="609.4" y="437" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="612.40" y="447.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (12 samples, 0.02%; -0.00%)</title><rect x="916.2" y="357" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="919.18" y="367.5" ></text>
</g>
<g >
<title>database::find_column_family (45 samples, 0.09%; +0.00%)</title><rect x="1020.8" y="245" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1023.80" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (129 samples, 0.26%; +0.03%)</title><rect x="673.0" y="485" width="3.1" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="676.05" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (24 samples, 0.05%; +0.01%)</title><rect x="1107.5" y="389" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1110.53" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (14 samples, 0.03%; +0.01%)</title><rect x="212.6" y="133" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="215.65" y="143.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (6 samples, 0.01%; 0.00%)</title><rect x="20.2" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.24" y="399.5" ></text>
</g>
<g >
<title>row::compact_and_expire (802 samples, 1.63%; -0.01%)</title><rect x="368.6" y="213" width="19.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="371.57" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (40 samples, 0.08%; -0.02%)</title><rect x="724.8" y="341" width="0.9" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="727.77" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (70 samples, 0.14%; -0.00%)</title><rect x="35.6" y="437" width="1.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="38.56" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (19 samples, 0.04%; -0.02%)</title><rect x="527.9" y="245" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="530.92" y="255.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (297 samples, 0.61%; -0.04%)</title><rect x="919.5" y="373" width="7.1" height="15.0" fill="rgb(162,162,255)" rx="2" ry="2" />
<text  x="922.48" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (6 samples, 0.01%; -0.01%)</title><rect x="898.8" y="277" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="901.80" y="287.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (122 samples, 0.25%; +0.00%)</title><rect x="991.8" y="293" width="2.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="994.80" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (14 samples, 0.03%; 0.00%)</title><rect x="38.8" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.83" y="447.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (15 samples, 0.03%; +0.01%)</title><rect x="615.3" y="421" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="618.34" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.01%; +0.00%)</title><rect x="590.9" y="405" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="593.89" y="415.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (50 samples, 0.10%; -0.01%)</title><rect x="434.7" y="277" width="1.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="437.70" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (11 samples, 0.02%; -0.02%)</title><rect x="803.0" y="197" width="0.2" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="805.96" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (6 samples, 0.01%; -0.00%)</title><rect x="417.1" y="373" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="420.14" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (12 samples, 0.02%; +0.01%)</title><rect x="853.2" y="469" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="856.21" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (6 samples, 0.01%; +0.01%)</title><rect x="845.5" y="341" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="848.47" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (72 samples, 0.15%; +0.02%)</title><rect x="543.0" y="325" width="1.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="545.97" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (8 samples, 0.02%; +0.01%)</title><rect x="603.4" y="437" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="606.41" y="447.5" ></text>
</g>
<g >
<title>operator new (75 samples, 0.15%; 0.00%)</title><rect x="988.9" y="325" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="991.92" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (32 samples, 0.07%; +0.00%)</title><rect x="986.5" y="261" width="0.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="989.49" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (31 samples, 0.06%; +0.03%)</title><rect x="983.9" y="325" width="0.8" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="986.94" y="335.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (11 samples, 0.02%; +0.01%)</title><rect x="226.1" y="181" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="229.09" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (19 samples, 0.04%; +0.01%)</title><rect x="220.7" y="149" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="223.72" y="159.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (312 samples, 0.64%; +0.03%)</title><rect x="538.2" y="405" width="7.5" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="541.18" y="415.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (12 samples, 0.02%; +0.01%)</title><rect x="159.8" y="213" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="162.77" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (45 samples, 0.09%; -0.04%)</title><rect x="1163.5" y="453" width="1.0" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="1166.46" y="463.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (11 samples, 0.02%; -0.01%)</title><rect x="431.0" y="325" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="434.02" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (5 samples, 0.01%; -0.00%)</title><rect x="420.1" y="405" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="423.05" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="496.2" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="499.22" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (26 samples, 0.05%; +0.01%)</title><rect x="140.2" y="261" width="0.6" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="143.18" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (12 samples, 0.02%; 0.00%)</title><rect x="15.4" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.36" y="303.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.09%; 0.00%)</title><rect x="1188.9" y="629" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1191.89" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (7 samples, 0.01%; +0.01%)</title><rect x="1140.6" y="421" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1143.61" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (165 samples, 0.34%; -0.00%)</title><rect x="667.2" y="485" width="4.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="670.20" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (21 samples, 0.04%; 0.00%)</title><rect x="647.7" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="650.70" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (172 samples, 0.35%; -0.02%)</title><rect x="1132.2" y="421" width="4.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1135.20" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (5 samples, 0.01%; +0.01%)</title><rect x="1136.3" y="421" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1139.33" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (104 samples, 0.21%; +0.02%)</title><rect x="998.1" y="277" width="2.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1001.08" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (8 samples, 0.02%; 0.00%)</title><rect x="331.0" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="333.97" y="175.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (7,417 samples, 15.11%; +0.06%)</title><rect x="111.2" y="405" width="178.3" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="114.18" y="415.5" >flat_mutation_reader::p..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (9 samples, 0.02%; +0.00%)</title><rect x="679.6" y="453" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="682.61" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::stats (5 samples, 0.01%; +0.01%)</title><rect x="530.4" y="309" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="533.39" y="319.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (72 samples, 0.15%; -0.00%)</title><rect x="71.8" y="389" width="1.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="74.84" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (29 samples, 0.06%; +0.01%)</title><rect x="1029.2" y="149" width="0.7" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1032.17" y="159.5" ></text>
</g>
<g >
<title>__start_context (286 samples, 0.58%; 0.00%)</title><rect x="14.5" y="613" width="6.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.47" y="623.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (56 samples, 0.11%; -0.01%)</title><rect x="891.7" y="277" width="1.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="894.73" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (37 samples, 0.08%; -0.00%)</title><rect x="1142.7" y="357" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1145.73" y="367.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (57 samples, 0.12%; +0.01%)</title><rect x="198.3" y="101" width="1.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="201.32" y="111.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (138 samples, 0.28%; +0.01%)</title><rect x="209.0" y="117" width="3.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="211.99" y="127.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (7 samples, 0.01%; 0.00%)</title><rect x="21.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.04" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (60 samples, 0.12%; -0.01%)</title><rect x="853.6" y="453" width="1.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="856.64" y="463.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (5 samples, 0.01%; +0.01%)</title><rect x="1097.1" y="245" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1100.14" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (17 samples, 0.03%; +0.01%)</title><rect x="386.8" y="149" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="389.80" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (49 samples, 0.10%; +0.00%)</title><rect x="752.2" y="389" width="1.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="755.22" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (6 samples, 0.01%; -0.01%)</title><rect x="1150.9" y="469" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1153.93" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (13 samples, 0.03%; -0.00%)</title><rect x="384.3" y="165" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="387.30" y="175.5" ></text>
</g>
<g >
<title>__tls_init (19 samples, 0.04%; +0.01%)</title><rect x="494.8" y="245" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="497.76" y="255.5" ></text>
</g>
<g >
<title>row::external_memory_usage (291 samples, 0.59%; +0.03%)</title><rect x="206.1" y="149" width="7.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="209.06" y="159.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (8 samples, 0.02%; 0.00%)</title><rect x="14.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.74" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::empty (5 samples, 0.01%; +0.00%)</title><rect x="646.7" y="453" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="649.74" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (106 samples, 0.22%; -0.01%)</title><rect x="1129.0" y="405" width="2.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1132.00" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (162 samples, 0.33%; -0.01%)</title><rect x="724.3" y="373" width="3.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="727.33" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (12 samples, 0.02%; +0.01%)</title><rect x="828.3" y="421" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="831.30" y="431.5" ></text>
</g>
<g >
<title>freeze (13 samples, 0.03%; 0.00%)</title><rect x="1143.1" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.07" y="207.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (90 samples, 0.18%; -0.02%)</title><rect x="477.5" y="197" width="2.1" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="480.47" y="207.5" ></text>
</g>
<g >
<title>tracing::add_table_name (10 samples, 0.02%; +0.01%)</title><rect x="1141.5" y="437" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1144.48" y="447.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (7 samples, 0.01%; -0.02%)</title><rect x="290.5" y="389" width="0.1" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="293.45" y="399.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; +0.02%)</title><rect x="408.4" y="293" width="0.7" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="411.37" y="303.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (17 samples, 0.03%; +0.02%)</title><rect x="368.2" y="197" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="371.16" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (8 samples, 0.02%; +0.01%)</title><rect x="812.7" y="341" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="815.74" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (14 samples, 0.03%; +0.00%)</title><rect x="635.6" y="485" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="638.63" y="495.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (16 samples, 0.03%; +0.01%)</title><rect x="734.6" y="389" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="737.60" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (16 samples, 0.03%; -0.00%)</title><rect x="449.7" y="277" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="452.67" y="287.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (5 samples, 0.01%; 0.00%)</title><rect x="19.1" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.06" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (159 samples, 0.32%; -0.01%)</title><rect x="563.2" y="293" width="3.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="566.16" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (12 samples, 0.02%; +0.01%)</title><rect x="235.4" y="245" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="238.37" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::future (5 samples, 0.01%; 0.00%)</title><rect x="983.7" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="986.70" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; -0.02%)</title><rect x="405.3" y="229" width="0.2" height="15.0" fill="rgb(190,190,255)" rx="2" ry="2" />
<text  x="408.26" y="239.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (62 samples, 0.13%; +0.00%)</title><rect x="275.2" y="309" width="1.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="278.21" y="319.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (12 samples, 0.02%; 0.00%)</title><rect x="21.4" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.45" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (81 samples, 0.17%; +0.00%)</title><rect x="1069.9" y="309" width="1.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1072.87" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (7 samples, 0.01%; -0.01%)</title><rect x="981.3" y="357" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="984.32" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (12 samples, 0.02%; -0.02%)</title><rect x="700.1" y="453" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="703.14" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (5 samples, 0.01%; -0.00%)</title><rect x="618.1" y="405" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="621.08" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (13 samples, 0.03%; +0.01%)</title><rect x="536.9" y="421" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="539.93" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (12 samples, 0.02%; +0.01%)</title><rect x="1144.5" y="501" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1147.48" y="511.5" ></text>
</g>
<g >
<title>operator delete (41 samples, 0.08%; -0.01%)</title><rect x="613.9" y="373" width="1.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="616.90" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (114 samples, 0.23%; +0.01%)</title><rect x="1035.7" y="229" width="2.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1038.73" y="239.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (268 samples, 0.55%; +0.00%)</title><rect x="627.1" y="501" width="6.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="630.07" y="511.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (20 samples, 0.04%; +0.02%)</title><rect x="11.3" y="581" width="0.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="14.35" y="591.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (18 samples, 0.04%; +0.02%)</title><rect x="800.6" y="117" width="0.4" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="803.58" y="127.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (35 samples, 0.07%; +0.05%)</title><rect x="75.6" y="453" width="0.9" height="15.0" fill="rgb(255,155,155)" rx="2" ry="2" />
<text  x="78.64" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.01%; 0.00%)</title><rect x="15.5" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.48" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (43 samples, 0.09%; -0.01%)</title><rect x="1162.4" y="453" width="1.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1165.42" y="463.5" ></text>
</g>
<g >
<title>seastar::gate::leave (8 samples, 0.02%; +0.01%)</title><rect x="61.0" y="405" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="64.00" y="415.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (25 samples, 0.05%; -0.03%)</title><rect x="891.1" y="261" width="0.6" height="15.0" fill="rgb(179,179,255)" rx="2" ry="2" />
<text  x="894.06" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (25 samples, 0.05%; -0.01%)</title><rect x="693.4" y="485" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="696.41" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (14 samples, 0.03%; +0.01%)</title><rect x="1034.7" y="213" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1037.67" y="223.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (37 samples, 0.08%; 0.00%)</title><rect x="1142.7" y="373" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.73" y="383.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (352 samples, 0.72%; +0.00%)</title><rect x="582.5" y="437" width="8.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="585.54" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (1,873 samples, 3.82%; +0.07%)</title><rect x="1055.5" y="357" width="45.0" height="15.0" fill="rgb(255,134,134)" rx="2" ry="2" />
<text  x="1058.47" y="367.5" >serv..</text>
</g>
<g >
<title>seastar::memory::allocate (23 samples, 0.05%; -0.01%)</title><rect x="512.7" y="261" width="0.5" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="515.70" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (37 samples, 0.08%; 0.00%)</title><rect x="1142.7" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.73" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (66 samples, 0.13%; +0.00%)</title><rect x="1159.5" y="437" width="1.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1162.49" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (8 samples, 0.02%; +0.00%)</title><rect x="35.2" y="421" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="38.25" y="431.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (13 samples, 0.03%; +0.01%)</title><rect x="602.9" y="421" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="605.86" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (25 samples, 0.05%; 0.00%)</title><rect x="1125.3" y="421" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.32" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (15 samples, 0.03%; -0.03%)</title><rect x="1054.0" y="293" width="0.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1057.03" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (20 samples, 0.04%; +0.00%)</title><rect x="742.4" y="293" width="0.5" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="745.41" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (13 samples, 0.03%; 0.00%)</title><rect x="859.4" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.41" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (6 samples, 0.01%; +0.00%)</title><rect x="1099.5" y="341" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1102.52" y="351.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (25 samples, 0.05%; +0.01%)</title><rect x="214.6" y="165" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="217.64" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (16 samples, 0.03%; +0.02%)</title><rect x="528.6" y="245" width="0.4" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="531.59" y="255.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (18 samples, 0.04%; 0.00%)</title><rect x="1011.0" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1013.99" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (26 samples, 0.05%; 0.00%)</title><rect x="1142.1" y="373" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.10" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (121 samples, 0.25%; -0.00%)</title><rect x="238.8" y="213" width="2.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="241.81" y="223.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (5 samples, 0.01%; -0.01%)</title><rect x="441.7" y="293" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="444.74" y="303.5" ></text>
</g>
<g >
<title>schema::column_at (64 samples, 0.13%; +0.01%)</title><rect x="210.6" y="101" width="1.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="213.63" y="111.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::validate (6 samples, 0.01%; -0.00%)</title><rect x="826.8" y="421" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="829.83" y="431.5" ></text>
</g>
<g >
<title>operator new (46 samples, 0.09%; 0.00%)</title><rect x="841.0" y="405" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="844.04" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (18 samples, 0.04%; +0.02%)</title><rect x="756.6" y="325" width="0.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="759.58" y="335.5" ></text>
</g>
<g >
<title>dht::tri_compare (78 samples, 0.16%; +0.02%)</title><rect x="470.0" y="261" width="1.9" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="473.02" y="271.5" ></text>
</g>
<g >
<title>__tls_init (6 samples, 0.01%; +0.01%)</title><rect x="484.6" y="293" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="487.64" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (9 samples, 0.02%; +0.01%)</title><rect x="899.1" y="277" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="902.11" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (49 samples, 0.10%; -0.01%)</title><rect x="830.8" y="389" width="1.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="833.75" y="399.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (6 samples, 0.01%; +0.01%)</title><rect x="412.5" y="357" width="0.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="415.48" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (40 samples, 0.08%; +0.03%)</title><rect x="481.2" y="325" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="484.17" y="335.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;, &amp;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;::_link&gt;::expire (5 samples, 0.01%; -0.00%)</title><rect x="1178.5" y="437" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1181.48" y="447.5" ></text>
</g>
<g >
<title>database::find_column_family (82 samples, 0.17%; -0.01%)</title><rect x="1059.7" y="341" width="1.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1062.66" y="351.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (28 samples, 0.06%; +0.00%)</title><rect x="65.9" y="405" width="0.7" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="68.88" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (7 samples, 0.01%; +0.01%)</title><rect x="832.1" y="421" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="835.12" y="431.5" ></text>
</g>
<g >
<title>schema::column_at (22 samples, 0.04%; +0.01%)</title><rect x="387.3" y="181" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="390.33" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (24 samples, 0.05%; -0.02%)</title><rect x="670.5" y="453" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="673.52" y="463.5" ></text>
</g>
<g >
<title>__strlen_avx2 (124 samples, 0.25%; +0.06%)</title><rect x="1017.8" y="245" width="3.0" height="15.0" fill="rgb(255,149,149)" rx="2" ry="2" />
<text  x="1020.82" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (12 samples, 0.02%; +0.01%)</title><rect x="803.5" y="245" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="806.51" y="255.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (125 samples, 0.25%; +0.02%)</title><rect x="1154.7" y="469" width="3.0" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1157.70" y="479.5" ></text>
</g>
<g >
<title>operator delete (39 samples, 0.08%; +0.01%)</title><rect x="57.4" y="453" width="0.9" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="60.37" y="463.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (22 samples, 0.04%; -0.01%)</title><rect x="559.0" y="293" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="562.03" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (14 samples, 0.03%; +0.02%)</title><rect x="876.7" y="421" width="0.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="879.73" y="431.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (7 samples, 0.01%; -0.02%)</title><rect x="391.2" y="229" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="394.17" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (316 samples, 0.64%; +0.01%)</title><rect x="32.7" y="485" width="7.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="35.75" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (13 samples, 0.03%; +0.01%)</title><rect x="662.0" y="469" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="665.03" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (153 samples, 0.31%; +0.03%)</title><rect x="217.5" y="165" width="3.7" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="220.50" y="175.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (1,070 samples, 2.18%; +0.08%)</title><rect x="485.0" y="325" width="25.7" height="15.0" fill="rgb(255,123,123)" rx="2" ry="2" />
<text  x="488.00" y="335.5" >m..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (22 samples, 0.04%; 0.00%)</title><rect x="795.2" y="133" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="798.17" y="143.5" ></text>
</g>
<g >
<title>operator new (54 samples, 0.11%; -0.01%)</title><rect x="533.9" y="405" width="1.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="536.85" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (32 samples, 0.07%; -0.00%)</title><rect x="768.3" y="373" width="0.7" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="771.26" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (151 samples, 0.31%; -0.00%)</title><rect x="397.1" y="197" width="3.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="400.07" y="207.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (7 samples, 0.01%; -0.01%)</title><rect x="801.9" y="69" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="804.95" y="79.5" ></text>
</g>
<g >
<title>dht::shard_of (39 samples, 0.08%; -0.00%)</title><rect x="1007.8" y="277" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1010.77" y="287.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (5 samples, 0.01%; +0.00%)</title><rect x="263.3" y="325" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="266.31" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (13 samples, 0.03%; +0.00%)</title><rect x="767.3" y="325" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="770.28" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (66 samples, 0.13%; +0.02%)</title><rect x="1036.0" y="197" width="1.6" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1039.04" y="207.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (5 samples, 0.01%; -0.00%)</title><rect x="524.8" y="309" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="527.79" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (8 samples, 0.02%; +0.00%)</title><rect x="663.1" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="666.09" y="479.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (10 samples, 0.02%; +0.01%)</title><rect x="197.8" y="85" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="200.79" y="95.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (5 samples, 0.01%; +0.00%)</title><rect x="365.5" y="197" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="368.47" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (17 samples, 0.03%; -0.00%)</title><rect x="682.2" y="485" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="685.21" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (58 samples, 0.12%; -0.02%)</title><rect x="246.9" y="197" width="1.4" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="249.93" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (6 samples, 0.01%; -0.01%)</title><rect x="833.5" y="437" width="0.2" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="836.54" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (10 samples, 0.02%; +0.00%)</title><rect x="827.7" y="389" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="830.65" y="399.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (11 samples, 0.02%; +0.00%)</title><rect x="569.1" y="309" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="572.08" y="319.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (113 samples, 0.23%; 0.00%)</title><rect x="360.2" y="165" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="363.21" y="175.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (5 samples, 0.01%; -0.01%)</title><rect x="252.2" y="197" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="255.22" y="207.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (23 samples, 0.05%; +0.02%)</title><rect x="700.4" y="453" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="703.43" y="463.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (24 samples, 0.05%; -0.02%)</title><rect x="899.7" y="277" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="902.69" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (6 samples, 0.01%; 0.00%)</title><rect x="1176.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.63" y="383.5" ></text>
</g>
<g >
<title>db::filter_for_query (25 samples, 0.05%; -0.04%)</title><rect x="1067.3" y="341" width="0.6" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="1070.25" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.01%)</title><rect x="78.4" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="81.38" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (11 samples, 0.02%; 0.00%)</title><rect x="1063.8" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1066.84" y="287.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (13 samples, 0.03%; 0.00%)</title><rect x="859.4" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.41" y="431.5" ></text>
</g>
<g >
<title>operator delete (47 samples, 0.10%; +0.03%)</title><rect x="563.4" y="277" width="1.1" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="566.38" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (326 samples, 0.66%; +0.02%)</title><rect x="497.2" y="245" width="7.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="500.16" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (165 samples, 0.34%; -0.01%)</title><rect x="990.8" y="325" width="3.9" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="993.77" y="335.5" ></text>
</g>
<g >
<title>operator new (67 samples, 0.14%; 0.00%)</title><rect x="1036.0" y="213" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1039.04" y="223.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (7 samples, 0.01%; +0.00%)</title><rect x="681.4" y="437" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="684.37" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (62 samples, 0.13%; +0.02%)</title><rect x="436.9" y="229" width="1.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="439.91" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (37 samples, 0.08%; -0.00%)</title><rect x="1142.7" y="389" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1145.73" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (7 samples, 0.01%; +0.01%)</title><rect x="698.0" y="469" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="701.00" y="479.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (5 samples, 0.01%; +0.01%)</title><rect x="738.9" y="357" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="741.88" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (39 samples, 0.08%; +0.01%)</title><rect x="649.6" y="469" width="0.9" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="652.60" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (12 samples, 0.02%; -0.01%)</title><rect x="605.2" y="437" width="0.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="608.17" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (19 samples, 0.04%; +0.01%)</title><rect x="645.4" y="421" width="0.4" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="648.37" y="431.5" ></text>
</g>
<g >
<title>validation::validate_cql_key (5 samples, 0.01%; 0.00%)</title><rect x="860.5" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.47" y="383.5" ></text>
</g>
<g >
<title>database::has_keyspace (119 samples, 0.24%; 0.00%)</title><rect x="843.0" y="405" width="2.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="845.97" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (68 samples, 0.14%; +0.05%)</title><rect x="221.4" y="181" width="1.7" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="224.42" y="191.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (141 samples, 0.29%; +0.03%)</title><rect x="541.3" y="373" width="3.4" height="15.0" fill="rgb(255,173,173)" rx="2" ry="2" />
<text  x="544.33" y="383.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (338 samples, 0.69%; +0.01%)</title><rect x="1081.4" y="277" width="8.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1084.44" y="287.5" ></text>
</g>
<g >
<title>sstring_hash::operator (25 samples, 0.05%; -0.00%)</title><rect x="825.6" y="309" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="828.61" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (6 samples, 0.01%; +0.00%)</title><rect x="544.6" y="277" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="547.55" y="287.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.05%; -0.01%)</title><rect x="660.5" y="421" width="0.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="663.47" y="431.5" ></text>
</g>
<g >
<title>dht::tri_compare (11 samples, 0.02%; +0.00%)</title><rect x="1095.0" y="245" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1098.05" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (13 samples, 0.03%; +0.02%)</title><rect x="199.4" y="85" width="0.3" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="202.37" y="95.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (15 samples, 0.03%; 0.00%)</title><rect x="1143.1" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.07" y="223.5" ></text>
</g>
<g >
<title>table::query (22,517 samples, 45.88%; +0.20%)</title><rect x="80.8" y="453" width="541.4" height="15.0" fill="rgb(255,0,0)" rx="2" ry="2" />
<text  x="83.76" y="463.5" >table::query</text>
</g>
<g >
<title>cql3_parser::CqlParser::query (205 samples, 0.42%; 0.00%)</title><rect x="15.3" y="405" width="4.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.27" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (12 samples, 0.02%; +0.01%)</title><rect x="367.8" y="165" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="370.76" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;managed_bytes&gt;::_M_reset (12 samples, 0.02%; +0.02%)</title><rect x="910.5" y="373" width="0.3" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="913.48" y="383.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (22 samples, 0.04%; +0.02%)</title><rect x="507.0" y="229" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="509.97" y="239.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (141 samples, 0.29%; 0.00%)</title><rect x="435.9" y="277" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="438.90" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (6 samples, 0.01%; +0.00%)</title><rect x="854.9" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="857.92" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (19 samples, 0.04%; -0.01%)</title><rect x="804.4" y="213" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="807.38" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (18 samples, 0.04%; -0.00%)</title><rect x="617.6" y="389" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="620.60" y="399.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (7 samples, 0.01%; +0.00%)</title><rect x="1003.4" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1006.44" y="303.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (42 samples, 0.09%; +0.01%)</title><rect x="801.2" y="117" width="1.0" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="804.15" y="127.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (41 samples, 0.08%; +0.01%)</title><rect x="131.5" y="245" width="1.0" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="134.50" y="255.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (89 samples, 0.18%; 0.00%)</title><rect x="17.3" y="357" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.26" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (15 samples, 0.03%; +0.01%)</title><rect x="621.2" y="389" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="624.16" y="399.5" ></text>
</g>
<g >
<title>tracing::add_table_name (34 samples, 0.07%; +0.02%)</title><rect x="1139.6" y="421" width="0.8" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="1142.60" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (11 samples, 0.02%; 0.00%)</title><rect x="1122.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.87" y="415.5" ></text>
</g>
<g >
<title>operator delete (30 samples, 0.06%; -0.01%)</title><rect x="1124.4" y="421" width="0.8" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1127.43" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (5 samples, 0.01%; -0.01%)</title><rect x="272.3" y="341" width="0.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="275.30" y="351.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (5 samples, 0.01%; -0.01%)</title><rect x="61.5" y="405" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="64.50" y="415.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (15 samples, 0.03%; +0.03%)</title><rect x="245.9" y="213" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="248.90" y="223.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (21 samples, 0.04%; +0.03%)</title><rect x="294.2" y="325" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="297.18" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (7 samples, 0.01%; +0.01%)</title><rect x="429.5" y="341" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="432.45" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (3,650 samples, 7.44%; +0.02%)</title><rect x="147.9" y="261" width="87.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="150.89" y="271.5" >partition_..</text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.01%; +0.00%)</title><rect x="438.4" y="245" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="441.40" y="255.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (278 samples, 0.57%; +0.02%)</title><rect x="132.9" y="261" width="6.7" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="135.94" y="271.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (3,321 samples, 6.77%; +0.03%)</title><rect x="309.8" y="229" width="79.8" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="312.76" y="239.5" >compact_m..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (38 samples, 0.08%; +0.00%)</title><rect x="785.8" y="229" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="788.84" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (15 samples, 0.03%; +0.01%)</title><rect x="529.8" y="277" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="532.84" y="287.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (8 samples, 0.02%; +0.00%)</title><rect x="78.2" y="453" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="81.19" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (52 samples, 0.11%; -0.01%)</title><rect x="785.5" y="245" width="1.3" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="788.50" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (6,191 samples, 12.62%; -0.02%)</title><rect x="957.3" y="405" width="148.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="960.35" y="415.5" >service::storage_pr..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (5 samples, 0.01%; +0.01%)</title><rect x="236.1" y="245" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="239.09" y="255.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.01%; +0.01%)</title><rect x="619.4" y="405" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="622.36" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (11 samples, 0.02%; +0.01%)</title><rect x="772.8" y="357" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="775.76" y="367.5" ></text>
</g>
<g >
<title>tombstone::apply (16 samples, 0.03%; +0.02%)</title><rect x="389.2" y="213" width="0.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="392.23" y="223.5" ></text>
</g>
<g >
<title>query::result::result (49 samples, 0.10%; +0.03%)</title><rect x="591.5" y="421" width="1.2" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="594.54" y="431.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (33 samples, 0.07%; +0.01%)</title><rect x="798.8" y="117" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="801.85" y="127.5" ></text>
</g>
<g >
<title>dht::shard_of (7 samples, 0.01%; -0.03%)</title><rect x="1002.9" y="293" width="0.2" height="15.0" fill="rgb(179,179,255)" rx="2" ry="2" />
<text  x="1005.91" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (17 samples, 0.03%; +0.02%)</title><rect x="265.3" y="325" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="268.25" y="335.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (27 samples, 0.06%; +0.00%)</title><rect x="739.2" y="373" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="742.19" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (10 samples, 0.02%; +0.01%)</title><rect x="132.5" y="245" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="135.48" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (5 samples, 0.01%; +0.01%)</title><rect x="515.4" y="325" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="518.36" y="335.5" ></text>
</g>
<g >
<title>seastar::preempt_io_context::reset_preemption_monitor (13 samples, 0.03%; +0.01%)</title><rect x="1144.8" y="501" width="0.3" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1147.77" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; +0.00%)</title><rect x="686.1" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="689.05" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (57 samples, 0.12%; -0.01%)</title><rect x="1177.5" y="517" width="1.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1180.47" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (8 samples, 0.02%; 0.00%)</title><rect x="1176.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1179.61" y="431.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (157 samples, 0.32%; -0.01%)</title><rect x="974.3" y="341" width="3.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="977.32" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (11 samples, 0.02%; +0.01%)</title><rect x="704.0" y="405" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="706.99" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; +0.00%)</title><rect x="700.0" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="703.02" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (30 samples, 0.06%; +0.03%)</title><rect x="213.3" y="149" width="0.7" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="216.27" y="159.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (17 samples, 0.03%; -0.01%)</title><rect x="388.8" y="197" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="391.82" y="207.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (44 samples, 0.09%; +0.01%)</title><rect x="330.8" y="181" width="1.1" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="333.80" y="191.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (9 samples, 0.02%; -0.00%)</title><rect x="16.3" y="245" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="19.30" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (206 samples, 0.42%; -0.02%)</title><rect x="97.7" y="421" width="4.9" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="100.67" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (6 samples, 0.01%; +0.01%)</title><rect x="263.0" y="309" width="0.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="265.99" y="319.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,747 samples, 7.64%; +0.00%)</title><rect x="305.0" y="261" width="90.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="307.98" y="271.5" >mutation_f..</text>
</g>
<g >
<title>seastar::internal::promise_base::clear (25 samples, 0.05%; +0.03%)</title><rect x="604.6" y="437" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="607.57" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (45 samples, 0.09%; -0.01%)</title><rect x="766.5" y="357" width="1.1" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="769.51" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (7 samples, 0.01%; 0.00%)</title><rect x="1031.7" y="165" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1034.67" y="175.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (12 samples, 0.02%; +0.01%)</title><rect x="814.9" y="261" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="817.86" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (23 samples, 0.05%; 0.00%)</title><rect x="1171.9" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1174.87" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::stats (37 samples, 0.08%; -0.01%)</title><rect x="495.3" y="245" width="0.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="498.29" y="255.5" ></text>
</g>
<g >
<title>reader_permit::set_max_result_size (5 samples, 0.01%; -0.00%)</title><rect x="62.5" y="453" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="65.46" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (17 samples, 0.03%; +0.02%)</title><rect x="650.9" y="437" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="653.88" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.01%; +0.01%)</title><rect x="651.3" y="453" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="654.29" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (42 samples, 0.09%; -0.01%)</title><rect x="936.3" y="405" width="1.0" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="939.26" y="415.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (16 samples, 0.03%; 0.00%)</title><rect x="727.7" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="730.68" y="303.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (13 samples, 0.03%; +0.00%)</title><rect x="1136.7" y="421" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1139.74" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (27 samples, 0.06%; -0.01%)</title><rect x="806.1" y="245" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="809.06" y="255.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (46 samples, 0.09%; +0.00%)</title><rect x="1050.7" y="245" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1053.74" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (6 samples, 0.01%; +0.00%)</title><rect x="1170.7" y="469" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1173.69" y="479.5" ></text>
</g>
<g >
<title>validation::validate_column_family (352 samples, 0.72%; +0.01%)</title><rect x="817.8" y="389" width="8.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="820.84" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (27 samples, 0.06%; +0.01%)</title><rect x="665.2" y="485" width="0.6" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="668.16" y="495.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (61 samples, 0.12%; -0.01%)</title><rect x="803.4" y="261" width="1.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="806.39" y="271.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (26 samples, 0.05%; +0.04%)</title><rect x="73.6" y="421" width="0.6" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="76.60" y="431.5" ></text>
</g>
<g >
<title>reader_permit::mark_used (5 samples, 0.01%; +0.01%)</title><rect x="50.8" y="469" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="53.78" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (17 samples, 0.03%; +0.00%)</title><rect x="440.6" y="277" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="443.63" y="287.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.05%; -0.01%)</title><rect x="1148.7" y="485" width="0.6" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1151.72" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (17 samples, 0.03%; -0.01%)</title><rect x="509.2" y="277" width="0.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="512.21" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (136 samples, 0.28%; -0.01%)</title><rect x="1117.3" y="389" width="3.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1120.34" y="399.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (49 samples, 0.10%; +0.00%)</title><rect x="721.9" y="405" width="1.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="724.88" y="415.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (50 samples, 0.10%; +0.08%)</title><rect x="473.4" y="213" width="1.2" height="15.0" fill="rgb(255,121,121)" rx="2" ry="2" />
<text  x="476.43" y="223.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (44 samples, 0.09%; +0.01%)</title><rect x="619.5" y="405" width="1.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="622.52" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1,191 samples, 2.43%; -0.01%)</title><rect x="1147.0" y="501" width="28.7" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1150.03" y="511.5" >se..</text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (30 samples, 0.06%; -0.02%)</title><rect x="292.1" y="373" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="295.06" y="383.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (8 samples, 0.02%; +0.01%)</title><rect x="896.2" y="261" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="899.23" y="271.5" ></text>
</g>
<g >
<title>posix_memalign (38 samples, 0.08%; +0.00%)</title><rect x="198.5" y="85" width="0.9" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="201.46" y="95.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (27 samples, 0.06%; +0.04%)</title><rect x="47.4" y="485" width="0.7" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="50.41" y="495.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (12 samples, 0.02%; +0.01%)</title><rect x="742.5" y="277" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="745.49" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (45 samples, 0.09%; -0.01%)</title><rect x="948.2" y="389" width="1.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="951.16" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (19 samples, 0.04%; -0.01%)</title><rect x="632.3" y="469" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="635.27" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (8 samples, 0.02%; 0.00%)</title><rect x="859.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.46" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (7 samples, 0.01%; +0.01%)</title><rect x="870.2" y="437" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="873.23" y="447.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (372 samples, 0.76%; +0.01%)</title><rect x="313.1" y="197" width="9.0" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="316.13" y="207.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (74 samples, 0.15%; -0.01%)</title><rect x="409.2" y="293" width="1.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="412.16" y="303.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (14 samples, 0.03%; -0.00%)</title><rect x="218.9" y="133" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="221.90" y="143.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (33 samples, 0.07%; -0.03%)</title><rect x="917.7" y="341" width="0.8" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="920.75" y="351.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (10 samples, 0.02%; +0.01%)</title><rect x="1055.0" y="325" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1057.99" y="335.5" ></text>
</g>
<g >
<title>operator delete (14 samples, 0.03%; 0.00%)</title><rect x="634.2" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="637.22" y="495.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (8 samples, 0.02%; +0.01%)</title><rect x="405.5" y="245" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="408.51" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.02%; +0.01%)</title><rect x="788.5" y="229" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="791.51" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (10 samples, 0.02%; +0.01%)</title><rect x="1104.3" y="357" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1107.28" y="367.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (8 samples, 0.02%; 0.00%)</title><rect x="1142.8" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.80" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (19 samples, 0.04%; +0.01%)</title><rect x="139.2" y="245" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="142.17" y="255.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (6 samples, 0.01%; 0.00%)</title><rect x="21.1" y="421" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.06" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (9 samples, 0.02%; -0.01%)</title><rect x="877.5" y="421" width="0.3" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="880.54" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (17 samples, 0.03%; +0.00%)</title><rect x="764.0" y="357" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="767.03" y="367.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (20 samples, 0.04%; 0.00%)</title><rect x="1045.7" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1048.71" y="287.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (246 samples, 0.50%; 0.00%)</title><rect x="15.1" y="485" width="5.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.10" y="495.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (27 samples, 0.06%; -0.01%)</title><rect x="891.0" y="277" width="0.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="894.01" y="287.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (24 samples, 0.05%; -0.01%)</title><rect x="695.2" y="469" width="0.6" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="698.22" y="479.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (25 samples, 0.05%; -0.00%)</title><rect x="214.0" y="165" width="0.6" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="217.02" y="175.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (9 samples, 0.02%; -0.00%)</title><rect x="482.9" y="325" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="485.86" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (621 samples, 1.27%; +0.04%)</title><rect x="372.4" y="181" width="14.9" height="15.0" fill="rgb(255,162,162)" rx="2" ry="2" />
<text  x="375.40" y="191.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (30 samples, 0.06%; +0.01%)</title><rect x="915.5" y="357" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="918.46" y="367.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (7 samples, 0.01%; 0.00%)</title><rect x="21.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.04" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::~modification_statement (8 samples, 0.02%; 0.00%)</title><rect x="640.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="643.03" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.01%; -0.00%)</title><rect x="15.4" y="261" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="18.36" y="271.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (369 samples, 0.75%; -0.02%)</title><rect x="471.9" y="261" width="8.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="474.89" y="271.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (8 samples, 0.02%; +0.01%)</title><rect x="1027.0" y="197" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1029.98" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (11 samples, 0.02%; +0.01%)</title><rect x="1044.6" y="277" width="0.3" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="1047.63" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (34 samples, 0.07%; -0.02%)</title><rect x="1021.1" y="213" width="0.8" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="1024.06" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (9 samples, 0.02%; +0.01%)</title><rect x="481.0" y="325" width="0.2" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="483.96" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (6 samples, 0.01%; -0.00%)</title><rect x="792.0" y="197" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="794.99" y="207.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (65 samples, 0.13%; -0.00%)</title><rect x="789.5" y="181" width="1.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="792.52" y="191.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (21 samples, 0.04%; +0.02%)</title><rect x="1145.6" y="501" width="0.5" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="1148.64" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (40 samples, 0.08%; +0.00%)</title><rect x="807.9" y="293" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="810.89" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (9 samples, 0.02%; +0.01%)</title><rect x="394.6" y="197" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="397.59" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (42 samples, 0.09%; +0.01%)</title><rect x="270.4" y="357" width="1.0" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="273.42" y="367.5" ></text>
</g>
<g >
<title>query::querier&lt; (18,509 samples, 37.71%; -0.03%)</title><rect x="104.5" y="437" width="445.0" height="15.0" fill="rgb(173,173,255)" rx="2" ry="2" />
<text  x="107.49" y="447.5" >query::querier&lt;</text>
</g>
<g >
<title>reader_permit::impl::on_admission (38 samples, 0.08%; 0.00%)</title><rect x="65.0" y="405" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.97" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (153 samples, 0.31%; -0.01%)</title><rect x="724.5" y="357" width="3.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="727.55" y="367.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (24 samples, 0.05%; +0.03%)</title><rect x="241.9" y="197" width="0.5" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="244.86" y="207.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (14 samples, 0.03%; -0.00%)</title><rect x="714.0" y="485" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="717.02" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (57 samples, 0.12%; -0.01%)</title><rect x="1127.5" y="389" width="1.4" height="15.0" fill="rgb(197,197,255)" rx="2" ry="2" />
<text  x="1130.51" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (35 samples, 0.07%; 0.00%)</title><rect x="121.9" y="309" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="124.90" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (9 samples, 0.02%; +0.00%)</title><rect x="225.9" y="181" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="228.87" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (15 samples, 0.03%; +0.02%)</title><rect x="204.3" y="133" width="0.4" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="207.33" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (37 samples, 0.08%; +0.04%)</title><rect x="399.5" y="165" width="0.9" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="402.54" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (29 samples, 0.06%; +0.04%)</title><rect x="897.8" y="277" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="900.84" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (3,030 samples, 6.17%; +0.00%)</title><rect x="753.9" y="421" width="72.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="756.86" y="431.5" >cql3::st..</text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (40 samples, 0.08%; -0.01%)</title><rect x="814.3" y="309" width="0.9" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="817.26" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (176 samples, 0.36%; -0.01%)</title><rect x="1061.9" y="325" width="4.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1064.87" y="335.5" ></text>
</g>
<g >
<title>sstring_hash::operator (42 samples, 0.09%; 0.00%)</title><rect x="1065.0" y="293" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1068.02" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (6 samples, 0.01%; +0.01%)</title><rect x="278.5" y="293" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="281.50" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (7 samples, 0.01%; +0.00%)</title><rect x="1120.6" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1123.61" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (47 samples, 0.10%; +0.00%)</title><rect x="690.4" y="453" width="1.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="693.41" y="463.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (193 samples, 0.39%; -0.01%)</title><rect x="355.6" y="165" width="4.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="358.57" y="175.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (143 samples, 0.29%; +0.03%)</title><rect x="636.8" y="501" width="3.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="639.81" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (18 samples, 0.04%; -0.07%)</title><rect x="1114.1" y="357" width="0.4" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="1117.09" y="367.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (103 samples, 0.21%; +0.01%)</title><rect x="136.6" y="245" width="2.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="139.59" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (98 samples, 0.20%; +0.00%)</title><rect x="848.2" y="373" width="2.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="851.21" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (763 samples, 1.55%; -0.03%)</title><rect x="491.4" y="293" width="18.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="494.37" y="303.5" ></text>
</g>
<g >
<title>operator new (33 samples, 0.07%; -0.00%)</title><rect x="853.8" y="437" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="856.84" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (21 samples, 0.04%; -0.03%)</title><rect x="514.4" y="309" width="0.5" height="15.0" fill="rgb(179,179,255)" rx="2" ry="2" />
<text  x="517.35" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (46 samples, 0.09%; +0.01%)</title><rect x="199.7" y="117" width="1.1" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="202.69" y="127.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (13 samples, 0.03%; +0.01%)</title><rect x="939.9" y="405" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="942.94" y="415.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (8 samples, 0.02%; +0.01%)</title><rect x="879.9" y="405" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="882.88" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (9 samples, 0.02%; +0.01%)</title><rect x="261.2" y="277" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="264.22" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (92 samples, 0.19%; +0.02%)</title><rect x="907.2" y="357" width="2.2" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="910.17" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (56 samples, 0.11%; +0.03%)</title><rect x="755.7" y="341" width="1.3" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="758.66" y="351.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (8 samples, 0.02%; +0.01%)</title><rect x="880.6" y="389" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="883.57" y="399.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (20 samples, 0.04%; -0.01%)</title><rect x="388.7" y="213" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="391.75" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (47,940 samples, 97.69%; -0.05%)</title><rect x="24.6" y="517" width="1152.7" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="27.62" y="527.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (11 samples, 0.02%; 0.00%)</title><rect x="859.4" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.44" y="399.5" ></text>
</g>
<g >
<title>operator delete (12 samples, 0.02%; -0.01%)</title><rect x="659.7" y="437" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="662.70" y="447.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (21 samples, 0.04%; +0.00%)</title><rect x="683.9" y="485" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="686.94" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (48 samples, 0.10%; 0.00%)</title><rect x="15.7" y="293" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.65" y="303.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (5 samples, 0.01%; +0.00%)</title><rect x="600.2" y="405" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="603.22" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (12 samples, 0.02%; -0.00%)</title><rect x="580.0" y="341" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="582.97" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (343 samples, 0.70%; -0.01%)</title><rect x="395.1" y="261" width="8.2" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="398.07" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (32 samples, 0.07%; -0.01%)</title><rect x="628.9" y="485" width="0.8" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="631.90" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (5 samples, 0.01%; 0.00%)</title><rect x="859.5" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.46" y="319.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (16 samples, 0.03%; +0.00%)</title><rect x="746.0" y="261" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="749.02" y="271.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (5 samples, 0.01%; 0.00%)</title><rect x="524.2" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="527.24" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.01%; +0.00%)</title><rect x="791.2" y="213" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="794.15" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (21 samples, 0.04%; -0.05%)</title><rect x="141.8" y="277" width="0.5" height="15.0" fill="rgb(158,158,255)" rx="2" ry="2" />
<text  x="144.84" y="287.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (17 samples, 0.03%; -0.02%)</title><rect x="319.0" y="181" width="0.4" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="321.97" y="191.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::operator= (8 samples, 0.02%; +0.01%)</title><rect x="903.8" y="309" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="906.82" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (27 samples, 0.06%; +0.01%)</title><rect x="792.4" y="181" width="0.6" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="795.38" y="191.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (656 samples, 1.34%; +0.00%)</title><rect x="787.5" y="245" width="15.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="790.50" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (465 samples, 0.95%; +0.02%)</title><rect x="641.5" y="485" width="11.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="644.50" y="495.5" ></text>
</g>
<g >
<title>operator delete (53 samples, 0.11%; +0.02%)</title><rect x="555.8" y="325" width="1.2" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="558.76" y="335.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (157 samples, 0.32%; +0.02%)</title><rect x="842.2" y="421" width="3.7" height="15.0" fill="rgb(255,188,188)" rx="2" ry="2" />
<text  x="845.15" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (22 samples, 0.04%; -0.00%)</title><rect x="759.4" y="309" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="762.39" y="319.5" ></text>
</g>
<g >
<title>validation::is_cql_key_invalid (5 samples, 0.01%; 0.00%)</title><rect x="860.5" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.47" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (33 samples, 0.07%; +0.02%)</title><rect x="656.2" y="485" width="0.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="659.24" y="495.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (4,875 samples, 9.93%; 0.00%)</title><rect x="294.0" y="341" width="117.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="297.04" y="351.5" >seastar::futur..</text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::take_value (5 samples, 0.01%; 0.00%)</title><rect x="537.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="540.53" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (23 samples, 0.05%; 0.00%)</title><rect x="947.6" y="373" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="950.61" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (21 samples, 0.04%; +0.03%)</title><rect x="622.2" y="469" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="625.22" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (6 samples, 0.01%; +0.00%)</title><rect x="608.9" y="437" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="611.87" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (5 samples, 0.01%; -0.00%)</title><rect x="249.2" y="229" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="252.17" y="239.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (322 samples, 0.66%; -0.04%)</title><rect x="376.6" y="165" width="7.7" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="379.56" y="175.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (7 samples, 0.01%; -0.02%)</title><rect x="50.6" y="469" width="0.2" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="53.61" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (16 samples, 0.03%; +0.00%)</title><rect x="1077.6" y="309" width="0.4" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1080.62" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (322 samples, 0.66%; +0.00%)</title><rect x="395.5" y="245" width="7.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="398.50" y="255.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (7 samples, 0.01%; +0.00%)</title><rect x="1054.6" y="293" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1057.58" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (30 samples, 0.06%; +0.00%)</title><rect x="241.7" y="213" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="244.72" y="223.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (643 samples, 1.31%; +0.01%)</title><rect x="1080.7" y="309" width="15.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1083.74" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (6 samples, 0.01%; +0.01%)</title><rect x="104.3" y="421" width="0.2" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="107.35" y="431.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (93 samples, 0.19%; +0.01%)</title><rect x="12.1" y="581" width="2.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="15.14" y="591.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (7 samples, 0.01%; -0.01%)</title><rect x="607.7" y="437" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="610.72" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (30 samples, 0.06%; +0.03%)</title><rect x="630.2" y="485" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="633.18" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (10 samples, 0.02%; +0.01%)</title><rect x="898.5" y="277" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="901.53" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (6 samples, 0.01%; -0.01%)</title><rect x="524.4" y="309" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="527.43" y="319.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10 samples, 0.02%; -0.00%)</title><rect x="669.2" y="437" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="672.15" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (6 samples, 0.01%; -0.02%)</title><rect x="535.3" y="389" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="538.32" y="399.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (13 samples, 0.03%; -0.00%)</title><rect x="510.9" y="325" width="0.3" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="513.92" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (29 samples, 0.06%; +0.02%)</title><rect x="691.5" y="453" width="0.7" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="694.54" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (16 samples, 0.03%; -0.03%)</title><rect x="602.8" y="437" width="0.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="605.79" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (21 samples, 0.04%; 0.00%)</title><rect x="269.6" y="325" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="272.63" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (7 samples, 0.01%; +0.01%)</title><rect x="618.8" y="437" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="621.78" y="447.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (238 samples, 0.48%; -0.06%)</title><rect x="1083.4" y="245" width="5.8" height="15.0" fill="rgb(142,142,255)" rx="2" ry="2" />
<text  x="1086.44" y="255.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (12 samples, 0.02%; 0.00%)</title><rect x="17.4" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.36" y="335.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (18 samples, 0.04%; -0.01%)</title><rect x="854.7" y="437" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="857.65" y="447.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (13 samples, 0.03%; +0.00%)</title><rect x="166.9" y="197" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="169.89" y="207.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (35 samples, 0.07%; 0.00%)</title><rect x="1142.7" y="341" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.73" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (10 samples, 0.02%; +0.01%)</title><rect x="246.4" y="213" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="249.40" y="223.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (22 samples, 0.04%; +0.01%)</title><rect x="1065.2" y="261" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1068.16" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (66 samples, 0.13%; 0.00%)</title><rect x="15.3" y="325" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.31" y="335.5" ></text>
</g>
<g >
<title>dht::sharder::shard_of (6 samples, 0.01%; -0.01%)</title><rect x="1003.1" y="293" width="0.1" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1006.08" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (8 samples, 0.02%; +0.00%)</title><rect x="1141.9" y="453" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="1144.91" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (7 samples, 0.01%; 0.00%)</title><rect x="147.7" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="150.73" y="271.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (5 samples, 0.01%; +0.00%)</title><rect x="21.1" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="24.08" y="415.5" ></text>
</g>
<g >
<title>abstract_type::bound_value_needs_to_be_reserialized (18 samples, 0.04%; +0.02%)</title><rect x="888.3" y="293" width="0.4" height="15.0" fill="rgb(255,190,190)" rx="2" ry="2" />
<text  x="891.29" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (6 samples, 0.01%; -0.02%)</title><rect x="319.6" y="181" width="0.1" height="15.0" fill="rgb(184,184,255)" rx="2" ry="2" />
<text  x="322.57" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (136 samples, 0.28%; -0.01%)</title><rect x="250.2" y="261" width="3.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="253.23" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (26 samples, 0.05%; 0.00%)</title><rect x="1142.1" y="437" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.10" y="447.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (2,233 samples, 4.55%; +0.04%)</title><rect x="1001.1" y="309" width="53.7" height="15.0" fill="rgb(255,171,171)" rx="2" ry="2" />
<text  x="1004.06" y="319.5" >servi..</text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (34 samples, 0.07%; +0.01%)</title><rect x="567.0" y="293" width="0.8" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="569.99" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (25 samples, 0.05%; +0.01%)</title><rect x="654.6" y="485" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="657.63" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (6 samples, 0.01%; -0.00%)</title><rect x="424.2" y="357" width="0.2" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="427.21" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (7 samples, 0.01%; +0.01%)</title><rect x="1026.4" y="181" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1029.40" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (72 samples, 0.15%; +0.00%)</title><rect x="815.8" y="389" width="1.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="818.85" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (14 samples, 0.03%; -0.00%)</title><rect x="852.4" y="453" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="855.44" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (6,561 samples, 13.37%; -0.07%)</title><rect x="950.4" y="421" width="157.7" height="15.0" fill="rgb(132,132,255)" rx="2" ry="2" />
<text  x="953.35" y="431.5" >cql3::statements::se..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (37 samples, 0.08%; 0.00%)</title><rect x="1142.7" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.73" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (19 samples, 0.04%; -0.00%)</title><rect x="806.3" y="229" width="0.4" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="809.25" y="239.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (159 samples, 0.32%; +0.01%)</title><rect x="526.4" y="293" width="3.8" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="529.38" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (18 samples, 0.04%; -0.01%)</title><rect x="1153.2" y="485" width="0.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="1156.16" y="495.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (286 samples, 0.58%; 0.00%)</title><rect x="14.5" y="597" width="6.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.47" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (11 samples, 0.02%; +0.00%)</title><rect x="258.9" y="277" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="261.91" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (17 samples, 0.03%; -0.03%)</title><rect x="903.4" y="277" width="0.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="906.39" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (17 samples, 0.03%; +0.01%)</title><rect x="516.0" y="325" width="0.4" height="15.0" fill="rgb(255,197,197)" rx="2" ry="2" />
<text  x="519.04" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (8 samples, 0.02%; +0.01%)</title><rect x="405.7" y="245" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="408.75" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (59 samples, 0.12%; -0.01%)</title><rect x="821.4" y="309" width="1.4" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="824.42" y="319.5" ></text>
</g>
<g >
<title>[unknown] (174 samples, 0.35%; 0.00%)</title><rect x="10.2" y="597" width="4.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.19" y="607.5" ></text>
</g>
<g >
<title>table::as_mutation_source (112 samples, 0.23%; +0.01%)</title><rect x="619.1" y="437" width="2.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="622.07" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (61 samples, 0.12%; +0.01%)</title><rect x="382.8" y="133" width="1.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="385.83" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (40 samples, 0.08%; +0.03%)</title><rect x="1160.1" y="373" width="1.0" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1163.11" y="383.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (8 samples, 0.02%; -0.00%)</title><rect x="1142.3" y="245" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1145.32" y="255.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (14 samples, 0.03%; +0.00%)</title><rect x="831.6" y="373" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="834.57" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (80 samples, 0.16%; +0.02%)</title><rect x="385.3" y="165" width="1.9" height="15.0" fill="rgb(255,184,184)" rx="2" ry="2" />
<text  x="388.28" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (43 samples, 0.09%; +0.00%)</title><rect x="651.6" y="453" width="1.0" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="654.60" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (11,351 samples, 23.13%; -0.01%)</title><rect x="868.8" y="453" width="272.9" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="871.79" y="463.5" >seastar::noncopyable_function&lt;seasta..</text>
</g>
<g >
<title>absl::container_internal::operator== (5 samples, 0.01%; -0.00%)</title><rect x="1062.0" y="309" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1065.01" y="319.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (24 samples, 0.05%; +0.01%)</title><rect x="1169.4" y="469" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="1172.37" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (16 samples, 0.03%; +0.01%)</title><rect x="1053.6" y="293" width="0.4" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="1056.64" y="303.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (82 samples, 0.17%; -0.01%)</title><rect x="539.0" y="389" width="1.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="541.95" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; 0.00%)</title><rect x="505.1" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="508.10" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (11,215 samples, 22.85%; +0.06%)</title><rect x="871.1" y="437" width="269.7" height="15.0" fill="rgb(255,149,149)" rx="2" ry="2" />
<text  x="874.12" y="447.5" >cql3::statements::select_statement::..</text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (128 samples, 0.26%; -0.06%)</title><rect x="1132.4" y="405" width="3.0" height="15.0" fill="rgb(151,151,255)" rx="2" ry="2" />
<text  x="1135.37" y="415.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (11 samples, 0.02%; +0.00%)</title><rect x="791.6" y="213" width="0.3" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="794.63" y="223.5" ></text>
</g>
<g >
<title>database::apply_in_memory (21 samples, 0.04%; 0.00%)</title><rect x="1142.1" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.10" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (5 samples, 0.01%; -0.00%)</title><rect x="265.9" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="268.90" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (26 samples, 0.05%; -0.00%)</title><rect x="1142.1" y="357" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1145.10" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="590.5" y="373" width="0.1" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="593.45" y="383.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (7 samples, 0.01%; -0.00%)</title><rect x="14.7" y="501" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="17.74" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (17 samples, 0.03%; -0.02%)</title><rect x="600.9" y="437" width="0.4" height="15.0" fill="rgb(188,188,255)" rx="2" ry="2" />
<text  x="603.94" y="447.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (28 samples, 0.06%; 0.00%)</title><rect x="1065.0" y="277" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1068.02" y="287.5" ></text>
</g>
<g >
<title>query_result_builder::consume (1,789 samples, 3.65%; -0.01%)</title><rect x="322.6" y="213" width="43.0" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="325.58" y="223.5" >quer..</text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (5 samples, 0.01%; +0.00%)</title><rect x="980.7" y="357" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="983.72" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (5 samples, 0.01%; -0.00%)</title><rect x="1120.1" y="357" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1123.06" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="1042.8" y="261" width="0.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1045.82" y="271.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (463 samples, 0.94%; -0.00%)</title><rect x="834.8" y="437" width="11.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="837.79" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (17 samples, 0.03%; +0.02%)</title><rect x="262.1" y="309" width="0.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="265.13" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (11 samples, 0.02%; +0.00%)</title><rect x="947.9" y="357" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="950.90" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (12 samples, 0.02%; -0.01%)</title><rect x="217.1" y="149" width="0.3" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="220.09" y="159.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (9 samples, 0.02%; +0.00%)</title><rect x="598.0" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="600.96" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (15 samples, 0.03%; -0.01%)</title><rect x="1172.4" y="453" width="0.4" height="15.0" fill="rgb(194,194,255)" rx="2" ry="2" />
<text  x="1175.42" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (6 samples, 0.01%; +0.00%)</title><rect x="1142.8" y="261" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1145.85" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.05%; +0.03%)</title><rect x="545.8" y="389" width="0.6" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="548.76" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (252 samples, 0.51%; +0.08%)</title><rect x="206.6" y="133" width="6.0" height="15.0" fill="rgb(255,125,125)" rx="2" ry="2" />
<text  x="209.59" y="143.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type&gt; (8 samples, 0.02%; +0.01%)</title><rect x="965.6" y="373" width="0.2" height="15.0" fill="rgb(255,194,194)" rx="2" ry="2" />
<text  x="968.57" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (22 samples, 0.04%; +0.01%)</title><rect x="330.3" y="181" width="0.5" height="15.0" fill="rgb(255,203,203)" rx="2" ry="2" />
<text  x="333.27" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (8 samples, 0.02%; +0.00%)</title><rect x="403.0" y="213" width="0.2" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="406.00" y="223.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (7 samples, 0.01%; +0.01%)</title><rect x="648.0" y="389" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="650.99" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (6 samples, 0.01%; -0.01%)</title><rect x="950.2" y="421" width="0.2" height="15.0" fill="rgb(203,203,255)" rx="2" ry="2" />
<text  x="953.21" y="431.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (33 samples, 0.07%; +0.00%)</title><rect x="804.0" y="229" width="0.8" height="15.0" fill="rgb(255,205,205)" rx="2" ry="2" />
<text  x="807.04" y="239.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (24 samples, 0.05%; -0.00%)</title><rect x="1079.1" y="325" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1082.08" y="335.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (5 samples, 0.01%; 0.00%)</title><rect x="1144.9" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.87" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (37 samples, 0.08%; -0.00%)</title><rect x="1021.0" y="229" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1023.99" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (20 samples, 0.04%; 0.00%)</title><rect x="859.4" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.37" y="511.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (5 samples, 0.01%; +0.00%)</title><rect x="1068.0" y="341" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1071.00" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (19 samples, 0.04%; +0.03%)</title><rect x="134.6" y="245" width="0.5" height="15.0" fill="rgb(255,181,181)" rx="2" ry="2" />
<text  x="137.62" y="255.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (5 samples, 0.01%; +0.01%)</title><rect x="1031.8" y="165" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1034.84" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (9 samples, 0.02%; +0.00%)</title><rect x="694.8" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="697.76" y="479.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (84 samples, 0.17%; +0.07%)</title><rect x="1133.4" y="389" width="2.0" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="1136.42" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (19 samples, 0.04%; -0.00%)</title><rect x="1130.4" y="373" width="0.5" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="1133.42" y="383.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (61 samples, 0.12%; +0.00%)</title><rect x="605.5" y="437" width="1.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="608.48" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (23 samples, 0.05%; +0.00%)</title><rect x="681.2" y="453" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="684.22" y="463.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (8 samples, 0.02%; -0.01%)</title><rect x="560.8" y="293" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="563.76" y="303.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.01%; 0.00%)</title><rect x="1125.2" y="421" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.15" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (30 samples, 0.06%; -0.01%)</title><rect x="1026.3" y="197" width="0.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1029.26" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (18 samples, 0.04%; +0.01%)</title><rect x="954.4" y="341" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="957.41" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; 0.00%)</title><rect x="555.0" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="557.99" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (37 samples, 0.08%; +0.03%)</title><rect x="993.6" y="277" width="0.9" height="15.0" fill="rgb(255,179,179)" rx="2" ry="2" />
<text  x="996.58" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (6 samples, 0.01%; -0.00%)</title><rect x="807.2" y="277" width="0.1" height="15.0" fill="rgb(205,205,255)" rx="2" ry="2" />
<text  x="810.19" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.00%)</title><rect x="564.4" y="261" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="567.37" y="271.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (21 samples, 0.04%; 0.00%)</title><rect x="214.1" y="149" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="217.11" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (8 samples, 0.02%; +0.01%)</title><rect x="1125.7" y="405" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1128.73" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (7 samples, 0.01%; -0.00%)</title><rect x="1105.1" y="389" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1108.05" y="399.5" ></text>
</g>
</g>
</svg>
